{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappingsuBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAwWK;;;;;;AAXA;;;;;;AAjBA;;;;;;AAVA;;;;;;AA9CA;;;;;;AAlDA;;;;;;AA3DA;;;;;;AAXA;;;;;;AAXA;;;;;;AAbA;;;;;;AAXA;;;;;;AATA;;;;;;AAdA;;;;;;AAdA;;;;;;AA5BA;;;;;;AAjBA;;;;;;AAfA;;;;;;AAdA;;;;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AA4BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AASA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAaA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AA2DA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAkDA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AA8CA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAUA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAWA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAvWA;;;;;;AAEG;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AAJX;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;AAOH;;;;;;AAEU;;AAAoC;;AAApC;AAAP;AACe;AAA2B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA6B;;;;AAAxD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAV;AAAP;AACe;AAAiC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgB;;;;AAAjD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAV;AAAP;AACe;AAAmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgB;;;;AAAnD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAV;AAAP;AACe;AAA2C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgB;;;;AAA3D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAV;AAAP;AACe;AAAiD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgB;;;;AAAjE;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAV;AAAP;;AAEH;;;;;;AAEG;AAAiD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAyB;;;;AAA1E;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA5C;AAAP;AAEA;AAAoC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA2B;;;;AAA/D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA5C;AAAP;AAES;AAAiD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgB;;;;AAAjE;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;;;;AACW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA5C;AAAP;AAEa;AAAoC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAkB;;;;AAAtD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA7C;AAAP;;AAEH;;;;;;AAES;AAAiC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAqB;;;;AAAtD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA2C;;;;AAA3C;;;;;;;;AAAiC;;;;AAAjC;;;;AAAA;;;;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;AAA4C;;;;AAA5C;;;;;;;;AAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAlC;;;;AAAA;;;;;;AAAA;;;AAC2B;;AAAT;AAAuB;;AAAR;AAAf;AAAjB;AAAP;AAEM;AAAgC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAA7C;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA+B;;AAAA;AAAA;AAAA;AAAa;;;;AAA5C;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAEH;;;;;;AAEiB;AAoBV;AAAY;;;AAAZ;AAA8B;;;AAA9B;AAAgD;;;AAAhD;AAAkE;;;AAAlE;AAJA;AAAA;;;AAAA;AACA;;;AADA;AAEA;;;AAFA;AAGA;;;AAHA;AAAA;;AAAA;AAKA;;;AALA;AAMO;;;;AAtBG;;;;;;;;AAEV;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;;;AAfU;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;;;;;;;;;;AAAjB;AAAP;;AAEH;;;;;;AAES;AAAgD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAiB;;;;AAAjE;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA4C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAiB;;;;AAA7D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA+B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA8B;;;;AAA7D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAAiC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAiB;;;;AAAlD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AACiB;;AAAhB;AAAP;;AAEH;;;;;;AAES;AAEF;;AAAA;AACA;;AACA;;AAAA;AADA;;AAAA;;AACA;;AACO;;;;AALL;;;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKH;;;;;;AAES;AAEF;;AACO;;;;AAHL;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;;;AAKiB;;AAAhB;AAAP;;AAEH;;;;;;;AAEmB;AAAyC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAY;;;;AAArD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAyC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;AAA7D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AAAyC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAyB;;;;AAAlE;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;;AAEH;;;;;;;AAEmB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAArD;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;AAA5D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AACc;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgC;;;;AAD9C;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;;AAAA;AAAP;;AAEH;;;;;;;AAEmB;AAAmD;;;;AAAnD;;;;AAAyC;;;;AAAzC;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;AAAX;AAAP;AAEgB;AAAyC;AAAA;AAAkB;;;;AAA3D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAgE;;;;AAAhE;;;;AAAyC;;;;AAAzC;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAEH;;;;;;;AAEmB;AAAoD;;;;AAApD;;;;AAA0C;;;;AAA1C;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;;AAAX;AAAP;AAEgB;AAA0C;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAmB;;;;AAA7D;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAkE;;;;AAAlE;;;;AAA0C;;;;AAA1C;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAEH;;;;;;;AAGkB;AAIX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AARI;;;;;;;;AAMX;;;;AACA;;;;AAPW;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAf;AAAA;;AAUc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAAA;;AACO;;;AAAY;;AAAZ;AAAP;AACO;;;AAAY;;AAAZ;AAAP;AACO;AAAiB;AAAjB;AAAP;AAC0B;;AAAnB;AAAP;AAGe;AAIX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;;AACA;;AAAA;;AAEA;;AACO;;;;AARI;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;AAIX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AARI;;;;;;;;AAMX;;;;AACA;;;;AAPW;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;AAEjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AANU;;;;;;;;AAIjB;;;;AACA;;;;AALirB;;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;;AAEH;;;;;;;;;;AAGiB;AAEV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AANG;;;;;;;;AAIV;;;;AACA;;;;AALU;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAd;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAQA;;AAAA;;AAAA;;AAAA;;AACY;;AAAL;AAAP;AACY;;AAAL;AAAP;AACY;AAAL;AAAP;AACa;;AAAN;AAAP;AAGgB;AAEZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;;AACA;;AAAA;;AAEA;;AACO;;;;AANK;;;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAhB;;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAGgB;AAEZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AANK;;;;;;;;AAIZ;;;;AACA;;;;AALY;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAhB;;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAGqB;AAEjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO;;;;AANU;;;;;;;;AAIjB;;;;AACA;;;;AALirB;;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;;AAEH;;;;;;AAGiB;AAER;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAM;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAc;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAtB;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAgB;;AAAhB;AAAmB;;AAAnB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAEM;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAd;AAAF;AAAA;AAAA;;;AAAE;AAAF;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAqC;AAArC;AAAA;AAAA;;AAAA;AAAgD;;AAAhD;AAAgE;;AAAhE;AAAA;AAAA;;;AAAgE;;AAAhE;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAIU;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAhC;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAC8C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA9C;AAAY;;AAAZ;AAA6B;;;;;;;;;;AAA7B;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAHR;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAMO;;;;AARG;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAAA;;AAAA;;AAUA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;;;;;;;;;;AAAN;AAAP;AACa;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAN;AAAP;AACgB;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAEH;;;;;;AAEkB;AAAqC;;;;AAArC;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;AAAqD;;;;AAArD;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;AAAqC;;;;AAArC;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAEH;;;;;;AAEkB;AAEV;AAAD;AAAA;AAAA;;AAAA;AAAY;;AAAZ;AAAA;AAAA;;;AAAY;;AAAZ;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AACiB;AAAjB;AAAA;AAAA;;AAAA;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AACO;;;;AAJI;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMf;AACe;AAEV;AAAD;AAAA;AAAA;;AAAA;AAAY;;AAAZ;AAAA;AAAA;;;AAAY;;AAAZ;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AACiB;AAAjB;AAAA;AAAA;;AAAA;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AACO;;;;AAJI;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMR;AAAP;;AAEH;;;;;;AAEiD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAxC;AAAgB;;AAAhB;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAN;AACc;AAGH;;;;AAHG;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;;;;AAKP;;AAAA;AAAA;;AAAA;AAAP;AACO;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAP;;AAEH;;;;;;AAES;;AAAN;AACM;;AAAN;AAAA;;AAEc;AACiC;;AAAZ;;AAAwB;;;;;;;;;;AAD7C;;;;AACqB;;;;AAAO;;;;AAAK;;;;AADjC;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAGO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AACqB;;AAAA;AAAO;;AAAA;AAAK;;AAAL;;AAAA;;AAAK;;AAAY;;;;AAD7C;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAGO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AACkC;;AAAP;;AAAwB;;;;;;;;;;AADnD;;;;AAC2B;;;;AAAO;;;;AAAK;;;;AADvC;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAGO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AAC2B;;AAAA;AAAO;;AAAA;AAAK;;AAAL;;AAAA;;AAAK;;AAAY;;;;AADnD;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAGO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AAGV;;AADA;;AAGO;;;;;;;;;;AALG;;;;AAEV;;;;AACA;;;;AACA;;;;AAJU;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAOO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAEc;AAEV;;AAAA;AACA;;AAAA;AACA;;AADA;;AAAA;;AACA;;AACO;;;;AALG;;;;;;;;;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAd;;AAAA;;AAAA;;AAOO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2 1 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"s1\" 0x 0x6231 0x9bf81913 0x0000000000000001 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 \"log 1\" \"s\" 0x62 0x02 0x01 0xb4b4334e \"echo: tuple\" 0x0000000000000002 0x00 \"echo: s1\" \"s2\" 0x33 \"echo: s2\" 0x636f6e76657274656431 0x34 0x0000000000000003 0x576f726c6431 0x576f726c6432 0x576f726c6433 0x576f726c6434 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0xd6c2ac7f 0x48142d5e \"test1\" \"echo: test1\" \"test2\" \"echo: test2\" \"test3\" \"echo: test3\" \"test4\" \"echo: test4\" \"test5\" \"echo: test5\" \"typed + ignore\" \"echo: typed + ignore\" \"untyped + ignore\" \"echo: untyped + ignore\" \"tuple\" \"untyped\" \"echo: untyped\" 0x000000000000000b 0x6563686f3a206231 0x6563686f3a2033 \"s1b\" \"s2b\" 0x3362 \"echo: s2b\" 0x000000000000002a 0xddd07185 \"log 2\""
    },
    "523": {
      "op": "b main_block@0"
    },
    "526": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "529": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "531": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "532": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "533": {
      "op": "bz main___algopy_default_create@26",
      "stack_out": []
    },
    "536": {
      "op": "b main_abi_routing@2"
    },
    "539": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "541": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "542": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "543": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "544": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "547": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "548": {
      "op": "bz main_create_NoOp@24",
      "stack_out": []
    },
    "551": {
      "op": "b main_call_NoOp@3"
    },
    "554": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "557": {
      "op": "pushbytes 0x094418cd // method \"test_is_a_b(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)"
      ]
    },
    "563": {
      "op": "pushbytes 0x31e8e212 // method \"test_method_selector_kinds(uint64)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)"
      ]
    },
    "569": {
      "op": "pushbytes 0xb5dcf0ba // method \"test_method_overload(uint64)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)"
      ]
    },
    "575": {
      "op": "pushbytes 0xbf3b242b // method \"test_arg_conversion(uint64)void\"",
      "defined_out": [
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)"
      ]
    },
    "581": {
      "op": "pushbytes 0x063beac7 // method \"test_15plus_args(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)"
      ]
    },
    "587": {
      "op": "pushbytes 0xe9f3087d // method \"test_void(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)"
      ]
    },
    "593": {
      "op": "pushbytes 0xc88920f9 // method \"test_ref_types(uint64,uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)"
      ]
    },
    "599": {
      "op": "pushbytes 0xc2f21b73 // method \"test_account_to_address(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)"
      ]
    },
    "605": {
      "op": "pushbytes 0x86052a5c // method \"test_native_string(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)"
      ]
    },
    "611": {
      "op": "pushbytes 0xe85f2441 // method \"test_native_bytes(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)"
      ]
    },
    "617": {
      "op": "pushbytes 0x92082d08 // method \"test_native_uint64(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)"
      ]
    },
    "623": {
      "op": "pushbytes 0x6211cd59 // method \"test_native_biguint(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)"
      ]
    },
    "629": {
      "op": "pushbytes 0x19eed724 // method \"test_native_tuple(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)"
      ]
    },
    "635": {
      "op": "pushbytes 0x92f75ee2 // method \"test_native_tuple_method_ref(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)"
      ]
    },
    "641": {
      "op": "pushbytes 0xe748ef8e // method \"test_nested_tuples(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)"
      ]
    },
    "647": {
      "op": "pushbytes 0xc7b94959 // method \"test_no_args(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)"
      ]
    },
    "653": {
      "op": "pushbytes 0x868e49e7 // method \"test_named_tuples(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)"
      ]
    },
    "659": {
      "op": "pushbytes 0xaccd5072 // method \"test_arc4_struct(uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)"
      ]
    },
    "665": {
      "op": "pushbytes 0xf7f3d8ac // method \"test_resource_encoding(uint64,uint64)void\"",
      "defined_out": [
        "Method(test_15plus_args(uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "Method(test_void(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)"
      ]
    },
    "671": {
      "op": "uncover 19",
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],uint64)void)",
        "Method(test_method_selector_kinds(uint64)void)",
        "Method(test_method_overload(uint64)void)",
        "Method(test_arg_conversion(uint64)void)",
        "Method(test_15plus_args(uint64)void)",
        "Method(test_void(uint64)void)",
        "Method(test_ref_types(uint64,uint64)void)",
        "Method(test_account_to_address(uint64)void)",
        "Method(test_native_string(uint64)void)",
        "Method(test_native_bytes(uint64)void)",
        "Method(test_native_uint64(uint64)void)",
        "Method(test_native_biguint(uint64)void)",
        "Method(test_native_tuple(uint64)void)",
        "Method(test_native_tuple_method_ref(uint64)void)",
        "Method(test_nested_tuples(uint64)void)",
        "Method(test_no_args(uint64)void)",
        "Method(test_named_tuples(uint64)void)",
        "Method(test_arc4_struct(uint64)void)",
        "Method(test_resource_encoding(uint64,uint64)void)",
        "tmp%6#0"
      ]
    },
    "673": {
      "op": "match main_test_is_a_b_route@4 main_test_method_selector_kinds_route@5 main_test_method_overload_route@6 main_test_arg_conversion_route@7 main_test_15plus_args_route@8 main_test_void_route@9 main_test_ref_types_route@10 main_test_account_to_address_route@11 main_test_native_string_route@12 main_test_native_bytes_route@13 main_test_native_uint64_route@14 main_test_native_biguint_route@15 main_test_native_tuple_route@16 main_test_native_tuple_method_ref_route@17 main_test_nested_tuples_route@18 main_test_no_args_route@19 main_test_named_tuples_route@20 main_test_arc4_struct_route@21 main_test_resource_encoding_route@22",
      "stack_out": []
    },
    "713": {
      "op": "b main_switch_case_next@23"
    },
    "716": {
      "block": "main_switch_case_next@23",
      "stack_in": [],
      "op": "b main_after_if_else@25"
    },
    "719": {
      "block": "main_after_if_else@25",
      "stack_in": [],
      "op": "b main_after_if_else@27"
    },
    "722": {
      "block": "main_after_if_else@27",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "723": {
      "block": "main_test_resource_encoding_route@22",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding[routing]",
      "op": "callsub test_resource_encoding"
    },
    "726": {
      "op": "b main_switch_case_next@23"
    },
    "729": {
      "block": "main_test_arc4_struct_route@21",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct[routing]",
      "op": "callsub test_arc4_struct"
    },
    "732": {
      "op": "b main_switch_case_next@23"
    },
    "735": {
      "block": "main_test_named_tuples_route@20",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples[routing]",
      "op": "callsub test_named_tuples"
    },
    "738": {
      "op": "b main_switch_case_next@23"
    },
    "741": {
      "block": "main_test_no_args_route@19",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args[routing]",
      "op": "callsub test_no_args"
    },
    "744": {
      "op": "b main_switch_case_next@23"
    },
    "747": {
      "block": "main_test_nested_tuples_route@18",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples[routing]",
      "op": "callsub test_nested_tuples"
    },
    "750": {
      "op": "b main_switch_case_next@23"
    },
    "753": {
      "block": "main_test_native_tuple_method_ref_route@17",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref[routing]",
      "op": "callsub test_native_tuple_method_ref"
    },
    "756": {
      "op": "b main_switch_case_next@23"
    },
    "759": {
      "block": "main_test_native_tuple_route@16",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple[routing]",
      "op": "callsub test_native_tuple"
    },
    "762": {
      "op": "b main_switch_case_next@23"
    },
    "765": {
      "block": "main_test_native_biguint_route@15",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint[routing]",
      "op": "callsub test_native_biguint"
    },
    "768": {
      "op": "b main_switch_case_next@23"
    },
    "771": {
      "block": "main_test_native_uint64_route@14",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64[routing]",
      "op": "callsub test_native_uint64"
    },
    "774": {
      "op": "b main_switch_case_next@23"
    },
    "777": {
      "block": "main_test_native_bytes_route@13",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes[routing]",
      "op": "callsub test_native_bytes"
    },
    "780": {
      "op": "b main_switch_case_next@23"
    },
    "783": {
      "block": "main_test_native_string_route@12",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string[routing]",
      "op": "callsub test_native_string"
    },
    "786": {
      "op": "b main_switch_case_next@23"
    },
    "789": {
      "block": "main_test_account_to_address_route@11",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address[routing]",
      "op": "callsub test_account_to_address"
    },
    "792": {
      "op": "b main_switch_case_next@23"
    },
    "795": {
      "block": "main_test_ref_types_route@10",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types[routing]",
      "op": "callsub test_ref_types"
    },
    "798": {
      "op": "b main_switch_case_next@23"
    },
    "801": {
      "block": "main_test_void_route@9",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void[routing]",
      "op": "callsub test_void"
    },
    "804": {
      "op": "b main_switch_case_next@23"
    },
    "807": {
      "block": "main_test_15plus_args_route@8",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args[routing]",
      "op": "callsub test_15plus_args"
    },
    "810": {
      "op": "b main_switch_case_next@23"
    },
    "813": {
      "block": "main_test_arg_conversion_route@7",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion[routing]",
      "op": "callsub test_arg_conversion"
    },
    "816": {
      "op": "b main_switch_case_next@23"
    },
    "819": {
      "block": "main_test_method_overload_route@6",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload[routing]",
      "op": "callsub test_method_overload"
    },
    "822": {
      "op": "b main_switch_case_next@23"
    },
    "825": {
      "block": "main_test_method_selector_kinds_route@5",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds[routing]",
      "op": "callsub test_method_selector_kinds"
    },
    "828": {
      "op": "b main_switch_case_next@23"
    },
    "831": {
      "block": "main_test_is_a_b_route@4",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b[routing]",
      "op": "callsub test_is_a_b"
    },
    "834": {
      "op": "b main_switch_case_next@23"
    },
    "837": {
      "block": "main_create_NoOp@24",
      "stack_in": [],
      "op": "b main_after_if_else@25"
    },
    "840": {
      "block": "main___algopy_default_create@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "842": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "843": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "844": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "846": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "847": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "848": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "849": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "850": {
      "op": "b main_block@29"
    },
    "853": {
      "block": "main_block@29",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@30"
    },
    "856": {
      "block": "main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@30",
      "stack_in": [],
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "857": {
      "op": "return",
      "stack_out": []
    },
    "858": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b[routing]",
      "params": {},
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "b test_is_a_b_block@0"
    },
    "861": {
      "block": "test_is_a_b_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "864": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "865": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "866": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "867": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "1"
      ]
    },
    "868": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "869": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "870": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "871": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "873": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "874": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "875": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "876": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "879": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "882": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "883": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "884": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%1#0"
      ]
    },
    "885": {
      "op": "intc_2 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "length%1#0",
        "1"
      ]
    },
    "886": {
      "op": "*",
      "defined_out": [
        "mul%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%1#0"
      ]
    },
    "887": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "mul%1#0",
        "2"
      ]
    },
    "888": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "889": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "891": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "892": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "893": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "894": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "897": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "900": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "901": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "902": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "903": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "904": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "905": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "906": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "908": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "910": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "912": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "stack_out": []
    },
    "915": {
      "op": "intc_2 // 1",
      "stack_out": [
        "1"
      ]
    },
    "916": {
      "op": "return",
      "stack_out": []
    },
    "917": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds[routing]",
      "params": {},
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "b test_method_selector_kinds_block@0"
    },
    "920": {
      "block": "test_method_selector_kinds_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "923": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "924": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "925": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "926": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "927": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "928": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "929": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "stack_out": []
    },
    "932": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "933": {
      "op": "return",
      "stack_out": []
    },
    "934": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload[routing]",
      "params": {},
      "block": "test_method_overload",
      "stack_in": [],
      "op": "b test_method_overload_block@0"
    },
    "937": {
      "block": "test_method_overload_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "940": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "941": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "942": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "943": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "944": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "945": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "946": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "stack_out": []
    },
    "949": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "950": {
      "op": "return",
      "stack_out": []
    },
    "951": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion[routing]",
      "params": {},
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "b test_arg_conversion_block@0"
    },
    "954": {
      "block": "test_arg_conversion_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "958": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "959": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "960": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "961": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "962": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "963": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "stack_out": []
    },
    "966": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "967": {
      "op": "return",
      "stack_out": []
    },
    "968": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args[routing]",
      "params": {},
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "b test_15plus_args_block@0"
    },
    "971": {
      "block": "test_15plus_args_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "974": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "975": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "976": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "977": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "978": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "979": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "980": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "stack_out": []
    },
    "983": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "984": {
      "op": "return",
      "stack_out": []
    },
    "985": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void[routing]",
      "params": {},
      "block": "test_void",
      "stack_in": [],
      "op": "b test_void_block@0"
    },
    "988": {
      "block": "test_void_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "991": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "992": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "993": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "994": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "995": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "996": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "997": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "stack_out": []
    },
    "1000": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1001": {
      "op": "return",
      "stack_out": []
    },
    "1002": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types[routing]",
      "params": {},
      "block": "test_ref_types",
      "stack_in": [],
      "op": "b test_ref_types_block@0"
    },
    "1005": {
      "block": "test_ref_types_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1008": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1009": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1010": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1012": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1013": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1014": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1017": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1018": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "1019": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "1020": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "1021": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "1022": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1023": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "stack_out": []
    },
    "1026": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1027": {
      "op": "return",
      "stack_out": []
    },
    "1028": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address[routing]",
      "params": {},
      "block": "test_account_to_address",
      "stack_in": [],
      "op": "b test_account_to_address_block@0"
    },
    "1031": {
      "block": "test_account_to_address_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1034": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1035": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1036": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1037": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1038": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1039": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1040": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "stack_out": []
    },
    "1043": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1044": {
      "op": "return",
      "stack_out": []
    },
    "1045": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string[routing]",
      "params": {},
      "block": "test_native_string",
      "stack_in": [],
      "op": "b test_native_string_block@0"
    },
    "1048": {
      "block": "test_native_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1051": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1052": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1053": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1054": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1055": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1056": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1057": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "stack_out": []
    },
    "1060": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1061": {
      "op": "return",
      "stack_out": []
    },
    "1062": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes[routing]",
      "params": {},
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "b test_native_bytes_block@0"
    },
    "1065": {
      "block": "test_native_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1068": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1069": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1070": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1071": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1072": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1073": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1074": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "stack_out": []
    },
    "1077": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1078": {
      "op": "return",
      "stack_out": []
    },
    "1079": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64[routing]",
      "params": {},
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "b test_native_uint64_block@0"
    },
    "1082": {
      "block": "test_native_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1085": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1086": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1087": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1088": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1089": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1090": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1091": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "stack_out": []
    },
    "1094": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1095": {
      "op": "return",
      "stack_out": []
    },
    "1096": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint[routing]",
      "params": {},
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "b test_native_biguint_block@0"
    },
    "1099": {
      "block": "test_native_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1103": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1104": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1105": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1106": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1107": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1108": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "stack_out": []
    },
    "1111": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1112": {
      "op": "return",
      "stack_out": []
    },
    "1113": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple[routing]",
      "params": {},
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "b test_native_tuple_block@0"
    },
    "1116": {
      "block": "test_native_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1119": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1120": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1121": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1122": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1123": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1124": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1125": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "stack_out": []
    },
    "1128": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1129": {
      "op": "return",
      "stack_out": []
    },
    "1130": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref[routing]",
      "params": {},
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "b test_native_tuple_method_ref_block@0"
    },
    "1133": {
      "block": "test_native_tuple_method_ref_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1136": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1137": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1138": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1139": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1140": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1141": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1142": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "stack_out": []
    },
    "1145": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1146": {
      "op": "return",
      "stack_out": []
    },
    "1147": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples[routing]",
      "params": {},
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "b test_nested_tuples_block@0"
    },
    "1150": {
      "block": "test_nested_tuples_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1153": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1154": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1155": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1156": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1157": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1158": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1159": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "stack_out": []
    },
    "1162": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1163": {
      "op": "return",
      "stack_out": []
    },
    "1164": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args[routing]",
      "params": {},
      "block": "test_no_args",
      "stack_in": [],
      "op": "b test_no_args_block@0"
    },
    "1167": {
      "block": "test_no_args_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1170": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1171": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1172": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1173": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1174": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1175": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1176": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "stack_out": []
    },
    "1179": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1180": {
      "op": "return",
      "stack_out": []
    },
    "1181": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples[routing]",
      "params": {},
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "b test_named_tuples_block@0"
    },
    "1184": {
      "block": "test_named_tuples_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1187": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1188": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1189": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1190": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1191": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1192": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1193": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "stack_out": []
    },
    "1196": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1197": {
      "op": "return",
      "stack_out": []
    },
    "1198": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct[routing]",
      "params": {},
      "block": "test_arc4_struct",
      "stack_in": [],
      "op": "b test_arc4_struct_block@0"
    },
    "1201": {
      "block": "test_arc4_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1204": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1205": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1206": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1207": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1208": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1209": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1210": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "stack_out": []
    },
    "1213": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1214": {
      "op": "return",
      "stack_out": []
    },
    "1215": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding[routing]",
      "params": {},
      "block": "test_resource_encoding",
      "stack_in": [],
      "op": "b test_resource_encoding_block@0"
    },
    "1218": {
      "block": "test_resource_encoding_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1221": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1222": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "1223": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "1224": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "1225": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "1226": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1227": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1230": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1231": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "1232": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "1233": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "1234": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "1235": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1236": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "op": "callsub test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "stack_out": []
    },
    "1239": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1240": {
      "op": "return",
      "stack_out": []
    },
    "1241": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1244": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b_block@0"
    },
    "1247": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1248": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1250": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1251": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1252": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1255": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "1257": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1258": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "1260": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "1261": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1262": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1265": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "1267": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "1268": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1270": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1272": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1274": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "1280": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1282": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "1284": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1286": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1288": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1291": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1293": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b_next_txn@1"
    },
    "1296": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1297": {
      "retsub": true,
      "op": "retsub"
    },
    "1298": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1301": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_block@0"
    },
    "1304": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_block@0",
      "stack_in": [],
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1306": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)",
        "Method(echo(string)string)"
      ]
    },
    "1308": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1309": {
      "op": "assert",
      "stack_out": []
    },
    "1310": {
      "op": "itxn_begin"
    },
    "1311": {
      "op": "bytec 37 // \"test1\"",
      "defined_out": [
        "\"test1\""
      ],
      "stack_out": [
        "\"test1\""
      ]
    },
    "1313": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1314": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1315": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1318": {
      "op": "bytec 37 // \"test1\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"test1\""
      ]
    },
    "1320": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1321": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1323": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1325": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1327": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1329": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1331": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1333": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1335": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1336": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1338": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@1"
    },
    "1341": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1342": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1344": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1345": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1348": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1349": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "1350": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "1351": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "1352": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "1353": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "1354": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "1355": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1357": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1358": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "1359": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1360": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1362": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0"
      ]
    },
    "1365": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "1366": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%4#0"
      ]
    },
    "1367": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1368": {
      "op": "bytec 38 // \"echo: test1\"",
      "defined_out": [
        "\"echo: test1\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"echo: test1\""
      ]
    },
    "1370": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%1#0"
      ]
    },
    "1371": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1372": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1375": {
      "op": "bytec 38 // \"echo: test1\"",
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%1#0",
        "\"echo: test1\""
      ]
    },
    "1377": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0"
      ]
    },
    "1378": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1379": {
      "op": "assert",
      "stack_out": []
    },
    "1380": {
      "op": "itxn_begin"
    },
    "1381": {
      "op": "bytec 39 // \"test2\"",
      "defined_out": [
        "\"test2\""
      ],
      "stack_out": [
        "\"test2\""
      ]
    },
    "1383": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0"
      ],
      "stack_out": [
        "aggregate%length%2#0"
      ]
    },
    "1384": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "1385": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%2#0"
      ]
    },
    "1388": {
      "op": "bytec 39 // \"test2\"",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "\"test2\""
      ]
    },
    "1390": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1391": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1393": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1395": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1397": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1399": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1401": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1403": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1405": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1406": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1408": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@2"
    },
    "1411": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1412": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1414": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1415": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "1418": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1419": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "1420": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "length%1#0"
      ]
    },
    "1421": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "length%1#0",
        "1"
      ]
    },
    "1422": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "mul%1#0"
      ]
    },
    "1423": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "mul%1#0",
        "2"
      ]
    },
    "1424": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "add%1#0"
      ]
    },
    "1425": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "add%1#0",
        "tmp%8#0 (copy)"
      ]
    },
    "1427": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "1428": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "eq%1#0"
      ]
    },
    "1429": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "1430": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ]
    },
    "1432": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0"
      ]
    },
    "1435": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "1436": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%10#0"
      ]
    },
    "1437": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1438": {
      "op": "bytec 40 // \"echo: test2\"",
      "defined_out": [
        "\"echo: test2\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"echo: test2\""
      ]
    },
    "1440": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%3#0"
      ]
    },
    "1441": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1442": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "1445": {
      "op": "bytec 40 // \"echo: test2\"",
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%3#0",
        "\"echo: test2\""
      ]
    },
    "1447": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%11#0"
      ]
    },
    "1448": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1449": {
      "op": "assert",
      "stack_out": []
    },
    "1450": {
      "op": "itxn_begin"
    },
    "1451": {
      "op": "bytec 41 // \"test3\"",
      "defined_out": [
        "\"test3\""
      ],
      "stack_out": [
        "\"test3\""
      ]
    },
    "1453": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0"
      ],
      "stack_out": [
        "aggregate%length%4#0"
      ]
    },
    "1454": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#0"
      ]
    },
    "1455": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%4#0"
      ]
    },
    "1458": {
      "op": "bytec 41 // \"test3\"",
      "stack_out": [
        "aggregate%length_uint16%4#0",
        "\"test3\""
      ]
    },
    "1460": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1461": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1463": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1465": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1467": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1469": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1471": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1473": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1475": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1476": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1478": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@3"
    },
    "1481": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1482": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1484": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1485": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "1488": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1489": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "0"
      ]
    },
    "1490": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "length%2#0"
      ]
    },
    "1491": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "length%2#0",
        "1"
      ]
    },
    "1492": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "mul%2#0"
      ]
    },
    "1493": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "mul%2#0",
        "2"
      ]
    },
    "1494": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "add%2#0"
      ]
    },
    "1495": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "add%2#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1497": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "1498": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%14#0",
        "eq%2#0"
      ]
    },
    "1499": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "as_Encoded(len+utf8[])%2#0"
      ]
    },
    "1500": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ]
    },
    "1502": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0"
      ]
    },
    "1505": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "1506": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%16#0"
      ]
    },
    "1507": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1508": {
      "op": "bytec 42 // \"echo: test3\"",
      "defined_out": [
        "\"echo: test3\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"echo: test3\""
      ]
    },
    "1510": {
      "op": "len",
      "defined_out": [
        "aggregate%length%5#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%5#0"
      ]
    },
    "1511": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1512": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%5#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "1515": {
      "op": "bytec 42 // \"echo: test3\"",
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%5#0",
        "\"echo: test3\""
      ]
    },
    "1517": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%17#0"
      ]
    },
    "1518": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1519": {
      "op": "assert",
      "stack_out": []
    },
    "1520": {
      "op": "itxn_begin"
    },
    "1521": {
      "op": "bytec 43 // \"test4\"",
      "defined_out": [
        "\"test4\""
      ],
      "stack_out": [
        "\"test4\""
      ]
    },
    "1523": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0"
      ],
      "stack_out": [
        "aggregate%length%6#0"
      ]
    },
    "1524": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%6#0"
      ]
    },
    "1525": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%6#0"
      ]
    },
    "1528": {
      "op": "bytec 43 // \"test4\"",
      "stack_out": [
        "aggregate%length_uint16%6#0",
        "\"test4\""
      ]
    },
    "1530": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1531": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1533": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1535": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1537": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1539": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1541": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1543": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1546": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1548": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@4"
    },
    "1551": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1552": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1554": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1555": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0"
      ]
    },
    "1558": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "1559": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%3#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "0"
      ]
    },
    "1560": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%3#0",
        "length%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "length%3#0"
      ]
    },
    "1561": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%3#0",
        "length%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "length%3#0",
        "1"
      ]
    },
    "1562": {
      "op": "*",
      "defined_out": [
        "awst_tmp%3#0",
        "mul%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "mul%3#0"
      ]
    },
    "1563": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%3#0",
        "mul%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "mul%3#0",
        "2"
      ]
    },
    "1564": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "awst_tmp%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "add%3#0"
      ]
    },
    "1565": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "add%3#0",
        "tmp%20#0 (copy)"
      ]
    },
    "1567": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "add%3#0",
        "len%3#0"
      ]
    },
    "1568": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%20#0",
        "eq%3#0"
      ]
    },
    "1569": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "as_Encoded(len+utf8[])%3#0"
      ]
    },
    "1570": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "awst_tmp%3#0"
      ]
    },
    "1572": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%21#0"
      ]
    },
    "1575": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "1576": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%22#0"
      ]
    },
    "1577": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1578": {
      "op": "bytec 44 // \"echo: test4\"",
      "defined_out": [
        "\"echo: test4\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"echo: test4\""
      ]
    },
    "1580": {
      "op": "len",
      "defined_out": [
        "aggregate%length%7#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%7#0"
      ]
    },
    "1581": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "1582": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%7#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "1585": {
      "op": "bytec 44 // \"echo: test4\"",
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%7#0",
        "\"echo: test4\""
      ]
    },
    "1587": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%23#0"
      ]
    },
    "1588": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1589": {
      "op": "assert",
      "stack_out": []
    },
    "1590": {
      "op": "itxn_begin"
    },
    "1591": {
      "op": "bytec 45 // \"test5\"",
      "defined_out": [
        "\"test5\""
      ],
      "stack_out": [
        "\"test5\""
      ]
    },
    "1593": {
      "op": "len",
      "defined_out": [
        "aggregate%length%8#0"
      ],
      "stack_out": [
        "aggregate%length%8#0"
      ]
    },
    "1594": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%8#0"
      ]
    },
    "1595": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%8#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%8#0"
      ]
    },
    "1598": {
      "op": "bytec 45 // \"test5\"",
      "stack_out": [
        "aggregate%length_uint16%8#0",
        "\"test5\""
      ]
    },
    "1600": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1601": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "1603": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1605": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1607": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1609": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1611": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1613": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1616": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1618": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@5"
    },
    "1621": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1622": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "1624": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1625": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0"
      ]
    },
    "1628": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1629": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%4#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "0"
      ]
    },
    "1630": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%4#0",
        "length%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "length%4#0"
      ]
    },
    "1631": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%4#0",
        "length%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "length%4#0",
        "1"
      ]
    },
    "1632": {
      "op": "*",
      "defined_out": [
        "awst_tmp%4#0",
        "mul%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "mul%4#0"
      ]
    },
    "1633": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%4#0",
        "mul%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "mul%4#0",
        "2"
      ]
    },
    "1634": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "awst_tmp%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "add%4#0"
      ]
    },
    "1635": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "add%4#0",
        "tmp%26#0 (copy)"
      ]
    },
    "1637": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "awst_tmp%4#0",
        "len%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "add%4#0",
        "len%4#0"
      ]
    },
    "1638": {
      "op": "==",
      "defined_out": [
        "awst_tmp%4#0",
        "eq%4#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%26#0",
        "eq%4#0"
      ]
    },
    "1639": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "as_Encoded(len+utf8[])%4#0"
      ]
    },
    "1640": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "awst_tmp%4#0"
      ]
    },
    "1642": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%27#0"
      ]
    },
    "1645": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%4#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%27#0",
        "0x151f7c75"
      ]
    },
    "1646": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%28#0"
      ]
    },
    "1647": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1648": {
      "op": "bytec 46 // \"echo: test5\"",
      "defined_out": [
        "\"echo: test5\"",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "\"echo: test5\""
      ]
    },
    "1650": {
      "op": "len",
      "defined_out": [
        "aggregate%length%9#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length%9#0"
      ]
    },
    "1651": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%as_bytes%9#0"
      ]
    },
    "1652": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%9#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%9#0"
      ]
    },
    "1655": {
      "op": "bytec 46 // \"echo: test5\"",
      "stack_out": [
        "result#0",
        "aggregate%length_uint16%9#0",
        "\"echo: test5\""
      ]
    },
    "1657": {
      "op": "concat",
      "defined_out": [
        "result#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%29#0"
      ]
    },
    "1658": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1659": {
      "op": "assert",
      "stack_out": []
    },
    "1660": {
      "retsub": true,
      "op": "retsub"
    },
    "1661": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1664": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_block@0"
    },
    "1667": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1668": {
      "op": "bytec 47 // \"typed + ignore\"",
      "defined_out": [
        "\"typed + ignore\""
      ],
      "stack_out": [
        "\"typed + ignore\""
      ]
    },
    "1670": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1671": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1672": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1675": {
      "op": "bytec 47 // \"typed + ignore\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"typed + ignore\""
      ]
    },
    "1677": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1678": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1680": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1682": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1684": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1686": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1688": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1690": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1692": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1693": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1695": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@1"
    },
    "1698": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1699": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1701": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1702": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1705": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1706": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "1707": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "1708": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "1709": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "1710": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "1711": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "1712": {
      "op": "uncover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "add%0#0",
        "tmp%1#0"
      ]
    },
    "1714": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "1715": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "1716": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1717": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1720": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "1721": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1722": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "1723": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1725": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1726": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "1729": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1730": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "1731": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "length%1#0"
      ]
    },
    "1732": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "length%1#0",
        "1"
      ]
    },
    "1733": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "mul%1#0"
      ]
    },
    "1734": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "mul%1#0",
        "2"
      ]
    },
    "1735": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0"
      ]
    },
    "1736": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1738": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "1739": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0",
        "eq%1#0"
      ]
    },
    "1740": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "1741": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ]
    },
    "1743": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%5#0"
      ]
    },
    "1746": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1747": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%6#0"
      ]
    },
    "1748": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "1749": {
      "op": "bytec 48 // \"echo: typed + ignore\"",
      "defined_out": [
        "\"echo: typed + ignore\"",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "\"echo: typed + ignore\""
      ]
    },
    "1751": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "aggregate%length%1#0"
      ]
    },
    "1752": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1753": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1756": {
      "op": "bytec 48 // \"echo: typed + ignore\"",
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "aggregate%length_uint16%1#0",
        "\"echo: typed + ignore\""
      ]
    },
    "1758": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%7#0"
      ]
    },
    "1759": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1760": {
      "op": "assert",
      "stack_out": []
    },
    "1761": {
      "op": "itxn_begin"
    },
    "1762": {
      "op": "bytec 49 // \"untyped + ignore\"",
      "defined_out": [
        "\"untyped + ignore\""
      ],
      "stack_out": [
        "\"untyped + ignore\""
      ]
    },
    "1764": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0"
      ],
      "stack_out": [
        "aggregate%length%2#0"
      ]
    },
    "1765": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "1766": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%2#0"
      ]
    },
    "1769": {
      "op": "bytec 49 // \"untyped + ignore\"",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "\"untyped + ignore\""
      ]
    },
    "1771": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1772": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1774": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1776": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1778": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1780": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1782": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1784": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1786": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1787": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1789": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@2"
    },
    "1792": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1793": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1795": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1796": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "1799": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1800": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "0"
      ]
    },
    "1801": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "length%2#0"
      ]
    },
    "1802": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "length%2#0",
        "1"
      ]
    },
    "1803": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "mul%2#0"
      ]
    },
    "1804": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "mul%2#0",
        "2"
      ]
    },
    "1805": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0"
      ]
    },
    "1806": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1808": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "1809": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%10#0",
        "eq%2#0"
      ]
    },
    "1810": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "as_Encoded(len+utf8[])%2#0"
      ]
    },
    "1811": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ]
    },
    "1813": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%11#0"
      ]
    },
    "1816": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "1817": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%12#0"
      ]
    },
    "1818": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0"
      ]
    },
    "1819": {
      "op": "bytec 50 // \"echo: untyped + ignore\"",
      "defined_out": [
        "\"echo: untyped + ignore\"",
        "as_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "\"echo: untyped + ignore\""
      ]
    },
    "1821": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "as_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "aggregate%length%3#0"
      ]
    },
    "1822": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "as_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1823": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "as_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "1826": {
      "op": "bytec 50 // \"echo: untyped + ignore\"",
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "aggregate%length_uint16%3#0",
        "\"echo: untyped + ignore\""
      ]
    },
    "1828": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%13#0"
      ]
    },
    "1829": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1830": {
      "op": "assert",
      "stack_out": []
    },
    "1831": {
      "op": "itxn_begin"
    },
    "1832": {
      "op": "bytec 51 // \"tuple\"",
      "defined_out": [
        "\"tuple\""
      ],
      "stack_out": [
        "\"tuple\""
      ]
    },
    "1834": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0"
      ],
      "stack_out": [
        "aggregate%length%4#0"
      ]
    },
    "1835": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%4#0"
      ]
    },
    "1836": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%4#0"
      ]
    },
    "1839": {
      "op": "bytec 51 // \"tuple\"",
      "stack_out": [
        "aggregate%length_uint16%4#0",
        "\"tuple\""
      ]
    },
    "1841": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1842": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1844": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1846": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1848": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1850": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1852": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1854": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1856": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1857": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1859": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@3"
    },
    "1862": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1863": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1865": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1866": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0"
      ]
    },
    "1869": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "1870": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%3#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "1871": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%3#0",
        "length%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "length%3#0"
      ]
    },
    "1872": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%3#0",
        "length%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "length%3#0",
        "1"
      ]
    },
    "1873": {
      "op": "*",
      "defined_out": [
        "awst_tmp%3#0",
        "mul%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "mul%3#0"
      ]
    },
    "1874": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%3#0",
        "mul%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "mul%3#0",
        "2"
      ]
    },
    "1875": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "awst_tmp%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "add%3#0"
      ]
    },
    "1876": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "add%3#0",
        "tmp%16#0 (copy)"
      ]
    },
    "1878": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "add%3#0",
        "len%3#0"
      ]
    },
    "1879": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%16#0",
        "eq%3#0"
      ]
    },
    "1880": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "as_Encoded(len+utf8[])%3#0"
      ]
    },
    "1881": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "awst_tmp%3#0"
      ]
    },
    "1883": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%17#0"
      ]
    },
    "1886": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "1887": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%3#0",
        "tmp%18#0"
      ]
    },
    "1888": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0"
      ]
    },
    "1889": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1891": {
      "op": "cover 1",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1893": {
      "op": "bytec 14 // \"echo: tuple\"",
      "defined_out": [
        "\"echo: tuple\"",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "\"echo: tuple\""
      ]
    },
    "1895": {
      "op": "len",
      "defined_out": [
        "aggregate%length%5#0",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "aggregate%length%5#0"
      ]
    },
    "1896": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1897": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%5#0",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "1900": {
      "op": "bytec 14 // \"echo: tuple\"",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "aggregate%length_uint16%5#0",
        "\"echo: tuple\""
      ]
    },
    "1902": {
      "op": "concat",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "tmp%19#0"
      ]
    },
    "1903": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%20#0"
      ]
    },
    "1904": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1905": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1906": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0"
      ]
    },
    "1909": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)"
      ]
    },
    "1910": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "tmp%21#0 (copy)",
        "0"
      ]
    },
    "1911": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "length%4#0"
      ]
    },
    "1912": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "length%4#0",
        "1"
      ]
    },
    "1913": {
      "op": "*",
      "defined_out": [
        "mul%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "mul%4#0"
      ]
    },
    "1914": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "mul%4#0",
        "2"
      ]
    },
    "1915": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0"
      ]
    },
    "1916": {
      "op": "dig 1",
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0",
        "tmp%21#0 (copy)"
      ]
    },
    "1918": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "len%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "add%4#0",
        "len%4#0"
      ]
    },
    "1919": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "result.1.LastLog#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%21#0",
        "eq%4#0"
      ]
    },
    "1920": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "as_Encoded(len+utf8[])%4#0"
      ]
    },
    "1921": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "result.1.LastLog#0"
      ]
    },
    "1923": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%22#0"
      ]
    },
    "1926": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "1927": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%23#0"
      ]
    },
    "1928": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0"
      ]
    },
    "1929": {
      "op": "bytec 14 // \"echo: tuple\"",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "\"echo: tuple\""
      ]
    },
    "1931": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0",
        "as_Encoded(len+utf8[])%4#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "aggregate%length%6#0"
      ]
    },
    "1932": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "as_Encoded(len+utf8[])%4#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "1933": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0",
        "as_Encoded(len+utf8[])%4#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "1936": {
      "op": "bytec 14 // \"echo: tuple\"",
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "aggregate%length_uint16%6#0",
        "\"echo: tuple\""
      ]
    },
    "1938": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%4#0",
        "tmp%24#0"
      ]
    },
    "1939": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1940": {
      "op": "assert",
      "stack_out": []
    },
    "1941": {
      "op": "itxn_begin"
    },
    "1942": {
      "op": "bytec 52 // \"untyped\"",
      "defined_out": [
        "\"untyped\""
      ],
      "stack_out": [
        "\"untyped\""
      ]
    },
    "1944": {
      "op": "len",
      "defined_out": [
        "aggregate%length%7#0"
      ],
      "stack_out": [
        "aggregate%length%7#0"
      ]
    },
    "1945": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%7#0"
      ]
    },
    "1946": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%7#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%7#0"
      ]
    },
    "1949": {
      "op": "bytec 52 // \"untyped\"",
      "stack_out": [
        "aggregate%length_uint16%7#0",
        "\"untyped\""
      ]
    },
    "1951": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1952": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1954": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1956": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(echo(string)string)"
      ]
    },
    "1958": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1960": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1962": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1964": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1966": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1967": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1969": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@4"
    },
    "1972": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1973": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1975": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1976": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0"
      ]
    },
    "1979": {
      "op": "dup",
      "defined_out": [
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "1980": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "0"
      ]
    },
    "1981": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "length%5#0"
      ]
    },
    "1982": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "length%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "length%5#0",
        "1"
      ]
    },
    "1983": {
      "op": "*",
      "defined_out": [
        "mul%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "mul%5#0"
      ]
    },
    "1984": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "mul%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "mul%5#0",
        "2"
      ]
    },
    "1985": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0"
      ]
    },
    "1986": {
      "op": "dig 1",
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0",
        "tmp%27#0 (copy)"
      ]
    },
    "1988": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "len%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "add%5#0",
        "len%5#0"
      ]
    },
    "1989": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "tmp%27#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%27#0",
        "eq%5#0"
      ]
    },
    "1990": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%5#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "as_Encoded(len+utf8[])%5#0"
      ]
    },
    "1991": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "txn_result.LastLog#0"
      ]
    },
    "1993": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%28#0"
      ]
    },
    "1996": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%5#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "1997": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%29#0"
      ]
    },
    "1998": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0"
      ]
    },
    "1999": {
      "op": "bytec 53 // \"echo: untyped\"",
      "defined_out": [
        "\"echo: untyped\"",
        "as_Encoded(len+utf8[])%5#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "\"echo: untyped\""
      ]
    },
    "2001": {
      "op": "len",
      "defined_out": [
        "aggregate%length%8#0",
        "as_Encoded(len+utf8[])%5#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "aggregate%length%8#0"
      ]
    },
    "2002": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%8#0",
        "as_Encoded(len+utf8[])%5#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "aggregate%as_bytes%8#0"
      ]
    },
    "2003": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%8#0",
        "as_Encoded(len+utf8[])%5#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "aggregate%length_uint16%8#0"
      ]
    },
    "2006": {
      "op": "bytec 53 // \"echo: untyped\"",
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "aggregate%length_uint16%8#0",
        "\"echo: untyped\""
      ]
    },
    "2008": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%5#0",
        "tmp%30#0"
      ]
    },
    "2009": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "2010": {
      "op": "assert",
      "stack_out": []
    },
    "2011": {
      "retsub": true,
      "op": "retsub"
    },
    "2012": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2015": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_block@0"
    },
    "2018": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2019": {
      "op": "bytec 21 // \"converted1\"",
      "defined_out": [
        "\"converted1\""
      ],
      "stack_out": [
        "\"converted1\""
      ]
    },
    "2021": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "2022": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "2023": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "2026": {
      "op": "bytec 21 // \"converted1\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"converted1\""
      ]
    },
    "2028": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2029": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2031": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2033": {
      "op": "bytec 13 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(log(string)void)"
      ]
    },
    "2035": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2037": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2039": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2041": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2043": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2044": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2046": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@1"
    },
    "2049": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2050": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2052": {
      "op": "bytec 21 // 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "2054": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2055": {
      "op": "assert",
      "stack_out": []
    },
    "2056": {
      "op": "itxn_begin"
    },
    "2057": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2059": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2061": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "2067": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2069": {
      "op": "bytec 15 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "2071": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2073": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2075": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2077": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2078": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2080": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@2"
    },
    "2083": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2084": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2086": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "2087": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2088": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2089": {
      "op": "assert",
      "stack_out": []
    },
    "2090": {
      "op": "itxn_begin"
    },
    "2091": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2093": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2095": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "2101": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2103": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "2169": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2171": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2173": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2175": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2176": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2178": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@3"
    },
    "2181": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2182": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2184": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "56"
      ]
    },
    "2186": {
      "op": "bzero",
      "defined_out": [
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%4#0"
      ]
    },
    "2187": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%4#0",
        "3"
      ]
    },
    "2189": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2190": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "2191": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2192": {
      "op": "assert",
      "stack_out": []
    },
    "2193": {
      "op": "itxn_begin"
    },
    "2194": {
      "op": "bytec 22 // 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "0x34"
      ]
    },
    "2196": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%length%1#0"
      ]
    },
    "2197": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%1#0"
      ]
    },
    "2198": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%1#0"
      ]
    },
    "2201": {
      "op": "bytec 22 // 0x34",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "0x34"
      ]
    },
    "2203": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2204": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "2206": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2208": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(log(byte[])void)"
      ]
    },
    "2214": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2216": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2218": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2220": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2222": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2223": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2225": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@4"
    },
    "2228": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2229": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2231": {
      "op": "bytec 22 // 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "2233": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2234": {
      "op": "assert",
      "stack_out": []
    },
    "2235": {
      "op": "itxn_begin"
    },
    "2236": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "2238": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "0x00",
        "0"
      ]
    },
    "2239": {
      "op": "intc_2 // 1",
      "defined_out": [
        "0",
        "0x00",
        "1"
      ],
      "stack_out": [
        "0x00",
        "0",
        "1"
      ]
    },
    "2240": {
      "op": "setbit",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2241": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "2243": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2245": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)",
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0",
        "Method(log(bool)void)"
      ]
    },
    "2251": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2253": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2255": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2257": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2259": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2260": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2262": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@5"
    },
    "2265": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2266": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2268": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "2274": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "2275": {
      "op": "assert",
      "stack_out": []
    },
    "2276": {
      "retsub": true,
      "op": "retsub"
    },
    "2277": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2280": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args_block@0"
    },
    "2283": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2284": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "2285": {
      "op": "pushbytes 0xde",
      "defined_out": [
        "0x",
        "0xde"
      ],
      "stack_out": [
        "0x",
        "0xde"
      ]
    },
    "2288": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "2289": {
      "op": "pushbytes 0xad",
      "defined_out": [
        "0xad",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "0xad"
      ]
    },
    "2292": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "2293": {
      "op": "pushbytes 0xbe",
      "defined_out": [
        "0xbe",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0xbe"
      ]
    },
    "2296": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "2297": {
      "op": "pushbytes 0xef",
      "defined_out": [
        "0xef",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0xef"
      ]
    },
    "2300": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2301": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "2302": {
      "op": "pushbytes 0x0f",
      "defined_out": [
        "0x",
        "0x0f",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x",
        "0x0f"
      ]
    },
    "2305": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%4#0"
      ]
    },
    "2306": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "aggregate%head%4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%4#0",
        "0x10"
      ]
    },
    "2309": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%5#0"
      ]
    },
    "2310": {
      "op": "pushbytes 0x11",
      "defined_out": [
        "0x11",
        "aggregate%head%5#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%5#0",
        "0x11"
      ]
    },
    "2313": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%6#0"
      ]
    },
    "2314": {
      "op": "pushbytes 0x12",
      "defined_out": [
        "0x12",
        "aggregate%head%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%6#0",
        "0x12"
      ]
    },
    "2317": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%7#0"
      ]
    },
    "2318": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%7#0",
        "tmp%0#0"
      ]
    },
    "2320": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "aggregate%head%8#0"
      ]
    },
    "2321": {
      "op": "pushbytes 0x14",
      "defined_out": [
        "0x14",
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "aggregate%head%8#0",
        "0x14"
      ]
    },
    "2324": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2325": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2327": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2329": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "2335": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2337": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000001"
      ]
    },
    "2339": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2341": {
      "op": "bytec 15 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000002"
      ]
    },
    "2343": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2345": {
      "op": "bytec 23 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000003"
      ]
    },
    "2347": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2349": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000004"
      ]
    },
    "2359": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2361": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000005"
      ]
    },
    "2371": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2373": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000006"
      ]
    },
    "2383": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2385": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000007"
      ]
    },
    "2395": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2397": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000008"
      ]
    },
    "2407": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2409": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000009"
      ]
    },
    "2419": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2421": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000a"
      ]
    },
    "2431": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2433": {
      "op": "bytec 54 // 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000b"
      ]
    },
    "2435": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2437": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000c"
      ]
    },
    "2447": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2449": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000d"
      ]
    },
    "2459": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2461": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000e"
      ]
    },
    "2471": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "2473": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2475": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2477": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2479": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2480": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2482": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args_next_txn@1"
    },
    "2485": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2486": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "2488": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2489": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2492": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "2494": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "2495": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "2496": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "2497": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "2498": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "2499": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "tmp%2#0 (copy)"
      ]
    },
    "2501": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "2502": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "2503": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2504": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2506": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0"
      ]
    },
    "2509": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "2510": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%4#0"
      ]
    },
    "2511": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "2512": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2515": {
      "op": "pushbytes 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x0f101112deadbeef14"
      ]
    },
    "2526": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2527": {
      "op": "assert",
      "stack_out": []
    },
    "2528": {
      "retsub": true,
      "op": "retsub"
    },
    "2529": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2532": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_void_block@0"
    },
    "2535": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2536": {
      "op": "bytec 24 // \"World1\"",
      "defined_out": [
        "\"World1\""
      ],
      "stack_out": [
        "\"World1\""
      ]
    },
    "2538": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "2539": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "2540": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "2543": {
      "op": "bytec 24 // \"World1\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"World1\""
      ]
    },
    "2545": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2546": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2548": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2550": {
      "op": "bytec 13 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(log(string)void)"
      ]
    },
    "2552": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2554": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2556": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2558": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2561": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2563": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@1"
    },
    "2566": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2567": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2569": {
      "op": "bytec 24 // 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "2571": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2572": {
      "op": "assert",
      "stack_out": []
    },
    "2573": {
      "op": "itxn_begin"
    },
    "2574": {
      "op": "bytec 25 // \"World2\"",
      "defined_out": [
        "\"World2\""
      ],
      "stack_out": [
        "\"World2\""
      ]
    },
    "2576": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%length%1#0"
      ]
    },
    "2577": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%1#0"
      ]
    },
    "2578": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%1#0"
      ]
    },
    "2581": {
      "op": "bytec 25 // \"World2\"",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "\"World2\""
      ]
    },
    "2583": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2584": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2586": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2588": {
      "op": "bytec 13 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(log(string)void)"
      ]
    },
    "2590": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2592": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2594": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2596": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2598": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2599": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2601": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@2"
    },
    "2604": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2605": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2607": {
      "op": "bytec 25 // 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "2609": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2610": {
      "op": "assert",
      "stack_out": []
    },
    "2611": {
      "op": "itxn_begin"
    },
    "2612": {
      "op": "bytec 26 // \"World3\"",
      "defined_out": [
        "\"World3\""
      ],
      "stack_out": [
        "\"World3\""
      ]
    },
    "2614": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0"
      ],
      "stack_out": [
        "aggregate%length%2#0"
      ]
    },
    "2615": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%2#0"
      ]
    },
    "2616": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%2#0"
      ]
    },
    "2619": {
      "op": "bytec 26 // \"World3\"",
      "stack_out": [
        "aggregate%length_uint16%2#0",
        "\"World3\""
      ]
    },
    "2621": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2622": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2624": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2626": {
      "op": "bytec 13 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(log(string)void)"
      ]
    },
    "2628": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2630": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2632": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2634": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2636": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2637": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2639": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@3"
    },
    "2642": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2643": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2645": {
      "op": "bytec 26 // 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "2647": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2648": {
      "op": "assert",
      "stack_out": []
    },
    "2649": {
      "op": "itxn_begin"
    },
    "2650": {
      "op": "bytec 27 // \"World4\"",
      "defined_out": [
        "\"World4\""
      ],
      "stack_out": [
        "\"World4\""
      ]
    },
    "2652": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0"
      ],
      "stack_out": [
        "aggregate%length%3#0"
      ]
    },
    "2653": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%3#0"
      ]
    },
    "2654": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%3#0"
      ]
    },
    "2657": {
      "op": "bytec 27 // \"World4\"",
      "stack_out": [
        "aggregate%length_uint16%3#0",
        "\"World4\""
      ]
    },
    "2659": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2660": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "2662": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2664": {
      "op": "bytec 13 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(log(string)void)"
      ]
    },
    "2666": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2668": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2670": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2672": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2675": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2677": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@4"
    },
    "2680": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2681": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2683": {
      "op": "bytec 27 // 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "2685": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2686": {
      "op": "assert",
      "stack_out": []
    },
    "2687": {
      "retsub": true,
      "op": "retsub"
    },
    "2688": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2691": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types_block@0"
    },
    "2694": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2695": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2697": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2698": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2700": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "2702": {
      "op": "itob",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "2703": {
      "op": "uncover 1",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "2705": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%3#0"
      ]
    },
    "2707": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2709": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2711": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2713": {
      "op": "pushbytes 0x46b50faf // method \"log(uint64,address,uint64)void\"",
      "defined_out": [
        "Method(log(uint64,address,uint64)void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(log(uint64,address,uint64)void)"
      ]
    },
    "2719": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2721": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2723": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "2725": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2727": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2729": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2731": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2732": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2734": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types_next_txn@1"
    },
    "2737": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2738": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2740": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2742": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2744": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2745": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "2747": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "2748": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "app#0 (copy)"
      ]
    },
    "2750": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%5#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2752": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0",
        "value%1#0"
      ]
    },
    "2753": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "2754": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2755": {
      "op": "assert",
      "stack_out": []
    },
    "2756": {
      "retsub": true,
      "op": "retsub"
    },
    "2757": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2760": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address_block@0"
    },
    "2763": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2764": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2766": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2768": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2770": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(log(address)void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(log(address)void)"
      ]
    },
    "2776": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2778": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2780": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2782": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2784": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2785": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2787": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address_next_txn@1"
    },
    "2790": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2791": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2793": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2795": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2796": {
      "op": "assert",
      "stack_out": []
    },
    "2797": {
      "retsub": true,
      "op": "retsub"
    },
    "2798": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2802": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_block@0"
    },
    "2805": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2806": {
      "op": "bytec 9 // \"s\"",
      "defined_out": [
        "\"s\""
      ],
      "stack_out": [
        "result1#0",
        "\"s\""
      ]
    },
    "2808": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%0#0"
      ]
    },
    "2809": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2810": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2813": {
      "op": "bytec 9 // \"s\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0",
        "\"s\""
      ]
    },
    "2815": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2816": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2818": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2820": {
      "op": "bytec 28 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2822": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2824": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2826": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2828": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2831": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2833": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@1"
    },
    "2836": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2837": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2839": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2840": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2843": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "2845": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "2846": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "2847": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "2848": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "2849": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "2850": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "2852": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "2853": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "2854": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2855": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2857": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "2860": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "2861": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%3#0"
      ]
    },
    "2862": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "2863": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2866": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2867": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2869": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "\"echo: s\""
      ]
    },
    "2878": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2879": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2880": {
      "op": "itxn_begin"
    },
    "2881": {
      "op": "bytec 9 // \"s\"",
      "defined_out": [
        "\"s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s\""
      ]
    },
    "2883": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%1#0"
      ]
    },
    "2884": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2885": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2888": {
      "op": "bytec 9 // \"s\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%1#0",
        "\"s\""
      ]
    },
    "2890": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2891": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2893": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2895": {
      "op": "bytec 28 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2897": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2899": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2901": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2903": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2905": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2906": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2908": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@2"
    },
    "2911": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2912": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2914": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2915": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "2918": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2919": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "2920": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "length%1#0"
      ]
    },
    "2921": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "length%1#0",
        "1"
      ]
    },
    "2922": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "mul%1#0"
      ]
    },
    "2923": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "mul%1#0",
        "2"
      ]
    },
    "2924": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0"
      ]
    },
    "2925": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0",
        "tmp%7#0 (copy)"
      ]
    },
    "2927": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "2928": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "eq%1#0"
      ]
    },
    "2929": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "2930": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%1#0",
        "awst_tmp%1#0"
      ]
    },
    "2932": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%1#0",
        "tmp%8#0"
      ]
    },
    "2935": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "2936": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%1#0",
        "tmp%9#0"
      ]
    },
    "2937": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%1#0"
      ]
    },
    "2938": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2941": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2943": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2944": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2945": {
      "op": "itxn_begin"
    },
    "2946": {
      "op": "bytec 9 // \"s\"",
      "defined_out": [
        "\"s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s\""
      ]
    },
    "2948": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%2#0"
      ]
    },
    "2949": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "2950": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "2953": {
      "op": "bytec 9 // \"s\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0",
        "\"s\""
      ]
    },
    "2955": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2956": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2958": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2960": {
      "op": "bytec 28 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2964": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2966": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2968": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2971": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2973": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@3"
    },
    "2976": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2977": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2979": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2980": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ]
    },
    "2983": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2984": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "0"
      ]
    },
    "2985": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "length%2#0"
      ]
    },
    "2986": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "length%2#0",
        "1"
      ]
    },
    "2987": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "mul%2#0"
      ]
    },
    "2988": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "mul%2#0",
        "2"
      ]
    },
    "2989": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0"
      ]
    },
    "2990": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2992": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "2993": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "eq%2#0"
      ]
    },
    "2994": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "as_Encoded(len+utf8[])%2#0"
      ]
    },
    "2995": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%2#0",
        "awst_tmp%2#0"
      ]
    },
    "2997": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%14#0"
      ]
    },
    "3000": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3001": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%2#0",
        "tmp%15#0"
      ]
    },
    "3002": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+utf8[])%2#0"
      ]
    },
    "3003": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "3006": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "3008": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%17#0"
      ]
    },
    "3009": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3010": {
      "retsub": true,
      "op": "retsub"
    },
    "3011": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3014": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "3015": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_block@0"
    },
    "3018": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "3019": {
      "op": "bytec 10 // 0x62",
      "defined_out": [
        "0x62"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "3021": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%0#0"
      ]
    },
    "3022": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "3023": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "3026": {
      "op": "bytec 10 // 0x62",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0",
        "0x62"
      ]
    },
    "3028": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3029": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3031": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3033": {
      "op": "bytec 29 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "3035": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3037": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3039": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3041": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3043": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3044": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3046": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@1"
    },
    "3049": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3050": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "3052": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3053": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3056": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3057": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "0"
      ]
    },
    "3058": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0"
      ]
    },
    "3059": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "length%0#0",
        "1"
      ]
    },
    "3060": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0"
      ]
    },
    "3061": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "mul%0#0",
        "2"
      ]
    },
    "3062": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0"
      ]
    },
    "3063": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0",
        "tmp%1#0 (copy)"
      ]
    },
    "3065": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "3066": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%1#0",
        "eq%0#0"
      ]
    },
    "3067": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3068": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3070": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0"
      ]
    },
    "3073": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "3074": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%0#0",
        "tmp%3#0"
      ]
    },
    "3075": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3076": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "3079": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3080": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "3082": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x6563686f3a2062"
      ]
    },
    "3091": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "3092": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3093": {
      "op": "itxn_begin"
    },
    "3094": {
      "op": "bytec 10 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "3096": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%1#0"
      ]
    },
    "3097": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "3098": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "3101": {
      "op": "bytec 10 // 0x62",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%1#0",
        "0x62"
      ]
    },
    "3103": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3104": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3106": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3108": {
      "op": "bytec 29 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "3110": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3112": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3114": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3116": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3119": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3121": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@2"
    },
    "3124": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3125": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "3127": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3128": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "3131": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3132": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "3133": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "length%1#0"
      ]
    },
    "3134": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "length%1#0",
        "1"
      ]
    },
    "3135": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "mul%1#0"
      ]
    },
    "3136": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%1#0",
        "mul%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "mul%1#0",
        "2"
      ]
    },
    "3137": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0"
      ]
    },
    "3138": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3140": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "3141": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%7#0",
        "eq%1#0"
      ]
    },
    "3142": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "3143": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%1#0",
        "awst_tmp%1#0"
      ]
    },
    "3145": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%1#0",
        "tmp%8#0"
      ]
    },
    "3148": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+uint8[])%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%1#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "3149": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[])%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%1#0",
        "tmp%9#0"
      ]
    },
    "3150": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%1#0"
      ]
    },
    "3151": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "3154": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "3156": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "3157": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3158": {
      "op": "itxn_begin"
    },
    "3159": {
      "op": "bytec 10 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "3161": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%2#0"
      ]
    },
    "3162": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "3163": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "3166": {
      "op": "bytec 10 // 0x62",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0",
        "0x62"
      ]
    },
    "3168": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3169": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3171": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3173": {
      "op": "bytec 29 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "3175": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3177": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3179": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3181": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3184": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3186": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@3"
    },
    "3189": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3190": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "3192": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3193": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ]
    },
    "3196": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "3197": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "0"
      ]
    },
    "3198": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "length%2#0"
      ]
    },
    "3199": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "length%2#0",
        "1"
      ]
    },
    "3200": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "mul%2#0"
      ]
    },
    "3201": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%2#0",
        "mul%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "mul%2#0",
        "2"
      ]
    },
    "3202": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0"
      ]
    },
    "3203": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0",
        "tmp%13#0 (copy)"
      ]
    },
    "3205": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "3206": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%13#0",
        "eq%2#0"
      ]
    },
    "3207": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "as_Encoded(len+uint8[])%2#0"
      ]
    },
    "3208": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%2#0",
        "awst_tmp%2#0"
      ]
    },
    "3210": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(len+uint8[])%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%2#0",
        "tmp%14#0"
      ]
    },
    "3213": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(len+uint8[])%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%2#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "3214": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[])%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%2#0",
        "tmp%15#0"
      ]
    },
    "3215": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(len+uint8[])%2#0"
      ]
    },
    "3216": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "3219": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "3221": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%17#0"
      ]
    },
    "3222": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3223": {
      "retsub": true,
      "op": "retsub"
    },
    "3224": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3227": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "result1#0"
      ]
    },
    "3228": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_block@0"
    },
    "3231": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "3232": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3234": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "3236": {
      "op": "bytec 30 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "3238": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3240": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3242": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3244": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3246": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3248": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3249": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3251": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@1"
    },
    "3254": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3255": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "3257": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3258": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3261": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3262": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3263": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "3264": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3265": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "3266": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3268": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ]
    },
    "3271": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3272": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ]
    },
    "3273": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "3274": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "3275": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3276": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "3278": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "2"
      ]
    },
    "3279": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "3280": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3281": {
      "op": "itxn_begin"
    },
    "3282": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "3283": {
      "op": "itob",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3284": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3286": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3288": {
      "op": "bytec 30 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "3290": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3292": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3294": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3296": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3298": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3299": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3301": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@2"
    },
    "3304": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3305": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "3307": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3308": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3311": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3312": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0"
      ]
    },
    "3313": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0",
        "8"
      ]
    },
    "3314": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "eq%1#0"
      ]
    },
    "3315": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "3316": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "3318": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%1#0",
        "tmp%7#0"
      ]
    },
    "3321": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%1#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "3322": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%1#0",
        "tmp%8#0"
      ]
    },
    "3323": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "3324": {
      "op": "btoi",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "3325": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "3327": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "3328": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3329": {
      "op": "itxn_begin"
    },
    "3330": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3332": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "3334": {
      "op": "bytec 30 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "3336": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3338": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3340": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3342": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3344": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3347": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3349": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@3"
    },
    "3352": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3353": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "3355": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3356": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "3359": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "3360": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0"
      ]
    },
    "3361": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0",
        "8"
      ]
    },
    "3362": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "eq%2#0"
      ]
    },
    "3363": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "3364": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%2#0",
        "awst_tmp%2#0"
      ]
    },
    "3366": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%12#0"
      ]
    },
    "3369": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "3370": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%2#0",
        "tmp%13#0"
      ]
    },
    "3371": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint64)%2#0"
      ]
    },
    "3372": {
      "op": "btoi",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "3373": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "3375": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%15#0"
      ]
    },
    "3376": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3377": {
      "retsub": true,
      "op": "retsub"
    },
    "3378": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3381": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "3382": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_block@0"
    },
    "3385": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "3386": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3388": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "3390": {
      "op": "bytec 31 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "3392": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3394": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3396": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3398": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3400": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3403": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3405": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@1"
    },
    "3408": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3409": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "3411": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3412": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3415": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3416": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "3417": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "64"
      ]
    },
    "3419": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "3420": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "as_Encoded(uint512)%0#0"
      ]
    },
    "3421": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3423": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ]
    },
    "3426": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint512)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3427": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint512)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%0#0",
        "tmp%2#0"
      ]
    },
    "3428": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "3429": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3430": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "3432": {
      "op": "bytec 32 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x03"
      ]
    },
    "3434": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "3435": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3436": {
      "op": "itxn_begin"
    },
    "3437": {
      "op": "bytec 11 // 0x02",
      "defined_out": [
        "0x02",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x02"
      ]
    },
    "3439": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%value_len%0#0"
      ]
    },
    "3440": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "3442": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "3443": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0"
      ]
    },
    "3444": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "64"
      ]
    },
    "3446": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%bzero%0#0"
      ]
    },
    "3447": {
      "op": "bytec 11 // 0x02",
      "stack_out": [
        "result1#0",
        "aggregate%bzero%0#0",
        "0x02"
      ]
    },
    "3449": {
      "op": "b|",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3450": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3452": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3454": {
      "op": "bytec 31 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "3456": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3458": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3460": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3462": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3464": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3465": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3467": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@2"
    },
    "3470": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3471": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "3473": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3474": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0"
      ]
    },
    "3477": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "3478": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0"
      ]
    },
    "3479": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "len%1#0",
        "64"
      ]
    },
    "3481": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%6#0",
        "eq%1#0"
      ]
    },
    "3482": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "defined_out": [
        "as_Encoded(uint512)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "as_Encoded(uint512)%1#0"
      ]
    },
    "3483": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "3485": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint512)%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%1#0",
        "tmp%7#0"
      ]
    },
    "3488": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint512)%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%1#0",
        "tmp%7#0",
        "0x151f7c75"
      ]
    },
    "3489": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint512)%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%1#0",
        "tmp%8#0"
      ]
    },
    "3490": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "3491": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "3493": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "3494": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3495": {
      "op": "itxn_begin"
    },
    "3496": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3498": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "3500": {
      "op": "bytec 31 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "3502": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3504": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3506": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3508": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3510": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3512": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3513": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3515": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@3"
    },
    "3518": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3519": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "3521": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3522": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0"
      ]
    },
    "3525": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "3526": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0"
      ]
    },
    "3527": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "len%2#0",
        "64"
      ]
    },
    "3529": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%11#0",
        "eq%2#0"
      ]
    },
    "3530": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "defined_out": [
        "as_Encoded(uint512)%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "as_Encoded(uint512)%2#0"
      ]
    },
    "3531": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%2#0",
        "awst_tmp%2#0"
      ]
    },
    "3533": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint512)%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%2#0",
        "tmp%12#0"
      ]
    },
    "3536": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint512)%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%2#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "3537": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint512)%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded(uint512)%2#0",
        "tmp%13#0"
      ]
    },
    "3538": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "3539": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "3541": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%15#0"
      ]
    },
    "3542": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3543": {
      "retsub": true,
      "op": "retsub"
    },
    "3544": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "3548": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_block@0"
    },
    "3551": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "3552": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\""
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "3553": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%0#0"
      ]
    },
    "3554": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "3555": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "3558": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%0#0",
        "\"s1\""
      ]
    },
    "3559": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "3560": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "0x6231"
      ]
    },
    "3561": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "3562": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "3563": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "3566": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "0x6231"
      ]
    },
    "3567": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "3568": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3570": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3572": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3574": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3576": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3578": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3580": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3582": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3584": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3586": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3588": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3590": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3592": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3594": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3595": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3597": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@1"
    },
    "3600": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3601": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "3603": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3604": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3607": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "3609": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0"
      ]
    },
    "3610": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0",
        "76"
      ]
    },
    "3612": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "3613": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3614": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "3616": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3617": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "3619": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3620": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "3621": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3622": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3624": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "3626": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "3628": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "3629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0"
      ]
    },
    "3630": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "3631": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "3632": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "3633": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "3634": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "3635": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "76"
      ]
    },
    "3637": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "3638": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3640": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "3641": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "extract_uint16%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%1#0"
      ]
    },
    "3642": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "awst_tmp%0#0",
        "extract_uint16%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%1#0",
        "add%1#0 (copy)"
      ]
    },
    "3644": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "3645": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "3646": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3648": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "3649": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3650": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0"
      ]
    },
    "3652": {
      "op": "dig 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3654": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "3655": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "3657": {
      "op": "dig 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3659": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "3661": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "3663": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%4#0"
      ]
    },
    "3664": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "3665": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "length%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "3666": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "3667": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "mul%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "3668": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "3669": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "3670": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0"
      ]
    },
    "3671": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0",
        "tmp%2#0 (copy)"
      ]
    },
    "3673": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0",
        "len%0#0"
      ]
    },
    "3674": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%2#0"
      ]
    },
    "3675": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "3676": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3678": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ]
    },
    "3681": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "3682": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%6#0"
      ]
    },
    "3683": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "3684": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3685": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "3687": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3688": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "3689": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3690": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%3#0",
        "result1#0"
      ]
    },
    "3692": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%3#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3693": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%3#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3694": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%3#0",
        "result1#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3695": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%3#0",
        "result1#0",
        "aggregate%extract_uint16%4#0",
        "result1#0 (copy)"
      ]
    },
    "3697": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result1#0",
        "aggregate%extract_uint16%4#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "3699": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "3701": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "aggregate%substring3%2#0"
      ]
    },
    "3702": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0"
      ]
    },
    "3704": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3705": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3706": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%substring3%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "3707": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "result1#0"
      ]
    },
    "3709": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3710": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "result1#0",
        "aggregate%len%1#0"
      ]
    },
    "3711": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "result1#0"
      ]
    },
    "3713": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3714": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%len%1#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "3716": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "3718": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "result1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3719": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ]
    },
    "3721": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3722": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "3724": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "3725": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "aggregate%extract%0#0"
      ]
    },
    "3726": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "result1#0"
      ]
    },
    "3728": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%extract%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "result1#0",
        "12"
      ]
    },
    "3730": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%extract%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "3732": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "3733": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%2#0"
      ]
    },
    "3735": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0",
        "tmp%7#0",
        "aggregate%extract%1#0"
      ]
    },
    "3737": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%extract%0#0",
        "tmp%7#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "3739": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "result1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%extract%1#0"
      ]
    },
    "3741": {
      "op": "cover 3",
      "defined_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0"
      ]
    },
    "3743": {
      "op": "cover 3",
      "defined_out": [
        "result1#0",
        "s#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "s#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "3745": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result1#0",
        "s#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "b#0",
        "s#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "3747": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result1#0",
        "s#0",
        "tmp%10#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "u#0",
        "b#0",
        "s#0",
        "tmp%10#0"
      ]
    },
    "3749": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "3751": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%11#0"
      ]
    },
    "3754": {
      "op": "bytec 17 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%11#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%11#0",
        "\"echo: s1\""
      ]
    },
    "3756": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%12#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%12#0"
      ]
    },
    "3757": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "3758": {
      "op": "extract 2 0",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%13#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%13#0"
      ]
    },
    "3761": {
      "op": "bytec 55 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "bu#0",
        "result1#0",
        "tmp%13#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%13#0",
        "0x6563686f3a206231"
      ]
    },
    "3763": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%14#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%14#0"
      ]
    },
    "3764": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0"
      ]
    },
    "3765": {
      "op": "btoi",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%15#0"
      ]
    },
    "3766": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%15#0",
        "2"
      ]
    },
    "3767": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%16#0"
      ]
    },
    "3768": {
      "op": "assert",
      "defined_out": [
        "result1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%17#0"
      ]
    },
    "3769": {
      "op": "bytec 32 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%17#0",
        "0x03"
      ]
    },
    "3771": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0"
      ]
    },
    "3772": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3773": {
      "op": "itxn_begin"
    },
    "3774": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "3775": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%2#0"
      ]
    },
    "3776": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "3777": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "3780": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%2#0",
        "\"s1\""
      ]
    },
    "3781": {
      "op": "concat",
      "defined_out": [
        "result1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0"
      ]
    },
    "3782": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "0x6231"
      ]
    },
    "3783": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "result1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "aggregate%length%3#0"
      ]
    },
    "3784": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "result1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "3785": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "result1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "3788": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "aggregate%length_uint16%3#0",
        "0x6231"
      ]
    },
    "3789": {
      "op": "concat",
      "defined_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "3790": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "1"
      ]
    },
    "3791": {
      "op": "itob",
      "defined_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3792": {
      "op": "bytec 11 // 0x02",
      "defined_out": [
        "0x02",
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "0x02"
      ]
    },
    "3794": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "aggregate%value_len%0#0"
      ]
    },
    "3795": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "3797": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "3798": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3799": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "64"
      ]
    },
    "3801": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "aggregate%bzero%0#0"
      ]
    },
    "3802": {
      "op": "bytec 11 // 0x02",
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "aggregate%bzero%0#0",
        "0x02"
      ]
    },
    "3804": {
      "op": "b|",
      "defined_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "3805": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%19#0"
      ]
    },
    "3807": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%20#0",
        "tmp%21#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%22#0"
      ]
    },
    "3809": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "tmp%21#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%22#0",
        "tmp%20#0"
      ]
    },
    "3811": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "result1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%22#0"
      ]
    },
    "3813": {
      "op": "cover 3",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3815": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3817": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3819": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3821": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3823": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3825": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "3827": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3829": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3831": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3833": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3835": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3836": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3838": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@2"
    },
    "3841": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3842": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "3844": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3845": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ]
    },
    "3848": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "0"
      ]
    },
    "3850": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%1#0",
        "extract_uint16%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "extract_uint16%2#0"
      ]
    },
    "3851": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%1#0",
        "extract_uint16%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "extract_uint16%2#0",
        "76"
      ]
    },
    "3853": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "eq%3#0"
      ]
    },
    "3854": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ]
    },
    "3855": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3856": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "0"
      ]
    },
    "3857": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3858": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%23#0"
      ]
    },
    "3860": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3861": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%6#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "2"
      ]
    },
    "3862": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%23#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3863": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%23#0",
        "aggregate%extract_uint16%7#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3865": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%7#0",
        "tmp%23#0 (copy)",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "3867": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "3869": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "3870": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%24#0",
        "0"
      ]
    },
    "3871": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "length%2#0"
      ]
    },
    "3872": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "length%2#0",
        "1"
      ]
    },
    "3873": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "mul%2#0"
      ]
    },
    "3874": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "mul%2#0",
        "2"
      ]
    },
    "3875": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%4#0"
      ]
    },
    "3876": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%4#0",
        "76"
      ]
    },
    "3878": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0"
      ]
    },
    "3879": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3881": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%23#0 (copy)",
        "2"
      ]
    },
    "3882": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "extract_uint16%3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "extract_uint16%3#0"
      ]
    },
    "3883": {
      "op": "dig 1",
      "defined_out": [
        "add%5#0",
        "add%5#0 (copy)",
        "awst_tmp%1#0",
        "extract_uint16%3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "extract_uint16%3#0",
        "add%5#0 (copy)"
      ]
    },
    "3885": {
      "op": "==",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "eq%4#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "eq%4#0"
      ]
    },
    "3886": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0"
      ]
    },
    "3887": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3889": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%23#0 (copy)",
        "2"
      ]
    },
    "3890": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%8#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3891": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0"
      ]
    },
    "3893": {
      "op": "dig 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3895": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0",
        "aggregate%len%2#0"
      ]
    },
    "3896": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "add%5#0"
      ]
    },
    "3898": {
      "op": "dig 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "add%5#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3900": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "aggregate%len%2#0",
        "add%5#0",
        "tmp%23#0 (copy)",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "3902": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%23#0 (copy)",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0"
      ]
    },
    "3904": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%25#0"
      ]
    },
    "3905": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "tmp%25#0",
        "0"
      ]
    },
    "3906": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "length%3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "length%3#0"
      ]
    },
    "3907": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "length%3#0",
        "1"
      ]
    },
    "3908": {
      "op": "*",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "mul%3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "mul%3#0"
      ]
    },
    "3909": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "mul%3#0",
        "2"
      ]
    },
    "3910": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "add%6#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%5#0",
        "add%6#0"
      ]
    },
    "3911": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "awst_tmp%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%7#0"
      ]
    },
    "3912": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%7#0",
        "tmp%23#0 (copy)"
      ]
    },
    "3914": {
      "op": "len",
      "defined_out": [
        "add%7#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "add%7#0",
        "len%1#0"
      ]
    },
    "3915": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%23#0",
        "eq%5#0"
      ]
    },
    "3916": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "3917": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "3919": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%26#0"
      ]
    },
    "3922": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%26#0",
        "0x151f7c75"
      ]
    },
    "3923": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%27#0"
      ]
    },
    "3924": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "3925": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "3927": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%28#0"
      ]
    },
    "3928": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3929": {
      "op": "itxn_begin"
    },
    "3930": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "3931": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%4#0"
      ]
    },
    "3932": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "3933": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "3936": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%4#0",
        "\"s1\""
      ]
    },
    "3937": {
      "op": "concat",
      "defined_out": [
        "result1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%29#0"
      ]
    },
    "3938": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%29#0",
        "0x6231"
      ]
    },
    "3939": {
      "op": "len",
      "defined_out": [
        "aggregate%length%5#0",
        "result1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%29#0",
        "aggregate%length%5#0"
      ]
    },
    "3940": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "result1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%29#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "3941": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%5#0",
        "result1#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%29#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "3944": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result1#0",
        "tmp%29#0",
        "aggregate%length_uint16%5#0",
        "0x6231"
      ]
    },
    "3945": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "tmp%30#0"
      ]
    },
    "3946": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3948": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3950": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3952": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3954": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3956": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3958": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3960": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3964": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3966": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3968": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3970": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3972": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3973": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3975": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@3"
    },
    "3978": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3979": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "3981": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3982": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ]
    },
    "3985": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ]
    },
    "3986": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)",
        "0"
      ]
    },
    "3987": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%2#0",
        "extract_uint16%4#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "extract_uint16%4#0"
      ]
    },
    "3988": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%2#0",
        "extract_uint16%4#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "extract_uint16%4#0",
        "76"
      ]
    },
    "3990": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%6#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "eq%6#0"
      ]
    },
    "3991": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ]
    },
    "3992": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ]
    },
    "3993": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)",
        "0"
      ]
    },
    "3994": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "3995": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%9#0",
        "tmp%31#0"
      ]
    },
    "3997": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%9#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ]
    },
    "3998": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%9#0",
        "tmp%31#0",
        "tmp%31#0 (copy)",
        "2"
      ]
    },
    "3999": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%9#0",
        "tmp%31#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "4000": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%9#0",
        "tmp%31#0",
        "aggregate%extract_uint16%10#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4002": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%10#0",
        "tmp%31#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "4004": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%31#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "4006": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "4007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%32#0",
        "0"
      ]
    },
    "4008": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%4#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "length%4#0"
      ]
    },
    "4009": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%4#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "length%4#0",
        "1"
      ]
    },
    "4010": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%4#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "mul%4#0"
      ]
    },
    "4011": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "mul%4#0",
        "2"
      ]
    },
    "4012": {
      "op": "+",
      "defined_out": [
        "add%8#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%8#0"
      ]
    },
    "4013": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%8#0",
        "76"
      ]
    },
    "4015": {
      "op": "+",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0"
      ]
    },
    "4016": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4018": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%31#0 (copy)",
        "2"
      ]
    },
    "4019": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "extract_uint16%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "extract_uint16%5#0"
      ]
    },
    "4020": {
      "op": "dig 1",
      "defined_out": [
        "add%9#0",
        "add%9#0 (copy)",
        "awst_tmp%2#0",
        "extract_uint16%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "extract_uint16%5#0",
        "add%9#0 (copy)"
      ]
    },
    "4022": {
      "op": "==",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "eq%7#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "eq%7#0"
      ]
    },
    "4023": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0"
      ]
    },
    "4024": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4026": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%31#0 (copy)",
        "2"
      ]
    },
    "4027": {
      "op": "extract_uint16",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%11#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "4028": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%11#0",
        "add%9#0"
      ]
    },
    "4030": {
      "op": "dig 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%11#0",
        "add%9#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4032": {
      "op": "len",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%11#0",
        "add%9#0",
        "aggregate%len%3#0"
      ]
    },
    "4033": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "add%9#0"
      ]
    },
    "4035": {
      "op": "dig 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "add%9#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4037": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "aggregate%len%3#0",
        "add%9#0",
        "tmp%31#0 (copy)",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "4039": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%31#0 (copy)",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0"
      ]
    },
    "4041": {
      "op": "substring3",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%33#0"
      ]
    },
    "4042": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "tmp%33#0",
        "0"
      ]
    },
    "4043": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "length%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "length%5#0"
      ]
    },
    "4044": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "length%5#0",
        "1"
      ]
    },
    "4045": {
      "op": "*",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "mul%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "mul%5#0"
      ]
    },
    "4046": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "mul%5#0",
        "2"
      ]
    },
    "4047": {
      "op": "+",
      "defined_out": [
        "add%10#0",
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%9#0",
        "add%10#0"
      ]
    },
    "4048": {
      "op": "+",
      "defined_out": [
        "add%11#0",
        "awst_tmp%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%11#0"
      ]
    },
    "4049": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%11#0",
        "tmp%31#0 (copy)"
      ]
    },
    "4051": {
      "op": "len",
      "defined_out": [
        "add%11#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "add%11#0",
        "len%2#0"
      ]
    },
    "4052": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%8#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%31#0",
        "eq%8#0"
      ]
    },
    "4053": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4054": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "awst_tmp%2#0"
      ]
    },
    "4056": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%34#0"
      ]
    },
    "4059": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "4060": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%35#0"
      ]
    },
    "4061": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "4062": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "4064": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%36#0"
      ]
    },
    "4065": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "4066": {
      "op": "itxn_begin"
    },
    "4067": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "4068": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length%6#0"
      ]
    },
    "4069": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "4070": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "4073": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result1#0",
        "aggregate%length_uint16%6#0",
        "\"s1\""
      ]
    },
    "4074": {
      "op": "concat",
      "defined_out": [
        "result1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%37#0"
      ]
    },
    "4075": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%37#0",
        "0x6231"
      ]
    },
    "4076": {
      "op": "len",
      "defined_out": [
        "aggregate%length%7#0",
        "result1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%37#0",
        "aggregate%length%7#0"
      ]
    },
    "4077": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "result1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%37#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "4078": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%7#0",
        "result1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%37#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "4081": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result1#0",
        "tmp%37#0",
        "aggregate%length_uint16%7#0",
        "0x6231"
      ]
    },
    "4082": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "result1#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%38#0"
      ]
    },
    "4083": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4085": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "4087": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4089": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "4091": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4093": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4095": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "4097": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "4099": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "4101": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "4103": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "4105": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "4107": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "4109": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "4110": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "4112": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@4"
    },
    "4115": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_next_txn@4",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "4116": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0"
      ]
    },
    "4118": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4119": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ]
    },
    "4122": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4123": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)",
        "0"
      ]
    },
    "4124": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%3#0",
        "extract_uint16%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "extract_uint16%6#0"
      ]
    },
    "4125": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%3#0",
        "extract_uint16%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "extract_uint16%6#0",
        "76"
      ]
    },
    "4127": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%9#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "eq%9#0"
      ]
    },
    "4128": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ]
    },
    "4129": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)",
        "0"
      ]
    },
    "4131": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "4132": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%12#0",
        "tmp%39#0"
      ]
    },
    "4134": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%12#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4135": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%12#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%12#0",
        "tmp%39#0",
        "tmp%39#0 (copy)",
        "2"
      ]
    },
    "4136": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "aggregate%extract_uint16%13#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%12#0",
        "tmp%39#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "4137": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%12#0",
        "tmp%39#0",
        "aggregate%extract_uint16%13#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4139": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%13#0",
        "tmp%39#0 (copy)",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "4141": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%39#0 (copy)",
        "aggregate%extract_uint16%12#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "4143": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "4144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%40#0",
        "0"
      ]
    },
    "4145": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%3#0",
        "length%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "length%6#0"
      ]
    },
    "4146": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%3#0",
        "length%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "length%6#0",
        "1"
      ]
    },
    "4147": {
      "op": "*",
      "defined_out": [
        "awst_tmp%3#0",
        "mul%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "mul%6#0"
      ]
    },
    "4148": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "mul%6#0",
        "2"
      ]
    },
    "4149": {
      "op": "+",
      "defined_out": [
        "add%12#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%12#0"
      ]
    },
    "4150": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%12#0",
        "76"
      ]
    },
    "4152": {
      "op": "+",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0"
      ]
    },
    "4153": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4155": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%39#0 (copy)",
        "2"
      ]
    },
    "4156": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "extract_uint16%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "extract_uint16%7#0"
      ]
    },
    "4157": {
      "op": "dig 1",
      "defined_out": [
        "add%13#0",
        "add%13#0 (copy)",
        "awst_tmp%3#0",
        "extract_uint16%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "extract_uint16%7#0",
        "add%13#0 (copy)"
      ]
    },
    "4159": {
      "op": "==",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "eq%10#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "eq%10#0"
      ]
    },
    "4160": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0"
      ]
    },
    "4161": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4163": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%39#0 (copy)",
        "2"
      ]
    },
    "4164": {
      "op": "extract_uint16",
      "defined_out": [
        "add%13#0",
        "aggregate%extract_uint16%14#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "4165": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%14#0",
        "add%13#0"
      ]
    },
    "4167": {
      "op": "dig 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%14#0",
        "add%13#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4169": {
      "op": "len",
      "defined_out": [
        "add%13#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%14#0",
        "add%13#0",
        "aggregate%len%4#0"
      ]
    },
    "4170": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "add%13#0"
      ]
    },
    "4172": {
      "op": "dig 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "add%13#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4174": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "aggregate%len%4#0",
        "add%13#0",
        "tmp%39#0 (copy)",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "4176": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%39#0 (copy)",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0"
      ]
    },
    "4178": {
      "op": "substring3",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%41#0"
      ]
    },
    "4179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "tmp%41#0",
        "0"
      ]
    },
    "4180": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "length%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "length%7#0"
      ]
    },
    "4181": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "length%7#0",
        "1"
      ]
    },
    "4182": {
      "op": "*",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "mul%7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "mul%7#0"
      ]
    },
    "4183": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "mul%7#0",
        "2"
      ]
    },
    "4184": {
      "op": "+",
      "defined_out": [
        "add%13#0",
        "add%14#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%13#0",
        "add%14#0"
      ]
    },
    "4185": {
      "op": "+",
      "defined_out": [
        "add%15#0",
        "awst_tmp%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%15#0"
      ]
    },
    "4186": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%15#0",
        "tmp%39#0 (copy)"
      ]
    },
    "4188": {
      "op": "len",
      "defined_out": [
        "add%15#0",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "add%15#0",
        "len%3#0"
      ]
    },
    "4189": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%11#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%39#0",
        "eq%11#0"
      ]
    },
    "4190": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4191": {
      "op": "uncover 1",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "awst_tmp%3#0"
      ]
    },
    "4193": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%42#0"
      ]
    },
    "4196": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "4197": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%43#0"
      ]
    },
    "4198": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4199": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4200": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "0"
      ]
    },
    "4201": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "4202": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4204": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4205": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "2"
      ]
    },
    "4206": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "4207": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4209": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "4211": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "4213": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%10#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%substring3%10#0"
      ]
    },
    "4214": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item0%0#0"
      ]
    },
    "4217": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4219": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4220": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "2"
      ]
    },
    "4221": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%17#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "4222": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4224": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4225": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%17#0",
        "aggregate%item0%0#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%len%5#0"
      ]
    },
    "4226": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4228": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4229": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "4231": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0"
      ]
    },
    "4233": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%11#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%substring3%11#0"
      ]
    },
    "4234": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item1%0#0"
      ]
    },
    "4237": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4239": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "4240": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "4"
      ]
    },
    "4242": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "4",
        "8"
      ]
    },
    "4243": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract%2#0"
      ]
    },
    "4244": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item2%0#0"
      ]
    },
    "4245": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "4247": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "12"
      ]
    },
    "4249": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "12",
        "64"
      ]
    },
    "4251": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%3#0"
      ]
    },
    "4252": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%3#0",
        "aggregate%item0%0#0"
      ]
    },
    "4254": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "result1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%44#0",
        "aggregate%extract%3#0"
      ]
    },
    "4256": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "aggregate%item2%0#0",
        "tmp%44#0",
        "aggregate%extract%3#0",
        "aggregate%item1%0#0"
      ]
    },
    "4258": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%3#0",
        "tmp%44#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%46#0",
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%extract%3#0"
      ]
    },
    "4260": {
      "op": "cover 3",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%47#0",
        "tmp%46#0",
        "tmp%45#0",
        "tmp%44#0"
      ]
    },
    "4262": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "tmp%45#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.0#0",
        "tmp%47#0",
        "tmp%46#0",
        "tmp%45#0"
      ]
    },
    "4264": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.0#0",
        "tmp%47#0",
        "tmp%46#0"
      ]
    },
    "4266": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "tmp%47#0"
      ]
    },
    "4268": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "4270": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0"
      ]
    },
    "4272": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "4274": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%18#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "4275": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "aggregate%extract_uint16%18#0",
        "result1#0"
      ]
    },
    "4277": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "aggregate%extract_uint16%18#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4278": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "aggregate%extract_uint16%18#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "4279": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%18#0",
        "aggregate%extract_uint16%19#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "aggregate%extract_uint16%18#0",
        "result1#0",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "4280": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "aggregate%extract_uint16%18#0",
        "result1#0",
        "aggregate%extract_uint16%19#0",
        "result1#0 (copy)"
      ]
    },
    "4282": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "aggregate%extract_uint16%19#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "4284": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%18#0",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "4286": {
      "op": "substring3",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "tmp%48#0"
      ]
    },
    "4287": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "tmp%52#0"
      ]
    },
    "4290": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%52#0",
        "result_native.0#0"
      ]
    },
    "4292": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%53#0"
      ]
    },
    "4293": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0"
      ]
    },
    "4294": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4295": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "4296": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "4297": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%extract_uint16%23#0",
        "result1#0"
      ]
    },
    "4299": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%extract_uint16%23#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4300": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%extract_uint16%23#0",
        "result1#0",
        "aggregate%len%7#0"
      ]
    },
    "4301": {
      "op": "cover 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0",
        "result1#0"
      ]
    },
    "4303": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4304": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "aggregate%len%7#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "4306": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0"
      ]
    },
    "4308": {
      "op": "substring3",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%55#0"
      ]
    },
    "4309": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%58#0"
      ]
    },
    "4312": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%58#0",
        "result_native.1#0"
      ]
    },
    "4314": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%59#0"
      ]
    },
    "4315": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0"
      ]
    },
    "4316": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "4317": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "4319": {
      "op": "intc_3 // 8",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "4320": {
      "op": "extract3",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%62#0"
      ]
    },
    "4321": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%64#0"
      ]
    },
    "4322": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%64#0",
        "result_native.2#0"
      ]
    },
    "4324": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.3#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%65#0"
      ]
    },
    "4325": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0"
      ]
    },
    "4326": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12"
      ]
    },
    "4328": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "4330": {
      "op": "extract3",
      "defined_out": [
        "result1#0",
        "result_native.3#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "tmp%70#0"
      ]
    },
    "4331": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%71#0"
      ]
    },
    "4332": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "4333": {
      "retsub": true,
      "op": "retsub"
    },
    "4334": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0"
      ]
    },
    "4338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0"
      ]
    },
    "4339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0"
      ]
    },
    "4340": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4341": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_block@0"
    },
    "4344": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_block@0",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_begin"
    },
    "4345": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\""
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "4346": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length%0#0"
      ]
    },
    "4347": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "4348": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "4351": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%0#0",
        "\"s1\""
      ]
    },
    "4352": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0"
      ]
    },
    "4353": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "0x6231"
      ]
    },
    "4354": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "4355": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "4356": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "4359": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "0x6231"
      ]
    },
    "4360": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "4361": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4363": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "4365": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4367": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "4369": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4371": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4373": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4375": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "4377": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4379": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "4381": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4383": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "4385": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4387": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "4388": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4390": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@1"
    },
    "4393": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@1",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "4394": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "4396": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4397": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4400": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4401": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "4402": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0"
      ]
    },
    "4403": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0",
        "76"
      ]
    },
    "4405": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "4406": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4407": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "4409": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "4410": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "4412": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4413": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "4414": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "4415": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4417": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "4419": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "4421": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "4422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0"
      ]
    },
    "4423": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "4424": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "4425": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "4426": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "4427": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "4428": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "76"
      ]
    },
    "4430": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "4431": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4433": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "4434": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "extract_uint16%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%1#0"
      ]
    },
    "4435": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "awst_tmp%0#0",
        "extract_uint16%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "extract_uint16%1#0",
        "add%1#0 (copy)"
      ]
    },
    "4437": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "eq%1#0"
      ]
    },
    "4438": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "4439": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4441": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "2"
      ]
    },
    "4442": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "4443": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0"
      ]
    },
    "4445": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4447": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "4448": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "4450": {
      "op": "dig 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4452": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "4454": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "4456": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%4#0"
      ]
    },
    "4457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%4#0",
        "0"
      ]
    },
    "4458": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "length%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "4459": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "4460": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "mul%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "4461": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "4462": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "4463": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0"
      ]
    },
    "4464": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0",
        "tmp%2#0 (copy)"
      ]
    },
    "4466": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%3#0",
        "len%0#0"
      ]
    },
    "4467": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%2#0"
      ]
    },
    "4468": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4469": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4471": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ]
    },
    "4474": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "4475": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "tmp%6#0"
      ]
    },
    "4476": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4477": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "0"
      ]
    },
    "4479": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "4480": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4482": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4483": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "2"
      ]
    },
    "4484": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "4485": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4487": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "4489": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "4491": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "4492": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "4495": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4497": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4498": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "2"
      ]
    },
    "4499": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "4500": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4502": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4503": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%len%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%len%1#0"
      ]
    },
    "4504": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4506": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4507": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%len%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "4509": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "4511": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%substring3%3#0"
      ]
    },
    "4512": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "4515": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4517": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ]
    },
    "4518": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "4"
      ]
    },
    "4520": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0 (copy)",
        "4",
        "8"
      ]
    },
    "4521": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "4522": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "4523": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ]
    },
    "4525": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "12"
      ]
    },
    "4527": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0",
        "12",
        "64"
      ]
    },
    "4529": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "4530": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ]
    },
    "4532": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "tmp%7#0",
        "aggregate%extract%1#0"
      ]
    },
    "4534": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item2%0#0",
        "tmp%7#0",
        "aggregate%extract%1#0",
        "aggregate%item1%0#0"
      ]
    },
    "4536": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%extract%1#0"
      ]
    },
    "4538": {
      "op": "cover 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0"
      ]
    },
    "4540": {
      "op": "dup",
      "defined_out": [
        "result.0#0 (copy)",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "result.0#0 (copy)",
        "result.0#0 (copy)"
      ]
    },
    "4541": {
      "op": "cover 4",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.0#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0",
        "result.0#0 (copy)"
      ]
    },
    "4543": {
      "op": "frame_bury 0",
      "defined_out": [
        "result.0#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.0#0",
        "tmp%10#0",
        "tmp%9#0",
        "tmp%8#0"
      ]
    },
    "4545": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0 (copy)",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.0#0",
        "tmp%10#0",
        "tmp%9#0",
        "result.1#0 (copy)",
        "result.1#0 (copy)"
      ]
    },
    "4546": {
      "op": "cover 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%10#0",
        "tmp%9#0",
        "result.1#0 (copy)"
      ]
    },
    "4548": {
      "op": "frame_bury 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "4550": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%10#0",
        "result.2#0 (copy)",
        "result.2#0 (copy)"
      ]
    },
    "4551": {
      "op": "cover 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%10#0",
        "result.2#0 (copy)"
      ]
    },
    "4553": {
      "op": "frame_bury 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%10#0"
      ]
    },
    "4555": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0 (copy)",
        "result.3#0 (copy)"
      ]
    },
    "4556": {
      "op": "cover 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0 (copy)"
      ]
    },
    "4558": {
      "op": "frame_bury 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "4560": {
      "op": "cover 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "s#0",
        "result.3#0",
        "result.2#0",
        "result.1#0"
      ]
    },
    "4562": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "b#0",
        "s#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4564": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "u#0",
        "b#0",
        "s#0",
        "result.3#0"
      ]
    },
    "4566": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "4568": {
      "op": "bytec 17 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0",
        "\"echo: s1\""
      ]
    },
    "4570": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%11#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%11#0"
      ]
    },
    "4571": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "4572": {
      "op": "bytec 55 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "0x6563686f3a206231"
      ]
    },
    "4574": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%12#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "tmp%12#0"
      ]
    },
    "4575": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0"
      ]
    },
    "4576": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "2"
      ]
    },
    "4577": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "tmp%13#0"
      ]
    },
    "4578": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0"
      ]
    },
    "4579": {
      "op": "bytec 32 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "0x03"
      ]
    },
    "4581": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%14#0"
      ]
    },
    "4582": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4583": {
      "op": "itxn_begin"
    },
    "4584": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "4585": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length%2#0"
      ]
    },
    "4586": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "4587": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "4590": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%2#0",
        "\"s1\""
      ]
    },
    "4591": {
      "op": "concat",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0"
      ]
    },
    "4592": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "0x6231"
      ]
    },
    "4593": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "aggregate%length%3#0"
      ]
    },
    "4594": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "4595": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "4598": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "aggregate%length_uint16%3#0",
        "0x6231"
      ]
    },
    "4599": {
      "op": "concat",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "4600": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "1"
      ]
    },
    "4601": {
      "op": "itob",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4602": {
      "op": "bytec 11 // 0x02",
      "defined_out": [
        "0x02",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "0x02"
      ]
    },
    "4604": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "aggregate%value_len%0#0"
      ]
    },
    "4605": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "4607": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "4608": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4609": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "64"
      ]
    },
    "4611": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "aggregate%bzero%0#0"
      ]
    },
    "4612": {
      "op": "bytec 11 // 0x02",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "aggregate%bzero%0#0",
        "0x02"
      ]
    },
    "4614": {
      "op": "b|",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "4615": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%15#0"
      ]
    },
    "4617": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%16#0",
        "tmp%17#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%18#0"
      ]
    },
    "4619": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%18#0",
        "tmp%16#0"
      ]
    },
    "4621": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%18#0"
      ]
    },
    "4623": {
      "op": "cover 3",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4625": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4627": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4629": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "4631": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4633": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4635": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "4637": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "4639": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4641": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "4643": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "4646": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4648": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@2"
    },
    "4651": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@2",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "4652": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0"
      ]
    },
    "4654": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4655": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "4658": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4659": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "4660": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%1#0",
        "extract_uint16%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "extract_uint16%2#0"
      ]
    },
    "4661": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%1#0",
        "extract_uint16%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "extract_uint16%2#0",
        "76"
      ]
    },
    "4663": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "eq%3#0"
      ]
    },
    "4664": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ]
    },
    "4665": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4666": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "0"
      ]
    },
    "4667": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "4668": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%19#0"
      ]
    },
    "4670": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4671": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%6#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "4672": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%19#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "4673": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "aggregate%extract_uint16%6#0",
        "tmp%19#0",
        "aggregate%extract_uint16%7#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4675": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%7#0",
        "tmp%19#0 (copy)",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "4677": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%19#0 (copy)",
        "aggregate%extract_uint16%6#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "4679": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "4680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%20#0",
        "0"
      ]
    },
    "4681": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "length%2#0"
      ]
    },
    "4682": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "length%2#0",
        "1"
      ]
    },
    "4683": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "mul%2#0"
      ]
    },
    "4684": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "mul%2#0",
        "2"
      ]
    },
    "4685": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%4#0"
      ]
    },
    "4686": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%4#0",
        "76"
      ]
    },
    "4688": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0"
      ]
    },
    "4689": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4691": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "4692": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "extract_uint16%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "extract_uint16%3#0"
      ]
    },
    "4693": {
      "op": "dig 1",
      "defined_out": [
        "add%5#0",
        "add%5#0 (copy)",
        "awst_tmp%1#0",
        "extract_uint16%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "extract_uint16%3#0",
        "add%5#0 (copy)"
      ]
    },
    "4695": {
      "op": "==",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "eq%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "eq%4#0"
      ]
    },
    "4696": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0"
      ]
    },
    "4697": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4699": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%19#0 (copy)",
        "2"
      ]
    },
    "4700": {
      "op": "extract_uint16",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%8#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "4701": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0"
      ]
    },
    "4703": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4705": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%8#0",
        "add%5#0",
        "aggregate%len%2#0"
      ]
    },
    "4706": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "add%5#0"
      ]
    },
    "4708": {
      "op": "dig 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0",
        "add%5#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4710": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "aggregate%len%2#0",
        "add%5#0",
        "tmp%19#0 (copy)",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "4712": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%19#0 (copy)",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%2#0"
      ]
    },
    "4714": {
      "op": "substring3",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%21#0"
      ]
    },
    "4715": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "tmp%21#0",
        "0"
      ]
    },
    "4716": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "length%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "length%3#0"
      ]
    },
    "4717": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "length%3#0",
        "1"
      ]
    },
    "4718": {
      "op": "*",
      "defined_out": [
        "add%5#0",
        "awst_tmp%1#0",
        "mul%3#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "mul%3#0"
      ]
    },
    "4719": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "mul%3#0",
        "2"
      ]
    },
    "4720": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "add%6#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%5#0",
        "add%6#0"
      ]
    },
    "4721": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "awst_tmp%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%7#0"
      ]
    },
    "4722": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%7#0",
        "tmp%19#0 (copy)"
      ]
    },
    "4724": {
      "op": "len",
      "defined_out": [
        "add%7#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "add%7#0",
        "len%1#0"
      ]
    },
    "4725": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%5#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%19#0",
        "eq%5#0"
      ]
    },
    "4726": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4727": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "4729": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%22#0"
      ]
    },
    "4732": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%22#0",
        "0x151f7c75"
      ]
    },
    "4733": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "tmp%23#0"
      ]
    },
    "4734": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4735": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4736": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "0"
      ]
    },
    "4737": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "4738": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4740": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4741": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "2"
      ]
    },
    "4742": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "4743": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%9#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4745": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract_uint16%10#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "4747": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "4749": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%6#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%substring3%6#0"
      ]
    },
    "4750": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "4753": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4755": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4756": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "2"
      ]
    },
    "4757": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "4758": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4760": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4761": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%1#0",
        "aggregate%len%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%11#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%len%3#0"
      ]
    },
    "4762": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4764": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4765": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%len%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "4767": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0"
      ]
    },
    "4769": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%substring3%7#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%substring3%7#0"
      ]
    },
    "4770": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%item1%1#0"
      ]
    },
    "4773": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4775": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ]
    },
    "4776": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "4"
      ]
    },
    "4778": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0 (copy)",
        "4",
        "8"
      ]
    },
    "4779": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%extract%2#0"
      ]
    },
    "4780": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "aggregate%item2%1#0"
      ]
    },
    "4781": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ]
    },
    "4783": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "12"
      ]
    },
    "4785": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%1#0",
        "12",
        "64"
      ]
    },
    "4787": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%extract%3#0"
      ]
    },
    "4788": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "aggregate%extract%3#0",
        "aggregate%item0%1#0"
      ]
    },
    "4790": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%1#0",
        "aggregate%item2%1#0",
        "tmp%24#0",
        "aggregate%extract%3#0"
      ]
    },
    "4792": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item2%1#0",
        "tmp%24#0",
        "aggregate%extract%3#0",
        "aggregate%item1%1#0"
      ]
    },
    "4794": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%26#0",
        "tmp%25#0",
        "tmp%24#0",
        "aggregate%extract%3#0"
      ]
    },
    "4796": {
      "op": "cover 3",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%26#0",
        "tmp%25#0",
        "tmp%24#0"
      ]
    },
    "4798": {
      "op": "cover 3",
      "defined_out": [
        "result_2.0#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.0#0",
        "tmp%27#0",
        "tmp%26#0",
        "tmp%25#0"
      ]
    },
    "4800": {
      "op": "cover 3",
      "defined_out": [
        "result_2.0#0",
        "result_2.1#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "tmp%27#0",
        "tmp%26#0"
      ]
    },
    "4802": {
      "op": "cover 3",
      "defined_out": [
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "tmp%27#0"
      ]
    },
    "4804": {
      "op": "cover 3",
      "defined_out": [
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0"
      ]
    },
    "4806": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "result.0#0"
      ]
    },
    "4808": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "tmp%28#0"
      ]
    },
    "4809": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%28#0",
        "result_2.1#0"
      ]
    },
    "4811": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%28#0",
        "result_2.1#0",
        "result.1#0"
      ]
    },
    "4813": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "4814": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%30#0"
      ]
    },
    "4815": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%30#0",
        "result_2.2#0"
      ]
    },
    "4817": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%30#0",
        "result_2.2#0",
        "result.2#0"
      ]
    },
    "4819": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "4820": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%32#0"
      ]
    },
    "4821": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%32#0",
        "result_2.3#0"
      ]
    },
    "4823": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%32#0",
        "result_2.3#0",
        "result.3#0"
      ]
    },
    "4825": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "4826": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%34#0"
      ]
    },
    "4827": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4828": {
      "op": "itxn_begin"
    },
    "4829": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "4830": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length%4#0"
      ]
    },
    "4831": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "4832": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "4835": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%4#0",
        "\"s1\""
      ]
    },
    "4836": {
      "op": "concat",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0"
      ]
    },
    "4837": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "0x6231"
      ]
    },
    "4838": {
      "op": "len",
      "defined_out": [
        "aggregate%length%5#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "aggregate%length%5#0"
      ]
    },
    "4839": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%5#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "4840": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%5#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "4843": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%35#0",
        "aggregate%length_uint16%5#0",
        "0x6231"
      ]
    },
    "4844": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "tmp%36#0"
      ]
    },
    "4845": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4847": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "4849": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4851": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "4853": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4855": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4857": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4859": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "4861": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4863": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "4865": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4867": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "4869": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "4872": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "4874": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@3"
    },
    "4877": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@3",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "4878": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0"
      ]
    },
    "4880": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4881": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ]
    },
    "4884": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4885": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "0"
      ]
    },
    "4886": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%2#0",
        "extract_uint16%4#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "extract_uint16%4#0"
      ]
    },
    "4887": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%2#0",
        "extract_uint16%4#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "extract_uint16%4#0",
        "76"
      ]
    },
    "4889": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%6#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "eq%6#0"
      ]
    },
    "4890": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ]
    },
    "4891": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4892": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "0"
      ]
    },
    "4893": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "4894": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%12#0",
        "tmp%37#0"
      ]
    },
    "4896": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%12#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4897": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%12#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%12#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "2"
      ]
    },
    "4898": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "aggregate%extract_uint16%13#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%12#0",
        "tmp%37#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "4899": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "aggregate%extract_uint16%12#0",
        "tmp%37#0",
        "aggregate%extract_uint16%13#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4901": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%13#0",
        "tmp%37#0 (copy)",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "4903": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%37#0 (copy)",
        "aggregate%extract_uint16%12#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "4905": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "4906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%38#0",
        "0"
      ]
    },
    "4907": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%4#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "length%4#0"
      ]
    },
    "4908": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%4#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "length%4#0",
        "1"
      ]
    },
    "4909": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%4#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "mul%4#0"
      ]
    },
    "4910": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "mul%4#0",
        "2"
      ]
    },
    "4911": {
      "op": "+",
      "defined_out": [
        "add%8#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%8#0"
      ]
    },
    "4912": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%8#0",
        "76"
      ]
    },
    "4914": {
      "op": "+",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0"
      ]
    },
    "4915": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4917": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%37#0 (copy)",
        "2"
      ]
    },
    "4918": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "extract_uint16%5#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "extract_uint16%5#0"
      ]
    },
    "4919": {
      "op": "dig 1",
      "defined_out": [
        "add%9#0",
        "add%9#0 (copy)",
        "awst_tmp%2#0",
        "extract_uint16%5#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "extract_uint16%5#0",
        "add%9#0 (copy)"
      ]
    },
    "4921": {
      "op": "==",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "eq%7#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "eq%7#0"
      ]
    },
    "4922": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0"
      ]
    },
    "4923": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4925": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%37#0 (copy)",
        "2"
      ]
    },
    "4926": {
      "op": "extract_uint16",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%14#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "4927": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%14#0",
        "add%9#0"
      ]
    },
    "4929": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%14#0",
        "add%9#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4931": {
      "op": "len",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%14#0",
        "add%9#0",
        "aggregate%len%4#0"
      ]
    },
    "4932": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "add%9#0"
      ]
    },
    "4934": {
      "op": "dig 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0",
        "add%9#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4936": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "aggregate%len%4#0",
        "add%9#0",
        "tmp%37#0 (copy)",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "4938": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%37#0 (copy)",
        "aggregate%extract_uint16%14#0",
        "aggregate%len%4#0"
      ]
    },
    "4940": {
      "op": "substring3",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%39#0"
      ]
    },
    "4941": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "tmp%39#0",
        "0"
      ]
    },
    "4942": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "length%5#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "length%5#0"
      ]
    },
    "4943": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "length%5#0",
        "1"
      ]
    },
    "4944": {
      "op": "*",
      "defined_out": [
        "add%9#0",
        "awst_tmp%2#0",
        "mul%5#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "mul%5#0"
      ]
    },
    "4945": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "mul%5#0",
        "2"
      ]
    },
    "4946": {
      "op": "+",
      "defined_out": [
        "add%10#0",
        "add%9#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%9#0",
        "add%10#0"
      ]
    },
    "4947": {
      "op": "+",
      "defined_out": [
        "add%11#0",
        "awst_tmp%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%11#0"
      ]
    },
    "4948": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%11#0",
        "tmp%37#0 (copy)"
      ]
    },
    "4950": {
      "op": "len",
      "defined_out": [
        "add%11#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "add%11#0",
        "len%2#0"
      ]
    },
    "4951": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%8#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%37#0",
        "eq%8#0"
      ]
    },
    "4952": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4953": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "awst_tmp%2#0"
      ]
    },
    "4955": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%40#0"
      ]
    },
    "4958": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%40#0",
        "0x151f7c75"
      ]
    },
    "4959": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "tmp%41#0"
      ]
    },
    "4960": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4961": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4962": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "0"
      ]
    },
    "4963": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "4964": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4966": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4967": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "2"
      ]
    },
    "4968": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "4969": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4971": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract_uint16%16#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "4973": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "aggregate%extract_uint16%15#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "4975": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%10#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%substring3%10#0"
      ]
    },
    "4976": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%item0%2#0"
      ]
    },
    "4979": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4981": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4982": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "2"
      ]
    },
    "4983": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%17#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "4984": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4986": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4987": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%17#0",
        "aggregate%item0%2#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%17#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%len%5#0"
      ]
    },
    "4988": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "4990": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "4991": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%len%5#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "4993": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "aggregate%extract_uint16%17#0",
        "aggregate%len%5#0"
      ]
    },
    "4995": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%11#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%substring3%11#0"
      ]
    },
    "4996": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%item1%2#0"
      ]
    },
    "4999": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "5001": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ]
    },
    "5002": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "4"
      ]
    },
    "5004": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0 (copy)",
        "4",
        "8"
      ]
    },
    "5005": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%extract%4#0"
      ]
    },
    "5006": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "aggregate%item2%2#0"
      ]
    },
    "5007": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ]
    },
    "5009": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "12"
      ]
    },
    "5011": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%2#0",
        "12",
        "64"
      ]
    },
    "5013": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "aggregate%extract%5#0"
      ]
    },
    "5014": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "aggregate%extract%5#0",
        "aggregate%item0%2#0"
      ]
    },
    "5016": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%2#0",
        "aggregate%item2%2#0",
        "tmp%42#0",
        "aggregate%extract%5#0"
      ]
    },
    "5018": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item2%2#0",
        "tmp%42#0",
        "aggregate%extract%5#0",
        "aggregate%item1%2#0"
      ]
    },
    "5020": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%5#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%44#0",
        "tmp%43#0",
        "tmp%42#0",
        "aggregate%extract%5#0"
      ]
    },
    "5022": {
      "op": "cover 3",
      "defined_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%45#0",
        "tmp%44#0",
        "tmp%43#0",
        "tmp%42#0"
      ]
    },
    "5024": {
      "op": "cover 3",
      "defined_out": [
        "result_3.0#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.0#0",
        "tmp%45#0",
        "tmp%44#0",
        "tmp%43#0"
      ]
    },
    "5026": {
      "op": "cover 3",
      "defined_out": [
        "result_3.0#0",
        "result_3.1#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "tmp%45#0",
        "tmp%44#0"
      ]
    },
    "5028": {
      "op": "cover 3",
      "defined_out": [
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "tmp%45#0"
      ]
    },
    "5030": {
      "op": "cover 3",
      "defined_out": [
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0"
      ]
    },
    "5032": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "result.0#0"
      ]
    },
    "5034": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "tmp%46#0"
      ]
    },
    "5035": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%46#0",
        "result_3.1#0"
      ]
    },
    "5037": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%46#0",
        "result_3.1#0",
        "result.1#0"
      ]
    },
    "5039": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "5040": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%48#0"
      ]
    },
    "5041": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%48#0",
        "result_3.2#0"
      ]
    },
    "5043": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%48#0",
        "result_3.2#0",
        "result.2#0"
      ]
    },
    "5045": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "5046": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%50#0"
      ]
    },
    "5047": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%50#0",
        "result_3.3#0"
      ]
    },
    "5049": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%50#0",
        "result_3.3#0",
        "result.3#0"
      ]
    },
    "5051": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "5052": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%52#0"
      ]
    },
    "5053": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5054": {
      "op": "itxn_begin"
    },
    "5055": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "5056": {
      "op": "len",
      "defined_out": [
        "aggregate%length%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length%6#0"
      ]
    },
    "5057": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "5058": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%6#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "5061": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%length_uint16%6#0",
        "\"s1\""
      ]
    },
    "5062": {
      "op": "concat",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0"
      ]
    },
    "5063": {
      "op": "bytec_3 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0",
        "0x6231"
      ]
    },
    "5064": {
      "op": "len",
      "defined_out": [
        "aggregate%length%7#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0",
        "aggregate%length%7#0"
      ]
    },
    "5065": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%7#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "5066": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%7#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "5069": {
      "op": "bytec_3 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%53#0",
        "aggregate%length_uint16%7#0",
        "0x6231"
      ]
    },
    "5070": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%54#0"
      ]
    },
    "5071": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5073": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "5075": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5077": {
      "op": "bytec 7 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "5079": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5081": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "5083": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5085": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "5087": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5089": {
      "op": "bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "5091": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5093": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "5095": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5097": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "5098": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5100": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@4"
    },
    "5103": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref_next_txn@4",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "5104": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0"
      ]
    },
    "5106": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "5107": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ]
    },
    "5110": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5111": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)",
        "0"
      ]
    },
    "5112": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%3#0",
        "extract_uint16%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "extract_uint16%6#0"
      ]
    },
    "5113": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "awst_tmp%3#0",
        "extract_uint16%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "extract_uint16%6#0",
        "76"
      ]
    },
    "5115": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%9#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "eq%9#0"
      ]
    },
    "5116": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ]
    },
    "5117": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5118": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)",
        "0"
      ]
    },
    "5119": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%18#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "5120": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%18#0",
        "tmp%55#0"
      ]
    },
    "5122": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%18#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5123": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%18#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%18#0",
        "tmp%55#0",
        "tmp%55#0 (copy)",
        "2"
      ]
    },
    "5124": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%18#0",
        "aggregate%extract_uint16%19#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%18#0",
        "tmp%55#0",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "5125": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "aggregate%extract_uint16%18#0",
        "tmp%55#0",
        "aggregate%extract_uint16%19#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5127": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%19#0",
        "tmp%55#0 (copy)",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "5129": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%55#0 (copy)",
        "aggregate%extract_uint16%18#0",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "5131": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%56#0"
      ]
    },
    "5132": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%56#0",
        "0"
      ]
    },
    "5133": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%3#0",
        "length%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "length%6#0"
      ]
    },
    "5134": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%3#0",
        "length%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "length%6#0",
        "1"
      ]
    },
    "5135": {
      "op": "*",
      "defined_out": [
        "awst_tmp%3#0",
        "mul%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "mul%6#0"
      ]
    },
    "5136": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "mul%6#0",
        "2"
      ]
    },
    "5137": {
      "op": "+",
      "defined_out": [
        "add%12#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%12#0"
      ]
    },
    "5138": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%12#0",
        "76"
      ]
    },
    "5140": {
      "op": "+",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0"
      ]
    },
    "5141": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5143": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%55#0 (copy)",
        "2"
      ]
    },
    "5144": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "extract_uint16%7#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "extract_uint16%7#0"
      ]
    },
    "5145": {
      "op": "dig 1",
      "defined_out": [
        "add%13#0",
        "add%13#0 (copy)",
        "awst_tmp%3#0",
        "extract_uint16%7#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "extract_uint16%7#0",
        "add%13#0 (copy)"
      ]
    },
    "5147": {
      "op": "==",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "eq%10#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "eq%10#0"
      ]
    },
    "5148": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+uint8[]),uint64,uint512)",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0"
      ]
    },
    "5149": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5151": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%55#0 (copy)",
        "2"
      ]
    },
    "5152": {
      "op": "extract_uint16",
      "defined_out": [
        "add%13#0",
        "aggregate%extract_uint16%20#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "5153": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%20#0",
        "add%13#0"
      ]
    },
    "5155": {
      "op": "dig 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%20#0",
        "add%13#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5157": {
      "op": "len",
      "defined_out": [
        "add%13#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%6#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%20#0",
        "add%13#0",
        "aggregate%len%6#0"
      ]
    },
    "5158": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%6#0",
        "add%13#0"
      ]
    },
    "5160": {
      "op": "dig 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%6#0",
        "add%13#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5162": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "aggregate%len%6#0",
        "add%13#0",
        "tmp%55#0 (copy)",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "5164": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%55#0 (copy)",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%6#0"
      ]
    },
    "5166": {
      "op": "substring3",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%57#0"
      ]
    },
    "5167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "tmp%57#0",
        "0"
      ]
    },
    "5168": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "length%7#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "length%7#0"
      ]
    },
    "5169": {
      "op": "intc_2 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "length%7#0",
        "1"
      ]
    },
    "5170": {
      "op": "*",
      "defined_out": [
        "add%13#0",
        "awst_tmp%3#0",
        "mul%7#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "mul%7#0"
      ]
    },
    "5171": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "mul%7#0",
        "2"
      ]
    },
    "5172": {
      "op": "+",
      "defined_out": [
        "add%13#0",
        "add%14#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%13#0",
        "add%14#0"
      ]
    },
    "5173": {
      "op": "+",
      "defined_out": [
        "add%15#0",
        "awst_tmp%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%15#0"
      ]
    },
    "5174": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%15#0",
        "tmp%55#0 (copy)"
      ]
    },
    "5176": {
      "op": "len",
      "defined_out": [
        "add%15#0",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "add%15#0",
        "len%3#0"
      ]
    },
    "5177": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%11#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%55#0",
        "eq%11#0"
      ]
    },
    "5178": {
      "error": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>,arc4.uint64,arc4.uint512>",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5179": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "awst_tmp%3#0"
      ]
    },
    "5181": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%58#0"
      ]
    },
    "5184": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%58#0",
        "0x151f7c75"
      ]
    },
    "5185": {
      "op": "==",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "tmp%59#0"
      ]
    },
    "5186": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5187": {
      "op": "dup",
      "defined_out": [
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5188": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "0"
      ]
    },
    "5189": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%21#0"
      ]
    },
    "5190": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5192": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5193": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "2"
      ]
    },
    "5194": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%21#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%22#0"
      ]
    },
    "5195": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%extract_uint16%21#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5197": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%21#0"
      ]
    },
    "5199": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%21#0",
        "aggregate%extract_uint16%22#0"
      ]
    },
    "5201": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%14#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%substring3%14#0"
      ]
    },
    "5202": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item0%3#0"
      ]
    },
    "5205": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5207": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5208": {
      "op": "intc_1 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "2"
      ]
    },
    "5209": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "5210": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%23#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5212": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%23#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5213": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "aggregate%item0%3#0",
        "aggregate%len%7#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%23#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%len%7#0"
      ]
    },
    "5214": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5216": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5217": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%len%7#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "5219": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "aggregate%extract_uint16%23#0",
        "aggregate%len%7#0"
      ]
    },
    "5221": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%substring3%15#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%substring3%15#0"
      ]
    },
    "5222": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item1%3#0"
      ]
    },
    "5225": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5227": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ]
    },
    "5228": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "4"
      ]
    },
    "5230": {
      "op": "intc_3 // 8",
      "defined_out": [
        "4",
        "8",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0 (copy)",
        "4",
        "8"
      ]
    },
    "5231": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%6#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%extract%6#0"
      ]
    },
    "5232": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "aggregate%item2%3#0"
      ]
    },
    "5233": {
      "op": "cover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ]
    },
    "5235": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "12"
      ]
    },
    "5237": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%3#0",
        "12",
        "64"
      ]
    },
    "5239": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "aggregate%extract%7#0"
      ]
    },
    "5240": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "aggregate%extract%7#0",
        "aggregate%item0%3#0"
      ]
    },
    "5242": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item1%3#0",
        "aggregate%item2%3#0",
        "tmp%60#0",
        "aggregate%extract%7#0"
      ]
    },
    "5244": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "aggregate%item2%3#0",
        "tmp%60#0",
        "aggregate%extract%7#0",
        "aggregate%item1%3#0"
      ]
    },
    "5246": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%7#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%62#0",
        "tmp%61#0",
        "tmp%60#0",
        "aggregate%extract%7#0"
      ]
    },
    "5248": {
      "op": "cover 3",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%63#0",
        "tmp%62#0",
        "tmp%61#0",
        "tmp%60#0"
      ]
    },
    "5250": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.0#0",
        "tmp%63#0",
        "tmp%62#0",
        "tmp%61#0"
      ]
    },
    "5252": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "tmp%63#0",
        "tmp%62#0"
      ]
    },
    "5254": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "tmp%63#0"
      ]
    },
    "5256": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "5258": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "5260": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "tmp%64#0"
      ]
    },
    "5261": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%64#0",
        "result_native.1#0"
      ]
    },
    "5263": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%64#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "5265": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%64#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%64#0",
        "tmp%65#0"
      ]
    },
    "5266": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%66#0"
      ]
    },
    "5267": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%66#0",
        "result_native.2#0"
      ]
    },
    "5269": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%66#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "5271": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "5272": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%68#0"
      ]
    },
    "5273": {
      "op": "uncover 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%68#0",
        "result_native.3#0"
      ]
    },
    "5275": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%68#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "5277": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%68#0",
        "tmp%69#0"
      ]
    },
    "5278": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%70#0"
      ]
    },
    "5279": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "5280": {
      "retsub": true,
      "op": "retsub"
    },
    "5281": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "5284": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_block@0"
    },
    "5287": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "5288": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\""
      ],
      "stack_out": [
        "\"s1\""
      ]
    },
    "5289": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "5290": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "5291": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "5294": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"s1\""
      ]
    },
    "5295": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "5296": {
      "op": "bytec 18 // \"s2\"",
      "defined_out": [
        "\"s2\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"s2\""
      ]
    },
    "5298": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "5299": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "5300": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "5303": {
      "op": "bytec 18 // \"s2\"",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "\"s2\""
      ]
    },
    "5305": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "5306": {
      "op": "cover 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "5308": {
      "op": "bytec 19 // 0x33",
      "defined_out": [
        "0x33",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "0x33"
      ]
    },
    "5310": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%length%2#0"
      ]
    },
    "5311": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "5312": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "5315": {
      "op": "bytec 19 // 0x33",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%length_uint16%2#0",
        "0x33"
      ]
    },
    "5317": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "5318": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "5320": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "4"
      ]
    },
    "5322": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "5323": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "5326": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "5327": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "5329": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "5330": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "5332": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "5333": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "5335": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "5336": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%head%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "5337": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "5340": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0",
        "aggregate%head%1#0"
      ]
    },
    "5341": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%1#0",
        "tmp%0#0"
      ]
    },
    "5343": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "5344": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "aggregate%concat%0#0",
        "tmp%1#0"
      ]
    },
    "5346": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "5347": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "4"
      ]
    },
    "5349": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "5350": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "5353": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "5354": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "5356": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%2#0"
      ]
    },
    "5357": {
      "op": "cover 1",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "5359": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "5360": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0"
      ]
    },
    "5361": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "5363": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "5364": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "0x"
      ]
    },
    "5365": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "5367": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%3#0"
      ]
    },
    "5368": {
      "op": "bytec 15 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%3#0",
        "0x0000000000000002"
      ]
    },
    "5370": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0"
      ]
    },
    "5371": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "18"
      ]
    },
    "5373": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%6#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "5374": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "5377": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%5#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%5#0"
      ]
    },
    "5378": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%5#0",
        "tmp%2#0"
      ]
    },
    "5380": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "5381": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "5383": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%7#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "5384": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "5387": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "aggregate%head%2#0"
      ]
    },
    "5389": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "5391": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0"
      ]
    },
    "5392": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "5394": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%3#0"
      ]
    },
    "5395": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%3#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "5397": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5398": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5400": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5402": {
      "op": "bytec 33 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "5404": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5406": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5408": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5410": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5412": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "5413": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5415": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@1"
    },
    "5418": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "5419": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "5421": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5422": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "5425": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5426": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "5427": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "extract_uint16%0#0"
      ]
    },
    "5428": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "extract_uint16%0#0",
        "4"
      ]
    },
    "5430": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "eq%0#0"
      ]
    },
    "5431": {
      "error": "invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "5432": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5433": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "5434": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "5435": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0"
      ]
    },
    "5437": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5438": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "5439": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "5440": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5442": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%1#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "5444": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "5446": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5447": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5448": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0"
      ]
    },
    "5449": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%0#0",
        "extract_uint16%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "extract_uint16%1#0"
      ]
    },
    "5450": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "extract_uint16%1#0",
        "4"
      ]
    },
    "5452": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "eq%1#0"
      ]
    },
    "5453": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5454": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "0"
      ]
    },
    "5456": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "5457": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%2#0",
        "tmp%5#0"
      ]
    },
    "5459": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%2#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5460": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%2#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "2"
      ]
    },
    "5461": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%2#0",
        "tmp%5#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "5462": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%2#0",
        "tmp%5#0",
        "aggregate%extract_uint16%3#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5464": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%3#0",
        "tmp%5#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "5466": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "5468": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "5469": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "0"
      ]
    },
    "5470": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "length%0#0"
      ]
    },
    "5471": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "length%0#0",
        "1"
      ]
    },
    "5472": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "mul%0#0"
      ]
    },
    "5473": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "mul%0#0",
        "2"
      ]
    },
    "5474": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%0#0"
      ]
    },
    "5475": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%0#0",
        "4"
      ]
    },
    "5477": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0"
      ]
    },
    "5478": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5480": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "tmp%5#0 (copy)",
        "2"
      ]
    },
    "5481": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "extract_uint16%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "extract_uint16%2#0"
      ]
    },
    "5482": {
      "op": "dig 1",
      "defined_out": [
        "add%1#0",
        "add%1#0 (copy)",
        "awst_tmp%0#0",
        "extract_uint16%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "extract_uint16%2#0",
        "add%1#0 (copy)"
      ]
    },
    "5484": {
      "op": "==",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "eq%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "eq%2#0"
      ]
    },
    "5485": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0"
      ]
    },
    "5486": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5488": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "tmp%5#0 (copy)",
        "2"
      ]
    },
    "5489": {
      "op": "extract_uint16",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%4#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "add%1#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "5490": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0",
        "add%1#0"
      ]
    },
    "5492": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0",
        "add%1#0",
        "tmp%5#0 (copy)"
      ]
    },
    "5494": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0",
        "add%1#0",
        "aggregate%len%0#0"
      ]
    },
    "5495": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "add%1#0"
      ]
    },
    "5497": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%5#0"
      ]
    },
    "5499": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%len%0#0",
        "add%1#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "5501": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "tmp%5#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0"
      ]
    },
    "5503": {
      "op": "substring3",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "tmp%7#0"
      ]
    },
    "5504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "tmp%7#0",
        "0"
      ]
    },
    "5505": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "length%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "length%1#0"
      ]
    },
    "5506": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "length%1#0",
        "1"
      ]
    },
    "5507": {
      "op": "*",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "mul%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "mul%1#0"
      ]
    },
    "5508": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "mul%1#0",
        "2"
      ]
    },
    "5509": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "add%2#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%1#0",
        "add%2#0"
      ]
    },
    "5510": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%3#0"
      ]
    },
    "5511": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%3#0",
        "4"
      ]
    },
    "5513": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0"
      ]
    },
    "5514": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5516": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "5517": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "extract_uint16%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "extract_uint16%3#0"
      ]
    },
    "5518": {
      "op": "dig 1",
      "defined_out": [
        "add%4#0",
        "add%4#0 (copy)",
        "awst_tmp%0#0",
        "extract_uint16%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "extract_uint16%3#0",
        "add%4#0 (copy)"
      ]
    },
    "5520": {
      "op": "==",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "eq%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "eq%3#0"
      ]
    },
    "5521": {
      "error": "invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0"
      ]
    },
    "5522": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5524": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%4#0 (copy)",
        "2"
      ]
    },
    "5525": {
      "op": "extract_uint16",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%5#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "5526": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%5#0",
        "add%4#0"
      ]
    },
    "5528": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%5#0",
        "add%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5530": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%5#0",
        "add%4#0",
        "aggregate%len%1#0"
      ]
    },
    "5531": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "add%4#0"
      ]
    },
    "5533": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "add%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5535": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "aggregate%len%1#0",
        "add%4#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "5537": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%4#0 (copy)",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "5539": {
      "op": "substring3",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0"
      ]
    },
    "5540": {
      "op": "dup",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5541": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "add%4#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "16"
      ]
    },
    "5543": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "extract_uint16%4#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "extract_uint16%4#0"
      ]
    },
    "5544": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "add%4#0",
        "awst_tmp%0#0",
        "extract_uint16%4#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "extract_uint16%4#0",
        "18"
      ]
    },
    "5546": {
      "op": "==",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "eq%4#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "5547": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0"
      ]
    },
    "5548": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5549": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "16"
      ]
    },
    "5551": {
      "op": "extract_uint16",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "5552": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "tmp%8#0"
      ]
    },
    "5554": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "5555": {
      "op": "len",
      "defined_out": [
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "tmp%8#0",
        "aggregate%len%2#0"
      ]
    },
    "5556": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "tmp%8#0"
      ]
    },
    "5558": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "aggregate%len%2#0",
        "tmp%8#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "5560": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%8#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "5562": {
      "op": "substring3",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%9#0"
      ]
    },
    "5563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "tmp%9#0",
        "0"
      ]
    },
    "5564": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "length%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "length%2#0"
      ]
    },
    "5565": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "length%2#0",
        "1"
      ]
    },
    "5566": {
      "op": "*",
      "defined_out": [
        "add%4#0",
        "awst_tmp%0#0",
        "mul%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "mul%2#0"
      ]
    },
    "5567": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "mul%2#0",
        "2"
      ]
    },
    "5568": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "add%5#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "add%5#0"
      ]
    },
    "5569": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "add%5#0",
        "18"
      ]
    },
    "5571": {
      "op": "+",
      "defined_out": [
        "add%4#0",
        "add%6#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%4#0",
        "add%6#0"
      ]
    },
    "5572": {
      "op": "+",
      "defined_out": [
        "add%7#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%7#0"
      ]
    },
    "5573": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%7#0",
        "tmp%4#0 (copy)"
      ]
    },
    "5575": {
      "op": "len",
      "defined_out": [
        "add%7#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "add%7#0",
        "len%0#0"
      ]
    },
    "5576": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%5#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0",
        "eq%5#0"
      ]
    },
    "5577": {
      "error": "invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5578": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5580": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%10#0"
      ]
    },
    "5583": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "5584": {
      "op": "==",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "tmp%11#0"
      ]
    },
    "5585": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5586": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "5587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "0"
      ]
    },
    "5588": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "5589": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5591": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "5592": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "5593": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "5594": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%8#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "5596": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%8#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "5598": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%7#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "5600": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "5601": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "5602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "0"
      ]
    },
    "5603": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "5604": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0"
      ]
    },
    "5606": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "5607": {
      "op": "intc_1 // 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "2"
      ]
    },
    "5608": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%10#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "5609": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%9#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "5611": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%10#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0"
      ]
    },
    "5613": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "aggregate%extract_uint16%9#0",
        "aggregate%extract_uint16%10#0"
      ]
    },
    "5615": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%6#0"
      ]
    },
    "5616": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%item0%0#0"
      ]
    },
    "5619": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0"
      ]
    },
    "5621": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "5622": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)",
        "2"
      ]
    },
    "5623": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "5624": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0"
      ]
    },
    "5626": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0",
        "aggregate%substring3%5#0 (copy)"
      ]
    },
    "5627": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%11#0",
        "aggregate%item0%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%substring3%5#0",
        "aggregate%len%3#0"
      ]
    },
    "5628": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0"
      ]
    },
    "5630": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%3#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0"
      ]
    },
    "5632": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%5#0",
        "aggregate%extract_uint16%11#0",
        "aggregate%len%3#0"
      ]
    },
    "5634": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "5635": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5637": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "5638": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "5639": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "5640": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%extract_uint16%12#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5642": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%extract_uint16%12#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "5643": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%12#0",
        "aggregate%item0%0#0",
        "aggregate%len%4#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%extract_uint16%12#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%4#0"
      ]
    },
    "5644": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%len%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "5646": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%len%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%12#0"
      ]
    },
    "5648": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%12#0",
        "aggregate%len%4#0"
      ]
    },
    "5650": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ]
    },
    "5651": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "5652": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0"
      ]
    },
    "5653": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "0",
        "8"
      ]
    },
    "5654": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%extract%0#0"
      ]
    },
    "5655": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0",
        "aggregate%item0%1#0"
      ]
    },
    "5656": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%8#0"
      ]
    },
    "5658": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "5659": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "8"
      ]
    },
    "5660": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "8",
        "8"
      ]
    },
    "5661": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract%1#0"
      ]
    },
    "5662": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0"
      ]
    },
    "5664": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "5665": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)",
        "16"
      ]
    },
    "5667": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "5668": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0"
      ]
    },
    "5670": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0",
        "aggregate%substring3%8#0 (copy)"
      ]
    },
    "5671": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%len%5#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%8#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%substring3%8#0",
        "aggregate%len%5#0"
      ]
    },
    "5672": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0"
      ]
    },
    "5674": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%len%5#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%13#0"
      ]
    },
    "5676": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%8#0",
        "aggregate%extract_uint16%13#0",
        "aggregate%len%5#0"
      ]
    },
    "5678": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%7#0",
        "aggregate%substring3%9#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%9#0"
      ]
    },
    "5679": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%7#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0"
      ]
    },
    "5682": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "5684": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%7#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "aggregate%substring3%7#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%12#0",
        "aggregate%item2%0#0"
      ]
    },
    "5686": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%12#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%7#0"
      ]
    },
    "5688": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%item2%0#0"
      ]
    },
    "5690": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%item2%0#0",
        "aggregate%item0%1#0"
      ]
    },
    "5692": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%item2%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0",
        "aggregate%item2%0#0"
      ]
    },
    "5694": {
      "op": "cover 4",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0",
        "tmp%12#0"
      ]
    },
    "5696": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "tmp%16#0",
        "tmp%15#0",
        "tmp%14#0",
        "tmp%13#0"
      ]
    },
    "5698": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.0.0#0",
        "tmp%16#0",
        "tmp%15#0",
        "tmp%14#0"
      ]
    },
    "5700": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%16#0",
        "tmp%15#0"
      ]
    },
    "5702": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%16#0"
      ]
    },
    "5704": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0"
      ]
    },
    "5706": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0"
      ]
    },
    "5708": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0"
      ]
    },
    "5710": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "5712": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0"
      ]
    },
    "5714": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "5716": {
      "op": "bytec 17 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "5718": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%17#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%17#0"
      ]
    },
    "5719": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "5720": {
      "op": "bytec 20 // \"echo: s2\"",
      "defined_out": [
        "\"echo: s2\"",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "\"echo: s2\""
      ]
    },
    "5722": {
      "op": "len",
      "defined_out": [
        "aggregate%length%3#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length%3#0"
      ]
    },
    "5723": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%8#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%as_bytes%8#0"
      ]
    },
    "5724": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%3#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "5727": {
      "op": "bytec 20 // \"echo: s2\"",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%3#0",
        "\"echo: s2\""
      ]
    },
    "5729": {
      "op": "concat",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%18#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%18#0"
      ]
    },
    "5730": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%19#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%19#0"
      ]
    },
    "5731": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "5732": {
      "op": "intc_1 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "5733": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%20#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%20#0"
      ]
    },
    "5734": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "5735": {
      "op": "bytec 23 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000003"
      ]
    },
    "5737": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%21#0"
      ]
    },
    "5738": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "5739": {
      "op": "bytec 56 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "5741": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "5742": {
      "op": "assert",
      "stack_out": []
    },
    "5743": {
      "op": "itxn_begin"
    },
    "5744": {
      "op": "bytec 18 // \"s2\"",
      "defined_out": [
        "\"s2\""
      ],
      "stack_out": [
        "\"s2\""
      ]
    },
    "5746": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0"
      ],
      "stack_out": [
        "aggregate%length%4#0"
      ]
    },
    "5747": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%9#0"
      ]
    },
    "5748": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%4#0"
      ]
    },
    "5751": {
      "op": "bytec 18 // \"s2\"",
      "stack_out": [
        "aggregate%length_uint16%4#0",
        "\"s2\""
      ]
    },
    "5753": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "5754": {
      "op": "bytec_1 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "\"s1\""
      ]
    },
    "5755": {
      "op": "len",
      "defined_out": [
        "aggregate%length%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%length%5#0"
      ]
    },
    "5756": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%10#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_bytes%10#0"
      ]
    },
    "5757": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "5760": {
      "op": "bytec_1 // \"s1\"",
      "stack_out": [
        "tmp%23#0",
        "aggregate%length_uint16%5#0",
        "\"s1\""
      ]
    },
    "5761": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0"
      ]
    },
    "5762": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "4"
      ]
    },
    "5764": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_bytes%11#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_bytes%11#0"
      ]
    },
    "5765": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "5768": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%5#0",
        "0x"
      ]
    },
    "5769": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "0x",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "5771": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%7#0"
      ]
    },
    "5772": {
      "op": "cover 1",
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0"
      ]
    },
    "5774": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_Encoded(len+utf8[])%4#0 (copy)",
        "aggregate%head%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_Encoded(len+utf8[])%4#0 (copy)"
      ]
    },
    "5775": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%data_length%5#0",
        "aggregate%head%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%data_length%5#0"
      ]
    },
    "5776": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%data_length%5#0",
        "4"
      ]
    },
    "5778": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%current_tail_offset%5#0",
        "aggregate%head%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%current_tail_offset%5#0"
      ]
    },
    "5779": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_bytes%12#0",
        "aggregate%head%7#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%as_bytes%12#0"
      ]
    },
    "5780": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%7#0",
        "aggregate%offset_as_uint16%6#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "5783": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%offset_as_uint16%6#0",
        "aggregate%head%7#0"
      ]
    },
    "5785": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%7#0",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "5787": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%8#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%as_Encoded(len+utf8[])%4#0",
        "aggregate%head%8#0"
      ]
    },
    "5788": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%23#0",
        "aggregate%head%8#0",
        "aggregate%as_Encoded(len+utf8[])%4#0"
      ]
    },
    "5790": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "aggregate%concat%5#0"
      ]
    },
    "5791": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%5#0",
        "tmp%23#0"
      ]
    },
    "5793": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0"
      ]
    },
    "5794": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "4"
      ]
    },
    "5796": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_bytes%13#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_bytes%13#0"
      ]
    },
    "5797": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%offset_as_uint16%7#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%offset_as_uint16%7#0"
      ]
    },
    "5800": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%offset_as_uint16%7#0",
        "0x"
      ]
    },
    "5801": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "0x",
        "aggregate%offset_as_uint16%7#0"
      ]
    },
    "5803": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%head%9#0"
      ]
    },
    "5804": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0"
      ]
    },
    "5806": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0 (copy)",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0 (copy)"
      ]
    },
    "5807": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%data_length%7#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%data_length%7#0"
      ]
    },
    "5808": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%data_length%7#0",
        "4"
      ]
    },
    "5810": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0"
      ]
    },
    "5811": {
      "op": "intc_2 // 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "1"
      ]
    },
    "5812": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "5813": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "5814": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "5816": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%10#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%10#0"
      ]
    },
    "5817": {
      "op": "bytec 15 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%10#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%10#0",
        "0x0000000000000002"
      ]
    },
    "5819": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0"
      ]
    },
    "5820": {
      "op": "bytec 19 // 0x33",
      "defined_out": [
        "0x33",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "0x33"
      ]
    },
    "5822": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0",
        "aggregate%length%6#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%length%6#0"
      ]
    },
    "5823": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_bytes%14#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%as_bytes%14#0"
      ]
    },
    "5824": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0",
        "aggregate%length_uint16%6#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%length_uint16%6#0"
      ]
    },
    "5827": {
      "op": "bytec 19 // 0x33",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%length_uint16%6#0",
        "0x33"
      ]
    },
    "5829": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "5830": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "18"
      ]
    },
    "5832": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%15#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_bytes%15#0"
      ]
    },
    "5833": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%head%9#0",
        "aggregate%offset_as_uint16%8#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%8#0"
      ]
    },
    "5836": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%offset_as_uint16%8#0",
        "aggregate%head%11#0"
      ]
    },
    "5838": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%11#0",
        "aggregate%offset_as_uint16%8#0"
      ]
    },
    "5840": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%12#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%12#0"
      ]
    },
    "5841": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "5843": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%current_tail_offset%7#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0"
      ]
    },
    "5844": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%current_tail_offset%7#0"
      ]
    },
    "5846": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%as_bytes%16#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%as_bytes%16#0"
      ]
    },
    "5847": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%head%9#0",
        "aggregate%offset_as_uint16%9#0"
      ],
      "stack_out": [
        "aggregate%head%9#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%offset_as_uint16%9#0"
      ]
    },
    "5850": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%offset_as_uint16%9#0",
        "aggregate%head%9#0"
      ]
    },
    "5852": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%head%9#0",
        "aggregate%offset_as_uint16%9#0"
      ]
    },
    "5854": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%head%13#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%head%13#0"
      ]
    },
    "5855": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%head%13#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%1#0"
      ]
    },
    "5857": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%concat%8#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0",
        "aggregate%concat%8#0"
      ]
    },
    "5858": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%8#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%1#0"
      ]
    },
    "5860": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5861": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "5863": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5865": {
      "op": "bytec 33 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "5867": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5869": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "5871": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "5873": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "5875": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "5876": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "5878": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@2"
    },
    "5881": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "5882": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "5884": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "5885": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0"
      ]
    },
    "5888": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5889": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)",
        "0"
      ]
    },
    "5890": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%1#0",
        "extract_uint16%5#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "extract_uint16%5#0"
      ]
    },
    "5891": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "awst_tmp%1#0",
        "extract_uint16%5#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "extract_uint16%5#0",
        "4"
      ]
    },
    "5893": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%6#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "eq%6#0"
      ]
    },
    "5894": {
      "error": "invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0"
      ]
    },
    "5895": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5896": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)",
        "0"
      ]
    },
    "5897": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "5898": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "aggregate%extract_uint16%14#0",
        "tmp%25#0"
      ]
    },
    "5900": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "aggregate%extract_uint16%14#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5901": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%14#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "aggregate%extract_uint16%14#0",
        "tmp%25#0",
        "tmp%25#0 (copy)",
        "2"
      ]
    },
    "5902": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "aggregate%extract_uint16%14#0",
        "tmp%25#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "5903": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "aggregate%extract_uint16%14#0",
        "tmp%25#0",
        "aggregate%extract_uint16%15#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5905": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%15#0",
        "tmp%25#0 (copy)",
        "aggregate%extract_uint16%14#0"
      ]
    },
    "5907": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%25#0 (copy)",
        "aggregate%extract_uint16%14#0",
        "aggregate%extract_uint16%15#0"
      ]
    },
    "5909": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "5910": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5911": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "0"
      ]
    },
    "5912": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%1#0",
        "extract_uint16%6#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "extract_uint16%6#0"
      ]
    },
    "5913": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "extract_uint16%6#0",
        "4"
      ]
    },
    "5915": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%7#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "eq%7#0"
      ]
    },
    "5916": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "5917": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5918": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "0"
      ]
    },
    "5919": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%16#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "5920": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%16#0",
        "tmp%26#0"
      ]
    },
    "5922": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%16#0",
        "tmp%26#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5923": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%16#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "2"
      ]
    },
    "5924": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%16#0",
        "tmp%26#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "5925": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%16#0",
        "tmp%26#0",
        "aggregate%extract_uint16%17#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5927": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%17#0",
        "tmp%26#0 (copy)",
        "aggregate%extract_uint16%16#0"
      ]
    },
    "5929": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%26#0 (copy)",
        "aggregate%extract_uint16%16#0",
        "aggregate%extract_uint16%17#0"
      ]
    },
    "5931": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "5932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "0"
      ]
    },
    "5933": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%1#0",
        "length%3#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "length%3#0"
      ]
    },
    "5934": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "length%3#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "length%3#0",
        "1"
      ]
    },
    "5935": {
      "op": "*",
      "defined_out": [
        "awst_tmp%1#0",
        "mul%3#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "mul%3#0"
      ]
    },
    "5936": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "mul%3#0",
        "2"
      ]
    },
    "5937": {
      "op": "+",
      "defined_out": [
        "add%8#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%8#0"
      ]
    },
    "5938": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%8#0",
        "4"
      ]
    },
    "5940": {
      "op": "+",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0"
      ]
    },
    "5941": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5943": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "tmp%26#0 (copy)",
        "2"
      ]
    },
    "5944": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "extract_uint16%7#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "extract_uint16%7#0"
      ]
    },
    "5945": {
      "op": "dig 1",
      "defined_out": [
        "add%9#0",
        "add%9#0 (copy)",
        "awst_tmp%1#0",
        "extract_uint16%7#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "extract_uint16%7#0",
        "add%9#0 (copy)"
      ]
    },
    "5947": {
      "op": "==",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "eq%8#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "eq%8#0"
      ]
    },
    "5948": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0"
      ]
    },
    "5949": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5951": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "tmp%26#0 (copy)",
        "2"
      ]
    },
    "5952": {
      "op": "extract_uint16",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%18#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "add%9#0",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "5953": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0",
        "add%9#0"
      ]
    },
    "5955": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0",
        "add%9#0",
        "tmp%26#0 (copy)"
      ]
    },
    "5957": {
      "op": "len",
      "defined_out": [
        "add%9#0",
        "aggregate%extract_uint16%18#0",
        "aggregate%len%6#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0",
        "add%9#0",
        "aggregate%len%6#0"
      ]
    },
    "5958": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0",
        "aggregate%len%6#0",
        "add%9#0"
      ]
    },
    "5960": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%18#0",
        "aggregate%len%6#0",
        "add%9#0",
        "tmp%26#0"
      ]
    },
    "5962": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%len%6#0",
        "add%9#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0"
      ]
    },
    "5964": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "tmp%26#0",
        "aggregate%extract_uint16%18#0",
        "aggregate%len%6#0"
      ]
    },
    "5966": {
      "op": "substring3",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "tmp%28#0"
      ]
    },
    "5967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "tmp%28#0",
        "0"
      ]
    },
    "5968": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "length%4#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "length%4#0"
      ]
    },
    "5969": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "length%4#0",
        "1"
      ]
    },
    "5970": {
      "op": "*",
      "defined_out": [
        "add%9#0",
        "awst_tmp%1#0",
        "mul%4#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "mul%4#0"
      ]
    },
    "5971": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "mul%4#0",
        "2"
      ]
    },
    "5972": {
      "op": "+",
      "defined_out": [
        "add%10#0",
        "add%9#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%9#0",
        "add%10#0"
      ]
    },
    "5973": {
      "op": "+",
      "defined_out": [
        "add%11#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%11#0"
      ]
    },
    "5974": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%11#0",
        "4"
      ]
    },
    "5976": {
      "op": "+",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0"
      ]
    },
    "5977": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5979": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%25#0 (copy)",
        "2"
      ]
    },
    "5980": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "extract_uint16%8#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "extract_uint16%8#0"
      ]
    },
    "5981": {
      "op": "dig 1",
      "defined_out": [
        "add%12#0",
        "add%12#0 (copy)",
        "awst_tmp%1#0",
        "extract_uint16%8#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "extract_uint16%8#0",
        "add%12#0 (copy)"
      ]
    },
    "5983": {
      "op": "==",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "eq%9#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "eq%9#0"
      ]
    },
    "5984": {
      "error": "invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0"
      ]
    },
    "5985": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5987": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%25#0 (copy)",
        "2"
      ]
    },
    "5988": {
      "op": "extract_uint16",
      "defined_out": [
        "add%12#0",
        "aggregate%extract_uint16%19#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "5989": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%19#0",
        "add%12#0"
      ]
    },
    "5991": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%19#0",
        "add%12#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5993": {
      "op": "len",
      "defined_out": [
        "add%12#0",
        "aggregate%extract_uint16%19#0",
        "aggregate%len%7#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%19#0",
        "add%12#0",
        "aggregate%len%7#0"
      ]
    },
    "5994": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%19#0",
        "aggregate%len%7#0",
        "add%12#0"
      ]
    },
    "5996": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%extract_uint16%19#0",
        "aggregate%len%7#0",
        "add%12#0",
        "tmp%25#0 (copy)"
      ]
    },
    "5998": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "aggregate%len%7#0",
        "add%12#0",
        "tmp%25#0 (copy)",
        "aggregate%extract_uint16%19#0"
      ]
    },
    "6000": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%25#0 (copy)",
        "aggregate%extract_uint16%19#0",
        "aggregate%len%7#0"
      ]
    },
    "6002": {
      "op": "substring3",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0"
      ]
    },
    "6003": {
      "op": "dup",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "6004": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "add%12#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "16"
      ]
    },
    "6006": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "extract_uint16%9#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "extract_uint16%9#0"
      ]
    },
    "6007": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "add%12#0",
        "awst_tmp%1#0",
        "extract_uint16%9#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "extract_uint16%9#0",
        "18"
      ]
    },
    "6009": {
      "op": "==",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "eq%10#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "eq%10#0"
      ]
    },
    "6010": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0"
      ]
    },
    "6011": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "6012": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "tmp%29#0 (copy)",
        "16"
      ]
    },
    "6014": {
      "op": "extract_uint16",
      "defined_out": [
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "6015": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "tmp%29#0"
      ]
    },
    "6017": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "tmp%29#0",
        "tmp%29#0 (copy)"
      ]
    },
    "6018": {
      "op": "len",
      "defined_out": [
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "tmp%29#0",
        "aggregate%len%8#0"
      ]
    },
    "6019": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0",
        "tmp%29#0"
      ]
    },
    "6021": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "aggregate%len%8#0",
        "tmp%29#0",
        "aggregate%extract_uint16%20#0"
      ]
    },
    "6023": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%29#0",
        "aggregate%extract_uint16%20#0",
        "aggregate%len%8#0"
      ]
    },
    "6025": {
      "op": "substring3",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "tmp%25#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%30#0"
      ]
    },
    "6026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "tmp%30#0",
        "0"
      ]
    },
    "6027": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "length%5#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "length%5#0"
      ]
    },
    "6028": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "length%5#0",
        "1"
      ]
    },
    "6029": {
      "op": "*",
      "defined_out": [
        "add%12#0",
        "awst_tmp%1#0",
        "mul%5#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "mul%5#0"
      ]
    },
    "6030": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "mul%5#0",
        "2"
      ]
    },
    "6031": {
      "op": "+",
      "defined_out": [
        "add%12#0",
        "add%13#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "add%13#0"
      ]
    },
    "6032": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "add%13#0",
        "18"
      ]
    },
    "6034": {
      "op": "+",
      "defined_out": [
        "add%12#0",
        "add%14#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%12#0",
        "add%14#0"
      ]
    },
    "6035": {
      "op": "+",
      "defined_out": [
        "add%15#0",
        "awst_tmp%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%15#0"
      ]
    },
    "6036": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%15#0",
        "tmp%25#0 (copy)"
      ]
    },
    "6038": {
      "op": "len",
      "defined_out": [
        "add%15#0",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "add%15#0",
        "len%1#0"
      ]
    },
    "6039": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%11#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%25#0",
        "eq%11#0"
      ]
    },
    "6040": {
      "error": "invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6041": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6043": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%31#0"
      ]
    },
    "6046": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "6047": {
      "op": "==",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "tmp%32#0"
      ]
    },
    "6048": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6049": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ]
    },
    "6050": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)",
        "0"
      ]
    },
    "6051": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%21#0"
      ]
    },
    "6052": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6054": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ]
    },
    "6055": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)",
        "2"
      ]
    },
    "6056": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%21#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%22#0"
      ]
    },
    "6057": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%21#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ]
    },
    "6059": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%22#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)",
        "aggregate%extract_uint16%21#0"
      ]
    },
    "6061": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)",
        "aggregate%extract_uint16%21#0",
        "aggregate%extract_uint16%22#0"
      ]
    },
    "6063": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0"
      ]
    },
    "6064": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)"
      ]
    },
    "6065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)",
        "0"
      ]
    },
    "6066": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "6067": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0"
      ]
    },
    "6069": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)"
      ]
    },
    "6070": {
      "op": "intc_1 // 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)",
        "2"
      ]
    },
    "6071": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%23#0",
        "aggregate%extract_uint16%24#0",
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%24#0"
      ]
    },
    "6072": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%23#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%24#0",
        "aggregate%substring3%15#0 (copy)"
      ]
    },
    "6074": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%24#0",
        "aggregate%substring3%15#0 (copy)",
        "aggregate%extract_uint16%23#0"
      ]
    },
    "6076": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)",
        "aggregate%extract_uint16%23#0",
        "aggregate%extract_uint16%24#0"
      ]
    },
    "6078": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%15#0",
        "aggregate%substring3%16#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%16#0"
      ]
    },
    "6079": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%item0%2#0"
      ]
    },
    "6082": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0"
      ]
    },
    "6084": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)"
      ]
    },
    "6085": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)",
        "2"
      ]
    },
    "6086": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%25#0",
        "aggregate%item0%2#0",
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%25#0"
      ]
    },
    "6087": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%25#0",
        "aggregate%substring3%15#0"
      ]
    },
    "6089": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%25#0",
        "aggregate%substring3%15#0",
        "aggregate%substring3%15#0 (copy)"
      ]
    },
    "6090": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%25#0",
        "aggregate%item0%2#0",
        "aggregate%len%9#0",
        "aggregate%substring3%15#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%25#0",
        "aggregate%substring3%15#0",
        "aggregate%len%9#0"
      ]
    },
    "6091": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%25#0",
        "aggregate%len%9#0",
        "aggregate%substring3%15#0"
      ]
    },
    "6093": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%len%9#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%25#0"
      ]
    },
    "6095": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%15#0",
        "aggregate%extract_uint16%25#0",
        "aggregate%len%9#0"
      ]
    },
    "6097": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%substring3%17#0"
      ]
    },
    "6098": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6100": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ]
    },
    "6101": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)",
        "2"
      ]
    },
    "6102": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%26#0",
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%26#0"
      ]
    },
    "6103": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%extract_uint16%26#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6105": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%extract_uint16%26#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0 (copy)"
      ]
    },
    "6106": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%26#0",
        "aggregate%item0%2#0",
        "aggregate%len%10#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%extract_uint16%26#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%len%10#0"
      ]
    },
    "6107": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%extract_uint16%26#0",
        "aggregate%len%10#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0"
      ]
    },
    "6109": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%len%10#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%26#0"
      ]
    },
    "6111": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%1#0",
        "aggregate%extract_uint16%26#0",
        "aggregate%len%10#0"
      ]
    },
    "6113": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ]
    },
    "6114": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ]
    },
    "6115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)",
        "0"
      ]
    },
    "6116": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)",
        "0",
        "8"
      ]
    },
    "6117": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%extract%2#0"
      ]
    },
    "6118": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0",
        "aggregate%item0%3#0"
      ]
    },
    "6119": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%18#0"
      ]
    },
    "6121": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ]
    },
    "6122": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)",
        "8"
      ]
    },
    "6123": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)",
        "8",
        "8"
      ]
    },
    "6124": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%18#0",
        "aggregate%extract%3#0"
      ]
    },
    "6125": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%18#0"
      ]
    },
    "6127": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ]
    },
    "6128": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)",
        "16"
      ]
    },
    "6130": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%18#0",
        "aggregate%extract_uint16%27#0"
      ]
    },
    "6131": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%substring3%18#0"
      ]
    },
    "6133": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%substring3%18#0",
        "aggregate%substring3%18#0 (copy)"
      ]
    },
    "6134": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%len%11#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%18#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%substring3%18#0",
        "aggregate%len%11#0"
      ]
    },
    "6135": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%len%11#0",
        "aggregate%substring3%18#0"
      ]
    },
    "6137": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%len%11#0",
        "aggregate%substring3%18#0",
        "aggregate%extract_uint16%27#0"
      ]
    },
    "6139": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%18#0",
        "aggregate%extract_uint16%27#0",
        "aggregate%len%11#0"
      ]
    },
    "6141": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%17#0",
        "aggregate%substring3%19#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%substring3%19#0"
      ]
    },
    "6142": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%2#0",
        "aggregate%item0%3#0",
        "aggregate%item2%1#0",
        "aggregate%substring3%17#0"
      ],
      "stack_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%item2%1#0"
      ]
    },
    "6145": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "aggregate%item2%1#0",
        "aggregate%item0%2#0"
      ]
    },
    "6147": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%3#0",
        "aggregate%item2%1#0",
        "aggregate%substring3%17#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "aggregate%substring3%17#0",
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "tmp%33#0",
        "aggregate%item2%1#0"
      ]
    },
    "6149": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "tmp%33#0",
        "aggregate%item2%1#0",
        "aggregate%substring3%17#0"
      ]
    },
    "6151": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%3#0",
        "aggregate%item0%3#0",
        "aggregate%item2%1#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "aggregate%item0%3#0",
        "aggregate%extract%3#0",
        "tmp%34#0",
        "tmp%33#0",
        "aggregate%item2%1#0"
      ]
    },
    "6153": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract%3#0",
        "tmp%34#0",
        "tmp%33#0",
        "aggregate%item2%1#0",
        "aggregate%item0%3#0"
      ]
    },
    "6155": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%item2%1#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%35#0",
        "tmp%34#0",
        "tmp%33#0",
        "aggregate%item2%1#0"
      ]
    },
    "6157": {
      "op": "cover 4",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%36#0",
        "tmp%35#0",
        "tmp%34#0",
        "tmp%33#0"
      ]
    },
    "6159": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%35#0",
        "tmp%34#0"
      ]
    },
    "6161": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.0.0#0",
        "tmp%37#0",
        "tmp%36#0",
        "tmp%35#0"
      ]
    },
    "6163": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%37#0",
        "tmp%36#0"
      ]
    },
    "6165": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%37#0"
      ]
    },
    "6167": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0"
      ]
    },
    "6169": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0"
      ]
    },
    "6171": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0"
      ]
    },
    "6173": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "6175": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0"
      ]
    },
    "6177": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "6179": {
      "op": "bytec 17 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "6181": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%38#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%38#0"
      ]
    },
    "6182": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "6183": {
      "op": "bytec 20 // \"echo: s2\"",
      "defined_out": [
        "\"echo: s2\"",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "\"echo: s2\""
      ]
    },
    "6185": {
      "op": "len",
      "defined_out": [
        "aggregate%length%7#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length%7#0"
      ]
    },
    "6186": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%17#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%as_bytes%17#0"
      ]
    },
    "6187": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%7#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%7#0"
      ]
    },
    "6190": {
      "op": "bytec 20 // \"echo: s2\"",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%7#0",
        "\"echo: s2\""
      ]
    },
    "6192": {
      "op": "concat",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%39#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%39#0"
      ]
    },
    "6193": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%40#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%40#0"
      ]
    },
    "6194": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "6195": {
      "op": "intc_1 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "6196": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%41#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%41#0"
      ]
    },
    "6197": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "6198": {
      "op": "bytec 23 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0",
        "0x0000000000000003"
      ]
    },
    "6200": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%42#0"
      ]
    },
    "6201": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "6202": {
      "op": "bytec 56 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "6204": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "6205": {
      "op": "assert",
      "stack_out": []
    },
    "6206": {
      "op": "itxn_begin"
    },
    "6207": {
      "op": "bytec 57 // \"s1b\"",
      "defined_out": [
        "\"s1b\""
      ],
      "stack_out": [
        "\"s1b\""
      ]
    },
    "6209": {
      "op": "len",
      "defined_out": [
        "aggregate%length%8#0"
      ],
      "stack_out": [
        "aggregate%length%8#0"
      ]
    },
    "6210": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%18#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%18#0"
      ]
    },
    "6211": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%8#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%8#0"
      ]
    },
    "6214": {
      "op": "bytec 57 // \"s1b\"",
      "stack_out": [
        "aggregate%length_uint16%8#0",
        "\"s1b\""
      ]
    },
    "6216": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "6217": {
      "op": "bytec 58 // \"s2b\"",
      "defined_out": [
        "\"s2b\"",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "\"s2b\""
      ]
    },
    "6219": {
      "op": "len",
      "defined_out": [
        "aggregate%length%9#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "aggregate%length%9#0"
      ]
    },
    "6220": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%19#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "aggregate%as_bytes%19#0"
      ]
    },
    "6221": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%9#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "aggregate%length_uint16%9#0"
      ]
    },
    "6224": {
      "op": "bytec 58 // \"s2b\"",
      "stack_out": [
        "tmp%44#0",
        "aggregate%length_uint16%9#0",
        "\"s2b\""
      ]
    },
    "6226": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%7#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "aggregate%as_Encoded(len+utf8[])%7#0"
      ]
    },
    "6227": {
      "op": "cover 1",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0"
      ]
    },
    "6229": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "4"
      ]
    },
    "6231": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%20#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%as_bytes%20#0"
      ]
    },
    "6232": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%10#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%offset_as_uint16%10#0"
      ]
    },
    "6235": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%offset_as_uint16%10#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%offset_as_uint16%10#0",
        "0x"
      ]
    },
    "6236": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "0x",
        "aggregate%offset_as_uint16%10#0"
      ]
    },
    "6238": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%14#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0"
      ]
    },
    "6239": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%14#0",
        "tmp%44#0",
        "tmp%44#0 (copy)",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "tmp%44#0 (copy)"
      ]
    },
    "6241": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%10#0",
        "aggregate%head%14#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "aggregate%data_length%10#0"
      ]
    },
    "6242": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "aggregate%data_length%10#0",
        "4"
      ]
    },
    "6244": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%10#0",
        "aggregate%head%14#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "aggregate%current_tail_offset%10#0"
      ]
    },
    "6245": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%21#0",
        "aggregate%head%14#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "aggregate%as_bytes%21#0"
      ]
    },
    "6246": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%14#0",
        "aggregate%offset_as_uint16%11#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%14#0",
        "aggregate%offset_as_uint16%11#0"
      ]
    },
    "6249": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%15#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%head%15#0"
      ]
    },
    "6250": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%45#0",
        "aggregate%head%15#0",
        "tmp%44#0"
      ]
    },
    "6252": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%10#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "aggregate%concat%10#0"
      ]
    },
    "6253": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%10#0",
        "tmp%45#0"
      ]
    },
    "6255": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "6256": {
      "op": "bytec 59 // 0x3362",
      "defined_out": [
        "0x3362",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0x3362"
      ]
    },
    "6258": {
      "op": "len",
      "defined_out": [
        "aggregate%length%10#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "aggregate%length%10#0"
      ]
    },
    "6259": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%22#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "aggregate%as_bytes%22#0"
      ]
    },
    "6260": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%10#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "aggregate%length_uint16%10#0"
      ]
    },
    "6263": {
      "op": "bytec 59 // 0x3362",
      "stack_out": [
        "tmp%46#0",
        "aggregate%length_uint16%10#0",
        "0x3362"
      ]
    },
    "6265": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "6266": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "0x"
      ]
    },
    "6267": {
      "op": "bytec 54 // 0x000000000000000b",
      "defined_out": [
        "0x",
        "0x000000000000000b",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "0x",
        "0x000000000000000b"
      ]
    },
    "6269": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%16#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%16#0"
      ]
    },
    "6270": {
      "op": "pushbytes 0x0000000000000015",
      "defined_out": [
        "0x0000000000000015",
        "aggregate%head%16#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%16#0",
        "0x0000000000000015"
      ]
    },
    "6280": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%17#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%17#0"
      ]
    },
    "6281": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%17#0",
        "18"
      ]
    },
    "6283": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%23#0",
        "aggregate%head%17#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%17#0",
        "aggregate%as_bytes%23#0"
      ]
    },
    "6284": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%17#0",
        "aggregate%offset_as_uint16%12#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%17#0",
        "aggregate%offset_as_uint16%12#0"
      ]
    },
    "6287": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%18#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "aggregate%head%18#0"
      ]
    },
    "6288": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%46#0",
        "aggregate%head%18#0",
        "tmp%47#0"
      ]
    },
    "6290": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "6291": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "4"
      ]
    },
    "6293": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%24#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%as_bytes%24#0"
      ]
    },
    "6294": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%offset_as_uint16%13#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%offset_as_uint16%13#0"
      ]
    },
    "6297": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%offset_as_uint16%13#0",
        "0x"
      ]
    },
    "6298": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "0x",
        "aggregate%offset_as_uint16%13#0"
      ]
    },
    "6300": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%19#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0"
      ]
    },
    "6301": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%head%19#0",
        "tmp%46#0",
        "tmp%46#0 (copy)",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "tmp%46#0 (copy)"
      ]
    },
    "6303": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%13#0",
        "aggregate%head%19#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "aggregate%data_length%13#0"
      ]
    },
    "6304": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "aggregate%data_length%13#0",
        "4"
      ]
    },
    "6306": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%13#0",
        "aggregate%head%19#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "aggregate%current_tail_offset%13#0"
      ]
    },
    "6307": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%25#0",
        "aggregate%head%19#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "aggregate%as_bytes%25#0"
      ]
    },
    "6308": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%19#0",
        "aggregate%offset_as_uint16%14#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%19#0",
        "aggregate%offset_as_uint16%14#0"
      ]
    },
    "6311": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%20#0",
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "aggregate%head%20#0"
      ]
    },
    "6312": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%48#0",
        "aggregate%head%20#0",
        "tmp%46#0"
      ]
    },
    "6314": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%13#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "aggregate%concat%13#0"
      ]
    },
    "6315": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%13#0",
        "tmp%48#0"
      ]
    },
    "6317": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6318": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "6320": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6322": {
      "op": "bytec 33 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "6324": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6326": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6328": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6330": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6332": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "6333": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6335": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@3"
    },
    "6338": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "6339": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "6341": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "6342": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0"
      ]
    },
    "6345": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)",
        "0"
      ]
    },
    "6347": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%2#0",
        "extract_uint16%10#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "extract_uint16%10#0"
      ]
    },
    "6348": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "awst_tmp%2#0",
        "extract_uint16%10#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "extract_uint16%10#0",
        "4"
      ]
    },
    "6350": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%12#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "eq%12#0"
      ]
    },
    "6351": {
      "error": "invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0"
      ]
    },
    "6352": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)",
        "0"
      ]
    },
    "6354": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%28#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%28#0"
      ]
    },
    "6355": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "aggregate%extract_uint16%28#0",
        "tmp%50#0"
      ]
    },
    "6357": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "aggregate%extract_uint16%28#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6358": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%28#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "aggregate%extract_uint16%28#0",
        "tmp%50#0",
        "tmp%50#0 (copy)",
        "2"
      ]
    },
    "6359": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%28#0",
        "aggregate%extract_uint16%29#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "aggregate%extract_uint16%28#0",
        "tmp%50#0",
        "aggregate%extract_uint16%29#0"
      ]
    },
    "6360": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "aggregate%extract_uint16%28#0",
        "tmp%50#0",
        "aggregate%extract_uint16%29#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6362": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%29#0",
        "tmp%50#0 (copy)",
        "aggregate%extract_uint16%28#0"
      ]
    },
    "6364": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%50#0 (copy)",
        "aggregate%extract_uint16%28#0",
        "aggregate%extract_uint16%29#0"
      ]
    },
    "6366": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "6367": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "0"
      ]
    },
    "6369": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%2#0",
        "extract_uint16%11#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "extract_uint16%11#0"
      ]
    },
    "6370": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "extract_uint16%11#0",
        "4"
      ]
    },
    "6372": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%13#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "eq%13#0"
      ]
    },
    "6373": {
      "error": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "6374": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6375": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "0"
      ]
    },
    "6376": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%30#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%30#0"
      ]
    },
    "6377": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%30#0",
        "tmp%51#0"
      ]
    },
    "6379": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%30#0",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6380": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%30#0",
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "2"
      ]
    },
    "6381": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%30#0",
        "aggregate%extract_uint16%31#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%30#0",
        "tmp%51#0",
        "aggregate%extract_uint16%31#0"
      ]
    },
    "6382": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%30#0",
        "tmp%51#0",
        "aggregate%extract_uint16%31#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6384": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%31#0",
        "tmp%51#0 (copy)",
        "aggregate%extract_uint16%30#0"
      ]
    },
    "6386": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "aggregate%extract_uint16%30#0",
        "aggregate%extract_uint16%31#0"
      ]
    },
    "6388": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "6389": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "tmp%52#0",
        "0"
      ]
    },
    "6390": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%2#0",
        "length%6#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "length%6#0"
      ]
    },
    "6391": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%2#0",
        "length%6#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "length%6#0",
        "1"
      ]
    },
    "6392": {
      "op": "*",
      "defined_out": [
        "awst_tmp%2#0",
        "mul%6#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "mul%6#0"
      ]
    },
    "6393": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "mul%6#0",
        "2"
      ]
    },
    "6394": {
      "op": "+",
      "defined_out": [
        "add%16#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%16#0"
      ]
    },
    "6395": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%16#0",
        "4"
      ]
    },
    "6397": {
      "op": "+",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0"
      ]
    },
    "6398": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6400": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "tmp%51#0 (copy)",
        "2"
      ]
    },
    "6401": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "extract_uint16%12#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "extract_uint16%12#0"
      ]
    },
    "6402": {
      "op": "dig 1",
      "defined_out": [
        "add%17#0",
        "add%17#0 (copy)",
        "awst_tmp%2#0",
        "extract_uint16%12#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "extract_uint16%12#0",
        "add%17#0 (copy)"
      ]
    },
    "6404": {
      "op": "==",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "eq%14#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "eq%14#0"
      ]
    },
    "6405": {
      "error": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0"
      ]
    },
    "6406": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6408": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "tmp%51#0 (copy)",
        "2"
      ]
    },
    "6409": {
      "op": "extract_uint16",
      "defined_out": [
        "add%17#0",
        "aggregate%extract_uint16%32#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "add%17#0",
        "aggregate%extract_uint16%32#0"
      ]
    },
    "6410": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0",
        "add%17#0"
      ]
    },
    "6412": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0",
        "add%17#0",
        "tmp%51#0 (copy)"
      ]
    },
    "6414": {
      "op": "len",
      "defined_out": [
        "add%17#0",
        "aggregate%extract_uint16%32#0",
        "aggregate%len%12#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0",
        "add%17#0",
        "aggregate%len%12#0"
      ]
    },
    "6415": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0",
        "aggregate%len%12#0",
        "add%17#0"
      ]
    },
    "6417": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%32#0",
        "aggregate%len%12#0",
        "add%17#0",
        "tmp%51#0"
      ]
    },
    "6419": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%len%12#0",
        "add%17#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0"
      ]
    },
    "6421": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "tmp%51#0",
        "aggregate%extract_uint16%32#0",
        "aggregate%len%12#0"
      ]
    },
    "6423": {
      "op": "substring3",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "tmp%53#0"
      ]
    },
    "6424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "tmp%53#0",
        "0"
      ]
    },
    "6425": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "length%7#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "length%7#0"
      ]
    },
    "6426": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "length%7#0",
        "1"
      ]
    },
    "6427": {
      "op": "*",
      "defined_out": [
        "add%17#0",
        "awst_tmp%2#0",
        "mul%7#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "mul%7#0"
      ]
    },
    "6428": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "mul%7#0",
        "2"
      ]
    },
    "6429": {
      "op": "+",
      "defined_out": [
        "add%17#0",
        "add%18#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%17#0",
        "add%18#0"
      ]
    },
    "6430": {
      "op": "+",
      "defined_out": [
        "add%19#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%19#0"
      ]
    },
    "6431": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%19#0",
        "4"
      ]
    },
    "6433": {
      "op": "+",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0"
      ]
    },
    "6434": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6436": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%50#0 (copy)",
        "2"
      ]
    },
    "6437": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "extract_uint16%13#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "extract_uint16%13#0"
      ]
    },
    "6438": {
      "op": "dig 1",
      "defined_out": [
        "add%20#0",
        "add%20#0 (copy)",
        "awst_tmp%2#0",
        "extract_uint16%13#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "extract_uint16%13#0",
        "add%20#0 (copy)"
      ]
    },
    "6440": {
      "op": "==",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "eq%15#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "eq%15#0"
      ]
    },
    "6441": {
      "error": "invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "op": "assert // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0"
      ]
    },
    "6442": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6444": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%50#0 (copy)",
        "2"
      ]
    },
    "6445": {
      "op": "extract_uint16",
      "defined_out": [
        "add%20#0",
        "aggregate%extract_uint16%33#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%extract_uint16%33#0"
      ]
    },
    "6446": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%33#0",
        "add%20#0"
      ]
    },
    "6448": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%33#0",
        "add%20#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6450": {
      "op": "len",
      "defined_out": [
        "add%20#0",
        "aggregate%extract_uint16%33#0",
        "aggregate%len%13#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%33#0",
        "add%20#0",
        "aggregate%len%13#0"
      ]
    },
    "6451": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%33#0",
        "aggregate%len%13#0",
        "add%20#0"
      ]
    },
    "6453": {
      "op": "dig 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%extract_uint16%33#0",
        "aggregate%len%13#0",
        "add%20#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6455": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "aggregate%len%13#0",
        "add%20#0",
        "tmp%50#0 (copy)",
        "aggregate%extract_uint16%33#0"
      ]
    },
    "6457": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%50#0 (copy)",
        "aggregate%extract_uint16%33#0",
        "aggregate%len%13#0"
      ]
    },
    "6459": {
      "op": "substring3",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0"
      ]
    },
    "6460": {
      "op": "dup",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%54#0",
        "tmp%54#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "tmp%54#0 (copy)"
      ]
    },
    "6461": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "add%20#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%54#0",
        "tmp%54#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "tmp%54#0 (copy)",
        "16"
      ]
    },
    "6463": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "extract_uint16%14#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "extract_uint16%14#0"
      ]
    },
    "6464": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "add%20#0",
        "awst_tmp%2#0",
        "extract_uint16%14#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "extract_uint16%14#0",
        "18"
      ]
    },
    "6466": {
      "op": "==",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "eq%16#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "eq%16#0"
      ]
    },
    "6467": {
      "error": "invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "op": "assert // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0"
      ]
    },
    "6468": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "tmp%54#0 (copy)"
      ]
    },
    "6469": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "tmp%54#0 (copy)",
        "16"
      ]
    },
    "6471": {
      "op": "extract_uint16",
      "defined_out": [
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "aggregate%extract_uint16%34#0"
      ]
    },
    "6472": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "tmp%54#0"
      ]
    },
    "6474": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "tmp%54#0",
        "tmp%54#0 (copy)"
      ]
    },
    "6475": {
      "op": "len",
      "defined_out": [
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "aggregate%len%14#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "tmp%54#0",
        "aggregate%len%14#0"
      ]
    },
    "6476": {
      "op": "cover 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%extract_uint16%34#0",
        "aggregate%len%14#0",
        "tmp%54#0"
      ]
    },
    "6478": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "aggregate%len%14#0",
        "tmp%54#0",
        "aggregate%extract_uint16%34#0"
      ]
    },
    "6480": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%54#0",
        "aggregate%extract_uint16%34#0",
        "aggregate%len%14#0"
      ]
    },
    "6482": {
      "op": "substring3",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "tmp%50#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%55#0"
      ]
    },
    "6483": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "tmp%55#0",
        "0"
      ]
    },
    "6484": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "length%8#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "length%8#0"
      ]
    },
    "6485": {
      "op": "intc_2 // 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "length%8#0",
        "1"
      ]
    },
    "6486": {
      "op": "*",
      "defined_out": [
        "add%20#0",
        "awst_tmp%2#0",
        "mul%8#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "mul%8#0"
      ]
    },
    "6487": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "mul%8#0",
        "2"
      ]
    },
    "6488": {
      "op": "+",
      "defined_out": [
        "add%20#0",
        "add%21#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "add%21#0"
      ]
    },
    "6489": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "add%21#0",
        "18"
      ]
    },
    "6491": {
      "op": "+",
      "defined_out": [
        "add%20#0",
        "add%22#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%20#0",
        "add%22#0"
      ]
    },
    "6492": {
      "op": "+",
      "defined_out": [
        "add%23#0",
        "awst_tmp%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%23#0"
      ]
    },
    "6493": {
      "op": "dig 1",
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%23#0",
        "tmp%50#0 (copy)"
      ]
    },
    "6495": {
      "op": "len",
      "defined_out": [
        "add%23#0",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "add%23#0",
        "len%2#0"
      ]
    },
    "6496": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%17#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%50#0",
        "eq%17#0"
      ]
    },
    "6497": {
      "error": "invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6498": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "awst_tmp%2#0"
      ]
    },
    "6500": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%56#0"
      ]
    },
    "6503": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%56#0",
        "0x151f7c75"
      ]
    },
    "6504": {
      "op": "==",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "tmp%57#0"
      ]
    },
    "6505": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6506": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ]
    },
    "6507": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)",
        "0"
      ]
    },
    "6508": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%35#0"
      ]
    },
    "6509": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6511": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ]
    },
    "6512": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)",
        "2"
      ]
    },
    "6513": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%35#0",
        "aggregate%extract_uint16%36#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%36#0"
      ]
    },
    "6514": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%35#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%36#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ]
    },
    "6516": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%36#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)",
        "aggregate%extract_uint16%35#0"
      ]
    },
    "6518": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)",
        "aggregate%extract_uint16%35#0",
        "aggregate%extract_uint16%36#0"
      ]
    },
    "6520": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0"
      ]
    },
    "6521": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)"
      ]
    },
    "6522": {
      "op": "intc_0 // 0",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)",
        "0"
      ]
    },
    "6523": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%37#0"
      ]
    },
    "6524": {
      "op": "cover 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0"
      ]
    },
    "6526": {
      "op": "dup",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)"
      ]
    },
    "6527": {
      "op": "intc_1 // 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)",
        "2"
      ]
    },
    "6528": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%37#0",
        "aggregate%extract_uint16%38#0",
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%38#0"
      ]
    },
    "6529": {
      "op": "dig 1",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%37#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%38#0",
        "aggregate%substring3%25#0 (copy)"
      ]
    },
    "6531": {
      "op": "uncover 3",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%38#0",
        "aggregate%substring3%25#0 (copy)",
        "aggregate%extract_uint16%37#0"
      ]
    },
    "6533": {
      "op": "uncover 2",
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)",
        "aggregate%extract_uint16%37#0",
        "aggregate%extract_uint16%38#0"
      ]
    },
    "6535": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%25#0",
        "aggregate%substring3%26#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%26#0"
      ]
    },
    "6536": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%item0%4#0"
      ]
    },
    "6539": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0"
      ]
    },
    "6541": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)"
      ]
    },
    "6542": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)",
        "2"
      ]
    },
    "6543": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%39#0",
        "aggregate%item0%4#0",
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%39#0"
      ]
    },
    "6544": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%39#0",
        "aggregate%substring3%25#0"
      ]
    },
    "6546": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%39#0",
        "aggregate%substring3%25#0",
        "aggregate%substring3%25#0 (copy)"
      ]
    },
    "6547": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%39#0",
        "aggregate%item0%4#0",
        "aggregate%len%15#0",
        "aggregate%substring3%25#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%39#0",
        "aggregate%substring3%25#0",
        "aggregate%len%15#0"
      ]
    },
    "6548": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%39#0",
        "aggregate%len%15#0",
        "aggregate%substring3%25#0"
      ]
    },
    "6550": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%len%15#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%39#0"
      ]
    },
    "6552": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%25#0",
        "aggregate%extract_uint16%39#0",
        "aggregate%len%15#0"
      ]
    },
    "6554": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%substring3%27#0"
      ]
    },
    "6555": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6557": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ]
    },
    "6558": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)",
        "2"
      ]
    },
    "6559": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%40#0",
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%40#0"
      ]
    },
    "6560": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%extract_uint16%40#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6562": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%extract_uint16%40#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0 (copy)"
      ]
    },
    "6563": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%40#0",
        "aggregate%item0%4#0",
        "aggregate%len%16#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%extract_uint16%40#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%len%16#0"
      ]
    },
    "6564": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%extract_uint16%40#0",
        "aggregate%len%16#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0"
      ]
    },
    "6566": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%len%16#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%40#0"
      ]
    },
    "6568": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%2#0",
        "aggregate%extract_uint16%40#0",
        "aggregate%len%16#0"
      ]
    },
    "6570": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ]
    },
    "6571": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ]
    },
    "6572": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)",
        "0"
      ]
    },
    "6573": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)",
        "0",
        "8"
      ]
    },
    "6574": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%extract%4#0"
      ]
    },
    "6575": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0",
        "aggregate%item0%5#0"
      ]
    },
    "6576": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%28#0"
      ]
    },
    "6578": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ]
    },
    "6579": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)",
        "8"
      ]
    },
    "6580": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)",
        "8",
        "8"
      ]
    },
    "6581": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%28#0",
        "aggregate%extract%5#0"
      ]
    },
    "6582": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%28#0"
      ]
    },
    "6584": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ]
    },
    "6585": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)",
        "16"
      ]
    },
    "6587": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%28#0",
        "aggregate%extract_uint16%41#0"
      ]
    },
    "6588": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%substring3%28#0"
      ]
    },
    "6590": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%substring3%28#0",
        "aggregate%substring3%28#0 (copy)"
      ]
    },
    "6591": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%len%17#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%28#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%substring3%28#0",
        "aggregate%len%17#0"
      ]
    },
    "6592": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%len%17#0",
        "aggregate%substring3%28#0"
      ]
    },
    "6594": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%len%17#0",
        "aggregate%substring3%28#0",
        "aggregate%extract_uint16%41#0"
      ]
    },
    "6596": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%28#0",
        "aggregate%extract_uint16%41#0",
        "aggregate%len%17#0"
      ]
    },
    "6598": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%substring3%27#0",
        "aggregate%substring3%29#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%substring3%29#0"
      ]
    },
    "6599": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%4#0",
        "aggregate%item0%5#0",
        "aggregate%item2%2#0",
        "aggregate%substring3%27#0"
      ],
      "stack_out": [
        "aggregate%item0%4#0",
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%item2%2#0"
      ]
    },
    "6602": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "aggregate%item2%2#0",
        "aggregate%item0%4#0"
      ]
    },
    "6604": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%5#0",
        "aggregate%item2%2#0",
        "aggregate%substring3%27#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "aggregate%substring3%27#0",
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "tmp%58#0",
        "aggregate%item2%2#0"
      ]
    },
    "6606": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "tmp%58#0",
        "aggregate%item2%2#0",
        "aggregate%substring3%27#0"
      ]
    },
    "6608": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%5#0",
        "aggregate%item2%2#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "aggregate%item0%5#0",
        "aggregate%extract%5#0",
        "tmp%59#0",
        "tmp%58#0",
        "aggregate%item2%2#0"
      ]
    },
    "6610": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%extract%5#0",
        "tmp%59#0",
        "tmp%58#0",
        "aggregate%item2%2#0",
        "aggregate%item0%5#0"
      ]
    },
    "6612": {
      "op": "cover 3",
      "defined_out": [
        "aggregate%item2%2#0",
        "tmp%58#0",
        "tmp%59#0",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "tmp%60#0",
        "tmp%59#0",
        "tmp%58#0",
        "aggregate%item2%2#0"
      ]
    },
    "6614": {
      "op": "cover 4",
      "defined_out": [
        "tmp%58#0",
        "tmp%59#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%61#0",
        "tmp%60#0",
        "tmp%59#0",
        "tmp%58#0"
      ]
    },
    "6616": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "tmp%59#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result.0.0#0",
        "tmp%62#0",
        "tmp%61#0",
        "tmp%60#0",
        "tmp%59#0"
      ]
    },
    "6618": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result.0.1#0",
        "result.0.0#0",
        "tmp%62#0",
        "tmp%61#0",
        "tmp%60#0"
      ]
    },
    "6620": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%62#0",
        "tmp%61#0"
      ]
    },
    "6622": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "tmp%62#0"
      ]
    },
    "6624": {
      "op": "cover 4",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0"
      ]
    },
    "6626": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0"
      ]
    },
    "6628": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0"
      ]
    },
    "6630": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0"
      ]
    },
    "6632": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0"
      ]
    },
    "6634": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "6636": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1b\""
      ]
    },
    "6647": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%63#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%63#0"
      ]
    },
    "6648": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "6649": {
      "op": "bytec 60 // \"echo: s2b\"",
      "defined_out": [
        "\"echo: s2b\"",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "\"echo: s2b\""
      ]
    },
    "6651": {
      "op": "len",
      "defined_out": [
        "aggregate%length%11#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length%11#0"
      ]
    },
    "6652": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%26#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%as_bytes%26#0"
      ]
    },
    "6653": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%11#0",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%11#0"
      ]
    },
    "6656": {
      "op": "bytec 60 // \"echo: s2b\"",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "aggregate%length_uint16%11#0",
        "\"echo: s2b\""
      ]
    },
    "6658": {
      "op": "concat",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%64#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%64#0"
      ]
    },
    "6659": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%65#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%65#0"
      ]
    },
    "6660": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "6661": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "bytez#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "12"
      ]
    },
    "6663": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%66#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%66#0"
      ]
    },
    "6664": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "6665": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0",
        "0x0000000000000016"
      ]
    },
    "6675": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%67#0"
      ]
    },
    "6676": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "6677": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a203362"
      ]
    },
    "6687": {
      "op": "==",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "6688": {
      "op": "assert",
      "stack_out": []
    },
    "6689": {
      "retsub": true,
      "op": "retsub"
    },
    "6690": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6693": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_block@0"
    },
    "6696": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "6697": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6699": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6701": {
      "op": "bytec 34 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "6703": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6705": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6707": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6709": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6710": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6712": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@1"
    },
    "6715": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "6716": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "6718": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6719": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "6722": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "6723": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "6724": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "6725": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "6726": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "6727": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6729": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ]
    },
    "6732": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "6733": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%2#0"
      ]
    },
    "6734": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "6735": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "6736": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "6738": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "6739": {
      "op": "assert",
      "stack_out": []
    },
    "6740": {
      "op": "itxn_begin"
    },
    "6741": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "6743": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6745": {
      "op": "bytec 34 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "6747": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6749": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6751": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6753": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6754": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6756": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@2"
    },
    "6759": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "6760": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "6762": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "6763": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "6766": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "6767": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0",
        "len%1#0"
      ]
    },
    "6768": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0",
        "len%1#0",
        "8"
      ]
    },
    "6769": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0",
        "eq%1#0"
      ]
    },
    "6770": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "6771": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "6773": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%6#0"
      ]
    },
    "6776": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "6777": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%7#0"
      ]
    },
    "6778": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "6779": {
      "op": "bytec 61 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x000000000000002a"
      ]
    },
    "6781": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "6782": {
      "op": "assert",
      "stack_out": []
    },
    "6783": {
      "op": "itxn_begin"
    },
    "6784": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "6786": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "6788": {
      "op": "bytec 34 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "6790": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6792": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6794": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6796": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6797": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6799": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@3"
    },
    "6802": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "6803": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "6805": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "6806": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ]
    },
    "6809": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "len%2#0"
      ]
    },
    "6810": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%2#0",
        "len%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "8"
      ]
    },
    "6811": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "eq%2#0"
      ]
    },
    "6812": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "6813": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "6816": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "6817": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "6818": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "6819": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "6821": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "6822": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "6825": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "6826": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "len%3#0"
      ]
    },
    "6827": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "len%3#0",
        "8"
      ]
    },
    "6828": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0",
        "eq%3#0"
      ]
    },
    "6829": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "as_Encoded(uint64)%3#0"
      ]
    },
    "6830": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(uint64)%3#0",
        "awst_tmp%3#0"
      ]
    },
    "6832": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%14#0"
      ]
    },
    "6835": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "6836": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%3#0",
        "tmp%15#0"
      ]
    },
    "6837": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "6838": {
      "op": "bytec 61 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x000000000000002a"
      ]
    },
    "6840": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "6841": {
      "op": "assert",
      "stack_out": []
    },
    "6842": {
      "retsub": true,
      "op": "retsub"
    },
    "6843": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "6846": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_block@0"
    },
    "6849": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "6850": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "6851": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "6852": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "6853": {
      "op": "uncover 1",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "6855": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "6856": {
      "op": "bytec 8 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "\"log 1\""
      ]
    },
    "6858": {
      "op": "len",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%length%0#0"
      ]
    },
    "6859": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "6860": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "6863": {
      "op": "bytec 8 // \"log 1\"",
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0",
        "\"log 1\""
      ]
    },
    "6865": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "6866": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "10"
      ]
    },
    "6868": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "6869": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "6872": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%0#0"
      ]
    },
    "6874": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "6876": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "6877": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "6879": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "6880": {
      "op": "intc_2 // 1",
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "6881": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "6882": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64)%1#0",
        "0x"
      ]
    },
    "6883": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "6885": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0"
      ]
    },
    "6886": {
      "op": "bytec 8 // \"log 1\"",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "\"log 1\""
      ]
    },
    "6888": {
      "op": "len",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0"
      ]
    },
    "6889": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "6890": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "6893": {
      "op": "bytec 8 // \"log 1\"",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "\"log 1\""
      ]
    },
    "6895": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "6896": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "10"
      ]
    },
    "6898": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "6899": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "6902": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "6904": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "6906": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%3#0"
      ]
    },
    "6907": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "6909": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "6910": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6912": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "6914": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6916": {
      "op": "bytec 62 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "6918": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "6920": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "6922": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "6924": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "6926": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "6928": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "6929": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "6931": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_next_txn@1"
    },
    "6934": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "6935": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "6937": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "6938": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "6941": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "6942": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0"
      ]
    },
    "6943": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0",
        "1"
      ]
    },
    "6944": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "6945": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "as_Encoded(bool8)%0#0"
      ]
    },
    "6946": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "awst_tmp%0#0"
      ]
    },
    "6948": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%3#0"
      ]
    },
    "6951": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(bool8)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "6952": {
      "op": "==",
      "defined_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "tmp%4#0"
      ]
    },
    "6953": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(bool8)%0#0"
      ]
    },
    "6954": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "6955": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "6956": {
      "op": "assert",
      "stack_out": []
    },
    "6957": {
      "op": "itxn_begin"
    },
    "6958": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "6959": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "6960": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "0x"
      ]
    },
    "6961": {
      "op": "uncover 1",
      "stack_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "6963": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0"
      ]
    },
    "6964": {
      "op": "bytec 63 // \"log 2\"",
      "defined_out": [
        "\"log 2\"",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "\"log 2\""
      ]
    },
    "6966": {
      "op": "len",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%length%2#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%length%2#0"
      ]
    },
    "6967": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "6968": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "6971": {
      "op": "bytec 63 // \"log 2\"",
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%length_uint16%2#0",
        "\"log 2\""
      ]
    },
    "6973": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+utf8[])%2#0"
      ]
    },
    "6974": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "10"
      ]
    },
    "6976": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%5#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "6977": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%2#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "6980": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0",
        "aggregate%head%4#0"
      ]
    },
    "6982": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "6984": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%5#0"
      ]
    },
    "6985": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%as_Encoded(len+utf8[])%2#0"
      ]
    },
    "6987": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "6988": {
      "op": "intc_2 // 1",
      "stack_out": [
        "tmp%6#0",
        "1"
      ]
    },
    "6989": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "6990": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_Encoded(uint64)%3#0",
        "0x"
      ]
    },
    "6991": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%6#0",
        "0x",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "6993": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0"
      ]
    },
    "6994": {
      "op": "bytec 8 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "aggregate%head%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "\"log 1\""
      ]
    },
    "6996": {
      "op": "len",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%length%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%length%3#0"
      ]
    },
    "6997": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "aggregate%head%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "6998": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%length_uint16%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "7001": {
      "op": "bytec 8 // \"log 1\"",
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%length_uint16%3#0",
        "\"log 1\""
      ]
    },
    "7003": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%head%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0"
      ]
    },
    "7004": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "10"
      ]
    },
    "7006": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%as_bytes%7#0",
        "aggregate%head%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "7007": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "7010": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%6#0"
      ]
    },
    "7012": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "7014": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%head%7#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%3#0",
        "aggregate%head%7#0"
      ]
    },
    "7015": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%6#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(len+utf8[])%3#0"
      ]
    },
    "7017": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%7#0"
      ]
    },
    "7018": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7020": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "7022": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7024": {
      "op": "bytec 62 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "7026": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7028": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "7030": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "7032": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "7034": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "7036": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "7037": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "7039": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_next_txn@2"
    },
    "7042": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "7043": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "7045": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7046": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "7049": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "7050": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "len%1#0"
      ]
    },
    "7051": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "len%1#0",
        "1"
      ]
    },
    "7052": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0",
        "eq%1#0"
      ]
    },
    "7053": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "defined_out": [
        "as_Encoded(bool8)%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "as_Encoded(bool8)%1#0"
      ]
    },
    "7054": {
      "op": "uncover 1",
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "awst_tmp%1#0"
      ]
    },
    "7056": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(bool8)%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "tmp%9#0"
      ]
    },
    "7059": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(bool8)%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "7060": {
      "op": "==",
      "defined_out": [
        "as_Encoded(bool8)%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "tmp%10#0"
      ]
    },
    "7061": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "as_Encoded(bool8)%1#0"
      ]
    },
    "7062": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(bool8)%1#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%1#0",
        "0"
      ]
    },
    "7063": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "7064": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "7065": {
      "op": "assert",
      "stack_out": []
    },
    "7066": {
      "retsub": true,
      "op": "retsub"
    },
    "7067": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "7070": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct_block@0"
    },
    "7073": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct_block@0",
      "stack_in": [],
      "op": "bytec 8 // \"log 1\"",
      "defined_out": [
        "\"log 1\""
      ],
      "stack_out": [
        "\"log 1\""
      ]
    },
    "7075": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "7076": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "7077": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "7080": {
      "op": "bytec 8 // \"log 1\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"log 1\""
      ]
    },
    "7082": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7083": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x"
      ]
    },
    "7084": {
      "op": "bytec 5 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "7086": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0"
      ]
    },
    "7087": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "10"
      ]
    },
    "7089": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "7090": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "7093": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%1#0"
      ]
    },
    "7094": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%0#0"
      ]
    },
    "7096": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7097": {
      "op": "dup",
      "defined_out": [
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "log#0"
      ]
    },
    "7098": {
      "op": "itxn_begin",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7099": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "7101": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7103": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "7109": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7111": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "log#0"
      ]
    },
    "7113": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "appl"
      ]
    },
    "7115": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "log#0"
      ]
    },
    "7117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "log#0",
        "0"
      ]
    },
    "7118": {
      "op": "itxn_field Fee",
      "stack_out": [
        "log#0"
      ]
    },
    "7120": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct_next_txn@1"
    },
    "7123": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct_next_txn@1",
      "stack_in": [
        "log#0"
      ],
      "op": "itxn_submit"
    },
    "7124": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0"
      ]
    },
    "7126": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "7127": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "7130": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7131": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "8"
      ]
    },
    "7132": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0"
      ]
    },
    "7133": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "awst_tmp%0#0",
        "extract_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "extract_uint16%0#0",
        "10"
      ]
    },
    "7135": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "7136": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "7137": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7138": {
      "op": "intc_3 // 8",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "8"
      ]
    },
    "7139": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "7140": {
      "op": "cover 1",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "7142": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7143": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "tmp%2#0",
        "aggregate%len%0#0"
      ]
    },
    "7144": {
      "op": "cover 1",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%2#0"
      ]
    },
    "7146": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7147": {
      "op": "uncover 3",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "aggregate%len%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "7149": {
      "op": "uncover 3",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "7151": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "7152": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "0"
      ]
    },
    "7153": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0"
      ]
    },
    "7154": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0",
        "length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "length%0#0",
        "1"
      ]
    },
    "7155": {
      "op": "*",
      "defined_out": [
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0"
      ]
    },
    "7156": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "awst_tmp%0#0",
        "mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "mul%0#0",
        "2"
      ]
    },
    "7157": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "7158": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%0#0",
        "10"
      ]
    },
    "7160": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "7161": {
      "op": "dig 1",
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7163": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%0#0"
      ]
    },
    "7164": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "7165": {
      "error": "invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "op": "assert // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "7166": {
      "op": "uncover 1",
      "stack_out": [
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "awst_tmp%0#0"
      ]
    },
    "7168": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%4#0"
      ]
    },
    "7171": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "7172": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%0#0",
        "tmp%5#0"
      ]
    },
    "7173": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "log#0",
        "result#0"
      ]
    },
    "7174": {
      "op": "itxn LastLog",
      "defined_out": [
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "result#0",
        "txn.LastLog#0"
      ]
    },
    "7176": {
      "op": "cover 1",
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "result#0"
      ]
    },
    "7178": {
      "op": "frame_dig 0",
      "defined_out": [
        "log#0",
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "result#0",
        "log#0"
      ]
    },
    "7180": {
      "op": "dup",
      "defined_out": [
        "log#0",
        "log#0 (copy)",
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "result#0",
        "log#0 (copy)",
        "log#0 (copy)"
      ]
    },
    "7181": {
      "op": "cover 3",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "result#0",
        "log#0 (copy)"
      ]
    },
    "7183": {
      "op": "==",
      "defined_out": [
        "log#0",
        "tmp%6#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%6#0"
      ]
    },
    "7184": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0"
      ]
    },
    "7185": {
      "op": "dup",
      "defined_out": [
        "log#0",
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ]
    },
    "7186": {
      "op": "extract 4 0",
      "defined_out": [
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0"
      ]
    },
    "7189": {
      "op": "dup",
      "defined_out": [
        "log#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "7190": {
      "op": "intc_3 // 8",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "8"
      ]
    },
    "7191": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%1#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "extract_uint16%1#0"
      ]
    },
    "7192": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "extract_uint16%1#0",
        "10"
      ]
    },
    "7194": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "eq%2#0"
      ]
    },
    "7195": {
      "error": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 1 of (uint64,(len+utf8[]))",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0"
      ]
    },
    "7196": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "7197": {
      "op": "intc_3 // 8",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "8"
      ]
    },
    "7198": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "7199": {
      "op": "cover 1",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%extract_uint16%1#0",
        "tmp%7#0"
      ]
    },
    "7201": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%extract_uint16%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "7202": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%extract_uint16%1#0",
        "tmp%7#0",
        "aggregate%len%1#0"
      ]
    },
    "7203": {
      "op": "cover 1",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "tmp%7#0"
      ]
    },
    "7205": {
      "op": "dup",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "7206": {
      "op": "uncover 3",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "aggregate%len%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "7208": {
      "op": "uncover 3",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "7210": {
      "op": "substring3",
      "defined_out": [
        "log#0",
        "tmp%7#0",
        "tmp%8#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "7211": {
      "op": "intc_0 // 0",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "tmp%8#0",
        "0"
      ]
    },
    "7212": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%1#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "length%1#0"
      ]
    },
    "7213": {
      "op": "intc_2 // 1",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "length%1#0",
        "1"
      ]
    },
    "7214": {
      "op": "*",
      "defined_out": [
        "log#0",
        "mul%1#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "mul%1#0"
      ]
    },
    "7215": {
      "op": "intc_1 // 2",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "mul%1#0",
        "2"
      ]
    },
    "7216": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "add%2#0"
      ]
    },
    "7217": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "add%2#0",
        "10"
      ]
    },
    "7219": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "add%3#0"
      ]
    },
    "7220": {
      "op": "dig 1",
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "add%3#0",
        "tmp%7#0 (copy)"
      ]
    },
    "7222": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "len%1#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "add%3#0",
        "len%1#0"
      ]
    },
    "7223": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "log#0",
        "tmp%7#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "tmp%7#0",
        "eq%3#0"
      ]
    },
    "7224": {
      "error": "invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "op": "assert // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "log#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "txn.LastLog#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "7225": {
      "op": "uncover 1",
      "stack_out": [
        "log#0",
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "txn.LastLog#0"
      ]
    },
    "7227": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "log#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%9#0"
      ]
    },
    "7230": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "log#0",
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "7231": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "log#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "log#0",
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%10#0"
      ]
    },
    "7232": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "log#0",
        "log#0",
        "as_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "7233": {
      "op": "==",
      "defined_out": [
        "log#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%11#0"
      ]
    },
    "7234": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "log#0"
      ]
    },
    "7235": {
      "retsub": true,
      "op": "retsub"
    },
    "7236": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "params": {
        "app_to_call#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "7239": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_block@0"
    },
    "7242": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_block@0",
      "stack_in": [],
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "7244": {
      "op": "dup",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "app#0"
      ]
    },
    "7245": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "app#0",
        "tmp%1#0"
      ]
    },
    "7247": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "app#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "7248": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7250": {
      "op": "itxn_begin"
    },
    "7251": {
      "op": "cover 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "7253": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "7255": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "7257": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "7259": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "7261": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ]
    },
    "7263": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7265": {
      "op": "bytec 35 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "7267": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7269": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x00"
      ]
    },
    "7271": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7273": {
      "op": "bytec 12 // 0x01",
      "defined_out": [
        "0x01",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7275": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7277": {
      "op": "bytec 12 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7279": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7281": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7283": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7286": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7288": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@1"
    },
    "7291": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@1",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7292": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0"
      ]
    },
    "7294": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "7295": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "7298": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "7299": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0"
      ]
    },
    "7300": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%0#0",
        "len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0",
        "48"
      ]
    },
    "7302": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "eq%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "7303": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ]
    },
    "7304": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "awst_tmp%0#0"
      ]
    },
    "7306": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%3#0"
      ]
    },
    "7309": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "7310": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "tmp%4#0"
      ]
    },
    "7311": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ]
    },
    "7312": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)"
      ]
    },
    "7313": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)",
        "0"
      ]
    },
    "7314": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "7315": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "7316": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "7317": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ]
    },
    "7319": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)"
      ]
    },
    "7320": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)",
        "8"
      ]
    },
    "7321": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "7322": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "7323": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "7324": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ]
    },
    "7326": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "16"
      ]
    },
    "7328": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "as_Encoded(uint64,uint64,uint8[32])%0#0",
        "16",
        "32"
      ]
    },
    "7330": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%0#0",
        "aggregate%item1%0#0",
        "aggregate%extract%2#0"
      ]
    },
    "7331": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%0#0",
        "aggregate%extract%2#0",
        "aggregate%item0%0#0"
      ]
    },
    "7333": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%extract%2#0"
      ]
    },
    "7335": {
      "op": "cover 2",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "7337": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "7339": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%7#0"
      ]
    },
    "7341": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7343": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7345": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%8#0"
      ]
    },
    "7346": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0"
      ]
    },
    "7348": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7350": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "result.1#0",
        "result.2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "7351": {
      "op": "cover 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%8#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "7353": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "7354": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%10#0"
      ]
    },
    "7355": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%10#0",
        "result.2#0"
      ]
    },
    "7357": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%10#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7359": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "result.2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%10#0",
        "result.2#0",
        "acc#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "7360": {
      "op": "cover 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%10#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "7362": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "7363": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%12#0"
      ]
    },
    "7364": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7365": {
      "op": "itxn_begin"
    },
    "7366": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "7368": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%13#0"
      ]
    },
    "7369": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%13#0",
        "app#0"
      ]
    },
    "7371": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "7372": {
      "op": "uncover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "7374": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%15#0",
        "tmp%14#0"
      ]
    },
    "7376": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "tmp%15#0"
      ]
    },
    "7378": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7380": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "7382": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7384": {
      "op": "bytec 36 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "acc#0",
        "app#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "7386": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7388": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "7390": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "7392": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7394": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7396": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7399": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7401": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@2"
    },
    "7404": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@2",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7405": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0"
      ]
    },
    "7407": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "7408": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "tmp%16#0"
      ]
    },
    "7411": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "7412": {
      "op": "len",
      "defined_out": [
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "len%1#0"
      ]
    },
    "7413": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%1#0",
        "len%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "len%1#0",
        "48"
      ]
    },
    "7415": {
      "op": "==",
      "defined_out": [
        "awst_tmp%1#0",
        "eq%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "tmp%16#0",
        "eq%1#0"
      ]
    },
    "7416": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ]
    },
    "7417": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "awst_tmp%1#0"
      ]
    },
    "7419": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%17#0"
      ]
    },
    "7422": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "7423": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "tmp%18#0"
      ]
    },
    "7424": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ]
    },
    "7425": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)"
      ]
    },
    "7426": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)",
        "0"
      ]
    },
    "7427": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "7428": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "aggregate%extract%3#0"
      ]
    },
    "7429": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "7430": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ]
    },
    "7432": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)"
      ]
    },
    "7433": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)",
        "8"
      ]
    },
    "7434": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0 (copy)",
        "8",
        "8"
      ]
    },
    "7435": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%4#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "aggregate%extract%4#0"
      ]
    },
    "7436": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "aggregate%item1%1#0"
      ]
    },
    "7437": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ]
    },
    "7439": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "16"
      ]
    },
    "7441": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "as_Encoded(uint64,uint64,uint8[32])%1#0",
        "16",
        "32"
      ]
    },
    "7443": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%1#0",
        "aggregate%item1%1#0",
        "aggregate%extract%5#0"
      ]
    },
    "7444": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%1#0",
        "aggregate%extract%5#0",
        "aggregate%item0%1#0"
      ]
    },
    "7446": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%5#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%20#0",
        "tmp%19#0",
        "aggregate%extract%5#0"
      ]
    },
    "7448": {
      "op": "cover 2",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0"
      ]
    },
    "7450": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%21#0",
        "tmp%20#0"
      ]
    },
    "7452": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%21#0"
      ]
    },
    "7454": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7456": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7458": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%22#0"
      ]
    },
    "7459": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0"
      ]
    },
    "7461": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7463": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "result.1#0",
        "result.2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "7464": {
      "op": "cover 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%22#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "7466": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "7467": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%24#0"
      ]
    },
    "7468": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%24#0",
        "result.2#0"
      ]
    },
    "7470": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%24#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7472": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "result.2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%24#0",
        "result.2#0",
        "acc#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "7473": {
      "op": "cover 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%24#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "7475": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "7476": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%26#0"
      ]
    },
    "7477": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7478": {
      "op": "itxn_begin",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0"
      ]
    },
    "7479": {
      "op": "uncover 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0"
      ]
    },
    "7481": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0",
        "inner_txn_params%2%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0",
        "inner_txn_params%2%%param_Assets_idx_0#0"
      ]
    },
    "7483": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0",
        "inner_txn_params%2%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0",
        "inner_txn_params%2%%param_Assets_idx_0#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "7485": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0",
        "inner_txn_params%2%%param_Assets_idx_0#0"
      ]
    },
    "7487": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0",
        "inner_txn_params%2%%param_Applications_idx_0#0"
      ]
    },
    "7489": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%2%%param_Accounts_idx_0#0"
      ]
    },
    "7491": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7493": {
      "op": "bytec 35 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "7495": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7497": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x00"
      ]
    },
    "7499": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7501": {
      "op": "bytec 12 // 0x01",
      "defined_out": [
        "0x01",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7503": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7505": {
      "op": "bytec 12 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7507": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7509": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7511": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7513": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7514": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7516": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@3"
    },
    "7519": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@3",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7520": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0"
      ]
    },
    "7522": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "7523": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "tmp%27#0"
      ]
    },
    "7526": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "7527": {
      "op": "len",
      "defined_out": [
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "tmp%27#0",
        "len%2#0"
      ]
    },
    "7528": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%2#0",
        "len%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "tmp%27#0",
        "len%2#0",
        "48"
      ]
    },
    "7530": {
      "op": "==",
      "defined_out": [
        "awst_tmp%2#0",
        "eq%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "tmp%27#0",
        "eq%2#0"
      ]
    },
    "7531": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ]
    },
    "7532": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "awst_tmp%2#0"
      ]
    },
    "7534": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%28#0"
      ]
    },
    "7537": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "7538": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "tmp%29#0"
      ]
    },
    "7539": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ]
    },
    "7540": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)"
      ]
    },
    "7541": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)",
        "0"
      ]
    },
    "7542": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "7543": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%6#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "aggregate%extract%6#0"
      ]
    },
    "7544": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "aggregate%item0%2#0"
      ]
    },
    "7545": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ]
    },
    "7547": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)"
      ]
    },
    "7548": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)",
        "8"
      ]
    },
    "7549": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0 (copy)",
        "8",
        "8"
      ]
    },
    "7550": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%7#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "aggregate%extract%7#0"
      ]
    },
    "7551": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "aggregate%item1%2#0"
      ]
    },
    "7552": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ]
    },
    "7554": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "16"
      ]
    },
    "7556": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "as_Encoded(uint64,uint64,uint8[32])%2#0",
        "16",
        "32"
      ]
    },
    "7558": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%8#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%2#0",
        "aggregate%item1%2#0",
        "aggregate%extract%8#0"
      ]
    },
    "7559": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%2#0",
        "aggregate%extract%8#0",
        "aggregate%item0%2#0"
      ]
    },
    "7561": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%8#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%31#0",
        "tmp%30#0",
        "aggregate%extract%8#0"
      ]
    },
    "7563": {
      "op": "cover 2",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%32#0",
        "tmp%31#0",
        "tmp%30#0"
      ]
    },
    "7565": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%32#0",
        "tmp%31#0"
      ]
    },
    "7567": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%32#0"
      ]
    },
    "7569": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7571": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7573": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%33#0"
      ]
    },
    "7574": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0"
      ]
    },
    "7576": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7578": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "result.1#0",
        "result.2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "7579": {
      "op": "cover 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%33#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "7581": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "7582": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%35#0"
      ]
    },
    "7583": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%35#0",
        "result.2#0"
      ]
    },
    "7585": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%35#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7587": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "result.2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%35#0",
        "result.2#0",
        "acc#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "7588": {
      "op": "cover 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%35#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "7590": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "7591": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%37#0"
      ]
    },
    "7592": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7593": {
      "op": "itxn_begin"
    },
    "7594": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "7596": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%38#0"
      ]
    },
    "7597": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%38#0",
        "app#0"
      ]
    },
    "7599": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "7600": {
      "op": "uncover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "7602": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%40#0",
        "tmp%39#0"
      ]
    },
    "7604": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "tmp%40#0"
      ]
    },
    "7606": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7608": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "7610": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7612": {
      "op": "bytec 36 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "acc#0",
        "app#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "7614": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7616": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "7618": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "7620": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7622": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7624": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7627": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7629": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@4"
    },
    "7632": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@4",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7633": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0"
      ]
    },
    "7635": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "7636": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "tmp%41#0"
      ]
    },
    "7639": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%41#0",
        "tmp%41#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "tmp%41#0",
        "tmp%41#0 (copy)"
      ]
    },
    "7640": {
      "op": "len",
      "defined_out": [
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "tmp%41#0",
        "len%3#0"
      ]
    },
    "7641": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%3#0",
        "len%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "tmp%41#0",
        "len%3#0",
        "48"
      ]
    },
    "7643": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "eq%3#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "tmp%41#0",
        "eq%3#0"
      ]
    },
    "7644": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ]
    },
    "7645": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "awst_tmp%3#0"
      ]
    },
    "7647": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%42#0"
      ]
    },
    "7650": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%42#0",
        "0x151f7c75"
      ]
    },
    "7651": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "tmp%43#0"
      ]
    },
    "7652": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ]
    },
    "7653": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)"
      ]
    },
    "7654": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)",
        "0"
      ]
    },
    "7655": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "7656": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%9#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "aggregate%extract%9#0"
      ]
    },
    "7657": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "aggregate%item0%3#0"
      ]
    },
    "7658": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ]
    },
    "7660": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)"
      ]
    },
    "7661": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)",
        "8"
      ]
    },
    "7662": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0 (copy)",
        "8",
        "8"
      ]
    },
    "7663": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%10#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "aggregate%extract%10#0"
      ]
    },
    "7664": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "aggregate%item1%3#0"
      ]
    },
    "7665": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ]
    },
    "7667": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "16"
      ]
    },
    "7669": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "as_Encoded(uint64,uint64,uint8[32])%3#0",
        "16",
        "32"
      ]
    },
    "7671": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%11#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%3#0",
        "aggregate%item1%3#0",
        "aggregate%extract%11#0"
      ]
    },
    "7672": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%3#0",
        "aggregate%extract%11#0",
        "aggregate%item0%3#0"
      ]
    },
    "7674": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%11#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%45#0",
        "tmp%44#0",
        "aggregate%extract%11#0"
      ]
    },
    "7676": {
      "op": "cover 2",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%46#0",
        "tmp%45#0",
        "tmp%44#0"
      ]
    },
    "7678": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%45#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%46#0",
        "tmp%45#0"
      ]
    },
    "7680": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%46#0"
      ]
    },
    "7682": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7684": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7686": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%47#0"
      ]
    },
    "7687": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0"
      ]
    },
    "7689": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7691": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "result.1#0",
        "result.2#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "7692": {
      "op": "cover 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%47#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "7694": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "7695": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%49#0"
      ]
    },
    "7696": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%49#0",
        "result.2#0"
      ]
    },
    "7698": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%49#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7700": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "result.2#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%49#0",
        "result.2#0",
        "acc#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "7701": {
      "op": "cover 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%49#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "7703": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "7704": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%51#0"
      ]
    },
    "7705": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7706": {
      "op": "itxn_begin",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0"
      ]
    },
    "7707": {
      "op": "uncover 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0"
      ]
    },
    "7709": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0",
        "inner_txn_params%4%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0",
        "inner_txn_params%4%%param_Assets_idx_0#0"
      ]
    },
    "7711": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0",
        "inner_txn_params%4%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0",
        "inner_txn_params%4%%param_Assets_idx_0#0",
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "7713": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0",
        "inner_txn_params%4%%param_Assets_idx_0#0"
      ]
    },
    "7715": {
      "op": "itxn_field Assets",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0",
        "inner_txn_params%4%%param_Applications_idx_0#0"
      ]
    },
    "7717": {
      "op": "itxn_field Applications",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%4%%param_Accounts_idx_0#0"
      ]
    },
    "7719": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7721": {
      "op": "bytec 35 // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "7723": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7725": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x00"
      ]
    },
    "7727": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7729": {
      "op": "bytec 12 // 0x01",
      "defined_out": [
        "0x01",
        "acc#0",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7731": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7733": {
      "op": "bytec 12 // 0x01",
      "stack_out": [
        "app#0",
        "acc#0",
        "0x01"
      ]
    },
    "7735": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7737": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7739": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7741": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7742": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7744": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@5"
    },
    "7747": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@5",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7748": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0"
      ]
    },
    "7750": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "7751": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "tmp%52#0"
      ]
    },
    "7754": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%52#0",
        "tmp%52#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "tmp%52#0",
        "tmp%52#0 (copy)"
      ]
    },
    "7755": {
      "op": "len",
      "defined_out": [
        "awst_tmp%4#0",
        "len%4#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "tmp%52#0",
        "len%4#0"
      ]
    },
    "7756": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%4#0",
        "len%4#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "tmp%52#0",
        "len%4#0",
        "48"
      ]
    },
    "7758": {
      "op": "==",
      "defined_out": [
        "awst_tmp%4#0",
        "eq%4#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "tmp%52#0",
        "eq%4#0"
      ]
    },
    "7759": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ]
    },
    "7760": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "awst_tmp%4#0"
      ]
    },
    "7762": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%53#0"
      ]
    },
    "7765": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%53#0",
        "0x151f7c75"
      ]
    },
    "7766": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "tmp%54#0"
      ]
    },
    "7767": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ]
    },
    "7768": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)"
      ]
    },
    "7769": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)",
        "0"
      ]
    },
    "7770": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)",
        "0",
        "8"
      ]
    },
    "7771": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%12#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "aggregate%extract%12#0"
      ]
    },
    "7772": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "aggregate%item0%4#0"
      ]
    },
    "7773": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ]
    },
    "7775": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)"
      ]
    },
    "7776": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)",
        "8"
      ]
    },
    "7777": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0 (copy)",
        "8",
        "8"
      ]
    },
    "7778": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%13#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "aggregate%extract%13#0"
      ]
    },
    "7779": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "aggregate%item1%4#0"
      ]
    },
    "7780": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ]
    },
    "7782": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "16"
      ]
    },
    "7784": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "as_Encoded(uint64,uint64,uint8[32])%4#0",
        "16",
        "32"
      ]
    },
    "7786": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%14#0",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%4#0",
        "aggregate%item1%4#0",
        "aggregate%extract%14#0"
      ]
    },
    "7787": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%4#0",
        "aggregate%extract%14#0",
        "aggregate%item0%4#0"
      ]
    },
    "7789": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%14#0",
        "tmp%55#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%56#0",
        "tmp%55#0",
        "aggregate%extract%14#0"
      ]
    },
    "7791": {
      "op": "cover 2",
      "defined_out": [
        "tmp%55#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%57#0",
        "tmp%56#0",
        "tmp%55#0"
      ]
    },
    "7793": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%57#0",
        "tmp%56#0"
      ]
    },
    "7795": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%57#0"
      ]
    },
    "7797": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7799": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7801": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%58#0"
      ]
    },
    "7802": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0"
      ]
    },
    "7804": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7806": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "result.1#0",
        "result.2#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "7807": {
      "op": "cover 4",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%58#0",
        "result.1#0",
        "app#0 (copy)"
      ]
    },
    "7809": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "7810": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%60#0"
      ]
    },
    "7811": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%60#0",
        "result.2#0"
      ]
    },
    "7813": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%60#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7815": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)",
        "app#0",
        "result.2#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "tmp%60#0",
        "result.2#0",
        "acc#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "7816": {
      "op": "cover 3",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%60#0",
        "result.2#0",
        "acc#0 (copy)"
      ]
    },
    "7818": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "7819": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%62#0"
      ]
    },
    "7820": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0"
      ]
    },
    "7821": {
      "op": "itxn_begin"
    },
    "7822": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "asset#0 (copy)"
      ]
    },
    "7824": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "app#0",
        "acc#0",
        "tmp%63#0"
      ]
    },
    "7825": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%63#0",
        "app#0"
      ]
    },
    "7827": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "acc#0",
        "tmp%63#0",
        "tmp%64#0"
      ]
    },
    "7828": {
      "op": "uncover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "tmp%64#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "tmp%64#0",
        "tmp%65#0"
      ]
    },
    "7830": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "tmp%65#0",
        "tmp%64#0"
      ]
    },
    "7832": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "tmp%65#0"
      ]
    },
    "7834": {
      "op": "cover 2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7836": {
      "op": "frame_dig -2",
      "defined_out": [
        "acc#0",
        "app#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%5%%param_ApplicationID_idx_0#0"
      ]
    },
    "7838": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7840": {
      "op": "bytec 36 // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "acc#0",
        "app#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "7842": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "7844": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "7846": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0",
        "inner_txn_params%5%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "7848": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7850": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "acc#0",
        "app#0",
        "appl"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "appl"
      ]
    },
    "7852": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7854": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "acc#0",
        "0"
      ]
    },
    "7855": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7857": {
      "op": "b test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@6"
    },
    "7860": {
      "block": "test_cases.typed_abi_call.typed_c2c.Greeter.test_resource_encoding_next_txn@6",
      "stack_in": [
        "app#0",
        "acc#0"
      ],
      "op": "itxn_submit"
    },
    "7861": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0"
      ]
    },
    "7863": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "awst_tmp%5#0 (copy)"
      ]
    },
    "7864": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0"
      ]
    },
    "7867": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%5#0",
        "tmp%66#0",
        "tmp%66#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0",
        "tmp%66#0 (copy)"
      ]
    },
    "7868": {
      "op": "len",
      "defined_out": [
        "awst_tmp%5#0",
        "len%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0",
        "len%5#0"
      ]
    },
    "7869": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "awst_tmp%5#0",
        "len%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0",
        "len%5#0",
        "48"
      ]
    },
    "7871": {
      "op": "==",
      "defined_out": [
        "awst_tmp%5#0",
        "eq%5#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "tmp%66#0",
        "eq%5#0"
      ]
    },
    "7872": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "awst_tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "awst_tmp%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ]
    },
    "7873": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "awst_tmp%5#0"
      ]
    },
    "7875": {
      "op": "extract 0 4",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%67#0"
      ]
    },
    "7878": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "7879": {
      "op": "==",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "tmp%68#0"
      ]
    },
    "7880": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ]
    },
    "7881": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)"
      ]
    },
    "7882": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)",
        "0"
      ]
    },
    "7883": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)",
        "0",
        "8"
      ]
    },
    "7884": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%15#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "aggregate%extract%15#0"
      ]
    },
    "7885": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "aggregate%item0%5#0"
      ]
    },
    "7886": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ]
    },
    "7888": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)"
      ]
    },
    "7889": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)",
        "8"
      ]
    },
    "7890": {
      "op": "intc_3 // 8",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0 (copy)",
        "8",
        "8"
      ]
    },
    "7891": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%16#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "aggregate%extract%16#0"
      ]
    },
    "7892": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "aggregate%item1%5#0"
      ]
    },
    "7893": {
      "op": "cover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ]
    },
    "7895": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "16"
      ]
    },
    "7897": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "16",
        "32",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "as_Encoded(uint64,uint64,uint8[32])%5#0",
        "16",
        "32"
      ]
    },
    "7899": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%17#0",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item0%5#0",
        "aggregate%item1%5#0",
        "aggregate%extract%17#0"
      ]
    },
    "7900": {
      "op": "uncover 2",
      "stack_out": [
        "app#0",
        "acc#0",
        "aggregate%item1%5#0",
        "aggregate%extract%17#0",
        "aggregate%item0%5#0"
      ]
    },
    "7902": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%17#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%70#0",
        "tmp%69#0",
        "aggregate%extract%17#0"
      ]
    },
    "7904": {
      "op": "cover 2",
      "defined_out": [
        "tmp%69#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%71#0",
        "tmp%70#0",
        "tmp%69#0"
      ]
    },
    "7906": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.0#0",
        "tmp%71#0",
        "tmp%70#0"
      ]
    },
    "7908": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.1#0",
        "result.0#0",
        "tmp%71#0"
      ]
    },
    "7910": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "7912": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "asset#0 (copy)"
      ]
    },
    "7914": {
      "op": "==",
      "defined_out": [
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "result.1#0",
        "tmp%72#0"
      ]
    },
    "7915": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0"
      ]
    },
    "7917": {
      "op": "frame_dig 0",
      "defined_out": [
        "app#0",
        "result.1#0",
        "result.2#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "result.1#0",
        "app#0"
      ]
    },
    "7919": {
      "op": "==",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "7920": {
      "op": "&&",
      "defined_out": [
        "app#0",
        "result.2#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "result.2#0",
        "tmp%74#0"
      ]
    },
    "7921": {
      "op": "uncover 1",
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%74#0",
        "result.2#0"
      ]
    },
    "7923": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "app#0",
        "result.2#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%74#0",
        "result.2#0",
        "acc#0"
      ]
    },
    "7925": {
      "op": "==",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "7926": {
      "op": "&&",
      "defined_out": [
        "acc#0",
        "app#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "app#0",
        "acc#0",
        "tmp%76#0"
      ]
    },
    "7927": {
      "error": "expected echo to return same resources",
      "op": "assert // expected echo to return same resources",
      "stack_out": [
        "app#0",
        "acc#0"
      ]
    },
    "7928": {
      "retsub": true,
      "op": "retsub"
    }
  }
}