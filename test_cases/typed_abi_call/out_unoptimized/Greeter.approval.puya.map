{
  "version": 3,
  "sources": [
    "../typed_c2c.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA6VK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7VL;;;AAAA;AAAA;;AA6VK;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5UL;;;AAAA;AAAA;;AA4UK;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlUL;;;AAAA;AAAA;;AAkUK;;;AAAA;;;;AA9CA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApRL;;;AAAA;AAAA;;AAoRK;;;AAAA;;;;AAlDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlOL;;;AAAA;AAAA;;AAkOK;;;AAAA;;;;AA3DA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvKL;;;AAAA;AAAA;;AAuKK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5JL;;;AAAA;AAAA;;AA4JK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjJL;;;AAAA;AAAA;;AAiJK;;;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApIL;;;AAAA;AAAA;;AAoIK;;;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzHL;;;AAAA;AAAA;;AAyHK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhHL;;;AAAA;AAAA;;AAgHK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlGL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkGK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApFL;;;AAAA;AAAA;;AAoFK;;;AAAA;;;;AA5BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxDL;;;AAAA;AAAA;;AAwDK;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvCL;;;AAAA;AAAA;;AAuCK;;;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxBL;;;AAAA;AAAA;;AAwBK;;;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVL;;;AAAA;AAAA;;AAUK;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEQ;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AACO;;;;AAJX;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAOR;;;AAEe;;AAAoC;AAApC;AAAP;AACe;AAAwD;;;;AAAxD;;;;AAA2B;;;;;;;;;;;AAA3B;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAiD;;;;AAAjD;;;;AAAiC;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAmD;;;;AAAnD;;;;AAAmC;;;;;;;;;;;AAAnC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAA2D;;;;AAA3D;;;;AAA2C;;;;;;;;;;;AAA3C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;AACe;AAAiE;;;;AAAjE;;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;;;;;;;;;;;;;;AAAV;AAAP;;AAER;;;AAEQ;AAA0E;;;;AAA1E;;;;AAAiD;;;;;;;;;;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAEA;AAA+D;;;;AAA/D;;;;AAAoC;;;;;;;;;;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;;;;;;;;;;;;;;;;;;;;;;;;;AAA5C;AAAP;AAES;AAAiE;;;;AAAjE;;;;AAAiD;;;;;;;;;;;AAAjD;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AACW;;AAAb;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;AAEa;AAAsD;;;;AAAtD;;;;AAAoC;;;;;;;;;;;;;AAApC;;;AAAA;;;AAAA;;;AACN;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA6C;;;;;;;;;;;;;;;;;AAA7C;AAAP;;AAER;;;AAEc;AAAsD;;;;AAAtD;;;;AAAiC;;;;;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;;;;;AAAhB;AAAP;AAEM;AAA2C;;;;AAA3C;;;;;;;;AAAiC;;;;AAAjC;;;AAAA;;;AAAA;;;AACyB;AAAR;AAAhB;AAAP;AAEM;AAA4C;;;;AAA5C;;;;;;;;AAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAlC;;;AAAA;;;AAAA;;;AAC2B;;AAAT;AAAuB;;AAAR;AAAf;AAAjB;AAAP;AAEM;AAAgC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAA7C;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AACiB;;AAAhB;AAAP;AAEM;AAA4C;;;;AAA5C;;;;;;;;AAA+B;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;AAAhB;AAAP;;AAER;;;AAEsB;AAoBV;AAAY;;;AAAZ;AAA8B;;;AAA9B;AAAgD;;;AAAhD;AAAkE;;;AAAlE;AAAA;AAAA;AAJA;AAAA;;;AAAA;AACA;;;AADA;AAEA;;;AAFA;AAGA;;;AAHA;AAAA;AAAA;AAKA;;;AALA;AAAA;AAAA;AAMO;;;;AAtBG;;;;;;;;AAEV;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;AACA;;;;;;;;;;;;;;AAfU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAwBP;;;AAAiB;;;;;;;;;;;AAAjB;AAAP;;AAER;;;AAEc;AAAiE;;;;AAAjE;;;;AAAgD;;;;;;;;;;;;AAAhD;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAA6D;;;;AAA7D;;;;AAA4C;;;;;;;;;;;;AAA5C;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAA6D;;;;AAA7D;;;;AAA+B;;;;;;;;;;;;AAA/B;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;AAEM;AAAkD;;;;AAAlD;;;;AAAiC;;;;;;;;;;;;AAAjC;;;AAAA;;;AAAA;;;AACiB;;;;;;;;AAAhB;AAAP;;AAER;;;AAEc;AAGF;;AACA;;AAFA;;AAGO;;;;;;;;;;AALL;;;;;;;;AAEF;;;;;AACA;;;;;AACA;;;;;AAJE;;;AAAA;;;AAAA;;;AASC;;AAAA;;AAAA;AAAa;;AAAb;AAAwD;;AAAA;;AAAA;AAAxD;AADH;AADJ;;AAKR;;;AAEc;AAEF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACO;;;;AAHL;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAKiB;;AAAhB;AAAP;;AAER;;;;AAEwB;AAAqD;;;;AAArD;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAyC;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAoB;;;;AAA7D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AAAkE;;;;AAAlE;;;;AAAyC;;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAa;;;;AAArD;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAhB;AAAA;;AACkB;;;;;;;;;AAAX;AAAP;AAEgB;AAAwC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;AAA5D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACT;;AAAA;AAAP;AAEgB;AACc;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAgC;;;;AAD9C;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAGT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAmD;;;;AAAnD;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;AAAX;AAAP;AAEgB;AAAyC;AAAA;AAAkB;;;;AAA3D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAgE;;;;AAAhE;;;;AAAyC;;;AAAzC;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAER;;;;AAEwB;AAAoD;;;;AAApD;;;;AAA0C;;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAhB;AAAA;;AACkB;;AAAX;AAAP;AAEgB;AAA0C;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAmB;;;;AAA7D;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;AAEgB;AAAkE;;;;AAAlE;;;;AAA0C;;;;AAA1C;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACT;;AAAA;AAAP;;AAER;;;;AAGuB;AAKX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AARI;;;;AAIX;;;;;;AAEA;;;AACA;;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAf;AAAA;;AAUc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AACO;;;AAAY;;AAAZ;AAAP;AACO;;;AAAY;;AAAZ;AAAP;AACO;AAAY;AAAZ;AAAP;AACoB;;AAAb;AAAP;AAGe;AAIX;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;AACA;;AAAA;;AAEA;;AACO;;;;AARI;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGe;AAKX;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AARI;;;;AAIX;;;;;;AAEA;;;AACA;;;;AAPW;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUR;;AAAA;AAAP;AAGqB;AAGjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANU;;;;AAEjB;;;;;;AAEA;;;AACA;;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAArB;;AAAA;;AAAA;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;;AAER;;;;;;;AAGsB;AAGV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANG;;;;AAEV;;;;;;AAEA;;;AACA;;;;AALU;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAQA;;AAAA;;AAAA;;AAAA;;AACY;;AAAL;AAAP;AACY;;AAAL;AAAP;AACY;AAAL;AAAP;AACa;;AAAN;AAAP;AAGgB;AAEZ;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAHA;;AAAA;AACA;;AAAA;;AAEA;;AACO;;;;AANK;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAhB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGgB;AAGZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANK;;;;AAEZ;;;;;;AAEA;;;AACA;;;;AALY;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAhB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAGqB;AAGjB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAGO;;;;AANU;;;;AAEjB;;;;;;AAEA;;;AACA;;;;AALiB;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAArB;;AAAA;AAAA;;AAAA;;AAAA;;AAQO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;;AAER;;;AAGsB;AAEY;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAtB;AAAE;;AAAF;AAAE;;AAAF;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAQ;;AAAR;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAmB;;AAAnB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAER;;AAAF;AAAA;AAAA;;;AAAE;;AAAF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAgB;;AAAhB;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAqC;AAArC;AAAA;AAAA;AAAA;AAAgD;;AAAhD;AAAgE;;AAAhE;AAAA;AAAA;;;AAAgE;;AAAhE;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAHG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAKA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;AAAN;AAAP;AACa;;AAAN;AAAP;AACgB;AAAT;AAAP;AACgB;;AAAT;AAAP;AACgB;;AAAT;AAAP;AAGc;AAIF;AAAY;;AAAZ;AAAY;;AAAZ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAgC;;;;;;;AAAhC;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAC8C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA9C;AAAY;;AAAZ;AAA6B;;;;;;;;;;AAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAHR;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMO;;;;AARG;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAd;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAUA;;AAAA;;AAAA;;AAAA;;AAAA;;AACa;;;;;;;;;;;AAAN;AAAP;AACa;;;;;;;;;;;;;AAAN;AAAP;AACgB;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;AACgB;;;;;;;;;;AAAT;AAAP;;AAER;;;AAEuB;AAAqC;;;;AAArC;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACE;;AAAV;AAAP;AACoB;AAAqD;;;;AAArD;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACE;;AAAf;AAAP;AAEA;AAAqC;;;;AAArC;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAC4B;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA4C;;AAA5C;AAAP;;AAER;;;AAEuB;AAEV;AAAA;AAAW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACiB;AAAjB;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAJI;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMf;AACe;AAEV;AAAA;AAAW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACiB;AAAjB;AAAoC;;AAApC;AAAA;AAAA;;;AAAoC;;AAApC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AACO;;;;AAJI;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAMR;AAAP;;AAER;;;AAEc;AAAgB;AAAhB;AAAA;AAAwC;;;;;;;;;AAAxC;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAN;AACc;AAGH;;;;AAHG;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AAKP;;AAAA;AAAA;;AAAA;AAAP;AACO;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 6 2 1"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x 0x6231 0x0000000000000001 0x9bf81913 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 0x00027331 0x62 0x02 \"s1\" \"log 1\" 0xb4b4334e 0x0000000000000002 \"echo: s1\" 0x33 0x34 0x0000000000000003 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x000b6563686f3a207475706c65 0x000000000000000b 0x000173 0x6563686f3a206231 0x00027332 0x00086563686f3a207332 0x6563686f3a2033 0x0003733162 0x3362 0x000000000000002a 0xddd07185 \"log 2\""
    },
    "277": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "280": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "281": {
      "op": "bz main_bare_routing@23",
      "stack_out": []
    },
    "284": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "287": {
      "op": "pushbytes 0x07916bea // method \"test_is_a_b(byte[],byte[],application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)"
      ]
    },
    "293": {
      "op": "pushbytes 0x1859b0ba // method \"test_method_selector_kinds(application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)"
      ]
    },
    "299": {
      "op": "pushbytes 0x4eb11b0d // method \"test_method_overload(application)void\"",
      "defined_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)"
      ]
    },
    "305": {
      "op": "pushbytes 0x0d176a4a // method \"test_arg_conversion(application)void\"",
      "defined_out": [
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)"
      ]
    },
    "311": {
      "op": "pushbytes 0xb54730c8 // method \"test_15plus_args(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)"
      ]
    },
    "317": {
      "op": "pushbytes 0x7859eaf7 // method \"test_void(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)"
      ]
    },
    "323": {
      "op": "pushbytes 0x24478a3c // method \"test_ref_types(application,asset)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)"
      ]
    },
    "329": {
      "op": "pushbytes 0xe44b2eaf // method \"test_account_to_address(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)"
      ]
    },
    "335": {
      "op": "pushbytes 0x7a60c035 // method \"test_native_string(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)"
      ]
    },
    "341": {
      "op": "pushbytes 0x6a559cb3 // method \"test_native_bytes(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)"
      ]
    },
    "347": {
      "op": "pushbytes 0x1be60712 // method \"test_native_uint64(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)"
      ]
    },
    "353": {
      "op": "pushbytes 0x19cb78a4 // method \"test_native_biguint(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)"
      ]
    },
    "359": {
      "op": "pushbytes 0xf0ef6873 // method \"test_native_tuple(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)"
      ]
    },
    "365": {
      "op": "pushbytes 0x3d2bfe37 // method \"test_native_tuple_method_ref(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)"
      ]
    },
    "371": {
      "op": "pushbytes 0x54e98f56 // method \"test_nested_tuples(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)"
      ]
    },
    "377": {
      "op": "pushbytes 0xf55b7567 // method \"test_no_args(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)"
      ]
    },
    "383": {
      "op": "pushbytes 0x8598bb43 // method \"test_named_tuples(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)"
      ]
    },
    "389": {
      "op": "pushbytes 0xbb691362 // method \"test_arc4_struct(application)void\"",
      "defined_out": [
        "Method(test_15plus_args(application)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_arc4_struct(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_void(application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_arc4_struct(application)void)"
      ]
    },
    "395": {
      "op": "uncover 18",
      "stack_out": [
        "Method(test_is_a_b(byte[],byte[],application)void)",
        "Method(test_method_selector_kinds(application)void)",
        "Method(test_method_overload(application)void)",
        "Method(test_arg_conversion(application)void)",
        "Method(test_15plus_args(application)void)",
        "Method(test_void(application)void)",
        "Method(test_ref_types(application,asset)void)",
        "Method(test_account_to_address(application)void)",
        "Method(test_native_string(application)void)",
        "Method(test_native_bytes(application)void)",
        "Method(test_native_uint64(application)void)",
        "Method(test_native_biguint(application)void)",
        "Method(test_native_tuple(application)void)",
        "Method(test_native_tuple_method_ref(application)void)",
        "Method(test_nested_tuples(application)void)",
        "Method(test_no_args(application)void)",
        "Method(test_named_tuples(application)void)",
        "Method(test_arc4_struct(application)void)",
        "tmp%2#0"
      ]
    },
    "397": {
      "op": "match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20",
      "stack_out": []
    },
    "435": {
      "block": "main_after_if_else@27",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "436": {
      "block": "main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "437": {
      "block": "main_test_arc4_struct_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "439": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0",
        "NoOp"
      ]
    },
    "440": {
      "op": "==",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "444": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0"
      ]
    },
    "445": {
      "op": "!=",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "446": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "447": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%18#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%18#0"
      ]
    },
    "450": {
      "op": "btoi",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "451": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "453": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "op": "callsub test_arc4_struct",
      "stack_out": []
    },
    "456": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "460": {
      "block": "main_test_named_tuples_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "462": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "NoOp"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "464": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "465": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "0"
      ]
    },
    "468": {
      "op": "!=",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "469": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "470": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%17#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%17#0"
      ]
    },
    "473": {
      "op": "btoi",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "474": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "476": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "op": "callsub test_named_tuples",
      "stack_out": []
    },
    "479": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "480": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "483": {
      "block": "main_test_no_args_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "485": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0",
        "NoOp"
      ]
    },
    "486": {
      "op": "==",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "487": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "488": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0",
        "0"
      ]
    },
    "491": {
      "op": "!=",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "492": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "493": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%16#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%16#0"
      ]
    },
    "496": {
      "op": "btoi",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "497": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "499": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "op": "callsub test_no_args",
      "stack_out": []
    },
    "502": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "503": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "506": {
      "block": "main_test_nested_tuples_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "508": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "NoOp"
      ]
    },
    "509": {
      "op": "==",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "510": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "511": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "513": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0",
        "0"
      ]
    },
    "514": {
      "op": "!=",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "515": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "516": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%15#0"
      ]
    },
    "519": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "520": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "522": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "op": "callsub test_nested_tuples",
      "stack_out": []
    },
    "525": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "526": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "529": {
      "block": "main_test_native_tuple_method_ref_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "531": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "NoOp"
      ]
    },
    "532": {
      "op": "==",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "533": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "534": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "536": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0"
      ]
    },
    "537": {
      "op": "!=",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "538": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "539": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%14#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%14#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "543": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "545": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "op": "callsub test_native_tuple_method_ref",
      "stack_out": []
    },
    "548": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "552": {
      "block": "main_test_native_tuple_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "554": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "NoOp"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "556": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "557": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "559": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0"
      ]
    },
    "560": {
      "op": "!=",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "561": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "562": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%13#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%13#0"
      ]
    },
    "565": {
      "op": "btoi",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "566": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "568": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "op": "callsub test_native_tuple",
      "stack_out": []
    },
    "571": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "572": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "575": {
      "block": "main_test_native_biguint_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "577": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "NoOp"
      ]
    },
    "578": {
      "op": "==",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "579": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "580": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "582": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0"
      ]
    },
    "583": {
      "op": "!=",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "584": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "585": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%12#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%12#0"
      ]
    },
    "588": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "589": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "591": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "op": "callsub test_native_biguint",
      "stack_out": []
    },
    "594": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "595": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "598": {
      "block": "main_test_native_uint64_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "600": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "NoOp"
      ]
    },
    "601": {
      "op": "==",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "602": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "603": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "0"
      ]
    },
    "606": {
      "op": "!=",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "608": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%11#0"
      ]
    },
    "611": {
      "op": "btoi",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "612": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "614": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "op": "callsub test_native_uint64",
      "stack_out": []
    },
    "617": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "618": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "621": {
      "block": "main_test_native_bytes_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "623": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "NoOp"
      ]
    },
    "624": {
      "op": "==",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "625": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "626": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "628": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0"
      ]
    },
    "629": {
      "op": "!=",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "630": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "631": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%10#0"
      ]
    },
    "634": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "635": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "637": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "op": "callsub test_native_bytes",
      "stack_out": []
    },
    "640": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "644": {
      "block": "main_test_native_string_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "646": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "NoOp"
      ]
    },
    "647": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "648": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "649": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "651": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0"
      ]
    },
    "652": {
      "op": "!=",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "653": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "654": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%9#0"
      ]
    },
    "657": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "658": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "660": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "op": "callsub test_native_string",
      "stack_out": []
    },
    "663": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "664": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "667": {
      "block": "main_test_account_to_address_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "669": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "NoOp"
      ]
    },
    "670": {
      "op": "==",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "671": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "672": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "0"
      ]
    },
    "675": {
      "op": "!=",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "676": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "677": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%8#0"
      ]
    },
    "680": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "681": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "683": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "op": "callsub test_account_to_address",
      "stack_out": []
    },
    "686": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "687": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "690": {
      "block": "main_test_ref_types_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "692": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "NoOp"
      ]
    },
    "693": {
      "op": "==",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "694": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "695": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "697": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0"
      ]
    },
    "698": {
      "op": "!=",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "699": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "700": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%6#0"
      ]
    },
    "703": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "704": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "706": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8)%7#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "reinterpret_Encoded(uint8)%7#0"
      ]
    },
    "709": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "710": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "712": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "op": "callsub test_ref_types",
      "stack_out": []
    },
    "715": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "716": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "719": {
      "block": "main_test_void_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "721": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "NoOp"
      ]
    },
    "722": {
      "op": "==",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "723": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "724": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "726": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0"
      ]
    },
    "727": {
      "op": "!=",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "728": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "729": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%5#0"
      ]
    },
    "732": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "733": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "735": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "op": "callsub test_void",
      "stack_out": []
    },
    "738": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "739": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "742": {
      "block": "main_test_15plus_args_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "744": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "NoOp"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "746": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "747": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "749": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0"
      ]
    },
    "750": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "751": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "752": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%4#0"
      ]
    },
    "755": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "756": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "758": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "op": "callsub test_15plus_args",
      "stack_out": []
    },
    "761": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "762": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "765": {
      "block": "main_test_arg_conversion_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "767": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "768": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "769": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "770": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "772": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "773": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "774": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "775": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%3#0"
      ]
    },
    "778": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "779": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "781": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "op": "callsub test_arg_conversion",
      "stack_out": []
    },
    "784": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "788": {
      "block": "main_test_method_overload_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "790": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "NoOp"
      ]
    },
    "791": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "792": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "793": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "795": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "796": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "797": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "798": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "801": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "802": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "804": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "op": "callsub test_method_overload",
      "stack_out": []
    },
    "807": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "808": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "811": {
      "block": "main_test_method_selector_kinds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "813": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "814": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "815": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "816": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "819": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "820": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "821": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "824": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "825": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "827": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "op": "callsub test_method_selector_kinds",
      "stack_out": []
    },
    "830": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "831": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "834": {
      "block": "main_test_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "836": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "837": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "838": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "839": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "841": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "842": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "843": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "844": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "847": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "850": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "853": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "856": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "859": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "860": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "862": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%7#0"
      ]
    },
    "864": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "866": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "868": {
      "callsub": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "op": "callsub test_is_a_b",
      "stack_out": []
    },
    "871": {
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "872": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "875": {
      "block": "main_bare_routing@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0",
        "0"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%115#0"
      ]
    },
    "879": {
      "op": "match main___algopy_default_create@24",
      "stack_out": []
    },
    "883": {
      "block": "main_switch_case_next@26",
      "stack_in": [],
      "op": "b main_after_if_else@27"
    },
    "886": {
      "block": "main___algopy_default_create@24",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "888": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "0"
      ]
    },
    "889": {
      "op": "==",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "890": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "891": {
      "block": "main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@30",
      "stack_in": [],
      "op": "intc_3 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "892": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28"
    },
    "895": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_is_a_b",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "898": {
      "block": "test_is_a_b_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "899": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "901": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "902": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "903": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "906": {
      "op": "frame_dig -3",
      "stack_out": [
        "length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "908": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "909": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "911": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "912": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "913": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "916": {
      "op": "frame_dig -2",
      "stack_out": [
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "919": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "920": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "922": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "924": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "930": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "932": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "934": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "936": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "937": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "939": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "940": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "942": {
      "block": "test_is_a_b_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "943": {
      "retsub": true,
      "op": "retsub"
    },
    "944": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_selector_kinds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "947": {
      "block": "test_method_selector_kinds_block@0",
      "stack_in": [],
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "949": {
      "op": "dup",
      "stack_out": [
        "Method(echo(string)string)",
        "Method(echo(string)string)"
      ]
    },
    "950": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "op": "assert",
      "stack_out": []
    },
    "952": {
      "op": "itxn_begin"
    },
    "953": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "955": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "957": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "959": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "961": {
      "op": "pushbytes 0x00057465737431",
      "defined_out": [
        "0x00057465737431"
      ],
      "stack_out": [
        "0x00057465737431"
      ]
    },
    "970": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "972": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "973": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "975": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "976": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "978": {
      "block": "test_method_selector_kinds_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "979": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "981": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "982": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "985": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "986": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "989": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "990": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "991": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "992": {
      "op": "pushbytes 0x000b6563686f3a207465737431",
      "defined_out": [
        "0x000b6563686f3a207465737431",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737431"
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1008": {
      "op": "assert",
      "stack_out": []
    },
    "1009": {
      "op": "itxn_begin"
    },
    "1010": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1012": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1014": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1016": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1018": {
      "op": "pushbytes 0x00057465737432",
      "defined_out": [
        "0x00057465737432"
      ],
      "stack_out": [
        "0x00057465737432"
      ]
    },
    "1027": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1029": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1030": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1032": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1033": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1035": {
      "block": "test_method_selector_kinds_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1036": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1038": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1039": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1042": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "1043": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1046": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "1047": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1048": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1049": {
      "op": "pushbytes 0x000b6563686f3a207465737432",
      "defined_out": [
        "0x000b6563686f3a207465737432",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737432"
      ]
    },
    "1064": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1065": {
      "op": "assert",
      "stack_out": []
    },
    "1066": {
      "op": "itxn_begin"
    },
    "1067": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1069": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1071": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1073": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1075": {
      "op": "pushbytes 0x00057465737433",
      "defined_out": [
        "0x00057465737433"
      ],
      "stack_out": [
        "0x00057465737433"
      ]
    },
    "1084": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1086": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1087": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1089": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1090": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1092": {
      "block": "test_method_selector_kinds_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1093": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1095": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1096": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1099": {
      "op": "swap",
      "stack_out": [
        "tmp%9#0",
        "awst_tmp%2#0"
      ]
    },
    "1100": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1103": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1104": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1105": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1106": {
      "op": "pushbytes 0x000b6563686f3a207465737433",
      "defined_out": [
        "0x000b6563686f3a207465737433",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737433"
      ]
    },
    "1121": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1122": {
      "op": "assert",
      "stack_out": []
    },
    "1123": {
      "op": "itxn_begin"
    },
    "1124": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1126": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1128": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1130": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1132": {
      "op": "pushbytes 0x00057465737434",
      "defined_out": [
        "0x00057465737434"
      ],
      "stack_out": [
        "0x00057465737434"
      ]
    },
    "1141": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1143": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1144": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1146": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1147": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1149": {
      "block": "test_method_selector_kinds_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1150": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1152": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1153": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "1156": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "1157": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "1160": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1162": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1163": {
      "op": "pushbytes 0x000b6563686f3a207465737434",
      "defined_out": [
        "0x000b6563686f3a207465737434",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737434"
      ]
    },
    "1178": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1179": {
      "op": "assert",
      "stack_out": []
    },
    "1180": {
      "op": "itxn_begin"
    },
    "1181": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "1183": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1185": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1187": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1189": {
      "op": "pushbytes 0x00057465737435",
      "defined_out": [
        "0x00057465737435"
      ],
      "stack_out": [
        "0x00057465737435"
      ]
    },
    "1198": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1200": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1201": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1203": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1204": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1206": {
      "block": "test_method_selector_kinds_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1207": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%4#0"
      ]
    },
    "1209": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ]
    },
    "1210": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%4#0",
        "tmp%17#0"
      ]
    },
    "1213": {
      "op": "swap",
      "stack_out": [
        "tmp%17#0",
        "awst_tmp%4#0"
      ]
    },
    "1214": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1217": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "1218": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "1219": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1220": {
      "op": "pushbytes 0x000b6563686f3a207465737435",
      "defined_out": [
        "0x000b6563686f3a207465737435",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "0x000b6563686f3a207465737435"
      ]
    },
    "1235": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1236": {
      "op": "assert",
      "stack_out": []
    },
    "1237": {
      "retsub": true,
      "op": "retsub"
    },
    "1238": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_method_overload",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1241": {
      "block": "test_method_overload_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1242": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1244": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1246": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1248": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1250": {
      "op": "pushbytes 0x000e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x000e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x000e7479706564202b2069676e6f7265"
      ]
    },
    "1268": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1270": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1271": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1273": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1274": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1276": {
      "block": "test_method_overload_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1277": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1279": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1282": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1283": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1284": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "1285": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "1287": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1288": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1291": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "awst_tmp%1#0"
      ]
    },
    "1292": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1295": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1296": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1297": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1298": {
      "op": "pushbytes 0x00146563686f3a207479706564202b2069676e6f7265",
      "defined_out": [
        "0x00146563686f3a207479706564202b2069676e6f7265",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x00146563686f3a207479706564202b2069676e6f7265"
      ]
    },
    "1322": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1323": {
      "op": "assert",
      "stack_out": []
    },
    "1324": {
      "op": "itxn_begin"
    },
    "1325": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1327": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1329": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1331": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1333": {
      "op": "pushbytes 0x0010756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ],
      "stack_out": [
        "0x0010756e7479706564202b2069676e6f7265"
      ]
    },
    "1353": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1355": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1356": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1358": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1359": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1361": {
      "block": "test_method_overload_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1362": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "1364": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "1365": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%7#0"
      ]
    },
    "1368": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "awst_tmp%2#0"
      ]
    },
    "1369": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1372": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1373": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1374": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1375": {
      "op": "pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265",
      "defined_out": [
        "0x00166563686f3a20756e7479706564202b2069676e6f7265",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x00166563686f3a20756e7479706564202b2069676e6f7265"
      ]
    },
    "1401": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1402": {
      "op": "assert",
      "stack_out": []
    },
    "1403": {
      "op": "itxn_begin"
    },
    "1404": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1406": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1408": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1410": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1412": {
      "op": "pushbytes 0x00057475706c65",
      "defined_out": [
        "0x00057475706c65"
      ],
      "stack_out": [
        "0x00057475706c65"
      ]
    },
    "1421": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1423": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1424": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1426": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1427": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1429": {
      "block": "test_method_overload_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1430": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "1432": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "1433": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%11#0"
      ]
    },
    "1436": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "awst_tmp%3#0"
      ]
    },
    "1437": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1440": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "1441": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "1442": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0"
      ]
    },
    "1443": {
      "op": "itxn LastLog",
      "defined_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1.LastLog#0"
      ]
    },
    "1445": {
      "op": "swap",
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0"
      ]
    },
    "1446": {
      "op": "bytec 25 // 0x000b6563686f3a207475706c65",
      "defined_out": [
        "0x000b6563686f3a207475706c65",
        "result.0#0",
        "result.1.LastLog#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.0#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1448": {
      "op": "==",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%14#0"
      ]
    },
    "1449": {
      "op": "assert",
      "stack_out": [
        "result.1.LastLog#0"
      ]
    },
    "1450": {
      "op": "dup",
      "defined_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "result.1.LastLog#0 (copy)"
      ]
    },
    "1451": {
      "op": "extract 4 0",
      "defined_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.1.LastLog#0",
        "tmp%15#0"
      ]
    },
    "1454": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "result.1.LastLog#0"
      ]
    },
    "1455": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1458": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1459": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1460": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1461": {
      "op": "bytec 25 // 0x000b6563686f3a207475706c65",
      "stack_out": [
        "tmp%15#0",
        "0x000b6563686f3a207475706c65"
      ]
    },
    "1463": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1464": {
      "op": "assert",
      "stack_out": []
    },
    "1465": {
      "op": "itxn_begin"
    },
    "1466": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1468": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1470": {
      "op": "bytec 4 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)"
      ],
      "stack_out": [
        "Method(echo(string)string)"
      ]
    },
    "1472": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1474": {
      "op": "pushbytes 0x0007756e7479706564",
      "defined_out": [
        "0x0007756e7479706564"
      ],
      "stack_out": [
        "0x0007756e7479706564"
      ]
    },
    "1485": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1487": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1488": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1490": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1491": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1493": {
      "block": "test_method_overload_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1494": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0"
      ]
    },
    "1496": {
      "op": "dup",
      "defined_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "txn_result.LastLog#0 (copy)"
      ]
    },
    "1497": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ],
      "stack_out": [
        "txn_result.LastLog#0",
        "tmp%19#0"
      ]
    },
    "1500": {
      "op": "swap",
      "stack_out": [
        "tmp%19#0",
        "txn_result.LastLog#0"
      ]
    },
    "1501": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1504": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1505": {
      "op": "==",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1506": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1507": {
      "op": "pushbytes 0x000d6563686f3a20756e7479706564",
      "defined_out": [
        "0x000d6563686f3a20756e7479706564",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x000d6563686f3a20756e7479706564"
      ]
    },
    "1524": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1525": {
      "op": "assert",
      "stack_out": []
    },
    "1526": {
      "retsub": true,
      "op": "retsub"
    },
    "1527": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arg_conversion",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1530": {
      "block": "test_arg_conversion_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1531": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1533": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1535": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "1537": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1539": {
      "op": "pushbytes 0x000a636f6e76657274656431",
      "defined_out": [
        "0x000a636f6e76657274656431"
      ],
      "stack_out": [
        "0x000a636f6e76657274656431"
      ]
    },
    "1553": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1555": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1556": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1558": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1559": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1561": {
      "block": "test_arg_conversion_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1562": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1564": {
      "op": "pushbytes 0x636f6e76657274656431",
      "defined_out": [
        "0x636f6e76657274656431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x636f6e76657274656431"
      ]
    },
    "1576": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1577": {
      "op": "assert",
      "stack_out": []
    },
    "1578": {
      "op": "itxn_begin"
    },
    "1579": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "1581": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1583": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(log(uint64)void)"
      ],
      "stack_out": [
        "Method(log(uint64)void)"
      ]
    },
    "1589": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1591": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002"
      ],
      "stack_out": [
        "0x0000000000000002"
      ]
    },
    "1593": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1595": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1596": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1598": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1599": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1601": {
      "block": "test_arg_conversion_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1602": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1604": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "2"
      ]
    },
    "1605": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%1#0"
      ]
    },
    "1606": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1607": {
      "op": "assert",
      "stack_out": []
    },
    "1608": {
      "op": "itxn_begin"
    },
    "1609": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "1611": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1613": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(log(uint512)void)"
      ],
      "stack_out": [
        "Method(log(uint512)void)"
      ]
    },
    "1619": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1621": {
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ],
      "stack_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
      ]
    },
    "1687": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1689": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1690": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1692": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1693": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1695": {
      "block": "test_arg_conversion_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1696": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1698": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "56"
      ]
    },
    "1700": {
      "op": "bzero",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "1701": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0",
        "3"
      ]
    },
    "1703": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1704": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%5#0"
      ]
    },
    "1705": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1706": {
      "op": "assert",
      "stack_out": []
    },
    "1707": {
      "op": "itxn_begin"
    },
    "1708": {
      "op": "bytec 16 // 0x34",
      "defined_out": [
        "0x34"
      ],
      "stack_out": [
        "0x34"
      ]
    },
    "1710": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "1711": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "1712": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "1715": {
      "op": "bytec 16 // 0x34",
      "stack_out": [
        "length_uint16%0#0",
        "0x34"
      ]
    },
    "1717": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1718": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "1720": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1722": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(log(byte[])void)",
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0",
        "Method(log(byte[])void)"
      ]
    },
    "1728": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "1730": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1732": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1733": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1735": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1736": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1738": {
      "block": "test_arg_conversion_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1739": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1741": {
      "op": "bytec 16 // 0x34",
      "defined_out": [
        "0x34",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x34"
      ]
    },
    "1743": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1744": {
      "op": "assert",
      "stack_out": []
    },
    "1745": {
      "op": "itxn_begin"
    },
    "1746": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%4%%param_ApplicationID_idx_0#0"
      ]
    },
    "1748": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1750": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(log(bool)void)"
      ],
      "stack_out": [
        "Method(log(bool)void)"
      ]
    },
    "1756": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1758": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80"
      ],
      "stack_out": [
        "0x80"
      ]
    },
    "1761": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1763": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1764": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1767": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1769": {
      "block": "test_arg_conversion_next_txn@5",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1770": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "1772": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x54727565",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x54727565"
      ]
    },
    "1778": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1779": {
      "op": "assert",
      "stack_out": []
    },
    "1780": {
      "retsub": true,
      "op": "retsub"
    },
    "1781": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_15plus_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1784": {
      "block": "test_15plus_args_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1785": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1786": {
      "op": "pushbytes 0xde",
      "defined_out": [
        "0x",
        "0xde"
      ],
      "stack_out": [
        "0x",
        "0xde"
      ]
    },
    "1789": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "1790": {
      "op": "pushbytes 0xad",
      "defined_out": [
        "0xad",
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "0xad"
      ]
    },
    "1793": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0"
      ]
    },
    "1794": {
      "op": "pushbytes 0xbe",
      "defined_out": [
        "0xbe",
        "encoded%1#0"
      ],
      "stack_out": [
        "encoded%1#0",
        "0xbe"
      ]
    },
    "1797": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "1798": {
      "op": "pushbytes 0xef",
      "defined_out": [
        "0xef",
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "0xef"
      ]
    },
    "1801": {
      "op": "concat",
      "defined_out": [
        "encoded%3#0"
      ],
      "stack_out": [
        "encoded%3#0"
      ]
    },
    "1802": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%3#0",
        "0x"
      ]
    },
    "1803": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0"
      ]
    },
    "1804": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%4#0",
        "0x"
      ]
    },
    "1805": {
      "op": "pushbytes 0x0f",
      "defined_out": [
        "0x",
        "0x0f",
        "encoded%4#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "0x",
        "0x0f"
      ]
    },
    "1808": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%5#0"
      ]
    },
    "1809": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "encoded%4#0",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%5#0",
        "0x10"
      ]
    },
    "1812": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "encoded%6#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%6#0"
      ]
    },
    "1813": {
      "op": "pushbytes 0x11",
      "defined_out": [
        "0x11",
        "encoded%4#0",
        "encoded%6#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%6#0",
        "0x11"
      ]
    },
    "1816": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%7#0"
      ]
    },
    "1817": {
      "op": "pushbytes 0x12",
      "defined_out": [
        "0x12",
        "encoded%4#0",
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%7#0",
        "0x12"
      ]
    },
    "1820": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "encoded%8#0"
      ],
      "stack_out": [
        "encoded%4#0",
        "encoded%8#0"
      ]
    },
    "1821": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "encoded%4#0"
      ]
    },
    "1822": {
      "op": "concat",
      "defined_out": [
        "encoded%9#0"
      ],
      "stack_out": [
        "encoded%9#0"
      ]
    },
    "1823": {
      "op": "pushbytes 0x14",
      "defined_out": [
        "0x14",
        "encoded%9#0"
      ],
      "stack_out": [
        "encoded%9#0",
        "0x14"
      ]
    },
    "1826": {
      "op": "concat",
      "defined_out": [
        "encoded%10#0"
      ],
      "stack_out": [
        "encoded%10#0"
      ]
    },
    "1827": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%10#0",
        "0x"
      ]
    },
    "1828": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1829": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "1831": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1833": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "1839": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1841": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000001"
      ]
    },
    "1842": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1844": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000002"
      ]
    },
    "1846": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1848": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000003"
      ]
    },
    "1850": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1852": {
      "op": "pushbytes 0x0000000000000004",
      "defined_out": [
        "0x0000000000000004",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000004"
      ]
    },
    "1862": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1864": {
      "op": "pushbytes 0x0000000000000005",
      "defined_out": [
        "0x0000000000000005",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000005"
      ]
    },
    "1874": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1876": {
      "op": "pushbytes 0x0000000000000006",
      "defined_out": [
        "0x0000000000000006",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000006"
      ]
    },
    "1886": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1888": {
      "op": "pushbytes 0x0000000000000007",
      "defined_out": [
        "0x0000000000000007",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000007"
      ]
    },
    "1898": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1900": {
      "op": "pushbytes 0x0000000000000008",
      "defined_out": [
        "0x0000000000000008",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000008"
      ]
    },
    "1910": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1912": {
      "op": "pushbytes 0x0000000000000009",
      "defined_out": [
        "0x0000000000000009",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x0000000000000009"
      ]
    },
    "1922": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1924": {
      "op": "pushbytes 0x000000000000000a",
      "defined_out": [
        "0x000000000000000a",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000a"
      ]
    },
    "1934": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1936": {
      "op": "bytec 26 // 0x000000000000000b",
      "defined_out": [
        "0x000000000000000b",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000b"
      ]
    },
    "1938": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1940": {
      "op": "pushbytes 0x000000000000000c",
      "defined_out": [
        "0x000000000000000c",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000c"
      ]
    },
    "1950": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1952": {
      "op": "pushbytes 0x000000000000000d",
      "defined_out": [
        "0x000000000000000d",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000d"
      ]
    },
    "1962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1964": {
      "op": "pushbytes 0x000000000000000e",
      "defined_out": [
        "0x000000000000000e",
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0",
        "0x000000000000000e"
      ]
    },
    "1974": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_15#0"
      ]
    },
    "1976": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1978": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1979": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1981": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1982": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1984": {
      "block": "test_15plus_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1985": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "1987": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1988": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1991": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "1992": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1995": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "1996": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1997": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1998": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2001": {
      "op": "pushbytes 0x0f101112deadbeef14",
      "defined_out": [
        "0x0f101112deadbeef14",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x0f101112deadbeef14"
      ]
    },
    "2012": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2013": {
      "op": "assert",
      "stack_out": []
    },
    "2014": {
      "retsub": true,
      "op": "retsub"
    },
    "2015": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_void",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_void",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2018": {
      "block": "test_void_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2019": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2021": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2023": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2025": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2027": {
      "op": "pushbytes 0x0006576f726c6431",
      "defined_out": [
        "0x0006576f726c6431"
      ],
      "stack_out": [
        "0x0006576f726c6431"
      ]
    },
    "2037": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2039": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2040": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2042": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2043": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2045": {
      "block": "test_void_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2046": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2048": {
      "op": "pushbytes 0x576f726c6431",
      "defined_out": [
        "0x576f726c6431",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6431"
      ]
    },
    "2056": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2057": {
      "op": "assert",
      "stack_out": []
    },
    "2058": {
      "op": "itxn_begin"
    },
    "2059": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2061": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2063": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2065": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2067": {
      "op": "pushbytes 0x0006576f726c6432",
      "defined_out": [
        "0x0006576f726c6432"
      ],
      "stack_out": [
        "0x0006576f726c6432"
      ]
    },
    "2077": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2079": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2080": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2082": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2083": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2085": {
      "block": "test_void_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2086": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2088": {
      "op": "pushbytes 0x576f726c6432",
      "defined_out": [
        "0x576f726c6432",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6432"
      ]
    },
    "2096": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2097": {
      "op": "assert",
      "stack_out": []
    },
    "2098": {
      "op": "itxn_begin"
    },
    "2099": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2101": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2103": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2105": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2107": {
      "op": "pushbytes 0x0006576f726c6433",
      "defined_out": [
        "0x0006576f726c6433"
      ],
      "stack_out": [
        "0x0006576f726c6433"
      ]
    },
    "2117": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2119": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2120": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2123": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2125": {
      "block": "test_void_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2126": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2128": {
      "op": "pushbytes 0x576f726c6433",
      "defined_out": [
        "0x576f726c6433",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6433"
      ]
    },
    "2136": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2137": {
      "op": "assert",
      "stack_out": []
    },
    "2138": {
      "op": "itxn_begin"
    },
    "2139": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "2141": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "2143": {
      "op": "bytec 12 // method \"log(string)void\"",
      "defined_out": [
        "Method(log(string)void)"
      ],
      "stack_out": [
        "Method(log(string)void)"
      ]
    },
    "2145": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2147": {
      "op": "pushbytes 0x0006576f726c6434",
      "defined_out": [
        "0x0006576f726c6434"
      ],
      "stack_out": [
        "0x0006576f726c6434"
      ]
    },
    "2157": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2159": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2160": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2162": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2163": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2165": {
      "block": "test_void_next_txn@4",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2166": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2168": {
      "op": "pushbytes 0x576f726c6434",
      "defined_out": [
        "0x576f726c6434",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "0x576f726c6434"
      ]
    },
    "2176": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2177": {
      "op": "assert",
      "stack_out": []
    },
    "2178": {
      "retsub": true,
      "op": "retsub"
    },
    "2179": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types",
      "params": {
        "app#0": "uint64",
        "asset#0": "uint64"
      },
      "block": "test_ref_types",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2182": {
      "block": "test_ref_types_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2183": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ]
    },
    "2185": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "2187": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "2189": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2191": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0",
        "inner_txn_params%0%%param_Assets_idx_0#0"
      ]
    },
    "2193": {
      "op": "itxn_field Assets",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0",
        "inner_txn_params%0%%param_Applications_idx_0#0"
      ]
    },
    "2195": {
      "op": "itxn_field Applications",
      "stack_out": [
        "inner_txn_params%0%%param_Accounts_idx_0#0"
      ]
    },
    "2197": {
      "op": "itxn_field Accounts",
      "stack_out": []
    },
    "2199": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(log(asset,account,application)void)"
      ],
      "stack_out": [
        "Method(log(asset,account,application)void)"
      ]
    },
    "2205": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2207": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "0x00"
      ]
    },
    "2210": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2212": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "2215": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2217": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "0x01"
      ]
    },
    "2220": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2222": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2223": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2225": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2226": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2228": {
      "block": "test_ref_types_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2229": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2231": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "asset#0 (copy)"
      ]
    },
    "2233": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2235": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0"
      ]
    },
    "2236": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%1#0",
        "txn.LastLog#0",
        "value%0#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "2238": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0"
      ]
    },
    "2239": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "2241": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "txn.LastLog#0",
        "value%1#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2243": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "txn.LastLog#0",
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "2244": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "2245": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2246": {
      "op": "assert",
      "stack_out": []
    },
    "2247": {
      "retsub": true,
      "op": "retsub"
    },
    "2248": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_account_to_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2251": {
      "block": "test_account_to_address_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "2252": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2254": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "2255": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "2256": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0",
        "32"
      ]
    },
    "2258": {
      "op": "==",
      "defined_out": [
        "lengths_equal%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "lengths_equal%0#0"
      ]
    },
    "2259": {
      "error": "invalid size",
      "op": "assert // invalid size",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2260": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2262": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2264": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(log(address)void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(log(address)void)"
      ]
    },
    "2270": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2272": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "2274": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "2275": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "2277": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2278": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2280": {
      "block": "test_account_to_address_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "2281": {
      "op": "itxn LastLog",
      "defined_out": [
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0"
      ]
    },
    "2283": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "tmp%0#0"
      ]
    },
    "2285": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2286": {
      "op": "assert",
      "stack_out": []
    },
    "2287": {
      "retsub": true,
      "op": "retsub"
    },
    "2288": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2292": {
      "block": "test_native_string_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2293": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2295": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2297": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2299": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2301": {
      "op": "bytec 27 // 0x000173",
      "defined_out": [
        "0x000173"
      ],
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2303": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2305": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2306": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2308": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2309": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2311": {
      "block": "test_native_string_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2312": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2314": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2315": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2318": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2319": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2322": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2323": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2324": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2325": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2328": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2329": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2331": {
      "op": "pushbytes \"echo: s\"",
      "defined_out": [
        "\"echo: s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "\"echo: s\""
      ]
    },
    "2340": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2341": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2342": {
      "op": "itxn_begin"
    },
    "2343": {
      "op": "pushbytes \"s\"",
      "defined_out": [
        "\"s\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s\""
      ]
    },
    "2346": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2347": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2348": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2351": {
      "op": "pushbytes \"s\"",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "\"s\""
      ]
    },
    "2354": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2355": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2357": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2359": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2361": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2363": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2365": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2366": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2369": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2371": {
      "block": "test_native_string_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2372": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2374": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2375": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2378": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2379": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2382": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2383": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2384": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2385": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2388": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2390": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2391": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2392": {
      "op": "itxn_begin"
    },
    "2393": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2395": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2397": {
      "op": "bytec 18 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo_native_string(string)string)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_string(string)string)"
      ]
    },
    "2399": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2401": {
      "op": "bytec 27 // 0x000173",
      "defined_out": [
        "0x000173",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x000173"
      ]
    },
    "2403": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2405": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2406": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2409": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2411": {
      "block": "test_native_string_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2412": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2414": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2415": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2418": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2419": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2422": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2423": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2424": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2425": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2428": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2430": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2431": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2432": {
      "retsub": true,
      "op": "retsub"
    },
    "2433": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2437": {
      "block": "test_native_bytes_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2438": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2440": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2441": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2442": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2445": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "0x62"
      ]
    },
    "2447": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2448": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2450": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2452": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2454": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2456": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2458": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2459": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2461": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2462": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2464": {
      "block": "test_native_bytes_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2465": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2467": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2468": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2471": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2472": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2475": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2476": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2477": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2478": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2481": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2482": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2484": {
      "op": "pushbytes 0x6563686f3a2062",
      "defined_out": [
        "0x6563686f3a2062",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x6563686f3a2062"
      ]
    },
    "2493": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2494": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2495": {
      "op": "itxn_begin"
    },
    "2496": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2498": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%1#0"
      ]
    },
    "2499": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%1#0"
      ]
    },
    "2500": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%1#0"
      ]
    },
    "2503": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%1#0",
        "0x62"
      ]
    },
    "2505": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2506": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2508": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2510": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2512": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2514": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2516": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2517": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2520": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2522": {
      "block": "test_native_bytes_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2523": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2525": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2526": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2529": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2530": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2533": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2534": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2535": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2536": {
      "op": "extract 2 0",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2539": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2541": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2542": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2543": {
      "op": "itxn_begin"
    },
    "2544": {
      "op": "bytec 8 // 0x62",
      "defined_out": [
        "0x62",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x62"
      ]
    },
    "2546": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%2#0"
      ]
    },
    "2547": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%2#0"
      ]
    },
    "2548": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%2#0"
      ]
    },
    "2551": {
      "op": "bytec 8 // 0x62",
      "stack_out": [
        "result1#0",
        "length_uint16%2#0",
        "0x62"
      ]
    },
    "2553": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2554": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2556": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2558": {
      "op": "bytec 19 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo_native_bytes(byte[])byte[])",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "2560": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2562": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2564": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2565": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2567": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2568": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2570": {
      "block": "test_native_bytes_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2571": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2573": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2574": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2577": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2578": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2581": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2582": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2583": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2584": {
      "op": "extract 2 0",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2587": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2589": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2590": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2591": {
      "retsub": true,
      "op": "retsub"
    },
    "2592": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2595": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "result1#0"
      ]
    },
    "2596": {
      "block": "test_native_uint64_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2597": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2599": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2601": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2603": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2605": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2606": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2608": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2609": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2611": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2612": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2614": {
      "block": "test_native_uint64_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2615": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2617": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2618": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2621": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2622": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2625": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2626": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2627": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%0#0"
      ]
    },
    "2628": {
      "op": "btoi",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2629": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2630": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2632": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "2"
      ]
    },
    "2633": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0"
      ]
    },
    "2634": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2635": {
      "op": "itxn_begin"
    },
    "2636": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result1#0",
        "1"
      ]
    },
    "2637": {
      "op": "itob",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2638": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2640": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2642": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2644": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2646": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2648": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2649": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2652": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2654": {
      "block": "test_native_uint64_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2655": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2657": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2658": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "2661": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "2662": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "2665": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "2666": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "2667": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%5#0"
      ]
    },
    "2668": {
      "op": "btoi",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2669": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2671": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2672": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2673": {
      "op": "itxn_begin"
    },
    "2674": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2676": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2678": {
      "op": "bytec 20 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo_native_uint64(uint64)uint64)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "2680": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2682": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2683": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2685": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2686": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2688": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2689": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2691": {
      "block": "test_native_uint64_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2692": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2694": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2695": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%10#0"
      ]
    },
    "2698": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%2#0"
      ]
    },
    "2699": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2702": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "2703": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2704": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%10#0"
      ]
    },
    "2705": {
      "op": "btoi",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2706": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2708": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0"
      ]
    },
    "2709": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2710": {
      "retsub": true,
      "op": "retsub"
    },
    "2711": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_biguint",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2715": {
      "block": "test_native_biguint_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2716": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2718": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2720": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2722": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2724": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2726": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2728": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2729": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2731": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2732": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2734": {
      "block": "test_native_biguint_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2735": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2737": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2738": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2741": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2742": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2745": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2746": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2747": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2748": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2749": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2751": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "0x03"
      ]
    },
    "2753": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%3#0"
      ]
    },
    "2754": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2755": {
      "op": "itxn_begin"
    },
    "2756": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x02"
      ]
    },
    "2758": {
      "op": "len",
      "defined_out": [
        "result1#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "result1#0",
        "value_len%0#0"
      ]
    },
    "2759": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "result1#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "result1#0",
        "value_len%0#0",
        "64"
      ]
    },
    "2761": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "len_ok%0#0"
      ]
    },
    "2762": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0"
      ]
    },
    "2763": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "64"
      ]
    },
    "2765": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "bzero%0#0"
      ]
    },
    "2766": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result1#0",
        "bzero%0#0",
        "0x02"
      ]
    },
    "2768": {
      "op": "b|",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2769": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "2771": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2773": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2775": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "2777": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2779": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2780": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2783": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2785": {
      "block": "test_native_biguint_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2786": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "2788": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "2789": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "2792": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "2793": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "2796": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "2797": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "2798": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "2799": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "2801": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%7#0"
      ]
    },
    "2802": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2803": {
      "op": "itxn_begin"
    },
    "2804": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "2806": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0"
      ]
    },
    "2808": {
      "op": "bytec 21 // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo_native_biguint(uint512)uint512)",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "2810": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2812": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2814": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2816": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2817": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2819": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2820": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2822": {
      "block": "test_native_biguint_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2823": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "2825": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "2826": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%8#0"
      ]
    },
    "2829": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%8#0",
        "awst_tmp%2#0"
      ]
    },
    "2830": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "2833": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "2834": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "2835": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "2836": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "2838": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%11#0"
      ]
    },
    "2839": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2840": {
      "retsub": true,
      "op": "retsub"
    },
    "2841": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2844": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0"
      ]
    },
    "2845": {
      "block": "test_native_tuple_block@0",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_begin"
    },
    "2846": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "2847": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length%0#0"
      ]
    },
    "2848": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%0#0"
      ]
    },
    "2849": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%0#0"
      ]
    },
    "2852": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%0#0",
        "0x6231"
      ]
    },
    "2853": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2854": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "2856": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2858": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "2860": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2862": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "2864": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "2866": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2868": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "2869": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2871": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "2873": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "2875": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "2876": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "2878": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "2879": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "2881": {
      "block": "test_native_tuple_next_txn@1",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "2882": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0"
      ]
    },
    "2884": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "2885": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "2888": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "2889": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2892": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "2893": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "2894": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2895": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0"
      ]
    },
    "2896": {
      "op": "frame_bury 0",
      "defined_out": [
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0"
      ]
    },
    "2898": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "2900": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "item_start_offset%0#0"
      ]
    },
    "2901": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0"
      ]
    },
    "2902": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2903": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2904": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "item_end_offset%0#0"
      ]
    },
    "2905": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "item_start_offset%0#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)"
      ]
    },
    "2907": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result1#0",
        "item_end_offset%0#0",
        "result1#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "2909": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "2911": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "result1#0",
        "item0%0#0"
      ]
    },
    "2912": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0"
      ]
    },
    "2913": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2914": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "2915": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "item_start_offset%1#0"
      ]
    },
    "2916": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0"
      ]
    },
    "2917": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2918": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "result1#0",
        "item_end_offset%1#0"
      ]
    },
    "2919": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "result1#0"
      ]
    },
    "2920": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2921": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "2923": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "2925": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "result1#0",
        "item1%0#0"
      ]
    },
    "2926": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0"
      ]
    },
    "2927": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "2928": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "2930": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "2932": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "result1#0",
        "item2%0#0"
      ]
    },
    "2933": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ]
    },
    "2934": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0",
        "12"
      ]
    },
    "2936": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "2938": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0"
      ]
    },
    "2939": {
      "op": "uncover 3",
      "defined_out": [
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "result1#0",
        "item1%0#0",
        "item2%0#0",
        "item3%0#0",
        "s#0"
      ]
    },
    "2941": {
      "op": "swap",
      "defined_out": [
        "b#0",
        "item2%0#0",
        "item3%0#0",
        "result1#0",
        "s#0"
      ],
      "stack_out": [
        "result1#0",
        "b#0",
        "item2%0#0",
        "s#0",
        "item3%0#0"
      ]
    },
    "2942": {
      "op": "uncover 2",
      "defined_out": [
        "b#0",
        "item3%0#0",
        "result1#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "b#0",
        "s#0",
        "item3%0#0",
        "u#0"
      ]
    },
    "2944": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "u#0",
        "b#0",
        "s#0",
        "bu#0"
      ]
    },
    "2946": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "2948": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "2951": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0",
        "\"echo: s1\""
      ]
    },
    "2953": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result1#0",
        "tmp%4#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "2954": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "2955": {
      "op": "extract 2 0",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%5#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%5#0"
      ]
    },
    "2958": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "bu#0",
        "result1#0",
        "tmp%5#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%5#0",
        "0x6563686f3a206231"
      ]
    },
    "2960": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%6#0",
        "u#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0",
        "tmp%6#0"
      ]
    },
    "2961": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0",
        "u#0"
      ]
    },
    "2962": {
      "op": "btoi",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%7#0"
      ]
    },
    "2963": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%7#0",
        "2"
      ]
    },
    "2964": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "tmp%8#0"
      ]
    },
    "2965": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "bu#0"
      ]
    },
    "2966": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "bu#0",
        "0x03"
      ]
    },
    "2968": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%9#0"
      ]
    },
    "2969": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "2970": {
      "op": "itxn_begin"
    },
    "2971": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "\"s1\""
      ]
    },
    "2973": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%1#0"
      ]
    },
    "2974": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%1#0"
      ]
    },
    "2975": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%1#0"
      ]
    },
    "2978": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "result1#0",
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "2980": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0"
      ]
    },
    "2981": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "0x6231"
      ]
    },
    "2982": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "length%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "2983": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%1#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "2984": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "length_uint16%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "2987": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "0x6231"
      ]
    },
    "2988": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "2989": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "1"
      ]
    },
    "2990": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2991": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "2993": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ]
    },
    "2994": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "value_len%0#0",
        "64"
      ]
    },
    "2996": {
      "op": "<=",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "len_ok%0#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_ok%0#0"
      ]
    },
    "2997": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2998": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "3000": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "bzero%0#0"
      ]
    },
    "3001": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "bzero%0#0",
        "0x02"
      ]
    },
    "3003": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3004": {
      "op": "uncover 3",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_value%2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3006": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3007": {
      "op": "uncover 3",
      "defined_out": [
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "result1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result1#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3009": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3011": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3013": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3015": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3017": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3019": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3021": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3023": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "3025": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3027": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3029": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3030": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3033": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3035": {
      "block": "test_native_tuple_next_txn@2",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3036": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0"
      ]
    },
    "3038": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3039": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%1#0",
        "tmp%10#0"
      ]
    },
    "3042": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "awst_tmp%1#0"
      ]
    },
    "3043": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "3046": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "3047": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "3048": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0"
      ]
    },
    "3049": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result2#0"
      ],
      "stack_out": [
        "result1#0",
        "result2#0",
        "result1#0"
      ]
    },
    "3051": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%13#0"
      ]
    },
    "3052": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3053": {
      "op": "itxn_begin"
    },
    "3054": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "3055": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%3#0"
      ]
    },
    "3056": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%3#0"
      ]
    },
    "3057": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%3#0"
      ]
    },
    "3060": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%3#0",
        "0x6231"
      ]
    },
    "3061": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3062": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3064": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3066": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3068": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3070": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3072": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3074": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3076": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3077": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3079": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3081": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3083": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3084": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3086": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3087": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3089": {
      "block": "test_native_tuple_next_txn@3",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3090": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0"
      ]
    },
    "3092": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3093": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%2#0",
        "tmp%14#0"
      ]
    },
    "3096": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%14#0",
        "awst_tmp%2#0"
      ]
    },
    "3097": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "3100": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0",
        "tmp%15#0",
        "0x151f7c75"
      ]
    },
    "3101": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "3102": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0"
      ]
    },
    "3103": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result3#0"
      ],
      "stack_out": [
        "result1#0",
        "result3#0",
        "result1#0"
      ]
    },
    "3105": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%17#0"
      ]
    },
    "3106": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3107": {
      "op": "itxn_begin"
    },
    "3108": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x6231"
      ]
    },
    "3109": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length%4#0"
      ]
    },
    "3110": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "as_bytes%4#0"
      ]
    },
    "3111": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "length_uint16%4#0"
      ]
    },
    "3114": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result1#0",
        "length_uint16%4#0",
        "0x6231"
      ]
    },
    "3115": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3116": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "3118": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3120": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3122": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3124": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3126": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3128": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3130": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x0000000000000001"
      ]
    },
    "3131": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3133": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3135": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result1#0"
      ]
    },
    "3137": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "appl"
      ]
    },
    "3138": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result1#0"
      ]
    },
    "3140": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "result1#0"
      ],
      "stack_out": [
        "result1#0",
        "0"
      ]
    },
    "3141": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result1#0"
      ]
    },
    "3143": {
      "block": "test_native_tuple_next_txn@4",
      "stack_in": [
        "result1#0"
      ],
      "op": "itxn_submit"
    },
    "3144": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0"
      ]
    },
    "3146": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3147": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "awst_tmp%3#0",
        "tmp%18#0"
      ]
    },
    "3150": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "awst_tmp%3#0"
      ]
    },
    "3151": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "3154": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "3155": {
      "op": "==",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "3156": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result1#0",
        "tmp%18#0"
      ]
    },
    "3157": {
      "op": "dup",
      "defined_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3158": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "0"
      ]
    },
    "3159": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "item_start_offset%2#0"
      ]
    },
    "3160": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%18#0"
      ]
    },
    "3161": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3162": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "3163": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "item_end_offset%2#0"
      ]
    },
    "3164": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "item_start_offset%2#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3166": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "item_end_offset%2#0",
        "tmp%18#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "3168": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3170": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "encoded_item0%0#0"
      ]
    },
    "3171": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%18#0",
        "item0%1#0"
      ]
    },
    "3174": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0"
      ]
    },
    "3175": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3176": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "2"
      ]
    },
    "3177": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "item_start_offset%3#0"
      ]
    },
    "3178": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ]
    },
    "3179": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3180": {
      "op": "len",
      "defined_out": [
        "item0%1#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%18#0",
        "item_end_offset%3#0"
      ]
    },
    "3181": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%18#0"
      ]
    },
    "3182": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3183": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item_end_offset%3#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%3#0"
      ]
    },
    "3185": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "3187": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "encoded_item1%0#0"
      ]
    },
    "3188": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "tmp%18#0",
        "item1%1#0"
      ]
    },
    "3191": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0"
      ]
    },
    "3192": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "3193": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "4"
      ]
    },
    "3195": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "4",
        "8"
      ]
    },
    "3197": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item2%0#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "encoded_item2%0#0"
      ]
    },
    "3198": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%18#0",
        "item2%1#0"
      ]
    },
    "3199": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0"
      ]
    },
    "3200": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0",
        "12"
      ]
    },
    "3202": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result1#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%18#0",
        "12",
        "64"
      ]
    },
    "3204": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item3%0#0",
        "item1%1#0",
        "item2%1#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.0#0",
        "item1%1#0",
        "item2%1#0",
        "encoded_item3%0#0"
      ]
    },
    "3205": {
      "op": "uncover 2",
      "defined_out": [
        "encoded_item3%0#0",
        "item2%1#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.0#0",
        "item2%1#0",
        "encoded_item3%0#0",
        "result_native.1#0"
      ]
    },
    "3207": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.0#0",
        "item2%1#0",
        "encoded_item3%0#0"
      ]
    },
    "3209": {
      "op": "swap",
      "defined_out": [
        "encoded_item3%0#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.0#0",
        "encoded_item3%0#0",
        "result_native.2#0"
      ]
    },
    "3210": {
      "op": "cover 3",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result_native.3#0"
      ]
    },
    "3212": {
      "op": "cover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "3214": {
      "op": "frame_dig 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0"
      ]
    },
    "3216": {
      "op": "dup",
      "defined_out": [
        "result1#0",
        "result1#0 (copy)",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "0"
      ]
    },
    "3218": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%4#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item_start_offset%4#0"
      ]
    },
    "3219": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0"
      ]
    },
    "3220": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3221": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3222": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "item_end_offset%4#0"
      ]
    },
    "3223": {
      "op": "dig 1",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "item_start_offset%4#0",
        "result1#0",
        "item_end_offset%4#0",
        "result1#0 (copy)"
      ]
    },
    "3225": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item_end_offset%4#0",
        "result1#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3227": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3229": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "item0%2#0"
      ]
    },
    "3230": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result1#0",
        "tmp%21#0"
      ]
    },
    "3233": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%21#0",
        "result_native.0#0"
      ]
    },
    "3235": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%22#0"
      ]
    },
    "3236": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0"
      ]
    },
    "3237": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3238": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "2"
      ]
    },
    "3239": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%7#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "item_start_offset%7#0"
      ]
    },
    "3240": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0"
      ]
    },
    "3241": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3242": {
      "op": "len",
      "defined_out": [
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "result1#0",
        "item_end_offset%7#0"
      ]
    },
    "3243": {
      "op": "swap",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "result1#0"
      ]
    },
    "3244": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3245": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "item_end_offset%7#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "3247": {
      "op": "uncover 3",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "result1#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "3249": {
      "op": "substring3",
      "defined_out": [
        "item1%3#0",
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "item1%3#0"
      ]
    },
    "3250": {
      "op": "extract 2 0",
      "defined_out": [
        "result1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result1#0",
        "tmp%23#0"
      ]
    },
    "3253": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%23#0",
        "result_native.1#0"
      ]
    },
    "3255": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%24#0"
      ]
    },
    "3256": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0"
      ]
    },
    "3257": {
      "op": "dup",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)"
      ]
    },
    "3258": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4"
      ]
    },
    "3260": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "result1#0 (copy)",
        "4",
        "8"
      ]
    },
    "3262": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item2%4#0",
        "result1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "item2%4#0"
      ]
    },
    "3263": {
      "op": "btoi",
      "defined_out": [
        "result1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result_native.2#0",
        "result1#0",
        "tmp%25#0"
      ]
    },
    "3264": {
      "op": "uncover 2",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%25#0",
        "result_native.2#0"
      ]
    },
    "3266": {
      "op": "==",
      "defined_out": [
        "result1#0",
        "result_native.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "tmp%26#0"
      ]
    },
    "3267": {
      "op": "assert",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0"
      ]
    },
    "3268": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12"
      ]
    },
    "3270": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "result1#0",
        "12",
        "64"
      ]
    },
    "3272": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item3%4#0",
        "result1#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result1#0",
        "result_native.3#0",
        "item3%4#0"
      ]
    },
    "3273": {
      "op": "b==",
      "defined_out": [
        "result1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result1#0",
        "tmp%27#0"
      ]
    },
    "3274": {
      "op": "assert",
      "stack_out": [
        "result1#0"
      ]
    },
    "3275": {
      "retsub": true,
      "op": "retsub"
    },
    "3276": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_native_tuple_method_ref",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3279": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0"
      ]
    },
    "3280": {
      "op": "dupn 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0"
      ]
    },
    "3282": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3283": {
      "block": "test_native_tuple_method_ref_block@0",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_begin"
    },
    "3284": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3285": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%0#0"
      ]
    },
    "3286": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%0#0"
      ]
    },
    "3287": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%0#0"
      ]
    },
    "3290": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%0#0",
        "0x6231"
      ]
    },
    "3291": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3292": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3294": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3296": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3298": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3300": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3302": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3304": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3306": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3307": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3309": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3311": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3313": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3314": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3316": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3317": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3319": {
      "block": "test_native_tuple_method_ref_next_txn@1",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3320": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0"
      ]
    },
    "3322": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3323": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3326": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3327": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3330": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3331": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3332": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0"
      ]
    },
    "3333": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3335": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3336": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "3337": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3338": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3339": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3340": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3342": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3344": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3346": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "encoded_item0%0#0"
      ]
    },
    "3347": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%0#0",
        "item0%0#0"
      ]
    },
    "3350": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0"
      ]
    },
    "3351": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3352": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3353": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3354": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ]
    },
    "3355": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3356": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3357": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%0#0"
      ]
    },
    "3358": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3359": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3361": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3363": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "encoded_item1%0#0"
      ]
    },
    "3364": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "tmp%0#0",
        "item1%0#0"
      ]
    },
    "3367": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ]
    },
    "3368": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3369": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "4"
      ]
    },
    "3371": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "4",
        "8"
      ]
    },
    "3373": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item2%0#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "encoded_item2%0#0"
      ]
    },
    "3374": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "item2%0#0"
      ]
    },
    "3375": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0"
      ]
    },
    "3376": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0",
        "12"
      ]
    },
    "3378": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%0#0",
        "12",
        "64"
      ]
    },
    "3380": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item3%0#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%0#0",
        "item1%0#0",
        "item2%0#0",
        "encoded_item3%0#0"
      ]
    },
    "3381": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%0#0",
        "item1%0#0",
        "item2%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0#0",
        "item2%0#0",
        "encoded_item3%0#0",
        "result.0#0"
      ]
    },
    "3383": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0#0",
        "item2%0#0",
        "encoded_item3%0#0",
        "result.0#0",
        "result.0#0 (copy)"
      ]
    },
    "3384": {
      "op": "cover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0#0",
        "item2%0#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.0#0"
      ]
    },
    "3386": {
      "op": "frame_bury 0",
      "defined_out": [
        "encoded_item3%0#0",
        "item1%0#0",
        "item2%0#0",
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%0#0",
        "item2%0#0",
        "result.0#0",
        "encoded_item3%0#0"
      ]
    },
    "3388": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%0#0",
        "item2%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.1#0"
      ]
    },
    "3390": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.1#0",
        "result.1#0 (copy)"
      ]
    },
    "3391": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0#0",
        "result.1#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.1#0"
      ]
    },
    "3393": {
      "op": "frame_bury 1",
      "defined_out": [
        "encoded_item3%0#0",
        "item2%0#0",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%0#0",
        "result.1#0",
        "result.0#0",
        "encoded_item3%0#0"
      ]
    },
    "3395": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.2#0"
      ]
    },
    "3397": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.2#0",
        "result.2#0 (copy)"
      ]
    },
    "3398": {
      "op": "cover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "encoded_item3%0#0",
        "result.2#0"
      ]
    },
    "3400": {
      "op": "frame_bury 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0"
      ]
    },
    "3402": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0",
        "result.3#0 (copy)"
      ]
    },
    "3403": {
      "op": "cover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0"
      ]
    },
    "3405": {
      "op": "frame_bury 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "s#0"
      ]
    },
    "3407": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "s#0",
        "result.3#0",
        "result.2#0",
        "b#0"
      ]
    },
    "3409": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "b#0",
        "s#0",
        "result.3#0",
        "u#0"
      ]
    },
    "3411": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "u#0",
        "b#0",
        "s#0",
        "bu#0"
      ]
    },
    "3413": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0"
      ]
    },
    "3415": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "s#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "s#0",
        "\"echo: s1\""
      ]
    },
    "3417": {
      "op": "==",
      "defined_out": [
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%3#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "3418": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0"
      ]
    },
    "3419": {
      "op": "bytec 28 // 0x6563686f3a206231",
      "defined_out": [
        "0x6563686f3a206231",
        "b#0",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "b#0",
        "0x6563686f3a206231"
      ]
    },
    "3421": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%4#0",
        "u#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "tmp%4#0"
      ]
    },
    "3422": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0"
      ]
    },
    "3423": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "u#0",
        "2"
      ]
    },
    "3424": {
      "op": "==",
      "defined_out": [
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "tmp%5#0"
      ]
    },
    "3425": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0"
      ]
    },
    "3426": {
      "op": "bytec 22 // 0x03",
      "defined_out": [
        "0x03",
        "bu#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "bu#0",
        "0x03"
      ]
    },
    "3428": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%6#0"
      ]
    },
    "3429": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3430": {
      "op": "itxn_begin"
    },
    "3431": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\"",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "\"s1\""
      ]
    },
    "3433": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%1#0"
      ]
    },
    "3434": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%1#0"
      ]
    },
    "3435": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%1#0"
      ]
    },
    "3438": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "3440": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0"
      ]
    },
    "3441": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "0x6231"
      ]
    },
    "3442": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "length%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "3443": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_value%1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "3444": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%1#0",
        "length_uint16%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "3447": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "0x6231"
      ]
    },
    "3448": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "3449": {
      "op": "intc_3 // 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "1"
      ]
    },
    "3450": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "3451": {
      "op": "bytec 9 // 0x02",
      "defined_out": [
        "0x02",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x02"
      ]
    },
    "3453": {
      "op": "len",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ]
    },
    "3454": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "value_len%0#0",
        "64"
      ]
    },
    "3456": {
      "op": "<=",
      "defined_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "len_ok%0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "len_ok%0#0"
      ]
    },
    "3457": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "3458": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "3460": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "bzero%0#0"
      ]
    },
    "3461": {
      "op": "bytec 9 // 0x02",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "bzero%0#0",
        "0x02"
      ]
    },
    "3463": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "3464": {
      "op": "uncover 3",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_value%2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3466": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "arc4_encoded%0#0"
      ]
    },
    "3467": {
      "op": "uncover 3",
      "defined_out": [
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "val_as_bytes%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "arc4_encoded%0#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3469": {
      "op": "cover 2",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3471": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3473": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "3475": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3477": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3479": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3481": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3483": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_3#0"
      ]
    },
    "3485": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_4#0"
      ]
    },
    "3487": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3489": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3490": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3493": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3495": {
      "block": "test_native_tuple_method_ref_next_txn@2",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3496": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0"
      ]
    },
    "3498": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "3499": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "3502": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "awst_tmp%1#0"
      ]
    },
    "3503": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "3506": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "3507": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "3508": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0"
      ]
    },
    "3509": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3510": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "0"
      ]
    },
    "3511": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "item_start_offset%2#0"
      ]
    },
    "3512": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ]
    },
    "3513": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3514": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "3515": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%7#0",
        "item_end_offset%2#0"
      ]
    },
    "3516": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%2#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3518": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "item_end_offset%2#0",
        "tmp%7#0 (copy)",
        "item_start_offset%2#0"
      ]
    },
    "3520": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "3522": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "encoded_item0%1#0"
      ]
    },
    "3523": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%7#0",
        "item0%1#0"
      ]
    },
    "3526": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0"
      ]
    },
    "3527": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3528": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "2"
      ]
    },
    "3529": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "item_start_offset%3#0"
      ]
    },
    "3530": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ]
    },
    "3531": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3532": {
      "op": "len",
      "defined_out": [
        "item0%1#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "tmp%7#0",
        "item_end_offset%3#0"
      ]
    },
    "3533": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%7#0"
      ]
    },
    "3534": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3535": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item_end_offset%3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "item_start_offset%3#0"
      ]
    },
    "3537": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "3539": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "encoded_item1%1#0"
      ]
    },
    "3540": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "tmp%7#0",
        "item1%1#0"
      ]
    },
    "3543": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0"
      ]
    },
    "3544": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "3545": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "4"
      ]
    },
    "3547": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "4",
        "8"
      ]
    },
    "3549": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item2%1#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "encoded_item2%1#0"
      ]
    },
    "3550": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "tmp%7#0",
        "item2%1#0"
      ]
    },
    "3551": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0"
      ]
    },
    "3552": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0",
        "12"
      ]
    },
    "3554": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "tmp%7#0",
        "12",
        "64"
      ]
    },
    "3556": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item3%1#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%1#0",
        "item1%1#0",
        "item2%1#0",
        "encoded_item3%1#0"
      ]
    },
    "3557": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%1#0",
        "item1%1#0",
        "item2%1#0",
        "result_2.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%1#0",
        "item2%1#0",
        "encoded_item3%1#0",
        "result_2.0#0"
      ]
    },
    "3559": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%1#0",
        "item2%1#0",
        "result_2.0#0",
        "encoded_item3%1#0"
      ]
    },
    "3560": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%1#0",
        "item2%1#0",
        "result_2.0#0",
        "result_2.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%1#0",
        "result_2.0#0",
        "encoded_item3%1#0",
        "result_2.1#0"
      ]
    },
    "3562": {
      "op": "cover 2",
      "defined_out": [
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "result_2.3#0"
      ]
    },
    "3564": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0"
      ]
    },
    "3566": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_2.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "result_2.0#0",
        "result.0#0"
      ]
    },
    "3568": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "result_2.1#0",
        "tmp%10#0"
      ]
    },
    "3569": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%10#0",
        "result_2.1#0"
      ]
    },
    "3570": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%10#0",
        "result_2.1#0",
        "result.1#0"
      ]
    },
    "3572": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "3573": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "result_2.2#0",
        "tmp%12#0"
      ]
    },
    "3574": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%12#0",
        "result_2.2#0"
      ]
    },
    "3575": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.2#0",
        "result_2.3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%12#0",
        "result_2.2#0",
        "result.2#0"
      ]
    },
    "3577": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "3578": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_2.3#0",
        "tmp%14#0"
      ]
    },
    "3579": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%14#0",
        "result_2.3#0"
      ]
    },
    "3580": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_2.3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%14#0",
        "result_2.3#0",
        "result.3#0"
      ]
    },
    "3582": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "3583": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%16#0"
      ]
    },
    "3584": {
      "error": "expected native arguments to give the same result",
      "op": "assert // expected native arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3585": {
      "op": "itxn_begin"
    },
    "3586": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3587": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%3#0"
      ]
    },
    "3588": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%3#0"
      ]
    },
    "3589": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%3#0"
      ]
    },
    "3592": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%3#0",
        "0x6231"
      ]
    },
    "3593": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3594": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "3596": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3598": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3600": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3602": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3604": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%2%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3606": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3608": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3609": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3611": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3613": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3615": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3616": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3619": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3621": {
      "block": "test_native_tuple_method_ref_next_txn@3",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3622": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0"
      ]
    },
    "3624": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "3625": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%2#0",
        "tmp%17#0"
      ]
    },
    "3628": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "awst_tmp%2#0"
      ]
    },
    "3629": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "3632": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "3633": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "3634": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0"
      ]
    },
    "3635": {
      "op": "dup",
      "defined_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3636": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "3637": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "item_start_offset%4#0"
      ]
    },
    "3638": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%17#0"
      ]
    },
    "3639": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3640": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%4#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "2"
      ]
    },
    "3641": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%4#0",
        "item_start_offset%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%17#0",
        "item_end_offset%4#0"
      ]
    },
    "3642": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%4#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3644": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "item_end_offset%4#0",
        "tmp%17#0 (copy)",
        "item_start_offset%4#0"
      ]
    },
    "3646": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "3648": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "encoded_item0%2#0"
      ]
    },
    "3649": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%17#0",
        "item0%2#0"
      ]
    },
    "3652": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0"
      ]
    },
    "3653": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3654": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "2"
      ]
    },
    "3655": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item_start_offset%5#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "item_start_offset%5#0"
      ]
    },
    "3656": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_start_offset%5#0",
        "tmp%17#0"
      ]
    },
    "3657": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_start_offset%5#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3658": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_start_offset%5#0",
        "tmp%17#0",
        "item_end_offset%5#0"
      ]
    },
    "3659": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%17#0"
      ]
    },
    "3660": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3661": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item_end_offset%5#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "3663": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "3665": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "encoded_item1%2#0"
      ]
    },
    "3666": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "tmp%17#0",
        "item1%2#0"
      ]
    },
    "3669": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0"
      ]
    },
    "3670": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "3671": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "4"
      ]
    },
    "3673": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "4",
        "8"
      ]
    },
    "3675": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item2%2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "encoded_item2%2#0"
      ]
    },
    "3676": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "tmp%17#0",
        "item2%2#0"
      ]
    },
    "3677": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0"
      ]
    },
    "3678": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0",
        "12"
      ]
    },
    "3680": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "tmp%17#0",
        "12",
        "64"
      ]
    },
    "3682": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item3%2#0",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%2#0",
        "item1%2#0",
        "item2%2#0",
        "encoded_item3%2#0"
      ]
    },
    "3683": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%2#0",
        "item1%2#0",
        "item2%2#0",
        "result_3.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%2#0",
        "item2%2#0",
        "encoded_item3%2#0",
        "result_3.0#0"
      ]
    },
    "3685": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%2#0",
        "item2%2#0",
        "result_3.0#0",
        "encoded_item3%2#0"
      ]
    },
    "3686": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%2#0",
        "item2%2#0",
        "result_3.0#0",
        "result_3.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%2#0",
        "result_3.0#0",
        "encoded_item3%2#0",
        "result_3.1#0"
      ]
    },
    "3688": {
      "op": "cover 2",
      "defined_out": [
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "result_3.3#0"
      ]
    },
    "3690": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0"
      ]
    },
    "3692": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_3.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "result_3.0#0",
        "result.0#0"
      ]
    },
    "3694": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "result_3.1#0",
        "tmp%20#0"
      ]
    },
    "3695": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%20#0",
        "result_3.1#0"
      ]
    },
    "3696": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%20#0",
        "result_3.1#0",
        "result.1#0"
      ]
    },
    "3698": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3699": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "result_3.2#0",
        "tmp%22#0"
      ]
    },
    "3700": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%22#0",
        "result_3.2#0"
      ]
    },
    "3701": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.2#0",
        "result_3.3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%22#0",
        "result_3.2#0",
        "result.2#0"
      ]
    },
    "3703": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "3704": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_3.3#0",
        "tmp%24#0"
      ]
    },
    "3705": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%24#0",
        "result_3.3#0"
      ]
    },
    "3706": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_3.3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%24#0",
        "result_3.3#0",
        "result.3#0"
      ]
    },
    "3708": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "3709": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%26#0"
      ]
    },
    "3710": {
      "error": "expected arc4 arguments to give the same result",
      "op": "assert // expected arc4 arguments to give the same result",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3711": {
      "op": "itxn_begin"
    },
    "3712": {
      "op": "bytec_2 // 0x6231",
      "defined_out": [
        "0x6231",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x6231"
      ]
    },
    "3713": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length%4#0"
      ]
    },
    "3714": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "as_bytes%4#0"
      ]
    },
    "3715": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%4#0"
      ]
    },
    "3718": {
      "op": "bytec_2 // 0x6231",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "length_uint16%4#0",
        "0x6231"
      ]
    },
    "3719": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3720": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%3%%param_ApplicationID_idx_0#0"
      ]
    },
    "3722": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3724": {
      "op": "bytec 6 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "3726": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3728": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x00027331",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0",
        "0x00027331"
      ]
    },
    "3730": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "inner_txn_params%3%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "3732": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3734": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x0000000000000001"
      ]
    },
    "3735": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3737": {
      "op": "bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002"
      ]
    },
    "3739": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3741": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "appl"
      ]
    },
    "3742": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3744": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "0"
      ]
    },
    "3745": {
      "op": "itxn_field Fee",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3747": {
      "block": "test_native_tuple_method_ref_next_txn@4",
      "stack_in": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ],
      "op": "itxn_submit"
    },
    "3748": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0"
      ]
    },
    "3750": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "3751": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "awst_tmp%3#0",
        "tmp%27#0"
      ]
    },
    "3754": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "awst_tmp%3#0"
      ]
    },
    "3755": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "3758": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%28#0",
        "0x151f7c75"
      ]
    },
    "3759": {
      "op": "==",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "3760": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0"
      ]
    },
    "3761": {
      "op": "dup",
      "defined_out": [
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3762": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "0"
      ]
    },
    "3763": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%6#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "item_start_offset%6#0"
      ]
    },
    "3764": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%27#0"
      ]
    },
    "3765": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3766": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%6#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "2"
      ]
    },
    "3767": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%27#0",
        "item_end_offset%6#0"
      ]
    },
    "3768": {
      "op": "dig 1",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item_start_offset%6#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3770": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "item_end_offset%6#0",
        "tmp%27#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "3772": {
      "op": "uncover 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "3774": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "encoded_item0%3#0"
      ]
    },
    "3775": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%27#0",
        "item0%3#0"
      ]
    },
    "3778": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0"
      ]
    },
    "3779": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3780": {
      "op": "intc_2 // 2",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "2"
      ]
    },
    "3781": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3#0",
        "item_start_offset%7#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "item_start_offset%7#0"
      ]
    },
    "3782": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "tmp%27#0"
      ]
    },
    "3783": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3784": {
      "op": "len",
      "defined_out": [
        "item0%3#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "tmp%27#0",
        "item_end_offset%7#0"
      ]
    },
    "3785": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "tmp%27#0"
      ]
    },
    "3786": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3787": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item_end_offset%7#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "item_start_offset%7#0"
      ]
    },
    "3789": {
      "op": "uncover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "3791": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%3#0",
        "item0%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "encoded_item1%3#0"
      ]
    },
    "3792": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "tmp%27#0",
        "item1%3#0"
      ]
    },
    "3795": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0"
      ]
    },
    "3796": {
      "op": "dup",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ]
    },
    "3797": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "4"
      ]
    },
    "3799": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "4",
        "8",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "tmp%27#0 (copy)",
        "4",
        "8"
      ]
    },
    "3801": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item2%3#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "encoded_item2%3#0"
      ]
    },
    "3802": {
      "op": "btoi",
      "defined_out": [
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "tmp%27#0",
        "item2%3#0"
      ]
    },
    "3803": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0"
      ]
    },
    "3804": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0",
        "12"
      ]
    },
    "3806": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "12",
        "64",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "tmp%27#0",
        "12",
        "64"
      ]
    },
    "3808": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item3%3#0",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%3#0",
        "encoded_item3%3#0"
      ]
    },
    "3809": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%3#0",
        "item1%3#0",
        "item2%3#0",
        "result_native.0#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%3#0",
        "item2%3#0",
        "encoded_item3%3#0",
        "result_native.0#0"
      ]
    },
    "3811": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item1%3#0",
        "item2%3#0",
        "result_native.0#0",
        "encoded_item3%3#0"
      ]
    },
    "3812": {
      "op": "uncover 3",
      "defined_out": [
        "encoded_item3%3#0",
        "item2%3#0",
        "result_native.0#0",
        "result_native.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "item2%3#0",
        "result_native.0#0",
        "encoded_item3%3#0",
        "result_native.1#0"
      ]
    },
    "3814": {
      "op": "cover 2",
      "defined_out": [
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result_native.3#0"
      ]
    },
    "3816": {
      "op": "cover 3",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0"
      ]
    },
    "3818": {
      "op": "frame_dig 0",
      "defined_out": [
        "result.0#0",
        "result_native.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "result_native.0#0",
        "result.0#0"
      ]
    },
    "3820": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "result_native.1#0",
        "tmp%30#0"
      ]
    },
    "3821": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%30#0",
        "result_native.1#0"
      ]
    },
    "3822": {
      "op": "frame_dig 1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%30#0",
        "result_native.1#0",
        "result.1#0"
      ]
    },
    "3824": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "3825": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "result_native.2#0",
        "tmp%32#0"
      ]
    },
    "3826": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%32#0",
        "result_native.2#0"
      ]
    },
    "3827": {
      "op": "frame_dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.2#0",
        "result_native.3#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%32#0",
        "result_native.2#0",
        "result.2#0"
      ]
    },
    "3829": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "3830": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "result_native.3#0",
        "tmp%34#0"
      ]
    },
    "3831": {
      "op": "swap",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%34#0",
        "result_native.3#0"
      ]
    },
    "3832": {
      "op": "frame_dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result_native.3#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%34#0",
        "result_native.3#0",
        "result.3#0"
      ]
    },
    "3834": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "3835": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0",
        "tmp%36#0"
      ]
    },
    "3836": {
      "op": "assert",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.3#0",
        "result.2#0"
      ]
    },
    "3837": {
      "retsub": true,
      "op": "retsub"
    },
    "3838": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_nested_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3841": {
      "block": "test_nested_tuples_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "3842": {
      "op": "bytec 15 // 0x33",
      "defined_out": [
        "0x33"
      ],
      "stack_out": [
        "0x33"
      ]
    },
    "3844": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "3845": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "3846": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "3849": {
      "op": "bytec 15 // 0x33",
      "stack_out": [
        "length_uint16%0#0",
        "0x33"
      ]
    },
    "3851": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3852": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x"
      ]
    },
    "3853": {
      "op": "bytec 7 // 0x00027331",
      "defined_out": [
        "0x",
        "0x00027331",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "0x00027331"
      ]
    },
    "3855": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0"
      ]
    },
    "3856": {
      "op": "bytec 7 // 0x00027331",
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "0x00027331"
      ]
    },
    "3858": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "data_length%0#0"
      ]
    },
    "3859": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "data_length%0#0",
        "4"
      ]
    },
    "3861": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "3862": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "4"
      ]
    },
    "3864": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "current_tail_offset%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "as_bytes%1#0"
      ]
    },
    "3865": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "3868": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "3869": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "3870": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0"
      ]
    },
    "3871": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "3873": {
      "op": "bytec 29 // 0x00027332",
      "defined_out": [
        "0x00027332",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "encoded_value%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%0#0",
        "0x00027332"
      ]
    },
    "3875": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%0#0",
        "encoded_value%0#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%0#0",
        "tail%1#0"
      ]
    },
    "3876": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "tail%1#0",
        "encoded%0#0"
      ]
    },
    "3877": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "tail%1#0",
        "encoded%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "3879": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded%0#0",
        "encoded_value%0#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%1#0",
        "encoded%0#0",
        "as_bytes%2#0"
      ]
    },
    "3880": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%1#0",
        "encoded%0#0",
        "offset_as_uint16%1#0"
      ]
    },
    "3883": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "encoded_value%0#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%1#0",
        "encoded%1#0"
      ]
    },
    "3884": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded%1#0",
        "tail%1#0"
      ]
    },
    "3885": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded%2#0"
      ]
    },
    "3886": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "encoded%2#0",
        "0x"
      ]
    },
    "3887": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%2#0",
        "encoded%2#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded%2#0",
        "0x",
        "encoded%2#0 (copy)"
      ]
    },
    "3889": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded%2#0",
        "tail%2#0"
      ]
    },
    "3890": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "encoded%2#0"
      ]
    },
    "3891": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "data_length%2#0"
      ]
    },
    "3892": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "data_length%2#0",
        "4"
      ]
    },
    "3894": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "3895": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "4"
      ]
    },
    "3897": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "current_tail_offset%2#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "as_bytes%3#0"
      ]
    },
    "3898": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%2#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "3901": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "3902": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "3903": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0"
      ]
    },
    "3904": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "0x"
      ]
    },
    "3905": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "0x",
        "0x0000000000000001"
      ]
    },
    "3906": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%4#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%4#0"
      ]
    },
    "3907": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%4#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%4#0",
        "0x0000000000000002"
      ]
    },
    "3909": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "encoded_value%0#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0"
      ]
    },
    "3910": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%0#0",
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "0x"
      ]
    },
    "3911": {
      "op": "uncover 5",
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "0x",
        "encoded_value%0#0"
      ]
    },
    "3913": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "tail%2#0",
        "tail%3#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "tail%3#0"
      ]
    },
    "3914": {
      "op": "swap",
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0",
        "encoded%5#0"
      ]
    },
    "3915": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "tail%2#0",
        "tail%3#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0",
        "encoded%5#0",
        "18"
      ]
    },
    "3917": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "tail%2#0",
        "tail%3#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0",
        "encoded%5#0",
        "as_bytes%4#0"
      ]
    },
    "3918": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%5#0",
        "offset_as_uint16%3#0",
        "tail%2#0",
        "tail%3#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0",
        "encoded%5#0",
        "offset_as_uint16%3#0"
      ]
    },
    "3921": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%6#0",
        "tail%2#0",
        "tail%3#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%3#0",
        "encoded%6#0"
      ]
    },
    "3922": {
      "op": "swap",
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%6#0",
        "tail%3#0"
      ]
    },
    "3923": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%7#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%7#0"
      ]
    },
    "3924": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "encoded%7#0",
        "tail%2#0"
      ]
    },
    "3926": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%2#0",
        "encoded%7#0"
      ]
    },
    "3927": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%4#0"
      ],
      "stack_out": [
        "current_tail_offset%2#0",
        "encoded%3#0",
        "tail%4#0"
      ]
    },
    "3928": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%3#0",
        "tail%4#0",
        "current_tail_offset%2#0"
      ]
    },
    "3930": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded%3#0",
        "tail%4#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%4#0",
        "as_bytes%5#0"
      ]
    },
    "3931": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%4#0",
        "tail%4#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%4#0",
        "offset_as_uint16%4#0"
      ]
    },
    "3934": {
      "op": "uncover 2",
      "stack_out": [
        "tail%4#0",
        "offset_as_uint16%4#0",
        "encoded%3#0"
      ]
    },
    "3936": {
      "op": "swap",
      "stack_out": [
        "tail%4#0",
        "encoded%3#0",
        "offset_as_uint16%4#0"
      ]
    },
    "3937": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0",
        "tail%4#0"
      ],
      "stack_out": [
        "tail%4#0",
        "encoded%8#0"
      ]
    },
    "3938": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "tail%4#0"
      ]
    },
    "3939": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3940": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "3942": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3944": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "3946": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "3948": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "3950": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "3951": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "3953": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3954": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "3956": {
      "block": "test_nested_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "3957": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "3959": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "3960": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "3963": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "3964": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "3967": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "3968": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "3969": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3970": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3971": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "3972": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%0#0"
      ]
    },
    "3973": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0"
      ]
    },
    "3974": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3975": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "3976": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3977": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "3979": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "item_end_offset%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "3981": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "3983": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0"
      ]
    },
    "3984": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3985": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "0"
      ]
    },
    "3986": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%0#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "3987": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0"
      ]
    },
    "3988": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3989": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "2"
      ]
    },
    "3990": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "3991": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "item_start_offset%1#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "3993": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "item_end_offset%1#0",
        "encoded_item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "3995": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "3997": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%0#0",
        "encoded_item0%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%1#0"
      ]
    },
    "3998": {
      "op": "extract 2 0",
      "defined_out": [
        "encoded_item0%0#0",
        "item0%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_item0%0#0",
        "item0%0#0"
      ]
    },
    "4001": {
      "op": "cover 2",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "encoded_item0%0#0"
      ]
    },
    "4003": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "4004": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)",
        "2"
      ]
    },
    "4005": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%0#0",
        "item0%0#0",
        "item_start_offset%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "encoded_item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "4006": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "encoded_item0%0#0"
      ]
    },
    "4007": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "encoded_item0%0#0",
        "encoded_item0%0#0 (copy)"
      ]
    },
    "4008": {
      "op": "len",
      "defined_out": [
        "encoded_item0%0#0",
        "item0%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "encoded_item0%0#0",
        "item_end_offset%2#0"
      ]
    },
    "4009": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "encoded_item0%0#0"
      ]
    },
    "4010": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item_end_offset%2#0",
        "encoded_item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "4012": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "encoded_item0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "4014": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "tmp%0#0",
        "item1%0#0"
      ]
    },
    "4015": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0"
      ]
    },
    "4016": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4017": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "4018": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "item_start_offset%3#0"
      ]
    },
    "4019": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ]
    },
    "4020": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "4021": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%0#0",
        "item_end_offset%3#0"
      ]
    },
    "4022": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%0#0"
      ]
    },
    "4023": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "tmp%0#0",
        "item_start_offset%3#0"
      ]
    },
    "4025": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "tmp%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "4027": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0"
      ]
    },
    "4028": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "item0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "4029": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "0"
      ]
    },
    "4030": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "item0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "4032": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item0%2#0",
        "encoded_item1%0#0",
        "item0%0#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0",
        "encoded_item0%2#0"
      ]
    },
    "4033": {
      "op": "btoi",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "encoded_item1%0#0",
        "item0%1#0"
      ]
    },
    "4034": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "encoded_item1%0#0"
      ]
    },
    "4035": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "4036": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "8"
      ]
    },
    "4038": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "8",
        "8"
      ]
    },
    "4039": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "encoded_item1%0#0",
        "item1%1#0"
      ]
    },
    "4040": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item1%0#0"
      ]
    },
    "4041": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "4042": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)",
        "16"
      ]
    },
    "4044": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item1%0#0",
        "item_start_offset%4#0"
      ]
    },
    "4045": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "encoded_item1%0#0"
      ]
    },
    "4046": {
      "op": "dup",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "encoded_item1%0#0",
        "encoded_item1%0#0 (copy)"
      ]
    },
    "4047": {
      "op": "len",
      "defined_out": [
        "encoded_item1%0#0",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "encoded_item1%0#0",
        "item_end_offset%4#0"
      ]
    },
    "4048": {
      "op": "swap",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "encoded_item1%0#0"
      ]
    },
    "4049": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item_end_offset%4#0",
        "encoded_item1%0#0",
        "item_start_offset%4#0"
      ]
    },
    "4051": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item1%0#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "4053": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%0#0",
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "encoded_item2%0#0"
      ]
    },
    "4054": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item2%0#0"
      ]
    },
    "4057": {
      "op": "uncover 4",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item1%1#0",
        "item2%0#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "item2%0#0",
        "result.0.0#0"
      ]
    },
    "4059": {
      "op": "swap",
      "stack_out": [
        "item1%0#0",
        "item0%1#0",
        "item1%1#0",
        "result.0.0#0",
        "item2%0#0"
      ]
    },
    "4060": {
      "op": "uncover 4",
      "defined_out": [
        "item0%1#0",
        "item1%1#0",
        "item2%0#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%1#0",
        "result.0.0#0",
        "item2%0#0",
        "result.0.1#0"
      ]
    },
    "4062": {
      "op": "cover 2",
      "stack_out": [
        "item0%1#0",
        "item1%1#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%0#0"
      ]
    },
    "4064": {
      "op": "uncover 4",
      "defined_out": [
        "item1%1#0",
        "item2%0#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%1#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%0#0",
        "result.1.0#0"
      ]
    },
    "4066": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "4068": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "4070": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "4072": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "4074": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "4076": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "4078": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "4080": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "4082": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%3#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%3#0"
      ]
    },
    "4083": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "4084": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00086563686f3a207332"
      ]
    },
    "4086": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%4#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%4#0"
      ]
    },
    "4087": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "4088": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "4089": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%5#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%5#0"
      ]
    },
    "4090": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "4091": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000003"
      ]
    },
    "4093": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%6#0"
      ]
    },
    "4094": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "4095": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "4097": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "4098": {
      "op": "assert",
      "stack_out": []
    },
    "4099": {
      "op": "itxn_begin"
    },
    "4100": {
      "op": "bytec 10 // \"s1\"",
      "defined_out": [
        "\"s1\""
      ],
      "stack_out": [
        "\"s1\""
      ]
    },
    "4102": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "4103": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0"
      ],
      "stack_out": [
        "as_bytes%6#0"
      ]
    },
    "4104": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "4107": {
      "op": "bytec 10 // \"s1\"",
      "stack_out": [
        "length_uint16%1#0",
        "\"s1\""
      ]
    },
    "4109": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "4110": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x"
      ]
    },
    "4111": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x",
        "encoded_value%1#0 (copy)"
      ]
    },
    "4113": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "tail%5#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tail%5#0"
      ]
    },
    "4114": {
      "op": "swap",
      "stack_out": [
        "tail%5#0",
        "encoded_value%1#0"
      ]
    },
    "4115": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "data_length%5#0"
      ]
    },
    "4116": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%5#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "data_length%5#0",
        "4"
      ]
    },
    "4118": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%5#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0"
      ]
    },
    "4119": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "4"
      ]
    },
    "4121": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "current_tail_offset%5#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "as_bytes%7#0"
      ]
    },
    "4122": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%5#0",
        "offset_as_uint16%5#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "offset_as_uint16%5#0"
      ]
    },
    "4125": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "offset_as_uint16%5#0",
        "0x"
      ]
    },
    "4126": {
      "op": "swap",
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "0x",
        "offset_as_uint16%5#0"
      ]
    },
    "4127": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%5#0"
      ],
      "stack_out": [
        "tail%5#0",
        "current_tail_offset%5#0",
        "encoded%10#0"
      ]
    },
    "4128": {
      "op": "uncover 2",
      "stack_out": [
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%5#0"
      ]
    },
    "4130": {
      "op": "bytec 29 // 0x00027332",
      "defined_out": [
        "0x00027332",
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%5#0"
      ],
      "stack_out": [
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%5#0",
        "0x00027332"
      ]
    },
    "4132": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%6#0"
      ],
      "stack_out": [
        "current_tail_offset%5#0",
        "encoded%10#0",
        "tail%6#0"
      ]
    },
    "4133": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%5#0",
        "tail%6#0",
        "encoded%10#0"
      ]
    },
    "4134": {
      "op": "uncover 2",
      "stack_out": [
        "tail%6#0",
        "encoded%10#0",
        "current_tail_offset%5#0"
      ]
    },
    "4136": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "encoded%10#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "encoded%10#0",
        "as_bytes%8#0"
      ]
    },
    "4137": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%10#0",
        "offset_as_uint16%6#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "encoded%10#0",
        "offset_as_uint16%6#0"
      ]
    },
    "4140": {
      "op": "concat",
      "defined_out": [
        "encoded%11#0",
        "tail%6#0"
      ],
      "stack_out": [
        "tail%6#0",
        "encoded%11#0"
      ]
    },
    "4141": {
      "op": "swap",
      "stack_out": [
        "encoded%11#0",
        "tail%6#0"
      ]
    },
    "4142": {
      "op": "concat",
      "defined_out": [
        "encoded%12#0"
      ],
      "stack_out": [
        "encoded%12#0"
      ]
    },
    "4143": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%12#0",
        "0x"
      ]
    },
    "4144": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%12#0",
        "encoded%12#0 (copy)"
      ],
      "stack_out": [
        "encoded%12#0",
        "0x",
        "encoded%12#0 (copy)"
      ]
    },
    "4146": {
      "op": "concat",
      "defined_out": [
        "encoded%12#0",
        "tail%7#0"
      ],
      "stack_out": [
        "encoded%12#0",
        "tail%7#0"
      ]
    },
    "4147": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "encoded%12#0"
      ]
    },
    "4148": {
      "op": "len",
      "defined_out": [
        "data_length%7#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "data_length%7#0"
      ]
    },
    "4149": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%7#0",
        "data_length%7#0",
        "4"
      ]
    },
    "4151": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%7#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0"
      ]
    },
    "4152": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "4"
      ]
    },
    "4154": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "current_tail_offset%7#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "as_bytes%9#0"
      ]
    },
    "4155": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%7#0",
        "offset_as_uint16%7#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "offset_as_uint16%7#0"
      ]
    },
    "4158": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "offset_as_uint16%7#0",
        "0x"
      ]
    },
    "4159": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "0x",
        "offset_as_uint16%7#0"
      ]
    },
    "4160": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0"
      ]
    },
    "4161": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "1"
      ]
    },
    "4162": {
      "op": "itob",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%7#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "val_as_bytes%0#0"
      ]
    },
    "4163": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "4164": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "4165": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%14#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%14#0"
      ]
    },
    "4166": {
      "op": "bytec 13 // 0x0000000000000002",
      "defined_out": [
        "0x0000000000000002",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%14#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%14#0",
        "0x0000000000000002"
      ]
    },
    "4168": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0"
      ]
    },
    "4169": {
      "op": "bytec 15 // 0x33",
      "defined_out": [
        "0x33",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "0x33"
      ]
    },
    "4171": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "length%2#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "length%2#0"
      ]
    },
    "4172": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "as_bytes%10#0"
      ]
    },
    "4173": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "length_uint16%2#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "length_uint16%2#0"
      ]
    },
    "4176": {
      "op": "bytec 15 // 0x33",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "length_uint16%2#0",
        "0x33"
      ]
    },
    "4178": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "encoded_value%2#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "encoded_value%2#0"
      ]
    },
    "4179": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "encoded_value%2#0",
        "0x"
      ]
    },
    "4180": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "0x",
        "encoded_value%2#0"
      ]
    },
    "4181": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0",
        "tail%8#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%8#0"
      ]
    },
    "4182": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0",
        "tail%8#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%8#0",
        "18"
      ]
    },
    "4184": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%7#0",
        "tail%8#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%8#0",
        "as_bytes%11#0"
      ]
    },
    "4185": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "offset_as_uint16%8#0",
        "tail%7#0",
        "tail%8#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%15#0",
        "tail%8#0",
        "offset_as_uint16%8#0"
      ]
    },
    "4188": {
      "op": "uncover 2",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%8#0",
        "offset_as_uint16%8#0",
        "encoded%15#0"
      ]
    },
    "4190": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%8#0",
        "encoded%15#0",
        "offset_as_uint16%8#0"
      ]
    },
    "4191": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%16#0",
        "tail%7#0",
        "tail%8#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%8#0",
        "encoded%16#0"
      ]
    },
    "4192": {
      "op": "swap",
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%16#0",
        "tail%8#0"
      ]
    },
    "4193": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%17#0",
        "tail%7#0"
      ],
      "stack_out": [
        "tail%7#0",
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%17#0"
      ]
    },
    "4194": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "encoded%17#0",
        "tail%7#0"
      ]
    },
    "4196": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%7#0",
        "encoded%17#0"
      ]
    },
    "4197": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%9#0"
      ],
      "stack_out": [
        "current_tail_offset%7#0",
        "encoded%13#0",
        "tail%9#0"
      ]
    },
    "4198": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%13#0",
        "tail%9#0",
        "current_tail_offset%7#0"
      ]
    },
    "4200": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "encoded%13#0",
        "tail%9#0"
      ],
      "stack_out": [
        "encoded%13#0",
        "tail%9#0",
        "as_bytes%12#0"
      ]
    },
    "4201": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%13#0",
        "offset_as_uint16%9#0",
        "tail%9#0"
      ],
      "stack_out": [
        "encoded%13#0",
        "tail%9#0",
        "offset_as_uint16%9#0"
      ]
    },
    "4204": {
      "op": "uncover 2",
      "stack_out": [
        "tail%9#0",
        "offset_as_uint16%9#0",
        "encoded%13#0"
      ]
    },
    "4206": {
      "op": "swap",
      "stack_out": [
        "tail%9#0",
        "encoded%13#0",
        "offset_as_uint16%9#0"
      ]
    },
    "4207": {
      "op": "concat",
      "defined_out": [
        "encoded%18#0",
        "tail%9#0"
      ],
      "stack_out": [
        "tail%9#0",
        "encoded%18#0"
      ]
    },
    "4208": {
      "op": "swap",
      "stack_out": [
        "encoded%18#0",
        "tail%9#0"
      ]
    },
    "4209": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4210": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4212": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4214": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "4216": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4218": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4220": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4221": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4224": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4226": {
      "block": "test_nested_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4227": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4229": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4230": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%8#0"
      ]
    },
    "4233": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "awst_tmp%1#0"
      ]
    },
    "4234": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "4237": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "4238": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "4239": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4240": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4241": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "4242": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%5#0"
      ]
    },
    "4243": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0"
      ]
    },
    "4244": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4245": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "4246": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "item_end_offset%5#0"
      ]
    },
    "4247": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%5#0",
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4249": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "item_end_offset%5#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0"
      ]
    },
    "4251": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "4253": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0"
      ]
    },
    "4254": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "4255": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "0"
      ]
    },
    "4256": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%3#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "item_start_offset%6#0"
      ]
    },
    "4257": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0"
      ]
    },
    "4258": {
      "op": "dup",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "4259": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "2"
      ]
    },
    "4260": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0"
      ]
    },
    "4261": {
      "op": "dig 1",
      "stack_out": [
        "tmp%8#0",
        "item_start_offset%6#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "4263": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "item_end_offset%6#0",
        "encoded_item0%3#0 (copy)",
        "item_start_offset%6#0"
      ]
    },
    "4265": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "4267": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%3#0",
        "encoded_item0%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%4#0"
      ]
    },
    "4268": {
      "op": "extract 2 0",
      "defined_out": [
        "encoded_item0%3#0",
        "item0%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_item0%3#0",
        "item0%2#0"
      ]
    },
    "4271": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "encoded_item0%3#0"
      ]
    },
    "4273": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "4274": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)",
        "2"
      ]
    },
    "4275": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%3#0",
        "item0%2#0",
        "item_start_offset%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "encoded_item0%3#0",
        "item_start_offset%7#0"
      ]
    },
    "4276": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "encoded_item0%3#0"
      ]
    },
    "4277": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "encoded_item0%3#0",
        "encoded_item0%3#0 (copy)"
      ]
    },
    "4278": {
      "op": "len",
      "defined_out": [
        "encoded_item0%3#0",
        "item0%2#0",
        "item_end_offset%7#0",
        "item_start_offset%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "encoded_item0%3#0",
        "item_end_offset%7#0"
      ]
    },
    "4279": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0",
        "encoded_item0%3#0"
      ]
    },
    "4280": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item_end_offset%7#0",
        "encoded_item0%3#0",
        "item_start_offset%7#0"
      ]
    },
    "4282": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "encoded_item0%3#0",
        "item_start_offset%7#0",
        "item_end_offset%7#0"
      ]
    },
    "4284": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%8#0",
        "item1%2#0"
      ]
    },
    "4285": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0"
      ]
    },
    "4286": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4287": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "2"
      ]
    },
    "4288": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item1%2#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0",
        "item_start_offset%8#0"
      ]
    },
    "4289": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ]
    },
    "4290": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item_start_offset%8#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "4291": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item1%2#0",
        "item_end_offset%8#0",
        "item_start_offset%8#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item_start_offset%8#0",
        "tmp%8#0",
        "item_end_offset%8#0"
      ]
    },
    "4292": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item_start_offset%8#0",
        "item_end_offset%8#0",
        "tmp%8#0"
      ]
    },
    "4293": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item_end_offset%8#0",
        "tmp%8#0",
        "item_start_offset%8#0"
      ]
    },
    "4295": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "tmp%8#0",
        "item_start_offset%8#0",
        "item_end_offset%8#0"
      ]
    },
    "4297": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%2#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0"
      ]
    },
    "4298": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "item0%2#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "4299": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "0"
      ]
    },
    "4300": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "item0%2#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "4302": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item0%5#0",
        "encoded_item1%1#0",
        "item0%2#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0",
        "encoded_item0%5#0"
      ]
    },
    "4303": {
      "op": "btoi",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "encoded_item1%1#0",
        "item0%3#0"
      ]
    },
    "4304": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "encoded_item1%1#0"
      ]
    },
    "4305": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "4306": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "8"
      ]
    },
    "4308": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "8",
        "8"
      ]
    },
    "4309": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "encoded_item1%1#0",
        "item1%3#0"
      ]
    },
    "4310": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item1%1#0"
      ]
    },
    "4311": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "4312": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)",
        "16"
      ]
    },
    "4314": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0",
        "item_start_offset%9#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item1%1#0",
        "item_start_offset%9#0"
      ]
    },
    "4315": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item_start_offset%9#0",
        "encoded_item1%1#0"
      ]
    },
    "4316": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item_start_offset%9#0",
        "encoded_item1%1#0",
        "encoded_item1%1#0 (copy)"
      ]
    },
    "4317": {
      "op": "len",
      "defined_out": [
        "encoded_item1%1#0",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0",
        "item_end_offset%9#0",
        "item_start_offset%9#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item_start_offset%9#0",
        "encoded_item1%1#0",
        "item_end_offset%9#0"
      ]
    },
    "4318": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0",
        "encoded_item1%1#0"
      ]
    },
    "4319": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item_end_offset%9#0",
        "encoded_item1%1#0",
        "item_start_offset%9#0"
      ]
    },
    "4321": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item1%1#0",
        "item_start_offset%9#0",
        "item_end_offset%9#0"
      ]
    },
    "4323": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%1#0",
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "encoded_item2%1#0"
      ]
    },
    "4324": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%2#0",
        "item1%3#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%1#0"
      ]
    },
    "4327": {
      "op": "uncover 4",
      "defined_out": [
        "item0%3#0",
        "item1%2#0",
        "item1%3#0",
        "item2%1#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "item2%1#0",
        "result.0.0#0"
      ]
    },
    "4329": {
      "op": "swap",
      "stack_out": [
        "item1%2#0",
        "item0%3#0",
        "item1%3#0",
        "result.0.0#0",
        "item2%1#0"
      ]
    },
    "4330": {
      "op": "uncover 4",
      "defined_out": [
        "item0%3#0",
        "item1%3#0",
        "item2%1#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%3#0",
        "item1%3#0",
        "result.0.0#0",
        "item2%1#0",
        "result.0.1#0"
      ]
    },
    "4332": {
      "op": "cover 2",
      "stack_out": [
        "item0%3#0",
        "item1%3#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%1#0"
      ]
    },
    "4334": {
      "op": "uncover 4",
      "defined_out": [
        "item1%3#0",
        "item2%1#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%3#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%1#0",
        "result.1.0#0"
      ]
    },
    "4336": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "4338": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "4340": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "4342": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "4344": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "4346": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "4348": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "4350": {
      "op": "bytec 14 // \"echo: s1\"",
      "defined_out": [
        "\"echo: s1\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1\""
      ]
    },
    "4352": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%11#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%11#0"
      ]
    },
    "4353": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "4354": {
      "op": "bytec 30 // 0x00086563686f3a207332",
      "defined_out": [
        "0x00086563686f3a207332",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00086563686f3a207332"
      ]
    },
    "4356": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%12#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%12#0"
      ]
    },
    "4357": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "4358": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "2"
      ]
    },
    "4359": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%13#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%13#0"
      ]
    },
    "4360": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "4361": {
      "op": "bytec 17 // 0x0000000000000003",
      "defined_out": [
        "0x0000000000000003",
        "bytez#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%2#0",
        "0x0000000000000003"
      ]
    },
    "4363": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%14#0"
      ]
    },
    "4364": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "4365": {
      "op": "bytec 31 // 0x6563686f3a2033",
      "defined_out": [
        "0x6563686f3a2033",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a2033"
      ]
    },
    "4367": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "4368": {
      "op": "assert",
      "stack_out": []
    },
    "4369": {
      "op": "itxn_begin"
    },
    "4370": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "4371": {
      "op": "bytec 32 // 0x0003733162",
      "defined_out": [
        "0x",
        "0x0003733162"
      ],
      "stack_out": [
        "0x",
        "0x0003733162"
      ]
    },
    "4373": {
      "op": "concat",
      "defined_out": [
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0"
      ]
    },
    "4374": {
      "op": "bytec 32 // 0x0003733162",
      "stack_out": [
        "tail%10#0",
        "0x0003733162"
      ]
    },
    "4376": {
      "op": "len",
      "defined_out": [
        "data_length%10#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "data_length%10#0"
      ]
    },
    "4377": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "data_length%10#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "data_length%10#0",
        "4"
      ]
    },
    "4379": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%10#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0"
      ]
    },
    "4380": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "4"
      ]
    },
    "4382": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "current_tail_offset%10#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "as_bytes%13#0"
      ]
    },
    "4383": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%10#0",
        "offset_as_uint16%10#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "offset_as_uint16%10#0"
      ]
    },
    "4386": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "offset_as_uint16%10#0",
        "0x"
      ]
    },
    "4387": {
      "op": "swap",
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "0x",
        "offset_as_uint16%10#0"
      ]
    },
    "4388": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%10#0"
      ],
      "stack_out": [
        "tail%10#0",
        "current_tail_offset%10#0",
        "encoded%20#0"
      ]
    },
    "4389": {
      "op": "uncover 2",
      "stack_out": [
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%10#0"
      ]
    },
    "4391": {
      "op": "pushbytes 0x0003733262",
      "defined_out": [
        "0x0003733262",
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%10#0"
      ],
      "stack_out": [
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%10#0",
        "0x0003733262"
      ]
    },
    "4398": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%11#0"
      ],
      "stack_out": [
        "current_tail_offset%10#0",
        "encoded%20#0",
        "tail%11#0"
      ]
    },
    "4399": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%10#0",
        "tail%11#0",
        "encoded%20#0"
      ]
    },
    "4400": {
      "op": "uncover 2",
      "stack_out": [
        "tail%11#0",
        "encoded%20#0",
        "current_tail_offset%10#0"
      ]
    },
    "4402": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "encoded%20#0",
        "tail%11#0"
      ],
      "stack_out": [
        "tail%11#0",
        "encoded%20#0",
        "as_bytes%14#0"
      ]
    },
    "4403": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%20#0",
        "offset_as_uint16%11#0",
        "tail%11#0"
      ],
      "stack_out": [
        "tail%11#0",
        "encoded%20#0",
        "offset_as_uint16%11#0"
      ]
    },
    "4406": {
      "op": "concat",
      "defined_out": [
        "encoded%21#0",
        "tail%11#0"
      ],
      "stack_out": [
        "tail%11#0",
        "encoded%21#0"
      ]
    },
    "4407": {
      "op": "swap",
      "stack_out": [
        "encoded%21#0",
        "tail%11#0"
      ]
    },
    "4408": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0"
      ],
      "stack_out": [
        "encoded%22#0"
      ]
    },
    "4409": {
      "op": "bytec 33 // 0x3362",
      "defined_out": [
        "0x3362",
        "encoded%22#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "0x3362"
      ]
    },
    "4411": {
      "op": "len",
      "defined_out": [
        "encoded%22#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "length%3#0"
      ]
    },
    "4412": {
      "op": "itob",
      "defined_out": [
        "as_bytes%15#0",
        "encoded%22#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "as_bytes%15#0"
      ]
    },
    "4413": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%22#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "length_uint16%3#0"
      ]
    },
    "4416": {
      "op": "bytec 33 // 0x3362",
      "stack_out": [
        "encoded%22#0",
        "length_uint16%3#0",
        "0x3362"
      ]
    },
    "4418": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0"
      ]
    },
    "4419": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0",
        "0x"
      ]
    },
    "4420": {
      "op": "bytec 26 // 0x000000000000000b",
      "defined_out": [
        "0x",
        "0x000000000000000b",
        "encoded%22#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0",
        "0x",
        "0x000000000000000b"
      ]
    },
    "4422": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%23#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0",
        "encoded%23#0"
      ]
    },
    "4423": {
      "op": "pushbytes 0x0000000000000015",
      "defined_out": [
        "0x0000000000000015",
        "encoded%22#0",
        "encoded%23#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0",
        "encoded%23#0",
        "0x0000000000000015"
      ]
    },
    "4433": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%24#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded_value%3#0",
        "encoded%24#0"
      ]
    },
    "4434": {
      "op": "swap",
      "stack_out": [
        "encoded%22#0",
        "encoded%24#0",
        "encoded_value%3#0"
      ]
    },
    "4435": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%22#0",
        "encoded%24#0",
        "encoded_value%3#0",
        "0x"
      ]
    },
    "4436": {
      "op": "swap",
      "stack_out": [
        "encoded%22#0",
        "encoded%24#0",
        "0x",
        "encoded_value%3#0"
      ]
    },
    "4437": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%24#0",
        "tail%12#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded%24#0",
        "tail%12#0"
      ]
    },
    "4438": {
      "op": "swap",
      "stack_out": [
        "encoded%22#0",
        "tail%12#0",
        "encoded%24#0"
      ]
    },
    "4439": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded%22#0",
        "encoded%24#0",
        "tail%12#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "tail%12#0",
        "encoded%24#0",
        "18"
      ]
    },
    "4441": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "encoded%22#0",
        "encoded%24#0",
        "tail%12#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "tail%12#0",
        "encoded%24#0",
        "as_bytes%16#0"
      ]
    },
    "4442": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%22#0",
        "encoded%24#0",
        "offset_as_uint16%12#0",
        "tail%12#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "tail%12#0",
        "encoded%24#0",
        "offset_as_uint16%12#0"
      ]
    },
    "4445": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%25#0",
        "tail%12#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "tail%12#0",
        "encoded%25#0"
      ]
    },
    "4446": {
      "op": "swap",
      "stack_out": [
        "encoded%22#0",
        "encoded%25#0",
        "tail%12#0"
      ]
    },
    "4447": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%26#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded%26#0"
      ]
    },
    "4448": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%22#0",
        "encoded%26#0",
        "0x"
      ]
    },
    "4449": {
      "op": "dig 2",
      "defined_out": [
        "0x",
        "encoded%22#0",
        "encoded%22#0 (copy)",
        "encoded%26#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded%26#0",
        "0x",
        "encoded%22#0 (copy)"
      ]
    },
    "4451": {
      "op": "concat",
      "defined_out": [
        "encoded%22#0",
        "encoded%26#0",
        "tail%13#0"
      ],
      "stack_out": [
        "encoded%22#0",
        "encoded%26#0",
        "tail%13#0"
      ]
    },
    "4452": {
      "op": "swap",
      "stack_out": [
        "encoded%22#0",
        "tail%13#0",
        "encoded%26#0"
      ]
    },
    "4453": {
      "op": "uncover 2",
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "encoded%22#0"
      ]
    },
    "4455": {
      "op": "len",
      "defined_out": [
        "data_length%13#0",
        "encoded%26#0",
        "tail%13#0"
      ],
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "data_length%13#0"
      ]
    },
    "4456": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "data_length%13#0",
        "4"
      ]
    },
    "4458": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%13#0",
        "encoded%26#0",
        "tail%13#0"
      ],
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0"
      ]
    },
    "4459": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "4"
      ]
    },
    "4461": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "current_tail_offset%13#0",
        "encoded%26#0",
        "tail%13#0"
      ],
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "as_bytes%17#0"
      ]
    },
    "4462": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%13#0",
        "encoded%26#0",
        "offset_as_uint16%13#0",
        "tail%13#0"
      ],
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "offset_as_uint16%13#0"
      ]
    },
    "4465": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "offset_as_uint16%13#0",
        "0x"
      ]
    },
    "4466": {
      "op": "swap",
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "0x",
        "offset_as_uint16%13#0"
      ]
    },
    "4467": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%13#0",
        "encoded%26#0",
        "encoded%27#0",
        "tail%13#0"
      ],
      "stack_out": [
        "tail%13#0",
        "encoded%26#0",
        "current_tail_offset%13#0",
        "encoded%27#0"
      ]
    },
    "4468": {
      "op": "uncover 3",
      "stack_out": [
        "encoded%26#0",
        "current_tail_offset%13#0",
        "encoded%27#0",
        "tail%13#0"
      ]
    },
    "4470": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%13#0",
        "encoded%27#0",
        "tail%13#0",
        "encoded%26#0"
      ]
    },
    "4472": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%13#0",
        "encoded%27#0",
        "tail%14#0"
      ],
      "stack_out": [
        "current_tail_offset%13#0",
        "encoded%27#0",
        "tail%14#0"
      ]
    },
    "4473": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%13#0",
        "tail%14#0",
        "encoded%27#0"
      ]
    },
    "4474": {
      "op": "uncover 2",
      "stack_out": [
        "tail%14#0",
        "encoded%27#0",
        "current_tail_offset%13#0"
      ]
    },
    "4476": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "encoded%27#0",
        "tail%14#0"
      ],
      "stack_out": [
        "tail%14#0",
        "encoded%27#0",
        "as_bytes%18#0"
      ]
    },
    "4477": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%27#0",
        "offset_as_uint16%14#0",
        "tail%14#0"
      ],
      "stack_out": [
        "tail%14#0",
        "encoded%27#0",
        "offset_as_uint16%14#0"
      ]
    },
    "4480": {
      "op": "concat",
      "defined_out": [
        "encoded%28#0",
        "tail%14#0"
      ],
      "stack_out": [
        "tail%14#0",
        "encoded%28#0"
      ]
    },
    "4481": {
      "op": "swap",
      "stack_out": [
        "encoded%28#0",
        "tail%14#0"
      ]
    },
    "4482": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4483": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "4485": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4487": {
      "op": "bytec 23 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "4489": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4491": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4493": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4494": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4497": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4499": {
      "block": "test_nested_tuples_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4500": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "4502": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)"
      ]
    },
    "4503": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "awst_tmp%2#0",
        "tmp%16#0"
      ]
    },
    "4506": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "awst_tmp%2#0"
      ]
    },
    "4507": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "4510": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "4511": {
      "op": "==",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "4512": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "4513": {
      "op": "dup",
      "defined_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4514": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "0"
      ]
    },
    "4515": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%10#0"
      ]
    },
    "4516": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0"
      ]
    },
    "4517": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4518": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "4519": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%10#0",
        "item_start_offset%10#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "item_end_offset%10#0"
      ]
    },
    "4520": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%10#0",
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4522": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "item_end_offset%10#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0"
      ]
    },
    "4524": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "item_start_offset%10#0",
        "item_end_offset%10#0"
      ]
    },
    "4526": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%6#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0"
      ]
    },
    "4527": {
      "op": "dup",
      "defined_out": [
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "4528": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "0"
      ]
    },
    "4529": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%6#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "item_start_offset%11#0"
      ]
    },
    "4530": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0"
      ]
    },
    "4531": {
      "op": "dup",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "4532": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "2"
      ]
    },
    "4533": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "item_start_offset%11#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0"
      ]
    },
    "4534": {
      "op": "dig 1",
      "stack_out": [
        "tmp%16#0",
        "item_start_offset%11#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "4536": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "item_end_offset%11#0",
        "encoded_item0%6#0 (copy)",
        "item_start_offset%11#0"
      ]
    },
    "4538": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "item_start_offset%11#0",
        "item_end_offset%11#0"
      ]
    },
    "4540": {
      "op": "substring3",
      "defined_out": [
        "encoded_item0%6#0",
        "encoded_item0%7#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%7#0"
      ]
    },
    "4541": {
      "op": "extract 2 0",
      "defined_out": [
        "encoded_item0%6#0",
        "item0%4#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "encoded_item0%6#0",
        "item0%4#0"
      ]
    },
    "4544": {
      "op": "cover 2",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "encoded_item0%6#0"
      ]
    },
    "4546": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "4547": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)",
        "2"
      ]
    },
    "4548": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item0%6#0",
        "item0%4#0",
        "item_start_offset%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "encoded_item0%6#0",
        "item_start_offset%12#0"
      ]
    },
    "4549": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "encoded_item0%6#0"
      ]
    },
    "4550": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "encoded_item0%6#0",
        "encoded_item0%6#0 (copy)"
      ]
    },
    "4551": {
      "op": "len",
      "defined_out": [
        "encoded_item0%6#0",
        "item0%4#0",
        "item_end_offset%12#0",
        "item_start_offset%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "encoded_item0%6#0",
        "item_end_offset%12#0"
      ]
    },
    "4552": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0",
        "encoded_item0%6#0"
      ]
    },
    "4553": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item_end_offset%12#0",
        "encoded_item0%6#0",
        "item_start_offset%12#0"
      ]
    },
    "4555": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "encoded_item0%6#0",
        "item_start_offset%12#0",
        "item_end_offset%12#0"
      ]
    },
    "4557": {
      "op": "substring3",
      "defined_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%4#0",
        "tmp%16#0",
        "item1%4#0"
      ]
    },
    "4558": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0"
      ]
    },
    "4559": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4560": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "2"
      ]
    },
    "4561": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%4#0",
        "item1%4#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0",
        "item_start_offset%13#0"
      ]
    },
    "4562": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ]
    },
    "4563": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item_start_offset%13#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "4564": {
      "op": "len",
      "defined_out": [
        "item0%4#0",
        "item1%4#0",
        "item_end_offset%13#0",
        "item_start_offset%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item_start_offset%13#0",
        "tmp%16#0",
        "item_end_offset%13#0"
      ]
    },
    "4565": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item_start_offset%13#0",
        "item_end_offset%13#0",
        "tmp%16#0"
      ]
    },
    "4566": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item_end_offset%13#0",
        "tmp%16#0",
        "item_start_offset%13#0"
      ]
    },
    "4568": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "tmp%16#0",
        "item_start_offset%13#0",
        "item_end_offset%13#0"
      ]
    },
    "4570": {
      "op": "substring3",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%4#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0"
      ]
    },
    "4571": {
      "op": "dup",
      "defined_out": [
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "item0%4#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "4572": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "0"
      ]
    },
    "4573": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "item0%4#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "0",
        "8"
      ]
    },
    "4575": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item0%8#0",
        "encoded_item1%2#0",
        "item0%4#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0",
        "encoded_item0%8#0"
      ]
    },
    "4576": {
      "op": "btoi",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "encoded_item1%2#0",
        "item0%5#0"
      ]
    },
    "4577": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "encoded_item1%2#0"
      ]
    },
    "4578": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "4579": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "8"
      ]
    },
    "4581": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "8",
        "8"
      ]
    },
    "4582": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "encoded_item1%2#0",
        "item1%5#0"
      ]
    },
    "4583": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item1%2#0"
      ]
    },
    "4584": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "4585": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)",
        "16"
      ]
    },
    "4587": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0",
        "item_start_offset%14#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item1%2#0",
        "item_start_offset%14#0"
      ]
    },
    "4588": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%14#0",
        "encoded_item1%2#0"
      ]
    },
    "4589": {
      "op": "dup",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%14#0",
        "encoded_item1%2#0",
        "encoded_item1%2#0 (copy)"
      ]
    },
    "4590": {
      "op": "len",
      "defined_out": [
        "encoded_item1%2#0",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0",
        "item_end_offset%14#0",
        "item_start_offset%14#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%14#0",
        "encoded_item1%2#0",
        "item_end_offset%14#0"
      ]
    },
    "4591": {
      "op": "swap",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0",
        "encoded_item1%2#0"
      ]
    },
    "4592": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item_end_offset%14#0",
        "encoded_item1%2#0",
        "item_start_offset%14#0"
      ]
    },
    "4594": {
      "op": "uncover 2",
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item1%2#0",
        "item_start_offset%14#0",
        "item_end_offset%14#0"
      ]
    },
    "4596": {
      "op": "substring3",
      "defined_out": [
        "encoded_item2%2#0",
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "encoded_item2%2#0"
      ]
    },
    "4597": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%4#0",
        "item0%5#0",
        "item1%4#0",
        "item1%5#0",
        "item2%2#0"
      ],
      "stack_out": [
        "item0%4#0",
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item2%2#0"
      ]
    },
    "4600": {
      "op": "uncover 4",
      "defined_out": [
        "item0%5#0",
        "item1%4#0",
        "item1%5#0",
        "item2%2#0",
        "result.0.0#0"
      ],
      "stack_out": [
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "item2%2#0",
        "result.0.0#0"
      ]
    },
    "4602": {
      "op": "swap",
      "stack_out": [
        "item1%4#0",
        "item0%5#0",
        "item1%5#0",
        "result.0.0#0",
        "item2%2#0"
      ]
    },
    "4603": {
      "op": "uncover 4",
      "defined_out": [
        "item0%5#0",
        "item1%5#0",
        "item2%2#0",
        "result.0.0#0",
        "result.0.1#0"
      ],
      "stack_out": [
        "item0%5#0",
        "item1%5#0",
        "result.0.0#0",
        "item2%2#0",
        "result.0.1#0"
      ]
    },
    "4605": {
      "op": "cover 2",
      "stack_out": [
        "item0%5#0",
        "item1%5#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%2#0"
      ]
    },
    "4607": {
      "op": "uncover 4",
      "defined_out": [
        "item1%5#0",
        "item2%2#0",
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0"
      ],
      "stack_out": [
        "item1%5#0",
        "result.0.1#0",
        "result.0.0#0",
        "item2%2#0",
        "result.1.0#0"
      ]
    },
    "4609": {
      "op": "cover 3",
      "defined_out": [
        "result.0.0#0",
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0"
      ],
      "stack_out": [
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "result.0.0#0",
        "result.1.2#0"
      ]
    },
    "4611": {
      "op": "cover 4",
      "defined_out": [
        "result.0.1#0",
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0"
      ],
      "stack_out": [
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "result.0.1#0",
        "s1#0"
      ]
    },
    "4613": {
      "op": "cover 4",
      "defined_out": [
        "result.1.0#0",
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0"
      ],
      "stack_out": [
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "result.1.0#0",
        "s2#0"
      ]
    },
    "4615": {
      "op": "cover 4",
      "defined_out": [
        "result.1.1#0",
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0"
      ],
      "stack_out": [
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "result.1.1#0",
        "u64_1#0"
      ]
    },
    "4617": {
      "op": "cover 4",
      "defined_out": [
        "result.1.2#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_1#0",
        "s2#0",
        "s1#0",
        "result.1.2#0",
        "u64_2#0"
      ]
    },
    "4619": {
      "op": "cover 4",
      "defined_out": [
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "bytez#0"
      ]
    },
    "4621": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0"
      ]
    },
    "4623": {
      "op": "pushbytes \"echo: s1b\"",
      "defined_out": [
        "\"echo: s1b\"",
        "bytez#0",
        "s1#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "s1#0",
        "\"echo: s1b\""
      ]
    },
    "4634": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "s2#0",
        "tmp%19#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "tmp%19#0"
      ]
    },
    "4635": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0"
      ]
    },
    "4636": {
      "op": "pushbytes 0x00096563686f3a20733262",
      "defined_out": [
        "0x00096563686f3a20733262",
        "bytez#0",
        "s2#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "s2#0",
        "0x00096563686f3a20733262"
      ]
    },
    "4649": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%20#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "tmp%20#0"
      ]
    },
    "4650": {
      "op": "assert",
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0"
      ]
    },
    "4651": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "bytez#0",
        "u64_1#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "u64_1#0",
        "12"
      ]
    },
    "4653": {
      "op": "==",
      "defined_out": [
        "bytez#0",
        "tmp%21#0",
        "u64_2#0"
      ],
      "stack_out": [
        "bytez#0",
        "u64_2#0",
        "tmp%21#0"
      ]
    },
    "4654": {
      "op": "assert",
      "defined_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "4655": {
      "op": "pushbytes 0x0000000000000016",
      "defined_out": [
        "0x0000000000000016",
        "bytez#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "reinterpret_biguint%4#0",
        "0x0000000000000016"
      ]
    },
    "4665": {
      "op": "b==",
      "defined_out": [
        "bytez#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%22#0"
      ]
    },
    "4666": {
      "op": "assert",
      "stack_out": [
        "bytez#0"
      ]
    },
    "4667": {
      "op": "pushbytes 0x6563686f3a203362",
      "defined_out": [
        "0x6563686f3a203362",
        "bytez#0"
      ],
      "stack_out": [
        "bytez#0",
        "0x6563686f3a203362"
      ]
    },
    "4677": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "4678": {
      "op": "assert",
      "stack_out": []
    },
    "4679": {
      "retsub": true,
      "op": "retsub"
    },
    "4680": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_no_args",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4683": {
      "block": "test_no_args_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "4684": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "4686": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4688": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4690": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4692": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4693": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4695": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4696": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4698": {
      "block": "test_no_args_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4699": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4701": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4702": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4705": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4706": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4709": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "4710": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4711": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4712": {
      "op": "btoi",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4713": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "42"
      ]
    },
    "4715": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4716": {
      "op": "assert",
      "stack_out": []
    },
    "4717": {
      "op": "itxn_begin"
    },
    "4718": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4720": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4722": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4724": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4726": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4727": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4729": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4730": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4732": {
      "block": "test_no_args_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4733": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4735": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4736": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%5#0"
      ]
    },
    "4739": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "awst_tmp%1#0"
      ]
    },
    "4740": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "4743": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "4744": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "4745": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "4746": {
      "op": "bytec 34 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x000000000000002a"
      ]
    },
    "4748": {
      "op": "b==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4749": {
      "op": "assert",
      "stack_out": []
    },
    "4750": {
      "op": "itxn_begin"
    },
    "4751": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%2%%param_ApplicationID_idx_0#0"
      ]
    },
    "4753": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "4755": {
      "op": "bytec 24 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(no_args()uint64)"
      ],
      "stack_out": [
        "Method(no_args()uint64)"
      ]
    },
    "4757": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4759": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4760": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4762": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4763": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4765": {
      "block": "test_no_args_next_txn@3",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4766": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%2#0"
      ]
    },
    "4768": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "4771": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "4772": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "4773": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "4774": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%3#0"
      ]
    },
    "4776": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "4777": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%3#0",
        "tmp%13#0"
      ]
    },
    "4780": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "awst_tmp%3#0"
      ]
    },
    "4781": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "4784": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "0x151f7c75"
      ]
    },
    "4785": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "4786": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "4787": {
      "op": "bytec 34 // 0x000000000000002a",
      "defined_out": [
        "0x000000000000002a",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x000000000000002a"
      ]
    },
    "4789": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "4790": {
      "op": "assert",
      "stack_out": []
    },
    "4791": {
      "retsub": true,
      "op": "retsub"
    },
    "4792": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_named_tuples",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4795": {
      "block": "test_named_tuples_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "4796": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "4797": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "4798": {
      "op": "bytec 11 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"log 1\""
      ]
    },
    "4800": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "4801": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "4802": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "4805": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "\"log 1\""
      ]
    },
    "4807": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "4808": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "0x"
      ]
    },
    "4809": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "4811": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded%0#0"
      ]
    },
    "4812": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "encoded_value%0#0"
      ]
    },
    "4813": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%0#0",
        "encoded_value%0#0",
        "0x"
      ]
    },
    "4814": {
      "op": "swap",
      "stack_out": [
        "encoded%0#0",
        "0x",
        "encoded_value%0#0"
      ]
    },
    "4815": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "4816": {
      "op": "swap",
      "stack_out": [
        "tail%0#0",
        "encoded%0#0"
      ]
    },
    "4817": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "10"
      ]
    },
    "4819": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "as_bytes%1#0"
      ]
    },
    "4820": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "4823": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%1#0"
      ]
    },
    "4824": {
      "op": "swap",
      "stack_out": [
        "encoded%1#0",
        "tail%0#0"
      ]
    },
    "4825": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0"
      ],
      "stack_out": [
        "encoded%2#0"
      ]
    },
    "4826": {
      "op": "intc_3 // 1",
      "stack_out": [
        "encoded%2#0",
        "1"
      ]
    },
    "4827": {
      "op": "itob",
      "defined_out": [
        "encoded%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "4828": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "\"log 1\""
      ]
    },
    "4830": {
      "op": "len",
      "defined_out": [
        "encoded%2#0",
        "length%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "length%1#0"
      ]
    },
    "4831": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded%2#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "as_bytes%2#0"
      ]
    },
    "4832": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%2#0",
        "length_uint16%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0"
      ]
    },
    "4835": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "length_uint16%1#0",
        "\"log 1\""
      ]
    },
    "4837": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0"
      ]
    },
    "4838": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%2#0",
        "val_as_bytes%1#0",
        "encoded_value%1#0",
        "0x"
      ]
    },
    "4839": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%2#0",
        "encoded_value%1#0",
        "0x",
        "val_as_bytes%1#0"
      ]
    },
    "4841": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%3#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded_value%1#0",
        "encoded%3#0"
      ]
    },
    "4842": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "encoded_value%1#0"
      ]
    },
    "4843": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "encoded_value%1#0",
        "0x"
      ]
    },
    "4844": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "0x",
        "encoded_value%1#0"
      ]
    },
    "4845": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "4846": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "tail%1#0",
        "encoded%3#0"
      ]
    },
    "4847": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "encoded%2#0",
        "tail%1#0",
        "encoded%3#0",
        "10"
      ]
    },
    "4849": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%2#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tail%1#0",
        "encoded%3#0",
        "as_bytes%3#0"
      ]
    },
    "4850": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%2#0",
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "4853": {
      "op": "concat",
      "defined_out": [
        "encoded%2#0",
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%2#0",
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "4854": {
      "op": "swap",
      "stack_out": [
        "encoded%2#0",
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "4855": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4856": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4857": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "4859": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4861": {
      "op": "bytec 35 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "4863": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4865": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4867": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4869": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4870": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4872": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "4873": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4875": {
      "block": "test_named_tuples_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4876": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "4878": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "4879": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "4882": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "4883": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "4886": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "4887": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "4888": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4889": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "4890": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4891": {
      "op": "assert",
      "stack_out": []
    },
    "4892": {
      "op": "itxn_begin"
    },
    "4893": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "4894": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "4895": {
      "op": "bytec 36 // \"log 2\"",
      "defined_out": [
        "\"log 2\"",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "\"log 2\""
      ]
    },
    "4897": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length%2#0"
      ]
    },
    "4898": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "as_bytes%4#0"
      ]
    },
    "4899": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%2#0"
      ]
    },
    "4902": {
      "op": "bytec 36 // \"log 2\"",
      "stack_out": [
        "val_as_bytes%2#0",
        "length_uint16%2#0",
        "\"log 2\""
      ]
    },
    "4904": {
      "op": "concat",
      "defined_out": [
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_value%2#0"
      ]
    },
    "4905": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "0x"
      ]
    },
    "4906": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "0x",
        "val_as_bytes%2#0"
      ]
    },
    "4908": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded%6#0"
      ]
    },
    "4909": {
      "op": "swap",
      "stack_out": [
        "encoded%6#0",
        "encoded_value%2#0"
      ]
    },
    "4910": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%6#0",
        "encoded_value%2#0",
        "0x"
      ]
    },
    "4911": {
      "op": "swap",
      "stack_out": [
        "encoded%6#0",
        "0x",
        "encoded_value%2#0"
      ]
    },
    "4912": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "tail%2#0"
      ],
      "stack_out": [
        "encoded%6#0",
        "tail%2#0"
      ]
    },
    "4913": {
      "op": "swap",
      "stack_out": [
        "tail%2#0",
        "encoded%6#0"
      ]
    },
    "4914": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded%6#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%6#0",
        "10"
      ]
    },
    "4916": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded%6#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%6#0",
        "as_bytes%5#0"
      ]
    },
    "4917": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%6#0",
        "offset_as_uint16%2#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%6#0",
        "offset_as_uint16%2#0"
      ]
    },
    "4920": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0",
        "tail%2#0"
      ],
      "stack_out": [
        "tail%2#0",
        "encoded%7#0"
      ]
    },
    "4921": {
      "op": "swap",
      "stack_out": [
        "encoded%7#0",
        "tail%2#0"
      ]
    },
    "4922": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0"
      ],
      "stack_out": [
        "encoded%8#0"
      ]
    },
    "4923": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1",
        "encoded%8#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "1"
      ]
    },
    "4924": {
      "op": "itob",
      "defined_out": [
        "encoded%8#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0"
      ]
    },
    "4925": {
      "op": "bytec 11 // \"log 1\"",
      "defined_out": [
        "\"log 1\"",
        "encoded%8#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "\"log 1\""
      ]
    },
    "4927": {
      "op": "len",
      "defined_out": [
        "encoded%8#0",
        "length%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "length%3#0"
      ]
    },
    "4928": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "encoded%8#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "as_bytes%6#0"
      ]
    },
    "4929": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%8#0",
        "length_uint16%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "length_uint16%3#0"
      ]
    },
    "4932": {
      "op": "bytec 11 // \"log 1\"",
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "length_uint16%3#0",
        "\"log 1\""
      ]
    },
    "4934": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0",
        "encoded_value%3#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "encoded_value%3#0"
      ]
    },
    "4935": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%8#0",
        "val_as_bytes%3#0",
        "encoded_value%3#0",
        "0x"
      ]
    },
    "4936": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%8#0",
        "encoded_value%3#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "4938": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0",
        "encoded%9#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "encoded_value%3#0",
        "encoded%9#0"
      ]
    },
    "4939": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "encoded%9#0",
        "encoded_value%3#0"
      ]
    },
    "4940": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%8#0",
        "encoded%9#0",
        "encoded_value%3#0",
        "0x"
      ]
    },
    "4941": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "encoded%9#0",
        "0x",
        "encoded_value%3#0"
      ]
    },
    "4942": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0",
        "encoded%9#0",
        "tail%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "encoded%9#0",
        "tail%3#0"
      ]
    },
    "4943": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "tail%3#0",
        "encoded%9#0"
      ]
    },
    "4944": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "encoded%8#0",
        "tail%3#0",
        "encoded%9#0",
        "10"
      ]
    },
    "4946": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded%8#0",
        "encoded%9#0",
        "tail%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "tail%3#0",
        "encoded%9#0",
        "as_bytes%7#0"
      ]
    },
    "4947": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%8#0",
        "encoded%9#0",
        "offset_as_uint16%3#0",
        "tail%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "tail%3#0",
        "encoded%9#0",
        "offset_as_uint16%3#0"
      ]
    },
    "4950": {
      "op": "concat",
      "defined_out": [
        "encoded%10#0",
        "encoded%8#0",
        "tail%3#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "tail%3#0",
        "encoded%10#0"
      ]
    },
    "4951": {
      "op": "swap",
      "stack_out": [
        "encoded%8#0",
        "encoded%10#0",
        "tail%3#0"
      ]
    },
    "4952": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4953": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4954": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationID_idx_0#0"
      ]
    },
    "4956": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4958": {
      "op": "bytec 35 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "4960": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%1%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "4962": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%1%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "4964": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "4966": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "4967": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "4969": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "4970": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "4972": {
      "block": "test_named_tuples_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "4973": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%1#0"
      ]
    },
    "4975": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "4976": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%1#0",
        "tmp%4#0"
      ]
    },
    "4979": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%1#0"
      ]
    },
    "4980": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "4983": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "4984": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "4985": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "4986": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "4987": {
      "op": "getbit",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "4988": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "4989": {
      "op": "assert",
      "stack_out": []
    },
    "4990": {
      "retsub": true,
      "op": "retsub"
    },
    "4991": {
      "subroutine": "test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct",
      "params": {
        "app#0": "uint64"
      },
      "block": "test_arc4_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "4994": {
      "block": "test_arc4_struct_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "4995": {
      "op": "bytec_3 // 0x0000000000000001",
      "defined_out": [
        "0x",
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x",
        "0x0000000000000001"
      ]
    },
    "4996": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0"
      ]
    },
    "4997": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded%0#0",
        "0x"
      ]
    },
    "4998": {
      "op": "pushbytes 0x00056c6f672031",
      "defined_out": [
        "0x",
        "0x00056c6f672031",
        "encoded%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "0x",
        "0x00056c6f672031"
      ]
    },
    "5007": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "encoded%0#0",
        "tail%0#0"
      ]
    },
    "5008": {
      "op": "swap",
      "stack_out": [
        "tail%0#0",
        "encoded%0#0"
      ]
    },
    "5009": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "10"
      ]
    },
    "5011": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "as_bytes%0#0"
      ]
    },
    "5012": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%0#0",
        "offset_as_uint16%0#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "5015": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "encoded%1#0"
      ]
    },
    "5016": {
      "op": "swap",
      "stack_out": [
        "encoded%1#0",
        "tail%0#0"
      ]
    },
    "5017": {
      "op": "concat",
      "defined_out": [
        "log#0"
      ],
      "stack_out": [
        "log#0"
      ]
    },
    "5018": {
      "op": "dup",
      "defined_out": [
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "log#0"
      ]
    },
    "5019": {
      "op": "itxn_begin",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5020": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "5022": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5024": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "5030": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "log#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "5032": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "log#0"
      ]
    },
    "5034": {
      "op": "intc_1 // appl",
      "defined_out": [
        "appl",
        "log#0"
      ],
      "stack_out": [
        "log#0",
        "appl"
      ]
    },
    "5035": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "log#0"
      ]
    },
    "5037": {
      "op": "intc_0 // 0",
      "stack_out": [
        "log#0",
        "0"
      ]
    },
    "5038": {
      "op": "itxn_field Fee",
      "stack_out": [
        "log#0"
      ]
    },
    "5040": {
      "block": "test_arc4_struct_next_txn@1",
      "stack_in": [
        "log#0"
      ],
      "op": "itxn_submit"
    },
    "5041": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0"
      ]
    },
    "5043": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "5044": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "log#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "5047": {
      "op": "swap",
      "stack_out": [
        "log#0",
        "tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "5048": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "5051": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "5052": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "5053": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "log#0",
        "result#0"
      ]
    },
    "5054": {
      "op": "itxn LastLog",
      "defined_out": [
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "result#0",
        "txn.LastLog#0"
      ]
    },
    "5056": {
      "op": "swap",
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "result#0"
      ]
    },
    "5057": {
      "op": "uncover 2",
      "defined_out": [
        "log#0",
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "result#0",
        "log#0"
      ]
    },
    "5059": {
      "op": "dup",
      "defined_out": [
        "log#0 (copy)",
        "result#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "txn.LastLog#0",
        "result#0",
        "log#0 (copy)",
        "log#0 (copy)"
      ]
    },
    "5060": {
      "op": "cover 3",
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "result#0",
        "log#0 (copy)"
      ]
    },
    "5062": {
      "op": "==",
      "defined_out": [
        "log#0",
        "tmp%3#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "tmp%3#0"
      ]
    },
    "5063": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": [
        "log#0",
        "txn.LastLog#0"
      ]
    },
    "5064": {
      "op": "dup",
      "defined_out": [
        "log#0",
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ],
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "txn.LastLog#0 (copy)"
      ]
    },
    "5065": {
      "op": "extract 4 0",
      "defined_out": [
        "log#0",
        "tmp%4#0",
        "txn.LastLog#0"
      ],
      "stack_out": [
        "log#0",
        "txn.LastLog#0",
        "tmp%4#0"
      ]
    },
    "5068": {
      "op": "swap",
      "stack_out": [
        "log#0",
        "tmp%4#0",
        "txn.LastLog#0"
      ]
    },
    "5069": {
      "op": "extract 0 4",
      "defined_out": [
        "log#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "5072": {
      "op": "bytec_0 // 0x151f7c75",
      "stack_out": [
        "log#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "5073": {
      "op": "==",
      "defined_out": [
        "log#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "log#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "5074": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "log#0",
        "tmp%4#0"
      ]
    },
    "5075": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "5076": {
      "error": "expected output to match input",
      "op": "assert // expected output to match input",
      "stack_out": []
    },
    "5077": {
      "retsub": true,
      "op": "retsub"
    }
  }
}