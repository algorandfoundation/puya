{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AAuIK;;;;;;AAJA;;;;;;AA5BA;;;;;;AAXA;;;;;;AANA;;;;;;AAdA;;;;;;AAdA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AAJA;;;;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAcA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAcA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAMA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAWA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA4BA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAtIL;;;;;;AAEe;;AAAK;;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;AAER;;;;;;AAEe;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAP;;;;AAIO;;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEY;;AAAA;;;AAAJ;;AAER;;;;;;AAE8B;;AAAA;AAAA;AAAkB;;;;;;;AAApC;;;;;;AAAA;;AAAA;AAAJ;;AAER;;;;;;AAEY;;AAAA;;;AAAJ;;AAER;;;;;;AAEY;;AAAA;;AAAA;AAAJ;AAAgB;AAAA;;AAAA;AAAhB;AAA+B;AAAA;;AAAA;;AAAA;AAAA;AAA/B;;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;;;;AAM4B;;;AAAR;AACI;;AAAT;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAM2B;;;AAAR;AACJ;;AAAA;AAAP;AACiB;;;AAAR;AACF;;AAAA;AAAP;AACU;;;AACH;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAIe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;AAAL;AAA3C;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAIQ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACQ;AAAA;;AAAA;AAAA;;AAAmB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACvB;;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AAHJ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAMR;;;;;;AAwBmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x6563686f3a20 0x 0x01"
    },
    "24": {
      "op": "b main_block@0"
    },
    "27": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "30": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "32": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "33": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "34": {
      "op": "bz main___algopy_default_create@29",
      "stack_out": []
    },
    "37": {
      "op": "b main_abi_routing@2"
    },
    "40": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "42": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "43": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "44": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "45": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "47": {
      "op": "bz main_create_NoOp@27",
      "stack_out": []
    },
    "50": {
      "op": "b main_call_NoOp@3"
    },
    "53": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "56": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "62": {
      "op": "pushbytes 0x9bf81913 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)"
      ]
    },
    "68": {
      "op": "pushbytes 0xb862ee19 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)"
      ]
    },
    "74": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)"
      ]
    },
    "80": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)"
      ]
    },
    "86": {
      "op": "pushbytes 0xb4b4334e // method \"log(string)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)"
      ]
    },
    "92": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)"
      ]
    },
    "98": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)"
      ]
    },
    "104": {
      "op": "pushbytes 0x46b50faf // method \"log(uint64,address,uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)"
      ]
    },
    "110": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)"
      ]
    },
    "116": {
      "op": "pushbytes 0x4a444c77 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)"
      ]
    },
    "122": {
      "op": "pushbytes 0x2659e818 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "128": {
      "op": "pushbytes 0xa9fb6cf1 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "134": {
      "op": "pushbytes 0xd8cc363b // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "140": {
      "op": "pushbytes 0xd6c2ac7f // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "146": {
      "op": "pushbytes 0x48142d5e // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "152": {
      "op": "pushbytes 0x16e03919 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "158": {
      "op": "pushbytes 0xab271ce4 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "164": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "170": {
      "op": "pushbytes 0xddd07185 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "176": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "182": {
      "op": "uncover 21",
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%5#0"
      ]
    },
    "184": {
      "op": "match main_is_a_b_route@4 main_echo_route@5 main_no_args_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_log_route@13 main_echo_native_string_route@14 main_echo_native_bytes_route@15 main_echo_native_uint64_route@16 main_echo_native_biguint_route@17 main_echo_resource_by_index_route@18 main_echo_resource_by_value_route@19 main_echo_native_tuple_route@20 main_echo_nested_tuple_route@21 main_return_args_after_14th_route@22 main_logs_are_equal_route@23 main_echo_log_struct_route@24",
      "stack_out": []
    },
    "228": {
      "op": "b main_switch_case_default@25"
    },
    "231": {
      "block": "main_switch_case_default@25",
      "stack_in": [],
      "op": "b main_switch_case_next@26"
    },
    "234": {
      "block": "main_switch_case_next@26",
      "stack_in": [],
      "op": "b main_after_if_else@28"
    },
    "237": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "b main_after_if_else@30"
    },
    "240": {
      "block": "main_after_if_else@30",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "241": {
      "block": "main_echo_log_struct_route@24",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]",
      "op": "callsub echo_log_struct"
    },
    "244": {
      "op": "b main_switch_case_next@26"
    },
    "247": {
      "block": "main_logs_are_equal_route@23",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]",
      "op": "callsub logs_are_equal"
    },
    "250": {
      "op": "b main_switch_case_next@26"
    },
    "253": {
      "block": "main_return_args_after_14th_route@22",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]",
      "op": "callsub return_args_after_14th"
    },
    "256": {
      "op": "b main_switch_case_next@26"
    },
    "259": {
      "block": "main_echo_nested_tuple_route@21",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]",
      "op": "callsub echo_nested_tuple"
    },
    "262": {
      "op": "b main_switch_case_next@26"
    },
    "265": {
      "block": "main_echo_native_tuple_route@20",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]",
      "op": "callsub echo_native_tuple"
    },
    "268": {
      "op": "b main_switch_case_next@26"
    },
    "271": {
      "block": "main_echo_resource_by_value_route@19",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]",
      "op": "callsub echo_resource_by_value"
    },
    "274": {
      "op": "b main_switch_case_next@26"
    },
    "277": {
      "block": "main_echo_resource_by_index_route@18",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]",
      "op": "callsub echo_resource_by_index"
    },
    "280": {
      "op": "b main_switch_case_next@26"
    },
    "283": {
      "block": "main_echo_native_biguint_route@17",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]",
      "op": "callsub echo_native_biguint"
    },
    "286": {
      "op": "b main_switch_case_next@26"
    },
    "289": {
      "block": "main_echo_native_uint64_route@16",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]",
      "op": "callsub echo_native_uint64"
    },
    "292": {
      "op": "b main_switch_case_next@26"
    },
    "295": {
      "block": "main_echo_native_bytes_route@15",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]",
      "op": "callsub echo_native_bytes"
    },
    "298": {
      "op": "b main_switch_case_next@26"
    },
    "301": {
      "block": "main_echo_native_string_route@14",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]",
      "op": "callsub echo_native_string"
    },
    "304": {
      "op": "b main_switch_case_next@26"
    },
    "307": {
      "block": "main_log_route@13",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_address[routing]",
      "op": "callsub log_address"
    },
    "310": {
      "op": "b main_switch_case_next@26"
    },
    "313": {
      "block": "main_log_route@12",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]",
      "op": "callsub log_asset_account_app"
    },
    "316": {
      "op": "b main_switch_case_next@26"
    },
    "319": {
      "block": "main_log_route@11",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes[routing]",
      "op": "callsub log_bytes"
    },
    "322": {
      "op": "b main_switch_case_next@26"
    },
    "325": {
      "block": "main_log_route@10",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool[routing]",
      "op": "callsub log_bool"
    },
    "328": {
      "op": "b main_switch_case_next@26"
    },
    "331": {
      "block": "main_log_route@9",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string[routing]",
      "op": "callsub log_string"
    },
    "334": {
      "op": "b main_switch_case_next@26"
    },
    "337": {
      "block": "main_log_route@8",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512[routing]",
      "op": "callsub log_uint512"
    },
    "340": {
      "op": "b main_switch_case_next@26"
    },
    "343": {
      "block": "main_log_route@7",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64[routing]",
      "op": "callsub log_uint64"
    },
    "346": {
      "op": "b main_switch_case_next@26"
    },
    "349": {
      "block": "main_no_args_route@6",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.no_args[routing]",
      "op": "callsub no_args"
    },
    "352": {
      "op": "b main_switch_case_next@26"
    },
    "355": {
      "block": "main_echo_route@5",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo[routing]",
      "op": "callsub echo"
    },
    "358": {
      "op": "b main_switch_case_next@26"
    },
    "361": {
      "block": "main_is_a_b_route@4",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b[routing]",
      "op": "callsub is_a_b"
    },
    "364": {
      "op": "b main_switch_case_next@26"
    },
    "367": {
      "block": "main_create_NoOp@27",
      "stack_in": [],
      "op": "b main_after_if_else@28"
    },
    "370": {
      "block": "main___algopy_default_create@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "372": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "NoOp"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "376": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "0"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "378": {
      "op": "&&",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "379": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "380": {
      "op": "b main_block@32"
    },
    "383": {
      "block": "main_block@32",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@33"
    },
    "386": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@33",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "387": {
      "op": "return",
      "stack_out": []
    },
    "388": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b[routing]",
      "params": {},
      "block": "is_a_b",
      "stack_in": [],
      "op": "b is_a_b_block@0"
    },
    "391": {
      "block": "is_a_b_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "394": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "397": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "400": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "403": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.is_a_b",
      "stack_out": []
    },
    "406": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "407": {
      "op": "return",
      "stack_out": []
    },
    "408": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo[routing]",
      "params": {},
      "block": "echo",
      "stack_in": [],
      "op": "b echo_block@0"
    },
    "411": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "414": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "420": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "421": {
      "op": "log",
      "stack_out": []
    },
    "422": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "423": {
      "op": "return",
      "stack_out": []
    },
    "424": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.no_args[routing]",
      "params": {},
      "block": "no_args",
      "stack_in": [],
      "op": "b no_args_block@0"
    },
    "427": {
      "block": "no_args_block@0",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call.logger.Logger.no_args",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.no_args",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "431": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "432": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "435": {
      "op": "log",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64[routing]",
      "params": {},
      "block": "log_uint64",
      "stack_in": [],
      "op": "b log_uint64_block@0"
    },
    "441": {
      "block": "log_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "444": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_uint64",
      "stack_out": []
    },
    "447": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512[routing]",
      "params": {},
      "block": "log_uint512",
      "stack_in": [],
      "op": "b log_uint512_block@0"
    },
    "452": {
      "block": "log_uint512_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "455": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_uint512",
      "stack_out": []
    },
    "458": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string[routing]",
      "params": {},
      "block": "log_string",
      "stack_in": [],
      "op": "b log_string_block@0"
    },
    "463": {
      "block": "log_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "466": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_string",
      "stack_out": []
    },
    "469": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "470": {
      "op": "return",
      "stack_out": []
    },
    "471": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool[routing]",
      "params": {},
      "block": "log_bool",
      "stack_in": [],
      "op": "b log_bool_block@0"
    },
    "474": {
      "block": "log_bool_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "477": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_bool",
      "stack_out": []
    },
    "480": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "481": {
      "op": "return",
      "stack_out": []
    },
    "482": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes[routing]",
      "params": {},
      "block": "log_bytes",
      "stack_in": [],
      "op": "b log_bytes_block@0"
    },
    "485": {
      "block": "log_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "488": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_bytes",
      "stack_out": []
    },
    "491": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "492": {
      "op": "return",
      "stack_out": []
    },
    "493": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]",
      "params": {},
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "b log_asset_account_app_block@0"
    },
    "496": {
      "block": "log_asset_account_app_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "499": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "500": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "503": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "506": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "507": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "511": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "513": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "stack_out": []
    },
    "516": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "517": {
      "op": "return",
      "stack_out": []
    },
    "518": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address[routing]",
      "params": {},
      "block": "log_address",
      "stack_in": [],
      "op": "b log_address_block@0"
    },
    "521": {
      "block": "log_address_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "524": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_address",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.log_address",
      "stack_out": []
    },
    "527": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "528": {
      "op": "return",
      "stack_out": []
    },
    "529": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]",
      "params": {},
      "block": "echo_native_string",
      "stack_in": [],
      "op": "b echo_native_string_block@0"
    },
    "532": {
      "block": "echo_native_string_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "535": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "541": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "542": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "543": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "544": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "547": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "549": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "550": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "551": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "554": {
      "op": "log",
      "stack_out": []
    },
    "555": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "556": {
      "op": "return",
      "stack_out": []
    },
    "557": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]",
      "params": {},
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "b echo_native_bytes_block@0"
    },
    "560": {
      "block": "echo_native_bytes_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "563": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "569": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "570": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "571": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "572": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "575": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "578": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "579": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "581": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "582": {
      "op": "log",
      "stack_out": []
    },
    "583": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "584": {
      "op": "return",
      "stack_out": []
    },
    "585": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]",
      "params": {},
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "b echo_native_uint64_block@0"
    },
    "588": {
      "block": "echo_native_uint64_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "591": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "592": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "595": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "596": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "597": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "599": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "600": {
      "op": "log",
      "stack_out": []
    },
    "601": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "602": {
      "op": "return",
      "stack_out": []
    },
    "603": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]",
      "params": {},
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "b echo_native_biguint_block@0"
    },
    "606": {
      "block": "echo_native_biguint_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "612": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "613": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%value_len%0#0"
      ]
    },
    "614": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "616": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "617": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "618": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%1#0",
        "64"
      ]
    },
    "620": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%bzero%0#0"
      ]
    },
    "621": {
      "op": "b|",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "622": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "623": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "625": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "626": {
      "op": "log",
      "stack_out": []
    },
    "627": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "628": {
      "op": "return",
      "stack_out": []
    },
    "629": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]",
      "params": {},
      "block": "echo_resource_by_index",
      "stack_in": [],
      "op": "b echo_resource_by_index_block@0"
    },
    "632": {
      "block": "echo_resource_by_index_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "635": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "638": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "641": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "642": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "644": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8)%2#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "648": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "650": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%1#0"
      ]
    },
    "652": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "654": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "656": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "659": {
      "op": "cover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "661": {
      "op": "cover 1",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0"
      ]
    },
    "663": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "664": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "665": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%0#0"
      ]
    },
    "668": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "tmp%7#0"
      ]
    },
    "670": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "671": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "aggregate%head%1#0"
      ]
    },
    "672": {
      "op": "uncover 1",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint8[32])%0#0"
      ]
    },
    "674": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "675": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "676": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "678": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "679": {
      "op": "log",
      "stack_out": []
    },
    "680": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "681": {
      "op": "return",
      "stack_out": []
    },
    "682": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]",
      "params": {},
      "block": "echo_resource_by_value",
      "stack_in": [],
      "op": "b echo_resource_by_value_block@0"
    },
    "685": {
      "block": "echo_resource_by_value_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "688": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "689": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "692": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "693": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "696": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "698": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "700": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "702": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "705": {
      "op": "cover 2",
      "stack_out": [
        "tmp%5#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "707": {
      "op": "cover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "709": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "710": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "711": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%head%0#0"
      ]
    },
    "714": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%0#0",
        "tmp%4#0"
      ]
    },
    "716": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "717": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "aggregate%head%1#0"
      ]
    },
    "718": {
      "op": "uncover 1",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint8[32])%0#0"
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "721": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "722": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%6#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "725": {
      "op": "log",
      "stack_out": []
    },
    "726": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "727": {
      "op": "return",
      "stack_out": []
    },
    "728": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]",
      "params": {},
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "b echo_native_tuple_block@0"
    },
    "731": {
      "block": "echo_native_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "734": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "737": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "740": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "743": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "746": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "747": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "750": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "752": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "754": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "756": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "758": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "761": {
      "op": "cover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "763": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "765": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "767": {
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "768": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%length%0#0"
      ]
    },
    "769": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "770": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "773": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%length_uint16%0#0",
        "tmp%4#0"
      ]
    },
    "775": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "776": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "76"
      ]
    },
    "778": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "779": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "782": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "783": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "785": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0"
      ]
    },
    "786": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "788": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "789": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "790": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "792": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "793": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%5#0 (copy)"
      ]
    },
    "795": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length%1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "796": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "797": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "800": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%5#0"
      ]
    },
    "802": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "803": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "805": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "806": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "809": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%0#0"
      ]
    },
    "811": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "814": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%6#0"
      ]
    },
    "816": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "817": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "818": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%7#0 (copy)"
      ]
    },
    "820": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0"
      ]
    },
    "821": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "823": {
      "op": "<=",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%len_ok%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "824": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "825": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "64"
      ]
    },
    "827": {
      "op": "bzero",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%bzero%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%bzero%0#0"
      ]
    },
    "828": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%bzero%0#0",
        "tmp%7#0"
      ]
    },
    "830": {
      "op": "b|",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(uint512)%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(uint512)%0#0"
      ]
    },
    "831": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "832": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "835": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "837": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "838": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "839": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "841": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "842": {
      "op": "log",
      "stack_out": []
    },
    "843": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "844": {
      "op": "return",
      "stack_out": []
    },
    "845": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]",
      "params": {},
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "b echo_nested_tuple_block@0"
    },
    "848": {
      "block": "echo_nested_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "851": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "852": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "0"
      ]
    },
    "853": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "854": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "856": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "857": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "858": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "859": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "861": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "863": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "865": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "866": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "867": {
      "op": "intc_1 // 0",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "868": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "869": {
      "op": "cover 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0"
      ]
    },
    "871": {
      "op": "dup",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "872": {
      "op": "intc_2 // 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "873": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "874": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "876": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "878": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "880": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "881": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "884": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "886": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "887": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "888": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "889": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0"
      ]
    },
    "891": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "892": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "aggregate%len%0#0"
      ]
    },
    "893": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "895": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "897": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0"
      ]
    },
    "899": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "900": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "902": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "903": {
      "op": "intc_2 // 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "904": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "905": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "907": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "908": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%1#0"
      ]
    },
    "909": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "911": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "913": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "915": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "916": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "917": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "918": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "919": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0"
      ]
    },
    "920": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%item0%1#0"
      ]
    },
    "921": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "923": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "924": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "8"
      ]
    },
    "925": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "8",
        "8"
      ]
    },
    "926": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%1#0"
      ]
    },
    "927": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "929": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "930": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "16"
      ]
    },
    "932": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "933": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0"
      ]
    },
    "935": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "936": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "aggregate%len%2#0"
      ]
    },
    "937": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "939": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "941": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "943": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%4#0"
      ]
    },
    "944": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%2#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0"
      ]
    },
    "947": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "949": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "951": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%0#0",
        "aggregate%item2%0#0",
        "tmp%1#0"
      ]
    },
    "953": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%0#0",
        "aggregate%item2%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "955": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%item2%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item2%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "957": {
      "op": "uncover 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "959": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "961": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "963": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "965": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "967": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "969": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "972": {
      "op": "cover 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "974": {
      "op": "cover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "976": {
      "op": "cover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "978": {
      "op": "cover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "980": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "981": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%length%0#0"
      ]
    },
    "982": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "983": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "986": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%length_uint16%0#0",
        "tmp%5#0"
      ]
    },
    "988": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "989": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "4"
      ]
    },
    "991": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "992": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "995": {
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "996": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "998": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0"
      ]
    },
    "999": {
      "op": "cover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1001": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "1002": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1003": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "4"
      ]
    },
    "1005": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1006": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1007": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1010": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%0#0"
      ]
    },
    "1012": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1014": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "1015": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1017": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%concat%0#0"
      ]
    },
    "1018": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%concat%0#0",
        "tmp%6#0"
      ]
    },
    "1020": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "1021": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "4"
      ]
    },
    "1023": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%3#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "1024": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1027": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "1028": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "1030": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%2#0"
      ]
    },
    "1031": {
      "op": "cover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "1033": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1034": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0"
      ]
    },
    "1035": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "1037": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "1038": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "tmp%7#0"
      ]
    },
    "1040": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1041": {
      "op": "bytec_2 // 0x",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1042": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1044": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%3#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%8#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%3#0"
      ]
    },
    "1045": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%3#0",
        "tmp%8#0"
      ]
    },
    "1047": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0"
      ]
    },
    "1048": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1050": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "aggregate%length%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length%1#0"
      ]
    },
    "1051": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "1052": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1055": {
      "op": "uncover 5",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%length_uint16%1#0",
        "tmp%9#0"
      ]
    },
    "1057": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1058": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "18"
      ]
    },
    "1060": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%5#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "1061": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1064": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%4#0"
      ]
    },
    "1066": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0",
        "aggregate%head%5#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%5#0"
      ]
    },
    "1069": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%5#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "1071": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "1072": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "1074": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%6#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "1075": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%4#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1078": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "aggregate%head%2#0"
      ]
    },
    "1080": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "1082": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0"
      ]
    },
    "1083": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "1085": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%3#0"
      ]
    },
    "1086": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%3#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "1088": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1089": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "1090": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "1092": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1093": {
      "op": "log",
      "stack_out": []
    },
    "1094": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1095": {
      "op": "return",
      "stack_out": []
    },
    "1096": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]",
      "params": {},
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "b return_args_after_14th_block@0"
    },
    "1099": {
      "block": "return_args_after_14th_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1102": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1105": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1108": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "1111": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "1114": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "1117": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "1120": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "1123": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "1126": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "1129": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "1132": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "1135": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "1138": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "1141": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ]
    },
    "1144": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0",
        "0"
      ]
    },
    "1145": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0",
        "0",
        "1"
      ]
    },
    "1146": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0"
      ]
    },
    "1147": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0"
      ]
    },
    "1150": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "1"
      ]
    },
    "1151": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "1",
        "1"
      ]
    },
    "1152": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "1153": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0"
      ]
    },
    "1156": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "2"
      ]
    },
    "1157": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "2",
        "1"
      ]
    },
    "1158": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ]
    },
    "1159": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0"
      ]
    },
    "1162": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "3"
      ]
    },
    "1164": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "3",
        "1"
      ]
    },
    "1165": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ]
    },
    "1166": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0"
      ]
    },
    "1169": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "4"
      ]
    },
    "1171": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "4",
        "4"
      ]
    },
    "1173": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "1174": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0"
      ]
    },
    "1177": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "8"
      ]
    },
    "1178": {
      "op": "intc_0 // 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "8",
        "1"
      ]
    },
    "1179": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ]
    },
    "1180": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1182": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1184": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1186": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "1188": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "1190": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "1192": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "1194": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "1196": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "1198": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "1200": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "1202": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "1204": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "1206": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "1208": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0"
      ]
    },
    "1210": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "1212": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ]
    },
    "1214": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ]
    },
    "1216": {
      "op": "uncover 19",
      "stack_out": [
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "1218": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%2#0",
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ]
    },
    "1220": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1223": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "1224": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "1226": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1227": {
      "op": "log",
      "stack_out": []
    },
    "1228": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1229": {
      "op": "return",
      "stack_out": []
    },
    "1230": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]",
      "params": {},
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "b logs_are_equal_block@0"
    },
    "1233": {
      "block": "logs_are_equal_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "1236": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1237": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "1238": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "1239": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1240": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "1241": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "1243": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1244": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "1245": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1246": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "1248": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "1249": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1250": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "1252": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1254": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1256": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "1257": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1260": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "1263": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "1264": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "0"
      ]
    },
    "1265": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "1266": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "1267": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%item0%1#0"
      ]
    },
    "1268": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "1270": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "1271": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "8"
      ]
    },
    "1272": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1273": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "1275": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "1276": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%1#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%len%1#0"
      ]
    },
    "1277": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "1279": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1281": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "1283": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%1#0"
      ]
    },
    "1284": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1287": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1289": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1291": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1293": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1295": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1298": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x00"
      ]
    },
    "1301": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%4#0",
        "0x00",
        "0"
      ]
    },
    "1302": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%4#0"
      ]
    },
    "1304": {
      "op": "setbit",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1305": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "1306": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%5#0"
      ]
    },
    "1308": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1309": {
      "op": "log",
      "stack_out": []
    },
    "1310": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1311": {
      "op": "return",
      "stack_out": []
    },
    "1312": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]",
      "params": {},
      "block": "echo_log_struct",
      "stack_in": [],
      "op": "b echo_log_struct_block@0"
    },
    "1315": {
      "block": "echo_log_struct_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "1318": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "op": "callsub test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1321": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "1322": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "1324": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1325": {
      "op": "log",
      "stack_out": []
    },
    "1326": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1327": {
      "op": "return",
      "stack_out": []
    },
    "1328": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1331": {
      "op": "b test_cases.typed_abi_call.logger.Logger.is_a_b_block@0"
    },
    "1334": {
      "block": "test_cases.typed_abi_call.logger.Logger.is_a_b_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1336": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "1339": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1340": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "1341": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "1343": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "1346": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1347": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "1348": {
      "retsub": true,
      "op": "retsub"
    },
    "1349": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1352": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_block@0"
    },
    "1355": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1356": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1357": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1358": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1361": {
      "op": "bytec_1 // \"echo: \"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"echo: \""
      ]
    },
    "1362": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1363": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "1365": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0"
      ]
    },
    "1366": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)"
      ]
    },
    "1368": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "1369": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)",
        "2",
        "total_length%0#0"
      ]
    },
    "1371": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1372": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0"
      ]
    },
    "1373": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ],
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1374": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "1375": {
      "op": "cover 1",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "1377": {
      "op": "dup",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1378": {
      "op": "intc_2 // 2",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "1379": {
      "op": "uncover 3",
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "1381": {
      "op": "substring3",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "1382": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0"
      ]
    },
    "1383": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "1384": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "1385": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1386": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1389": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "1391": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "1392": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "1394": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1395": {
      "retsub": true,
      "op": "retsub"
    },
    "1396": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.no_args",
      "params": {},
      "block": "test_cases.typed_abi_call.logger.Logger.no_args",
      "stack_in": [],
      "op": "b test_cases.typed_abi_call.logger.Logger.no_args_block@0"
    },
    "1399": {
      "block": "test_cases.typed_abi_call.logger.Logger.no_args_block@0",
      "stack_in": [],
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "1401": {
      "retsub": true,
      "op": "retsub"
    },
    "1402": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1405": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_uint64_block@0"
    },
    "1408": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1410": {
      "op": "log",
      "stack_out": []
    },
    "1411": {
      "retsub": true,
      "op": "retsub"
    },
    "1412": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1415": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_uint512_block@0"
    },
    "1418": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_uint512_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1420": {
      "op": "log",
      "stack_out": []
    },
    "1421": {
      "retsub": true,
      "op": "retsub"
    },
    "1422": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1425": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_string_block@0"
    },
    "1428": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_string_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1430": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1433": {
      "op": "log",
      "stack_out": []
    },
    "1434": {
      "retsub": true,
      "op": "retsub"
    },
    "1435": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1438": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_bool_block@0"
    },
    "1441": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1443": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0"
      ]
    },
    "1444": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1445": {
      "op": "pushbytes 0x46616c7365",
      "defined_out": [
        "0x46616c7365",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365"
      ]
    },
    "1452": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "1458": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "1460": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "1461": {
      "op": "log",
      "stack_out": []
    },
    "1462": {
      "retsub": true,
      "op": "retsub"
    },
    "1463": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1466": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_bytes_block@0"
    },
    "1469": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1471": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1474": {
      "op": "log",
      "stack_out": []
    },
    "1475": {
      "retsub": true,
      "op": "retsub"
    },
    "1476": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "params": {
        "asset#0": "uint64",
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1479": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_asset_account_app_block@0"
    },
    "1482": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1484": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1486": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1487": {
      "op": "bytec_2 // \"\"",
      "defined_out": [
        "\"\"",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "\"\""
      ]
    },
    "1488": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1489": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account#0 (copy)"
      ]
    },
    "1491": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1492": {
      "op": "bytec_2 // \"\"",
      "stack_out": [
        "tmp%1#0",
        "\"\""
      ]
    },
    "1493": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1494": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "1496": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1498": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "1499": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1500": {
      "op": "log",
      "stack_out": []
    },
    "1501": {
      "retsub": true,
      "op": "retsub"
    },
    "1502": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address",
      "params": {
        "address#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.log_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1505": {
      "op": "b test_cases.typed_abi_call.logger.Logger.log_address_block@0"
    },
    "1508": {
      "block": "test_cases.typed_abi_call.logger.Logger.log_address_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "1510": {
      "op": "log",
      "stack_out": []
    },
    "1511": {
      "retsub": true,
      "op": "retsub"
    },
    "1512": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1515": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_native_string_block@0"
    },
    "1518": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_string_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1519": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ]
    },
    "1521": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1522": {
      "retsub": true,
      "op": "retsub"
    },
    "1523": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1526": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_native_bytes_block@0"
    },
    "1529": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20"
      ],
      "stack_out": [
        "0x6563686f3a20"
      ]
    },
    "1530": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ],
      "stack_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ]
    },
    "1532": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1533": {
      "retsub": true,
      "op": "retsub"
    },
    "1534": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "params": {
        "value#0": "uint64"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1537": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_native_uint64_block@0"
    },
    "1540": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1542": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1543": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1544": {
      "retsub": true,
      "op": "retsub"
    },
    "1545": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "params": {
        "value#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1548": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_native_biguint_block@0"
    },
    "1551": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1553": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0x01"
      ]
    },
    "1554": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1555": {
      "retsub": true,
      "op": "retsub"
    },
    "1556": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "params": {
        "asset#0": "uint64",
        "app#0": "uint64",
        "acc#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1559": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_resource_by_index_block@0"
    },
    "1562": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1565": {
      "op": "btoi",
      "defined_out": [
        "asset_idx#0"
      ],
      "stack_out": [
        "asset_idx#0"
      ]
    },
    "1566": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1568": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "asset#0 (copy)"
      ]
    },
    "1570": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1571": {
      "error": "expected asset to be passed by index",
      "op": "assert // expected asset to be passed by index",
      "stack_out": []
    },
    "1572": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1575": {
      "op": "btoi",
      "defined_out": [
        "app_idx#0"
      ],
      "stack_out": [
        "app_idx#0"
      ]
    },
    "1576": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1578": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "app#0 (copy)"
      ]
    },
    "1580": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1581": {
      "error": "expected application to be passed by index",
      "op": "assert // expected application to be passed by index",
      "stack_out": []
    },
    "1582": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1585": {
      "op": "btoi",
      "defined_out": [
        "acc_idx#0"
      ],
      "stack_out": [
        "acc_idx#0"
      ]
    },
    "1586": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1588": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "acc#0 (copy)"
      ]
    },
    "1590": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1591": {
      "error": "expected account to be passed by index",
      "op": "assert // expected account to be passed by index",
      "stack_out": []
    },
    "1592": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1594": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "1596": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "1598": {
      "retsub": true,
      "op": "retsub"
    },
    "1599": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "params": {
        "asset#0": "uint64",
        "app#0": "uint64",
        "acc#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1602": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_resource_by_value_block@0"
    },
    "1605": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1608": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "1609": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "asset#0 (copy)"
      ]
    },
    "1611": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1612": {
      "error": "expected asset to be passed by value",
      "op": "assert // expected asset to be passed by value",
      "stack_out": []
    },
    "1613": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1616": {
      "op": "btoi",
      "defined_out": [
        "app_id#0"
      ],
      "stack_out": [
        "app_id#0"
      ]
    },
    "1617": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "app_id#0"
      ],
      "stack_out": [
        "app_id#0",
        "app#0 (copy)"
      ]
    },
    "1619": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1620": {
      "error": "expected application to be passed by value",
      "op": "assert // expected application to be passed by value",
      "stack_out": []
    },
    "1621": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "1624": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "acc#0 (copy)"
      ]
    },
    "1626": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1627": {
      "error": "expected account to be passed by value",
      "op": "assert // expected account to be passed by value",
      "stack_out": []
    },
    "1628": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1630": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "1632": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "1634": {
      "retsub": true,
      "op": "retsub"
    },
    "1635": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "params": {
        "s#0": "bytes",
        "b#0": "bytes",
        "u#0": "uint64",
        "bu#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "1638": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_native_tuple_block@0"
    },
    "1641": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple_block@0",
      "stack_in": [],
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1642": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ]
    },
    "1644": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1645": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "1646": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x6563686f3a20",
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0 (copy)"
      ]
    },
    "1648": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1649": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ]
    },
    "1651": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)",
        "1"
      ]
    },
    "1652": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1653": {
      "op": "frame_dig -1",
      "defined_out": [
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)"
      ]
    },
    "1655": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)",
        "0x01"
      ]
    },
    "1656": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1657": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1659": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1661": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1663": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1665": {
      "retsub": true,
      "op": "retsub"
    },
    "1666": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "params": {
        "tuple_of_tuples.0.0#0": "bytes",
        "tuple_of_tuples.0.1#0": "bytes",
        "tuple_of_tuples.1.0#0": "uint64",
        "tuple_of_tuples.1.1#0": "bytes",
        "tuple_of_tuples.1.2#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1669": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_nested_tuple_block@0"
    },
    "1672": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "string#0"
      ],
      "stack_out": [
        "string#0"
      ]
    },
    "1674": {
      "op": "frame_dig -4",
      "defined_out": [
        "string#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ],
      "stack_out": [
        "string#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ]
    },
    "1676": {
      "op": "cover 1",
      "defined_out": [
        "arc4_string#0",
        "string#0"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0"
      ]
    },
    "1678": {
      "op": "frame_dig -3",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ]
    },
    "1680": {
      "op": "cover 2",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1682": {
      "op": "frame_dig -2",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.1#0 (copy)",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.1#0 (copy)"
      ]
    },
    "1684": {
      "op": "cover 3",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1686": {
      "op": "frame_dig -1",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "tuple_of_tuples.1.2#0 (copy)",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.2#0 (copy)"
      ]
    },
    "1688": {
      "op": "cover 4",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1690": {
      "op": "bytec_1 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "\"echo: \""
      ]
    },
    "1691": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \"",
        "string#0"
      ]
    },
    "1693": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%0#0"
      ]
    },
    "1694": {
      "op": "cover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0"
      ]
    },
    "1696": {
      "op": "bytec_1 // \"echo: \"",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \""
      ]
    },
    "1697": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length%0#0"
      ]
    },
    "1698": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1699": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1702": {
      "op": "bytec_1 // \"echo: \"",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length_uint16%0#0",
        "\"echo: \""
      ]
    },
    "1703": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0"
      ]
    },
    "1704": {
      "op": "dig 1",
      "defined_out": [
        "arc4_string#0",
        "arc4_string#0 (copy)",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0",
        "arc4_string#0 (copy)"
      ]
    },
    "1706": {
      "op": "len",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "total_length%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0",
        "total_length%0#0"
      ]
    },
    "1707": {
      "op": "cover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "total_length%0#0",
        "tmp%1#0"
      ]
    },
    "1709": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%0#0",
        "tmp%1#0",
        "arc4_string#0"
      ]
    },
    "1711": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "total_length%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%0#0",
        "tmp%1#0",
        "arc4_string#0",
        "2"
      ]
    },
    "1712": {
      "op": "uncover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "tmp%1#0",
        "arc4_string#0",
        "2",
        "total_length%0#0"
      ]
    },
    "1714": {
      "op": "substring3",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "extract_to_end%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "tmp%1#0",
        "extract_to_end%0#0"
      ]
    },
    "1715": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0"
      ]
    },
    "1716": {
      "op": "dup",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1717": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "total_length%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "1718": {
      "op": "cover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "1720": {
      "op": "dup",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1721": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "1722": {
      "op": "uncover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "1724": {
      "op": "substring3",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "extract_to_end%1#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "1725": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "len%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "1726": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "len%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "1727": {
      "op": "/",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "div_floor%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "1728": {
      "op": "itob",
      "defined_out": [
        "arc4_u64#0",
        "as_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1729": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_u64#0",
        "as_u16_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1732": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "1734": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "arc4_u64#0",
        "as_u16_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "1735": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "1737": {
      "op": "replace3",
      "defined_out": [
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1738": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "u64#0"
      ]
    },
    "1740": {
      "op": "intc_0 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "u64#0",
        "1"
      ]
    },
    "1741": {
      "op": "+",
      "defined_out": [
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "1742": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "arc4_u64#0"
      ]
    },
    "1744": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1745": {
      "op": "intc_0 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1746": {
      "op": "+",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "1747": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1748": {
      "op": "bytec_1 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "0x6563686f3a20"
      ]
    },
    "1749": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "0x6563686f3a20",
        "bytez#0"
      ]
    },
    "1751": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1752": {
      "op": "uncover 4",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "1754": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1756": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "1758": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1760": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1762": {
      "retsub": true,
      "op": "retsub"
    },
    "1763": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "params": {
        "_a1#0": "bytes",
        "_a2#0": "bytes",
        "_a3#0": "bytes",
        "_a4#0": "bytes",
        "_a5#0": "bytes",
        "_a6#0": "bytes",
        "_a7#0": "bytes",
        "_a8#0": "bytes",
        "_a9#0": "bytes",
        "_a10#0": "bytes",
        "_a11#0": "bytes",
        "_a12#0": "bytes",
        "_a13#0": "bytes",
        "_a14#0": "bytes",
        "a15#0": "bytes",
        "a16#0": "bytes",
        "a17#0": "bytes",
        "a18#0": "bytes",
        "a19#0": "bytes",
        "a20#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "stack_in": [],
      "op": "proto 20 1"
    },
    "1766": {
      "op": "b test_cases.typed_abi_call.logger.Logger.return_args_after_14th_block@0"
    },
    "1769": {
      "block": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1770": {
      "op": "frame_dig -6",
      "defined_out": [
        "0x",
        "a15#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a15#0 (copy)"
      ]
    },
    "1772": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "1773": {
      "op": "frame_dig -5",
      "defined_out": [
        "a16#0 (copy)",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "a16#0 (copy)"
      ]
    },
    "1775": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1776": {
      "op": "frame_dig -4",
      "defined_out": [
        "a17#0 (copy)",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "a17#0 (copy)"
      ]
    },
    "1778": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1779": {
      "op": "frame_dig -3",
      "defined_out": [
        "a18#0 (copy)",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "a18#0 (copy)"
      ]
    },
    "1781": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0"
      ]
    },
    "1782": {
      "op": "frame_dig -2",
      "defined_out": [
        "a19#0 (copy)",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0",
        "a19#0 (copy)"
      ]
    },
    "1784": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0"
      ]
    },
    "1785": {
      "op": "frame_dig -1",
      "defined_out": [
        "a20#0 (copy)",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "a20#0 (copy)"
      ]
    },
    "1787": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1788": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "1791": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0",
        "last_arg#0 (copy)"
      ]
    },
    "1793": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%2#0"
      ]
    },
    "1794": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1795": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1796": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length%0#0"
      ]
    },
    "1797": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1798": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1801": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1803": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1804": {
      "retsub": true,
      "op": "retsub"
    },
    "1805": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "params": {
        "log_1.level#0": "uint64",
        "log_1.message#0": "bytes",
        "log_2.level#0": "uint64",
        "log_2.message#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1808": {
      "op": "b test_cases.typed_abi_call.logger.Logger.logs_are_equal_block@0"
    },
    "1811": {
      "block": "test_cases.typed_abi_call.logger.Logger.logs_are_equal_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "log_1.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)"
      ]
    },
    "1813": {
      "op": "frame_dig -2",
      "defined_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ]
    },
    "1815": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1816": {
      "op": "frame_dig -3",
      "defined_out": [
        "log_1.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)"
      ]
    },
    "1818": {
      "op": "frame_dig -1",
      "defined_out": [
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)"
      ]
    },
    "1820": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1821": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1822": {
      "retsub": true,
      "op": "retsub"
    },
    "1823": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "params": {
        "log#0": "bytes"
      },
      "block": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1826": {
      "op": "b test_cases.typed_abi_call.logger.Logger.echo_log_struct_block@0"
    },
    "1829": {
      "block": "test_cases.typed_abi_call.logger.Logger.echo_log_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0 (copy)"
      ]
    },
    "1831": {
      "retsub": true,
      "op": "retsub"
    }
  }
}