{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2GK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3GL;;;AA2GK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvGL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAuGK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA5BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3EL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AA2EK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhEL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAgEK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1DL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AA0DK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;;AAsDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlDL;;;AAAA;AAkDK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9CL;;;AAAA;;;AA8CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtCL;;;AAsCK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlCL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkCK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9BL;;;AA8BK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1BL;;;AA0BK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBL;;;AAsBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBL;;;AAkBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAdL;;;AAcK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AANL;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEe;;AAAK;;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;AAER;;;AAEe;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAIO;;AAAP;AAER;;;AAEQ;;AAAA;;AAER;;;AAEQ;;AAAA;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAE8B;;;AAAA;AAAkB;;;;;;;AAApC;;;;;;AAAA;;AAAA;AAAJ;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAEY;;AAAA;;AAAA;AAAJ;AAAgB;AAAA;;AAAA;AAAhB;AAA+B;AAAA;;AAAA;;AAAA;AAAA;AAA/B;;AAER;;;AAEQ;;AAAA;;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;AAEe;;AAAQ;;;AAAR;AAAP;AAER;;;AAIe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;;;AAAL;AAA3C;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAIQ;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACQ;AAAA;AAAA;AAAA;;AAAmB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACvB;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AAHJ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAMR;;;AAwBmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAER;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x 0x6563686f3a20 0x00066563686f3a20"
    },
    "31": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "33": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "34": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@24",
      "stack_out": []
    },
    "38": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "47": {
      "op": "pushbytes 0x9bf81913 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)"
      ]
    },
    "53": {
      "op": "pushbytes 0xb862ee19 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)"
      ]
    },
    "59": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)"
      ]
    },
    "65": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)"
      ]
    },
    "71": {
      "op": "pushbytes 0xb4b4334e // method \"log(string)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)"
      ]
    },
    "77": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)"
      ]
    },
    "83": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)"
      ]
    },
    "89": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)"
      ]
    },
    "95": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)"
      ]
    },
    "101": {
      "op": "pushbytes 0x4a444c77 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)"
      ]
    },
    "107": {
      "op": "pushbytes 0x2659e818 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "113": {
      "op": "pushbytes 0xa9fb6cf1 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "119": {
      "op": "pushbytes 0xd8cc363b // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "125": {
      "op": "pushbytes 0x16e03919 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "131": {
      "op": "pushbytes 0xab271ce4 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "137": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "143": {
      "op": "pushbytes 0xddd07185 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "149": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "155": {
      "op": "uncover 19",
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%2#0"
      ]
    },
    "157": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_native_tuple_route@17 main_echo_nested_tuple_route@18 main_return_args_after_14th_route@19 main_logs_are_equal_route@20 main_echo_log_struct_route@21",
      "stack_out": []
    },
    "197": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "199": {
      "block": "main_echo_log_struct_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "201": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "NoOp"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "203": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "206": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "0"
      ]
    },
    "207": {
      "op": "!=",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "208": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "209": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "212": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "op": "callsub echo_log_struct",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "215": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0",
        "0x151f7c75"
      ]
    },
    "216": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%124#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "218": {
      "op": "log",
      "stack_out": []
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "223": {
      "block": "main_logs_are_equal_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "225": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "NoOp"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "227": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "228": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "230": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "0"
      ]
    },
    "231": {
      "op": "!=",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "tmp%116#0",
        "tmp%116#0 (copy)"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%116#0 (copy)"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%116#0",
        "tmp%116#0 (copy)",
        "0"
      ]
    },
    "238": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%116#0",
        "tmp%116#0 (copy)"
      ],
      "stack_out": [
        "tmp%116#0",
        "tmp%116#0 (copy)",
        "0",
        "8"
      ]
    },
    "239": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%5#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "item0%5#0"
      ]
    },
    "240": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "item0%6#0"
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "tmp%116#0"
      ]
    },
    "242": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "tmp%116#0",
        "tmp%116#0 (copy)"
      ]
    },
    "243": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%6#0",
        "tmp%116#0",
        "tmp%116#0 (copy)",
        "8"
      ]
    },
    "244": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "item0%6#0",
        "tmp%116#0",
        "item_start_offset%5#0"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "tmp%116#0"
      ]
    },
    "246": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "tmp%116#0",
        "tmp%116#0 (copy)"
      ]
    },
    "247": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "tmp%116#0",
        "item_end_offset%5#0"
      ]
    },
    "248": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%116#0"
      ]
    },
    "249": {
      "op": "uncover 2",
      "stack_out": [
        "item0%6#0",
        "item_end_offset%5#0",
        "tmp%116#0",
        "item_start_offset%5#0"
      ]
    },
    "251": {
      "op": "uncover 2",
      "stack_out": [
        "item0%6#0",
        "tmp%116#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "253": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%3#0"
      ]
    },
    "254": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%6#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0"
      ]
    },
    "257": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0"
      ]
    },
    "260": {
      "op": "dup",
      "defined_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "tmp%117#0 (copy)"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "tmp%117#0 (copy)"
      ]
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "tmp%117#0 (copy)",
        "0"
      ]
    },
    "262": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "tmp%117#0 (copy)",
        "0",
        "8"
      ]
    },
    "263": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%6#0",
        "item0%7#0",
        "item1%4#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "item0%7#0"
      ]
    },
    "264": {
      "op": "btoi",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "tmp%117#0",
        "item0%8#0"
      ]
    },
    "265": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "tmp%117#0"
      ]
    },
    "266": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "tmp%117#0",
        "tmp%117#0 (copy)"
      ]
    },
    "267": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "tmp%117#0",
        "tmp%117#0 (copy)",
        "8"
      ]
    },
    "268": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item_start_offset%6#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "tmp%117#0",
        "item_start_offset%6#0"
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "tmp%117#0"
      ]
    },
    "270": {
      "op": "dup",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "tmp%117#0",
        "tmp%117#0 (copy)"
      ]
    },
    "271": {
      "op": "len",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "tmp%117#0",
        "item_end_offset%6#0"
      ]
    },
    "272": {
      "op": "swap",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%117#0"
      ]
    },
    "273": {
      "op": "uncover 2",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item_end_offset%6#0",
        "tmp%117#0",
        "item_start_offset%6#0"
      ]
    },
    "275": {
      "op": "uncover 2",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "tmp%117#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "277": {
      "op": "substring3",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item1%5#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item1%5#0"
      ]
    },
    "278": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%6#0",
        "item0%8#0",
        "item1%4#0",
        "item1%6#0"
      ],
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item1%6#0"
      ]
    },
    "281": {
      "op": "uncover 3",
      "stack_out": [
        "item1%4#0",
        "item0%8#0",
        "item1%6#0",
        "item0%6#0"
      ]
    },
    "283": {
      "op": "uncover 3",
      "stack_out": [
        "item0%8#0",
        "item1%6#0",
        "item0%6#0",
        "item1%4#0"
      ]
    },
    "285": {
      "op": "uncover 3",
      "stack_out": [
        "item1%6#0",
        "item0%6#0",
        "item1%4#0",
        "item0%8#0"
      ]
    },
    "287": {
      "op": "uncover 3",
      "stack_out": [
        "item0%6#0",
        "item1%4#0",
        "item0%8#0",
        "item1%6#0"
      ]
    },
    "289": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "op": "callsub logs_are_equal",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "292": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "296": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "298": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "299": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "300": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "301": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "302": {
      "op": "log",
      "stack_out": []
    },
    "303": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "304": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "307": {
      "block": "main_return_args_after_14th_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "309": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "NoOp"
      ]
    },
    "310": {
      "op": "==",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "311": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "312": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "314": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0"
      ]
    },
    "315": {
      "op": "!=",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "316": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "317": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "320": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "323": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "326": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "329": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "332": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "335": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "338": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "341": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "344": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "347": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "350": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "353": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "356": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "359": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[9]%0#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[9]%0#0",
        "0"
      ]
    },
    "363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[9]%0#0",
        "0",
        "1"
      ]
    },
    "364": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%1#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "reinterpret_bytes[9]%1#0"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "reinterpret_bytes[9]%1#0",
        "1"
      ]
    },
    "369": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "reinterpret_bytes[9]%1#0",
        "1",
        "1"
      ]
    },
    "370": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%2#0",
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "reinterpret_bytes[9]%2#0"
      ]
    },
    "374": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%2#0",
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "reinterpret_bytes[9]%2#0",
        "2"
      ]
    },
    "375": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "reinterpret_bytes[9]%2#0",
        "2",
        "1"
      ]
    },
    "376": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%3#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "reinterpret_bytes[9]%3#0"
      ]
    },
    "380": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%3#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "reinterpret_bytes[9]%3#0",
        "3"
      ]
    },
    "382": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "reinterpret_bytes[9]%3#0",
        "3",
        "1"
      ]
    },
    "383": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ]
    },
    "384": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%4#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "reinterpret_bytes[9]%4#0"
      ]
    },
    "387": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%4#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "reinterpret_bytes[9]%4#0",
        "4"
      ]
    },
    "389": {
      "op": "dup",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "reinterpret_bytes[9]%4#0",
        "4",
        "4"
      ]
    },
    "390": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "391": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%5#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_bytes[9]%5#0"
      ]
    },
    "394": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[9]%5#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_bytes[9]%5#0",
        "8"
      ]
    },
    "395": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "reinterpret_bytes[9]%5#0",
        "8",
        "1"
      ]
    },
    "396": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "397": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "399": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "401": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "403": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "405": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "407": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "409": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "411": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "413": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "415": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "417": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "419": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "421": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "423": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "425": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0"
      ]
    },
    "427": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "429": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "431": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%108#0",
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0"
      ]
    },
    "433": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%109#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "435": {
      "op": "uncover 19",
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%11#0",
        "reinterpret_bytes[8]%12#0",
        "reinterpret_bytes[8]%13#0",
        "reinterpret_bytes[8]%14#0",
        "reinterpret_bytes[8]%15#0",
        "reinterpret_bytes[8]%16#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "437": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "op": "callsub return_args_after_14th",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "440": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0",
        "0x151f7c75"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%110#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "443": {
      "op": "log",
      "stack_out": []
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "448": {
      "block": "main_echo_nested_tuple_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "450": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "NoOp"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "452": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "0"
      ]
    },
    "456": {
      "op": "!=",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "457": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "458": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "461": {
      "op": "dup",
      "defined_out": [
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ],
      "stack_out": [
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ]
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%98#0",
        "tmp%98#0 (copy)",
        "0"
      ]
    },
    "463": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%0#0"
      ]
    },
    "464": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%98#0"
      ]
    },
    "465": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ]
    },
    "466": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%98#0",
        "tmp%98#0 (copy)",
        "2"
      ]
    },
    "467": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%98#0",
        "item_end_offset%0#0"
      ]
    },
    "468": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%98#0",
        "item_end_offset%0#0",
        "tmp%98#0 (copy)"
      ]
    },
    "470": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%98#0",
        "item_end_offset%0#0",
        "tmp%98#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "472": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%98#0",
        "tmp%98#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "474": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item0%0#0"
      ]
    },
    "475": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "476": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "477": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "479": {
      "op": "dup",
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "480": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "481": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "482": {
      "op": "dig 1",
      "stack_out": [
        "tmp%98#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "484": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "486": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "488": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "489": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "item0%0#0",
        "item0%2#0"
      ]
    },
    "492": {
      "op": "cover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item0%0#0"
      ]
    },
    "494": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "495": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "496": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item_start_offset%2#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item_start_offset%2#0",
        "item0%0#0"
      ]
    },
    "498": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "499": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%2#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item_end_offset%2#0"
      ]
    },
    "500": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "item0%0#0"
      ]
    },
    "501": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item_end_offset%2#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "503": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "505": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item0%2#0",
        "tmp%98#0",
        "item1%0#0"
      ]
    },
    "506": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0"
      ]
    },
    "507": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ]
    },
    "508": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0",
        "tmp%98#0 (copy)",
        "2"
      ]
    },
    "509": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0",
        "item_start_offset%3#0"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%98#0"
      ]
    },
    "511": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%98#0",
        "tmp%98#0 (copy)"
      ]
    },
    "512": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%98#0",
        "item_end_offset%3#0"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%98#0"
      ]
    },
    "514": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "tmp%98#0",
        "item_start_offset%3#0"
      ]
    },
    "516": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "tmp%98#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "518": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ]
    },
    "519": {
      "op": "dup",
      "defined_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0"
      ]
    },
    "521": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "522": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%3#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%3#0"
      ]
    },
    "523": {
      "op": "btoi",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item1%1#0",
        "item0%4#0"
      ]
    },
    "524": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%1#0"
      ]
    },
    "525": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "526": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8"
      ]
    },
    "527": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8",
        "8"
      ]
    },
    "528": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%1#0",
        "item1%2#0"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0"
      ]
    },
    "530": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "531": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "533": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0"
      ]
    },
    "535": {
      "op": "dup",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "536": {
      "op": "len",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item_end_offset%4#0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "538": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "540": {
      "op": "uncover 2",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "542": {
      "op": "substring3",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "543": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%2#0",
        "item0%4#0",
        "item1%0#0",
        "item1%2#0",
        "item2%1#0"
      ],
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "546": {
      "op": "uncover 4",
      "stack_out": [
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0",
        "item0%2#0"
      ]
    },
    "548": {
      "op": "uncover 4",
      "stack_out": [
        "item0%4#0",
        "item1%2#0",
        "item2%1#0",
        "item0%2#0",
        "item1%0#0"
      ]
    },
    "550": {
      "op": "uncover 4",
      "stack_out": [
        "item1%2#0",
        "item2%1#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0"
      ]
    },
    "552": {
      "op": "uncover 4",
      "stack_out": [
        "item2%1#0",
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0"
      ]
    },
    "554": {
      "op": "uncover 4",
      "stack_out": [
        "item0%2#0",
        "item1%0#0",
        "item0%4#0",
        "item1%2#0",
        "item2%1#0"
      ]
    },
    "556": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "op": "callsub echo_nested_tuple",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "559": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "561": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "563": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "565": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0"
      ]
    },
    "566": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "567": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length%4#0"
      ]
    },
    "568": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "as_bytes%6#0"
      ]
    },
    "569": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length_uint16%4#0"
      ]
    },
    "572": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "length_uint16%4#0",
        "elements_to_encode%4#0"
      ]
    },
    "573": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0"
      ]
    },
    "574": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "4"
      ]
    },
    "576": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "as_bytes%7#0"
      ]
    },
    "577": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ]
    },
    "580": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ]
    },
    "584": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "585": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "data_length%2#0"
      ]
    },
    "586": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "data_length%2#0",
        "4"
      ]
    },
    "588": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "current_tail_offset%4#0"
      ]
    },
    "589": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "as_bytes%8#0"
      ]
    },
    "590": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "593": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "595": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%3#0"
      ]
    },
    "596": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "597": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0"
      ]
    },
    "598": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "599": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "encoded_tuple_buffer%10#0",
        "elements_to_encode%5#0"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "elements_to_encode%6#0"
      ]
    },
    "602": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ]
    },
    "603": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%8#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "elements_to_encode%8#0 (copy)"
      ]
    },
    "605": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "length%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length%5#0"
      ]
    },
    "606": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "as_bytes%9#0"
      ]
    },
    "607": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "length_uint16%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0"
      ]
    },
    "610": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0",
        "elements_to_encode%8#0"
      ]
    },
    "612": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "encoded_value%5#0"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "614": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "617": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%13#0",
        "elements_to_encode%7#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "620": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "18"
      ]
    },
    "622": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "as_bytes%10#0"
      ]
    },
    "623": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "offset_as_uint16%4#0"
      ]
    },
    "626": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "627": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ]
    },
    "628": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "629": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "4"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "as_bytes%11#0"
      ]
    },
    "632": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0"
      ]
    },
    "635": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0",
        "0x"
      ]
    },
    "636": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "0x",
        "offset_as_uint16%5#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "638": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%11#0 (copy)",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "encoded_tuple_buffer%11#0 (copy)"
      ]
    },
    "640": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "data_length%5#0"
      ]
    },
    "641": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "data_length%5#0",
        "4"
      ]
    },
    "643": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%9#0"
      ]
    },
    "644": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "as_bytes%12#0"
      ]
    },
    "645": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%6#0"
      ]
    },
    "648": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "649": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "652": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "653": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0"
      ]
    },
    "654": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x151f7c75"
      ]
    },
    "655": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "657": {
      "op": "log",
      "stack_out": []
    },
    "658": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "662": {
      "block": "main_echo_native_tuple_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "664": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "NoOp"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "666": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "667": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "669": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0",
        "0"
      ]
    },
    "670": {
      "op": "!=",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "671": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "672": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "675": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "678": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "681": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%89#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0"
      ]
    },
    "684": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%89#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "687": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "688": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[64]%2#0",
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0",
        "reinterpret_bytes[64]%2#0"
      ]
    },
    "691": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%91#0",
        "tmp%92#0",
        "reinterpret_bytes[64]%2#0",
        "tmp%89#0"
      ]
    },
    "693": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%92#0",
        "reinterpret_bytes[64]%2#0",
        "tmp%89#0",
        "tmp%91#0"
      ]
    },
    "695": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_bytes[64]%2#0",
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0"
      ]
    },
    "697": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0",
        "tmp%92#0",
        "reinterpret_bytes[64]%2#0"
      ]
    },
    "699": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "op": "callsub echo_native_tuple",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "702": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "704": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "706": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "707": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "708": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length%2#0"
      ]
    },
    "709": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "as_bytes%2#0"
      ]
    },
    "710": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length_uint16%2#0"
      ]
    },
    "713": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%2#0",
        "elements_to_encode%0#0"
      ]
    },
    "714": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "encoded_value%2#0"
      ]
    },
    "715": {
      "op": "cover 3",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "717": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "718": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length%3#0"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "as_bytes%3#0"
      ]
    },
    "720": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%3#0"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "length_uint16%3#0",
        "elements_to_encode%1#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "encoded_value%3#0"
      ]
    },
    "725": {
      "op": "cover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "727": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "728": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "730": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "731": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "value_len%1#0"
      ]
    },
    "732": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "value_len%1#0",
        "64"
      ]
    },
    "734": {
      "op": "<=",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "len_ok%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "len_ok%1#0"
      ]
    },
    "735": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "736": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "64"
      ]
    },
    "738": {
      "op": "bzero",
      "defined_out": [
        "bzero%1#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "bzero%1#0"
      ]
    },
    "739": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0"
      ]
    },
    "740": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "arc4_encoded%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "76"
      ]
    },
    "742": {
      "op": "itob",
      "defined_out": [
        "arc4_encoded%1#0",
        "as_bytes%4#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "as_bytes%4#0"
      ]
    },
    "743": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "746": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "arc4_encoded%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "747": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "748": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "749": {
      "op": "dig 2",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "751": {
      "op": "len",
      "defined_out": [
        "arc4_encoded%1#0",
        "data_length%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0"
      ]
    },
    "752": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0",
        "76"
      ]
    },
    "754": {
      "op": "+",
      "defined_out": [
        "arc4_encoded%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "755": {
      "op": "itob",
      "defined_out": [
        "arc4_encoded%1#0",
        "as_bytes%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%5#0"
      ]
    },
    "756": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "759": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "760": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "762": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "arc4_encoded%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "763": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "arc4_encoded%1#0"
      ]
    },
    "764": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "765": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "767": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "769": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "770": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "771": {
      "op": "concat",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "772": {
      "op": "log",
      "stack_out": []
    },
    "773": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "774": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "777": {
      "block": "main_echo_native_biguint_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "779": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "NoOp"
      ]
    },
    "780": {
      "op": "==",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "781": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "782": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "784": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0"
      ]
    },
    "785": {
      "op": "!=",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "786": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "787": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[64]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[64]%1#0"
      ]
    },
    "790": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "op": "callsub echo_native_biguint",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "793": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "794": {
      "op": "len",
      "defined_out": [
        "to_encode%4#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "value_len%0#0"
      ]
    },
    "795": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "to_encode%4#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "value_len%0#0",
        "64"
      ]
    },
    "797": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "len_ok%0#0"
      ]
    },
    "798": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "799": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "to_encode%4#0",
        "64"
      ]
    },
    "801": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "bzero%0#0"
      ]
    },
    "802": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "803": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "804": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "arc4_encoded%0#0"
      ]
    },
    "805": {
      "op": "concat",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "806": {
      "op": "log",
      "stack_out": []
    },
    "807": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "808": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "811": {
      "block": "main_echo_native_uint64_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "813": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "NoOp"
      ]
    },
    "814": {
      "op": "==",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "815": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "816": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0"
      ]
    },
    "819": {
      "op": "!=",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "820": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "821": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "824": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "825": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "op": "callsub echo_native_uint64",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "828": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "829": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "830": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "831": {
      "op": "concat",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "832": {
      "op": "log",
      "stack_out": []
    },
    "833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "834": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "837": {
      "block": "main_echo_native_bytes_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "839": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "NoOp"
      ]
    },
    "840": {
      "op": "==",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0"
      ]
    },
    "845": {
      "op": "!=",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "846": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "847": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "850": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "853": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "op": "callsub echo_native_bytes",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "856": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "857": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "858": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "859": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "862": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "863": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "864": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "865": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "866": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "867": {
      "op": "log",
      "stack_out": []
    },
    "868": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "869": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "872": {
      "block": "main_echo_native_string_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "874": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "NoOp"
      ]
    },
    "875": {
      "op": "==",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "876": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "877": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "879": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0"
      ]
    },
    "880": {
      "op": "!=",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "881": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "882": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "885": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "888": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "op": "callsub echo_native_string",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "891": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "892": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "893": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "894": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "897": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "898": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "899": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "900": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "901": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "902": {
      "op": "log",
      "stack_out": []
    },
    "903": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "904": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "907": {
      "block": "main_log_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "909": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "NoOp"
      ]
    },
    "910": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "911": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "912": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "914": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0"
      ]
    },
    "915": {
      "op": "!=",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "916": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "917": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "920": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_address",
      "op": "callsub log_address",
      "stack_out": []
    },
    "923": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "924": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "927": {
      "block": "main_log_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "929": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "NoOp"
      ]
    },
    "930": {
      "op": "==",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "931": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "932": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "934": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0"
      ]
    },
    "935": {
      "op": "!=",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "936": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "937": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "940": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "941": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "943": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "946": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "947": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0"
      ]
    },
    "949": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%50#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "952": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "953": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "955": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%52#0",
        "tmp%54#0",
        "tmp%50#0"
      ]
    },
    "957": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%54#0",
        "tmp%50#0",
        "tmp%52#0"
      ]
    },
    "959": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "961": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "op": "callsub log_asset_account_app",
      "stack_out": []
    },
    "964": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "965": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "968": {
      "block": "main_log_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "970": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "NoOp"
      ]
    },
    "971": {
      "op": "==",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "972": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "973": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "975": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0"
      ]
    },
    "976": {
      "op": "!=",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "977": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "978": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "981": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "op": "callsub log_bytes",
      "stack_out": []
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "988": {
      "block": "main_log_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "990": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "NoOp"
      ]
    },
    "991": {
      "op": "==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "992": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "993": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "995": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0"
      ]
    },
    "996": {
      "op": "!=",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "997": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "998": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "1001": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "op": "callsub log_bool",
      "stack_out": []
    },
    "1004": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1005": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1008": {
      "block": "main_log_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1010": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "NoOp"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1012": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1013": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "1016": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1017": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1018": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1021": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string",
      "op": "callsub log_string",
      "stack_out": []
    },
    "1024": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1025": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1028": {
      "block": "main_log_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1030": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "NoOp"
      ]
    },
    "1031": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1032": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1033": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1035": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "1036": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1037": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1038": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[64]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "1041": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "op": "callsub log_uint512",
      "stack_out": []
    },
    "1044": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1045": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1048": {
      "block": "main_log_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1050": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "1051": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1052": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1053": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1055": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "1056": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1057": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1058": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1061": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "op": "callsub log_uint64",
      "stack_out": []
    },
    "1064": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1065": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1068": {
      "block": "main_no_args_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1070": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "NoOp"
      ]
    },
    "1071": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1072": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1073": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1075": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1076": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1077": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1078": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.no_args",
      "op": "callsub no_args",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1081": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1082": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1083": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1084": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1085": {
      "op": "log",
      "stack_out": []
    },
    "1086": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1087": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1090": {
      "block": "main_echo_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1092": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "1093": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1094": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1095": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1097": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "1098": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1099": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1100": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1103": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "1108": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1109": {
      "op": "log",
      "stack_out": []
    },
    "1110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1111": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1114": {
      "block": "main_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1116": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1117": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1118": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1121": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1122": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1123": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1124": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1127": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1130": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1133": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1136": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "op": "callsub is_a_b",
      "stack_out": []
    },
    "1139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1140": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1143": {
      "block": "main_bare_routing@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "1145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0",
        "0"
      ]
    },
    "1146": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%126#0"
      ]
    },
    "1147": {
      "op": "match main___algopy_default_create@25",
      "stack_out": []
    },
    "1151": {
      "block": "main_switch_case_next@27",
      "stack_in": [],
      "op": "b main_after_if_else@28"
    },
    "1154": {
      "block": "main___algopy_default_create@25",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "1156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0",
        "0"
      ]
    },
    "1157": {
      "op": "==",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "1158": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1159": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@31",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1160": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@29"
    },
    "1163": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "is_a_b",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1166": {
      "block": "is_a_b_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1168": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "1171": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1172": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "1173": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "1175": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "1178": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1179": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "1180": {
      "retsub": true,
      "op": "retsub"
    },
    "1181": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1184": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "bytec_3 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20"
      ],
      "stack_out": [
        "0x00066563686f3a20"
      ]
    },
    "1185": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "1188": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "value#0 (copy)"
      ]
    },
    "1190": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1193": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1195": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1196": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1197": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1200": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1201": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "1202": {
      "retsub": true,
      "op": "retsub"
    },
    "1203": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.no_args",
      "params": {},
      "block": "no_args_block@0",
      "stack_in": [],
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "1205": {
      "retsub": true,
      "op": "retsub"
    },
    "1206": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1209": {
      "block": "log_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1211": {
      "op": "log",
      "stack_out": []
    },
    "1212": {
      "retsub": true,
      "op": "retsub"
    },
    "1213": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1216": {
      "block": "log_uint512_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1218": {
      "op": "log",
      "stack_out": []
    },
    "1219": {
      "retsub": true,
      "op": "retsub"
    },
    "1220": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1223": {
      "block": "log_string_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1225": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1228": {
      "op": "log",
      "stack_out": []
    },
    "1229": {
      "retsub": true,
      "op": "retsub"
    },
    "1230": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1233": {
      "block": "log_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1235": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0"
      ]
    },
    "1236": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "pushbytes 0x46616c7365",
      "defined_out": [
        "0x46616c7365",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365"
      ]
    },
    "1244": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "1250": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "1252": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "1253": {
      "op": "log",
      "stack_out": []
    },
    "1254": {
      "retsub": true,
      "op": "retsub"
    },
    "1255": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1258": {
      "block": "log_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1260": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1263": {
      "op": "log",
      "stack_out": []
    },
    "1264": {
      "retsub": true,
      "op": "retsub"
    },
    "1265": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "params": {
        "asset#0": "uint64",
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1268": {
      "block": "log_asset_account_app_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1270": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1272": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1273": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "\"\""
      ]
    },
    "1274": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1275": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account#0 (copy)"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1278": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "tmp%1#0",
        "\"\""
      ]
    },
    "1279": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1280": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "1282": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1284": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "1285": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1286": {
      "op": "log",
      "stack_out": []
    },
    "1287": {
      "retsub": true,
      "op": "retsub"
    },
    "1288": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address",
      "params": {
        "address#0": "bytes"
      },
      "block": "log_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1291": {
      "block": "log_address_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "1293": {
      "op": "log",
      "stack_out": []
    },
    "1294": {
      "retsub": true,
      "op": "retsub"
    },
    "1295": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1298": {
      "block": "echo_native_string_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1299": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ]
    },
    "1301": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1302": {
      "retsub": true,
      "op": "retsub"
    },
    "1303": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1306": {
      "block": "echo_native_bytes_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20"
      ],
      "stack_out": [
        "0x6563686f3a20"
      ]
    },
    "1307": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ],
      "stack_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ]
    },
    "1309": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1310": {
      "retsub": true,
      "op": "retsub"
    },
    "1311": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "params": {
        "value#0": "uint64"
      },
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1314": {
      "block": "echo_native_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1316": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1317": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1318": {
      "retsub": true,
      "op": "retsub"
    },
    "1319": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1322": {
      "block": "echo_native_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1324": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0x01"
      ]
    },
    "1327": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1328": {
      "retsub": true,
      "op": "retsub"
    },
    "1329": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "params": {
        "s#0": "bytes",
        "b#0": "bytes",
        "u#0": "uint64",
        "bu#0": "bytes"
      },
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "1332": {
      "block": "echo_native_tuple_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1333": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ]
    },
    "1335": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1336": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "1337": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x6563686f3a20",
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0 (copy)"
      ]
    },
    "1339": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1340": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ]
    },
    "1342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)",
        "1"
      ]
    },
    "1343": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1344": {
      "op": "frame_dig -1",
      "defined_out": [
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)"
      ]
    },
    "1346": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)",
        "0x01"
      ]
    },
    "1349": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1350": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1352": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1354": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1356": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1358": {
      "retsub": true,
      "op": "retsub"
    },
    "1359": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "params": {
        "tuple_of_tuples.0.0#0": "bytes",
        "tuple_of_tuples.0.1#0": "bytes",
        "tuple_of_tuples.1.0#0": "uint64",
        "tuple_of_tuples.1.1#0": "bytes",
        "tuple_of_tuples.1.2#0": "bytes"
      },
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1362": {
      "block": "echo_nested_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "string#0"
      ],
      "stack_out": [
        "string#0"
      ]
    },
    "1364": {
      "op": "frame_dig -4",
      "defined_out": [
        "arc4_string#0",
        "string#0"
      ],
      "stack_out": [
        "string#0",
        "arc4_string#0"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "arc4_string#0",
        "string#0"
      ]
    },
    "1367": {
      "op": "frame_dig -3",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ]
    },
    "1369": {
      "op": "cover 2",
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1371": {
      "op": "frame_dig -2",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0",
        "arc4_u64#0"
      ]
    },
    "1373": {
      "op": "cover 3",
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1375": {
      "op": "frame_dig -1",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "bytez#0"
      ]
    },
    "1377": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1379": {
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "\"echo: \""
      ]
    },
    "1380": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \"",
        "string#0"
      ]
    },
    "1381": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%0#0"
      ]
    },
    "1382": {
      "op": "cover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0"
      ]
    },
    "1384": {
      "op": "bytec_3 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "0x00066563686f3a20"
      ]
    },
    "1385": {
      "op": "extract 2 0",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "expr_value_trimmed%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1388": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "expr_value_trimmed%0#0",
        "arc4_string#0"
      ]
    },
    "1389": {
      "op": "extract 2 0",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1392": {
      "op": "concat",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0"
      ]
    },
    "1393": {
      "op": "dup",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1394": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "len_%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1395": {
      "op": "itob",
      "defined_out": [
        "arc4_u64#0",
        "as_bytes%0#0",
        "bytez#0",
        "concatenated%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1396": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1399": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1400": {
      "op": "concat",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat_result%0#0"
      ]
    },
    "1401": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "u64#0"
      ]
    },
    "1402": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "u64#0",
        "1"
      ]
    },
    "1403": {
      "op": "+",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "tmp%1#0"
      ]
    },
    "1404": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "arc4_u64#0"
      ]
    },
    "1406": {
      "op": "btoi",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1407": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1408": {
      "op": "+",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1409": {
      "op": "itob",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1410": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20"
      ]
    },
    "1411": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20",
        "bytez#0"
      ]
    },
    "1413": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "1414": {
      "op": "uncover 4",
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1416": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "1418": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0"
      ]
    },
    "1420": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1422": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "1424": {
      "retsub": true,
      "op": "retsub"
    },
    "1425": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "params": {
        "_a1#0": "bytes",
        "_a2#0": "bytes",
        "_a3#0": "bytes",
        "_a4#0": "bytes",
        "_a5#0": "bytes",
        "_a6#0": "bytes",
        "_a7#0": "bytes",
        "_a8#0": "bytes",
        "_a9#0": "bytes",
        "_a10#0": "bytes",
        "_a11#0": "bytes",
        "_a12#0": "bytes",
        "_a13#0": "bytes",
        "_a14#0": "bytes",
        "a15#0": "bytes",
        "a16#0": "bytes",
        "a17#0": "bytes",
        "a18#0": "bytes",
        "a19#0": "bytes",
        "a20#0": "bytes"
      },
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "proto 20 1"
    },
    "1428": {
      "block": "return_args_after_14th_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1429": {
      "op": "frame_dig -6",
      "defined_out": [
        "0x",
        "a15#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a15#0 (copy)"
      ]
    },
    "1431": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1432": {
      "op": "frame_dig -5",
      "defined_out": [
        "a16#0 (copy)",
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "a16#0 (copy)"
      ]
    },
    "1434": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1435": {
      "op": "frame_dig -4",
      "defined_out": [
        "a17#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "a17#0 (copy)"
      ]
    },
    "1437": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1438": {
      "op": "frame_dig -3",
      "defined_out": [
        "a18#0 (copy)",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "a18#0 (copy)"
      ]
    },
    "1440": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1441": {
      "op": "frame_dig -2",
      "defined_out": [
        "a19#0 (copy)",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "a19#0 (copy)"
      ]
    },
    "1443": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1444": {
      "op": "frame_dig -1",
      "defined_out": [
        "a20#0 (copy)",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "a20#0 (copy)"
      ]
    },
    "1446": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1447": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0"
      ]
    },
    "1450": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0",
        "last_arg#0 (copy)"
      ]
    },
    "1452": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "1453": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1454": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1455": {
      "op": "len",
      "defined_out": [
        "last_arg#0",
        "length%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length%0#0"
      ]
    },
    "1456": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "as_bytes%0#0"
      ]
    },
    "1457": {
      "op": "extract 6 2",
      "defined_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ]
    },
    "1460": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1461": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1462": {
      "retsub": true,
      "op": "retsub"
    },
    "1463": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "params": {
        "log_1.level#0": "uint64",
        "log_1.message#0": "bytes",
        "log_2.level#0": "uint64",
        "log_2.message#0": "bytes"
      },
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1466": {
      "block": "logs_are_equal_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "log_1.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)"
      ]
    },
    "1468": {
      "op": "frame_dig -2",
      "defined_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ]
    },
    "1470": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1471": {
      "op": "frame_dig -3",
      "defined_out": [
        "log_1.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)"
      ]
    },
    "1473": {
      "op": "frame_dig -1",
      "defined_out": [
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)"
      ]
    },
    "1475": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1476": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1477": {
      "retsub": true,
      "op": "retsub"
    },
    "1478": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "params": {
        "log#0": "bytes"
      },
      "block": "echo_log_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1481": {
      "block": "echo_log_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0 (copy)"
      ]
    },
    "1483": {
      "retsub": true,
      "op": "retsub"
    }
  }
}