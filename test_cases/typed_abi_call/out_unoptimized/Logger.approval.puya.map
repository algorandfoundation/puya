{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmGK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnGL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAmGK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AA5BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvEL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAuEK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5DL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AA4DK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAsDK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlDL;;;AAkDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9CL;;;AAAA;AA8CK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtCL;;;AAAA;;;AAsCK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlCL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAkCK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9BL;;;AA8BK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1BL;;;AA0BK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBL;;;AAsBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBL;;;AAkBK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAdL;;;AAcK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AANL;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEe;;AAAK;;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;AAER;;;AAEe;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAP;AAER;;;AAEQ;;AAAA;;AAER;;;AAEQ;;AAAA;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAE8B;;;AAAA;AAAkB;;;;;;;AAApC;;;;;;AAAA;;AAAA;AAAJ;;AAER;;;AAEY;;AAAA;;;AAAJ;;AAER;;;AAEY;;AAAA;;AAAA;AAAJ;AAAgB;AAAA;;AAAA;AAAhB;AAA+B;AAAA;;AAAA;;AAAA;AAAA;AAA/B;;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;AAEe;;AAAQ;;;AAAR;AAAP;AAER;;;AAIe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;;;AAAL;AAA3C;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAIQ;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACQ;AAAA;AAAA;AAAA;;AAAmB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACvB;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AAHJ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAMR;;;AAwBmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 2"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x 0x6563686f3a20 0x00066563686f3a20"
    },
    "31": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "33": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "34": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@22",
      "stack_out": []
    },
    "38": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "47": {
      "op": "pushbytes 0x9bf81913 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)"
      ]
    },
    "53": {
      "op": "pushbytes 0xb862ee19 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)"
      ]
    },
    "59": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)"
      ]
    },
    "65": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)"
      ]
    },
    "71": {
      "op": "pushbytes 0xb4b4334e // method \"log(string)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)"
      ]
    },
    "77": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)"
      ]
    },
    "83": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)"
      ]
    },
    "89": {
      "op": "pushbytes 0xcd727b71 // method \"log(asset,account,application)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)"
      ]
    },
    "95": {
      "op": "pushbytes 0x4a444c77 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)"
      ]
    },
    "101": {
      "op": "pushbytes 0x2659e818 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "107": {
      "op": "pushbytes 0xa9fb6cf1 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "113": {
      "op": "pushbytes 0xd8cc363b // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "119": {
      "op": "pushbytes 0x16e03919 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "125": {
      "op": "pushbytes 0xab271ce4 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "131": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "137": {
      "op": "pushbytes 0xddd07185 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "143": {
      "op": "uncover 17",
      "stack_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(asset,account,application)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "tmp%2#0"
      ]
    },
    "145": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_echo_native_string_route@12 main_echo_native_bytes_route@13 main_echo_native_uint64_route@14 main_echo_native_biguint_route@15 main_echo_native_tuple_route@16 main_echo_nested_tuple_route@17 main_return_args_after_14th_route@18 main_logs_are_equal_route@19",
      "stack_out": []
    },
    "181": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "183": {
      "block": "main_logs_are_equal_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "185": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "NoOp"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "187": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "188": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0",
        "0"
      ]
    },
    "191": {
      "op": "!=",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "193": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "196": {
      "op": "dup",
      "defined_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ],
      "stack_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ]
    },
    "197": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)",
        "0"
      ]
    },
    "198": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ],
      "stack_out": [
        "tmp%143#0",
        "tmp%143#0 (copy)",
        "0",
        "8"
      ]
    },
    "199": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "item0%3#0"
      ]
    },
    "200": {
      "op": "btoi",
      "defined_out": [
        "item0%3%0#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "item0%3%0#0"
      ]
    },
    "201": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "tmp%143#0"
      ]
    },
    "202": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ]
    },
    "203": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%3%0#0",
        "tmp%143#0",
        "tmp%143#0 (copy)",
        "8"
      ]
    },
    "204": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item_start_offset%5#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "tmp%143#0",
        "item_start_offset%5#0"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%5#0",
        "tmp%143#0"
      ]
    },
    "206": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%5#0",
        "tmp%143#0",
        "tmp%143#0 (copy)"
      ]
    },
    "207": {
      "op": "len",
      "defined_out": [
        "item0%3%0#0",
        "item_end_offset%5#0",
        "item_start_offset%5#0",
        "tmp%143#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%5#0",
        "tmp%143#0",
        "item_end_offset%5#0"
      ]
    },
    "208": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0",
        "tmp%143#0"
      ]
    },
    "209": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item_end_offset%5#0",
        "tmp%143#0",
        "item_start_offset%5#0"
      ]
    },
    "211": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "tmp%143#0",
        "item_start_offset%5#0",
        "item_end_offset%5#0"
      ]
    },
    "213": {
      "op": "substring3",
      "defined_out": [
        "item0%3%0#0",
        "item1%3#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3#0"
      ]
    },
    "214": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0"
      ]
    },
    "217": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0"
      ]
    },
    "220": {
      "op": "dup",
      "defined_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ]
    },
    "221": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)",
        "0"
      ]
    },
    "222": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)",
        "0",
        "8"
      ]
    },
    "223": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%3%0#0",
        "item0%4#0",
        "item1%3%0#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "item0%4#0"
      ]
    },
    "224": {
      "op": "btoi",
      "defined_out": [
        "item0%3%0#0",
        "item0%4%0#0",
        "item1%3%0#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "tmp%144#0",
        "item0%4%0#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "tmp%144#0"
      ]
    },
    "226": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ]
    },
    "227": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "tmp%144#0",
        "tmp%144#0 (copy)",
        "8"
      ]
    },
    "228": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%3%0#0",
        "item0%4%0#0",
        "item1%3%0#0",
        "item_start_offset%6#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "tmp%144#0",
        "item_start_offset%6#0"
      ]
    },
    "229": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item_start_offset%6#0",
        "tmp%144#0"
      ]
    },
    "230": {
      "op": "dup",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item_start_offset%6#0",
        "tmp%144#0",
        "tmp%144#0 (copy)"
      ]
    },
    "231": {
      "op": "len",
      "defined_out": [
        "item0%3%0#0",
        "item0%4%0#0",
        "item1%3%0#0",
        "item_end_offset%6#0",
        "item_start_offset%6#0",
        "tmp%144#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item_start_offset%6#0",
        "tmp%144#0",
        "item_end_offset%6#0"
      ]
    },
    "232": {
      "op": "swap",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0",
        "tmp%144#0"
      ]
    },
    "233": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item_end_offset%6#0",
        "tmp%144#0",
        "item_start_offset%6#0"
      ]
    },
    "235": {
      "op": "uncover 2",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "tmp%144#0",
        "item_start_offset%6#0",
        "item_end_offset%6#0"
      ]
    },
    "237": {
      "op": "substring3",
      "defined_out": [
        "item0%3%0#0",
        "item0%4%0#0",
        "item1%3%0#0",
        "item1%4#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item1%4#0"
      ]
    },
    "238": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%3%0#0",
        "item0%4%0#0",
        "item1%3%0#0",
        "item1%4%0#0"
      ],
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item1%4%0#0"
      ]
    },
    "241": {
      "op": "uncover 3",
      "stack_out": [
        "item1%3%0#0",
        "item0%4%0#0",
        "item1%4%0#0",
        "item0%3%0#0"
      ]
    },
    "243": {
      "op": "uncover 3",
      "stack_out": [
        "item0%4%0#0",
        "item1%4%0#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ]
    },
    "245": {
      "op": "uncover 3",
      "stack_out": [
        "item1%4%0#0",
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0"
      ]
    },
    "247": {
      "op": "uncover 3",
      "stack_out": [
        "item0%3%0#0",
        "item1%3%0#0",
        "item0%4%0#0",
        "item1%4%0#0"
      ]
    },
    "249": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "op": "callsub logs_are_equal",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "252": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "255": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "256": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "258": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "259": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "260": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "261": {
      "op": "concat",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "262": {
      "op": "log",
      "stack_out": []
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "267": {
      "block": "main_return_args_after_14th_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "269": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0",
        "NoOp"
      ]
    },
    "270": {
      "op": "==",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "271": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "272": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "274": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0",
        "0"
      ]
    },
    "275": {
      "op": "!=",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "280": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0"
      ]
    },
    "283": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0"
      ]
    },
    "286": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0"
      ]
    },
    "289": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ]
    },
    "292": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "295": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "298": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ]
    },
    "304": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0"
      ]
    },
    "307": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "310": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0"
      ]
    },
    "313": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "316": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0"
      ]
    },
    "319": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "0"
      ]
    },
    "323": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%125#0",
        "0",
        "1"
      ]
    },
    "324": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0"
      ]
    },
    "325": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%127#0"
      ]
    },
    "328": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%127#0",
        "1"
      ]
    },
    "329": {
      "op": "dup",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%127#0",
        "1",
        "1"
      ]
    },
    "330": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0"
      ]
    },
    "331": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%129#0"
      ]
    },
    "334": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%129#0",
        "2"
      ]
    },
    "335": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%129#0",
        "2",
        "1"
      ]
    },
    "336": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0"
      ]
    },
    "337": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%131#0"
      ]
    },
    "340": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%131#0",
        "3"
      ]
    },
    "342": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%131#0",
        "3",
        "1"
      ]
    },
    "343": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0"
      ]
    },
    "344": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "347": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%133#0",
        "4"
      ]
    },
    "349": {
      "op": "dup",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%133#0",
        "4",
        "4"
      ]
    },
    "350": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0"
      ]
    },
    "351": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%135#0"
      ]
    },
    "354": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%135#0",
        "8"
      ]
    },
    "355": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%135#0",
        "8",
        "1"
      ]
    },
    "356": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0"
      ]
    },
    "357": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0"
      ]
    },
    "359": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0"
      ]
    },
    "361": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0"
      ]
    },
    "363": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0"
      ]
    },
    "365": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0"
      ]
    },
    "367": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0"
      ]
    },
    "369": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "371": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "373": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ]
    },
    "375": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0"
      ]
    },
    "377": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "379": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0"
      ]
    },
    "381": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "383": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0"
      ]
    },
    "385": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0"
      ]
    },
    "387": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0"
      ]
    },
    "389": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0"
      ]
    },
    "391": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%134#0",
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0"
      ]
    },
    "393": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%136#0",
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0"
      ]
    },
    "395": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%111#0",
        "tmp%112#0",
        "tmp%113#0",
        "tmp%114#0",
        "tmp%115#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0",
        "tmp%124#0",
        "tmp%126#0",
        "tmp%128#0",
        "tmp%130#0",
        "tmp%132#0",
        "tmp%134#0",
        "tmp%136#0"
      ]
    },
    "397": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "op": "callsub return_args_after_14th",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "400": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "0x151f7c75"
      ]
    },
    "401": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%137#0"
      ]
    },
    "402": {
      "op": "concat",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "403": {
      "op": "log",
      "stack_out": []
    },
    "404": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "405": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "408": {
      "block": "main_echo_nested_tuple_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "410": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0",
        "NoOp"
      ]
    },
    "411": {
      "op": "==",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "412": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "415": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "0"
      ]
    },
    "416": {
      "op": "!=",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "417": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "418": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "421": {
      "op": "dup",
      "defined_out": [
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ],
      "stack_out": [
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ]
    },
    "422": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%105#0",
        "tmp%105#0 (copy)",
        "0"
      ]
    },
    "423": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%0#0"
      ]
    },
    "424": {
      "op": "swap",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%105#0"
      ]
    },
    "425": {
      "op": "dup",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ]
    },
    "426": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)",
        "2"
      ]
    },
    "427": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%105#0",
        "item_end_offset%0#0"
      ]
    },
    "428": {
      "op": "dig 1",
      "stack_out": [
        "item_start_offset%0#0",
        "tmp%105#0",
        "item_end_offset%0#0",
        "tmp%105#0 (copy)"
      ]
    },
    "430": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%105#0",
        "item_end_offset%0#0",
        "tmp%105#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "432": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%105#0",
        "tmp%105#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "434": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item0%0#0"
      ]
    },
    "435": {
      "op": "dup",
      "defined_out": [
        "item0%0#0",
        "item0%0#0 (copy)",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "0"
      ]
    },
    "437": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_start_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item_start_offset%1#0"
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%1#0",
        "item0%0#0"
      ]
    },
    "439": {
      "op": "dup",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "440": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "441": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "442": {
      "op": "dig 1",
      "stack_out": [
        "tmp%105#0",
        "item_start_offset%1#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)"
      ]
    },
    "444": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item_end_offset%1#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0"
      ]
    },
    "446": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "448": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item0%1#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item0%1#0"
      ]
    },
    "449": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0",
        "item0%0#0",
        "item0%1%0#0"
      ]
    },
    "452": {
      "op": "cover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item0%0#0"
      ]
    },
    "454": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "455": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item0%0#0",
        "item0%0#0 (copy)",
        "2"
      ]
    },
    "456": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "item_start_offset%2#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "457": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item_start_offset%2#0",
        "item0%0#0"
      ]
    },
    "458": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item0%0#0 (copy)"
      ]
    },
    "459": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item0%1%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item_start_offset%2#0",
        "item0%0#0",
        "item_end_offset%2#0"
      ]
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "item0%0#0"
      ]
    },
    "461": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item_end_offset%2#0",
        "item0%0#0",
        "item_start_offset%2#0"
      ]
    },
    "463": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item0%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "465": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "tmp%105#0",
        "item1%0#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0"
      ]
    },
    "467": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ]
    },
    "468": {
      "op": "intc_3 // 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0",
        "tmp%105#0 (copy)",
        "2"
      ]
    },
    "469": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0",
        "item_start_offset%3#0"
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%105#0"
      ]
    },
    "471": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%105#0",
        "tmp%105#0 (copy)"
      ]
    },
    "472": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "tmp%105#0",
        "item_end_offset%3#0"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "tmp%105#0"
      ]
    },
    "474": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item_end_offset%3#0",
        "tmp%105#0",
        "item_start_offset%3#0"
      ]
    },
    "476": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "tmp%105#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "478": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0"
      ]
    },
    "479": {
      "op": "dup",
      "defined_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "480": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0"
      ]
    },
    "481": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "482": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item0%2#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item0%2#0"
      ]
    },
    "483": {
      "op": "btoi",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item1%1#0",
        "item0%2%0#0"
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0"
      ]
    },
    "485": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "486": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8"
      ]
    },
    "487": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "8",
        "8"
      ]
    },
    "488": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%1#0",
        "item1%2#0"
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0"
      ]
    },
    "490": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "491": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item1%1#0 (copy)",
        "16"
      ]
    },
    "493": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "494": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0"
      ]
    },
    "495": {
      "op": "dup",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item1%1#0 (copy)"
      ]
    },
    "496": {
      "op": "len",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%1#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item_start_offset%4#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item1%1#0",
        "item_end_offset%4#0"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0",
        "item1%1#0"
      ]
    },
    "498": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item_end_offset%4#0",
        "item1%1#0",
        "item_start_offset%4#0"
      ]
    },
    "500": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item1%1#0",
        "item_start_offset%4#0",
        "item_end_offset%4#0"
      ]
    },
    "502": {
      "op": "substring3",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0#0"
      ]
    },
    "503": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1%0#0",
        "item0%2%0#0",
        "item1%0#0",
        "item1%2#0",
        "item2%0%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0"
      ]
    },
    "506": {
      "op": "uncover 4",
      "stack_out": [
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0",
        "item0%1%0#0"
      ]
    },
    "508": {
      "op": "uncover 4",
      "stack_out": [
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0",
        "item0%1%0#0",
        "item1%0#0"
      ]
    },
    "510": {
      "op": "uncover 4",
      "stack_out": [
        "item1%2#0",
        "item2%0%0#0",
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0"
      ]
    },
    "512": {
      "op": "uncover 4",
      "stack_out": [
        "item2%0%0#0",
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0"
      ]
    },
    "514": {
      "op": "uncover 4",
      "stack_out": [
        "item0%1%0#0",
        "item1%0#0",
        "item0%2%0#0",
        "item1%2#0",
        "item2%0%0#0"
      ]
    },
    "516": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "op": "callsub echo_nested_tuple",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "519": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "521": {
      "op": "cover 4",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "523": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "527": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length%4#0"
      ]
    },
    "528": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "as_bytes%6#0"
      ]
    },
    "529": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "length_uint16%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "length_uint16%4#0"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "length_uint16%4#0",
        "elements_to_encode%4#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0"
      ]
    },
    "534": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "4"
      ]
    },
    "536": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "as_bytes%7#0"
      ]
    },
    "537": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ]
    },
    "540": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0",
        "0x"
      ]
    },
    "541": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "0x",
        "offset_as_uint16%2#0"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "543": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ]
    },
    "544": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "encoded_value%4#0 (copy)"
      ]
    },
    "545": {
      "op": "len",
      "defined_out": [
        "data_length%2#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "data_length%2#0"
      ]
    },
    "546": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "data_length%2#0",
        "4"
      ]
    },
    "548": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "current_tail_offset%4#0"
      ]
    },
    "549": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "as_bytes%8#0"
      ]
    },
    "550": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "553": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%8#0",
        "offset_as_uint16%3#0"
      ]
    },
    "556": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "557": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%4#0"
      ]
    },
    "558": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "559": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "encoded_tuple_buffer%10#0",
        "elements_to_encode%5#0"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "561": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "elements_to_encode%6#0"
      ]
    },
    "562": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ]
    },
    "563": {
      "op": "dig 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%8#0 (copy)",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "elements_to_encode%8#0 (copy)"
      ]
    },
    "565": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "length%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length%5#0"
      ]
    },
    "566": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "as_bytes%9#0"
      ]
    },
    "567": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "length_uint16%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0"
      ]
    },
    "570": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "length_uint16%5#0",
        "elements_to_encode%8#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%3#0",
        "encoded_value%5#0"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "574": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "val_as_bytes%3#0",
        "0x"
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "0x",
        "val_as_bytes%3#0"
      ]
    },
    "576": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "577": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%13#0",
        "elements_to_encode%7#0"
      ]
    },
    "579": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "580": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "18"
      ]
    },
    "582": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "as_bytes%10#0"
      ]
    },
    "583": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%14#0",
        "encoded_value%5#0",
        "offset_as_uint16%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%14#0",
        "offset_as_uint16%4#0"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%5#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%5#0"
      ]
    },
    "588": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "589": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "4"
      ]
    },
    "591": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "as_bytes%11#0"
      ]
    },
    "592": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0"
      ]
    },
    "595": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "offset_as_uint16%5#0",
        "0x"
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "0x",
        "offset_as_uint16%5#0"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "598": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%11#0 (copy)",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "encoded_tuple_buffer%11#0 (copy)"
      ]
    },
    "600": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "data_length%5#0"
      ]
    },
    "601": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "data_length%5#0",
        "4"
      ]
    },
    "603": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "current_tail_offset%9#0"
      ]
    },
    "604": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "as_bytes%12#0"
      ]
    },
    "605": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%18#0",
        "offset_as_uint16%6#0"
      ]
    },
    "608": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "609": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%19#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "613": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0"
      ]
    },
    "614": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x151f7c75"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "617": {
      "op": "log",
      "stack_out": []
    },
    "618": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "619": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "622": {
      "block": "main_echo_native_tuple_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "624": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "NoOp"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "626": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "627": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "0"
      ]
    },
    "630": {
      "op": "!=",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "631": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "632": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "635": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "638": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "641": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%94#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0"
      ]
    },
    "644": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0"
      ]
    },
    "648": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0",
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "651": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%96#0",
        "tmp%98#0",
        "tmp%99#0",
        "tmp%94#0"
      ]
    },
    "653": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%98#0",
        "tmp%99#0",
        "tmp%94#0",
        "tmp%96#0"
      ]
    },
    "655": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%99#0",
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0"
      ]
    },
    "657": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%94#0",
        "tmp%96#0",
        "tmp%98#0",
        "tmp%99#0"
      ]
    },
    "659": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "op": "callsub echo_native_tuple",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "662": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "664": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "666": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "667": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "668": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length%2#0"
      ]
    },
    "669": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "as_bytes%2#0"
      ]
    },
    "670": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0",
        "length_uint16%2#0"
      ]
    },
    "673": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%2#0",
        "elements_to_encode%0#0"
      ]
    },
    "674": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "encoded_value%2#0"
      ]
    },
    "675": {
      "op": "cover 3",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "677": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "678": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "length%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length%3#0"
      ]
    },
    "679": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "as_bytes%3#0"
      ]
    },
    "680": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "length_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "length_uint16%3#0"
      ]
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "length_uint16%3#0",
        "elements_to_encode%1#0"
      ]
    },
    "684": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "encoded_value%3#0"
      ]
    },
    "685": {
      "op": "cover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0"
      ]
    },
    "687": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "688": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "690": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "691": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "len_%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "len_%1#0"
      ]
    },
    "692": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "len_%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "len_%1#0",
        "64"
      ]
    },
    "694": {
      "op": "<=",
      "defined_out": [
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "no_overflow%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "no_overflow%1#0"
      ]
    },
    "695": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "696": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "64"
      ]
    },
    "698": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%1#0",
        "elements_to_encode%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0",
        "b_zeros%1#0"
      ]
    },
    "699": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0"
      ]
    },
    "700": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "76"
      ]
    },
    "702": {
      "op": "itob",
      "defined_out": [
        "arc4_item%0#0",
        "as_bytes%4#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "as_bytes%4#0"
      ]
    },
    "703": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "offset_as_uint16%0#0"
      ]
    },
    "706": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "arc4_item%0#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "offset_as_uint16%0#0",
        "0x"
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "0x",
        "offset_as_uint16%0#0"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "709": {
      "op": "dig 2",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "711": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "data_length%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0"
      ]
    },
    "712": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "data_length%0#0",
        "76"
      ]
    },
    "714": {
      "op": "+",
      "defined_out": [
        "arc4_item%0#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "715": {
      "op": "itob",
      "defined_out": [
        "arc4_item%0#0",
        "as_bytes%5#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%5#0"
      ]
    },
    "716": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "720": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "arc4_item%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "arc4_item%0#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "725": {
      "op": "swap",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%2#0"
      ]
    },
    "726": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "727": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0"
      ]
    },
    "728": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "729": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "731": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "732": {
      "op": "log",
      "stack_out": []
    },
    "733": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "734": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "737": {
      "block": "main_echo_native_biguint_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "739": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "NoOp"
      ]
    },
    "740": {
      "op": "==",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "741": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "742": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "744": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0",
        "0"
      ]
    },
    "745": {
      "op": "!=",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "746": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "747": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "750": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "op": "callsub echo_native_biguint",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "753": {
      "op": "dup",
      "defined_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "754": {
      "op": "len",
      "defined_out": [
        "len_%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "len_%0#0"
      ]
    },
    "755": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len_%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "len_%0#0",
        "64"
      ]
    },
    "757": {
      "op": "<=",
      "defined_out": [
        "no_overflow%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "no_overflow%0#0"
      ]
    },
    "758": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "759": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "to_encode%4#0",
        "64"
      ]
    },
    "761": {
      "op": "bzero",
      "defined_out": [
        "b_zeros%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "b_zeros%0#0"
      ]
    },
    "762": {
      "op": "b|",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "763": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0x151f7c75"
      ]
    },
    "764": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%87#0"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "766": {
      "op": "log",
      "stack_out": []
    },
    "767": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "768": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "771": {
      "block": "main_echo_native_uint64_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "773": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "NoOp"
      ]
    },
    "774": {
      "op": "==",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "775": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "776": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "778": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "0"
      ]
    },
    "779": {
      "op": "!=",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "780": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "781": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "784": {
      "op": "btoi",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "785": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "op": "callsub echo_native_uint64",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "788": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "789": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "790": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "791": {
      "op": "concat",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "792": {
      "op": "log",
      "stack_out": []
    },
    "793": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "794": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "797": {
      "block": "main_echo_native_bytes_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "799": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "NoOp"
      ]
    },
    "800": {
      "op": "==",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "804": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "0"
      ]
    },
    "805": {
      "op": "!=",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "806": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "807": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "810": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "813": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "op": "callsub echo_native_bytes",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "816": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "817": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%1#0"
      ]
    },
    "818": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%1#0"
      ]
    },
    "819": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%1#0"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%2#0"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "824": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "826": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "827": {
      "op": "log",
      "stack_out": []
    },
    "828": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "829": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "832": {
      "block": "main_echo_native_string_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "834": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "NoOp"
      ]
    },
    "835": {
      "op": "==",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "836": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "837": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "839": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0"
      ]
    },
    "840": {
      "op": "!=",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "841": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "842": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "845": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "848": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "op": "callsub echo_native_string",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "851": {
      "op": "dup",
      "defined_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ],
      "stack_out": [
        "to_encode%1#0",
        "to_encode%1#0 (copy)"
      ]
    },
    "852": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length%0#0"
      ]
    },
    "853": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "854": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%1#0"
      ]
    },
    "858": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "859": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "861": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "862": {
      "op": "log",
      "stack_out": []
    },
    "863": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "864": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "867": {
      "block": "main_log_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "869": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "NoOp"
      ]
    },
    "870": {
      "op": "==",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "871": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "872": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "874": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0"
      ]
    },
    "875": {
      "op": "!=",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "876": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "877": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "880": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "881": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "883": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%54#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%55#0"
      ]
    },
    "886": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%56#0"
      ]
    },
    "887": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%54#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%57#0"
      ]
    },
    "889": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "892": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "893": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%60#0"
      ]
    },
    "895": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%57#0",
        "tmp%60#0",
        "tmp%54#0"
      ]
    },
    "897": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%60#0",
        "tmp%54#0",
        "tmp%57#0"
      ]
    },
    "899": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%54#0",
        "tmp%57#0",
        "tmp%60#0"
      ]
    },
    "901": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "op": "callsub log_asset_account_app",
      "stack_out": []
    },
    "904": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "905": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "908": {
      "block": "main_log_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "910": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "NoOp"
      ]
    },
    "911": {
      "op": "==",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "912": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "913": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "915": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0"
      ]
    },
    "916": {
      "op": "!=",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "917": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "918": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "921": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "op": "callsub log_bytes",
      "stack_out": []
    },
    "924": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "925": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "928": {
      "block": "main_log_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "930": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "NoOp"
      ]
    },
    "931": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "932": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "933": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "935": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "936": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "937": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "938": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "941": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "op": "callsub log_bool",
      "stack_out": []
    },
    "944": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "945": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "948": {
      "block": "main_log_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "950": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "NoOp"
      ]
    },
    "951": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "952": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "953": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "955": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "956": {
      "op": "!=",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "957": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "958": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "961": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string",
      "op": "callsub log_string",
      "stack_out": []
    },
    "964": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "965": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "968": {
      "block": "main_log_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "970": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "NoOp"
      ]
    },
    "971": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "972": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "973": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "975": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "976": {
      "op": "!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "977": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "978": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "981": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "op": "callsub log_uint512",
      "stack_out": []
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "988": {
      "block": "main_log_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "990": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "991": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "992": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "993": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "995": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "996": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "997": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "998": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1001": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "op": "callsub log_uint64",
      "stack_out": []
    },
    "1004": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1005": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "1008": {
      "block": "main_no_args_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1010": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "NoOp"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1012": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1013": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1016": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1017": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1018": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.no_args",
      "op": "callsub no_args",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1021": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1022": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1023": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1024": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1025": {
      "op": "log",
      "stack_out": []
    },
    "1026": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1027": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "1030": {
      "block": "main_echo_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1032": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "1033": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1034": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1035": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1037": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "1038": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1039": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1040": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1043": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1046": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "1048": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1049": {
      "op": "log",
      "stack_out": []
    },
    "1050": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1051": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "1054": {
      "block": "main_is_a_b_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1056": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1057": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1058": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1059": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1061": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1062": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1063": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1064": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1067": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1070": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1073": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1076": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "op": "callsub is_a_b",
      "stack_out": []
    },
    "1079": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1080": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "1083": {
      "block": "main_bare_routing@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "1085": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "0"
      ]
    },
    "1086": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%146#0"
      ]
    },
    "1087": {
      "op": "match main___algopy_default_create@23",
      "stack_out": []
    },
    "1091": {
      "block": "main_switch_case_next@25",
      "stack_in": [],
      "op": "b main_after_if_else@26"
    },
    "1094": {
      "block": "main___algopy_default_create@23",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "1096": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0"
      ]
    },
    "1097": {
      "op": "==",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "1098": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1099": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@29",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1100": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@27"
    },
    "1103": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "is_a_b",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1106": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1108": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "1111": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1112": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "1113": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "1115": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "1118": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1119": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "1120": {
      "retsub": true,
      "op": "retsub"
    },
    "1121": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1124": {
      "op": "bytec_3 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20"
      ],
      "stack_out": [
        "0x00066563686f3a20"
      ]
    },
    "1125": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0"
      ]
    },
    "1128": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "value#0 (copy)"
      ]
    },
    "1130": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1133": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0"
      ]
    },
    "1134": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ],
      "stack_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1135": {
      "op": "len",
      "defined_out": [
        "concatenated%0#0",
        "len_%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1136": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concatenated%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1137": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1140": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1141": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "1142": {
      "retsub": true,
      "op": "retsub"
    },
    "1143": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.no_args",
      "params": {},
      "block": "no_args",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1146": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "1148": {
      "retsub": true,
      "op": "retsub"
    },
    "1149": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1152": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1154": {
      "op": "log",
      "stack_out": []
    },
    "1155": {
      "retsub": true,
      "op": "retsub"
    },
    "1156": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1159": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1161": {
      "op": "log",
      "stack_out": []
    },
    "1162": {
      "retsub": true,
      "op": "retsub"
    },
    "1163": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1166": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1168": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1171": {
      "op": "log",
      "stack_out": []
    },
    "1172": {
      "retsub": true,
      "op": "retsub"
    },
    "1173": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1176": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1178": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0"
      ]
    },
    "1179": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1180": {
      "op": "pushbytes 0x46616c7365",
      "defined_out": [
        "0x46616c7365",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365"
      ]
    },
    "1187": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "1193": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "1195": {
      "op": "select",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1196": {
      "op": "log",
      "stack_out": []
    },
    "1197": {
      "retsub": true,
      "op": "retsub"
    },
    "1198": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1201": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1203": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1206": {
      "op": "log",
      "stack_out": []
    },
    "1207": {
      "retsub": true,
      "op": "retsub"
    },
    "1208": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "params": {
        "asset#0": "uint64",
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1211": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1213": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1215": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1216": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "\"\""
      ]
    },
    "1217": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1218": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account#0 (copy)"
      ]
    },
    "1220": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1221": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "tmp%1#0",
        "\"\""
      ]
    },
    "1222": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1223": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "1225": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1227": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "1228": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1229": {
      "op": "log",
      "stack_out": []
    },
    "1230": {
      "retsub": true,
      "op": "retsub"
    },
    "1231": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1234": {
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1235": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ]
    },
    "1237": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1238": {
      "retsub": true,
      "op": "retsub"
    },
    "1239": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1242": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20"
      ],
      "stack_out": [
        "0x6563686f3a20"
      ]
    },
    "1243": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ],
      "stack_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ]
    },
    "1245": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1246": {
      "retsub": true,
      "op": "retsub"
    },
    "1247": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "params": {
        "value#0": "uint64"
      },
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1250": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1253": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1254": {
      "retsub": true,
      "op": "retsub"
    },
    "1255": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1258": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1260": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0x01"
      ]
    },
    "1263": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1264": {
      "retsub": true,
      "op": "retsub"
    },
    "1265": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "params": {
        "s#0": "bytes",
        "b#0": "bytes",
        "u#0": "uint64",
        "bu#0": "bytes"
      },
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "1268": {
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1269": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ]
    },
    "1271": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1272": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "1273": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x6563686f3a20",
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0 (copy)"
      ]
    },
    "1275": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1276": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ]
    },
    "1278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)",
        "1"
      ]
    },
    "1279": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1280": {
      "op": "frame_dig -1",
      "defined_out": [
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)"
      ]
    },
    "1282": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)",
        "0x01"
      ]
    },
    "1285": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1286": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1288": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1290": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1292": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1294": {
      "retsub": true,
      "op": "retsub"
    },
    "1295": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "params": {
        "tuple_of_tuples.0.0#0": "bytes",
        "tuple_of_tuples.0.1#0": "bytes",
        "tuple_of_tuples.1.0#0": "uint64",
        "tuple_of_tuples.1.1#0": "bytes",
        "tuple_of_tuples.1.2#0": "bytes"
      },
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1298": {
      "op": "frame_dig -5",
      "defined_out": [
        "string#0"
      ],
      "stack_out": [
        "string#0"
      ]
    },
    "1300": {
      "op": "frame_dig -4",
      "defined_out": [
        "arc4_string#0",
        "string#0"
      ],
      "stack_out": [
        "string#0",
        "arc4_string#0"
      ]
    },
    "1302": {
      "op": "swap",
      "stack_out": [
        "arc4_string#0",
        "string#0"
      ]
    },
    "1303": {
      "op": "frame_dig -3",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ]
    },
    "1305": {
      "op": "cover 2",
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1307": {
      "op": "frame_dig -2",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0",
        "arc4_u64#0"
      ]
    },
    "1309": {
      "op": "cover 3",
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1311": {
      "op": "frame_dig -1",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "bytez#0"
      ]
    },
    "1313": {
      "op": "cover 4",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1315": {
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "\"echo: \""
      ]
    },
    "1316": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \"",
        "string#0"
      ]
    },
    "1317": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%0#0"
      ]
    },
    "1318": {
      "op": "cover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0"
      ]
    },
    "1320": {
      "op": "bytec_3 // 0x00066563686f3a20",
      "defined_out": [
        "0x00066563686f3a20",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "0x00066563686f3a20"
      ]
    },
    "1321": {
      "op": "extract 2 0",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "expr_value_trimmed%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "1324": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "expr_value_trimmed%0#0",
        "arc4_string#0"
      ]
    },
    "1325": {
      "op": "extract 2 0",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "expr_value_trimmed%0#0",
        "expr_value_trimmed%1#0"
      ]
    },
    "1328": {
      "op": "concat",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0"
      ]
    },
    "1329": {
      "op": "dup",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "1330": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "len_%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "1331": {
      "op": "itob",
      "defined_out": [
        "arc4_u64#0",
        "as_bytes%0#0",
        "bytez#0",
        "concatenated%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "as_bytes%0#0"
      ]
    },
    "1332": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concatenated%0#0",
        "len_16_bit%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "1335": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "1336": {
      "op": "concat",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat_result%0#0"
      ]
    },
    "1337": {
      "op": "swap",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "u64#0"
      ]
    },
    "1338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "u64#0",
        "1"
      ]
    },
    "1339": {
      "op": "+",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "concat_result%0#0",
        "tmp%1#0"
      ]
    },
    "1340": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "arc4_u64#0"
      ]
    },
    "1342": {
      "op": "btoi",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1343": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1344": {
      "op": "+",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1345": {
      "op": "itob",
      "defined_out": [
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1346": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "bytez#0",
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20"
      ]
    },
    "1347": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "0x6563686f3a20",
        "bytez#0"
      ]
    },
    "1349": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "1350": {
      "op": "uncover 4",
      "stack_out": [
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1352": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0"
      ]
    },
    "1354": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0"
      ]
    },
    "1356": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1358": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "concat_result%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "tmp%3#0"
      ]
    },
    "1360": {
      "retsub": true,
      "op": "retsub"
    },
    "1361": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "params": {
        "_a1#0": "bytes",
        "_a2#0": "bytes",
        "_a3#0": "bytes",
        "_a4#0": "bytes",
        "_a5#0": "bytes",
        "_a6#0": "bytes",
        "_a7#0": "bytes",
        "_a8#0": "bytes",
        "_a9#0": "bytes",
        "_a10#0": "bytes",
        "_a11#0": "bytes",
        "_a12#0": "bytes",
        "_a13#0": "bytes",
        "_a14#0": "bytes",
        "a15#0": "bytes",
        "a16#0": "bytes",
        "a17#0": "bytes",
        "a18#0": "bytes",
        "a19#0": "bytes",
        "a20#0": "bytes"
      },
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "proto 20 1"
    },
    "1364": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1365": {
      "op": "frame_dig -6",
      "defined_out": [
        "0x",
        "a15#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a15#0 (copy)"
      ]
    },
    "1367": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1368": {
      "op": "frame_dig -5",
      "defined_out": [
        "a16#0 (copy)",
        "encoded_tuple_buffer%1#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%1#0",
        "a16#0 (copy)"
      ]
    },
    "1370": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1371": {
      "op": "frame_dig -4",
      "defined_out": [
        "a17#0 (copy)",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "a17#0 (copy)"
      ]
    },
    "1373": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1374": {
      "op": "frame_dig -3",
      "defined_out": [
        "a18#0 (copy)",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%3#0",
        "a18#0 (copy)"
      ]
    },
    "1376": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1377": {
      "op": "frame_dig -2",
      "defined_out": [
        "a19#0 (copy)",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "a19#0 (copy)"
      ]
    },
    "1379": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1380": {
      "op": "frame_dig -1",
      "defined_out": [
        "a20#0 (copy)",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "a20#0 (copy)"
      ]
    },
    "1382": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1383": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0"
      ]
    },
    "1386": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%0#0",
        "last_arg#0 (copy)"
      ]
    },
    "1388": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "1389": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1390": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1391": {
      "op": "len",
      "defined_out": [
        "last_arg#0",
        "length%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length%0#0"
      ]
    },
    "1392": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "as_bytes%0#0"
      ]
    },
    "1393": {
      "op": "extract 6 2",
      "defined_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "last_arg#0",
        "length_uint16%0#0"
      ]
    },
    "1396": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1397": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1398": {
      "retsub": true,
      "op": "retsub"
    },
    "1399": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "params": {
        "log_1.level#0": "uint64",
        "log_1.message#0": "bytes",
        "log_2.level#0": "uint64",
        "log_2.message#0": "bytes"
      },
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1402": {
      "op": "frame_dig -4",
      "defined_out": [
        "log_1.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)"
      ]
    },
    "1404": {
      "op": "frame_dig -2",
      "defined_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ]
    },
    "1406": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1407": {
      "op": "frame_dig -3",
      "defined_out": [
        "log_1.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)"
      ]
    },
    "1409": {
      "op": "frame_dig -1",
      "defined_out": [
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)"
      ]
    },
    "1411": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1412": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1413": {
      "retsub": true,
      "op": "retsub"
    }
  }
}