{
  "version": 3,
  "sources": [
    "../logger.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AAuIK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvIL;;;AAuIK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnIL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAmIK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AA5BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvGL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAuGK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5FL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AA4FK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtFL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAsFK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxEL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAwEK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1DL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA0DK;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;;AAsDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlDL;;;AAAA;AAkDK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9CL;;;AAAA;;;AA8CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1CL;;;AAAA;;;AA0CK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtCL;;;AAsCK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlCL;;;AAAA;AAAA;;;AAAA;;;AAAA;AAkCK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA9BL;;;AA8BK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA1BL;;;AA0BK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBL;;;AAsBK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBL;;;AAkBK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAdL;;;AAcK;;;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AANL;;;AAMK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AACK;;;AAAA;;;;;;AADL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAEe;;AAAK;;;AAAL;AAAP;AACO;;AAAK;;;AAAL;AAAP;;AAER;;;;;;AAEe;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAP;;;;AAIO;;AAAP;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEY;;AAAA;;;AAAJ;;AAER;;;;;;AAE8B;;AAAA;AAAA;AAAkB;;;;;;;AAApC;;;;;;AAAA;;AAAA;AAAJ;;AAER;;;;;;AAEY;;AAAA;;;AAAJ;;AAER;;;;;;AAEY;;AAAA;;AAAA;AAAJ;AAAgB;AAAA;;AAAA;AAAhB;AAA+B;AAAA;;AAAA;;AAAA;AAAA;AAA/B;;AAER;;;;;;AAEQ;;AAAA;;AAER;;;;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;;;;AAEe;;AAAQ;AAAR;AAAP;AAER;;;;;;AAM4B;;;AAAR;AACI;;AAAT;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACkB;;;AAAR;AACI;;AAAP;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAM2B;;;AAAR;AACJ;;AAAA;AAAP;AACiB;;;AAAR;AACF;;AAAA;AAAP;AACU;;;AACH;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAIe;AAAA;;AAAA;AAAc;AAAA;;AAAA;AAAe;;AAAI;AAAJ;AAAO;;AAAK;AAAL;AAA3C;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAIQ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACQ;AAAA;;AAAA;AAAA;;AAAmB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AACvB;;AAAM;AAAN;AACY;;AAAA;AAAkB;AAAlB;AAAZ;AACA;AAAA;;AAAA;AAHJ;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAMR;;;;;;AAwBmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AACJ;;;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAP;AAER;;;;;;AAEe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x 0x6563686f3a20 0x01"
    },
    "24": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "b main_block@0"
    },
    "28": {
      "block": "main_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_block@1"
    },
    "31": {
      "block": "main_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "33": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "34": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "35": {
      "op": "bz main_bare_routing@26",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "38": {
      "op": "b main_abi_routing@2"
    },
    "41": {
      "block": "main_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "44": {
      "op": "pushbytes 0xc77212bc // method \"is_a_b(byte[],byte[])void\"",
      "defined_out": [
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)"
      ]
    },
    "50": {
      "op": "pushbytes 0x9bf81913 // method \"echo(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)"
      ]
    },
    "56": {
      "op": "pushbytes 0xb862ee19 // method \"no_args()uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)"
      ]
    },
    "62": {
      "op": "pushbytes 0x3c1058d9 // method \"log(uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)"
      ]
    },
    "68": {
      "op": "pushbytes 0x6af45930 // method \"log(uint512)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)"
      ]
    },
    "74": {
      "op": "pushbytes 0xb4b4334e // method \"log(string)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)"
      ]
    },
    "80": {
      "op": "pushbytes 0x6eed7ec3 // method \"log(bool)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)"
      ]
    },
    "86": {
      "op": "pushbytes 0xb500e111 // method \"log(byte[])void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)"
      ]
    },
    "92": {
      "op": "pushbytes 0x46b50faf // method \"log(uint64,address,uint64)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)"
      ]
    },
    "98": {
      "op": "pushbytes 0x0437b17e // method \"log(address)void\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)"
      ]
    },
    "104": {
      "op": "pushbytes 0x4a444c77 // method \"echo_native_string(string)string\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)"
      ]
    },
    "110": {
      "op": "pushbytes 0x2659e818 // method \"echo_native_bytes(byte[])byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])"
      ]
    },
    "116": {
      "op": "pushbytes 0xa9fb6cf1 // method \"echo_native_uint64(uint64)uint64\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)"
      ]
    },
    "122": {
      "op": "pushbytes 0xd8cc363b // method \"echo_native_biguint(uint512)uint512\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)"
      ]
    },
    "128": {
      "op": "pushbytes 0xd6c2ac7f // method \"echo_resource_by_index(asset,application,account)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))"
      ]
    },
    "134": {
      "op": "pushbytes 0x48142d5e // method \"echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))"
      ]
    },
    "140": {
      "op": "pushbytes 0x16e03919 // method \"echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))"
      ]
    },
    "146": {
      "op": "pushbytes 0xab271ce4 // method \"echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))"
      ]
    },
    "152": {
      "op": "pushbytes 0xba0b4381 // method \"return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])"
      ]
    },
    "158": {
      "op": "pushbytes 0xddd07185 // method \"logs_are_equal((uint64,string),(uint64,string))bool\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)"
      ]
    },
    "164": {
      "op": "pushbytes 0xdc4f1992 // method \"echo_log_struct((uint64,string))(uint64,string)\"",
      "defined_out": [
        "Method(echo(string)string)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(log(address)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(string)void)",
        "Method(log(uint512)void)",
        "Method(log(uint64)void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(no_args()uint64)",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))"
      ]
    },
    "170": {
      "op": "uncover 21",
      "stack_out": [
        "tmp%0#0",
        "Method(is_a_b(byte[],byte[])void)",
        "Method(echo(string)string)",
        "Method(no_args()uint64)",
        "Method(log(uint64)void)",
        "Method(log(uint512)void)",
        "Method(log(string)void)",
        "Method(log(bool)void)",
        "Method(log(byte[])void)",
        "Method(log(uint64,address,uint64)void)",
        "Method(log(address)void)",
        "Method(echo_native_string(string)string)",
        "Method(echo_native_bytes(byte[])byte[])",
        "Method(echo_native_uint64(uint64)uint64)",
        "Method(echo_native_biguint(uint512)uint512)",
        "Method(echo_resource_by_index(asset,application,account)(uint64,uint64,address))",
        "Method(echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address))",
        "Method(echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512))",
        "Method(echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[])))",
        "Method(return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[])",
        "Method(logs_are_equal((uint64,string),(uint64,string))bool)",
        "Method(echo_log_struct((uint64,string))(uint64,string))",
        "tmp%2#0"
      ]
    },
    "172": {
      "op": "match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_resource_by_index_route@17 main_echo_resource_by_value_route@18 main_echo_native_tuple_route@19 main_echo_nested_tuple_route@20 main_return_args_after_14th_route@21 main_logs_are_equal_route@22 main_echo_log_struct_route@23",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "b main_switch_case_default@24"
    },
    "219": {
      "block": "main_switch_case_default@24",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@25"
    },
    "222": {
      "block": "main_switch_case_next@25",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@30"
    },
    "225": {
      "block": "main_after_if_else@30",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "226": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "231": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "block": "main_echo_log_struct_route@23",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%159#0"
      ]
    },
    "234": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%159#0",
        "NoOp"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%160#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%161#0"
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%161#0",
        "0"
      ]
    },
    "240": {
      "op": "!=",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%162#0"
      ]
    },
    "241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%2#0"
      ]
    },
    "245": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "op": "callsub echo_log_struct",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%163#0"
      ]
    },
    "248": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%163#0",
        "0x151f7c75"
      ]
    },
    "249": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%163#0"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%164#0"
      ]
    },
    "252": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "254": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "259": {
      "block": "main_logs_are_equal_route@22",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%148#0"
      ]
    },
    "261": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%148#0",
        "NoOp"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%149#0"
      ]
    },
    "263": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%150#0"
      ]
    },
    "266": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%150#0",
        "0"
      ]
    },
    "267": {
      "op": "!=",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%151#0"
      ]
    },
    "268": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "272": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "274": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "275": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%8#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract%8#0"
      ]
    },
    "276": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%item0%2#0"
      ]
    },
    "277": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "279": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "280": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)",
        "8"
      ]
    },
    "281": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "282": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "284": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%7#0",
        "aggregate%item0%2#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%7#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%len%3#0"
      ]
    },
    "286": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%len%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%7#0"
      ]
    },
    "290": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%7#0",
        "aggregate%len%3#0"
      ]
    },
    "292": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%2#0",
        "aggregate%substring3%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%2#0",
        "aggregate%substring3%5#0"
      ]
    },
    "293": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "299": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "300": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "0"
      ]
    },
    "301": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "0",
        "8"
      ]
    },
    "302": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%9#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract%9#0"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%item0%3#0"
      ]
    },
    "304": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "306": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "307": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)",
        "8"
      ]
    },
    "308": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "309": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "311": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0 (copy)"
      ]
    },
    "312": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%8#0",
        "aggregate%item0%3#0",
        "aggregate%len%4#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%8#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%len%4#0"
      ]
    },
    "313": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0"
      ]
    },
    "315": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%len%4#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%8#0"
      ]
    },
    "317": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "reinterpret_Encoded(uint64,(len+utf8[]))%1#0",
        "aggregate%extract_uint16%8#0",
        "aggregate%len%4#0"
      ]
    },
    "319": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%3#0",
        "aggregate%substring3%6#0",
        "tmp%152#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "aggregate%item0%3#0",
        "aggregate%substring3%6#0"
      ]
    },
    "320": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%152#0",
        "tmp%153#0",
        "tmp%154#0",
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "tmp%154#0",
        "tmp%155#0"
      ]
    },
    "323": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%153#0",
        "tmp%154#0",
        "tmp%155#0",
        "tmp%152#0"
      ]
    },
    "325": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%154#0",
        "tmp%155#0",
        "tmp%152#0",
        "tmp%153#0"
      ]
    },
    "327": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%155#0",
        "tmp%152#0",
        "tmp%153#0",
        "tmp%154#0"
      ]
    },
    "329": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%152#0",
        "tmp%153#0",
        "tmp%154#0",
        "tmp%155#0"
      ]
    },
    "331": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "op": "callsub logs_are_equal",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%156#0"
      ]
    },
    "334": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%156#0",
        "0x00"
      ]
    },
    "337": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%156#0",
        "0x00",
        "0"
      ]
    },
    "338": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "0x00",
        "0",
        "tmp%156#0"
      ]
    },
    "340": {
      "op": "setbit",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%157#0"
      ]
    },
    "341": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%157#0",
        "0x151f7c75"
      ]
    },
    "342": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%157#0"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%158#0"
      ]
    },
    "345": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "347": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "352": {
      "block": "main_return_args_after_14th_route@21",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%142#0"
      ]
    },
    "354": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%142#0",
        "NoOp"
      ]
    },
    "355": {
      "op": "==",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%143#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%144#0"
      ]
    },
    "359": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%144#0",
        "0"
      ]
    },
    "360": {
      "op": "!=",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%145#0"
      ]
    },
    "361": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "362": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "368": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "374": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "380": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "383": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "386": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "389": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "392": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "395": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "398": {
      "op": "txna ApplicationArgs 13",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "401": {
      "op": "txna ApplicationArgs 14",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "404": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0",
        "0"
      ]
    },
    "408": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0",
        "0",
        "1"
      ]
    },
    "409": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0"
      ]
    },
    "410": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0"
      ]
    },
    "413": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "1"
      ]
    },
    "414": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0",
        "1",
        "1"
      ]
    },
    "415": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "416": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0"
      ]
    },
    "419": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "2"
      ]
    },
    "420": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0",
        "2",
        "1"
      ]
    },
    "421": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ]
    },
    "422": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0"
      ]
    },
    "425": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "3"
      ]
    },
    "427": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0",
        "3",
        "1"
      ]
    },
    "428": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ]
    },
    "429": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0"
      ]
    },
    "432": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "4"
      ]
    },
    "434": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0",
        "4",
        "4"
      ]
    },
    "436": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "437": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0"
      ]
    },
    "440": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "8"
      ]
    },
    "441": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "reinterpret_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0",
        "8",
        "1"
      ]
    },
    "442": {
      "op": "extract3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ]
    },
    "443": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "445": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "447": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "449": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "451": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "453": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "455": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "457": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "459": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "461": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "463": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "465": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "467": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "469": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "471": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0"
      ]
    },
    "473": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0"
      ]
    },
    "475": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0"
      ]
    },
    "477": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%4#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0"
      ]
    },
    "479": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "tuple_item%5#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0"
      ]
    },
    "481": {
      "op": "uncover 19",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint64)%9#0",
        "reinterpret_Encoded(uint64)%10#0",
        "reinterpret_Encoded(uint64)%11#0",
        "reinterpret_Encoded(uint64)%12#0",
        "reinterpret_Encoded(uint64)%13#0",
        "reinterpret_Encoded(uint64)%14#0",
        "reinterpret_Encoded(uint64)%15#0",
        "reinterpret_Encoded(uint64)%16#0",
        "reinterpret_Encoded(uint64)%17#0",
        "reinterpret_Encoded(uint64)%18#0",
        "reinterpret_Encoded(uint64)%19#0",
        "reinterpret_Encoded(uint64)%20#0",
        "tuple_item%0#0",
        "tuple_item%1#0",
        "tuple_item%2#0",
        "tuple_item%3#0",
        "tuple_item%4#0",
        "tuple_item%5#0"
      ]
    },
    "483": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "op": "callsub return_args_after_14th",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%146#0"
      ]
    },
    "486": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%146#0",
        "0x151f7c75"
      ]
    },
    "487": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%146#0"
      ]
    },
    "489": {
      "op": "concat",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%147#0"
      ]
    },
    "490": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "492": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "497": {
      "block": "main_echo_nested_tuple_route@20",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%126#0"
      ]
    },
    "499": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%126#0",
        "NoOp"
      ]
    },
    "500": {
      "op": "==",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%127#0"
      ]
    },
    "501": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "502": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%128#0"
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%128#0",
        "0"
      ]
    },
    "505": {
      "op": "!=",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%129#0"
      ]
    },
    "506": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "507": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "510": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "0"
      ]
    },
    "512": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "513": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "515": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "516": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "517": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "518": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "520": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "522": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "524": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "525": {
      "op": "dup",
      "defined_out": [
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "526": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "0"
      ]
    },
    "527": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "528": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0"
      ]
    },
    "530": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "531": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "532": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "533": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "535": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%3#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "537": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "539": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "540": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "543": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "545": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "546": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)",
        "2"
      ]
    },
    "547": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "548": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0"
      ]
    },
    "550": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "aggregate%substring3%0#0 (copy)"
      ]
    },
    "551": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%4#0",
        "aggregate%item0%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%substring3%0#0",
        "aggregate%len%0#0"
      ]
    },
    "552": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "554": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "556": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%0#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%len%0#0"
      ]
    },
    "558": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "559": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "561": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "562": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)",
        "2"
      ]
    },
    "563": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "564": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "566": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 (copy)"
      ]
    },
    "567": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%5#0",
        "aggregate%item0%0#0",
        "aggregate%len%1#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%len%1#0"
      ]
    },
    "568": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0"
      ]
    },
    "570": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%len%1#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "572": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "reinterpret_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "574": {
      "op": "substring3",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "575": {
      "op": "dup",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0"
      ]
    },
    "577": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "0",
        "8"
      ]
    },
    "578": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%0#0"
      ]
    },
    "579": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%item0%1#0"
      ]
    },
    "580": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "582": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "583": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "8"
      ]
    },
    "584": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "8",
        "8"
      ]
    },
    "585": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract%1#0"
      ]
    },
    "586": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "588": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "589": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)",
        "16"
      ]
    },
    "591": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "592": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0"
      ]
    },
    "594": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "aggregate%substring3%3#0 (copy)"
      ]
    },
    "595": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%len%2#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%substring3%3#0",
        "aggregate%len%2#0"
      ]
    },
    "596": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0"
      ]
    },
    "598": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%len%2#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0"
      ]
    },
    "600": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0",
        "aggregate%extract_uint16%6#0",
        "aggregate%len%2#0"
      ]
    },
    "602": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%substring3%2#0",
        "aggregate%substring3%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%4#0"
      ]
    },
    "603": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0"
      ]
    },
    "606": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "608": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%2#0",
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%substring3%2#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%130#0",
        "aggregate%item2%0#0"
      ]
    },
    "610": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%1#0",
        "aggregate%item2%0#0",
        "tmp%130#0",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item0%1#0",
        "aggregate%extract%1#0",
        "tmp%130#0",
        "aggregate%item2%0#0",
        "tmp%131#0"
      ]
    },
    "612": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%extract%1#0",
        "tmp%130#0",
        "aggregate%item2%0#0",
        "tmp%131#0",
        "tmp%132#0"
      ]
    },
    "614": {
      "op": "uncover 4",
      "defined_out": [
        "aggregate%item2%0#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%130#0",
        "aggregate%item2%0#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "616": {
      "op": "uncover 3",
      "defined_out": [
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%134#0"
      ]
    },
    "618": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%134#0",
        "tmp%130#0"
      ]
    },
    "620": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%134#0",
        "tmp%130#0",
        "tmp%131#0"
      ]
    },
    "622": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%133#0",
        "tmp%134#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0"
      ]
    },
    "624": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%134#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0"
      ]
    },
    "626": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%130#0",
        "tmp%131#0",
        "tmp%132#0",
        "tmp%133#0",
        "tmp%134#0"
      ]
    },
    "628": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "op": "callsub echo_nested_tuple",
      "defined_out": [
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ]
    },
    "631": {
      "op": "cover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0"
      ]
    },
    "633": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0"
      ]
    },
    "635": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%135#0",
        "tmp%136#0"
      ]
    },
    "637": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "tmp%135#0"
      ]
    },
    "639": {
      "op": "dup",
      "defined_out": [
        "tmp%135#0",
        "tmp%135#0 (copy)",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "tmp%135#0",
        "tmp%135#0 (copy)"
      ]
    },
    "640": {
      "op": "len",
      "defined_out": [
        "aggregate%length%4#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "tmp%135#0",
        "aggregate%length%4#0"
      ]
    },
    "641": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "tmp%135#0",
        "aggregate%as_bytes%6#0"
      ]
    },
    "642": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%4#0",
        "tmp%135#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "tmp%135#0",
        "aggregate%length_uint16%4#0"
      ]
    },
    "645": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%length_uint16%4#0",
        "tmp%135#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0"
      ]
    },
    "648": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "4"
      ]
    },
    "650": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%7#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%7#0"
      ]
    },
    "651": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "654": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%2#0",
        "0x"
      ]
    },
    "655": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "0x",
        "aggregate%offset_as_uint16%2#0"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%10#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%10#0"
      ]
    },
    "658": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0"
      ]
    },
    "660": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_Encoded(len+utf8[])%2#0 (copy)",
        "aggregate%head%10#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_Encoded(len+utf8[])%2#0 (copy)"
      ]
    },
    "661": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%data_length%2#0",
        "aggregate%head%10#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%data_length%2#0"
      ]
    },
    "662": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%data_length%2#0",
        "4"
      ]
    },
    "664": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%current_tail_offset%2#0",
        "aggregate%head%10#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%current_tail_offset%2#0"
      ]
    },
    "665": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%8#0",
        "aggregate%head%10#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%as_bytes%8#0"
      ]
    },
    "666": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%10#0",
        "aggregate%offset_as_uint16%3#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%10#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "669": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%offset_as_uint16%3#0",
        "aggregate%head%10#0"
      ]
    },
    "671": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%10#0",
        "aggregate%offset_as_uint16%3#0"
      ]
    },
    "673": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%11#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%as_Encoded(len+utf8[])%2#0",
        "aggregate%head%11#0"
      ]
    },
    "674": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%head%11#0",
        "aggregate%as_Encoded(len+utf8[])%2#0"
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%2#0",
        "tmp%136#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "tmp%136#0",
        "aggregate%concat%2#0"
      ]
    },
    "677": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%concat%2#0",
        "tmp%136#0"
      ]
    },
    "679": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "680": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "4"
      ]
    },
    "682": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%9#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%9#0"
      ]
    },
    "683": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "686": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%offset_as_uint16%4#0",
        "0x"
      ]
    },
    "687": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "0x",
        "aggregate%offset_as_uint16%4#0"
      ]
    },
    "689": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%12#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%head%12#0"
      ]
    },
    "690": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "692": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)",
        "aggregate%head%12#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)"
      ]
    },
    "693": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%4#0",
        "aggregate%head%12#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%4#0"
      ]
    },
    "694": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%data_length%4#0",
        "4"
      ]
    },
    "696": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "tmp%137#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "tmp%137#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "697": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "tmp%137#0"
      ]
    },
    "699": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64)%7#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(uint64)%7#0"
      ]
    },
    "700": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(uint64)%7#0",
        "0x"
      ]
    },
    "701": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "0x",
        "aggregate%as_Encoded(uint64)%7#0"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%13#0",
        "tmp%138#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "tmp%138#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%13#0"
      ]
    },
    "704": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%13#0",
        "tmp%138#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0"
      ]
    },
    "707": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "tmp%139#0",
        "tmp%139#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "tmp%139#0 (copy)"
      ]
    },
    "709": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "aggregate%length%5#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length%5#0"
      ]
    },
    "710": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_bytes%10#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_bytes%10#0"
      ]
    },
    "711": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%5#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%139#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%5#0"
      ]
    },
    "714": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%length_uint16%5#0",
        "tmp%139#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_Encoded(len+uint8[])%2#0"
      ]
    },
    "717": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "18"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_bytes%11#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%as_bytes%11#0"
      ]
    },
    "720": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%14#0",
        "aggregate%offset_as_uint16%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%14#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "723": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%offset_as_uint16%5#0",
        "aggregate%head%14#0"
      ]
    },
    "725": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%head%14#0",
        "aggregate%offset_as_uint16%5#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0",
        "aggregate%head%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(len+uint8[])%2#0",
        "aggregate%head%15#0"
      ]
    },
    "728": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%15#0",
        "aggregate%as_Encoded(len+uint8[])%2#0"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%head%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%current_tail_offset%4#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "731": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%current_tail_offset%4#0"
      ]
    },
    "733": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%12#0",
        "aggregate%head%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%as_bytes%12#0"
      ]
    },
    "734": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%12#0",
        "aggregate%offset_as_uint16%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%12#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "737": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%offset_as_uint16%6#0",
        "aggregate%head%12#0"
      ]
    },
    "739": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%12#0",
        "aggregate%offset_as_uint16%6#0"
      ]
    },
    "741": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%16#0"
      ]
    },
    "742": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%head%16#0",
        "aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0",
        "aggregate%concat%5#0"
      ]
    },
    "745": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%concat%5#0",
        "aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%140#0"
      ]
    },
    "748": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%140#0",
        "0x151f7c75"
      ]
    },
    "749": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%140#0"
      ]
    },
    "751": {
      "op": "concat",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%141#0"
      ]
    },
    "752": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "753": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "754": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "756": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "759": {
      "block": "main_echo_native_tuple_route@19",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%112#0"
      ]
    },
    "761": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%112#0",
        "NoOp"
      ]
    },
    "762": {
      "op": "==",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%113#0"
      ]
    },
    "763": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%114#0"
      ]
    },
    "766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%114#0",
        "0"
      ]
    },
    "767": {
      "op": "!=",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%115#0"
      ]
    },
    "768": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+utf8[])%3#0"
      ]
    },
    "772": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0"
      ]
    },
    "775": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "778": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "781": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%116#0",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "tmp%117#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "784": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "785": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ]
    },
    "788": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%116#0"
      ]
    },
    "790": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%118#0",
        "tmp%119#0",
        "tmp%116#0",
        "tmp%117#0"
      ]
    },
    "792": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%119#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0"
      ]
    },
    "794": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%116#0",
        "tmp%117#0",
        "tmp%118#0",
        "tmp%119#0"
      ]
    },
    "796": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "op": "callsub echo_native_tuple",
      "defined_out": [
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ]
    },
    "799": {
      "op": "cover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0"
      ]
    },
    "801": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "803": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "tmp%120#0"
      ]
    },
    "805": {
      "op": "dup",
      "defined_out": [
        "tmp%120#0",
        "tmp%120#0 (copy)",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "tmp%120#0",
        "tmp%120#0 (copy)"
      ]
    },
    "806": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "tmp%120#0",
        "aggregate%length%2#0"
      ]
    },
    "807": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "tmp%120#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "808": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "tmp%120#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "tmp%120#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "811": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%length_uint16%2#0",
        "tmp%120#0"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "814": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "76"
      ]
    },
    "816": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%3#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "817": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "820": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%0#0",
        "0x"
      ]
    },
    "821": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "0x",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "823": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%6#0"
      ]
    },
    "824": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "826": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0 (copy)",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0 (copy)"
      ]
    },
    "827": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%data_length%0#0",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "828": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "830": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "831": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%121#0 (copy)",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%121#0 (copy)"
      ]
    },
    "833": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "aggregate%length%3#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%3#0"
      ]
    },
    "834": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%4#0"
      ]
    },
    "835": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "aggregate%length_uint16%3#0",
        "tmp%121#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "tmp%121#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%3#0"
      ]
    },
    "838": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%3#0",
        "tmp%121#0"
      ]
    },
    "840": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0",
        "aggregate%head%6#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%3#0"
      ]
    },
    "841": {
      "op": "cover 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%6#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "843": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%5#0",
        "aggregate%head%6#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_bytes%5#0"
      ]
    },
    "844": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%head%6#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "847": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%6#0"
      ]
    },
    "849": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%6#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "851": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%7#0",
        "tmp%122#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "tmp%122#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%7#0"
      ]
    },
    "852": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%7#0",
        "tmp%122#0"
      ]
    },
    "854": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_Encoded(uint64)%6#0",
        "aggregate%head%7#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%7#0",
        "aggregate%as_Encoded(uint64)%6#0"
      ]
    },
    "855": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0"
      ]
    },
    "856": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "tmp%123#0",
        "tmp%123#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "tmp%123#0 (copy)"
      ]
    },
    "858": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0"
      ]
    },
    "859": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%value_len%1#0",
        "64"
      ]
    },
    "861": {
      "op": "<=",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%len_ok%1#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%len_ok%1#0"
      ]
    },
    "862": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0"
      ]
    },
    "863": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "64"
      ]
    },
    "865": {
      "op": "bzero",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%bzero%1#0",
        "aggregate%head%8#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%123#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%bzero%1#0"
      ]
    },
    "866": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%bzero%1#0",
        "tmp%123#0"
      ]
    },
    "868": {
      "op": "b|",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%as_Encoded(uint512)%1#0",
        "aggregate%head%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%8#0",
        "aggregate%as_Encoded(uint512)%1#0"
      ]
    },
    "869": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%as_Encoded(len+utf8[])%1#0",
        "aggregate%head%9#0"
      ]
    },
    "870": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%head%9#0",
        "aggregate%as_Encoded(len+utf8[])%1#0"
      ]
    },
    "872": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "873": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%1#0"
      ]
    },
    "875": {
      "op": "concat",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%124#0"
      ]
    },
    "876": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%124#0",
        "0x151f7c75"
      ]
    },
    "877": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%124#0"
      ]
    },
    "879": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%125#0"
      ]
    },
    "880": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "881": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "882": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "884": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "887": {
      "block": "main_echo_resource_by_value_route@18",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%100#0"
      ]
    },
    "889": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%100#0",
        "NoOp"
      ]
    },
    "890": {
      "op": "==",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%101#0"
      ]
    },
    "891": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "892": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%102#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%102#0",
        "0"
      ]
    },
    "895": {
      "op": "!=",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%103#0"
      ]
    },
    "896": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "897": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "900": {
      "op": "btoi",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%104#0"
      ]
    },
    "901": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%104#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "904": {
      "op": "btoi",
      "defined_out": [
        "tmp%104#0",
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "905": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "908": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%105#0",
        "tmp%106#0",
        "tmp%104#0"
      ]
    },
    "910": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%106#0",
        "tmp%104#0",
        "tmp%105#0"
      ]
    },
    "912": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%104#0",
        "tmp%105#0",
        "tmp%106#0"
      ]
    },
    "914": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "op": "callsub echo_resource_by_value",
      "defined_out": [
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%107#0",
        "tmp%108#0",
        "tmp%109#0"
      ]
    },
    "917": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%107#0",
        "tmp%108#0"
      ]
    },
    "919": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%108#0",
        "tmp%107#0"
      ]
    },
    "921": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%4#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%108#0",
        "aggregate%as_Encoded(uint64)%4#0"
      ]
    },
    "922": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%4#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%108#0",
        "aggregate%as_Encoded(uint64)%4#0",
        "0x"
      ]
    },
    "923": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%108#0",
        "0x",
        "aggregate%as_Encoded(uint64)%4#0"
      ]
    },
    "925": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "tmp%108#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "tmp%108#0",
        "aggregate%head%3#0"
      ]
    },
    "926": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "aggregate%head%3#0",
        "tmp%108#0"
      ]
    },
    "928": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%5#0",
        "aggregate%head%3#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(uint64)%5#0"
      ]
    },
    "929": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%109#0",
        "aggregate%head%4#0"
      ]
    },
    "930": {
      "op": "uncover 1",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%1#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(uint8[32])%1#0"
      ]
    },
    "932": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%110#0"
      ]
    },
    "933": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%110#0",
        "0x151f7c75"
      ]
    },
    "934": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%110#0"
      ]
    },
    "936": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%111#0"
      ]
    },
    "937": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "939": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "941": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "944": {
      "block": "main_echo_resource_by_index_route@17",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%85#0"
      ]
    },
    "946": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%85#0",
        "NoOp"
      ]
    },
    "947": {
      "op": "==",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%86#0"
      ]
    },
    "948": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "949": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%87#0"
      ]
    },
    "951": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%87#0",
        "0"
      ]
    },
    "952": {
      "op": "!=",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%88#0"
      ]
    },
    "953": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "954": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "957": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%89#0"
      ]
    },
    "958": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0"
      ]
    },
    "960": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "963": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%91#0"
      ]
    },
    "964": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%90#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%92#0"
      ]
    },
    "966": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8)%2#0",
        "tmp%90#0",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%92#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "969": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0",
        "tmp%92#0",
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%92#0",
        "tmp%93#0"
      ]
    },
    "970": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%90#0",
        "tmp%92#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%92#0",
        "tmp%94#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%92#0",
        "tmp%94#0",
        "tmp%90#0"
      ]
    },
    "974": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%94#0",
        "tmp%90#0",
        "tmp%92#0"
      ]
    },
    "976": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%90#0",
        "tmp%92#0",
        "tmp%94#0"
      ]
    },
    "978": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "op": "callsub echo_resource_by_index",
      "defined_out": [
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "981": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%95#0",
        "tmp%96#0"
      ]
    },
    "983": {
      "op": "cover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%96#0",
        "tmp%95#0"
      ]
    },
    "985": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%96#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "986": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%2#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%96#0",
        "aggregate%as_Encoded(uint64)%2#0",
        "0x"
      ]
    },
    "987": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%96#0",
        "0x",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "989": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "tmp%96#0",
        "aggregate%head%0#0"
      ]
    },
    "990": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "aggregate%head%0#0",
        "tmp%96#0"
      ]
    },
    "992": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%3#0",
        "aggregate%head%0#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%3#0"
      ]
    },
    "993": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%97#0",
        "aggregate%head%1#0"
      ]
    },
    "994": {
      "op": "uncover 1",
      "defined_out": [
        "aggregate%as_Encoded(uint8[32])%0#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint8[32])%0#0"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%98#0"
      ]
    },
    "997": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%98#0",
        "0x151f7c75"
      ]
    },
    "998": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%98#0"
      ]
    },
    "1000": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%99#0"
      ]
    },
    "1001": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1002": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1003": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1005": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1008": {
      "block": "main_echo_native_biguint_route@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%77#0"
      ]
    },
    "1010": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%77#0",
        "NoOp"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%78#0"
      ]
    },
    "1012": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1013": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%79#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%79#0",
        "0"
      ]
    },
    "1016": {
      "op": "!=",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%80#0"
      ]
    },
    "1017": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1018": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%81#0"
      ]
    },
    "1021": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "op": "callsub echo_native_biguint",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0"
      ]
    },
    "1024": {
      "op": "dup",
      "defined_out": [
        "tmp%82#0",
        "tmp%82#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "tmp%82#0 (copy)"
      ]
    },
    "1025": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "aggregate%value_len%0#0"
      ]
    },
    "1026": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "1028": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "1029": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0"
      ]
    },
    "1030": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "64"
      ]
    },
    "1032": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%82#0",
        "aggregate%bzero%0#0"
      ]
    },
    "1033": {
      "op": "b|",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%83#0"
      ]
    },
    "1034": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%83#0",
        "0x151f7c75"
      ]
    },
    "1035": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%83#0"
      ]
    },
    "1037": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%84#0"
      ]
    },
    "1038": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1039": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1040": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1042": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1045": {
      "block": "main_echo_native_uint64_route@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%69#0"
      ]
    },
    "1047": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%69#0",
        "NoOp"
      ]
    },
    "1048": {
      "op": "==",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%70#0"
      ]
    },
    "1049": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1050": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%71#0"
      ]
    },
    "1052": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%71#0",
        "0"
      ]
    },
    "1053": {
      "op": "!=",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%72#0"
      ]
    },
    "1054": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1055": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "1058": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%73#0"
      ]
    },
    "1059": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "op": "callsub echo_native_uint64",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%74#0"
      ]
    },
    "1062": {
      "op": "itob",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0"
      ]
    },
    "1063": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "0x151f7c75"
      ]
    },
    "1064": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%75#0"
      ]
    },
    "1066": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%76#0"
      ]
    },
    "1067": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1068": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1069": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1071": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1074": {
      "block": "main_echo_native_bytes_route@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%61#0"
      ]
    },
    "1076": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%61#0",
        "NoOp"
      ]
    },
    "1077": {
      "op": "==",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%62#0"
      ]
    },
    "1078": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1079": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%63#0"
      ]
    },
    "1081": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%63#0",
        "0"
      ]
    },
    "1082": {
      "op": "!=",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%64#0"
      ]
    },
    "1083": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1084": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "1087": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%65#0"
      ]
    },
    "1090": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "op": "callsub echo_native_bytes",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%66#0"
      ]
    },
    "1093": {
      "op": "dup",
      "defined_out": [
        "tmp%66#0",
        "tmp%66#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%66#0",
        "tmp%66#0 (copy)"
      ]
    },
    "1094": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%66#0",
        "aggregate%length%1#0"
      ]
    },
    "1095": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%66#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1096": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%66#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "1099": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%66#0"
      ]
    },
    "1101": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%67#0"
      ]
    },
    "1102": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%67#0",
        "0x151f7c75"
      ]
    },
    "1103": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%67#0"
      ]
    },
    "1105": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%68#0"
      ]
    },
    "1106": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1107": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1108": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1110": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1113": {
      "block": "main_echo_native_string_route@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%53#0"
      ]
    },
    "1115": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%53#0",
        "NoOp"
      ]
    },
    "1116": {
      "op": "==",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%54#0"
      ]
    },
    "1117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%55#0"
      ]
    },
    "1120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%55#0",
        "0"
      ]
    },
    "1121": {
      "op": "!=",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%56#0"
      ]
    },
    "1122": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1123": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "1126": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%57#0"
      ]
    },
    "1129": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "op": "callsub echo_native_string",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0"
      ]
    },
    "1132": {
      "op": "dup",
      "defined_out": [
        "tmp%58#0",
        "tmp%58#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0",
        "tmp%58#0 (copy)"
      ]
    },
    "1133": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0",
        "aggregate%length%0#0"
      ]
    },
    "1134": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1135": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%58#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1138": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%58#0"
      ]
    },
    "1140": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%59#0"
      ]
    },
    "1141": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%59#0",
        "0x151f7c75"
      ]
    },
    "1142": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%59#0"
      ]
    },
    "1144": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%60#0"
      ]
    },
    "1145": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1146": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1147": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1149": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1152": {
      "block": "main_log_route@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%49#0"
      ]
    },
    "1154": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%49#0",
        "NoOp"
      ]
    },
    "1155": {
      "op": "==",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%50#0"
      ]
    },
    "1156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%51#0"
      ]
    },
    "1159": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%51#0",
        "0"
      ]
    },
    "1160": {
      "op": "!=",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%52#0"
      ]
    },
    "1161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1162": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "1165": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_address",
      "op": "callsub log_address",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1169": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1171": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1174": {
      "block": "main_log_route@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%42#0"
      ]
    },
    "1176": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%42#0",
        "NoOp"
      ]
    },
    "1177": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%43#0"
      ]
    },
    "1178": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1179": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%44#0"
      ]
    },
    "1181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%44#0",
        "0"
      ]
    },
    "1182": {
      "op": "!=",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%45#0"
      ]
    },
    "1183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1187": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0"
      ]
    },
    "1188": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "1191": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1194": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "1195": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%47#0",
        "tmp%48#0",
        "tmp%46#0"
      ]
    },
    "1197": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%48#0",
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "1199": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "1201": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "op": "callsub log_asset_account_app",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1205": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1207": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1210": {
      "block": "main_log_route@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%38#0"
      ]
    },
    "1212": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%38#0",
        "NoOp"
      ]
    },
    "1213": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%39#0"
      ]
    },
    "1214": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%40#0"
      ]
    },
    "1217": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%40#0",
        "0"
      ]
    },
    "1218": {
      "op": "!=",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%41#0"
      ]
    },
    "1219": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1220": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "1223": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "op": "callsub log_bytes",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1227": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1229": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1232": {
      "block": "main_log_route@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%34#0"
      ]
    },
    "1234": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%34#0",
        "NoOp"
      ]
    },
    "1235": {
      "op": "==",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%35#0"
      ]
    },
    "1236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%36#0"
      ]
    },
    "1239": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%36#0",
        "0"
      ]
    },
    "1240": {
      "op": "!=",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%37#0"
      ]
    },
    "1241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1242": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "1245": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "op": "callsub log_bool",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1248": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1249": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1251": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1254": {
      "block": "main_log_route@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0"
      ]
    },
    "1256": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0",
        "NoOp"
      ]
    },
    "1257": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0"
      ]
    },
    "1258": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1259": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0"
      ]
    },
    "1261": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0",
        "0"
      ]
    },
    "1262": {
      "op": "!=",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%33#0"
      ]
    },
    "1263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1264": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "1267": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_string",
      "op": "callsub log_string",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1271": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1273": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1276": {
      "block": "main_log_route@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0"
      ]
    },
    "1278": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0",
        "NoOp"
      ]
    },
    "1279": {
      "op": "==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0"
      ]
    },
    "1280": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1281": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0"
      ]
    },
    "1283": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "0"
      ]
    },
    "1284": {
      "op": "!=",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0"
      ]
    },
    "1285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1286": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "1289": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "op": "callsub log_uint512",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1293": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1295": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1298": {
      "block": "main_log_route@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "1300": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0",
        "NoOp"
      ]
    },
    "1301": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0"
      ]
    },
    "1302": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1303": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0"
      ]
    },
    "1305": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "0"
      ]
    },
    "1306": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "1307": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1308": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1311": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "op": "callsub log_uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1314": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1315": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1317": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1320": {
      "block": "main_no_args_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0"
      ]
    },
    "1322": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0",
        "NoOp"
      ]
    },
    "1323": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0"
      ]
    },
    "1324": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1325": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "1327": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "0"
      ]
    },
    "1328": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%18#0"
      ]
    },
    "1329": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1330": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.no_args",
      "op": "callsub no_args",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "1333": {
      "op": "itob",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "1334": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "1335": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "1337": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "1338": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1340": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1342": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1345": {
      "block": "main_echo_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "1347": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "NoOp"
      ]
    },
    "1348": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "1349": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1350": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "1352": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1353": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "1354": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1355": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "1358": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "1361": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "1362": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "1364": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "1365": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1367": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1369": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1372": {
      "block": "main_is_a_b_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1374": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1375": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1376": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1377": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1379": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "1380": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1381": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1382": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "1385": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "1388": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "1391": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1394": {
      "callsub": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "op": "callsub is_a_b",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1398": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1400": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1403": {
      "block": "main_bare_routing@26",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%165#0"
      ]
    },
    "1405": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%165#0",
        "0"
      ]
    },
    "1406": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%165#0"
      ]
    },
    "1408": {
      "op": "match main___algopy_default_create@27",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1412": {
      "op": "b main_switch_case_default@28"
    },
    "1415": {
      "block": "main_switch_case_default@28",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@29"
    },
    "1418": {
      "block": "main_switch_case_next@29",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@30"
    },
    "1421": {
      "block": "main___algopy_default_create@27",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%166#0"
      ]
    },
    "1423": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%166#0",
        "0"
      ]
    },
    "1424": {
      "op": "==",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%167#0"
      ]
    },
    "1425": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1426": {
      "op": "b main_block@32"
    },
    "1429": {
      "block": "main_block@32",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@33"
    },
    "1432": {
      "block": "main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@33",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__%0#0"
      ]
    },
    "1433": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1435": {
      "op": "b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31"
    },
    "1438": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.is_a_b",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "is_a_b",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1441": {
      "op": "b is_a_b_block@0"
    },
    "1444": {
      "block": "is_a_b_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1446": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "1449": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1450": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "1451": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "1453": {
      "op": "pushbytes 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "1456": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1457": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "1458": {
      "retsub": true,
      "op": "retsub"
    },
    "1459": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1462": {
      "op": "b echo_block@0"
    },
    "1465": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1466": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1467": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1468": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1471": {
      "op": "bytec_2 // \"echo: \"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"echo: \""
      ]
    },
    "1472": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1473": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)"
      ]
    },
    "1475": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "total_length%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0"
      ]
    },
    "1476": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)"
      ]
    },
    "1478": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "total_length%0#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "1479": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value#0 (copy)",
        "2",
        "total_length%0#0"
      ]
    },
    "1481": {
      "op": "substring3",
      "defined_out": [
        "extract_to_end%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "extract_to_end%0#0"
      ]
    },
    "1482": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0"
      ]
    },
    "1483": {
      "op": "dup",
      "defined_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ],
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1484": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "total_length%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "1485": {
      "op": "cover 1",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "1487": {
      "op": "dup",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1488": {
      "op": "intc_2 // 2",
      "stack_out": [
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "1489": {
      "op": "uncover 3",
      "stack_out": [
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "1491": {
      "op": "substring3",
      "defined_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "1492": {
      "op": "len",
      "defined_out": [
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0"
      ]
    },
    "1493": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "len%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "1494": {
      "op": "/",
      "defined_out": [
        "concat%0#0",
        "div_floor%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "1495": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1496": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1499": {
      "op": "uncover 1",
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "1501": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "1502": {
      "op": "uncover 2",
      "stack_out": [
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "1504": {
      "op": "replace3",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1505": {
      "retsub": true,
      "op": "retsub"
    },
    "1506": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.no_args",
      "params": {},
      "block": "no_args",
      "stack_in": [],
      "op": "b no_args_block@0"
    },
    "1509": {
      "block": "no_args_block@0",
      "stack_in": [],
      "op": "pushint 42 // 42",
      "defined_out": [
        "42"
      ],
      "stack_out": [
        "42"
      ]
    },
    "1511": {
      "retsub": true,
      "op": "retsub"
    },
    "1512": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint64",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint64",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1515": {
      "op": "b log_uint64_block@0"
    },
    "1518": {
      "block": "log_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1520": {
      "op": "log",
      "stack_out": []
    },
    "1521": {
      "retsub": true,
      "op": "retsub"
    },
    "1522": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_uint512",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_uint512",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1525": {
      "op": "b log_uint512_block@0"
    },
    "1528": {
      "block": "log_uint512_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1530": {
      "op": "log",
      "stack_out": []
    },
    "1531": {
      "retsub": true,
      "op": "retsub"
    },
    "1532": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_string",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1535": {
      "op": "b log_string_block@0"
    },
    "1538": {
      "block": "log_string_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1540": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1543": {
      "op": "log",
      "stack_out": []
    },
    "1544": {
      "retsub": true,
      "op": "retsub"
    },
    "1545": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bool",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bool",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1548": {
      "op": "b log_bool_block@0"
    },
    "1551": {
      "block": "log_bool_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1553": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0"
      ]
    },
    "1554": {
      "op": "getbit",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1555": {
      "op": "pushbytes 0x46616c7365",
      "defined_out": [
        "0x46616c7365",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365"
      ]
    },
    "1562": {
      "op": "pushbytes 0x54727565",
      "defined_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x46616c7365",
        "0x54727565"
      ]
    },
    "1568": {
      "op": "uncover 2",
      "stack_out": [
        "0x46616c7365",
        "0x54727565",
        "tmp%0#0"
      ]
    },
    "1570": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "1571": {
      "op": "log",
      "stack_out": []
    },
    "1572": {
      "retsub": true,
      "op": "retsub"
    },
    "1573": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "log_bytes",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1576": {
      "op": "b log_bytes_block@0"
    },
    "1579": {
      "block": "log_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1581": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1584": {
      "op": "log",
      "stack_out": []
    },
    "1585": {
      "retsub": true,
      "op": "retsub"
    },
    "1586": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_asset_account_app",
      "params": {
        "asset#0": "uint64",
        "account#0": "bytes",
        "app#0": "uint64"
      },
      "block": "log_asset_account_app",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1589": {
      "op": "b log_asset_account_app_block@0"
    },
    "1592": {
      "block": "log_asset_account_app_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1594": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1596": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1597": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "\"\""
      ]
    },
    "1598": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1599": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account#0 (copy)"
      ]
    },
    "1601": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1602": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "tmp%1#0",
        "\"\""
      ]
    },
    "1603": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1604": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "app#0 (copy)"
      ]
    },
    "1606": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "tmp%2#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1608": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "1609": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1610": {
      "op": "log",
      "stack_out": []
    },
    "1611": {
      "retsub": true,
      "op": "retsub"
    },
    "1612": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.log_address",
      "params": {
        "address#0": "bytes"
      },
      "block": "log_address",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1615": {
      "op": "b log_address_block@0"
    },
    "1618": {
      "block": "log_address_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "1620": {
      "op": "log",
      "stack_out": []
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_string",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_string",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1625": {
      "op": "b echo_native_string_block@0"
    },
    "1628": {
      "block": "echo_native_string_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1629": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "value#0 (copy)"
      ]
    },
    "1631": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1632": {
      "retsub": true,
      "op": "retsub"
    },
    "1633": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_bytes",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_bytes",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1636": {
      "op": "b echo_native_bytes_block@0"
    },
    "1639": {
      "block": "echo_native_bytes_block@0",
      "stack_in": [],
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20"
      ],
      "stack_out": [
        "0x6563686f3a20"
      ]
    },
    "1640": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ],
      "stack_out": [
        "0x6563686f3a20",
        "value#0 (copy)"
      ]
    },
    "1642": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1643": {
      "retsub": true,
      "op": "retsub"
    },
    "1644": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_uint64",
      "params": {
        "value#0": "uint64"
      },
      "block": "echo_native_uint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1647": {
      "op": "b echo_native_uint64_block@0"
    },
    "1650": {
      "block": "echo_native_uint64_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1652": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1653": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1654": {
      "retsub": true,
      "op": "retsub"
    },
    "1655": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_biguint",
      "params": {
        "value#0": "bytes"
      },
      "block": "echo_native_biguint",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1658": {
      "op": "b echo_native_biguint_block@0"
    },
    "1661": {
      "block": "echo_native_biguint_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1663": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "0x01"
      ]
    },
    "1664": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1665": {
      "retsub": true,
      "op": "retsub"
    },
    "1666": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_index",
      "params": {
        "asset#0": "uint64",
        "app#0": "uint64",
        "acc#0": "bytes"
      },
      "block": "echo_resource_by_index",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1669": {
      "op": "b echo_resource_by_index_block@0"
    },
    "1672": {
      "block": "echo_resource_by_index_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1675": {
      "op": "btoi",
      "defined_out": [
        "asset_idx#0"
      ],
      "stack_out": [
        "asset_idx#0"
      ]
    },
    "1676": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1678": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "asset#0 (copy)"
      ]
    },
    "1680": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1681": {
      "error": "expected asset to be passed by index",
      "op": "assert // expected asset to be passed by index",
      "stack_out": []
    },
    "1682": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1685": {
      "op": "btoi",
      "defined_out": [
        "app_idx#0"
      ],
      "stack_out": [
        "app_idx#0"
      ]
    },
    "1686": {
      "op": "txnas Applications",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1688": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "app#0 (copy)"
      ]
    },
    "1690": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1691": {
      "error": "expected application to be passed by index",
      "op": "assert // expected application to be passed by index",
      "stack_out": []
    },
    "1692": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1695": {
      "op": "btoi",
      "defined_out": [
        "acc_idx#0"
      ],
      "stack_out": [
        "acc_idx#0"
      ]
    },
    "1696": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1698": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "acc#0 (copy)"
      ]
    },
    "1700": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1701": {
      "error": "expected account to be passed by index",
      "op": "assert // expected account to be passed by index",
      "stack_out": []
    },
    "1702": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1704": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "1706": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "1708": {
      "retsub": true,
      "op": "retsub"
    },
    "1709": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_resource_by_value",
      "params": {
        "asset#0": "uint64",
        "app#0": "uint64",
        "acc#0": "bytes"
      },
      "block": "echo_resource_by_value",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "1712": {
      "op": "b echo_resource_by_value_block@0"
    },
    "1715": {
      "block": "echo_resource_by_value_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1718": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "1719": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset#0 (copy)",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "asset#0 (copy)"
      ]
    },
    "1721": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1722": {
      "error": "expected asset to be passed by value",
      "op": "assert // expected asset to be passed by value",
      "stack_out": []
    },
    "1723": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1726": {
      "op": "btoi",
      "defined_out": [
        "app_id#0"
      ],
      "stack_out": [
        "app_id#0"
      ]
    },
    "1727": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)",
        "app_id#0"
      ],
      "stack_out": [
        "app_id#0",
        "app#0 (copy)"
      ]
    },
    "1729": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1730": {
      "error": "expected application to be passed by value",
      "op": "assert // expected application to be passed by value",
      "stack_out": []
    },
    "1731": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0"
      ]
    },
    "1734": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "acc#0 (copy)"
      ]
    },
    "1736": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1737": {
      "error": "expected account to be passed by value",
      "op": "assert // expected account to be passed by value",
      "stack_out": []
    },
    "1738": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1740": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "1742": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)",
        "app#0 (copy)",
        "acc#0 (copy)"
      ]
    },
    "1744": {
      "retsub": true,
      "op": "retsub"
    },
    "1745": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_native_tuple",
      "params": {
        "s#0": "bytes",
        "b#0": "bytes",
        "u#0": "uint64",
        "bu#0": "bytes"
      },
      "block": "echo_native_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "1748": {
      "op": "b echo_native_tuple_block@0"
    },
    "1751": {
      "block": "echo_native_tuple_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \""
      ],
      "stack_out": [
        "\"echo: \""
      ]
    },
    "1752": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ],
      "stack_out": [
        "\"echo: \"",
        "s#0 (copy)"
      ]
    },
    "1754": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1755": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20"
      ]
    },
    "1756": {
      "op": "frame_dig -3",
      "defined_out": [
        "0x6563686f3a20",
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x6563686f3a20",
        "b#0 (copy)"
      ]
    },
    "1758": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1759": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ]
    },
    "1761": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "u#0 (copy)",
        "1"
      ]
    },
    "1762": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1763": {
      "op": "frame_dig -1",
      "defined_out": [
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)"
      ]
    },
    "1765": {
      "op": "bytec_3 // 0x01",
      "defined_out": [
        "0x01",
        "bu#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "bu#0 (copy)",
        "0x01"
      ]
    },
    "1766": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1767": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1769": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1771": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1773": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1775": {
      "retsub": true,
      "op": "retsub"
    },
    "1776": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_nested_tuple",
      "params": {
        "tuple_of_tuples.0.0#0": "bytes",
        "tuple_of_tuples.0.1#0": "bytes",
        "tuple_of_tuples.1.0#0": "uint64",
        "tuple_of_tuples.1.1#0": "bytes",
        "tuple_of_tuples.1.2#0": "bytes"
      },
      "block": "echo_nested_tuple",
      "stack_in": [],
      "op": "proto 5 5"
    },
    "1779": {
      "op": "b echo_nested_tuple_block@0"
    },
    "1782": {
      "block": "echo_nested_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -5",
      "defined_out": [
        "string#0"
      ],
      "stack_out": [
        "string#0"
      ]
    },
    "1784": {
      "op": "frame_dig -4",
      "defined_out": [
        "string#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ],
      "stack_out": [
        "string#0",
        "tuple_of_tuples.0.1#0 (copy)"
      ]
    },
    "1786": {
      "op": "cover 1",
      "defined_out": [
        "arc4_string#0",
        "string#0"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0"
      ]
    },
    "1788": {
      "op": "frame_dig -3",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ],
      "stack_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.0#0 (copy)"
      ]
    },
    "1790": {
      "op": "cover 2",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1792": {
      "op": "frame_dig -2",
      "defined_out": [
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.1#0 (copy)",
        "u64#0"
      ],
      "stack_out": [
        "u64#0",
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.1#0 (copy)"
      ]
    },
    "1794": {
      "op": "cover 3",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1796": {
      "op": "frame_dig -1",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "string#0",
        "tuple_of_tuples.1.2#0 (copy)",
        "u64#0"
      ],
      "stack_out": [
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "tuple_of_tuples.1.2#0 (copy)"
      ]
    },
    "1798": {
      "op": "cover 4",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0"
      ]
    },
    "1800": {
      "op": "bytec_2 // \"echo: \"",
      "defined_out": [
        "\"echo: \"",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "string#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "string#0",
        "\"echo: \""
      ]
    },
    "1801": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \"",
        "string#0"
      ]
    },
    "1803": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%0#0"
      ]
    },
    "1804": {
      "op": "cover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0"
      ]
    },
    "1806": {
      "op": "bytec_2 // \"echo: \"",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "\"echo: \""
      ]
    },
    "1807": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length%0#0"
      ]
    },
    "1808": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1809": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1812": {
      "op": "bytec_2 // \"echo: \"",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "aggregate%length_uint16%0#0",
        "\"echo: \""
      ]
    },
    "1813": {
      "op": "concat",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0"
      ]
    },
    "1814": {
      "op": "dig 1",
      "defined_out": [
        "arc4_string#0",
        "arc4_string#0 (copy)",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0",
        "arc4_string#0 (copy)"
      ]
    },
    "1816": {
      "op": "len",
      "defined_out": [
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "total_length%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "tmp%1#0",
        "total_length%0#0"
      ]
    },
    "1817": {
      "op": "cover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "arc4_string#0",
        "total_length%0#0",
        "tmp%1#0"
      ]
    },
    "1819": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%0#0",
        "tmp%1#0",
        "arc4_string#0"
      ]
    },
    "1821": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arc4_string#0",
        "arc4_u64#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%1#0",
        "total_length%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%0#0",
        "tmp%1#0",
        "arc4_string#0",
        "2"
      ]
    },
    "1822": {
      "op": "uncover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "tmp%1#0",
        "arc4_string#0",
        "2",
        "total_length%0#0"
      ]
    },
    "1824": {
      "op": "substring3",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "extract_to_end%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "tmp%1#0",
        "extract_to_end%0#0"
      ]
    },
    "1825": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0"
      ]
    },
    "1826": {
      "op": "dup",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1827": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "total_length%1#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "total_length%1#0"
      ]
    },
    "1828": {
      "op": "cover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0"
      ]
    },
    "1830": {
      "op": "dup",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)"
      ]
    },
    "1831": {
      "op": "intc_2 // 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "total_length%1#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2"
      ]
    },
    "1832": {
      "op": "uncover 3",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "concat%0#0 (copy)",
        "2",
        "total_length%1#0"
      ]
    },
    "1834": {
      "op": "substring3",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "extract_to_end%1#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "extract_to_end%1#0"
      ]
    },
    "1835": {
      "op": "len",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "len%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "len%0#0"
      ]
    },
    "1836": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "len%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "len%0#0",
        "1"
      ]
    },
    "1837": {
      "op": "/",
      "defined_out": [
        "arc4_u64#0",
        "bytez#0",
        "concat%0#0",
        "div_floor%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "div_floor%0#0"
      ]
    },
    "1838": {
      "op": "itob",
      "defined_out": [
        "arc4_u64#0",
        "as_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1839": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_u64#0",
        "as_u16_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1842": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_u16_bytes%0#0",
        "concat%0#0"
      ]
    },
    "1844": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arc4_u64#0",
        "as_u16_bytes%0#0",
        "bytez#0",
        "concat%0#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "0"
      ]
    },
    "1845": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "concat%0#0",
        "0",
        "as_u16_bytes%0#0"
      ]
    },
    "1847": {
      "op": "replace3",
      "defined_out": [
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "u64#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "u64#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1848": {
      "op": "uncover 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "u64#0"
      ]
    },
    "1850": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "u64#0",
        "1"
      ]
    },
    "1851": {
      "op": "+",
      "defined_out": [
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "arc4_u64#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "1852": {
      "op": "uncover 2",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "arc4_u64#0"
      ]
    },
    "1854": {
      "op": "btoi",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1855": {
      "op": "intc_1 // 1",
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "1"
      ]
    },
    "1856": {
      "op": "+",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "1857": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1858": {
      "op": "bytec_2 // 0x6563686f3a20",
      "defined_out": [
        "0x6563686f3a20",
        "as_Encoded(len+utf8[])%0#0",
        "bytez#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "bytez#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "0x6563686f3a20"
      ]
    },
    "1859": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "0x6563686f3a20",
        "bytez#0"
      ]
    },
    "1861": {
      "op": "concat",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1862": {
      "op": "uncover 4",
      "stack_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "1864": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "1866": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0"
      ]
    },
    "1868": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%6#0",
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1870": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "as_Encoded(len+utf8[])%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1872": {
      "retsub": true,
      "op": "retsub"
    },
    "1873": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.return_args_after_14th",
      "params": {
        "_a1#0": "bytes",
        "_a2#0": "bytes",
        "_a3#0": "bytes",
        "_a4#0": "bytes",
        "_a5#0": "bytes",
        "_a6#0": "bytes",
        "_a7#0": "bytes",
        "_a8#0": "bytes",
        "_a9#0": "bytes",
        "_a10#0": "bytes",
        "_a11#0": "bytes",
        "_a12#0": "bytes",
        "_a13#0": "bytes",
        "_a14#0": "bytes",
        "a15#0": "bytes",
        "a16#0": "bytes",
        "a17#0": "bytes",
        "a18#0": "bytes",
        "a19#0": "bytes",
        "a20#0": "bytes"
      },
      "block": "return_args_after_14th",
      "stack_in": [],
      "op": "proto 20 1"
    },
    "1876": {
      "op": "b return_args_after_14th_block@0"
    },
    "1879": {
      "block": "return_args_after_14th_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1880": {
      "op": "frame_dig -6",
      "defined_out": [
        "0x",
        "a15#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a15#0 (copy)"
      ]
    },
    "1882": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "1883": {
      "op": "frame_dig -5",
      "defined_out": [
        "a16#0 (copy)",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "a16#0 (copy)"
      ]
    },
    "1885": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1886": {
      "op": "frame_dig -4",
      "defined_out": [
        "a17#0 (copy)",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "a17#0 (copy)"
      ]
    },
    "1888": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1889": {
      "op": "frame_dig -3",
      "defined_out": [
        "a18#0 (copy)",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "a18#0 (copy)"
      ]
    },
    "1891": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0"
      ]
    },
    "1892": {
      "op": "frame_dig -2",
      "defined_out": [
        "a19#0 (copy)",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%head%3#0",
        "a19#0 (copy)"
      ]
    },
    "1894": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0"
      ]
    },
    "1895": {
      "op": "frame_dig -1",
      "defined_out": [
        "a20#0 (copy)",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0",
        "a20#0 (copy)"
      ]
    },
    "1897": {
      "op": "concat",
      "defined_out": [
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1898": {
      "op": "txna ApplicationArgs 15",
      "defined_out": [
        "last_arg#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0"
      ]
    },
    "1901": {
      "op": "dig 1",
      "defined_out": [
        "last_arg#0",
        "last_arg#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%1#0",
        "last_arg#0 (copy)"
      ]
    },
    "1903": {
      "op": "==",
      "defined_out": [
        "last_arg#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "last_arg#0",
        "tmp%2#0"
      ]
    },
    "1904": {
      "op": "assert",
      "stack_out": [
        "last_arg#0"
      ]
    },
    "1905": {
      "op": "dup",
      "stack_out": [
        "last_arg#0",
        "last_arg#0 (copy)"
      ]
    },
    "1906": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length%0#0"
      ]
    },
    "1907": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1908": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ],
      "stack_out": [
        "last_arg#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1911": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "last_arg#0"
      ]
    },
    "1913": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1914": {
      "retsub": true,
      "op": "retsub"
    },
    "1915": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.logs_are_equal",
      "params": {
        "log_1.level#0": "uint64",
        "log_1.message#0": "bytes",
        "log_2.level#0": "uint64",
        "log_2.message#0": "bytes"
      },
      "block": "logs_are_equal",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1918": {
      "op": "b logs_are_equal_block@0"
    },
    "1921": {
      "block": "logs_are_equal_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "log_1.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)"
      ]
    },
    "1923": {
      "op": "frame_dig -2",
      "defined_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ],
      "stack_out": [
        "log_1.level#0 (copy)",
        "log_2.level#0 (copy)"
      ]
    },
    "1925": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1926": {
      "op": "frame_dig -3",
      "defined_out": [
        "log_1.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)"
      ]
    },
    "1928": {
      "op": "frame_dig -1",
      "defined_out": [
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "log_1.message#0 (copy)",
        "log_2.message#0 (copy)"
      ]
    },
    "1930": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1931": {
      "op": "&&",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1932": {
      "retsub": true,
      "op": "retsub"
    },
    "1933": {
      "subroutine": "test_cases.typed_abi_call.logger.Logger.echo_log_struct",
      "params": {
        "log#0": "bytes"
      },
      "block": "echo_log_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1936": {
      "op": "b echo_log_struct_block@0"
    },
    "1939": {
      "block": "echo_log_struct_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "log#0 (copy)"
      ],
      "stack_out": [
        "log#0 (copy)"
      ]
    },
    "1941": {
      "retsub": true,
      "op": "retsub"
    }
  }
}