main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L31
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@28
    block@2: // abi_routing_L31
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@26
    block@3: // call_NoOp_L31
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "is_a_b(byte[],byte[])void" => block@4, method "echo(string)string" => block@5, method "no_args()uint64" => block@6, method "log(uint64)void" => block@7, method "log(uint512)void" => block@8, method "log(string)void" => block@9, method "log(bool)void" => block@10, method "log(byte[])void" => block@11, method "log(uint64,address,uint64)void" => block@12, method "log(address)void" => block@13, method "echo_native_string(string)string" => block@14, method "echo_native_bytes(byte[])byte[]" => block@15, method "echo_native_uint64(uint64)uint64" => block@16, method "echo_native_biguint(uint512)uint512" => block@17, method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)" => block@18, method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)" => block@19, method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)" => block@20, method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))" => block@21, method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]" => block@22, method "logs_are_equal((uint64,string),(uint64,string))bool" => block@23, method "echo_log_struct((uint64,string))(uint64,string)" => block@24, * => block@25}
    block@4: // is_a_b_route_L32
        test_cases.typed_abi_call.logger.Logger.is_a_b[routing]()
        goto block@25
    block@5: // echo_route_L37
        test_cases.typed_abi_call.logger.Logger.echo[routing]()
        goto block@25
    block@6: // no_args_route_L41
        test_cases.typed_abi_call.logger.Logger.no_args[routing]()
        goto block@25
    block@7: // log_route_L45
        test_cases.typed_abi_call.logger.Logger.log_uint64[routing]()
        goto block@25
    block@8: // log_route_L49
        test_cases.typed_abi_call.logger.Logger.log_uint512[routing]()
        goto block@25
    block@9: // log_route_L53
        test_cases.typed_abi_call.logger.Logger.log_string[routing]()
        goto block@25
    block@10: // log_route_L57
        test_cases.typed_abi_call.logger.Logger.log_bool[routing]()
        goto block@25
    block@11: // log_route_L61
        test_cases.typed_abi_call.logger.Logger.log_bytes[routing]()
        goto block@25
    block@12: // log_route_L65
        test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]()
        goto block@25
    block@13: // log_route_L69
        test_cases.typed_abi_call.logger.Logger.log_address[routing]()
        goto block@25
    block@14: // echo_native_string_route_L73
        test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]()
        goto block@25
    block@15: // echo_native_bytes_route_L77
        test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]()
        goto block@25
    block@16: // echo_native_uint64_route_L81
        test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]()
        goto block@25
    block@17: // echo_native_biguint_route_L85
        test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]()
        goto block@25
    block@18: // echo_resource_by_index_route_L89
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]()
        goto block@25
    block@19: // echo_resource_by_value_route_L103
        test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]()
        goto block@25
    block@20: // echo_native_tuple_route_L117
        test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]()
        goto block@25
    block@21: // echo_nested_tuple_route_L123
        test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]()
        goto block@25
    block@22: // return_args_after_14th_route_L134
        test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]()
        goto block@25
    block@23: // logs_are_equal_route_L162
        test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]()
        goto block@25
    block@24: // echo_log_struct_route_L166
        test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]()
        goto block@25
    block@25: // switch_case_next_L31
        goto block@27
    block@26: // create_NoOp_L31
        goto block@27
    block@27: // after_if_else_L31
        goto block@29
    block@28: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@31
    block@31: // L1
        goto block@32
    block@32: // after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create_L1
        exit 1u
    block@29: // after_if_else_L31
        exit 0u
    block@30: // after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.is_a_b[routing]() -> void:
    block@0: // L32
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%1#0)
        test_cases.typed_abi_call.logger.Logger.is_a_b(tmp%1#0, tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo[routing]() -> void:
    block@0: // L37
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: Encoded(len+utf8[]) = test_cases.typed_abi_call.logger.Logger.echo(as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.no_args[routing]() -> void:
    block@0: // L41
        let tmp%0#0: uint64 = test_cases.typed_abi_call.logger.Logger.no_args()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint64[routing]() -> void:
    block@0: // L45
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_uint64(as_Encoded(uint64)%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint512[routing]() -> void:
    block@0: // L49
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_uint512(as_Encoded(uint512)%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_string[routing]() -> void:
    block@0: // L53
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_string(as_Encoded(len+utf8[])%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bool[routing]() -> void:
    block@0: // L57
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_bool(as_Encoded(bool8)%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_bytes[routing]() -> void:
    block@0: // L61
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_bytes(as_Encoded(len+uint8[])%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]() -> void:
    block@0: // L65
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%2#0
        let tmp%3#0: account = as_Encoded(uint8[32])%0#0
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%4#0
        let tmp%5#0: uint64 = (btoi as_Encoded(uint64)%1#0)
        test_cases.typed_abi_call.logger.Logger.log_asset_account_app(tmp%1#0, tmp%3#0, tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.log_address[routing]() -> void:
    block@0: // L69
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        test_cases.typed_abi_call.logger.Logger.log_address(as_Encoded(uint8[32])%0#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]() -> void:
    block@0: // L73
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: string = test_cases.typed_abi_call.logger.Logger.echo_native_string(tmp%1#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]() -> void:
    block@0: // L77
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%1#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%2#0: bytes = test_cases.typed_abi_call.logger.Logger.echo_native_bytes(tmp%1#0)
        let aggregate%length%0#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%2#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]() -> void:
    block@0: // L81
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: uint64 = test_cases.typed_abi_call.logger.Logger.echo_native_uint64(tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]() -> void:
    block@0: // L85
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 64u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%0#0
        let tmp%1#0: biguint = as_Encoded(uint512)%0#0
        let tmp%2#0: biguint = test_cases.typed_abi_call.logger.Logger.echo_native_biguint(tmp%1#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%2#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%2#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%3#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]() -> void:
    block@0: // L89
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint8
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint8)%0#0)
        let tmp%2#0: uint64 = ((txnas Assets) tmp%1#0)
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%3#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint8
        let as_Encoded(uint8)%1#0: Encoded(uint8) = tmp%3#0
        let tmp%4#0: uint64 = (btoi as_Encoded(uint8)%1#0)
        let tmp%5#0: uint64 = ((txnas Applications) tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%6#0)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint8
        let as_Encoded(uint8)%2#0: Encoded(uint8) = tmp%6#0
        let tmp%7#0: uint64 = (btoi as_Encoded(uint8)%2#0)
        let tmp%8#0: account = ((txnas Accounts) tmp%7#0)
        let (tmp%9#0: uint64, tmp%10#0: uint64, tmp%11#0: account) = test_cases.typed_abi_call.logger.Logger.echo_resource_by_index(tmp%2#0, tmp%5#0, tmp%8#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%11#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%2#0
        let tmp%12#0: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]() -> void:
    block@0: // L103
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%1#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 32u)
        (assert eq%2#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%4#0
        let tmp%5#0: account = as_Encoded(uint8[32])%0#0
        let (tmp%6#0: uint64, tmp%7#0: uint64, tmp%8#0: account) = test_cases.typed_abi_call.logger.Logger.echo_resource_by_value(tmp%1#0, tmp%3#0, tmp%5#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%7#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%8#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0: Encoded(uint64,uint64,uint8[32]) = aggregate%head%2#0
        let tmp%9#0: Encoded(uint64,uint64,uint8[32]) = aggregate%as_Encoded(uint64,uint64,uint8[32])%0#0
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]() -> void:
    block@0: // L117
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%0#0
        let tmp%1#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%4#0
        let tmp%5#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 64u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%6#0
        let tmp%7#0: biguint = as_Encoded(uint512)%0#0
        let (tmp%8#0: string, tmp%9#0: bytes, tmp%10#0: uint64, tmp%11#0: biguint) = test_cases.typed_abi_call.logger.Logger.echo_native_tuple(tmp%1#0, tmp%3#0, tmp%5#0, tmp%7#0)
        let aggregate%length%0#0: uint64 = (len tmp%8#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%8#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 76u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%9#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%9#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%11#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%11#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = aggregate%concat%1#0
        let tmp%12#0: Encoded((len+utf8[]),(len+uint8[]),uint64,uint512) = aggregate%as_Encoded((len+utf8[]),(len+uint8[]),uint64,uint512)%0#0
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]() -> void:
    block@0: // L123
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 4u)
        (assert eq%0#0) // invalid tail pointer at index 0 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tmp%1#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%substring3%0#0
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 4u)
        (assert eq%1#0) // invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 tmp%1#0 0u)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 tmp%1#0 2u)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%1#0 aggregate%extract_uint16%2#0 aggregate%extract_uint16%3#0)
        let tmp%2#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%2#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 4u add%0#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 tmp%1#0 2u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 add%1#0)
        (assert eq%2#0) // invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))
        let aggregate%extract_uint16%4#0: uint64 = (extract_uint16 tmp%1#0 2u)
        let aggregate%len%0#0: uint64 = (len tmp%1#0)
        let aggregate%substring3%2#0: bytes = (substring3 tmp%1#0 aggregate%extract_uint16%4#0 aggregate%len%0#0)
        let tmp%3#0: Encoded(len+utf8[]) = aggregate%substring3%2#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%3#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ add%1#0 add%2#0)
        let add%4#0: uint64 = (+ 4u add%3#0)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%0#0 2u) // on error: invalid tuple encoding
        let eq%3#0: bool = (== extract_uint16%3#0 add%4#0)
        (assert eq%3#0) // invalid tail pointer at index 1 of (((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))
        let aggregate%extract_uint16%5#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let aggregate%len%1#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%3#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%5#0 aggregate%len%1#0)
        let tmp%4#0: Encoded(uint64,uint64,(len+uint8[])) = aggregate%substring3%3#0
        let extract_uint16%4#0: uint64 = (extract_uint16 tmp%4#0 16u) // on error: invalid tuple encoding
        let eq%4#0: bool = (== extract_uint16%4#0 18u)
        (assert eq%4#0) // invalid tail pointer at index 2 of (uint64,uint64,(len+uint8[]))
        let aggregate%extract_uint16%6#0: uint64 = (extract_uint16 tmp%4#0 16u)
        let aggregate%len%2#0: uint64 = (len tmp%4#0)
        let aggregate%substring3%4#0: bytes = (substring3 tmp%4#0 aggregate%extract_uint16%6#0 aggregate%len%2#0)
        let tmp%5#0: Encoded(len+uint8[]) = aggregate%substring3%4#0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 tmp%5#0 0u) // on error: invalid array length header
        let length%2#0: uint64 = aggregate%array_length%2#0
        let mul%2#0: uint64 = (* length%2#0 1u)
        let add%5#0: uint64 = (+ mul%2#0 2u)
        let add%6#0: uint64 = (+ 18u add%5#0)
        let add%7#0: uint64 = (+ add%4#0 add%6#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%5#0: bool = (== len%0#0 add%7#0)
        (assert eq%5#0) // invalid number of bytes for arc4.tuple<arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>,arc4.tuple<arc4.uint64,arc4.uint64,arc4.dynamic_array<arc4.uint8>>>
        let as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = tmp%0#0
        let aggregate%extract_uint16%7#0: uint64 = (extract_uint16 as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 0u)
        let aggregate%extract_uint16%8#0: uint64 = (extract_uint16 as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 2u)
        let aggregate%substring3%5#0: bytes = (substring3 as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%7#0 aggregate%extract_uint16%8#0)
        let aggregate%extract_uint16%9#0: uint64 = (extract_uint16 aggregate%substring3%5#0 0u)
        let aggregate%extract_uint16%10#0: uint64 = (extract_uint16 aggregate%substring3%5#0 2u)
        let aggregate%substring3%6#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%9#0 aggregate%extract_uint16%10#0)
        let aggregate%item0%0#0: bytes = ((extract 2 0) aggregate%substring3%6#0)
        let aggregate%extract_uint16%11#0: uint64 = (extract_uint16 aggregate%substring3%5#0 2u)
        let aggregate%len%3#0: uint64 = (len aggregate%substring3%5#0)
        let aggregate%substring3%7#0: bytes = (substring3 aggregate%substring3%5#0 aggregate%extract_uint16%11#0 aggregate%len%3#0)
        let aggregate%extract_uint16%12#0: uint64 = (extract_uint16 as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 2u)
        let aggregate%len%4#0: uint64 = (len as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0)
        let aggregate%substring3%8#0: bytes = (substring3 as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0 aggregate%extract_uint16%12#0 aggregate%len%4#0)
        let aggregate%extract%0#0: bytes = (extract3 aggregate%substring3%8#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 aggregate%substring3%8#0 8u 8u)
        let aggregate%extract_uint16%13#0: uint64 = (extract_uint16 aggregate%substring3%8#0 16u)
        let aggregate%len%5#0: uint64 = (len aggregate%substring3%8#0)
        let aggregate%substring3%9#0: bytes = (substring3 aggregate%substring3%8#0 aggregate%extract_uint16%13#0 aggregate%len%5#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%9#0)
        let tmp%6#0: string = aggregate%item0%0#0
        let tmp%7#0: Encoded(len+utf8[]) = aggregate%substring3%7#0
        let tmp%8#0: uint64 = aggregate%item0%1#0
        let tmp%9#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%10#0: bytes = aggregate%item2%0#0
        let (tmp%11#0: string, tmp%12#0: Encoded(len+utf8[]), tmp%13#0: uint64, tmp%14#0: Encoded(uint64), tmp%15#0: bytes) = test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0)
        let aggregate%length%0#0: uint64 = (len tmp%11#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%11#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%12#0)
        let aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = aggregate%concat%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%data_length%2#0: uint64 = (len aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let aggregate%current_tail_offset%2#0: uint64 = (+ 4u aggregate%data_length%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%13#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 tmp%14#0)
        let aggregate%length%1#0: uint64 = (len tmp%15#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%15#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 18u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 aggregate%offset_as_uint16%3#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0: Encoded(uint64,uint64,(len+uint8[])) = aggregate%concat%2#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob aggregate%current_tail_offset%2#0)
        let aggregate%offset_as_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%4#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%6#0 aggregate%as_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let aggregate%concat%4#0: bytes = (concat aggregate%concat%3#0 aggregate%as_Encoded(uint64,uint64,(len+uint8[]))%0#0)
        let aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%concat%4#0
        let tmp%16#0: Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[]))) = aggregate%as_Encoded(((len+utf8[]),(len+utf8[])),(uint64,uint64,(len+uint8[])))%0#0
        let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
        (log tmp%17#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]() -> void:
    block@0: // L134
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%1#0
        let tmp%2#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%2#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%2#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%3#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%3#0: Encoded(uint64) = tmp%3#0
        let tmp%4#0: bytes = (txna ApplicationArgs 5)
        let len%4#0: uint64 = (len tmp%4#0)
        let eq%4#0: bool = (== len%4#0 8u)
        (assert eq%4#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%4#0: Encoded(uint64) = tmp%4#0
        let tmp%5#0: bytes = (txna ApplicationArgs 6)
        let len%5#0: uint64 = (len tmp%5#0)
        let eq%5#0: bool = (== len%5#0 8u)
        (assert eq%5#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%5#0: Encoded(uint64) = tmp%5#0
        let tmp%6#0: bytes = (txna ApplicationArgs 7)
        let len%6#0: uint64 = (len tmp%6#0)
        let eq%6#0: bool = (== len%6#0 8u)
        (assert eq%6#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%6#0: Encoded(uint64) = tmp%6#0
        let tmp%7#0: bytes = (txna ApplicationArgs 8)
        let len%7#0: uint64 = (len tmp%7#0)
        let eq%7#0: bool = (== len%7#0 8u)
        (assert eq%7#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%7#0: Encoded(uint64) = tmp%7#0
        let tmp%8#0: bytes = (txna ApplicationArgs 9)
        let len%8#0: uint64 = (len tmp%8#0)
        let eq%8#0: bool = (== len%8#0 8u)
        (assert eq%8#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%8#0: Encoded(uint64) = tmp%8#0
        let tmp%9#0: bytes = (txna ApplicationArgs 10)
        let len%9#0: uint64 = (len tmp%9#0)
        let eq%9#0: bool = (== len%9#0 8u)
        (assert eq%9#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%9#0: Encoded(uint64) = tmp%9#0
        let tmp%10#0: bytes = (txna ApplicationArgs 11)
        let len%10#0: uint64 = (len tmp%10#0)
        let eq%10#0: bool = (== len%10#0 8u)
        (assert eq%10#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%10#0: Encoded(uint64) = tmp%10#0
        let tmp%11#0: bytes = (txna ApplicationArgs 12)
        let len%11#0: uint64 = (len tmp%11#0)
        let eq%11#0: bool = (== len%11#0 8u)
        (assert eq%11#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%11#0: Encoded(uint64) = tmp%11#0
        let tmp%12#0: bytes = (txna ApplicationArgs 13)
        let len%12#0: uint64 = (len tmp%12#0)
        let eq%12#0: bool = (== len%12#0 8u)
        (assert eq%12#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%12#0: Encoded(uint64) = tmp%12#0
        let tmp%13#0: bytes = (txna ApplicationArgs 14)
        let len%13#0: uint64 = (len tmp%13#0)
        let eq%13#0: bool = (== len%13#0 8u)
        (assert eq%13#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%13#0: Encoded(uint64) = tmp%13#0
        let tmp%14#0: bytes = (txna ApplicationArgs 15)
        let len%14#0: uint64 = (len tmp%14#0)
        let eq%14#0: bool = (== len%14#0 9u)
        (assert eq%14#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%14#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0 0u 1u)
        let tuple_item%0#0: Encoded(uint8) = aggregate%extract%0#0
        let tmp%15#0: bytes = (txna ApplicationArgs 15)
        let len%15#0: uint64 = (len tmp%15#0)
        let eq%15#0: bool = (== len%15#0 9u)
        (assert eq%15#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%15#0
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%1#0 1u 1u)
        let tuple_item%1#0: Encoded(uint8) = aggregate%extract%1#0
        let tmp%16#0: bytes = (txna ApplicationArgs 15)
        let len%16#0: uint64 = (len tmp%16#0)
        let eq%16#0: bool = (== len%16#0 9u)
        (assert eq%16#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%16#0
        let aggregate%extract%2#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%2#0 2u 1u)
        let tuple_item%2#0: Encoded(uint8) = aggregate%extract%2#0
        let tmp%17#0: bytes = (txna ApplicationArgs 15)
        let len%17#0: uint64 = (len tmp%17#0)
        let eq%17#0: bool = (== len%17#0 9u)
        (assert eq%17#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%17#0
        let aggregate%extract%3#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%3#0 3u 1u)
        let tuple_item%3#0: Encoded(uint8) = aggregate%extract%3#0
        let tmp%18#0: bytes = (txna ApplicationArgs 15)
        let len%18#0: uint64 = (len tmp%18#0)
        let eq%18#0: bool = (== len%18#0 9u)
        (assert eq%18#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%18#0
        let aggregate%extract%4#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%4#0 4u 4u)
        let tuple_item%4#0: Encoded(uint8,uint8,uint8,uint8) = aggregate%extract%4#0
        let tmp%19#0: bytes = (txna ApplicationArgs 15)
        let len%19#0: uint64 = (len tmp%19#0)
        let eq%19#0: bool = (== len%19#0 9u)
        (assert eq%19#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8,arc4.tuple<arc4.uint8,arc4.uint8,arc4.uint8,arc4.uint8>,arc4.uint8>
        let as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%19#0
        let aggregate%extract%5#0: bytes = (extract3 as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%5#0 8u 1u)
        let tuple_item%5#0: Encoded(uint8) = aggregate%extract%5#0
        let tmp%20#0: Encoded(len+uint8[]) = test_cases.typed_abi_call.logger.Logger.return_args_after_14th(as_Encoded(uint64)%0#0, as_Encoded(uint64)%1#0, as_Encoded(uint64)%2#0, as_Encoded(uint64)%3#0, as_Encoded(uint64)%4#0, as_Encoded(uint64)%5#0, as_Encoded(uint64)%6#0, as_Encoded(uint64)%7#0, as_Encoded(uint64)%8#0, as_Encoded(uint64)%9#0, as_Encoded(uint64)%10#0, as_Encoded(uint64)%11#0, as_Encoded(uint64)%12#0, as_Encoded(uint64)%13#0, tuple_item%0#0, tuple_item%1#0, tuple_item%2#0, tuple_item%3#0, tuple_item%4#0, tuple_item%5#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 tmp%20#0)
        (log tmp%21#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]() -> void:
    block@0: // L162
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 10u add%0#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage
        let as_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = tmp%0#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint64,(len+utf8[]))%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 as_Encoded(uint64,(len+utf8[]))%0#0 8u)
        let aggregate%len%1#0: uint64 = (len as_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 as_Encoded(uint64,(len+utf8[]))%0#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%2#0: uint64 = aggregate%item0%0#0
        let tmp%3#0: string = aggregate%item1%0#0
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%4#0 8u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%1#0 10u)
        (assert eq%2#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 tmp%4#0 8u)
        let aggregate%len%2#0: uint64 = (len tmp%4#0)
        let aggregate%substring3%2#0: bytes = (substring3 tmp%4#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%substring3%2#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%5#0 0u) // on error: invalid array length header
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%2#0: uint64 = (+ mul%1#0 2u)
        let add%3#0: uint64 = (+ 10u add%2#0)
        let len%1#0: uint64 = (len tmp%4#0)
        let eq%3#0: bool = (== len%1#0 add%3#0)
        (assert eq%3#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogMessage
        let as_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = tmp%4#0
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(uint64,(len+utf8[]))%1#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%1#0)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 as_Encoded(uint64,(len+utf8[]))%1#0 8u)
        let aggregate%len%3#0: uint64 = (len as_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%substring3%3#0: bytes = (substring3 as_Encoded(uint64,(len+utf8[]))%1#0 aggregate%extract_uint16%3#0 aggregate%len%3#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%3#0)
        let tmp%6#0: uint64 = aggregate%item0%1#0
        let tmp%7#0: string = aggregate%item1%1#0
        let tmp%8#0: bool = test_cases.typed_abi_call.logger.Logger.logs_are_equal(tmp%2#0, tmp%3#0, tmp%6#0, tmp%7#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%8#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%9#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%10#0: bytes = (concat 0x151f7c75 tmp%9#0)
        (log tmp%10#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]() -> void:
    block@0: // L166
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 10u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(len+utf8[]))
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 8u)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%1#0 0u) // on error: invalid array length header
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let add%1#0: uint64 = (+ 10u add%0#0)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%1#0: bool = (== len%0#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for test_cases.typed_abi_call.logger.LogStruct
        let as_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = tmp%0#0
        let tmp%2#0: Encoded(uint64,(len+utf8[])) = test_cases.typed_abi_call.logger.Logger.echo_log_struct(as_Encoded(uint64,(len+utf8[]))%0#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
    block@0: // L32
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        return 

subroutine test_cases.typed_abi_call.logger.Logger.echo(value: Encoded(len+utf8[])) -> Encoded(len+utf8[]):
    block@0: // L37
        let aggregate%length%0#0: uint64 = (len "echo: ")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "echo: ")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let total_length%0#0: uint64 = (len value#0)
        let extract_to_end%0#0: bytes = (substring3 value#0 2u total_length%0#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%0#0 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%0#0)
        let extract_to_end%1#0: bytes = (substring3 concat%0#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = replace%0#0
        return as_Encoded(len+utf8[])%0#0

subroutine test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
    block@0: // L41
        return 42u

subroutine test_cases.typed_abi_call.logger.Logger.log_uint64(value: Encoded(uint64)) -> void:
    block@0: // L45
        (log value#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_uint512(value: Encoded(uint512)) -> void:
    block@0: // L49
        (log value#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_string(value: Encoded(len+utf8[])) -> void:
    block@0: // L53
        let tmp%0#0: string = ((extract 2 0) value#0)
        (log tmp%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_bool(value: Encoded(bool8)) -> void:
    block@0: // L57
        let aggregate%get_bit%0#0: bool = (getbit value#0 0u)
        let tmp%0#0: bool = aggregate%get_bit%0#0
        let select%0#0: bytes = (select 0x46616c7365 0x54727565 tmp%0#0)
        (log select%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_bytes(value: Encoded(len+uint8[])) -> void:
    block@0: // L61
        let tmp%0#0: bytes = ((extract 2 0) value#0)
        (log tmp%0#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: account, app: uint64) -> void:
    block@0: // L65
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%0#0: bytes = (concat value%0#0 "")
        let tmp%1#0: bytes = (concat tmp%0#0 account#0)
        let tmp%2#0: bytes = (concat tmp%1#0 "")
        let (value%1#0: account, check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
        (log tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.log_address(address: Encoded(uint8[32])) -> void:
    block@0: // L69
        (log address#0)
        return 

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_string(value: string) -> string:
    block@0: // L73
        let tmp%0#0: bytes = (concat "echo: " value#0)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
    block@0: // L77
        let tmp%0#0: bytes = (concat 0x6563686f3a20 value#0)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
    block@0: // L81
        let tmp%0#0: uint64 = (+ value#0 1u)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: biguint) -> biguint:
    block@0: // L85
        let tmp%0#0: biguint = (b+ value#0 1b)
        return tmp%0#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_index(asset: uint64, app: uint64, acc: account) -> <uint64, uint64, account>:
    block@0: // L89
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let asset_idx#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = ((txnas Assets) asset_idx#0)
        let tmp%3#0: bool = (== asset#0 tmp%2#0)
        (assert tmp%3#0) // expected asset to be passed by index
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let tmp%5#0: uint64 = (btoi tmp%4#0)
        let app_idx#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = ((txnas Applications) app_idx#0)
        let tmp%7#0: bool = (== app#0 tmp%6#0)
        (assert tmp%7#0) // expected application to be passed by index
        let tmp%8#0: bytes = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi tmp%8#0)
        let acc_idx#0: uint64 = tmp%9#0
        let tmp%10#0: account = ((txnas Accounts) acc_idx#0)
        let tmp%11#0: bool = (== acc#0 tmp%10#0)
        (assert tmp%11#0) // expected account to be passed by index
        return asset#0 app#0 acc#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_resource_by_value(asset: uint64, app: uint64, acc: account) -> <uint64, uint64, account>:
    block@0: // L103
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        let asset_id#0: uint64 = tmp%1#0
        let tmp%2#0: bool = (== asset#0 asset_id#0)
        (assert tmp%2#0) // expected asset to be passed by value
        let tmp%3#0: bytes = (txna ApplicationArgs 2)
        let tmp%4#0: uint64 = (btoi tmp%3#0)
        let app_id#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (== app#0 app_id#0)
        (assert tmp%5#0) // expected application to be passed by value
        let tmp%6#0: bytes = (txna ApplicationArgs 3)
        let address#0: bytes = tmp%6#0
        let tmp%7#0: bool = (== acc#0 address#0)
        (assert tmp%7#0) // expected account to be passed by value
        return asset#0 app#0 acc#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: string, b: bytes, u: uint64, bu: biguint) -> <string, bytes, uint64, biguint>:
    block@0: // L117
        let tmp%0#0: bytes = (concat "echo: " s#0)
        let tmp%1#0: bytes = (concat 0x6563686f3a20 b#0)
        let tmp%2#0: uint64 = (+ u#0 1u)
        let tmp%3#0: biguint = (b+ bu#0 1b)
        return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: string, tuple_of_tuples.0.1: Encoded(len+utf8[]), tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: Encoded(uint64), tuple_of_tuples.1.2: bytes) -> <string, Encoded(len+utf8[]), uint64, Encoded(uint64), bytes>:
    block@0: // L123
        let string#0: string = tuple_of_tuples.0.0#0
        let arc4_string#0: Encoded(len+utf8[]) = tuple_of_tuples.0.1#0
        let u64#0: uint64 = tuple_of_tuples.1.0#0
        let arc4_u64#0: Encoded(uint64) = tuple_of_tuples.1.1#0
        let bytez#0: bytes = tuple_of_tuples.1.2#0
        let tmp%0#0: bytes = (concat "echo: " string#0)
        let aggregate%length%0#0: uint64 = (len "echo: ")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "echo: ")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let total_length%0#0: uint64 = (len arc4_string#0)
        let extract_to_end%0#0: bytes = (substring3 arc4_string#0 2u total_length%0#0)
        let concat%0#0: Encoded(len+utf8[]) = (concat tmp%1#0 extract_to_end%0#0) // on error: max array length exceeded
        let total_length%1#0: uint64 = (len concat%0#0)
        let extract_to_end%1#0: bytes = (substring3 concat%0#0 2u total_length%1#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = replace%0#0
        let tmp%2#0: uint64 = (+ u64#0 1u)
        let tmp%3#0: uint64 = (btoi arc4_u64#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%6#0: bytes = (concat 0x6563686f3a20 bytez#0)
        return tmp%0#0 as_Encoded(len+utf8[])%0#0 tmp%2#0 tmp%5#0 tmp%6#0

subroutine test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: Encoded(uint64), _a2: Encoded(uint64), _a3: Encoded(uint64), _a4: Encoded(uint64), _a5: Encoded(uint64), _a6: Encoded(uint64), _a7: Encoded(uint64), _a8: Encoded(uint64), _a9: Encoded(uint64), _a10: Encoded(uint64), _a11: Encoded(uint64), _a12: Encoded(uint64), _a13: Encoded(uint64), _a14: Encoded(uint64), a15: Encoded(uint8), a16: Encoded(uint8), a17: Encoded(uint8), a18: Encoded(uint8), a19: Encoded(uint8,uint8,uint8,uint8), a20: Encoded(uint8)) -> Encoded(len+uint8[]):
    block@0: // L134
        let aggregate%head%0#0: bytes = (concat 0x a15#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 a16#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 a17#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 a18#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 a19#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 a20#0)
        let aggregate%as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = aggregate%head%5#0
        let tmp%0#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = aggregate%as_Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)%0#0
        let last_arg#0: Encoded(uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 15)
        let tmp%2#0: bool = (== tmp%1#0 last_arg#0)
        (assert tmp%2#0)
        let aggregate%length%0#0: uint64 = (len last_arg#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 last_arg#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%3#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        return tmp%3#0

subroutine test_cases.typed_abi_call.logger.Logger.logs_are_equal(log_1.level: uint64, log_1.message: string, log_2.level: uint64, log_2.message: string) -> bool:
    block@0: // L162
        let tmp%0#0: bool = (== log_1.level#0 log_2.level#0)
        let tmp%1#0: bool = (== log_1.message#0 log_2.message#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        return tmp%2#0

subroutine test_cases.typed_abi_call.logger.Logger.echo_log_struct(log: Encoded(uint64,(len+utf8[]))) -> Encoded(uint64,(len+utf8[])):
    block@0: // L166
        return log#0