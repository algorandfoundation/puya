main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L23
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@23
    block@2: // abi_routing_L23
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_is_a_b(byte[],byte[],application)void" => block@3, method "test_method_selector_kinds(application)void" => block@4, method "test_method_overload(application)void" => block@5, method "test_arg_conversion(application)void" => block@6, method "test_15plus_args(application)void" => block@7, method "test_void(application)void" => block@8, method "test_ref_types(application,asset)void" => block@9, method "test_account_to_address(application)void" => block@10, method "test_native_string(application)void" => block@11, method "test_native_bytes(application)void" => block@12, method "test_native_uint64(application)void" => block@13, method "test_native_biguint(application)void" => block@14, method "test_native_tuple(application)void" => block@15, method "test_native_tuple_method_ref(application)void" => block@16, method "test_nested_tuples(application)void" => block@17, method "test_no_args(application)void" => block@18, method "test_named_tuples(application)void" => block@19, method "test_arc4_struct(application)void" => block@20, * => block@21}
    block@3: // test_is_a_b_route_L24
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%10#0: uint64 = ((txnas Applications) tmp%9#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(tmp%7#0, tmp%8#0, tmp%10#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@4: // test_method_selector_kinds_route_L33
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let tmp%16#0: uint64 = ((txnas Applications) tmp%15#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%16#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@5: // test_method_overload_route_L47
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let tmp%22#0: uint64 = ((txnas Applications) tmp%21#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%22#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@6: // test_arg_conversion_route_L62
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%27#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let tmp%28#0: uint64 = ((txnas Applications) tmp%27#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%28#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@7: // test_15plus_args_route_L79
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%33#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let tmp%34#0: uint64 = ((txnas Applications) tmp%33#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%34#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@8: // test_void_route_L107
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let tmp%40#0: uint64 = ((txnas Applications) tmp%39#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%40#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@9: // test_ref_types_route_L121
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (== tmp%41#0 NoOp)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let tmp%46#0: uint64 = ((txnas Applications) tmp%45#0)
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%47#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let tmp%48#0: uint64 = ((txnas Assets) tmp%47#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%46#0, tmp%48#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@10: // test_account_to_address_route_L135
        let tmp%49#0: uint64 = (txn OnCompletion)
        let tmp%50#0: bool = (== tmp%49#0 NoOp)
        (assert tmp%50#0) // OnCompletion is not NoOp
        let tmp%51#0: uint64 = (txn ApplicationID)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        (assert tmp%52#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%8#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%53#0: uint64 = (btoi reinterpret_Encoded(uint8)%8#0)
        let tmp%54#0: uint64 = ((txnas Applications) tmp%53#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(tmp%54#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@11: // test_native_string_route_L144
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (== tmp%55#0 NoOp)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        let tmp%58#0: bool = (!= tmp%57#0 0u)
        (assert tmp%58#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%9#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%59#0: uint64 = (btoi reinterpret_Encoded(uint8)%9#0)
        let tmp%60#0: uint64 = ((txnas Applications) tmp%59#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%60#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@12: // test_native_bytes_route_L155
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (== tmp%61#0 NoOp)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%64#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%10#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%65#0: uint64 = (btoi reinterpret_Encoded(uint8)%10#0)
        let tmp%66#0: uint64 = ((txnas Applications) tmp%65#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%66#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@13: // test_native_uint64_route_L168
        let tmp%67#0: uint64 = (txn OnCompletion)
        let tmp%68#0: bool = (== tmp%67#0 NoOp)
        (assert tmp%68#0) // OnCompletion is not NoOp
        let tmp%69#0: uint64 = (txn ApplicationID)
        let tmp%70#0: bool = (!= tmp%69#0 0u)
        (assert tmp%70#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%11#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%71#0: uint64 = (btoi reinterpret_Encoded(uint8)%11#0)
        let tmp%72#0: uint64 = ((txnas Applications) tmp%71#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%72#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@14: // test_native_biguint_route_L179
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (== tmp%73#0 NoOp)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%76#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%12#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = (btoi reinterpret_Encoded(uint8)%12#0)
        let tmp%78#0: uint64 = ((txnas Applications) tmp%77#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%78#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@15: // test_native_tuple_route_L190
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (== tmp%79#0 NoOp)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        let tmp%82#0: bool = (!= tmp%81#0 0u)
        (assert tmp%82#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%13#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%83#0: uint64 = (btoi reinterpret_Encoded(uint8)%13#0)
        let tmp%84#0: uint64 = ((txnas Applications) tmp%83#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%84#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@16: // test_native_tuple_method_ref_route_L249
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (== tmp%85#0 NoOp)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        let tmp%88#0: bool = (!= tmp%87#0 0u)
        (assert tmp%88#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%14#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%89#0: uint64 = (btoi reinterpret_Encoded(uint8)%14#0)
        let tmp%90#0: uint64 = ((txnas Applications) tmp%89#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(tmp%90#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@17: // test_nested_tuples_route_L299
        let tmp%91#0: uint64 = (txn OnCompletion)
        let tmp%92#0: bool = (== tmp%91#0 NoOp)
        (assert tmp%92#0) // OnCompletion is not NoOp
        let tmp%93#0: uint64 = (txn ApplicationID)
        let tmp%94#0: bool = (!= tmp%93#0 0u)
        (assert tmp%94#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%15#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%95#0: uint64 = (btoi reinterpret_Encoded(uint8)%15#0)
        let tmp%96#0: uint64 = ((txnas Applications) tmp%95#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(tmp%96#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@18: // test_no_args_route_L345
        let tmp%97#0: uint64 = (txn OnCompletion)
        let tmp%98#0: bool = (== tmp%97#0 NoOp)
        (assert tmp%98#0) // OnCompletion is not NoOp
        let tmp%99#0: uint64 = (txn ApplicationID)
        let tmp%100#0: bool = (!= tmp%99#0 0u)
        (assert tmp%100#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%16#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%101#0: uint64 = (btoi reinterpret_Encoded(uint8)%16#0)
        let tmp%102#0: uint64 = ((txnas Applications) tmp%101#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(tmp%102#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@19: // test_named_tuples_route_L355
        let tmp%103#0: uint64 = (txn OnCompletion)
        let tmp%104#0: bool = (== tmp%103#0 NoOp)
        (assert tmp%104#0) // OnCompletion is not NoOp
        let tmp%105#0: uint64 = (txn ApplicationID)
        let tmp%106#0: bool = (!= tmp%105#0 0u)
        (assert tmp%106#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%17#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%107#0: uint64 = (btoi reinterpret_Encoded(uint8)%17#0)
        let tmp%108#0: uint64 = ((txnas Applications) tmp%107#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(tmp%108#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@20: // test_arc4_struct_route_L372
        let tmp%109#0: uint64 = (txn OnCompletion)
        let tmp%110#0: bool = (== tmp%109#0 NoOp)
        (assert tmp%110#0) // OnCompletion is not NoOp
        let tmp%111#0: uint64 = (txn ApplicationID)
        let tmp%112#0: bool = (!= tmp%111#0 0u)
        (assert tmp%112#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%18#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%113#0: uint64 = (btoi reinterpret_Encoded(uint8)%18#0)
        let tmp%114#0: uint64 = ((txnas Applications) tmp%113#0)
        test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(tmp%114#0)
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@21: // switch_case_default_L23
        goto block@22
    block@22: // switch_case_next_L23
        goto block@27
    block@23: // bare_routing_L23
        let tmp%115#0: uint64 = (txn OnCompletion)
        switch tmp%115#0 {0u => block@24, * => block@25}
    block@24: // __algopy_default_create_L1
        let tmp%116#0: uint64 = (txn ApplicationID)
        let tmp%117#0: bool = (== tmp%116#0 0u)
        (assert tmp%117#0) // can only call when creating
        goto block@29
    block@29: // L1
        goto block@30
    block@30: // after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create_L1
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@25: // switch_case_default_L23
        goto block@26
    block@26: // switch_case_next_L23
        goto block@27
    block@27: // after_if_else_L23
        let test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__%0#0
        goto block@28
    block@28: // after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L24
        itxn_begin
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L26
        itxn_submit
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
    block@0: // L33
        let tmp%0#0: bool = (== method "echo(string)string" method "echo(string)string")
        (assert tmp%0#0)
        itxn_begin
        let length%0#0: uint64 = (len 0x7465737431)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x7465737431)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L36
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
        (assert tmp%3#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%1#0
        let length%1#0: uint64 = (len 0x6563686f3a207465737431)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x6563686f3a207465737431)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let tmp%4#0: bool = (== result#0 as_Encoded(len+utf8[])%1#0)
        (assert tmp%4#0)
        itxn_begin
        let length%2#0: uint64 = (len 0x7465737432)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x7465737432)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L38
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%5#0
        let length%3#0: uint64 = (len 0x6563686f3a207465737432)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6563686f3a207465737432)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tmp%8#0: bool = (== result#0 as_Encoded(len+utf8[])%3#0)
        (assert tmp%8#0)
        itxn_begin
        let length%4#0: uint64 = (len 0x7465737433)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x7465737433)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%4#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%4#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L40
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%9#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%9#0
        let length%5#0: uint64 = (len 0x6563686f3a207465737433)
        let as_bytes%5#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x6563686f3a207465737433)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = encoded_value%5#0
        let tmp%12#0: bool = (== result#0 as_Encoded(len+utf8[])%5#0)
        (assert tmp%12#0)
        itxn_begin
        let length%6#0: uint64 = (len 0x7465737434)
        let as_bytes%6#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x7465737434)
        let as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = encoded_value%6#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%6#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L42
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%13#0
        let length%7#0: uint64 = (len 0x6563686f3a207465737434)
        let as_bytes%7#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x6563686f3a207465737434)
        let as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = encoded_value%7#0
        let tmp%16#0: bool = (== result#0 as_Encoded(len+utf8[])%7#0)
        (assert tmp%16#0)
        itxn_begin
        let length%8#0: uint64 = (len 0x7465737435)
        let as_bytes%8#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 0x7465737435)
        let as_Encoded(len+utf8[])%8#0: Encoded(len+utf8[]) = encoded_value%8#0
        let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%8#0
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L44
        itxn_submit
        let awst_tmp%4#0: bytes = (itxn LastLog)
        let tmp%17#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%4#0)
        let tmp%18#0: bytes = ((extract 0 4) awst_tmp%4#0)
        let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
        (assert tmp%19#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+utf8[]) = tmp%17#0
        let length%9#0: uint64 = (len 0x6563686f3a207465737435)
        let as_bytes%9#0: bytes[8] = (itob length%9#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 0x6563686f3a207465737435)
        let as_Encoded(len+utf8[])%9#0: Encoded(len+utf8[]) = encoded_value%9#0
        let tmp%20#0: bool = (== result#0 as_Encoded(len+utf8[])%9#0)
        (assert tmp%20#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
    block@0: // L47
        itxn_begin
        let length%0#0: uint64 = (len 0x7479706564202b2069676e6f7265)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x7479706564202b2069676e6f7265)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L49
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%3#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%4#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
        (assert tmp%5#0) // application log value is not the result of an ABI return
        let length%1#0: uint64 = (len 0x6563686f3a207479706564202b2069676e6f7265)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x6563686f3a207479706564202b2069676e6f7265)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let tmp%6#0: bool = (== tmp%3#0 as_Encoded(len+utf8[])%1#0)
        (assert tmp%6#0)
        itxn_begin
        let length%2#0: uint64 = (len 0x756e7479706564202b2069676e6f7265)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x756e7479706564202b2069676e6f7265)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L52
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let length%3#0: uint64 = (len 0x6563686f3a20756e7479706564202b2069676e6f7265)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6563686f3a20756e7479706564202b2069676e6f7265)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tmp%10#0: bool = (== tmp%7#0 as_Encoded(len+utf8[])%3#0)
        (assert tmp%10#0)
        itxn_begin
        let length%4#0: uint64 = (len 0x7475706c65)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x7475706c65)
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%4#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%4#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L55
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%11#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%3#0)
        let tmp%12#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
        (assert tmp%13#0) // application log value is not the result of an ABI return
        let result.0#0: Encoded(len+utf8[]) = tmp%11#0
        let result.1.LastLog#0: bytes = (itxn LastLog)
        let length%5#0: uint64 = (len 0x6563686f3a207475706c65)
        let as_bytes%5#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x6563686f3a207475706c65)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = encoded_value%5#0
        let tmp%14#0: bool = (== result.0#0 as_Encoded(len+utf8[])%5#0)
        (assert tmp%14#0)
        let tmp%15#0: Encoded(len+utf8[]) = ((extract 4 0) result.1.LastLog#0)
        let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
        let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
        (assert tmp%17#0) // application log value is not the result of an ABI return
        let length%6#0: uint64 = (len 0x6563686f3a207475706c65)
        let as_bytes%6#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x6563686f3a207475706c65)
        let as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = encoded_value%6#0
        let tmp%18#0: bool = (== tmp%15#0 as_Encoded(len+utf8[])%6#0)
        (assert tmp%18#0)
        itxn_begin
        let length%7#0: uint64 = (len 0x756e7479706564)
        let as_bytes%7#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x756e7479706564)
        let as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = encoded_value%7#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%7#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L59
        itxn_submit
        let txn_result.LastLog#0: bytes = (itxn LastLog)
        let tmp%19#0: Encoded(len+utf8[]) = ((extract 4 0) txn_result.LastLog#0)
        let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
        let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
        (assert tmp%21#0) // application log value is not the result of an ABI return
        let length%8#0: uint64 = (len 0x6563686f3a20756e7479706564)
        let as_bytes%8#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 0x6563686f3a20756e7479706564)
        let as_Encoded(len+utf8[])%8#0: Encoded(len+utf8[]) = encoded_value%8#0
        let tmp%22#0: bool = (== tmp%19#0 as_Encoded(len+utf8[])%8#0)
        (assert tmp%22#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
    block@0: // L62
        itxn_begin
        let length%0#0: uint64 = (len 0x636f6e76657274656431)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x636f6e76657274656431)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L64
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x636f6e76657274656431)
        (assert tmp%0#0)
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(uint64)void")
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L67
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes = (itob 2u)
        let tmp%2#0: bool = (== txn.LastLog#0 tmp%1#0)
        (assert tmp%2#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(uint512)void")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L70
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%3#0: bytes = (bzero 56u)
        let tmp%4#0: bytes = (itob 3u)
        let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
        let tmp%6#0: bool = (== txn.LastLog#0 tmp%5#0)
        (assert tmp%6#0)
        itxn_begin
        let length%1#0: uint64 = (len 0x34)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x34)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%1#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L73
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%7#0: bool = (== txn.LastLog#0 0x34)
        (assert tmp%7#0)
        itxn_begin
        let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(bool)void")
        ((itxn_field ApplicationArgs) 0x80)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@5
    block@5: // next_txn_L76
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%8#0: bool = (== txn.LastLog#0 0x54727565)
        (assert tmp%8#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
    block@0: // L79
        itxn_begin
        let encoded%0#0: Encoded((uint8)) = (concat 0x 0xde)
        let encoded%1#0: Encoded((uint8,uint8)) = (concat encoded%0#0 0xad)
        let encoded%2#0: Encoded((uint8,uint8,uint8)) = (concat encoded%1#0 0xbe)
        let encoded%3#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%2#0 0xef)
        let encoded%4#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%3#0 0x)
        let encoded%5#0: Encoded((uint8)) = (concat 0x 0x0f)
        let encoded%6#0: Encoded((uint8,uint8)) = (concat encoded%5#0 0x10)
        let encoded%7#0: Encoded((uint8,uint8,uint8)) = (concat encoded%6#0 0x11)
        let encoded%8#0: Encoded((uint8,uint8,uint8,uint8)) = (concat encoded%7#0 0x12)
        let encoded%9#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8))) = (concat encoded%8#0 encoded%4#0)
        let encoded%10#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (concat encoded%9#0 0x14)
        let encoded%11#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = (concat encoded%10#0 0x)
        let inner_txn_params%0%%param_ApplicationArgs_idx_15#0: Encoded((uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)) = encoded%11#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x0000000000000002)
        ((itxn_field ApplicationArgs) 0x0000000000000003)
        ((itxn_field ApplicationArgs) 0x0000000000000004)
        ((itxn_field ApplicationArgs) 0x0000000000000005)
        ((itxn_field ApplicationArgs) 0x0000000000000006)
        ((itxn_field ApplicationArgs) 0x0000000000000007)
        ((itxn_field ApplicationArgs) 0x0000000000000008)
        ((itxn_field ApplicationArgs) 0x0000000000000009)
        ((itxn_field ApplicationArgs) 0x000000000000000a)
        ((itxn_field ApplicationArgs) 0x000000000000000b)
        ((itxn_field ApplicationArgs) 0x000000000000000c)
        ((itxn_field ApplicationArgs) 0x000000000000000d)
        ((itxn_field ApplicationArgs) 0x000000000000000e)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_15#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L81
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result#0: Encoded(len+uint8[]) = tmp%0#0
        let tmp%3#0: bytes = ((extract 2 0) result#0)
        let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
        (assert tmp%4#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
    block@0: // L107
        itxn_begin
        let length%0#0: uint64 = (len 0x576f726c6431)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x576f726c6431)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L109
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%0#0: bool = (== txn.LastLog#0 0x576f726c6431)
        (assert tmp%0#0)
        itxn_begin
        let length%1#0: uint64 = (len 0x576f726c6432)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x576f726c6432)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L112
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#0: bool = (== txn.LastLog#0 0x576f726c6432)
        (assert tmp%1#0)
        itxn_begin
        let length%2#0: uint64 = (len 0x576f726c6433)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x576f726c6433)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L115
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%2#0: bool = (== txn.LastLog#0 0x576f726c6433)
        (assert tmp%2#0)
        itxn_begin
        let length%3#0: uint64 = (len 0x576f726c6434)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x576f726c6434)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%3#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(string)void")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L118
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== txn.LastLog#0 0x576f726c6434)
        (assert tmp%3#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
    block@0: // L121
        itxn_begin
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_Accounts_idx_0#0: bytes[32] = tmp%0#0
        let inner_txn_params%0%%param_Applications_idx_0#0: uint64 = app#0
        let inner_txn_params%0%%param_Assets_idx_0#0: uint64 = asset#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field Assets) inner_txn_params%0%%param_Assets_idx_0#0)
        ((itxn_field Applications) inner_txn_params%0%%param_Applications_idx_0#0)
        ((itxn_field Accounts) inner_txn_params%0%%param_Accounts_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
        ((itxn_field ApplicationArgs) 0x00)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field ApplicationArgs) 0x01)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L123
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
        (assert check%0#0) // asset exists
        let tmp%1#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
        let (value%1#0: bytes[32], check%1#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%1#0) // application exists
        let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
        let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
        (assert tmp%4#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(app: uint64) -> void:
    block@0: // L135
        itxn_begin
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        let length%0#0: uint64 = (len tmp%0#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(uint8[32]) = as_Encoded(uint8[32])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "log(address)void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L137
        itxn_submit
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%1#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%2#0: bool = (== txn.LastLog#0 tmp%1#0)
        (assert tmp%2#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
    block@0: // L144
        itxn_begin
        let length%0#0: uint64 = (len 0x73)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x73)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L146
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%3#0: bytes = ((extract 2 0) tmp%0#0)
        let result1#0: string = tmp%3#0
        let tmp%4#0: bool = (== result1#0 "echo: s")
        (assert tmp%4#0)
        itxn_begin
        let length%1#0: uint64 = (len "s")
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "s")
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L149
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bytes = ((extract 2 0) tmp%5#0)
        let result2#0: string = tmp%8#0
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        let length%2#0: uint64 = (len 0x73)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x73)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L152
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: Encoded(len+utf8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let tmp%13#0: bytes = ((extract 2 0) tmp%10#0)
        let result3#0: string = tmp%13#0
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
    block@0: // L155
        itxn_begin
        let length%0#0: uint64 = (len 0x62)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x62)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L157
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%3#0: bytes = ((extract 2 0) tmp%0#0)
        let result1#0: bytes = tmp%3#0
        let tmp%4#0: bool = (== result1#0 0x6563686f3a2062)
        (assert tmp%4#0)
        itxn_begin
        let length%1#0: uint64 = (len 0x62)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x62)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L160
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: bytes = ((extract 2 0) tmp%5#0)
        let result2#0: bytes = tmp%8#0
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        let length%2#0: uint64 = (len 0x62)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x62)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = encoded_value%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L163
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: Encoded(len+uint8[]) = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let tmp%13#0: bytes = ((extract 2 0) tmp%10#0)
        let result3#0: bytes = tmp%13#0
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
    block@0: // L168
        itxn_begin
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L170
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%3#0: uint64 = (btoi tmp%0#0)
        let result1#0: uint64 = tmp%3#0
        let tmp%4#0: bool = (== result1#0 2u)
        (assert tmp%4#0)
        itxn_begin
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint64) = as_Encoded(uint64)%0#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L173
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let tmp%8#0: uint64 = (btoi tmp%5#0)
        let result2#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (== result2#0 result1#0)
        (assert tmp%9#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L176
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: Encoded(uint64) = ((extract 4 0) awst_tmp%2#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let tmp%13#0: uint64 = (btoi tmp%10#0)
        let result3#0: uint64 = tmp%13#0
        let tmp%14#0: bool = (== result3#0 result1#0)
        (assert tmp%14#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
    block@0: // L179
        itxn_begin
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L181
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint512) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: biguint = tmp%0#0
        let tmp%3#0: bool = (b== result1#0 3b)
        (assert tmp%3#0)
        itxn_begin
        let value_len%0#0: uint64 = (len 2b)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| 2b bzero%0#0)
        let as_Encoded(uint512)%0#0: Encoded(uint512) = arc4_encoded%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(uint512) = as_Encoded(uint512)%0#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L184
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%4#0: Encoded(uint512) = ((extract 4 0) awst_tmp%1#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let result2#0: biguint = tmp%4#0
        let tmp%7#0: bool = (b== result2#0 result1#0)
        (assert tmp%7#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L187
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%8#0: Encoded(uint512) = ((extract 4 0) awst_tmp%2#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let result3#0: biguint = tmp%8#0
        let tmp%11#0: bool = (b== result3#0 result1#0)
        (assert tmp%11#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
    block@0: // L190
        itxn_begin
        let length%0#0: uint64 = (len 0x7331)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x7331)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x6231)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x6231)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L193
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result1#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = tmp%0#0
        let item_start_offset%0#0: uint64 = (extract_uint16 result1#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 result1#0 2u)
        let item0%0#0: bytes = (substring3 result1#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 result1#0 2u)
        let item_end_offset%1#0: uint64 = (len result1#0)
        let item1%0#0: bytes = (substring3 result1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item2%0#0: bytes = (extract3 result1#0 4u 8u) // on error: Index access is out of bounds
        let item3%0#0: bytes = (extract3 result1#0 12u 64u) // on error: Index access is out of bounds
        let s#0: Encoded(len+utf8[]) = item0%0#0
        let b#0: Encoded(len+uint8[]) = item1%0#0
        let u#0: Encoded(uint64) = item2%0#0
        let bu#0: Encoded(uint512) = item3%0#0
        let tmp%3#0: bytes = ((extract 2 0) s#0)
        let tmp%4#0: bool = (== tmp%3#0 "echo: s1")
        (assert tmp%4#0)
        let tmp%5#0: bytes = ((extract 2 0) b#0)
        let tmp%6#0: bool = (== tmp%5#0 0x6563686f3a206231)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (btoi u#0)
        let tmp%8#0: bool = (== tmp%7#0 2u)
        (assert tmp%8#0)
        let tmp%9#0: bool = (b== bu#0 3b)
        (assert tmp%9#0)
        itxn_begin
        let length%2#0: uint64 = (len "s1")
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "s1")
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%2#0
        let length%3#0: uint64 = (len 0x6231)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6231)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%3#0
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let value_len%0#0: uint64 = (len 2b)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| 2b bzero%0#0)
        let as_Encoded(uint512)%0#0: Encoded(uint512) = arc4_encoded%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_3#0: Encoded(uint64) = as_Encoded(uint64)%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_4#0: Encoded(uint512) = as_Encoded(uint512)%0#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_3#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_4#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L210
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%10#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%1#0)
        let tmp%11#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
        (assert tmp%12#0) // application log value is not the result of an ABI return
        let result2#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = tmp%10#0
        let tmp%13#0: bool = (== result1#0 result2#0)
        (assert tmp%13#0)
        itxn_begin
        let length%4#0: uint64 = (len 0x7331)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x7331)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%4#0
        let length%5#0: uint64 = (len 0x6231)
        let as_bytes%5#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x6231)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = encoded_value%5#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L223
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%14#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%2#0)
        let tmp%15#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%16#0: bool = (== tmp%15#0 0x151f7c75)
        (assert tmp%16#0) // application log value is not the result of an ABI return
        let result3#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = tmp%14#0
        let tmp%17#0: bool = (== result1#0 result3#0)
        (assert tmp%17#0)
        itxn_begin
        let length%6#0: uint64 = (len 0x7331)
        let as_bytes%6#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x7331)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%6#0
        let length%7#0: uint64 = (len 0x6231)
        let as_bytes%7#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x6231)
        let as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = encoded_value%7#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%3#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L236
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%18#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%3#0)
        let tmp%19#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%20#0: bool = (== tmp%19#0 0x151f7c75)
        (assert tmp%20#0) // application log value is not the result of an ABI return
        let item_start_offset%2#0: uint64 = (extract_uint16 tmp%18#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 tmp%18#0 2u)
        let encoded_item0%0#0: bytes = (substring3 tmp%18#0 item_start_offset%2#0 item_end_offset%2#0)
        let item0%1#0: bytes = ((extract 2 0) encoded_item0%0#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 tmp%18#0 2u)
        let item_end_offset%3#0: uint64 = (len tmp%18#0)
        let encoded_item1%0#0: bytes = (substring3 tmp%18#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%1#0: bytes = ((extract 2 0) encoded_item1%0#0)
        let encoded_item2%0#0: bytes = (extract3 tmp%18#0 4u 8u) // on error: Index access is out of bounds
        let item2%1#0: uint64 = (btoi encoded_item2%0#0)
        let encoded_item3%0#0: bytes = (extract3 tmp%18#0 12u 64u) // on error: Index access is out of bounds
        let result_native.0#0: string = item0%1#0
        let result_native.1#0: bytes = item1%1#0
        let result_native.2#0: uint64 = item2%1#0
        let result_native.3#0: biguint = encoded_item3%0#0
        let item_start_offset%4#0: uint64 = (extract_uint16 result1#0 0u)
        let item_end_offset%4#0: uint64 = (extract_uint16 result1#0 2u)
        let item0%2#0: bytes = (substring3 result1#0 item_start_offset%4#0 item_end_offset%4#0)
        let tmp%21#0: bytes = ((extract 2 0) item0%2#0)
        let tmp%22#0: bool = (== tmp%21#0 result_native.0#0)
        (assert tmp%22#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 result1#0 2u)
        let item_end_offset%7#0: uint64 = (len result1#0)
        let item1%3#0: bytes = (substring3 result1#0 item_start_offset%7#0 item_end_offset%7#0)
        let tmp%23#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%24#0: bool = (== tmp%23#0 result_native.1#0)
        (assert tmp%24#0)
        let item2%4#0: bytes = (extract3 result1#0 4u 8u) // on error: Index access is out of bounds
        let tmp%25#0: uint64 = (btoi item2%4#0)
        let tmp%26#0: bool = (== tmp%25#0 result_native.2#0)
        (assert tmp%26#0)
        let item3%4#0: bytes = (extract3 result1#0 12u 64u) // on error: Index access is out of bounds
        let tmp%27#0: bool = (b== item3%4#0 result_native.3#0)
        (assert tmp%27#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
    block@0: // L249
        itxn_begin
        let length%0#0: uint64 = (len 0x7331)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x7331)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x6231)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x6231)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%0#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L252
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let encoded_item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item0%0#0: bytes = ((extract 2 0) encoded_item0%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let item_end_offset%1#0: uint64 = (len tmp%0#0)
        let encoded_item1%0#0: bytes = (substring3 tmp%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%0#0: bytes = ((extract 2 0) encoded_item1%0#0)
        let encoded_item2%0#0: bytes = (extract3 tmp%0#0 4u 8u) // on error: Index access is out of bounds
        let item2%0#0: uint64 = (btoi encoded_item2%0#0)
        let encoded_item3%0#0: bytes = (extract3 tmp%0#0 12u 64u) // on error: Index access is out of bounds
        let result.0#0: string = item0%0#0
        let result.1#0: bytes = item1%0#0
        let result.2#0: uint64 = item2%0#0
        let result.3#0: biguint = encoded_item3%0#0
        let s#0: string = result.0#0
        let b#0: bytes = result.1#0
        let u#0: uint64 = result.2#0
        let bu#0: biguint = result.3#0
        let tmp%3#0: bool = (== s#0 "echo: s1")
        (assert tmp%3#0)
        let tmp%4#0: bool = (== b#0 0x6563686f3a206231)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== u#0 2u)
        (assert tmp%5#0)
        let tmp%6#0: bool = (b== bu#0 3b)
        (assert tmp%6#0)
        itxn_begin
        let length%2#0: uint64 = (len "s1")
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "s1")
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%2#0
        let length%3#0: uint64 = (len 0x6231)
        let as_bytes%3#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6231)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%3#0
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let value_len%0#0: uint64 = (len 2b)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| 2b bzero%0#0)
        let as_Encoded(uint512)%0#0: Encoded(uint512) = arc4_encoded%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%1#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_3#0: Encoded(uint64) = as_Encoded(uint64)%0#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_4#0: Encoded(uint512) = as_Encoded(uint512)%0#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_3#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_4#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L267
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%7#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%1#0)
        let tmp%8#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
        (assert tmp%9#0) // application log value is not the result of an ABI return
        let item_start_offset%2#0: uint64 = (extract_uint16 tmp%7#0 0u)
        let item_end_offset%2#0: uint64 = (extract_uint16 tmp%7#0 2u)
        let encoded_item0%1#0: bytes = (substring3 tmp%7#0 item_start_offset%2#0 item_end_offset%2#0)
        let item0%1#0: bytes = ((extract 2 0) encoded_item0%1#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 tmp%7#0 2u)
        let item_end_offset%3#0: uint64 = (len tmp%7#0)
        let encoded_item1%1#0: bytes = (substring3 tmp%7#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%1#0: bytes = ((extract 2 0) encoded_item1%1#0)
        let encoded_item2%1#0: bytes = (extract3 tmp%7#0 4u 8u) // on error: Index access is out of bounds
        let item2%1#0: uint64 = (btoi encoded_item2%1#0)
        let encoded_item3%1#0: bytes = (extract3 tmp%7#0 12u 64u) // on error: Index access is out of bounds
        let result_2.0#0: string = item0%1#0
        let result_2.1#0: bytes = item1%1#0
        let result_2.2#0: uint64 = item2%1#0
        let result_2.3#0: biguint = encoded_item3%1#0
        let tmp%10#0: bool = (== result_2.0#0 result.0#0)
        let tmp%11#0: bool = (== result_2.1#0 result.1#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (== result_2.2#0 result.2#0)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        let tmp%15#0: bool = (b== result_2.3#0 result.3#0)
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // expected native arguments to give the same result
        itxn_begin
        let length%4#0: uint64 = (len 0x7331)
        let as_bytes%4#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x7331)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%4#0
        let length%5#0: uint64 = (len 0x6231)
        let as_bytes%5#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x6231)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = encoded_value%5#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%2#0
        let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%2#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L278
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%17#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%2#0)
        let tmp%18#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
        (assert tmp%19#0) // application log value is not the result of an ABI return
        let item_start_offset%4#0: uint64 = (extract_uint16 tmp%17#0 0u)
        let item_end_offset%4#0: uint64 = (extract_uint16 tmp%17#0 2u)
        let encoded_item0%2#0: bytes = (substring3 tmp%17#0 item_start_offset%4#0 item_end_offset%4#0)
        let item0%2#0: bytes = ((extract 2 0) encoded_item0%2#0)
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%17#0 2u)
        let item_end_offset%5#0: uint64 = (len tmp%17#0)
        let encoded_item1%2#0: bytes = (substring3 tmp%17#0 item_start_offset%5#0 item_end_offset%5#0)
        let item1%2#0: bytes = ((extract 2 0) encoded_item1%2#0)
        let encoded_item2%2#0: bytes = (extract3 tmp%17#0 4u 8u) // on error: Index access is out of bounds
        let item2%2#0: uint64 = (btoi encoded_item2%2#0)
        let encoded_item3%2#0: bytes = (extract3 tmp%17#0 12u 64u) // on error: Index access is out of bounds
        let result_3.0#0: string = item0%2#0
        let result_3.1#0: bytes = item1%2#0
        let result_3.2#0: uint64 = item2%2#0
        let result_3.3#0: biguint = encoded_item3%2#0
        let tmp%20#0: bool = (== result_3.0#0 result.0#0)
        let tmp%21#0: bool = (== result_3.1#0 result.1#0)
        let tmp%22#0: bool = (&& tmp%20#0 tmp%21#0)
        let tmp%23#0: bool = (== result_3.2#0 result.2#0)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        let tmp%25#0: bool = (b== result_3.3#0 result.3#0)
        let tmp%26#0: bool = (&& tmp%24#0 tmp%25#0)
        (assert tmp%26#0) // expected arc4 arguments to give the same result
        itxn_begin
        let length%6#0: uint64 = (len 0x7331)
        let as_bytes%6#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x7331)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%6#0
        let length%7#0: uint64 = (len 0x6231)
        let as_bytes%7#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x6231)
        let as_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = encoded_value%7#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: Encoded(len+utf8[]) = as_Encoded(len+utf8[])%3#0
        let inner_txn_params%3%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = as_Encoded(len+uint8[])%3#0
        let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_2#0)
        ((itxn_field ApplicationArgs) 0x0000000000000001)
        ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@4
    block@4: // next_txn_L289
        itxn_submit
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%27#0: Encoded((len+utf8[],len+uint8[],uint64,uint512)) = ((extract 4 0) awst_tmp%3#0)
        let tmp%28#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
        (assert tmp%29#0) // application log value is not the result of an ABI return
        let item_start_offset%6#0: uint64 = (extract_uint16 tmp%27#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 tmp%27#0 2u)
        let encoded_item0%3#0: bytes = (substring3 tmp%27#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%3#0: bytes = ((extract 2 0) encoded_item0%3#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 tmp%27#0 2u)
        let item_end_offset%7#0: uint64 = (len tmp%27#0)
        let encoded_item1%3#0: bytes = (substring3 tmp%27#0 item_start_offset%7#0 item_end_offset%7#0)
        let item1%3#0: bytes = ((extract 2 0) encoded_item1%3#0)
        let encoded_item2%3#0: bytes = (extract3 tmp%27#0 4u 8u) // on error: Index access is out of bounds
        let item2%3#0: uint64 = (btoi encoded_item2%3#0)
        let encoded_item3%3#0: bytes = (extract3 tmp%27#0 12u 64u) // on error: Index access is out of bounds
        let result_native.0#0: string = item0%3#0
        let result_native.1#0: bytes = item1%3#0
        let result_native.2#0: uint64 = item2%3#0
        let result_native.3#0: biguint = encoded_item3%3#0
        let tmp%30#0: bool = (== result_native.0#0 result.0#0)
        let tmp%31#0: bool = (== result_native.1#0 result.1#0)
        let tmp%32#0: bool = (&& tmp%30#0 tmp%31#0)
        let tmp%33#0: bool = (== result_native.2#0 result.2#0)
        let tmp%34#0: bool = (&& tmp%32#0 tmp%33#0)
        let tmp%35#0: bool = (b== result_native.3#0 result.3#0)
        let tmp%36#0: bool = (&& tmp%34#0 tmp%35#0)
        (assert tmp%36#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
    block@0: // L299
        itxn_begin
        let length%0#0: uint64 = (len 0x7331)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x7331)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let length%1#0: uint64 = (len 0x7332)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x7332)
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let length%2#0: uint64 = (len 0x33)
        let as_bytes%2#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x33)
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = encoded_value%2#0
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let data_length%0#0: uint64 = (len as_Encoded(len+utf8[])%0#0)
        let current_tail_offset%0#0: uint64 = (+ 4u data_length%0#0)
        let as_bytes%3#0: bytes[8] = (itob 4u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%0#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%0#0)
        let tail%1#0: bytes = (concat tail%0#0 as_Encoded(len+utf8[])%1#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded%1#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%0#0 offset_as_uint16%1#0)
        let encoded%2#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%1#0 tail%1#0)
        let tail%2#0: bytes = (concat 0x encoded%2#0)
        let data_length%2#0: uint64 = (len encoded%2#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let as_bytes%5#0: bytes[8] = (itob 4u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%3#0: Encoded(((len+utf8[],len+utf8[]))) = (concat 0x offset_as_uint16%2#0)
        let encoded%4#0: Encoded((uint64)) = (concat 0x 0x0000000000000001)
        let encoded%5#0: Encoded((uint64,uint64)) = (concat encoded%4#0 0x0000000000000002)
        let tail%3#0: bytes = (concat 0x as_Encoded(len+uint8[])%0#0)
        let as_bytes%6#0: bytes[8] = (itob 18u)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%6#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%5#0 offset_as_uint16%3#0)
        let encoded%7#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%6#0 tail%3#0)
        let tail%4#0: bytes = (concat tail%2#0 encoded%7#0)
        let as_bytes%7#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%4#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%8#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%3#0 offset_as_uint16%4#0)
        let encoded%9#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%8#0 tail%4#0)
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = encoded%9#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L302
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%0#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let encoded_item0%0#0: bytes = (substring3 tmp%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 0u)
        let item_end_offset%1#0: uint64 = (extract_uint16 encoded_item0%0#0 2u)
        let encoded_item0%1#0: bytes = (substring3 encoded_item0%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item0%0#0: bytes = ((extract 2 0) encoded_item0%1#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 encoded_item0%0#0 2u)
        let item_end_offset%2#0: uint64 = (len encoded_item0%0#0)
        let item1%0#0: bytes = (substring3 encoded_item0%0#0 item_start_offset%2#0 item_end_offset%2#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 tmp%0#0 2u)
        let item_end_offset%3#0: uint64 = (len tmp%0#0)
        let encoded_item1%0#0: bytes = (substring3 tmp%0#0 item_start_offset%3#0 item_end_offset%3#0)
        let encoded_item0%2#0: bytes = (extract3 encoded_item1%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi encoded_item0%2#0)
        let item1%1#0: bytes = (extract3 encoded_item1%0#0 8u 8u) // on error: Index access is out of bounds
        let item_start_offset%4#0: uint64 = (extract_uint16 encoded_item1%0#0 16u)
        let item_end_offset%4#0: uint64 = (len encoded_item1%0#0)
        let encoded_item2%0#0: bytes = (substring3 encoded_item1%0#0 item_start_offset%4#0 item_end_offset%4#0)
        let item2%0#0: bytes = ((extract 2 0) encoded_item2%0#0)
        let result.0.0#0: string = item0%0#0
        let result.0.1#0: Encoded(len+utf8[]) = item1%0#0
        let result.1.0#0: uint64 = item0%1#0
        let result.1.1#0: Encoded(uint64) = item1%1#0
        let result.1.2#0: bytes = item2%0#0
        let s1#0: string = result.0.0#0
        let s2#0: Encoded(len+utf8[]) = result.0.1#0
        let u64_1#0: uint64 = result.1.0#0
        let u64_2#0: Encoded(uint64) = result.1.1#0
        let bytez#0: bytes = result.1.2#0
        let tmp%3#0: bool = (== s1#0 "echo: s1")
        (assert tmp%3#0)
        let length%3#0: uint64 = (len 0x6563686f3a207332)
        let as_bytes%8#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%8#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6563686f3a207332)
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%3#0
        let tmp%4#0: bool = (== s2#0 as_Encoded(len+utf8[])%2#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (== u64_1#0 2u)
        (assert tmp%5#0)
        let reinterpret_biguint%0#0: biguint = u64_2#0
        let tmp%6#0: bool = (b== reinterpret_biguint%0#0 0x0000000000000003)
        (assert tmp%6#0)
        let tmp%7#0: bool = (== bytez#0 0x6563686f3a2033)
        (assert tmp%7#0)
        itxn_begin
        let length%4#0: uint64 = (len 0x7332)
        let as_bytes%9#0: bytes[8] = (itob length%4#0)
        let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%9#0)
        let encoded_value%4#0: bytes = (concat length_uint16%4#0 0x7332)
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%4#0
        let length%5#0: uint64 = (len "s1")
        let as_bytes%10#0: bytes[8] = (itob length%5#0)
        let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%10#0)
        let encoded_value%5#0: bytes = (concat length_uint16%5#0 "s1")
        let as_Encoded(len+utf8[])%4#0: Encoded(len+utf8[]) = encoded_value%5#0
        let tail%5#0: bytes = (concat 0x as_Encoded(len+utf8[])%4#0)
        let data_length%5#0: uint64 = (len as_Encoded(len+utf8[])%4#0)
        let current_tail_offset%5#0: uint64 = (+ 4u data_length%5#0)
        let as_bytes%11#0: bytes[8] = (itob 4u)
        let offset_as_uint16%5#0: bytes = ((extract 6 2) as_bytes%11#0)
        let encoded%10#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%5#0)
        let tail%6#0: bytes = (concat tail%5#0 as_Encoded(len+utf8[])%3#0)
        let as_bytes%12#0: bytes[8] = (itob current_tail_offset%5#0)
        let offset_as_uint16%6#0: bytes = ((extract 6 2) as_bytes%12#0)
        let encoded%11#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%10#0 offset_as_uint16%6#0)
        let encoded%12#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%11#0 tail%6#0)
        let tail%7#0: bytes = (concat 0x encoded%12#0)
        let data_length%7#0: uint64 = (len encoded%12#0)
        let current_tail_offset%7#0: uint64 = (+ 4u data_length%7#0)
        let as_bytes%13#0: bytes[8] = (itob 4u)
        let offset_as_uint16%7#0: bytes = ((extract 6 2) as_bytes%13#0)
        let encoded%13#0: Encoded(((len+utf8[],len+utf8[]))) = (concat 0x offset_as_uint16%7#0)
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let encoded%14#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%0#0)
        let encoded%15#0: Encoded((uint64,uint64)) = (concat encoded%14#0 0x0000000000000002)
        let length%6#0: uint64 = (len 0x33)
        let as_bytes%14#0: bytes[8] = (itob length%6#0)
        let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%14#0)
        let encoded_value%6#0: bytes = (concat length_uint16%6#0 0x33)
        let as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = encoded_value%6#0
        let tail%8#0: bytes = (concat 0x as_Encoded(len+uint8[])%1#0)
        let as_bytes%15#0: bytes[8] = (itob 18u)
        let offset_as_uint16%8#0: bytes = ((extract 6 2) as_bytes%15#0)
        let encoded%16#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%15#0 offset_as_uint16%8#0)
        let encoded%17#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%16#0 tail%8#0)
        let tail%9#0: bytes = (concat tail%7#0 encoded%17#0)
        let as_bytes%16#0: bytes[8] = (itob current_tail_offset%7#0)
        let offset_as_uint16%9#0: bytes = ((extract 6 2) as_bytes%16#0)
        let encoded%18#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%13#0 offset_as_uint16%9#0)
        let encoded%19#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%18#0 tail%9#0)
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = encoded%19#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L315
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%8#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = ((extract 4 0) awst_tmp%1#0)
        let tmp%9#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
        (assert tmp%10#0) // application log value is not the result of an ABI return
        let item_start_offset%5#0: uint64 = (extract_uint16 tmp%8#0 0u)
        let item_end_offset%5#0: uint64 = (extract_uint16 tmp%8#0 2u)
        let encoded_item0%3#0: bytes = (substring3 tmp%8#0 item_start_offset%5#0 item_end_offset%5#0)
        let item_start_offset%6#0: uint64 = (extract_uint16 encoded_item0%3#0 0u)
        let item_end_offset%6#0: uint64 = (extract_uint16 encoded_item0%3#0 2u)
        let encoded_item0%4#0: bytes = (substring3 encoded_item0%3#0 item_start_offset%6#0 item_end_offset%6#0)
        let item0%2#0: bytes = ((extract 2 0) encoded_item0%4#0)
        let item_start_offset%7#0: uint64 = (extract_uint16 encoded_item0%3#0 2u)
        let item_end_offset%7#0: uint64 = (len encoded_item0%3#0)
        let item1%2#0: bytes = (substring3 encoded_item0%3#0 item_start_offset%7#0 item_end_offset%7#0)
        let item_start_offset%8#0: uint64 = (extract_uint16 tmp%8#0 2u)
        let item_end_offset%8#0: uint64 = (len tmp%8#0)
        let encoded_item1%1#0: bytes = (substring3 tmp%8#0 item_start_offset%8#0 item_end_offset%8#0)
        let encoded_item0%5#0: bytes = (extract3 encoded_item1%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (btoi encoded_item0%5#0)
        let item1%3#0: bytes = (extract3 encoded_item1%1#0 8u 8u) // on error: Index access is out of bounds
        let item_start_offset%9#0: uint64 = (extract_uint16 encoded_item1%1#0 16u)
        let item_end_offset%9#0: uint64 = (len encoded_item1%1#0)
        let encoded_item2%1#0: bytes = (substring3 encoded_item1%1#0 item_start_offset%9#0 item_end_offset%9#0)
        let item2%1#0: bytes = ((extract 2 0) encoded_item2%1#0)
        let result.0.0#0: string = item0%2#0
        let result.0.1#0: Encoded(len+utf8[]) = item1%2#0
        let result.1.0#0: uint64 = item0%3#0
        let result.1.1#0: Encoded(uint64) = item1%3#0
        let result.1.2#0: bytes = item2%1#0
        let s1#0: string = result.0.0#0
        let s2#0: Encoded(len+utf8[]) = result.0.1#0
        let u64_1#0: uint64 = result.1.0#0
        let u64_2#0: Encoded(uint64) = result.1.1#0
        let bytez#0: bytes = result.1.2#0
        let tmp%11#0: bool = (== s1#0 "echo: s1")
        (assert tmp%11#0)
        let length%7#0: uint64 = (len 0x6563686f3a207332)
        let as_bytes%17#0: bytes[8] = (itob length%7#0)
        let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%17#0)
        let encoded_value%7#0: bytes = (concat length_uint16%7#0 0x6563686f3a207332)
        let as_Encoded(len+utf8[])%5#0: Encoded(len+utf8[]) = encoded_value%7#0
        let tmp%12#0: bool = (== s2#0 as_Encoded(len+utf8[])%5#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== u64_1#0 2u)
        (assert tmp%13#0)
        let reinterpret_biguint%2#0: biguint = u64_2#0
        let tmp%14#0: bool = (b== reinterpret_biguint%2#0 0x0000000000000003)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== bytez#0 0x6563686f3a2033)
        (assert tmp%15#0)
        itxn_begin
        let length%8#0: uint64 = (len 0x733162)
        let as_bytes%18#0: bytes[8] = (itob length%8#0)
        let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%18#0)
        let encoded_value%8#0: bytes = (concat length_uint16%8#0 0x733162)
        let as_Encoded(len+utf8[])%6#0: Encoded(len+utf8[]) = encoded_value%8#0
        let length%9#0: uint64 = (len 0x733262)
        let as_bytes%19#0: bytes[8] = (itob length%9#0)
        let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%19#0)
        let encoded_value%9#0: bytes = (concat length_uint16%9#0 0x733262)
        let as_Encoded(len+utf8[])%7#0: Encoded(len+utf8[]) = encoded_value%9#0
        let tail%10#0: bytes = (concat 0x as_Encoded(len+utf8[])%6#0)
        let data_length%10#0: uint64 = (len as_Encoded(len+utf8[])%6#0)
        let current_tail_offset%10#0: uint64 = (+ 4u data_length%10#0)
        let as_bytes%20#0: bytes[8] = (itob 4u)
        let offset_as_uint16%10#0: bytes = ((extract 6 2) as_bytes%20#0)
        let encoded%20#0: Encoded((len+utf8[])) = (concat 0x offset_as_uint16%10#0)
        let tail%11#0: bytes = (concat tail%10#0 as_Encoded(len+utf8[])%7#0)
        let as_bytes%21#0: bytes[8] = (itob current_tail_offset%10#0)
        let offset_as_uint16%11#0: bytes = ((extract 6 2) as_bytes%21#0)
        let encoded%21#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%20#0 offset_as_uint16%11#0)
        let encoded%22#0: Encoded((len+utf8[],len+utf8[])) = (concat encoded%21#0 tail%11#0)
        let length%10#0: uint64 = (len 0x3362)
        let as_bytes%22#0: bytes[8] = (itob length%10#0)
        let length_uint16%10#0: bytes = ((extract 6 2) as_bytes%22#0)
        let encoded_value%10#0: bytes = (concat length_uint16%10#0 0x3362)
        let as_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = encoded_value%10#0
        let encoded%23#0: Encoded((uint64)) = (concat 0x 0x000000000000000b)
        let encoded%24#0: Encoded((uint64,uint64)) = (concat encoded%23#0 0x0000000000000015)
        let tail%12#0: bytes = (concat 0x as_Encoded(len+uint8[])%2#0)
        let as_bytes%23#0: bytes[8] = (itob 18u)
        let offset_as_uint16%12#0: bytes = ((extract 6 2) as_bytes%23#0)
        let encoded%25#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%24#0 offset_as_uint16%12#0)
        let encoded%26#0: Encoded((uint64,uint64,len+uint8[])) = (concat encoded%25#0 tail%12#0)
        let tail%13#0: bytes = (concat 0x encoded%22#0)
        let data_length%13#0: uint64 = (len encoded%22#0)
        let current_tail_offset%13#0: uint64 = (+ 4u data_length%13#0)
        let as_bytes%24#0: bytes[8] = (itob 4u)
        let offset_as_uint16%13#0: bytes = ((extract 6 2) as_bytes%24#0)
        let encoded%27#0: Encoded(((len+utf8[],len+utf8[]))) = (concat 0x offset_as_uint16%13#0)
        let tail%14#0: bytes = (concat tail%13#0 encoded%26#0)
        let as_bytes%25#0: bytes[8] = (itob current_tail_offset%13#0)
        let offset_as_uint16%14#0: bytes = ((extract 6 2) as_bytes%25#0)
        let encoded%28#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%27#0 offset_as_uint16%14#0)
        let encoded%29#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = (concat encoded%28#0 tail%14#0)
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = encoded%29#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L328
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%16#0: Encoded(((len+utf8[],len+utf8[]),(uint64,uint64,len+uint8[]))) = ((extract 4 0) awst_tmp%2#0)
        let tmp%17#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
        (assert tmp%18#0) // application log value is not the result of an ABI return
        let item_start_offset%10#0: uint64 = (extract_uint16 tmp%16#0 0u)
        let item_end_offset%10#0: uint64 = (extract_uint16 tmp%16#0 2u)
        let encoded_item0%6#0: bytes = (substring3 tmp%16#0 item_start_offset%10#0 item_end_offset%10#0)
        let item_start_offset%11#0: uint64 = (extract_uint16 encoded_item0%6#0 0u)
        let item_end_offset%11#0: uint64 = (extract_uint16 encoded_item0%6#0 2u)
        let encoded_item0%7#0: bytes = (substring3 encoded_item0%6#0 item_start_offset%11#0 item_end_offset%11#0)
        let item0%4#0: bytes = ((extract 2 0) encoded_item0%7#0)
        let item_start_offset%12#0: uint64 = (extract_uint16 encoded_item0%6#0 2u)
        let item_end_offset%12#0: uint64 = (len encoded_item0%6#0)
        let item1%4#0: bytes = (substring3 encoded_item0%6#0 item_start_offset%12#0 item_end_offset%12#0)
        let item_start_offset%13#0: uint64 = (extract_uint16 tmp%16#0 2u)
        let item_end_offset%13#0: uint64 = (len tmp%16#0)
        let encoded_item1%2#0: bytes = (substring3 tmp%16#0 item_start_offset%13#0 item_end_offset%13#0)
        let encoded_item0%8#0: bytes = (extract3 encoded_item1%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%5#0: uint64 = (btoi encoded_item0%8#0)
        let item1%5#0: bytes = (extract3 encoded_item1%2#0 8u 8u) // on error: Index access is out of bounds
        let item_start_offset%14#0: uint64 = (extract_uint16 encoded_item1%2#0 16u)
        let item_end_offset%14#0: uint64 = (len encoded_item1%2#0)
        let encoded_item2%2#0: bytes = (substring3 encoded_item1%2#0 item_start_offset%14#0 item_end_offset%14#0)
        let item2%2#0: bytes = ((extract 2 0) encoded_item2%2#0)
        let result.0.0#0: string = item0%4#0
        let result.0.1#0: Encoded(len+utf8[]) = item1%4#0
        let result.1.0#0: uint64 = item0%5#0
        let result.1.1#0: Encoded(uint64) = item1%5#0
        let result.1.2#0: bytes = item2%2#0
        let s1#0: string = result.0.0#0
        let s2#0: Encoded(len+utf8[]) = result.0.1#0
        let u64_1#0: uint64 = result.1.0#0
        let u64_2#0: Encoded(uint64) = result.1.1#0
        let bytez#0: bytes = result.1.2#0
        let tmp%19#0: bool = (== s1#0 "echo: s1b")
        (assert tmp%19#0)
        let length%11#0: uint64 = (len 0x6563686f3a20733262)
        let as_bytes%26#0: bytes[8] = (itob length%11#0)
        let length_uint16%11#0: bytes = ((extract 6 2) as_bytes%26#0)
        let encoded_value%11#0: bytes = (concat length_uint16%11#0 0x6563686f3a20733262)
        let as_Encoded(len+utf8[])%8#0: Encoded(len+utf8[]) = encoded_value%11#0
        let tmp%20#0: bool = (== s2#0 as_Encoded(len+utf8[])%8#0)
        (assert tmp%20#0)
        let tmp%21#0: bool = (== u64_1#0 12u)
        (assert tmp%21#0)
        let reinterpret_biguint%4#0: biguint = u64_2#0
        let tmp%22#0: bool = (b== reinterpret_biguint%4#0 0x0000000000000016)
        (assert tmp%22#0)
        let tmp%23#0: bool = (== bytez#0 0x6563686f3a203362)
        (assert tmp%23#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
    block@0: // L345
        itxn_begin
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L347
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%3#0: uint64 = (btoi tmp%0#0)
        let result#0: uint64 = tmp%3#0
        let tmp%4#0: bool = (== result#0 42u)
        (assert tmp%4#0)
        itxn_begin
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L349
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%5#0: Encoded(uint64) = ((extract 4 0) awst_tmp%1#0)
        let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
        (assert tmp%7#0) // application log value is not the result of an ABI return
        let arc4_result#0: Encoded(uint64) = tmp%5#0
        let reinterpret_biguint%0#0: biguint = arc4_result#0
        let tmp%8#0: bool = (b== reinterpret_biguint%0#0 0x000000000000002a)
        (assert tmp%8#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "no_args()uint64")
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L352
        itxn_submit
        let awst_tmp%2#0: bytes = (itxn LastLog)
        let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
        let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
        (assert tmp%11#0) // application log value is not the result of an ABI return
        let awst_tmp%3#0: bytes = (itxn LastLog)
        let tmp%13#0: Encoded(uint64) = ((extract 4 0) awst_tmp%3#0)
        let tmp%14#0: bytes = ((extract 0 4) awst_tmp%3#0)
        let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
        (assert tmp%15#0) // application log value is not the result of an ABI return
        let reinterpret_biguint%2#0: biguint = tmp%13#0
        let tmp%16#0: bool = (b== reinterpret_biguint%2#0 0x000000000000002a)
        (assert tmp%16#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
    block@0: // L355
        itxn_begin
        let val_as_bytes%0#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let length%0#0: uint64 = (len "log 1")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "log 1")
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let encoded%0#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%0#0)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%1#0: Encoded((uint64,len+utf8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint64,len+utf8[])) = (concat encoded%1#0 tail%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%1#0: Encoded(uint64) = val_as_bytes%1#0
        let length%1#0: uint64 = (len "log 1")
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 "log 1")
        let as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = encoded_value%1#0
        let encoded%3#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%1#0)
        let tail%1#0: bytes = (concat 0x as_Encoded(len+utf8[])%1#0)
        let as_bytes%3#0: bytes[8] = (itob 10u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#0: Encoded((uint64,len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: Encoded((uint64,len+utf8[])) = (concat encoded%4#0 tail%1#0)
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded((uint64,len+utf8[])) = encoded%2#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded((uint64,len+utf8[])) = encoded%5#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L357
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded(bool8) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let tmp%3#0: bool = (getbit tmp%0#0 0u)
        let result#0: bool = tmp%3#0
        (assert result#0)
        itxn_begin
        let val_as_bytes%2#0: bytes[8] = (itob 2u)
        let as_Encoded(uint64)%2#0: Encoded(uint64) = val_as_bytes%2#0
        let length%2#0: uint64 = (len "log 2")
        let as_bytes%4#0: bytes[8] = (itob length%2#0)
        let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%2#0: bytes = (concat length_uint16%2#0 "log 2")
        let as_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = encoded_value%2#0
        let encoded%6#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%2#0)
        let tail%2#0: bytes = (concat 0x as_Encoded(len+utf8[])%2#0)
        let as_bytes%5#0: bytes[8] = (itob 10u)
        let offset_as_uint16%2#0: bytes = ((extract 6 2) as_bytes%5#0)
        let encoded%7#0: Encoded((uint64,len+utf8[])) = (concat encoded%6#0 offset_as_uint16%2#0)
        let encoded%8#0: Encoded((uint64,len+utf8[])) = (concat encoded%7#0 tail%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob 1u)
        let as_Encoded(uint64)%3#0: Encoded(uint64) = val_as_bytes%3#0
        let length%3#0: uint64 = (len "log 1")
        let as_bytes%6#0: bytes[8] = (itob length%3#0)
        let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded_value%3#0: bytes = (concat length_uint16%3#0 "log 1")
        let as_Encoded(len+utf8[])%3#0: Encoded(len+utf8[]) = encoded_value%3#0
        let encoded%9#0: Encoded((uint64)) = (concat 0x as_Encoded(uint64)%3#0)
        let tail%3#0: bytes = (concat 0x as_Encoded(len+utf8[])%3#0)
        let as_bytes%7#0: bytes[8] = (itob 10u)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let encoded%10#0: Encoded((uint64,len+utf8[])) = (concat encoded%9#0 offset_as_uint16%3#0)
        let encoded%11#0: Encoded((uint64,len+utf8[])) = (concat encoded%10#0 tail%3#0)
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded((uint64,len+utf8[])) = encoded%8#0
        let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: Encoded((uint64,len+utf8[])) = encoded%11#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "logs_are_equal((uint64,string),(uint64,string))bool")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L364
        itxn_submit
        let awst_tmp%1#0: bytes = (itxn LastLog)
        let tmp%4#0: Encoded(bool8) = ((extract 4 0) awst_tmp%1#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let tmp%7#0: bool = (getbit tmp%4#0 0u)
        let result#0: bool = tmp%7#0
        let tmp%8#0: bool = (! result#0)
        (assert tmp%8#0)
        return 

subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(app: uint64) -> void:
    block@0: // L372
        let length%0#0: uint64 = (len 0x6c6f672031)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x6c6f672031)
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = encoded_value%0#0
        let encoded%0#0: Encoded((uint64)) = (concat 0x 0x0000000000000001)
        let tail%0#0: bytes = (concat 0x as_Encoded(len+utf8[])%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%1#0: Encoded((uint64,len+utf8[])) = (concat encoded%0#0 offset_as_uint16%0#0)
        let encoded%2#0: Encoded((uint64,len+utf8[])) = (concat encoded%1#0 tail%0#0)
        let log#0: Encoded((uint64,len+utf8[])) = encoded%2#0
        itxn_begin
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded((uint64,len+utf8[])) = log#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "echo_log_struct((uint64,string))(uint64,string)")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L375
        itxn_submit
        let awst_tmp%0#0: bytes = (itxn LastLog)
        let tmp%0#0: Encoded((uint64,len+utf8[])) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
        (assert tmp%2#0) // application log value is not the result of an ABI return
        let result#0: Encoded((uint64,len+utf8[])) = tmp%0#0
        let txn.LastLog#0: bytes = (itxn LastLog)
        let tmp%3#0: bool = (== result#0 log#0)
        (assert tmp%3#0) // expected output to match input
        let tmp%4#0: Encoded((uint64,len+utf8[])) = ((extract 4 0) txn.LastLog#0)
        let tmp%5#0: bytes = ((extract 0 4) txn.LastLog#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let tmp%7#0: bool = (== tmp%4#0 log#0)
        (assert tmp%7#0) // expected output to match input
        return 