#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 8
    bytecblock 0x151f7c75 0x6563686f3a20 0x 0x01
    b block@0

block@0:
    b block@1

block@1:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    intc_2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    intc_3 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@28
    b __algopy_default_create@27

__algopy_default_create@27:
    b block@41

block@41:
    b after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@42

after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@42:
    intc_0 // 1
    return

else_body@28:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    pushbytes 0x9bf81913 // method "echo(string)string"
    pushbytes 0xb862ee19 // method "no_args()uint64"
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    pushbytes 0x6af45930 // method "log(uint512)void"
    pushbytes 0xb4b4334e // method "log(string)void"
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    pushbytes 0xb500e111 // method "log(byte[])void"
    pushbytes 0x46b50faf // method "log(uint64,address,uint64)void"
    pushbytes 0x0437b17e // method "log(address)void"
    pushbytes 0x4a444c77 // method "echo_native_string(string)string"
    pushbytes 0x2659e818 // method "echo_native_bytes(byte[])byte[]"
    pushbytes 0xa9fb6cf1 // method "echo_native_uint64(uint64)uint64"
    pushbytes 0xd8cc363b // method "echo_native_biguint(uint512)uint512"
    pushbytes 0xd6c2ac7f // method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)"
    pushbytes 0x48142d5e // method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    pushbytes 0x16e03919 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    pushbytes 0xab271ce4 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    pushbytes 0xddd07185 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    pushbytes 0xdc4f1992 // method "echo_log_struct((uint64,string))(uint64,string)"
    uncover 21
    match is_a_b_route@3 echo_route@4 no_args_route@5 log_route@6 log_route@7 log_route@8 log_route@9 log_route@10 log_route@11 log_route@12 echo_native_string_route@13 echo_native_bytes_route@14 echo_native_uint64_route@15 echo_native_biguint_route@16 echo_resource_by_index_route@17 echo_resource_by_value_route@18 echo_native_tuple_route@19 echo_nested_tuple_route@20 return_args_after_14th_route@21 logs_are_equal_route@22 echo_log_struct_route@23
    b switch_case_default@24

switch_case_default@24:
    b switch_case_next@25

switch_case_next@25:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

echo_log_struct_route@23:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_log_struct
    b switch_case_next@25

logs_are_equal_route@22:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub logs_are_equal
    b switch_case_next@25

return_args_after_14th_route@21:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub return_args_after_14th
    b switch_case_next@25

echo_nested_tuple_route@20:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_nested_tuple
    b switch_case_next@25

echo_native_tuple_route@19:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_native_tuple
    b switch_case_next@25

echo_resource_by_value_route@18:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_resource_by_value
    b switch_case_next@25

echo_resource_by_index_route@17:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_resource_by_index
    b switch_case_next@25

echo_native_biguint_route@16:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_native_biguint
    b switch_case_next@25

echo_native_uint64_route@15:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_native_uint64
    b switch_case_next@25

echo_native_bytes_route@14:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_native_bytes
    b switch_case_next@25

echo_native_string_route@13:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo_native_string
    b switch_case_next@25

log_route@12:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_address
    b switch_case_next@25

log_route@11:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_asset_account_app
    b switch_case_next@25

log_route@10:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_bytes
    b switch_case_next@25

log_route@9:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_bool
    b switch_case_next@25

log_route@8:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_string
    b switch_case_next@25

log_route@7:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_uint512
    b switch_case_next@25

log_route@6:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub log_uint64
    b switch_case_next@25

no_args_route@5:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub no_args
    b switch_case_next@25

echo_route@4:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub echo
    b switch_case_next@25

is_a_b_route@3:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    callsub is_a_b
    b switch_case_next@25


// test_cases.typed_abi_call.logger.Logger.is_a_b[routing]() -> void:
is_a_b:
    b is_a_b_block@0

is_a_b_block@0:
    // typed_abi_call/logger.py:32
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    callsub test_cases.typed_abi_call.logger.Logger.is_a_b
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo[routing]() -> void:
echo:
    b echo_block@0

echo_block@0:
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.echo
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.no_args[routing]() -> void:
no_args:
    b no_args_block@0

no_args_block@0:
    // typed_abi_call/logger.py:41
    // @arc4.abimethod
    callsub test_cases.typed_abi_call.logger.Logger.no_args
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_uint64[routing]() -> void:
log_uint64:
    b log_uint64_block@0

log_uint64_block@0:
    // typed_abi_call/logger.py:45
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_uint64
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_uint512[routing]() -> void:
log_uint512:
    b log_uint512_block@0

log_uint512_block@0:
    // typed_abi_call/logger.py:49
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_uint512
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_string[routing]() -> void:
log_string:
    b log_string_block@0

log_string_block@0:
    // typed_abi_call/logger.py:53
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_string
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_bool[routing]() -> void:
log_bool:
    b log_bool_block@0

log_bool_block@0:
    // typed_abi_call/logger.py:57
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_bool
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_bytes[routing]() -> void:
log_bytes:
    b log_bytes_block@0

log_bytes_block@0:
    // typed_abi_call/logger.py:61
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_bytes
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app[routing]() -> void:
log_asset_account_app:
    b log_asset_account_app_block@0

log_asset_account_app_block@0:
    // typed_abi_call/logger.py:65
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call.logger.Logger.log_asset_account_app
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.log_address[routing]() -> void:
log_address:
    b log_address_block@0

log_address_block@0:
    // typed_abi_call/logger.py:69
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.log_address
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_string[routing]() -> void:
echo_native_string:
    b echo_native_string_block@0

echo_native_string_block@0:
    // typed_abi_call/logger.py:73
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.typed_abi_call.logger.Logger.echo_native_string
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes[routing]() -> void:
echo_native_bytes:
    b echo_native_bytes_block@0

echo_native_bytes_block@0:
    // typed_abi_call/logger.py:77
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    callsub test_cases.typed_abi_call.logger.Logger.echo_native_bytes
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64[routing]() -> void:
echo_native_uint64:
    b echo_native_uint64_block@0

echo_native_uint64_block@0:
    // typed_abi_call/logger.py:81
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub test_cases.typed_abi_call.logger.Logger.echo_native_uint64
    itob
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint[routing]() -> void:
echo_native_biguint:
    b echo_native_biguint_block@0

echo_native_biguint_block@0:
    // typed_abi_call/logger.py:85
    // @arc4.abimethod
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.echo_native_biguint
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_index[routing]() -> void:
echo_resource_by_index:
    b echo_resource_by_index_block@0

echo_resource_by_index_block@0:
    // typed_abi_call/logger.py:89-91
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call.logger.Logger.echo_resource_by_index
    cover 2
    cover 1
    itob
    bytec_2 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_value[routing]() -> void:
echo_resource_by_value:
    b echo_resource_by_value_block@0

echo_resource_by_value_block@0:
    // typed_abi_call/logger.py:103-105
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call.logger.Logger.echo_resource_by_value
    cover 2
    cover 1
    itob
    bytec_2 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple[routing]() -> void:
echo_native_tuple:
    b echo_native_tuple_block@0

echo_native_tuple_block@0:
    // typed_abi_call/logger.py:117
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.typed_abi_call.logger.Logger.echo_native_tuple
    cover 3
    cover 2
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 76 // 76
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 76 // 76
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 2
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 3
    itob
    concat
    dig 3
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    uncover 4
    b|
    concat
    uncover 1
    concat
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple[routing]() -> void:
echo_nested_tuple:
    b echo_nested_tuple_block@0

echo_nested_tuple_block@0:
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    extract_uint16
    cover 1
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_1 // 0
    extract_uint16
    cover 1
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    cover 1
    dup
    intc_2 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_1 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    intc_3 // 8
    extract3
    cover 1
    dup
    pushint 16 // 16
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    cover 1
    uncover 4
    uncover 4
    uncover 4
    uncover 3
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub test_cases.typed_abi_call.logger.Logger.echo_nested_tuple
    cover 4
    cover 3
    cover 2
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 4 // 4
    +
    uncover 3
    itob
    bytec_2 // 0x
    uncover 1
    concat
    uncover 4
    concat
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    uncover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th[routing]() -> void:
return_args_after_14th:
    b return_args_after_14th_block@0

return_args_after_14th_block@0:
    // typed_abi_call/logger.py:134
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    intc_1 // 0
    intc_0 // 1
    extract3
    txna ApplicationArgs 15
    intc_0 // 1
    intc_0 // 1
    extract3
    txna ApplicationArgs 15
    intc_2 // 2
    intc_0 // 1
    extract3
    txna ApplicationArgs 15
    pushint 3 // 3
    intc_0 // 1
    extract3
    txna ApplicationArgs 15
    pushint 4 // 4
    pushint 4 // 4
    extract3
    txna ApplicationArgs 15
    intc_3 // 8
    intc_0 // 1
    extract3
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    callsub test_cases.typed_abi_call.logger.Logger.return_args_after_14th
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.logs_are_equal[routing]() -> void:
logs_are_equal:
    b logs_are_equal_block@0

logs_are_equal_block@0:
    // typed_abi_call/logger.py:162
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_1 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.typed_abi_call.logger.Logger.logs_are_equal
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.echo_log_struct[routing]() -> void:
echo_log_struct:
    b echo_log_struct_block@0

echo_log_struct_block@0:
    // typed_abi_call/logger.py:166
    // @arc4.abimethod
    txna ApplicationArgs 1
    callsub test_cases.typed_abi_call.logger.Logger.echo_log_struct
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.is_a_b:
    // typed_abi_call/logger.py:32-33
    // @arc4.abimethod
    // def is_a_b(self, a: Bytes, b: Bytes) -> None:
    proto 2 0
    b test_cases.typed_abi_call.logger.Logger.is_a_b_block@0

test_cases.typed_abi_call.logger.Logger.is_a_b_block@0:
    // typed_abi_call/logger.py:34
    // assert a == b"a", "a is not a"
    frame_dig -2
    pushbytes 0x61
    ==
    assert // a is not a
    // typed_abi_call/logger.py:35
    // assert b == b"b", "b is not b"
    frame_dig -1
    pushbytes 0x62
    ==
    assert // b is not b
    retsub


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.echo:
    // typed_abi_call/logger.py:37-38
    // @arc4.abimethod
    // def echo(self, value: arc4.String) -> arc4.String:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_block@0

test_cases.typed_abi_call.logger.Logger.echo_block@0:
    // typed_abi_call/logger.py:39
    // return "echo: " + value
    bytec_1 // "echo: "
    len
    itob
    extract 6 2
    bytec_1 // "echo: "
    concat
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_0 // 1
    /
    itob
    extract 6 2
    uncover 1
    intc_1 // 0
    uncover 2
    replace3
    retsub


// test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
test_cases.typed_abi_call.logger.Logger.no_args:
    b test_cases.typed_abi_call.logger.Logger.no_args_block@0

test_cases.typed_abi_call.logger.Logger.no_args_block@0:
    // typed_abi_call/logger.py:43
    // return UInt64(42)
    pushint 42 // 42
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_uint64:
    // typed_abi_call/logger.py:45-46
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint64(self, value: arc4.UInt64) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_uint64_block@0

test_cases.typed_abi_call.logger.Logger.log_uint64_block@0:
    // typed_abi_call/logger.py:47
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_uint512:
    // typed_abi_call/logger.py:49-50
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint512(self, value: arc4.UInt512) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_uint512_block@0

test_cases.typed_abi_call.logger.Logger.log_uint512_block@0:
    // typed_abi_call/logger.py:51
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_string:
    // typed_abi_call/logger.py:53-54
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_string(self, value: arc4.String) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_string_block@0

test_cases.typed_abi_call.logger.Logger.log_string_block@0:
    // typed_abi_call/logger.py:55
    // log(value.native)  # decode to remove header
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_bool:
    // typed_abi_call/logger.py:57-58
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bool(self, value: arc4.Bool) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_bool_block@0

test_cases.typed_abi_call.logger.Logger.log_bool_block@0:
    // typed_abi_call/logger.py:59
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    frame_dig -1
    intc_1 // 0
    getbit
    pushbytes 0x46616c7365
    pushbytes 0x54727565
    uncover 2
    select
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_bytes:
    // typed_abi_call/logger.py:61-62
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bytes(self, value: arc4.DynamicBytes) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_bytes_block@0

test_cases.typed_abi_call.logger.Logger.log_bytes_block@0:
    // typed_abi_call/logger.py:63
    // log(value.native)
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
test_cases.typed_abi_call.logger.Logger.log_asset_account_app:
    // typed_abi_call/logger.py:65-66
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
    proto 3 0
    b test_cases.typed_abi_call.logger.Logger.log_asset_account_app_block@0

test_cases.typed_abi_call.logger.Logger.log_asset_account_app_block@0:
    // typed_abi_call/logger.py:67
    // log(asset.name, account.bytes, app.address)
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    bytec_2 // ""
    concat
    frame_dig -2
    concat
    bytec_2 // ""
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_address(address: bytes) -> void:
test_cases.typed_abi_call.logger.Logger.log_address:
    // typed_abi_call/logger.py:69-70
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_address(self, address: arc4.Address) -> None:
    proto 1 0
    b test_cases.typed_abi_call.logger.Logger.log_address_block@0

test_cases.typed_abi_call.logger.Logger.log_address_block@0:
    // typed_abi_call/logger.py:71
    // log(address)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.echo_native_string:
    // typed_abi_call/logger.py:73-74
    // @arc4.abimethod
    // def echo_native_string(self, value: String) -> String:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_native_string_block@0

test_cases.typed_abi_call.logger.Logger.echo_native_string_block@0:
    // typed_abi_call/logger.py:75
    // return "echo: " + value
    bytec_1 // "echo: "
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.echo_native_bytes:
    // typed_abi_call/logger.py:77-78
    // @arc4.abimethod
    // def echo_native_bytes(self, value: Bytes) -> Bytes:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_native_bytes_block@0

test_cases.typed_abi_call.logger.Logger.echo_native_bytes_block@0:
    // typed_abi_call/logger.py:79
    // return b"echo: " + value
    bytec_1 // 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
test_cases.typed_abi_call.logger.Logger.echo_native_uint64:
    // typed_abi_call/logger.py:81-82
    // @arc4.abimethod
    // def echo_native_uint64(self, value: UInt64) -> UInt64:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_native_uint64_block@0

test_cases.typed_abi_call.logger.Logger.echo_native_uint64_block@0:
    // typed_abi_call/logger.py:83
    // return value + 1
    frame_dig -1
    intc_0 // 1
    +
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.echo_native_biguint:
    // typed_abi_call/logger.py:85-86
    // @arc4.abimethod
    // def echo_native_biguint(self, value: BigUInt) -> BigUInt:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_native_biguint_block@0

test_cases.typed_abi_call.logger.Logger.echo_native_biguint_block@0:
    // typed_abi_call/logger.py:87
    // return value + 1
    frame_dig -1
    bytec_3 // 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_index(asset: uint64, app: uint64, acc: bytes) -> uint64, uint64, bytes:
test_cases.typed_abi_call.logger.Logger.echo_resource_by_index:
    // typed_abi_call/logger.py:89-94
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    // def echo_resource_by_index(
    //     self, asset: Asset, app: Application, acc: Account
    // ) -> tuple[Asset, Application, Account]:
    proto 3 3
    b test_cases.typed_abi_call.logger.Logger.echo_resource_by_index_block@0

test_cases.typed_abi_call.logger.Logger.echo_resource_by_index_block@0:
    // typed_abi_call/logger.py:95
    // asset_idx = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:96
    // assert asset == Txn.assets(asset_idx), "expected asset to be passed by index"
    txnas Assets
    frame_dig -3
    ==
    assert // expected asset to be passed by index
    // typed_abi_call/logger.py:97
    // app_idx = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:98
    // assert app == Txn.applications(app_idx), "expected application to be passed by index"
    txnas Applications
    frame_dig -2
    ==
    assert // expected application to be passed by index
    // typed_abi_call/logger.py:99
    // acc_idx = op.btoi(Txn.application_args(3))
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/logger.py:100
    // assert acc == Txn.accounts(acc_idx), "expected account to be passed by index"
    txnas Accounts
    frame_dig -1
    ==
    assert // expected account to be passed by index
    // typed_abi_call/logger.py:101
    // return asset, app, acc
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_value(asset: uint64, app: uint64, acc: bytes) -> uint64, uint64, bytes:
test_cases.typed_abi_call.logger.Logger.echo_resource_by_value:
    // typed_abi_call/logger.py:103-108
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    // def echo_resource_by_value(
    //     self, asset: Asset, app: Application, acc: Account
    // ) -> tuple[Asset, Application, Account]:
    proto 3 3
    b test_cases.typed_abi_call.logger.Logger.echo_resource_by_value_block@0

test_cases.typed_abi_call.logger.Logger.echo_resource_by_value_block@0:
    // typed_abi_call/logger.py:109
    // asset_id = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:110
    // assert asset.id == asset_id, "expected asset to be passed by value"
    frame_dig -3
    ==
    assert // expected asset to be passed by value
    // typed_abi_call/logger.py:111
    // app_id = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:112
    // assert app.id == app_id, "expected application to be passed by value"
    frame_dig -2
    ==
    assert // expected application to be passed by value
    // typed_abi_call/logger.py:113
    // address = Txn.application_args(3)
    txna ApplicationArgs 3
    // typed_abi_call/logger.py:114
    // assert acc.bytes == address, "expected account to be passed by value"
    frame_dig -1
    ==
    assert // expected account to be passed by value
    // typed_abi_call/logger.py:115
    // return asset, app, acc
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: bytes) -> bytes, bytes, uint64, bytes:
test_cases.typed_abi_call.logger.Logger.echo_native_tuple:
    // typed_abi_call/logger.py:117-120
    // @arc4.abimethod
    // def echo_native_tuple(
    //     self, s: String, b: Bytes, u: UInt64, bu: BigUInt
    // ) -> tuple[String, Bytes, UInt64, BigUInt]:
    proto 4 4
    b test_cases.typed_abi_call.logger.Logger.echo_native_tuple_block@0

test_cases.typed_abi_call.logger.Logger.echo_native_tuple_block@0:
    // typed_abi_call/logger.py:121
    // return "echo: " + s, b"echo: " + b, u + 1, bu + 1
    bytec_1 // "echo: "
    frame_dig -4
    concat
    bytec_1 // 0x6563686f3a20
    frame_dig -3
    concat
    frame_dig -2
    intc_0 // 1
    +
    frame_dig -1
    bytec_3 // 0x01
    b+
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: bytes, tuple_of_tuples.0.1: bytes, tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: bytes, tuple_of_tuples.1.2: bytes) -> bytes, bytes, uint64, bytes, bytes:
test_cases.typed_abi_call.logger.Logger.echo_nested_tuple:
    // typed_abi_call/logger.py:123-126
    // @arc4.abimethod
    // def echo_nested_tuple(
    //     self, tuple_of_tuples: tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]
    // ) -> tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]:
    proto 5 5
    b test_cases.typed_abi_call.logger.Logger.echo_nested_tuple_block@0

test_cases.typed_abi_call.logger.Logger.echo_nested_tuple_block@0:
    // typed_abi_call/logger.py:127
    // (string, arc4_string), (u64, arc4_u64, bytez) = tuple_of_tuples
    frame_dig -5
    frame_dig -4
    cover 1
    frame_dig -3
    cover 2
    frame_dig -2
    cover 3
    frame_dig -1
    cover 4
    // typed_abi_call/logger.py:128
    // return ("echo: " + string, "echo: " + arc4_string), (
    bytec_1 // "echo: "
    uncover 1
    concat
    cover 3
    bytec_1 // "echo: "
    len
    itob
    extract 6 2
    bytec_1 // "echo: "
    concat
    dig 1
    len
    cover 1
    uncover 2
    intc_2 // 2
    uncover 3
    substring3
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_0 // 1
    /
    itob
    extract 6 2
    uncover 1
    intc_1 // 0
    uncover 2
    replace3
    // typed_abi_call/logger.py:129
    // u64 + 1,
    uncover 1
    intc_0 // 1
    +
    // typed_abi_call/logger.py:130
    // arc4.UInt64(arc4_u64.native + 1),
    uncover 2
    btoi
    intc_0 // 1
    +
    itob
    // typed_abi_call/logger.py:131
    // b"echo: " + bytez,
    bytec_1 // 0x6563686f3a20
    uncover 5
    concat
    // typed_abi_call/logger.py:128-132
    // return ("echo: " + string, "echo: " + arc4_string), (
    //     u64 + 1,
    //     arc4.UInt64(arc4_u64.native + 1),
    //     b"echo: " + bytez,
    // )
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.return_args_after_14th:
    // typed_abi_call/logger.py:134-157
    // @arc4.abimethod
    // def return_args_after_14th(
    //     self,
    //     _a1: arc4.UInt64,
    //     _a2: arc4.UInt64,
    //     _a3: arc4.UInt64,
    //     _a4: arc4.UInt64,
    //     _a5: arc4.UInt64,
    //     _a6: arc4.UInt64,
    //     _a7: arc4.UInt64,
    //     _a8: arc4.UInt64,
    //     _a9: arc4.UInt64,
    //     _a10: arc4.UInt64,
    //     _a11: arc4.UInt64,
    //     _a12: arc4.UInt64,
    //     _a13: arc4.UInt64,
    //     _a14: arc4.UInt64,
    //     a15: arc4.UInt8,
    //     a16: arc4.UInt8,
    //     a17: arc4.UInt8,
    //     a18: arc4.UInt8,
    //     a19: arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.UInt8, arc4.UInt8],
    //     a20: arc4.UInt8,
    // ) -> arc4.DynamicBytes:
    proto 20 1
    b test_cases.typed_abi_call.logger.Logger.return_args_after_14th_block@0

test_cases.typed_abi_call.logger.Logger.return_args_after_14th_block@0:
    // typed_abi_call/logger.py:158
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    bytec_2 // 0x
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // typed_abi_call/logger.py:159
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:160
    // return arc4.DynamicBytes(last_arg.bytes)
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.logs_are_equal(log_1.level: uint64, log_1.message: bytes, log_2.level: uint64, log_2.message: bytes) -> uint64:
test_cases.typed_abi_call.logger.Logger.logs_are_equal:
    // typed_abi_call/logger.py:162-163
    // @arc4.abimethod
    // def logs_are_equal(self, log_1: LogMessage, log_2: LogMessage) -> bool:
    proto 4 1
    b test_cases.typed_abi_call.logger.Logger.logs_are_equal_block@0

test_cases.typed_abi_call.logger.Logger.logs_are_equal_block@0:
    // typed_abi_call/logger.py:164
    // return log_1 == log_2
    frame_dig -4
    frame_dig -2
    ==
    frame_dig -3
    frame_dig -1
    ==
    &&
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_log_struct(log: bytes) -> bytes:
test_cases.typed_abi_call.logger.Logger.echo_log_struct:
    // typed_abi_call/logger.py:166-167
    // @arc4.abimethod
    // def echo_log_struct(self, log: LogStruct) -> LogStruct:
    proto 1 1
    b test_cases.typed_abi_call.logger.Logger.echo_log_struct_block@0

test_cases.typed_abi_call.logger.Logger.echo_log_struct_block@0:
    // typed_abi_call/logger.py:168
    // return log
    frame_dig -1
    retsub
