#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 2
    bytecblock 0x151f7c75 0x6563686f3a20 0x 0x01

main_block@0:

main_block@1:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@26

main_abi_routing@2:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    pushbytes 0x9bf81913 // method "echo(string)string"
    pushbytes 0xb862ee19 // method "no_args()uint64"
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    pushbytes 0x6af45930 // method "log(uint512)void"
    pushbytes 0xb4b4334e // method "log(string)void"
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    pushbytes 0xb500e111 // method "log(byte[])void"
    pushbytes 0x46b50faf // method "log(uint64,address,uint64)void"
    pushbytes 0x0437b17e // method "log(address)void"
    pushbytes 0x4a444c77 // method "echo_native_string(string)string"
    pushbytes 0x2659e818 // method "echo_native_bytes(byte[])byte[]"
    pushbytes 0xa9fb6cf1 // method "echo_native_uint64(uint64)uint64"
    pushbytes 0xd8cc363b // method "echo_native_biguint(uint512)uint512"
    pushbytes 0xd6c2ac7f // method "echo_resource_by_index(asset,application,account)(uint64,uint64,address)"
    pushbytes 0x48142d5e // method "echo_resource_by_value(uint64,uint64,address)(uint64,uint64,address)"
    pushbytes 0x16e03919 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    pushbytes 0xab271ce4 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    pushbytes 0xddd07185 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    pushbytes 0xdc4f1992 // method "echo_log_struct((uint64,string))(uint64,string)"
    uncover 21
    match main_is_a_b_route@3 main_echo_route@4 main_no_args_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_log_route@9 main_log_route@10 main_log_route@11 main_log_route@12 main_echo_native_string_route@13 main_echo_native_bytes_route@14 main_echo_native_uint64_route@15 main_echo_native_biguint_route@16 main_echo_resource_by_index_route@17 main_echo_resource_by_value_route@18 main_echo_native_tuple_route@19 main_echo_nested_tuple_route@20 main_return_args_after_14th_route@21 main_logs_are_equal_route@22 main_echo_log_struct_route@23

main_switch_case_default@24:

main_switch_case_next@25:

main_after_if_else@30:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31:
    return

main_echo_log_struct_route@23:
    // typed_abi_call/logger.py:166
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:166
    // @arc4.abimethod
    callsub echo_log_struct
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_logs_are_equal_route@22:
    // typed_abi_call/logger.py:162
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    txna ApplicationArgs 2
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    dup
    intc_2 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    // typed_abi_call/logger.py:162
    // @arc4.abimethod
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub logs_are_equal
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_return_args_after_14th_route@21:
    // typed_abi_call/logger.py:134
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    intc_0 // 0
    intc_1 // 1
    extract3
    txna ApplicationArgs 15
    intc_1 // 1
    dup
    extract3
    txna ApplicationArgs 15
    intc_3 // 2
    intc_1 // 1
    extract3
    txna ApplicationArgs 15
    pushint 3 // 3
    intc_1 // 1
    extract3
    txna ApplicationArgs 15
    pushint 4 // 4
    dup
    extract3
    txna ApplicationArgs 15
    intc_2 // 8
    intc_1 // 1
    extract3
    // typed_abi_call/logger.py:134
    // @arc4.abimethod
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    callsub return_args_after_14th
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_nested_tuple_route@20:
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_3 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_3 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_3 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    btoi
    swap
    dup
    intc_2 // 8
    dup
    extract3
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    uncover 4
    uncover 4
    uncover 3
    // typed_abi_call/logger.py:123
    // @arc4.abimethod
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    callsub echo_nested_tuple
    cover 4
    cover 3
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    swap
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    swap
    dup
    len
    pushint 4 // 4
    +
    uncover 3
    itob
    bytec_2 // 0x
    swap
    concat
    uncover 4
    concat
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    itob
    extract 6 2
    uncover 3
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_native_tuple_route@19:
    // typed_abi_call/logger.py:117
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    // typed_abi_call/logger.py:117
    // @arc4.abimethod
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub echo_native_tuple
    cover 3
    cover 2
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushint 76 // 76
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    swap
    dup
    len
    pushint 76 // 76
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 2
    itob
    extract 6 2
    uncover 3
    swap
    concat
    uncover 3
    itob
    concat
    dig 3
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    uncover 4
    b|
    concat
    swap
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_resource_by_value_route@18:
    // typed_abi_call/logger.py:103-105
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    // typed_abi_call/logger.py:103-105
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    uncover 2
    uncover 2
    uncover 2
    callsub echo_resource_by_value
    cover 2
    swap
    itob
    bytec_2 // 0x
    swap
    concat
    swap
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_resource_by_index_route@17:
    // typed_abi_call/logger.py:89-91
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Applications
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // typed_abi_call/logger.py:89-91
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    uncover 2
    uncover 2
    uncover 2
    callsub echo_resource_by_index
    cover 2
    swap
    itob
    bytec_2 // 0x
    swap
    concat
    swap
    itob
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_native_biguint_route@16:
    // typed_abi_call/logger.py:85
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:85
    // @arc4.abimethod
    callsub echo_native_biguint
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_native_uint64_route@15:
    // typed_abi_call/logger.py:81
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:81
    // @arc4.abimethod
    callsub echo_native_uint64
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_native_bytes_route@14:
    // typed_abi_call/logger.py:77
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:77
    // @arc4.abimethod
    callsub echo_native_bytes
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_native_string_route@13:
    // typed_abi_call/logger.py:73
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // typed_abi_call/logger.py:73
    // @arc4.abimethod
    callsub echo_native_string
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@12:
    // typed_abi_call/logger.py:69
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:69
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_address
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@11:
    // typed_abi_call/logger.py:65
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/logger.py:65
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    uncover 2
    uncover 2
    uncover 2
    callsub log_asset_account_app
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@10:
    // typed_abi_call/logger.py:61
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:61
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bytes
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@9:
    // typed_abi_call/logger.py:57
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:57
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bool
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@8:
    // typed_abi_call/logger.py:53
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:53
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_string
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@7:
    // typed_abi_call/logger.py:49
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:49
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint512
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_log_route@6:
    // typed_abi_call/logger.py:45
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:45
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint64
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_no_args_route@5:
    // typed_abi_call/logger.py:41
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub no_args
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_echo_route@4:
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    callsub echo
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_is_a_b_route@3:
    // typed_abi_call/logger.py:32
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // typed_abi_call/logger.py:32
    // @arc4.abimethod
    callsub is_a_b
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31

main_bare_routing@26:
    // typed_abi_call/logger.py:31
    // class Logger(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@27

main_switch_case_default@28:

main_switch_case_next@29:
    b main_after_if_else@30

main___algopy_default_create@27:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@32:

main_after_inlined_test_cases.typed_abi_call.logger.Logger.__algopy_default_create@33:
    intc_1 // 1
    b main_after_inlined_test_cases.typed_abi_call.logger.Logger.__puya_arc4_router__@31


// test_cases.typed_abi_call.logger.Logger.is_a_b(a: bytes, b: bytes) -> void:
is_a_b:
    // typed_abi_call/logger.py:32-33
    // @arc4.abimethod
    // def is_a_b(self, a: Bytes, b: Bytes) -> None:
    proto 2 0

is_a_b_block@0:
    // typed_abi_call/logger.py:34
    // assert a == b"a", "a is not a"
    frame_dig -2
    pushbytes 0x61
    ==
    assert // a is not a
    // typed_abi_call/logger.py:35
    // assert b == b"b", "b is not b"
    frame_dig -1
    pushbytes 0x62
    ==
    assert // b is not b
    retsub


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
echo:
    // typed_abi_call/logger.py:37-38
    // @arc4.abimethod
    // def echo(self, value: arc4.String) -> arc4.String:
    proto 1 1

echo_block@0:
    // typed_abi_call/logger.py:39
    // return "echo: " + value
    bytec_1 // "echo: "
    len
    itob
    extract 6 2
    bytec_1 // "echo: "
    concat
    frame_dig -1
    len
    frame_dig -1
    intc_3 // 2
    uncover 2
    substring3
    frame_dig -1
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    swap
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    uncover 2
    +
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    retsub


// test_cases.typed_abi_call.logger.Logger.no_args() -> uint64:
no_args:

no_args_block@0:
    // typed_abi_call/logger.py:43
    // return UInt64(42)
    pushint 42 // 42
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
log_uint64:
    // typed_abi_call/logger.py:45-46
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint64(self, value: arc4.UInt64) -> None:
    proto 1 0

log_uint64_block@0:
    // typed_abi_call/logger.py:47
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
log_uint512:
    // typed_abi_call/logger.py:49-50
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint512(self, value: arc4.UInt512) -> None:
    proto 1 0

log_uint512_block@0:
    // typed_abi_call/logger.py:51
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
log_string:
    // typed_abi_call/logger.py:53-54
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_string(self, value: arc4.String) -> None:
    proto 1 0

log_string_block@0:
    // typed_abi_call/logger.py:55
    // log(value.native)  # decode to remove header
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
log_bool:
    // typed_abi_call/logger.py:57-58
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bool(self, value: arc4.Bool) -> None:
    proto 1 0

log_bool_block@0:
    // typed_abi_call/logger.py:59
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    frame_dig -1
    intc_0 // 0
    getbit
    pushbytes 0x46616c7365
    pushbytes 0x54727565
    uncover 2
    select
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
log_bytes:
    // typed_abi_call/logger.py:61-62
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bytes(self, value: arc4.DynamicBytes) -> None:
    proto 1 0

log_bytes_block@0:
    // typed_abi_call/logger.py:63
    // log(value.native)
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
log_asset_account_app:
    // typed_abi_call/logger.py:65-66
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
    proto 3 0

log_asset_account_app_block@0:
    // typed_abi_call/logger.py:67
    // log(asset.name, account.bytes, app.address)
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    bytec_2 // ""
    concat
    frame_dig -2
    concat
    bytec_2 // ""
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_address(address: bytes) -> void:
log_address:
    // typed_abi_call/logger.py:69-70
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_address(self, address: arc4.Address) -> None:
    proto 1 0

log_address_block@0:
    // typed_abi_call/logger.py:71
    // log(address)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_string(value: bytes) -> bytes:
echo_native_string:
    // typed_abi_call/logger.py:73-74
    // @arc4.abimethod
    // def echo_native_string(self, value: String) -> String:
    proto 1 1

echo_native_string_block@0:
    // typed_abi_call/logger.py:75
    // return "echo: " + value
    bytec_1 // "echo: "
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_bytes(value: bytes) -> bytes:
echo_native_bytes:
    // typed_abi_call/logger.py:77-78
    // @arc4.abimethod
    // def echo_native_bytes(self, value: Bytes) -> Bytes:
    proto 1 1

echo_native_bytes_block@0:
    // typed_abi_call/logger.py:79
    // return b"echo: " + value
    bytec_1 // 0x6563686f3a20
    frame_dig -1
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_uint64(value: uint64) -> uint64:
echo_native_uint64:
    // typed_abi_call/logger.py:81-82
    // @arc4.abimethod
    // def echo_native_uint64(self, value: UInt64) -> UInt64:
    proto 1 1

echo_native_uint64_block@0:
    // typed_abi_call/logger.py:83
    // return value + 1
    frame_dig -1
    intc_1 // 1
    +
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_biguint(value: bytes) -> bytes:
echo_native_biguint:
    // typed_abi_call/logger.py:85-86
    // @arc4.abimethod
    // def echo_native_biguint(self, value: BigUInt) -> BigUInt:
    proto 1 1

echo_native_biguint_block@0:
    // typed_abi_call/logger.py:87
    // return value + 1
    frame_dig -1
    bytec_3 // 0x01
    b+
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_index(asset: uint64, app: uint64, acc: bytes) -> uint64, uint64, bytes:
echo_resource_by_index:
    // typed_abi_call/logger.py:89-94
    // @arc4.abimethod(
    //     resource_encoding="index",
    // )
    // def echo_resource_by_index(
    //     self, asset: Asset, app: Application, acc: Account
    // ) -> tuple[Asset, Application, Account]:
    proto 3 3

echo_resource_by_index_block@0:
    // typed_abi_call/logger.py:95
    // asset_idx = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:96
    // assert asset == Txn.assets(asset_idx), "expected asset to be passed by index"
    txnas Assets
    frame_dig -3
    ==
    assert // expected asset to be passed by index
    // typed_abi_call/logger.py:97
    // app_idx = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:98
    // assert app == Txn.applications(app_idx), "expected application to be passed by index"
    txnas Applications
    frame_dig -2
    ==
    assert // expected application to be passed by index
    // typed_abi_call/logger.py:99
    // acc_idx = op.btoi(Txn.application_args(3))
    txna ApplicationArgs 3
    btoi
    // typed_abi_call/logger.py:100
    // assert acc == Txn.accounts(acc_idx), "expected account to be passed by index"
    txnas Accounts
    frame_dig -1
    ==
    assert // expected account to be passed by index
    // typed_abi_call/logger.py:101
    // return asset, app, acc
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_resource_by_value(asset: uint64, app: uint64, acc: bytes) -> uint64, uint64, bytes:
echo_resource_by_value:
    // typed_abi_call/logger.py:103-108
    // @arc4.abimethod(
    //     resource_encoding="value",
    // )
    // def echo_resource_by_value(
    //     self, asset: Asset, app: Application, acc: Account
    // ) -> tuple[Asset, Application, Account]:
    proto 3 3

echo_resource_by_value_block@0:
    // typed_abi_call/logger.py:109
    // asset_id = op.btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    // typed_abi_call/logger.py:110
    // assert asset.id == asset_id, "expected asset to be passed by value"
    frame_dig -3
    ==
    assert // expected asset to be passed by value
    // typed_abi_call/logger.py:111
    // app_id = op.btoi(Txn.application_args(2))
    txna ApplicationArgs 2
    btoi
    // typed_abi_call/logger.py:112
    // assert app.id == app_id, "expected application to be passed by value"
    frame_dig -2
    ==
    assert // expected application to be passed by value
    // typed_abi_call/logger.py:113
    // address = Txn.application_args(3)
    txna ApplicationArgs 3
    // typed_abi_call/logger.py:114
    // assert acc.bytes == address, "expected account to be passed by value"
    frame_dig -1
    ==
    assert // expected account to be passed by value
    // typed_abi_call/logger.py:115
    // return asset, app, acc
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_native_tuple(s: bytes, b: bytes, u: uint64, bu: bytes) -> bytes, bytes, uint64, bytes:
echo_native_tuple:
    // typed_abi_call/logger.py:117-120
    // @arc4.abimethod
    // def echo_native_tuple(
    //     self, s: String, b: Bytes, u: UInt64, bu: BigUInt
    // ) -> tuple[String, Bytes, UInt64, BigUInt]:
    proto 4 4

echo_native_tuple_block@0:
    // typed_abi_call/logger.py:121
    // return "echo: " + s, b"echo: " + b, u + 1, bu + 1
    bytec_1 // "echo: "
    frame_dig -4
    concat
    bytec_1 // 0x6563686f3a20
    frame_dig -3
    concat
    frame_dig -2
    intc_1 // 1
    +
    frame_dig -1
    bytec_3 // 0x01
    b+
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_nested_tuple(tuple_of_tuples.0.0: bytes, tuple_of_tuples.0.1: bytes, tuple_of_tuples.1.0: uint64, tuple_of_tuples.1.1: bytes, tuple_of_tuples.1.2: bytes) -> bytes, bytes, uint64, bytes, bytes:
echo_nested_tuple:
    // typed_abi_call/logger.py:123-126
    // @arc4.abimethod
    // def echo_nested_tuple(
    //     self, tuple_of_tuples: tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]
    // ) -> tuple[tuple[String, arc4.String], tuple[UInt64, arc4.UInt64, Bytes]]:
    proto 5 5

echo_nested_tuple_block@0:
    // typed_abi_call/logger.py:127
    // (string, arc4_string), (u64, arc4_u64, bytez) = tuple_of_tuples
    frame_dig -5
    frame_dig -4
    swap
    frame_dig -3
    cover 2
    frame_dig -2
    cover 3
    frame_dig -1
    cover 4
    // typed_abi_call/logger.py:128
    // return ("echo: " + string, "echo: " + arc4_string), (
    bytec_1 // "echo: "
    swap
    concat
    cover 3
    bytec_1 // "echo: "
    len
    itob
    extract 6 2
    bytec_1 // "echo: "
    concat
    dig 1
    len
    swap
    dig 2
    intc_3 // 2
    uncover 3
    substring3
    swap
    uncover 2
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    concat // on error: max array length exceeded
    dup
    intc_0 // 0
    extract_uint16
    uncover 2
    +
    itob
    extract 6 2
    swap
    intc_0 // 0
    uncover 2
    replace3
    // typed_abi_call/logger.py:129
    // u64 + 1,
    swap
    intc_1 // 1
    +
    // typed_abi_call/logger.py:130
    // arc4.UInt64(arc4_u64.native + 1),
    uncover 2
    btoi
    intc_1 // 1
    +
    itob
    // typed_abi_call/logger.py:131
    // b"echo: " + bytez,
    bytec_1 // 0x6563686f3a20
    uncover 5
    concat
    // typed_abi_call/logger.py:128-132
    // return ("echo: " + string, "echo: " + arc4_string), (
    //     u64 + 1,
    //     arc4.UInt64(arc4_u64.native + 1),
    //     b"echo: " + bytez,
    // )
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    uncover 4
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
return_args_after_14th:
    // typed_abi_call/logger.py:134-157
    // @arc4.abimethod
    // def return_args_after_14th(
    //     self,
    //     _a1: arc4.UInt64,
    //     _a2: arc4.UInt64,
    //     _a3: arc4.UInt64,
    //     _a4: arc4.UInt64,
    //     _a5: arc4.UInt64,
    //     _a6: arc4.UInt64,
    //     _a7: arc4.UInt64,
    //     _a8: arc4.UInt64,
    //     _a9: arc4.UInt64,
    //     _a10: arc4.UInt64,
    //     _a11: arc4.UInt64,
    //     _a12: arc4.UInt64,
    //     _a13: arc4.UInt64,
    //     _a14: arc4.UInt64,
    //     a15: arc4.UInt8,
    //     a16: arc4.UInt8,
    //     a17: arc4.UInt8,
    //     a18: arc4.UInt8,
    //     a19: arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.UInt8, arc4.UInt8],
    //     a20: arc4.UInt8,
    // ) -> arc4.DynamicBytes:
    proto 20 1

return_args_after_14th_block@0:
    // typed_abi_call/logger.py:158
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    bytec_2 // 0x
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // typed_abi_call/logger.py:159
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:160
    // return arc4.DynamicBytes(last_arg.bytes)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.logs_are_equal(log_1.level: uint64, log_1.message: bytes, log_2.level: uint64, log_2.message: bytes) -> uint64:
logs_are_equal:
    // typed_abi_call/logger.py:162-163
    // @arc4.abimethod
    // def logs_are_equal(self, log_1: LogMessage, log_2: LogMessage) -> bool:
    proto 4 1

logs_are_equal_block@0:
    // typed_abi_call/logger.py:164
    // return log_1 == log_2
    frame_dig -4
    frame_dig -2
    ==
    frame_dig -3
    frame_dig -1
    ==
    &&
    retsub


// test_cases.typed_abi_call.logger.Logger.echo_log_struct(log: bytes) -> bytes:
echo_log_struct:
    // typed_abi_call/logger.py:166-167
    // @arc4.abimethod
    // def echo_log_struct(self, log: LogStruct) -> LogStruct:
    proto 1 1

echo_log_struct_block@0:
    // typed_abi_call/logger.py:168
    // return log
    frame_dig -1
    retsub
