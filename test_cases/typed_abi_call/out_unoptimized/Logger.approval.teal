#pragma version 10

test_cases.typed_abi_call.logger.Logger.approval_program:
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    txna ApplicationArgs 0
    method "echo(string)string"
    method "log(uint64)void"
    method "log(uint512)void"
    method "log(string)void"
    method "log(bool)void"
    method "log(byte[])void"
    method "log(asset,account,application)void"
    method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    uncover 8
    match main_echo_route@2 main_log_route@3 main_log_route@4 main_log_route@5 main_log_route@6 main_log_route@7 main_log_route@8 main_return_args_after_14th_route@9
    b main_switch_case_default@10

main_echo_route@2:
    // typed_abi_call/logger.py:9
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:9
    // @arc4.abimethod
    callsub echo
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_log_route@3:
    // typed_abi_call/logger.py:13
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:13
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint64
    int 1
    return

main_log_route@4:
    // typed_abi_call/logger.py:17
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:17
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_uint512
    int 1
    return

main_log_route@5:
    // typed_abi_call/logger.py:21
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:21
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_string
    int 1
    return

main_log_route@6:
    // typed_abi_call/logger.py:25
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:25
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bool
    int 1
    return

main_log_route@7:
    // typed_abi_call/logger.py:29
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    // typed_abi_call/logger.py:29
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    callsub log_bytes
    int 1
    return

main_log_route@8:
    // typed_abi_call/logger.py:33
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/logger.py:33
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    uncover 2
    uncover 2
    uncover 2
    callsub log_asset_account_app
    int 1
    return

main_return_args_after_14th_route@9:
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    txna ApplicationArgs 9
    txna ApplicationArgs 10
    txna ApplicationArgs 11
    txna ApplicationArgs 12
    txna ApplicationArgs 13
    txna ApplicationArgs 14
    txna ApplicationArgs 15
    int 0
    int 1
    extract3
    txna ApplicationArgs 15
    int 1
    int 1
    extract3
    txna ApplicationArgs 15
    int 2
    int 1
    extract3
    txna ApplicationArgs 15
    int 3
    int 1
    extract3
    txna ApplicationArgs 15
    int 4
    int 4
    extract3
    txna ApplicationArgs 15
    int 8
    int 1
    extract3
    // typed_abi_call/logger.py:37
    // @arc4.abimethod
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    uncover 19
    callsub return_args_after_14th
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_switch_case_default@10:
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    err // reject transaction

main_bare_routing@12:
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txn OnCompletion
    int 0
    swap
    match main_create@13
    b main_reject_bare_on_completion@14

main_create@13:
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_reject_bare_on_completion@14:
    // typed_abi_call/logger.py:8
    // class Logger(ARC4Contract):
    err // reject transaction


// test_cases.typed_abi_call.logger.Logger.echo(value: bytes) -> bytes:
echo:
    // typed_abi_call/logger.py:9-10
    // @arc4.abimethod
    // def echo(self, value: arc4.String) -> arc4.String:
    proto 1 1
    // typed_abi_call/logger.py:11
    // return "echo: " + value
    byte "\x00\x06echo: "
    extract 2 0
    frame_dig -1
    extract 2 0
    concat
    dup
    len
    itob
    extract 6 0
    swap
    concat
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint64(value: bytes) -> void:
log_uint64:
    // typed_abi_call/logger.py:13-14
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint64(self, value: arc4.UInt64) -> None:
    proto 1 0
    // typed_abi_call/logger.py:15
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_uint512(value: bytes) -> void:
log_uint512:
    // typed_abi_call/logger.py:17-18
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_uint512(self, value: arc4.UInt512) -> None:
    proto 1 0
    // typed_abi_call/logger.py:19
    // log(value)
    frame_dig -1
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_string(value: bytes) -> void:
log_string:
    // typed_abi_call/logger.py:21-22
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_string(self, value: arc4.String) -> None:
    proto 1 0
    // typed_abi_call/logger.py:23
    // log(value.native)  # decode to remove header
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bool(value: bytes) -> void:
log_bool:
    // typed_abi_call/logger.py:25-26
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bool(self, value: arc4.Bool) -> None:
    proto 1 0
    // typed_abi_call/logger.py:27
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    frame_dig -1
    int 0
    getbit
    bz log_bool_ternary_false@2
    byte "True"
    b log_bool_ternary_merge@3

log_bool_ternary_false@2:
    // typed_abi_call/logger.py:27
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    byte "False"

log_bool_ternary_merge@3:
    // typed_abi_call/logger.py:27
    // log(Bytes(b"True") if value.native else Bytes(b"False"))
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_bytes(value: bytes) -> void:
log_bytes:
    // typed_abi_call/logger.py:29-30
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_bytes(self, value: arc4.DynamicBytes) -> None:
    proto 1 0
    // typed_abi_call/logger.py:31
    // log(value.native)
    frame_dig -1
    extract 2 0
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.log_asset_account_app(asset: uint64, account: bytes, app: uint64) -> void:
log_asset_account_app:
    // typed_abi_call/logger.py:33-34
    // @arc4.abimethod(name=LOG_METHOD_NAME)
    // def log_asset_account_app(self, asset: Asset, account: Account, app: Application) -> None:
    proto 3 0
    // typed_abi_call/logger.py:35
    // log(asset.name, account.bytes, app.address)
    frame_dig -3
    asset_params_get AssetName
    assert // asset exists
    byte ""
    concat
    frame_dig -2
    concat
    byte ""
    concat
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    concat
    log
    retsub


// test_cases.typed_abi_call.logger.Logger.return_args_after_14th(_a1: bytes, _a2: bytes, _a3: bytes, _a4: bytes, _a5: bytes, _a6: bytes, _a7: bytes, _a8: bytes, _a9: bytes, _a10: bytes, _a11: bytes, _a12: bytes, _a13: bytes, _a14: bytes, a15: bytes, a16: bytes, a17: bytes, a18: bytes, a19: bytes, a20: bytes) -> bytes:
return_args_after_14th:
    // typed_abi_call/logger.py:37-60
    // @arc4.abimethod
    // def return_args_after_14th(
    //     self,
    //     _a1: arc4.UInt64,
    //     _a2: arc4.UInt64,
    //     _a3: arc4.UInt64,
    //     _a4: arc4.UInt64,
    //     _a5: arc4.UInt64,
    //     _a6: arc4.UInt64,
    //     _a7: arc4.UInt64,
    //     _a8: arc4.UInt64,
    //     _a9: arc4.UInt64,
    //     _a10: arc4.UInt64,
    //     _a11: arc4.UInt64,
    //     _a12: arc4.UInt64,
    //     _a13: arc4.UInt64,
    //     _a14: arc4.UInt64,
    //     a15: arc4.UInt8,
    //     a16: arc4.UInt8,
    //     a17: arc4.UInt8,
    //     a18: arc4.UInt8,
    //     a19: arc4.Tuple[arc4.UInt8, arc4.UInt8, arc4.UInt8, arc4.UInt8],
    //     a20: arc4.UInt8,
    // ) -> arc4.DynamicBytes:
    proto 20 1
    // typed_abi_call/logger.py:61
    // last_arg = arc4.Tuple((a15, a16, a17, a18, a19, a20))
    byte 0x
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // typed_abi_call/logger.py:62
    // assert Txn.application_args(15) == last_arg.bytes
    txna ApplicationArgs 15
    dig 1
    ==
    assert
    // typed_abi_call/logger.py:63
    // return arc4.DynamicBytes(last_arg.bytes)
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub
