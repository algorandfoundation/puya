#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 2 1
    bytecblock 0x151f7c75 0x 0x6231 0x9bf81913 0x0000000000000001 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 0x00027331 0x62 0x02 "s1" "log 1" 0xb4b4334e 0x0000000000000002 "echo: s1" 0x33 0x34 0x0000000000000003 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x000b6563686f3a207475706c65 0x000000000000000b 0x000173 0x6563686f3a206231 0x00027332 0x00086563686f3a207332 0x6563686f3a2033 0x0003733162 0x3362 0x000000000000002a 0xddd07185 "log 2"

main_block@1:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@21

main_abi_routing@2:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x07916bea // method "test_is_a_b(byte[],byte[],application)void"
    pushbytes 0x1859b0ba // method "test_method_selector_kinds(application)void"
    pushbytes 0x4eb11b0d // method "test_method_overload(application)void"
    pushbytes 0x0d176a4a // method "test_arg_conversion(application)void"
    pushbytes 0xb54730c8 // method "test_15plus_args(application)void"
    pushbytes 0x7859eaf7 // method "test_void(application)void"
    pushbytes 0x24478a3c // method "test_ref_types(application,asset)void"
    pushbytes 0x7a60c035 // method "test_native_string(application)void"
    pushbytes 0x6a559cb3 // method "test_native_bytes(application)void"
    pushbytes 0x1be60712 // method "test_native_uint64(application)void"
    pushbytes 0x19cb78a4 // method "test_native_biguint(application)void"
    pushbytes 0xf0ef6873 // method "test_native_tuple(application)void"
    pushbytes 0x3d2bfe37 // method "test_native_tuple_method_ref(application)void"
    pushbytes 0x54e98f56 // method "test_nested_tuples(application)void"
    pushbytes 0xf55b7567 // method "test_no_args(application)void"
    pushbytes 0x8598bb43 // method "test_named_tuples(application)void"
    uncover 16
    match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_native_string_route@10 main_test_native_bytes_route@11 main_test_native_uint64_route@12 main_test_native_biguint_route@13 main_test_native_tuple_route@14 main_test_native_tuple_method_ref_route@15 main_test_nested_tuples_route@16 main_test_no_args_route@17 main_test_named_tuples_route@18

main_switch_case_default@19:

main_switch_case_next@20:

main_after_if_else@25:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26:
    return

main_test_named_tuples_route@18:
    // typed_abi_call/typed_c2c.py:340
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:340
    // @arc4.abimethod()
    callsub test_named_tuples
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_no_args_route@17:
    // typed_abi_call/typed_c2c.py:330
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:330
    // @arc4.abimethod()
    callsub test_no_args
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_nested_tuples_route@16:
    // typed_abi_call/typed_c2c.py:284
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:284
    // @arc4.abimethod()
    callsub test_nested_tuples
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_tuple_method_ref_route@15:
    // typed_abi_call/typed_c2c.py:234
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:234
    // @arc4.abimethod()
    callsub test_native_tuple_method_ref
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_tuple_route@14:
    // typed_abi_call/typed_c2c.py:175
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:175
    // @arc4.abimethod()
    callsub test_native_tuple
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_biguint_route@13:
    // typed_abi_call/typed_c2c.py:164
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:164
    // @arc4.abimethod()
    callsub test_native_biguint
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_uint64_route@12:
    // typed_abi_call/typed_c2c.py:153
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:153
    // @arc4.abimethod()
    callsub test_native_uint64
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_bytes_route@11:
    // typed_abi_call/typed_c2c.py:140
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:140
    // @arc4.abimethod()
    callsub test_native_bytes
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_native_string_route@10:
    // typed_abi_call/typed_c2c.py:129
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:129
    // @arc4.abimethod()
    callsub test_native_string
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_ref_types_route@9:
    // typed_abi_call/typed_c2c.py:115
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // typed_abi_call/typed_c2c.py:115
    // @arc4.abimethod()
    callsub test_ref_types
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_void_route@8:
    // typed_abi_call/typed_c2c.py:101
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:101
    // @arc4.abimethod()
    callsub test_void
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_15plus_args_route@7:
    // typed_abi_call/typed_c2c.py:73
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:73
    // @arc4.abimethod()
    callsub test_15plus_args
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_arg_conversion_route@6:
    // typed_abi_call/typed_c2c.py:56
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:56
    // @arc4.abimethod()
    callsub test_arg_conversion
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_method_overload_route@5:
    // typed_abi_call/typed_c2c.py:41
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:41
    // @arc4.abimethod()
    callsub test_method_overload
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_method_selector_kinds_route@4:
    // typed_abi_call/typed_c2c.py:27
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:27
    // @arc4.abimethod()
    callsub test_method_selector_kinds
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_test_is_a_b_route@3:
    // typed_abi_call/typed_c2c.py:18
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:18
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub test_is_a_b
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26

main_bare_routing@21:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@22

main_switch_case_default@23:

main_switch_case_next@24:
    b main_after_if_else@25

main___algopy_default_create@22:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@27:

main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@28:
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@26


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    // typed_abi_call/typed_c2c.py:18-19
    // @arc4.abimethod
    // def test_is_a_b(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    // typed_abi_call/typed_c2c.py:20-25
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:22
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call/typed_c2c.py:23
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    swap
    // typed_abi_call/typed_c2c.py:24
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:20-25
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_is_a_b_next_txn@1:
    // typed_abi_call/typed_c2c.py:20-25
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    // typed_abi_call/typed_c2c.py:27-28
    // @arc4.abimethod()
    // def test_method_selector_kinds(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:29
    // assert arc4.arc4_signature(Logger.echo) == arc4.arc4_signature("echo(string)string")
    bytec_3 // method "echo(string)string"
    dup
    ==
    assert
    // typed_abi_call/typed_c2c.py:30
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@1:
    // typed_abi_call/typed_c2c.py:30
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:31
    // assert result == "echo: test1"
    pushbytes 0x000b6563686f3a207465737431
    ==
    assert
    // typed_abi_call/typed_c2c.py:32
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@2:
    // typed_abi_call/typed_c2c.py:32
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:33
    // assert result == "echo: test2"
    pushbytes 0x000b6563686f3a207465737432
    ==
    assert
    // typed_abi_call/typed_c2c.py:34
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@3:
    // typed_abi_call/typed_c2c.py:34
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:35
    // assert result == "echo: test3"
    pushbytes 0x000b6563686f3a207465737433
    ==
    assert
    // typed_abi_call/typed_c2c.py:36
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@4:
    // typed_abi_call/typed_c2c.py:36
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:37
    // assert result == "echo: test4"
    pushbytes 0x000b6563686f3a207465737434
    ==
    assert
    // typed_abi_call/typed_c2c.py:38
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057465737435
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@5:
    // typed_abi_call/typed_c2c.py:38
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:39
    // assert result == "echo: test5"
    pushbytes 0x000b6563686f3a207465737435
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    // typed_abi_call/typed_c2c.py:41-42
    // @arc4.abimethod()
    // def test_method_overload(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:43
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x000e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@1:
    // typed_abi_call/typed_c2c.py:43
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:44
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: typed + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x00146563686f3a207479706564202b2069676e6f7265
    ==
    assert
    // typed_abi_call/typed_c2c.py:46
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0010756e7479706564202b2069676e6f7265
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@2:
    // typed_abi_call/typed_c2c.py:46
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_submit
    // typed_abi_call/typed_c2c.py:47
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: untyped + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x00166563686f3a20756e7479706564202b2069676e6f7265
    ==
    assert
    // typed_abi_call/typed_c2c.py:49
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x00057475706c65
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@3:
    // typed_abi_call/typed_c2c.py:49
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    // typed_abi_call/typed_c2c.py:50
    // assert result[0] == "echo: tuple"
    bytec 25 // 0x000b6563686f3a207475706c65
    ==
    assert
    // typed_abi_call/typed_c2c.py:51
    // assert arc4.String.from_log(result[1].last_log) == "echo: tuple"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 25 // 0x000b6563686f3a207475706c65
    ==
    assert
    // typed_abi_call/typed_c2c.py:53
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec_3 // method "echo(string)string"
    itxn_field ApplicationArgs
    pushbytes 0x0007756e7479706564
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@4:
    // typed_abi_call/typed_c2c.py:53
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:54
    // assert arc4.String.from_log(txn_result.last_log) == "echo: untyped"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    pushbytes 0x000d6563686f3a20756e7479706564
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    // typed_abi_call/typed_c2c.py:56-57
    // @arc4.abimethod()
    // def test_arg_conversion(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:58
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x000a636f6e76657274656431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@1:
    // typed_abi_call/typed_c2c.py:58
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:59
    // assert txn.last_log == b"converted1"
    pushbytes 0x636f6e76657274656431
    ==
    assert
    // typed_abi_call/typed_c2c.py:61
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 13 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@2:
    // typed_abi_call/typed_c2c.py:61
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:62
    // assert txn.last_log == op.itob(2)
    intc_2 // 2
    itob
    ==
    assert
    // typed_abi_call/typed_c2c.py:64
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@3:
    // typed_abi_call/typed_c2c.py:64
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:65
    // assert txn.last_log == (op.bzero(56) + op.itob(3))
    pushint 56 // 56
    bzero
    pushint 3 // 3
    itob
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:67
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_begin
    bytec 16 // 0x34
    len
    itob
    extract 6 2
    bytec 16 // 0x34
    concat
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@4:
    // typed_abi_call/typed_c2c.py:67
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:68
    // assert txn.last_log == b"4"
    bytec 16 // 0x34
    ==
    assert
    // typed_abi_call/typed_c2c.py:70
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    pushbytes 0x80
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@5:
    // typed_abi_call/typed_c2c.py:70
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:71
    // assert txn.last_log == b"True"
    pushbytes 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    // typed_abi_call/typed_c2c.py:73-74
    // @arc4.abimethod()
    // def test_15plus_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:75-98
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:95
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    bytec_1 // 0x
    pushbytes 0xde
    concat
    pushbytes 0xad
    concat
    pushbytes 0xbe
    concat
    pushbytes 0xef
    concat
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    bytec_1 // 0x
    // typed_abi_call/typed_c2c.py:91
    // 15,
    pushbytes 0x0f
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:92
    // 16,
    pushbytes 0x10
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:93
    // 17,
    pushbytes 0x11
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:94
    // 18,
    pushbytes 0x12
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:96
    // 20,
    pushbytes 0x14
    // typed_abi_call/typed_c2c.py:91-96
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:97
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:75-98
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:77
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:78
    // 2,
    bytec 13 // 0x0000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:79
    // 3,
    bytec 17 // 0x0000000000000003
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:80
    // 4,
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:81
    // 5,
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:82
    // 6,
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:83
    // 7,
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:84
    // 8,
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:85
    // 9,
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:86
    // 10,
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:87
    // 11,
    bytec 26 // 0x000000000000000b
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:88
    // 12,
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:89
    // 13,
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:90
    // 14,
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:75-98
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_15plus_args_next_txn@1:
    // typed_abi_call/typed_c2c.py:75-98
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:99
    // assert result.native == Bytes.from_hex("0F101112DEADBEEF14")
    extract 2 0
    pushbytes 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    // typed_abi_call/typed_c2c.py:101-102
    // @arc4.abimethod()
    // def test_void(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:103
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6431
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@1:
    // typed_abi_call/typed_c2c.py:103
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:104
    // assert txn.last_log == b"World1"
    pushbytes 0x576f726c6431
    ==
    assert
    // typed_abi_call/typed_c2c.py:106
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6432
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@2:
    // typed_abi_call/typed_c2c.py:106
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:107
    // assert txn.last_log == b"World2"
    pushbytes 0x576f726c6432
    ==
    assert
    // typed_abi_call/typed_c2c.py:109
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6433
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@3:
    // typed_abi_call/typed_c2c.py:109
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:110
    // assert txn.last_log == b"World3"
    pushbytes 0x576f726c6433
    ==
    assert
    // typed_abi_call/typed_c2c.py:112
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    pushbytes 0x0006576f726c6434
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@4:
    // typed_abi_call/typed_c2c.py:112
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:113
    // assert txn.last_log == b"World4"
    pushbytes 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    // typed_abi_call/typed_c2c.py:115-116
    // @arc4.abimethod()
    // def test_ref_types(self, app: Application, asset: Asset) -> None:
    proto 2 0
    // typed_abi_call/typed_c2c.py:117-123
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:120
    // Global.current_application_address,
    global CurrentApplicationAddress
    // typed_abi_call/typed_c2c.py:121
    // app,
    frame_dig -2
    // typed_abi_call/typed_c2c.py:119
    // asset,
    frame_dig -1
    // typed_abi_call/typed_c2c.py:122
    // app_id=app,
    frame_dig -2
    itxn_field ApplicationID
    itxn_field Assets
    itxn_field Applications
    itxn_field Accounts
    // typed_abi_call/typed_c2c.py:117-123
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    pushbytes 0xcd727b71 // method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:119
    // asset,
    pushbytes 0x00
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:120
    // Global.current_application_address,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:121
    // app,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:117-123
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_ref_types_next_txn@1:
    // typed_abi_call/typed_c2c.py:117-123
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:126
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    // typed_abi_call/typed_c2c.py:125-126
    // txn.last_log
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    ==
    // typed_abi_call/typed_c2c.py:124-127
    // assert (
    //     txn.last_log
    //     == asset.name + Global.current_application_address.bytes + app.address.bytes
    // )
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    // typed_abi_call/typed_c2c.py:129-130
    // @arc4.abimethod()
    // def test_native_string(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:131
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 27 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@1:
    // typed_abi_call/typed_c2c.py:131
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:132
    // assert result1 == "echo: s"
    pushbytes "echo: s"
    ==
    assert
    // typed_abi_call/typed_c2c.py:134
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_begin
    pushbytes "s"
    len
    itob
    extract 6 2
    pushbytes "s"
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@2:
    // typed_abi_call/typed_c2c.py:134
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:135
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:137
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 18 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    bytec 27 // 0x000173
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@3:
    // typed_abi_call/typed_c2c.py:137
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:138
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    // typed_abi_call/typed_c2c.py:140-141
    // @arc4.abimethod()
    // def test_native_bytes(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:142
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_begin
    bytec 8 // 0x62
    len
    itob
    extract 6 2
    bytec 8 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 19 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@1:
    // typed_abi_call/typed_c2c.py:142
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:143
    // assert result1 == b"echo: b"
    pushbytes 0x6563686f3a2062
    ==
    assert
    // typed_abi_call/typed_c2c.py:145
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_begin
    bytec 8 // 0x62
    len
    itob
    extract 6 2
    bytec 8 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 19 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@2:
    // typed_abi_call/typed_c2c.py:145
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:146
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:148-150
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:149
    // Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    bytec 8 // 0x62
    len
    itob
    extract 6 2
    bytec 8 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:148-150
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    bytec 19 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@3:
    // typed_abi_call/typed_c2c.py:148-150
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:151
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    // typed_abi_call/typed_c2c.py:153-154
    // @arc4.abimethod()
    // def test_native_uint64(self, app: Application) -> None:
    proto 1 0
    bytec_1 // ""
    // typed_abi_call/typed_c2c.py:155
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@1:
    // typed_abi_call/typed_c2c.py:155
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:156
    // assert result1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:158
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_begin
    intc_3 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@2:
    // typed_abi_call/typed_c2c.py:158
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:159
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:161
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 20 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@3:
    // typed_abi_call/typed_c2c.py:161
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:162
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    // typed_abi_call/typed_c2c.py:164-165
    // @arc4.abimethod()
    // def test_native_biguint(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:166
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 21 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@1:
    // typed_abi_call/typed_c2c.py:166
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:167
    // assert result1 == 3
    bytec 22 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:169
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_begin
    bytec 9 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 9 // 0x02
    b|
    frame_dig -1
    itxn_field ApplicationID
    bytec 21 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@2:
    // typed_abi_call/typed_c2c.py:169
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:170
    // assert result2 == result1
    frame_dig 0
    b==
    assert
    // typed_abi_call/typed_c2c.py:172
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 21 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@3:
    // typed_abi_call/typed_c2c.py:172
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:173
    // assert result3 == result1
    frame_dig 0
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    // typed_abi_call/typed_c2c.py:175-176
    // @arc4.abimethod()
    // def test_native_tuple(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:177-187
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:183
    // b"b1",
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:186
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:177-187
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:182
    // "s1",
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:184
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:185
    // 2,
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:177-187
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@1:
    // typed_abi_call/typed_c2c.py:177-187
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:188
    // s, b, u, bu = result1.native
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 2
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:189
    // assert s.native == "echo: s1"
    extract 2 0
    bytec 14 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:190
    // assert b.native == b"echo: b1"
    extract 2 0
    bytec 28 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:191
    // assert u.native == 2
    btoi
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:192
    // assert bu.native == 3
    bytec 22 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:194-204
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:199
    // String("s1"),
    bytec 10 // "s1"
    len
    itob
    extract 6 2
    bytec 10 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:200
    // Bytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:201
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:202
    // BigUInt(2),
    bytec 9 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 9 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:199
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:200
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:202
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:203
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:194-204
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@2:
    // typed_abi_call/typed_c2c.py:194-204
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:205
    // assert result1 == result2
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:207-217
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:213
    // arc4.DynamicBytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:216
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:207-217
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:212
    // arc4.String("s1"),
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:214
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:215
    // arc4.UInt512(2),
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:207-217
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@3:
    // typed_abi_call/typed_c2c.py:207-217
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:218
    // assert result1 == result3
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:220-228
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:224
    // arc4.DynamicBytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:227
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:220-228
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:223
    // arc4.String("s1"),
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:225
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:226
    // arc4.UInt512(2),
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:220-228
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@4:
    // typed_abi_call/typed_c2c.py:220-228
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 2
    cover 3
    swap
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:229
    // assert result1.native[0].native == result_native[0]
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:230
    // assert result1.native[1].native == result_native[1]
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:231
    // assert result1.native[2].native == result_native[2]
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:232
    // assert result1.native[3].native == result_native[3]
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    // typed_abi_call/typed_c2c.py:234-235
    // @arc4.abimethod()
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    dupn 2
    bytec_1 // ""
    // typed_abi_call/typed_c2c.py:236-244
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:240
    // b"b1",
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:243
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:236-244
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:239
    // "s1",
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:241
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:242
    // 2,
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:236-244
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@1:
    // typed_abi_call/typed_c2c.py:236-244
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    dup
    cover 2
    frame_bury 0
    uncover 3
    dup
    cover 3
    frame_bury 1
    uncover 3
    dup
    cover 4
    frame_bury 3
    dup
    cover 4
    frame_bury 2
    // typed_abi_call/typed_c2c.py:245
    // (s, b, u, bu) = result
    cover 3
    cover 3
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:246
    // assert s == "echo: s1"
    bytec 14 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:247
    // assert b == b"echo: b1"
    bytec 28 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:248
    // assert u == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:249
    // assert bu == 3
    bytec 22 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:251-259
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:254
    // String("s1"),
    bytec 10 // "s1"
    len
    itob
    extract 6 2
    bytec 10 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:255
    // Bytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:256
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:257
    // BigUInt(2),
    bytec 9 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 9 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:254
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:255
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:257
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:258
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:251-259
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@2:
    // typed_abi_call/typed_c2c.py:251-259
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:260
    // assert result_2 == result, "expected native arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    // typed_abi_call/typed_c2c.py:262-270
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:266
    // arc4.DynamicBytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:269
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:262-270
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:265
    // arc4.String("s1"),
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:267
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:268
    // arc4.UInt512(2),
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:262-270
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@3:
    // typed_abi_call/typed_c2c.py:262-270
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:271
    // assert result_3 == result, "expected arc4 arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    // typed_abi_call/typed_c2c.py:273-281
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:277
    // arc4.DynamicBytes(b"b1"),
    bytec_2 // 0x6231
    len
    itob
    extract 6 2
    bytec_2 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:280
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:273-281
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 6 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:276
    // arc4.String("s1"),
    bytec 7 // 0x00027331
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:278
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:279
    // arc4.UInt512(2),
    bytec 5 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:273-281
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@4:
    // typed_abi_call/typed_c2c.py:273-281
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:282
    // assert result_native == result
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    // typed_abi_call/typed_c2c.py:284-285
    // @arc4.abimethod()
    // def test_nested_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:286-291
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:289
    // (("s1", "s2"), (1, 2, b"3")),
    bytec 15 // 0x33
    len
    itob
    extract 6 2
    bytec 15 // 0x33
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    bytec 7 // 0x00027331
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    bytec 7 // 0x00027331
    concat
    bytec 29 // 0x00027332
    concat
    bytec_1 // 0x
    bytec 4 // 0x0000000000000001
    concat
    bytec 13 // 0x0000000000000002
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:290
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:286-291
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    bytec 23 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@1:
    // typed_abi_call/typed_c2c.py:286-291
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:292
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:293
    // assert s1 == "echo: s1"
    bytec 14 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:294
    // assert s2 == "echo: s2"
    bytec 30 // 0x00086563686f3a207332
    ==
    assert
    // typed_abi_call/typed_c2c.py:295
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:296
    // assert u64_2 == 3
    bytec 17 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:297
    // assert bytez == b"echo: 3"
    bytec 31 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:299-304
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:302
    // ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    bytec 10 // "s1"
    len
    itob
    extract 6 2
    bytec 10 // "s1"
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    swap
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    bytec 29 // 0x00027332
    concat
    intc_3 // 1
    itob
    bytec 15 // 0x33
    len
    itob
    extract 6 2
    bytec 15 // 0x33
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    bytec 13 // 0x0000000000000002
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:303
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:299-304
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    bytec 23 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@2:
    // typed_abi_call/typed_c2c.py:299-304
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:305
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:306
    // assert s1 == "echo: s1"
    bytec 14 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:307
    // assert s2 == "echo: s2"
    bytec 30 // 0x00086563686f3a207332
    ==
    assert
    // typed_abi_call/typed_c2c.py:308
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:309
    // assert u64_2 == 3
    bytec 17 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:310
    // assert bytez == b"echo: 3"
    bytec 31 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:312-322
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:317
    // arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    bytec 32 // 0x0003733162
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    bytec 32 // 0x0003733162
    concat
    pushbytes 0x0003733262
    concat
    // typed_abi_call/typed_c2c.py:318
    // arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    bytec 33 // 0x3362
    len
    itob
    extract 6 2
    bytec 33 // 0x3362
    concat
    bytec_1 // 0x
    bytec 26 // 0x000000000000000b
    concat
    pushbytes 0x0000000000000015
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:315-320
    // arc4.Tuple(
    //     (
    //         arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //         arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //     )
    // ),
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:321
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:312-322
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    bytec 23 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@3:
    // typed_abi_call/typed_c2c.py:312-322
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:323
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:324
    // assert s1 == "echo: s1b"
    pushbytes "echo: s1b"
    ==
    assert
    // typed_abi_call/typed_c2c.py:325
    // assert s2 == "echo: s2b"
    pushbytes 0x00096563686f3a20733262
    ==
    assert
    // typed_abi_call/typed_c2c.py:326
    // assert u64_1 == 12
    pushint 12 // 12
    ==
    assert
    // typed_abi_call/typed_c2c.py:327
    // assert u64_2 == 22
    pushbytes 0x0000000000000016
    b==
    assert
    // typed_abi_call/typed_c2c.py:328
    // assert bytez == b"echo: 3b"
    pushbytes 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    // typed_abi_call/typed_c2c.py:330-331
    // @arc4.abimethod()
    // def test_no_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:332
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 24 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@1:
    // typed_abi_call/typed_c2c.py:332
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:333
    // assert result == 42
    pushint 42 // 42
    ==
    assert
    // typed_abi_call/typed_c2c.py:334
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 24 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@2:
    // typed_abi_call/typed_c2c.py:334
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:335
    // assert arc4_result == 42
    bytec 34 // 0x000000000000002a
    b==
    assert
    // typed_abi_call/typed_c2c.py:337
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 24 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@3:
    // typed_abi_call/typed_c2c.py:337
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:338
    // assert arc4.UInt64.from_log(op.ITxn.last_log()) == 42
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 34 // 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    // typed_abi_call/typed_c2c.py:340-341
    // @arc4.abimethod()
    // def test_named_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:342-347
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:344
    // (UInt64(1), String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:345
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:346
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:342-347
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 35 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_named_tuples_next_txn@1:
    // typed_abi_call/typed_c2c.py:342-347
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:348
    // assert result
    assert
    // typed_abi_call/typed_c2c.py:349-354
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:351
    // (UInt64(2), String("log 2")),
    intc_2 // 2
    itob
    bytec 36 // "log 2"
    len
    itob
    extract 6 2
    bytec 36 // "log 2"
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:352
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:353
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:349-354
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 35 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_named_tuples_next_txn@2:
    // typed_abi_call/typed_c2c.py:349-354
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:355
    // assert not result
    !
    assert
    retsub
