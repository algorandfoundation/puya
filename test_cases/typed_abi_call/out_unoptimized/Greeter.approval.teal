#pragma version 10

test_cases.typed_abi_call.typed_c2c.Greeter.approval_program:
    intcblock 0 6 2 1
    bytecblock 0x151f7c75 "s1" 0x 0x6231 0x0000000000000001 0x9bf81913 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 "s" 0x62 0x02 "log 1" 0xb4b4334e "echo: tuple" 0x0000000000000002 "echo: s1" "s2" 0x33 "echo: s2" 0x636f6e76657274656431 0x34 0x0000000000000003 0x576f726c6431 0x576f726c6432 0x576f726c6433 0x576f726c6434 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 "test1" "echo: test1" "test2" "echo: test2" "test3" "echo: test3" "test4" "echo: test4" "test5" "echo: test5" "typed + ignore" "echo: typed + ignore" "untyped + ignore" "echo: untyped + ignore" "tuple" "untyped" "echo: untyped" 0x000000000000000b 0x6563686f3a206231 0x6563686f3a2033 "s1b" "s2b" 0x3362 "echo: s2b" 0x000000000000002a 0xddd07185 "log 2"
    callsub __puya_arc4_router__
    return


// test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@20
    txna ApplicationArgs 0
    pushbytes 0x07916bea // method "test_is_a_b(byte[],byte[],application)void"
    pushbytes 0x1859b0ba // method "test_method_selector_kinds(application)void"
    pushbytes 0x4eb11b0d // method "test_method_overload(application)void"
    pushbytes 0x0d176a4a // method "test_arg_conversion(application)void"
    pushbytes 0xb54730c8 // method "test_15plus_args(application)void"
    pushbytes 0x7859eaf7 // method "test_void(application)void"
    pushbytes 0x24478a3c // method "test_ref_types(application,asset)void"
    pushbytes 0x7a60c035 // method "test_native_string(application)void"
    pushbytes 0x6a559cb3 // method "test_native_bytes(application)void"
    pushbytes 0x1be60712 // method "test_native_uint64(application)void"
    pushbytes 0x19cb78a4 // method "test_native_biguint(application)void"
    pushbytes 0xf0ef6873 // method "test_native_tuple(application)void"
    pushbytes 0x3d2bfe37 // method "test_native_tuple_method_ref(application)void"
    pushbytes 0x54e98f56 // method "test_nested_tuples(application)void"
    pushbytes 0xf55b7567 // method "test_no_args(application)void"
    pushbytes 0x8598bb43 // method "test_named_tuples(application)void"
    uncover 16
    match __puya_arc4_router___test_is_a_b_route@2 __puya_arc4_router___test_method_selector_kinds_route@3 __puya_arc4_router___test_method_overload_route@4 __puya_arc4_router___test_arg_conversion_route@5 __puya_arc4_router___test_15plus_args_route@6 __puya_arc4_router___test_void_route@7 __puya_arc4_router___test_ref_types_route@8 __puya_arc4_router___test_native_string_route@9 __puya_arc4_router___test_native_bytes_route@10 __puya_arc4_router___test_native_uint64_route@11 __puya_arc4_router___test_native_biguint_route@12 __puya_arc4_router___test_native_tuple_route@13 __puya_arc4_router___test_native_tuple_method_ref_route@14 __puya_arc4_router___test_nested_tuples_route@15 __puya_arc4_router___test_no_args_route@16 __puya_arc4_router___test_named_tuples_route@17
    b __puya_arc4_router___switch_case_default@18

__puya_arc4_router___test_is_a_b_route@2:
    // typed_abi_call/typed_c2c.py:18
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:18
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub test_is_a_b
    intc_3 // 1
    retsub

__puya_arc4_router___test_method_selector_kinds_route@3:
    // typed_abi_call/typed_c2c.py:27
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:27
    // @arc4.abimethod()
    callsub test_method_selector_kinds
    intc_3 // 1
    retsub

__puya_arc4_router___test_method_overload_route@4:
    // typed_abi_call/typed_c2c.py:40
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:40
    // @arc4.abimethod()
    callsub test_method_overload
    intc_3 // 1
    retsub

__puya_arc4_router___test_arg_conversion_route@5:
    // typed_abi_call/typed_c2c.py:55
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:55
    // @arc4.abimethod()
    callsub test_arg_conversion
    intc_3 // 1
    retsub

__puya_arc4_router___test_15plus_args_route@6:
    // typed_abi_call/typed_c2c.py:72
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:72
    // @arc4.abimethod()
    callsub test_15plus_args
    intc_3 // 1
    retsub

__puya_arc4_router___test_void_route@7:
    // typed_abi_call/typed_c2c.py:100
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:100
    // @arc4.abimethod()
    callsub test_void
    intc_3 // 1
    retsub

__puya_arc4_router___test_ref_types_route@8:
    // typed_abi_call/typed_c2c.py:114
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // typed_abi_call/typed_c2c.py:114
    // @arc4.abimethod()
    callsub test_ref_types
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_string_route@9:
    // typed_abi_call/typed_c2c.py:128
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:128
    // @arc4.abimethod()
    callsub test_native_string
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_bytes_route@10:
    // typed_abi_call/typed_c2c.py:139
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:139
    // @arc4.abimethod()
    callsub test_native_bytes
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_uint64_route@11:
    // typed_abi_call/typed_c2c.py:152
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:152
    // @arc4.abimethod()
    callsub test_native_uint64
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_biguint_route@12:
    // typed_abi_call/typed_c2c.py:163
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:163
    // @arc4.abimethod()
    callsub test_native_biguint
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_tuple_route@13:
    // typed_abi_call/typed_c2c.py:174
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:174
    // @arc4.abimethod()
    callsub test_native_tuple
    intc_3 // 1
    retsub

__puya_arc4_router___test_native_tuple_method_ref_route@14:
    // typed_abi_call/typed_c2c.py:233
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:233
    // @arc4.abimethod()
    callsub test_native_tuple_method_ref
    intc_3 // 1
    retsub

__puya_arc4_router___test_nested_tuples_route@15:
    // typed_abi_call/typed_c2c.py:283
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:283
    // @arc4.abimethod()
    callsub test_nested_tuples
    intc_3 // 1
    retsub

__puya_arc4_router___test_no_args_route@16:
    // typed_abi_call/typed_c2c.py:329
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:329
    // @arc4.abimethod()
    callsub test_no_args
    intc_3 // 1
    retsub

__puya_arc4_router___test_named_tuples_route@17:
    // typed_abi_call/typed_c2c.py:339
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:339
    // @arc4.abimethod()
    callsub test_named_tuples
    intc_3 // 1
    retsub

__puya_arc4_router___switch_case_default@18:
    b __puya_arc4_router___after_if_else@24

__puya_arc4_router___bare_routing@20:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@21
    b __puya_arc4_router___switch_case_default@22

__puya_arc4_router_____algopy_default_create@21:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // is creating
    callsub __algopy_default_create
    intc_3 // 1
    retsub

__puya_arc4_router___switch_case_default@22:

__puya_arc4_router___after_if_else@24:
    // typed_abi_call/typed_c2c.py:17
    // class Greeter(ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    // typed_abi_call/typed_c2c.py:18-19
    // @arc4.abimethod
    // def test_is_a_b(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    // typed_abi_call/typed_c2c.py:20-25
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:22
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call/typed_c2c.py:23
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    swap
    // typed_abi_call/typed_c2c.py:19
    // def test_is_a_b(self, a: Bytes, b: Bytes, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:20-25
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    // typed_abi_call/typed_c2c.py:27-28
    // @arc4.abimethod()
    // def test_method_selector_kinds(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:29
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_begin
    bytec 33 // "test1"
    len
    itob
    extract 6 2
    bytec 33 // "test1"
    concat
    // typed_abi_call/typed_c2c.py:28
    // def test_method_selector_kinds(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:29
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:30
    // assert result == "echo: test1"
    bytec 34 // "echo: test1"
    len
    itob
    extract 6 2
    bytec 34 // "echo: test1"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:31
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_begin
    bytec 35 // "test2"
    len
    itob
    extract 6 2
    bytec 35 // "test2"
    concat
    // typed_abi_call/typed_c2c.py:28
    // def test_method_selector_kinds(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:31
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:32
    // assert result == "echo: test2"
    bytec 36 // "echo: test2"
    len
    itob
    extract 6 2
    bytec 36 // "echo: test2"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:33
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_begin
    bytec 37 // "test3"
    len
    itob
    extract 6 2
    bytec 37 // "test3"
    concat
    // typed_abi_call/typed_c2c.py:28
    // def test_method_selector_kinds(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:33
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:34
    // assert result == "echo: test3"
    bytec 38 // "echo: test3"
    len
    itob
    extract 6 2
    bytec 38 // "echo: test3"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:35
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_begin
    bytec 39 // "test4"
    len
    itob
    extract 6 2
    bytec 39 // "test4"
    concat
    // typed_abi_call/typed_c2c.py:28
    // def test_method_selector_kinds(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:35
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:36
    // assert result == "echo: test4"
    bytec 40 // "echo: test4"
    len
    itob
    extract 6 2
    bytec 40 // "echo: test4"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:37
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_begin
    bytec 41 // "test5"
    len
    itob
    extract 6 2
    bytec 41 // "test5"
    concat
    // typed_abi_call/typed_c2c.py:28
    // def test_method_selector_kinds(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:37
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:38
    // assert result == "echo: test5"
    bytec 42 // "echo: test5"
    len
    itob
    extract 6 2
    bytec 42 // "echo: test5"
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    // typed_abi_call/typed_c2c.py:40-41
    // @arc4.abimethod()
    // def test_method_overload(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:42
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_begin
    bytec 43 // "typed + ignore"
    len
    itob
    extract 6 2
    bytec 43 // "typed + ignore"
    concat
    // typed_abi_call/typed_c2c.py:41
    // def test_method_overload(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:42
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:43
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: typed + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 44 // "echo: typed + ignore"
    len
    itob
    extract 6 2
    bytec 44 // "echo: typed + ignore"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:45
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_begin
    bytec 45 // "untyped + ignore"
    len
    itob
    extract 6 2
    bytec 45 // "untyped + ignore"
    concat
    // typed_abi_call/typed_c2c.py:41
    // def test_method_overload(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:45
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // typed_abi_call/typed_c2c.py:46
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: untyped + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 46 // "echo: untyped + ignore"
    len
    itob
    extract 6 2
    bytec 46 // "echo: untyped + ignore"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:48
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_begin
    bytec 47 // "tuple"
    len
    itob
    extract 6 2
    bytec 47 // "tuple"
    concat
    // typed_abi_call/typed_c2c.py:41
    // def test_method_overload(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:48
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    itxn LastLog
    swap
    // typed_abi_call/typed_c2c.py:49
    // assert result[0] == "echo: tuple"
    bytec 13 // "echo: tuple"
    len
    itob
    extract 6 2
    bytec 13 // "echo: tuple"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:50
    // assert arc4.String.from_log(result[1].last_log) == "echo: tuple"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 13 // "echo: tuple"
    len
    itob
    extract 6 2
    bytec 13 // "echo: tuple"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:52
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_begin
    bytec 48 // "untyped"
    len
    itob
    extract 6 2
    bytec 48 // "untyped"
    concat
    // typed_abi_call/typed_c2c.py:41
    // def test_method_overload(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:52
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:53
    // assert arc4.String.from_log(txn_result.last_log) == "echo: untyped"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 49 // "echo: untyped"
    len
    itob
    extract 6 2
    bytec 49 // "echo: untyped"
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    // typed_abi_call/typed_c2c.py:55-56
    // @arc4.abimethod()
    // def test_arg_conversion(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:57
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_begin
    bytec 19 // "converted1"
    len
    itob
    extract 6 2
    bytec 19 // "converted1"
    concat
    // typed_abi_call/typed_c2c.py:56
    // def test_arg_conversion(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:57
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:58
    // assert txn.last_log == b"converted1"
    bytec 19 // 0x636f6e76657274656431
    ==
    assert
    // typed_abi_call/typed_c2c.py:60
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:56
    // def test_arg_conversion(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:60
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 14 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:61
    // assert txn.last_log == op.itob(2)
    intc_2 // 2
    itob
    ==
    assert
    // typed_abi_call/typed_c2c.py:63
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:56
    // def test_arg_conversion(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:63
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:64
    // assert txn.last_log == (op.bzero(56) + op.itob(3))
    pushint 56 // 56
    bzero
    pushint 3 // 3
    itob
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:66
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_begin
    bytec 20 // 0x34
    len
    itob
    extract 6 2
    bytec 20 // 0x34
    concat
    // typed_abi_call/typed_c2c.py:56
    // def test_arg_conversion(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:66
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:67
    // assert txn.last_log == b"4"
    bytec 20 // 0x34
    ==
    assert
    // typed_abi_call/typed_c2c.py:69
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_begin
    pushbytes 0x00
    intc_0 // 0
    intc_3 // 1
    setbit
    // typed_abi_call/typed_c2c.py:56
    // def test_arg_conversion(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:69
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:70
    // assert txn.last_log == b"True"
    pushbytes 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    // typed_abi_call/typed_c2c.py:72-73
    // @arc4.abimethod()
    // def test_15plus_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:74-97
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:94
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    bytec_2 // 0x
    pushbytes 0xde
    concat
    pushbytes 0xad
    concat
    pushbytes 0xbe
    concat
    pushbytes 0xef
    concat
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    bytec_2 // 0x
    // typed_abi_call/typed_c2c.py:90
    // 15,
    pushbytes 0x0f
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:91
    // 16,
    pushbytes 0x10
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:92
    // 17,
    pushbytes 0x11
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:93
    // 18,
    pushbytes 0x12
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:95
    // 20,
    pushbytes 0x14
    // typed_abi_call/typed_c2c.py:90-95
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:73
    // def test_15plus_args(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:74-97
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:76
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:77
    // 2,
    bytec 14 // 0x0000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:78
    // 3,
    bytec 21 // 0x0000000000000003
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:79
    // 4,
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:80
    // 5,
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:81
    // 6,
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:82
    // 7,
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:83
    // 8,
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:84
    // 9,
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:85
    // 10,
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:86
    // 11,
    bytec 50 // 0x000000000000000b
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:87
    // 12,
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:88
    // 13,
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:89
    // 14,
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:74-97
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:98
    // assert result.native == Bytes.from_hex("0F101112DEADBEEF14")
    extract 2 0
    pushbytes 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    // typed_abi_call/typed_c2c.py:100-101
    // @arc4.abimethod()
    // def test_void(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:102
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_begin
    bytec 22 // "World1"
    len
    itob
    extract 6 2
    bytec 22 // "World1"
    concat
    // typed_abi_call/typed_c2c.py:101
    // def test_void(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:102
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:103
    // assert txn.last_log == b"World1"
    bytec 22 // 0x576f726c6431
    ==
    assert
    // typed_abi_call/typed_c2c.py:105
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_begin
    bytec 23 // "World2"
    len
    itob
    extract 6 2
    bytec 23 // "World2"
    concat
    // typed_abi_call/typed_c2c.py:101
    // def test_void(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:105
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:106
    // assert txn.last_log == b"World2"
    bytec 23 // 0x576f726c6432
    ==
    assert
    // typed_abi_call/typed_c2c.py:108
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_begin
    bytec 24 // "World3"
    len
    itob
    extract 6 2
    bytec 24 // "World3"
    concat
    // typed_abi_call/typed_c2c.py:101
    // def test_void(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:108
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:109
    // assert txn.last_log == b"World3"
    bytec 24 // 0x576f726c6433
    ==
    assert
    // typed_abi_call/typed_c2c.py:111
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_begin
    bytec 25 // "World4"
    len
    itob
    extract 6 2
    bytec 25 // "World4"
    concat
    // typed_abi_call/typed_c2c.py:101
    // def test_void(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:111
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:112
    // assert txn.last_log == b"World4"
    bytec 25 // 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    // typed_abi_call/typed_c2c.py:114-115
    // @arc4.abimethod()
    // def test_ref_types(self, app: Application, asset: Asset) -> None:
    proto 2 0
    // typed_abi_call/typed_c2c.py:116-122
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:119
    // Global.current_application_address,
    global CurrentApplicationAddress
    // typed_abi_call/typed_c2c.py:115
    // def test_ref_types(self, app: Application, asset: Asset) -> None:
    frame_dig -2
    frame_dig -1
    frame_dig -2
    itxn_field ApplicationID
    itxn_field Assets
    itxn_field Applications
    itxn_field Accounts
    // typed_abi_call/typed_c2c.py:116-122
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    pushbytes 0xcd727b71 // method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:118
    // asset,
    pushbytes 0x00
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:119
    // Global.current_application_address,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:120
    // app,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:116-122
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:125
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    // typed_abi_call/typed_c2c.py:124-125
    // txn.last_log
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    ==
    // typed_abi_call/typed_c2c.py:123-126
    // assert (
    //     txn.last_log
    //     == asset.name + Global.current_application_address.bytes + app.address.bytes
    // )
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    // typed_abi_call/typed_c2c.py:128-129
    // @arc4.abimethod()
    // def test_native_string(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:130
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_begin
    bytec 8 // "s"
    len
    itob
    extract 6 2
    bytec 8 // "s"
    concat
    // typed_abi_call/typed_c2c.py:129
    // def test_native_string(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:130
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:131
    // assert result1 == "echo: s"
    pushbytes "echo: s"
    ==
    assert
    // typed_abi_call/typed_c2c.py:133
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_begin
    bytec 8 // "s"
    len
    itob
    extract 6 2
    bytec 8 // "s"
    concat
    // typed_abi_call/typed_c2c.py:129
    // def test_native_string(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:133
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:134
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:136
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_begin
    bytec 8 // "s"
    len
    itob
    extract 6 2
    bytec 8 // "s"
    concat
    // typed_abi_call/typed_c2c.py:129
    // def test_native_string(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:136
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:137
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    // typed_abi_call/typed_c2c.py:139-140
    // @arc4.abimethod()
    // def test_native_bytes(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:141
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_begin
    bytec 9 // 0x62
    len
    itob
    extract 6 2
    bytec 9 // 0x62
    concat
    // typed_abi_call/typed_c2c.py:140
    // def test_native_bytes(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:141
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:142
    // assert result1 == b"echo: b"
    pushbytes 0x6563686f3a2062
    ==
    assert
    // typed_abi_call/typed_c2c.py:144
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_begin
    bytec 9 // 0x62
    len
    itob
    extract 6 2
    bytec 9 // 0x62
    concat
    // typed_abi_call/typed_c2c.py:140
    // def test_native_bytes(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:144
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:145
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:147-149
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:148
    // Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    bytec 9 // 0x62
    len
    itob
    extract 6 2
    bytec 9 // 0x62
    concat
    // typed_abi_call/typed_c2c.py:140
    // def test_native_bytes(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:147-149
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // typed_abi_call/typed_c2c.py:150
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    // typed_abi_call/typed_c2c.py:152-153
    // @arc4.abimethod()
    // def test_native_uint64(self, app: Application) -> None:
    proto 1 0
    bytec_2 // ""
    // typed_abi_call/typed_c2c.py:154
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:153
    // def test_native_uint64(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:154
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:155
    // assert result1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:157
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_begin
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:153
    // def test_native_uint64(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:157
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:158
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:160
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:153
    // def test_native_uint64(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:160
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:161
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    // typed_abi_call/typed_c2c.py:163-164
    // @arc4.abimethod()
    // def test_native_biguint(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:165
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:164
    // def test_native_biguint(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:165
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:166
    // assert result1 == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:168
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_begin
    bytec 10 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 10 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:164
    // def test_native_biguint(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:168
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:169
    // assert result2 == result1
    frame_dig 0
    b==
    assert
    // typed_abi_call/typed_c2c.py:171
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:164
    // def test_native_biguint(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:171
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:172
    // assert result3 == result1
    frame_dig 0
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    // typed_abi_call/typed_c2c.py:174-175
    // @arc4.abimethod()
    // def test_native_tuple(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    // typed_abi_call/typed_c2c.py:176-186
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:181
    // "s1",
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:182
    // b"b1",
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:175
    // def test_native_tuple(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:176-186
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:183
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:184
    // 2,
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:176-186
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:187
    // s, b, u, bu = result1.native
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 2
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:188
    // assert s.native == "echo: s1"
    extract 2 0
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:189
    // assert b.native == b"echo: b1"
    extract 2 0
    bytec 51 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:190
    // assert u.native == 2
    btoi
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:191
    // assert bu.native == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:193-203
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:198
    // String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:199
    // Bytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:200
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:201
    // BigUInt(2),
    bytec 10 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 10 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:198
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:199
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:201
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:175
    // def test_native_tuple(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:193-203
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:204
    // assert result1 == result2
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:206-216
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:211
    // arc4.String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:212
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:175
    // def test_native_tuple(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:206-216
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:213
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:214
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:206-216
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:217
    // assert result1 == result3
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:219-227
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:222
    // arc4.String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:223
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:175
    // def test_native_tuple(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:219-227
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:224
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:225
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:219-227
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 2
    cover 3
    swap
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:228
    // assert result1.native[0].native == result_native[0]
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:229
    // assert result1.native[1].native == result_native[1]
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:230
    // assert result1.native[2].native == result_native[2]
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:231
    // assert result1.native[3].native == result_native[3]
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    // typed_abi_call/typed_c2c.py:233-234
    // @arc4.abimethod()
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    dupn 2
    bytec_2 // ""
    // typed_abi_call/typed_c2c.py:235-243
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:238
    // "s1",
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:239
    // b"b1",
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:234
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:235-243
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:240
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:241
    // 2,
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:235-243
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    dup
    cover 2
    frame_bury 0
    uncover 3
    dup
    cover 3
    frame_bury 1
    uncover 3
    dup
    cover 4
    frame_bury 3
    dup
    cover 4
    frame_bury 2
    // typed_abi_call/typed_c2c.py:244
    // (s, b, u, bu) = result
    cover 3
    cover 3
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:245
    // assert s == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:246
    // assert b == b"echo: b1"
    bytec 51 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:247
    // assert u == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:248
    // assert bu == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:250-258
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:253
    // String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:254
    // Bytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:255
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:256
    // BigUInt(2),
    bytec 10 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 10 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:253
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:254
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:256
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:234
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:250-258
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:259
    // assert result_2 == result, "expected native arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    // typed_abi_call/typed_c2c.py:261-269
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:264
    // arc4.String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:265
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:234
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:261-269
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:266
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:267
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:261-269
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:270
    // assert result_3 == result, "expected arc4 arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    // typed_abi_call/typed_c2c.py:272-280
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:275
    // arc4.String("s1"),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:276
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:234
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:272-280
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:277
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:278
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:272-280
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:281
    // assert result_native == result
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    // typed_abi_call/typed_c2c.py:283-284
    // @arc4.abimethod()
    // def test_nested_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:285-290
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:288
    // (("s1", "s2"), (1, 2, b"3")),
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    bytec 16 // "s2"
    len
    itob
    extract 6 2
    bytec 16 // "s2"
    concat
    swap
    bytec 17 // 0x33
    len
    itob
    extract 6 2
    bytec 17 // 0x33
    concat
    cover 2
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec_2 // 0x
    bytec 4 // 0x0000000000000001
    concat
    bytec 14 // 0x0000000000000002
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:284
    // def test_nested_tuples(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:285-290
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:291
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:292
    // assert s1 == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:293
    // assert s2 == "echo: s2"
    bytec 18 // "echo: s2"
    len
    itob
    extract 6 2
    bytec 18 // "echo: s2"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:294
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:295
    // assert u64_2 == 3
    bytec 21 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:296
    // assert bytez == b"echo: 3"
    bytec 52 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:298-303
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:301
    // ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    bytec 16 // "s2"
    len
    itob
    extract 6 2
    bytec 16 // "s2"
    concat
    bytec_1 // "s1"
    len
    itob
    extract 6 2
    bytec_1 // "s1"
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    swap
    dup
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    intc_3 // 1
    itob
    bytec 17 // 0x33
    len
    itob
    extract 6 2
    bytec 17 // 0x33
    concat
    swap
    bytec_2 // 0x
    swap
    concat
    bytec 14 // 0x0000000000000002
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:284
    // def test_nested_tuples(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:298-303
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:304
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:305
    // assert s1 == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:306
    // assert s2 == "echo: s2"
    bytec 18 // "echo: s2"
    len
    itob
    extract 6 2
    bytec 18 // "echo: s2"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:307
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:308
    // assert u64_2 == 3
    bytec 21 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:309
    // assert bytez == b"echo: 3"
    bytec 52 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:311-321
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:316
    // arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    bytec 53 // "s1b"
    len
    itob
    extract 6 2
    bytec 53 // "s1b"
    concat
    bytec 54 // "s2b"
    len
    itob
    extract 6 2
    bytec 54 // "s2b"
    concat
    swap
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:317
    // arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    bytec 55 // 0x3362
    len
    itob
    extract 6 2
    bytec 55 // 0x3362
    concat
    bytec_2 // 0x
    bytec 50 // 0x000000000000000b
    concat
    pushbytes 0x0000000000000015
    concat
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:314-319
    // arc4.Tuple(
    //     (
    //         arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //         arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //     )
    // ),
    pushint 4 // 4
    itob
    extract 6 2
    bytec_2 // 0x
    swap
    concat
    dig 2
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:284
    // def test_nested_tuples(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:311-321
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:322
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:323
    // assert s1 == "echo: s1b"
    pushbytes "echo: s1b"
    ==
    assert
    // typed_abi_call/typed_c2c.py:324
    // assert s2 == "echo: s2b"
    bytec 56 // "echo: s2b"
    len
    itob
    extract 6 2
    bytec 56 // "echo: s2b"
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:325
    // assert u64_1 == 12
    pushint 12 // 12
    ==
    assert
    // typed_abi_call/typed_c2c.py:326
    // assert u64_2 == 22
    pushbytes 0x0000000000000016
    b==
    assert
    // typed_abi_call/typed_c2c.py:327
    // assert bytez == b"echo: 3b"
    pushbytes 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    // typed_abi_call/typed_c2c.py:329-330
    // @arc4.abimethod()
    // def test_no_args(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:331
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:330
    // def test_no_args(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:331
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    btoi
    // typed_abi_call/typed_c2c.py:332
    // assert result == 42
    pushint 42 // 42
    ==
    assert
    // typed_abi_call/typed_c2c.py:333
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:330
    // def test_no_args(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:333
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:334
    // assert arc4_result == 42
    bytec 57 // 0x000000000000002a
    b==
    assert
    // typed_abi_call/typed_c2c.py:336
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    // typed_abi_call/typed_c2c.py:330
    // def test_no_args(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:336
    // arc4.abi_call(Logger.no_args, app_id=app)
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // typed_abi_call/typed_c2c.py:337
    // assert arc4.UInt64.from_log(op.ITxn.last_log()) == 42
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    bytec 57 // 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    // typed_abi_call/typed_c2c.py:339-340
    // @arc4.abimethod()
    // def test_named_tuples(self, app: Application) -> None:
    proto 1 0
    // typed_abi_call/typed_c2c.py:341-346
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:343
    // (UInt64(1), String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_2 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:344
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_2 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:340
    // def test_named_tuples(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:341-346
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 58 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:347
    // assert result
    assert
    // typed_abi_call/typed_c2c.py:348-353
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:350
    // (UInt64(2), String("log 2")),
    intc_2 // 2
    itob
    bytec 59 // "log 2"
    len
    itob
    extract 6 2
    bytec 59 // "log 2"
    concat
    swap
    bytec_2 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:351
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 11 // "log 1"
    len
    itob
    extract 6 2
    bytec 11 // "log 1"
    concat
    swap
    bytec_2 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:340
    // def test_named_tuples(self, app: Application) -> None:
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:348-353
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 58 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:354
    // assert not result
    !
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create() -> void:
__algopy_default_create:
    proto 0 0
    retsub
