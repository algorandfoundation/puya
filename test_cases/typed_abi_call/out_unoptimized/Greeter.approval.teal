#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 6 2 1
    bytecblock 0x151f7c75 0x 0x7331 0x6231 0x0000000000000001 0x9bf81913 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 0x16e03919 0x6c6f672031 0x73 0x62 0x02 0xb4b4334e 0x6563686f3a207475706c65 0x0000000000000002 "echo: s1" 0x7332 0x33 0x6563686f3a207332 0x636f6e76657274656431 0x34 0x0000000000000003 0x576f726c6431 0x576f726c6432 0x576f726c6433 0x576f726c6434 0x4a444c77 0x2659e818 0xa9fb6cf1 0xd8cc363b 0x03 0xab271ce4 0xb862ee19 0x7465737431 0x6563686f3a207465737431 0x7465737432 0x6563686f3a207465737432 0x7465737433 0x6563686f3a207465737433 0x7465737434 0x6563686f3a207465737434 0x7465737435 0x6563686f3a207465737435 0x7479706564202b2069676e6f7265 0x6563686f3a207479706564202b2069676e6f7265 0x756e7479706564202b2069676e6f7265 0x6563686f3a20756e7479706564202b2069676e6f7265 0x7475706c65 0x756e7479706564 0x6563686f3a20756e7479706564 0x000000000000000b 0x6563686f3a206231 0x6563686f3a2033 0x733162 0x733262 0x3362 0x6563686f3a20733262 0x000000000000002a 0xddd07185 "log 2"

main_block@0:

main_block@1:
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@23

main_abi_routing@2:
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x07916bea // method "test_is_a_b(byte[],byte[],application)void"
    pushbytes 0x1859b0ba // method "test_method_selector_kinds(application)void"
    pushbytes 0x4eb11b0d // method "test_method_overload(application)void"
    pushbytes 0x0d176a4a // method "test_arg_conversion(application)void"
    pushbytes 0xb54730c8 // method "test_15plus_args(application)void"
    pushbytes 0x7859eaf7 // method "test_void(application)void"
    pushbytes 0x24478a3c // method "test_ref_types(application,asset)void"
    pushbytes 0xe44b2eaf // method "test_account_to_address(application)void"
    pushbytes 0x7a60c035 // method "test_native_string(application)void"
    pushbytes 0x6a559cb3 // method "test_native_bytes(application)void"
    pushbytes 0x1be60712 // method "test_native_uint64(application)void"
    pushbytes 0x19cb78a4 // method "test_native_biguint(application)void"
    pushbytes 0xf0ef6873 // method "test_native_tuple(application)void"
    pushbytes 0x3d2bfe37 // method "test_native_tuple_method_ref(application)void"
    pushbytes 0x54e98f56 // method "test_nested_tuples(application)void"
    pushbytes 0xf55b7567 // method "test_no_args(application)void"
    pushbytes 0x8598bb43 // method "test_named_tuples(application)void"
    pushbytes 0xbb691362 // method "test_arc4_struct(application)void"
    uncover 18
    match main_test_is_a_b_route@3 main_test_method_selector_kinds_route@4 main_test_method_overload_route@5 main_test_arg_conversion_route@6 main_test_15plus_args_route@7 main_test_void_route@8 main_test_ref_types_route@9 main_test_account_to_address_route@10 main_test_native_string_route@11 main_test_native_bytes_route@12 main_test_native_uint64_route@13 main_test_native_biguint_route@14 main_test_native_tuple_route@15 main_test_native_tuple_method_ref_route@16 main_test_nested_tuples_route@17 main_test_no_args_route@18 main_test_named_tuples_route@19 main_test_arc4_struct_route@20

main_switch_case_default@21:

main_switch_case_next@22:

main_after_if_else@27:
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28:
    return

main_test_arc4_struct_route@20:
    // typed_abi_call/typed_c2c.py:372
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:372
    // @arc4.abimethod()
    callsub test_arc4_struct
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_named_tuples_route@19:
    // typed_abi_call/typed_c2c.py:355
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:355
    // @arc4.abimethod()
    callsub test_named_tuples
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_no_args_route@18:
    // typed_abi_call/typed_c2c.py:345
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:345
    // @arc4.abimethod()
    callsub test_no_args
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_nested_tuples_route@17:
    // typed_abi_call/typed_c2c.py:299
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:299
    // @arc4.abimethod()
    callsub test_nested_tuples
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_tuple_method_ref_route@16:
    // typed_abi_call/typed_c2c.py:249
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:249
    // @arc4.abimethod()
    callsub test_native_tuple_method_ref
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_tuple_route@15:
    // typed_abi_call/typed_c2c.py:190
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:190
    // @arc4.abimethod()
    callsub test_native_tuple
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_biguint_route@14:
    // typed_abi_call/typed_c2c.py:179
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:179
    // @arc4.abimethod()
    callsub test_native_biguint
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_uint64_route@13:
    // typed_abi_call/typed_c2c.py:168
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:168
    // @arc4.abimethod()
    callsub test_native_uint64
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_bytes_route@12:
    // typed_abi_call/typed_c2c.py:155
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:155
    // @arc4.abimethod()
    callsub test_native_bytes
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_native_string_route@11:
    // typed_abi_call/typed_c2c.py:144
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:144
    // @arc4.abimethod()
    callsub test_native_string
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_account_to_address_route@10:
    // typed_abi_call/typed_c2c.py:135
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:135
    // @arc4.abimethod()
    callsub test_account_to_address
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_ref_types_route@9:
    // typed_abi_call/typed_c2c.py:121
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // typed_abi_call/typed_c2c.py:121
    // @arc4.abimethod()
    callsub test_ref_types
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_void_route@8:
    // typed_abi_call/typed_c2c.py:107
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:107
    // @arc4.abimethod()
    callsub test_void
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_15plus_args_route@7:
    // typed_abi_call/typed_c2c.py:79
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:79
    // @arc4.abimethod()
    callsub test_15plus_args
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_arg_conversion_route@6:
    // typed_abi_call/typed_c2c.py:62
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:62
    // @arc4.abimethod()
    callsub test_arg_conversion
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_method_overload_route@5:
    // typed_abi_call/typed_c2c.py:47
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:47
    // @arc4.abimethod()
    callsub test_method_overload
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_method_selector_kinds_route@4:
    // typed_abi_call/typed_c2c.py:33
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:33
    // @arc4.abimethod()
    callsub test_method_selector_kinds
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_test_is_a_b_route@3:
    // typed_abi_call/typed_c2c.py:24
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txnas Applications
    // typed_abi_call/typed_c2c.py:24
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub test_is_a_b
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28

main_bare_routing@23:
    // typed_abi_call/typed_c2c.py:23
    // class Greeter(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@24

main_switch_case_default@25:

main_switch_case_next@26:
    b main_after_if_else@27

main___algopy_default_create@24:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@29:

main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create@30:
    intc_3 // 1
    b main_after_inlined_test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__@28


// test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
test_is_a_b:
    // typed_abi_call/typed_c2c.py:24-25
    // @arc4.abimethod
    // def test_is_a_b(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0

test_is_a_b_block@0:
    // typed_abi_call/typed_c2c.py:26-31
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:28
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call/typed_c2c.py:29
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    swap
    // typed_abi_call/typed_c2c.py:30
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:26-31
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    pushbytes 0xc77212bc // method "is_a_b(byte[],byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_is_a_b_next_txn@1:
    // typed_abi_call/typed_c2c.py:26-31
    // arc4.abi_call(
    //     "is_a_b(byte[],byte[])void",
    //     a,
    //     b,
    //     app_id=app,
    // )
    itxn_submit
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
test_method_selector_kinds:
    // typed_abi_call/typed_c2c.py:33-34
    // @arc4.abimethod()
    // def test_method_selector_kinds(self, app: Application) -> None:
    proto 1 0

test_method_selector_kinds_block@0:
    // typed_abi_call/typed_c2c.py:35
    // assert arc4.arc4_signature(Logger.echo) == arc4.arc4_signature("echo(string)string")
    bytec 5 // method "echo(string)string"
    dup
    ==
    assert
    // typed_abi_call/typed_c2c.py:36
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_begin
    bytec 33 // 0x7465737431
    len
    itob
    extract 6 2
    bytec 33 // 0x7465737431
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@1:
    // typed_abi_call/typed_c2c.py:36
    // result, _txn = arc4.abi_call(Logger.echo, arc4.String("test1"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:37
    // assert result == "echo: test1"
    bytec 34 // 0x6563686f3a207465737431
    len
    itob
    extract 6 2
    bytec 34 // 0x6563686f3a207465737431
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:38
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_begin
    bytec 35 // 0x7465737432
    len
    itob
    extract 6 2
    bytec 35 // 0x7465737432
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@2:
    // typed_abi_call/typed_c2c.py:38
    // result, _txn = arc4.abi_call(LoggerClient.echo, "test2", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:39
    // assert result == "echo: test2"
    bytec 36 // 0x6563686f3a207465737432
    len
    itob
    extract 6 2
    bytec 36 // 0x6563686f3a207465737432
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:40
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_begin
    bytec 37 // 0x7465737433
    len
    itob
    extract 6 2
    bytec 37 // 0x7465737433
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@3:
    // typed_abi_call/typed_c2c.py:40
    // result, _txn = arc4.abi_call[arc4.String]("echo", "test3", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:41
    // assert result == "echo: test3"
    bytec 38 // 0x6563686f3a207465737433
    len
    itob
    extract 6 2
    bytec 38 // 0x6563686f3a207465737433
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:42
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_begin
    bytec 39 // 0x7465737434
    len
    itob
    extract 6 2
    bytec 39 // 0x7465737434
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@4:
    // typed_abi_call/typed_c2c.py:42
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)", "test4", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:43
    // assert result == "echo: test4"
    bytec 40 // 0x6563686f3a207465737434
    len
    itob
    extract 6 2
    bytec 40 // 0x6563686f3a207465737434
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:44
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_begin
    bytec 41 // 0x7465737435
    len
    itob
    extract 6 2
    bytec 41 // 0x7465737435
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_selector_kinds_next_txn@5:
    // typed_abi_call/typed_c2c.py:44
    // result, _txn = arc4.abi_call[arc4.String]("echo(string)string", "test5", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:45
    // assert result == "echo: test5"
    bytec 42 // 0x6563686f3a207465737435
    len
    itob
    extract 6 2
    bytec 42 // 0x6563686f3a207465737435
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
test_method_overload:
    // typed_abi_call/typed_c2c.py:47-48
    // @arc4.abimethod()
    // def test_method_overload(self, app: Application) -> None:
    proto 1 0

test_method_overload_block@0:
    // typed_abi_call/typed_c2c.py:49
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_begin
    bytec 43 // 0x7479706564202b2069676e6f7265
    len
    itob
    extract 6 2
    bytec 43 // 0x7479706564202b2069676e6f7265
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@1:
    // typed_abi_call/typed_c2c.py:49
    // arc4.abi_call[arc4.String]("echo(string)string", "typed + ignore", app_id=app)
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:50
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: typed + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 44 // 0x6563686f3a207479706564202b2069676e6f7265
    len
    itob
    extract 6 2
    bytec 44 // 0x6563686f3a207479706564202b2069676e6f7265
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:52
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_begin
    bytec 45 // 0x756e7479706564202b2069676e6f7265
    len
    itob
    extract 6 2
    bytec 45 // 0x756e7479706564202b2069676e6f7265
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@2:
    // typed_abi_call/typed_c2c.py:52
    // arc4.abi_call("echo(string)string", "untyped + ignore", app_id=app)
    itxn_submit
    // typed_abi_call/typed_c2c.py:53
    // assert arc4.String.from_log(op.ITxn.last_log()) == "echo: untyped + ignore"
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 46 // 0x6563686f3a20756e7479706564202b2069676e6f7265
    len
    itob
    extract 6 2
    bytec 46 // 0x6563686f3a20756e7479706564202b2069676e6f7265
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:55
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_begin
    bytec 47 // 0x7475706c65
    len
    itob
    extract 6 2
    bytec 47 // 0x7475706c65
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@3:
    // typed_abi_call/typed_c2c.py:55
    // result = arc4.abi_call[arc4.String]("echo(string)string", "tuple", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    itxn LastLog
    swap
    // typed_abi_call/typed_c2c.py:56
    // assert result[0] == "echo: tuple"
    bytec 13 // 0x6563686f3a207475706c65
    len
    itob
    extract 6 2
    bytec 13 // 0x6563686f3a207475706c65
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:57
    // assert arc4.String.from_log(result[1].last_log) == "echo: tuple"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 13 // 0x6563686f3a207475706c65
    len
    itob
    extract 6 2
    bytec 13 // 0x6563686f3a207475706c65
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:59
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_begin
    bytec 48 // 0x756e7479706564
    len
    itob
    extract 6 2
    bytec 48 // 0x756e7479706564
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 5 // method "echo(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_method_overload_next_txn@4:
    // typed_abi_call/typed_c2c.py:59
    // txn_result = arc4.abi_call("echo(string)string", "untyped", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:60
    // assert arc4.String.from_log(txn_result.last_log) == "echo: untyped"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 49 // 0x6563686f3a20756e7479706564
    len
    itob
    extract 6 2
    bytec 49 // 0x6563686f3a20756e7479706564
    concat
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
test_arg_conversion:
    // typed_abi_call/typed_c2c.py:62-63
    // @arc4.abimethod()
    // def test_arg_conversion(self, app: Application) -> None:
    proto 1 0

test_arg_conversion_block@0:
    // typed_abi_call/typed_c2c.py:64
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_begin
    bytec 19 // 0x636f6e76657274656431
    len
    itob
    extract 6 2
    bytec 19 // 0x636f6e76657274656431
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@1:
    // typed_abi_call/typed_c2c.py:64
    // txn = arc4.abi_call(Logger.log_string, "converted1", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:65
    // assert txn.last_log == b"converted1"
    bytec 19 // 0x636f6e76657274656431
    ==
    assert
    // typed_abi_call/typed_c2c.py:67
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x3c1058d9 // method "log(uint64)void"
    itxn_field ApplicationArgs
    bytec 14 // 0x0000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@2:
    // typed_abi_call/typed_c2c.py:67
    // txn = arc4.abi_call(Logger.log_uint64, 2, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:68
    // assert txn.last_log == op.itob(2)
    intc_2 // 2
    itob
    ==
    assert
    // typed_abi_call/typed_c2c.py:70
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6af45930 // method "log(uint512)void"
    itxn_field ApplicationArgs
    pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@3:
    // typed_abi_call/typed_c2c.py:70
    // txn = arc4.abi_call(Logger.log_uint512, 3, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:71
    // assert txn.last_log == (op.bzero(56) + op.itob(3))
    pushint 56 // 56
    bzero
    pushint 3 // 3
    itob
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:73
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_begin
    bytec 20 // 0x34
    len
    itob
    extract 6 2
    bytec 20 // 0x34
    concat
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0xb500e111 // method "log(byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@4:
    // typed_abi_call/typed_c2c.py:73
    // txn = arc4.abi_call(Logger.log_bytes, b"4", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:74
    // assert txn.last_log == b"4"
    bytec 20 // 0x34
    ==
    assert
    // typed_abi_call/typed_c2c.py:76
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    pushbytes 0x6eed7ec3 // method "log(bool)void"
    itxn_field ApplicationArgs
    pushbytes 0x80
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arg_conversion_next_txn@5:
    // typed_abi_call/typed_c2c.py:76
    // txn = arc4.abi_call(Logger.log_bool, True, app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:77
    // assert txn.last_log == b"True"
    pushbytes 0x54727565
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
test_15plus_args:
    // typed_abi_call/typed_c2c.py:79-80
    // @arc4.abimethod()
    // def test_15plus_args(self, app: Application) -> None:
    proto 1 0

test_15plus_args_block@0:
    // typed_abi_call/typed_c2c.py:81-104
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:101
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    bytec_1 // 0x
    pushbytes 0xde
    concat
    pushbytes 0xad
    concat
    pushbytes 0xbe
    concat
    pushbytes 0xef
    concat
    bytec_1 // 0x
    concat
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    bytec_1 // 0x
    // typed_abi_call/typed_c2c.py:97
    // 15,
    pushbytes 0x0f
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:98
    // 16,
    pushbytes 0x10
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:99
    // 17,
    pushbytes 0x11
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    // typed_abi_call/typed_c2c.py:100
    // 18,
    pushbytes 0x12
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:102
    // 20,
    pushbytes 0x14
    // typed_abi_call/typed_c2c.py:97-102
    // 15,
    // 16,
    // 17,
    // 18,
    // arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    // 20,
    concat
    bytec_1 // 0x
    concat
    // typed_abi_call/typed_c2c.py:103
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:81-104
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    pushbytes 0xba0b4381 // method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:83
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:84
    // 2,
    bytec 14 // 0x0000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:85
    // 3,
    bytec 21 // 0x0000000000000003
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:86
    // 4,
    pushbytes 0x0000000000000004
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:87
    // 5,
    pushbytes 0x0000000000000005
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:88
    // 6,
    pushbytes 0x0000000000000006
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:89
    // 7,
    pushbytes 0x0000000000000007
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:90
    // 8,
    pushbytes 0x0000000000000008
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:91
    // 9,
    pushbytes 0x0000000000000009
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:92
    // 10,
    pushbytes 0x000000000000000a
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:93
    // 11,
    bytec 50 // 0x000000000000000b
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:94
    // 12,
    pushbytes 0x000000000000000c
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:95
    // 13,
    pushbytes 0x000000000000000d
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:96
    // 14,
    pushbytes 0x000000000000000e
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:81-104
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_15plus_args_next_txn@1:
    // typed_abi_call/typed_c2c.py:81-104
    // result, txn = arc4.abi_call(
    //     Logger.return_args_after_14th,
    //     1,
    //     2,
    //     3,
    //     4,
    //     5,
    //     6,
    //     7,
    //     8,
    //     9,
    //     10,
    //     11,
    //     12,
    //     13,
    //     14,
    //     15,
    //     16,
    //     17,
    //     18,
    //     arc4.Tuple((arc4.UInt8(0xDE), arc4.UInt8(0xAD), arc4.UInt8(0xBE), arc4.UInt8(0xEF))),
    //     20,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:105
    // assert result.native == Bytes.from_hex("0F101112DEADBEEF14")
    extract 2 0
    pushbytes 0x0f101112deadbeef14
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
test_void:
    // typed_abi_call/typed_c2c.py:107-108
    // @arc4.abimethod()
    // def test_void(self, app: Application) -> None:
    proto 1 0

test_void_block@0:
    // typed_abi_call/typed_c2c.py:109
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_begin
    bytec 22 // 0x576f726c6431
    len
    itob
    extract 6 2
    bytec 22 // 0x576f726c6431
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@1:
    // typed_abi_call/typed_c2c.py:109
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)void", "World1", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:110
    // assert txn.last_log == b"World1"
    bytec 22 // 0x576f726c6431
    ==
    assert
    // typed_abi_call/typed_c2c.py:112
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_begin
    bytec 23 // 0x576f726c6432
    len
    itob
    extract 6 2
    bytec 23 // 0x576f726c6432
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@2:
    // typed_abi_call/typed_c2c.py:112
    // txn = arc4.abi_call(LOG_METHOD_NAME + "(string)", "World2", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:113
    // assert txn.last_log == b"World2"
    bytec 23 // 0x576f726c6432
    ==
    assert
    // typed_abi_call/typed_c2c.py:115
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_begin
    bytec 24 // 0x576f726c6433
    len
    itob
    extract 6 2
    bytec 24 // 0x576f726c6433
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@3:
    // typed_abi_call/typed_c2c.py:115
    // txn = arc4.abi_call(LOG_METHOD_NAME, arc4.String("World3"), app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:116
    // assert txn.last_log == b"World3"
    bytec 24 // 0x576f726c6433
    ==
    assert
    // typed_abi_call/typed_c2c.py:118
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_begin
    bytec 25 // 0x576f726c6434
    len
    itob
    extract 6 2
    bytec 25 // 0x576f726c6434
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 12 // method "log(string)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_void_next_txn@4:
    // typed_abi_call/typed_c2c.py:118
    // txn = arc4.abi_call(Logger.log_string, "World4", app_id=app)
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:119
    // assert txn.last_log == b"World4"
    bytec 25 // 0x576f726c6434
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
test_ref_types:
    // typed_abi_call/typed_c2c.py:121-122
    // @arc4.abimethod()
    // def test_ref_types(self, app: Application, asset: Asset) -> None:
    proto 2 0

test_ref_types_block@0:
    // typed_abi_call/typed_c2c.py:123-129
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:126
    // Global.current_application_address,
    global CurrentApplicationAddress
    // typed_abi_call/typed_c2c.py:127
    // app,
    frame_dig -2
    // typed_abi_call/typed_c2c.py:125
    // asset,
    frame_dig -1
    // typed_abi_call/typed_c2c.py:128
    // app_id=app,
    frame_dig -2
    itxn_field ApplicationID
    itxn_field Assets
    itxn_field Applications
    itxn_field Accounts
    // typed_abi_call/typed_c2c.py:123-129
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    pushbytes 0xcd727b71 // method "log(asset,account,application)void"
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:125
    // asset,
    pushbytes 0x00
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:126
    // Global.current_application_address,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:127
    // app,
    pushbytes 0x01
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:123-129
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_ref_types_next_txn@1:
    // typed_abi_call/typed_c2c.py:123-129
    // txn = arc4.abi_call(
    //     Logger.log_asset_account_app,
    //     asset,
    //     Global.current_application_address,
    //     app,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:132
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    global CurrentApplicationAddress
    concat
    frame_dig -2
    app_params_get AppAddress
    assert // application exists
    concat
    // typed_abi_call/typed_c2c.py:131-132
    // txn.last_log
    // == asset.name + Global.current_application_address.bytes + app.address.bytes
    ==
    // typed_abi_call/typed_c2c.py:130-133
    // assert (
    //     txn.last_log
    //     == asset.name + Global.current_application_address.bytes + app.address.bytes
    // )
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_account_to_address(app: uint64) -> void:
test_account_to_address:
    // typed_abi_call/typed_c2c.py:135-136
    // @arc4.abimethod()
    // def test_account_to_address(self, app: Application) -> None:
    proto 1 0

test_account_to_address_block@0:
    // typed_abi_call/typed_c2c.py:137-141
    // txn = arc4.abi_call(
    //     Logger.log_address,
    //     Global.current_application_address,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:139
    // Global.current_application_address,
    global CurrentApplicationAddress
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid size
    // typed_abi_call/typed_c2c.py:140
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:137-141
    // txn = arc4.abi_call(
    //     Logger.log_address,
    //     Global.current_application_address,
    //     app_id=app,
    // )
    pushbytes 0x0437b17e // method "log(address)void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_account_to_address_next_txn@1:
    // typed_abi_call/typed_c2c.py:137-141
    // txn = arc4.abi_call(
    //     Logger.log_address,
    //     Global.current_application_address,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    // typed_abi_call/typed_c2c.py:142
    // assert txn.last_log == Global.current_application_address.bytes
    global CurrentApplicationAddress
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
test_native_string:
    // typed_abi_call/typed_c2c.py:144-145
    // @arc4.abimethod()
    // def test_native_string(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0

test_native_string_block@0:
    // typed_abi_call/typed_c2c.py:146
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_begin
    bytec 9 // 0x73
    len
    itob
    extract 6 2
    bytec 9 // 0x73
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@1:
    // typed_abi_call/typed_c2c.py:146
    // result1, _txn = arc4.abi_call(Logger.echo_native_string, "s", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:147
    // assert result1 == "echo: s"
    pushbytes "echo: s"
    ==
    assert
    // typed_abi_call/typed_c2c.py:149
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_begin
    bytec 9 // "s"
    len
    itob
    extract 6 2
    bytec 9 // "s"
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@2:
    // typed_abi_call/typed_c2c.py:149
    // result2, _txn = arc4.abi_call(Logger.echo_native_string, String("s"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    // typed_abi_call/typed_c2c.py:150
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:152
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_begin
    bytec 9 // 0x73
    len
    itob
    extract 6 2
    bytec 9 // 0x73
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 26 // method "echo_native_string(string)string"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_string_next_txn@3:
    // typed_abi_call/typed_c2c.py:152
    // result3, _txn = arc4.abi_call(Logger.echo_native_string, arc4.String("s"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    // typed_abi_call/typed_c2c.py:153
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
test_native_bytes:
    // typed_abi_call/typed_c2c.py:155-156
    // @arc4.abimethod()
    // def test_native_bytes(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0

test_native_bytes_block@0:
    // typed_abi_call/typed_c2c.py:157
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_begin
    bytec 10 // 0x62
    len
    itob
    extract 6 2
    bytec 10 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@1:
    // typed_abi_call/typed_c2c.py:157
    // result1, _txn = arc4.abi_call(Logger.echo_native_bytes, b"b", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:158
    // assert result1 == b"echo: b"
    pushbytes 0x6563686f3a2062
    ==
    assert
    // typed_abi_call/typed_c2c.py:160
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_begin
    bytec 10 // 0x62
    len
    itob
    extract 6 2
    bytec 10 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@2:
    // typed_abi_call/typed_c2c.py:160
    // result2, _txn = arc4.abi_call(Logger.echo_native_bytes, Bytes(b"b"), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    // typed_abi_call/typed_c2c.py:161
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:163-165
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:164
    // Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    bytec 10 // 0x62
    len
    itob
    extract 6 2
    bytec 10 // 0x62
    concat
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:163-165
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    bytec 27 // method "echo_native_bytes(byte[])byte[]"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_bytes_next_txn@3:
    // typed_abi_call/typed_c2c.py:163-165
    // result3, _txn = arc4.abi_call(
    //     Logger.echo_native_bytes, arc4.DynamicBytes(b"b"), app_id=app
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    extract 2 0
    // typed_abi_call/typed_c2c.py:166
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
test_native_uint64:
    // typed_abi_call/typed_c2c.py:168-169
    // @arc4.abimethod()
    // def test_native_uint64(self, app: Application) -> None:
    proto 1 0
    bytec_1 // ""

test_native_uint64_block@0:
    // typed_abi_call/typed_c2c.py:170
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@1:
    // typed_abi_call/typed_c2c.py:170
    // result1, _txn = arc4.abi_call(Logger.echo_native_uint64, 1, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:171
    // assert result1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:173
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_begin
    intc_3 // 1
    itob
    frame_dig -1
    itxn_field ApplicationID
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@2:
    // typed_abi_call/typed_c2c.py:173
    // result2, _txn = arc4.abi_call(Logger.echo_native_uint64, UInt64(1), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:174
    // assert result2 == result1
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:176
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 28 // method "echo_native_uint64(uint64)uint64"
    itxn_field ApplicationArgs
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_uint64_next_txn@3:
    // typed_abi_call/typed_c2c.py:176
    // result3, _txn = arc4.abi_call(Logger.echo_native_uint64, arc4.UInt64(1), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:177
    // assert result3 == result1
    frame_dig 0
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
test_native_biguint:
    // typed_abi_call/typed_c2c.py:179-180
    // @arc4.abimethod()
    // def test_native_biguint(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0

test_native_biguint_block@0:
    // typed_abi_call/typed_c2c.py:181
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@1:
    // typed_abi_call/typed_c2c.py:181
    // result1, _txn = arc4.abi_call(Logger.echo_native_biguint, 2, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:182
    // assert result1 == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:184
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_begin
    bytec 11 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 11 // 0x02
    b|
    frame_dig -1
    itxn_field ApplicationID
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@2:
    // typed_abi_call/typed_c2c.py:184
    // result2, _txn = arc4.abi_call(Logger.echo_native_biguint, BigUInt(2), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:185
    // assert result2 == result1
    frame_dig 0
    b==
    assert
    // typed_abi_call/typed_c2c.py:187
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 29 // method "echo_native_biguint(uint512)uint512"
    itxn_field ApplicationArgs
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_biguint_next_txn@3:
    // typed_abi_call/typed_c2c.py:187
    // result3, _txn = arc4.abi_call(Logger.echo_native_biguint, arc4.UInt512(2), app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:188
    // assert result3 == result1
    frame_dig 0
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
test_native_tuple:
    // typed_abi_call/typed_c2c.py:190-191
    // @arc4.abimethod()
    // def test_native_tuple(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0

test_native_tuple_block@0:
    // typed_abi_call/typed_c2c.py:192-202
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:197
    // "s1",
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:198
    // b"b1",
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:201
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:192-202
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:199
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:200
    // 2,
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:192-202
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@1:
    // typed_abi_call/typed_c2c.py:192-202
    // # python literals
    // result1, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    frame_bury 0
    // typed_abi_call/typed_c2c.py:203
    // s, b, u, bu = result1.native
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 3
    swap
    uncover 2
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:204
    // assert s.native == "echo: s1"
    extract 2 0
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:205
    // assert b.native == b"echo: b1"
    extract 2 0
    bytec 51 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:206
    // assert u.native == 2
    btoi
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:207
    // assert bu.native == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:209-219
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:214
    // String("s1"),
    bytec_2 // "s1"
    len
    itob
    extract 6 2
    bytec_2 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:215
    // Bytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:216
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:217
    // BigUInt(2),
    bytec 11 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 11 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:214
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:215
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:217
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:218
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:209-219
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@2:
    // typed_abi_call/typed_c2c.py:209-219
    // # test again using native types in arguments
    // result2, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:220
    // assert result1 == result2
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:222-232
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:227
    // arc4.String("s1"),
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:228
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:231
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:222-232
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:229
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:230
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:222-232
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@3:
    // typed_abi_call/typed_c2c.py:222-232
    // # test again using arc4 types in arguments
    // result3, txn = arc4.abi_call[
    //     arc4.Tuple[arc4.String, arc4.DynamicBytes, arc4.UInt64, arc4.UInt512]
    // ](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:233
    // assert result1 == result3
    frame_dig 0
    ==
    assert
    // typed_abi_call/typed_c2c.py:235-243
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:238
    // arc4.String("s1"),
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:239
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:242
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:235-243
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:240
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:241
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:235-243
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_next_txn@4:
    // typed_abi_call/typed_c2c.py:235-243
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 2
    cover 3
    swap
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:244
    // assert result1.native[0].native == result_native[0]
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:245
    // assert result1.native[1].native == result_native[1]
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:246
    // assert result1.native[2].native == result_native[2]
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    uncover 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:247
    // assert result1.native[3].native == result_native[3]
    pushint 12 // 12
    pushint 64 // 64
    extract3
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple_method_ref(app: uint64) -> void:
test_native_tuple_method_ref:
    // typed_abi_call/typed_c2c.py:249-250
    // @arc4.abimethod()
    // def test_native_tuple_method_ref(self, app: Application) -> None:
    proto 1 0
    intc_0 // 0
    dupn 2
    bytec_1 // ""

test_native_tuple_method_ref_block@0:
    // typed_abi_call/typed_c2c.py:251-259
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:254
    // "s1",
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:255
    // b"b1",
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:258
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:251-259
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:256
    // 1,
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:257
    // 2,
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:251-259
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@1:
    // typed_abi_call/typed_c2c.py:251-259
    // # test with literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     "s1",
    //     b"b1",
    //     1,
    //     2,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 3
    dup
    cover 2
    frame_bury 0
    uncover 3
    dup
    cover 3
    frame_bury 1
    uncover 3
    dup
    cover 4
    frame_bury 3
    dup
    cover 4
    frame_bury 2
    // typed_abi_call/typed_c2c.py:260
    // (s, b, u, bu) = result
    cover 3
    cover 3
    cover 3
    cover 3
    // typed_abi_call/typed_c2c.py:261
    // assert s == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:262
    // assert b == b"echo: b1"
    bytec 51 // 0x6563686f3a206231
    ==
    assert
    // typed_abi_call/typed_c2c.py:263
    // assert u == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:264
    // assert bu == 3
    bytec 30 // 0x03
    b==
    assert
    // typed_abi_call/typed_c2c.py:266-274
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:269
    // String("s1"),
    bytec_2 // "s1"
    len
    itob
    extract 6 2
    bytec_2 // "s1"
    concat
    // typed_abi_call/typed_c2c.py:270
    // Bytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    // typed_abi_call/typed_c2c.py:271
    // UInt64(1),
    intc_3 // 1
    itob
    // typed_abi_call/typed_c2c.py:272
    // BigUInt(2),
    bytec 11 // 0x02
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 11 // 0x02
    b|
    // typed_abi_call/typed_c2c.py:269
    // String("s1"),
    uncover 3
    swap
    // typed_abi_call/typed_c2c.py:270
    // Bytes(b"b1"),
    uncover 3
    cover 2
    // typed_abi_call/typed_c2c.py:272
    // BigUInt(2),
    cover 3
    // typed_abi_call/typed_c2c.py:273
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:266-274
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@2:
    // typed_abi_call/typed_c2c.py:266-274
    // # test with native args
    // result_2, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     String("s1"),
    //     Bytes(b"b1"),
    //     UInt64(1),
    //     BigUInt(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:275
    // assert result_2 == result, "expected native arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected native arguments to give the same result
    // typed_abi_call/typed_c2c.py:277-285
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:280
    // arc4.String("s1"),
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:281
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:284
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:277-285
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:282
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:283
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:277-285
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@3:
    // typed_abi_call/typed_c2c.py:277-285
    // # test with arc4 args
    // result_3, txn = arc4.abi_call(
    //     Logger.echo_native_tuple,
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:286
    // assert result_3 == result, "expected arc4 arguments to give the same result"
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert // expected arc4 arguments to give the same result
    // typed_abi_call/typed_c2c.py:288-296
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:291
    // arc4.String("s1"),
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    // typed_abi_call/typed_c2c.py:292
    // arc4.DynamicBytes(b"b1"),
    bytec_3 // 0x6231
    len
    itob
    extract 6 2
    bytec_3 // 0x6231
    concat
    swap
    // typed_abi_call/typed_c2c.py:295
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:288-296
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    bytec 7 // method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:293
    // arc4.UInt64(1),
    bytec 4 // 0x0000000000000001
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:294
    // arc4.UInt512(2),
    bytec 6 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002
    itxn_field ApplicationArgs
    // typed_abi_call/typed_c2c.py:288-296
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_native_tuple_method_ref_next_txn@4:
    // typed_abi_call/typed_c2c.py:288-296
    // # test again using native result type
    // result_native, txn = arc4.abi_call[tuple[String, Bytes, UInt64, BigUInt]](
    //     "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)",
    //     arc4.String("s1"),
    //     arc4.DynamicBytes(b"b1"),
    //     arc4.UInt64(1),
    //     arc4.UInt512(2),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    extract 2 0
    swap
    dup
    pushint 4 // 4
    pushint 8 // 8
    extract3
    btoi
    swap
    pushint 12 // 12
    pushint 64 // 64
    extract3
    uncover 3
    swap
    uncover 3
    cover 2
    cover 3
    // typed_abi_call/typed_c2c.py:297
    // assert result_native == result
    frame_dig 0
    ==
    swap
    frame_dig 1
    ==
    &&
    swap
    frame_dig 3
    ==
    &&
    swap
    frame_dig 2
    b==
    &&
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_nested_tuples(app: uint64) -> void:
test_nested_tuples:
    // typed_abi_call/typed_c2c.py:299-300
    // @arc4.abimethod()
    // def test_nested_tuples(self, app: Application) -> None:
    proto 1 0

test_nested_tuples_block@0:
    // typed_abi_call/typed_c2c.py:301-306
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:304
    // (("s1", "s2"), (1, 2, b"3")),
    bytec_2 // 0x7331
    len
    itob
    extract 6 2
    bytec_2 // 0x7331
    concat
    bytec 16 // 0x7332
    len
    itob
    extract 6 2
    bytec 16 // 0x7332
    concat
    swap
    bytec 17 // 0x33
    len
    itob
    extract 6 2
    bytec 17 // 0x33
    concat
    cover 2
    bytec_1 // 0x
    dig 1
    concat
    swap
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    uncover 2
    uncover 3
    concat
    swap
    uncover 2
    itob
    extract 6 2
    concat
    swap
    concat
    bytec_1 // 0x
    dig 1
    concat
    swap
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    bytec_1 // 0x
    bytec 4 // 0x0000000000000001
    concat
    bytec 14 // 0x0000000000000002
    concat
    bytec_1 // 0x
    uncover 5
    concat
    swap
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    uncover 3
    swap
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:305
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:301-306
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@1:
    // typed_abi_call/typed_c2c.py:301-306
    // # literal args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     (("s1", "s2"), (1, 2, b"3")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:307
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:308
    // assert s1 == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:309
    // assert s2 == "echo: s2"
    bytec 18 // 0x6563686f3a207332
    len
    itob
    extract 6 2
    bytec 18 // 0x6563686f3a207332
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:310
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:311
    // assert u64_2 == 3
    bytec 21 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:312
    // assert bytez == b"echo: 3"
    bytec 52 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:314-319
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:317
    // ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    bytec 16 // 0x7332
    len
    itob
    extract 6 2
    bytec 16 // 0x7332
    concat
    bytec_2 // "s1"
    len
    itob
    extract 6 2
    bytec_2 // "s1"
    concat
    bytec_1 // 0x
    dig 1
    concat
    swap
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    uncover 2
    uncover 3
    concat
    swap
    uncover 2
    itob
    extract 6 2
    concat
    swap
    concat
    bytec_1 // 0x
    dig 1
    concat
    swap
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    intc_3 // 1
    itob
    bytec_1 // 0x
    swap
    concat
    bytec 14 // 0x0000000000000002
    concat
    bytec 17 // 0x33
    len
    itob
    extract 6 2
    bytec 17 // 0x33
    concat
    bytec_1 // 0x
    swap
    concat
    pushint 18 // 18
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    uncover 3
    swap
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:318
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:314-319
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@2:
    // typed_abi_call/typed_c2c.py:314-319
    // # native args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     ((String("s1"), arc4.String("s2")), (UInt64(1), arc4.UInt64(2), Bytes(b"3"))),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:320
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:321
    // assert s1 == "echo: s1"
    bytec 15 // "echo: s1"
    ==
    assert
    // typed_abi_call/typed_c2c.py:322
    // assert s2 == "echo: s2"
    bytec 18 // 0x6563686f3a207332
    len
    itob
    extract 6 2
    bytec 18 // 0x6563686f3a207332
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:323
    // assert u64_1 == 2
    intc_2 // 2
    ==
    assert
    // typed_abi_call/typed_c2c.py:324
    // assert u64_2 == 3
    bytec 21 // 0x0000000000000003
    b==
    assert
    // typed_abi_call/typed_c2c.py:325
    // assert bytez == b"echo: 3"
    bytec 52 // 0x6563686f3a2033
    ==
    assert
    // typed_abi_call/typed_c2c.py:327-337
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:332
    // arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    bytec 53 // 0x733162
    len
    itob
    extract 6 2
    bytec 53 // 0x733162
    concat
    bytec 54 // 0x733262
    len
    itob
    extract 6 2
    bytec 54 // 0x733262
    concat
    swap
    bytec_1 // 0x
    dig 1
    concat
    swap
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    uncover 2
    uncover 3
    concat
    swap
    uncover 2
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:333
    // arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    bytec 55 // 0x3362
    len
    itob
    extract 6 2
    bytec 55 // 0x3362
    concat
    bytec_1 // 0x
    bytec 50 // 0x000000000000000b
    concat
    pushbytes 0x0000000000000015
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 18 // 18
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:330-335
    // arc4.Tuple(
    //     (
    //         arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //         arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //     )
    // ),
    bytec_1 // 0x
    dig 2
    concat
    swap
    uncover 2
    len
    pushint 4 // 4
    +
    pushint 4 // 4
    itob
    extract 6 2
    bytec_1 // 0x
    swap
    concat
    uncover 3
    uncover 3
    concat
    swap
    uncover 2
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:336
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:327-337
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    bytec 31 // method "echo_nested_tuple(((string,string),(uint64,uint64,byte[])))((string,string),(uint64,uint64,byte[]))"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_nested_tuples_next_txn@3:
    // typed_abi_call/typed_c2c.py:327-337
    // # arc4 args
    // result, txn = arc4.abi_call(
    //     Logger.echo_nested_tuple,
    //     arc4.Tuple(
    //         (
    //             arc4.Tuple((arc4.String("s1b"), arc4.String("s2b"))),
    //             arc4.Tuple((arc4.UInt64(11), arc4.UInt64(21), arc4.DynamicBytes(b"3b"))),
    //         )
    //     ),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 2
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3
    btoi
    swap
    dup
    pushint 8 // 8
    dup
    extract3
    swap
    dup
    pushint 16 // 16
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    swap
    uncover 4
    cover 2
    uncover 4
    cover 3
    cover 4
    // typed_abi_call/typed_c2c.py:338
    // ((s1, s2), (u64_1, u64_2, bytez)) = result
    cover 4
    cover 4
    cover 4
    cover 4
    cover 4
    // typed_abi_call/typed_c2c.py:339
    // assert s1 == "echo: s1b"
    pushbytes "echo: s1b"
    ==
    assert
    // typed_abi_call/typed_c2c.py:340
    // assert s2 == "echo: s2b"
    bytec 56 // 0x6563686f3a20733262
    len
    itob
    extract 6 2
    bytec 56 // 0x6563686f3a20733262
    concat
    ==
    assert
    // typed_abi_call/typed_c2c.py:341
    // assert u64_1 == 12
    pushint 12 // 12
    ==
    assert
    // typed_abi_call/typed_c2c.py:342
    // assert u64_2 == 22
    pushbytes 0x0000000000000016
    b==
    assert
    // typed_abi_call/typed_c2c.py:343
    // assert bytez == b"echo: 3b"
    pushbytes 0x6563686f3a203362
    ==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
test_no_args:
    // typed_abi_call/typed_c2c.py:345-346
    // @arc4.abimethod()
    // def test_no_args(self, app: Application) -> None:
    proto 1 0

test_no_args_block@0:
    // typed_abi_call/typed_c2c.py:347
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@1:
    // typed_abi_call/typed_c2c.py:347
    // result, _txn = arc4.abi_call(Logger.no_args, app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call/typed_c2c.py:348
    // assert result == 42
    pushint 42 // 42
    ==
    assert
    // typed_abi_call/typed_c2c.py:349
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@2:
    // typed_abi_call/typed_c2c.py:349
    // arc4_result, _txn = arc4.abi_call[arc4.UInt64]("no_args()uint64", app_id=app)
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:350
    // assert arc4_result == 42
    bytec 57 // 0x000000000000002a
    b==
    assert
    // typed_abi_call/typed_c2c.py:352
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_begin
    frame_dig -1
    itxn_field ApplicationID
    bytec 32 // method "no_args()uint64"
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_no_args_next_txn@3:
    // typed_abi_call/typed_c2c.py:352
    // arc4.abi_call(Logger.no_args, app_id=app)
    itxn_submit
    itxn LastLog
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // typed_abi_call/typed_c2c.py:353
    // assert arc4.UInt64.from_log(op.ITxn.last_log()) == 42
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    bytec 57 // 0x000000000000002a
    b==
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_named_tuples(app: uint64) -> void:
test_named_tuples:
    // typed_abi_call/typed_c2c.py:355-356
    // @arc4.abimethod()
    // def test_named_tuples(self, app: Application) -> None:
    proto 1 0

test_named_tuples_block@0:
    // typed_abi_call/typed_c2c.py:357-362
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:359
    // (UInt64(1), String("log 1")),
    intc_3 // 1
    itob
    bytec 8 // "log 1"
    len
    itob
    extract 6 2
    bytec 8 // "log 1"
    concat
    bytec_1 // 0x
    uncover 2
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:360
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 8 // "log 1"
    len
    itob
    extract 6 2
    bytec 8 // "log 1"
    concat
    bytec_1 // 0x
    uncover 2
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:361
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:357-362
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 58 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_named_tuples_next_txn@1:
    // typed_abi_call/typed_c2c.py:357-362
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(1), String("log 1")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:363
    // assert result
    assert
    // typed_abi_call/typed_c2c.py:364-369
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:366
    // (UInt64(2), String("log 2")),
    intc_2 // 2
    itob
    bytec 59 // "log 2"
    len
    itob
    extract 6 2
    bytec 59 // "log 2"
    concat
    bytec_1 // 0x
    uncover 2
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    // typed_abi_call/typed_c2c.py:367
    // LogMessage(level=UInt64(1), message=String("log 1")),
    intc_3 // 1
    itob
    bytec 8 // "log 1"
    len
    itob
    extract 6 2
    bytec 8 // "log 1"
    concat
    bytec_1 // 0x
    uncover 2
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    // typed_abi_call/typed_c2c.py:368
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:364-369
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    bytec 58 // method "logs_are_equal((uint64,string),(uint64,string))bool"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_named_tuples_next_txn@2:
    // typed_abi_call/typed_c2c.py:364-369
    // result, _txn = arc4.abi_call(
    //     Logger.logs_are_equal,
    //     (UInt64(2), String("log 2")),
    //     LogMessage(level=UInt64(1), message=String("log 1")),
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    intc_0 // 0
    getbit
    // typed_abi_call/typed_c2c.py:370
    // assert not result
    !
    assert
    retsub


// test_cases.typed_abi_call.typed_c2c.Greeter.test_arc4_struct(app: uint64) -> void:
test_arc4_struct:
    // typed_abi_call/typed_c2c.py:372-373
    // @arc4.abimethod()
    // def test_arc4_struct(self, app: Application) -> None:
    proto 1 0

test_arc4_struct_block@0:
    // typed_abi_call/typed_c2c.py:374
    // log = LogStruct(level=arc4.UInt64(1), message=arc4.String("log 1"))
    bytec 8 // 0x6c6f672031
    len
    itob
    extract 6 2
    bytec 8 // 0x6c6f672031
    concat
    bytec_1 // 0x
    bytec 4 // 0x0000000000000001
    concat
    swap
    bytec_1 // 0x
    swap
    concat
    swap
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    dup
    // typed_abi_call/typed_c2c.py:375-379
    // result, txn = arc4.abi_call(
    //     Logger.echo_log_struct,
    //     log,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call/typed_c2c.py:378
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call/typed_c2c.py:375-379
    // result, txn = arc4.abi_call(
    //     Logger.echo_log_struct,
    //     log,
    //     app_id=app,
    // )
    pushbytes 0xdc4f1992 // method "echo_log_struct((uint64,string))(uint64,string)"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_1 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

test_arc4_struct_next_txn@1:
    // typed_abi_call/typed_c2c.py:375-379
    // result, txn = arc4.abi_call(
    //     Logger.echo_log_struct,
    //     log,
    //     app_id=app,
    // )
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    itxn LastLog
    swap
    // typed_abi_call/typed_c2c.py:380
    // assert result == log, "expected output to match input"
    uncover 2
    dup
    cover 3
    ==
    assert // expected output to match input
    // typed_abi_call/typed_c2c.py:381
    // assert LogStruct.from_log(txn.last_log) == log, "expected output to match input"
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    ==
    assert // expected output to match input
    retsub
