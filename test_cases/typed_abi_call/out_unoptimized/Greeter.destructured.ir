contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.approval_program() -> uint64:
            block@0: // L6
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@9
            block@1: // abi_routing_L6
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_method_selector_kinds(application)void" => block@2, method "test_arg_conversion(application)void" => block@3, method "test_15plus_args(application)void" => block@4, method "test_void(application)void" => block@5, method "test_ref_types(application,asset)void" => block@6, * => block@7}
            block@2: // test_method_selector_kinds_route_L7
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = ((txnas Applications) tmp%6#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%7#0)
                return 1u
            block@3: // test_arg_conversion_route_L20
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: uint64 = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%13#0)
                return 1u
            block@4: // test_15plus_args_route_L37
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: uint64 = (== tmp%14#0 NoOp)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: uint64 = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                let tmp%17#0: bytes = (txna ApplicationArgs 1)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = ((txnas Applications) tmp%18#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%19#0)
                return 1u
            block@5: // test_void_route_L66
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: uint64 = (== tmp%20#0 NoOp)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: uint64 = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = ((txnas Applications) tmp%24#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%25#0)
                return 1u
            block@6: // test_ref_types_route_L80
                let tmp%26#0: uint64 = (txn OnCompletion)
                let tmp%27#0: uint64 = (== tmp%26#0 NoOp)
                (assert tmp%27#0) // OnCompletion is NoOp
                let tmp%28#0: uint64 = (txn ApplicationID)
                (assert tmp%28#0) // is not creating
                let tmp%29#0: bytes = (txna ApplicationArgs 1)
                let tmp%30#0: uint64 = (btoi tmp%29#0)
                let tmp%31#0: uint64 = ((txnas Applications) tmp%30#0)
                let tmp%32#0: bytes = (txna ApplicationArgs 2)
                let tmp%33#0: uint64 = (btoi tmp%32#0)
                let tmp%34#0: uint64 = ((txnas Assets) tmp%33#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%31#0, tmp%34#0)
                return 1u
            block@7: // switch_case_default_L6
                goto block@8
            block@8: // switch_case_next_L6
                fail // reject transaction
            block@9: // bare_routing_L6
                let tmp%35#0: uint64 = (txn OnCompletion)
                switch tmp%35#0 {0u => block@10, * => block@11}
            block@10: // create_L6
                let tmp%36#0: uint64 = (txn ApplicationID)
                let tmp%37#0: uint64 = (! tmp%36#0)
                (assert tmp%37#0) // is creating
                return 1u
            block@11: // reject_bare_on_completion_L6
                fail // reject transaction
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L7
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes = method "echo(string)string"
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x05test1"
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L9
                itxn_submit
                let tmp_itxn_0%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%0#0: bytes = tmp_itxn_0%%LastLog#0
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: uint64 = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: uint64 = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = value%0#0
                let tmp%3#0: uint64 = (== result#0 "\x00\x0becho: test1")
                (assert tmp%3#0)
                itxn_begin
                let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%1%%param_ApplicationArgs_idx_0#0: bytes = method "echo(string)string"
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x05test2"
                let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
                goto block@2
            block@2: // next_txn_L11
                itxn_submit
                let tmp_itxn_1%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%1#0: bytes = tmp_itxn_1%%LastLog#0
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: uint64 = (== tmp%5#0 0x151f7c75)
                let value%1#0: bytes = tmp%4#0
                let check%1#0: uint64 = tmp%6#0
                (assert check%1#0) // ARC4 prefix is valid
                let result#0: bytes = value%1#0
                let tmp%7#0: uint64 = (== result#0 "\x00\x0becho: test2")
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%2%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%2%%param_ApplicationArgs_idx_0#0: bytes = method "echo(string)string"
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x05test3"
                let inner_txn_params%2%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%2%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%2%%param_TypeEnum_idx_0#0)
                goto block@3
            block@3: // next_txn_L13
                itxn_submit
                let tmp_itxn_2%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%2#0: bytes = tmp_itxn_2%%LastLog#0
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: uint64 = (== tmp%9#0 0x151f7c75)
                let value%2#0: bytes = tmp%8#0
                let check%2#0: uint64 = tmp%10#0
                (assert check%2#0) // ARC4 prefix is valid
                let result#0: bytes = value%2#0
                let tmp%11#0: uint64 = (== result#0 "\x00\x0becho: test3")
                (assert tmp%11#0)
                itxn_begin
                let inner_txn_params%3%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%3%%param_ApplicationArgs_idx_0#0: bytes = method "echo(string)string"
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x05test4"
                let inner_txn_params%3%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%3%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%3%%param_TypeEnum_idx_0#0)
                goto block@4
            block@4: // next_txn_L15
                itxn_submit
                let tmp_itxn_3%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%3#0: bytes = tmp_itxn_3%%LastLog#0
                let tmp%12#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%14#0: uint64 = (== tmp%13#0 0x151f7c75)
                let value%3#0: bytes = tmp%12#0
                let check%3#0: uint64 = tmp%14#0
                (assert check%3#0) // ARC4 prefix is valid
                let result#0: bytes = value%3#0
                let tmp%15#0: uint64 = (== result#0 "\x00\x0becho: test4")
                (assert tmp%15#0)
                itxn_begin
                let inner_txn_params%4%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%4%%param_ApplicationArgs_idx_0#0: bytes = method "echo(string)string"
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x05test5"
                let inner_txn_params%4%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%4%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%4%%param_TypeEnum_idx_0#0)
                goto block@5
            block@5: // next_txn_L17
                itxn_submit
                let tmp_itxn_4%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%4#0: bytes = tmp_itxn_4%%LastLog#0
                let tmp%16#0: bytes = ((extract 4 0) awst_tmp%4#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%4#0)
                let tmp%18#0: uint64 = (== tmp%17#0 0x151f7c75)
                let value%4#0: bytes = tmp%16#0
                let check%4#0: uint64 = tmp%18#0
                (assert check%4#0) // ARC4 prefix is valid
                let result#0: bytes = value%4#0
                let tmp%19#0: uint64 = (== result#0 "\x00\x0becho: test5")
                (assert tmp%19#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L20
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes = method "log_string(string)void"
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = "\x00\nconverted1"
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L22
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: uint64 = (== txn%%LastLog#0 "converted1")
                (assert tmp%0#0)
                itxn_begin
                let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%1%%param_ApplicationArgs_idx_0#0: bytes = method "log_uint64(uint64)void"
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = 0x0000000000000002
                let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
                goto block@2
            block@2: // next_txn_L25
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = (itob 2u)
                let tmp%2#0: uint64 = (== txn%%LastLog#0 tmp%1#0)
                (assert tmp%2#0)
                itxn_begin
                let inner_txn_params%2%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%2%%param_ApplicationArgs_idx_0#0: bytes = method "log_uint512(uint512)void"
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
                let inner_txn_params%2%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%2%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%2%%param_TypeEnum_idx_0#0)
                goto block@3
            block@3: // next_txn_L28
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%3#0: bytes = (bzero 56u)
                let tmp%4#0: bytes = (itob 3u)
                let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
                let tmp%6#0: uint64 = (== txn%%LastLog#0 tmp%5#0)
                (assert tmp%6#0)
                itxn_begin
                let inner_txn_params%3%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%3%%param_ApplicationArgs_idx_0#0: bytes = method "log_bytes(byte[])void"
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = 0x000134
                let inner_txn_params%3%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%3%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%3%%param_TypeEnum_idx_0#0)
                goto block@4
            block@4: // next_txn_L31
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%7#0: uint64 = (== txn%%LastLog#0 "4")
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%4%%param_TypeEnum_idx_0#0: uint64 = appl
                let tmp%8#0: bytes = (setbit 0x00 0u 1u)
                let inner_txn_params%4%%param_ApplicationArgs_idx_0#0: bytes = method "log_bool(bool)void"
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = tmp%8#0
                let inner_txn_params%4%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%4%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%4%%param_TypeEnum_idx_0#0)
                goto block@5
            block@5: // next_txn_L34
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%9#0: uint64 = (== txn%%LastLog#0 "True")
                (assert tmp%9#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L37
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%0#0: bytes = (concat encoded_tuple_buffer%0#0 0xde)
                let encoded_tuple_buffer%0#0: bytes = (concat encoded_tuple_buffer%0#0 0xad)
                let encoded_tuple_buffer%0#0: bytes = (concat encoded_tuple_buffer%0#0 0xbe)
                let encoded_tuple_buffer%0#0: bytes = (concat encoded_tuple_buffer%0#0 0xef)
                let encoded_tuple_buffer%1#0: bytes = 0x
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 0x0f)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 0x10)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 0x11)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 0x12)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 encoded_tuple_buffer%0#0)
                let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%1#0 0x14)
                let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes = method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]"
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = 0x0000000000000001
                let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: bytes = 0x0000000000000002
                let inner_txn_params%0%%param_ApplicationArgs_idx_3#0: bytes = 0x0000000000000003
                let inner_txn_params%0%%param_ApplicationArgs_idx_4#0: bytes = 0x0000000000000004
                let inner_txn_params%0%%param_ApplicationArgs_idx_5#0: bytes = 0x0000000000000005
                let inner_txn_params%0%%param_ApplicationArgs_idx_6#0: bytes = 0x0000000000000006
                let inner_txn_params%0%%param_ApplicationArgs_idx_7#0: bytes = 0x0000000000000007
                let inner_txn_params%0%%param_ApplicationArgs_idx_8#0: bytes = 0x0000000000000008
                let inner_txn_params%0%%param_ApplicationArgs_idx_9#0: bytes = 0x0000000000000009
                let inner_txn_params%0%%param_ApplicationArgs_idx_10#0: bytes = 0x000000000000000a
                let inner_txn_params%0%%param_ApplicationArgs_idx_11#0: bytes = 0x000000000000000b
                let inner_txn_params%0%%param_ApplicationArgs_idx_12#0: bytes = 0x000000000000000c
                let inner_txn_params%0%%param_ApplicationArgs_idx_13#0: bytes = 0x000000000000000d
                let inner_txn_params%0%%param_ApplicationArgs_idx_14#0: bytes = 0x000000000000000e
                let inner_txn_params%0%%param_ApplicationArgs_idx_15#0: bytes = encoded_tuple_buffer%1#0
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_3#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_4#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_5#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_6#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_7#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_8#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_9#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_10#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_11#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_12#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_13#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_14#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_15#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L39
                itxn_submit
                let tmp_itxn_0%%LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%0#0: bytes = tmp_itxn_0%%LastLog#0
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: uint64 = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: uint64 = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = value%0#0
                let tmp%3#0: bytes = ((extract 2 0) result#0)
                let tmp%4#0: uint64 = (== tmp%3#0 0x0f101112deadbeef14)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L66
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes = method "log_string(string)void"
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x06World1"
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L68
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: uint64 = (== txn%%LastLog#0 "World1")
                (assert tmp%0#0)
                itxn_begin
                let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%1%%param_ApplicationArgs_idx_0#0: bytes = method "log_string(string)void"
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x06World2"
                let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
                goto block@2
            block@2: // next_txn_L71
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: uint64 = (== txn%%LastLog#0 "World2")
                (assert tmp%1#0)
                itxn_begin
                let inner_txn_params%2%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%2%%param_ApplicationArgs_idx_0#0: bytes = method "log_string(string)void"
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x06World3"
                let inner_txn_params%2%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%2%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%2%%param_TypeEnum_idx_0#0)
                goto block@3
            block@3: // next_txn_L74
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%2#0: uint64 = (== txn%%LastLog#0 "World3")
                (assert tmp%2#0)
                itxn_begin
                let inner_txn_params%3%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%3%%param_ApplicationArgs_idx_0#0: bytes = method "log_string(string)void"
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = "\x00\x06World4"
                let inner_txn_params%3%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%3%%param_Fee_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) inner_txn_params%3%%param_TypeEnum_idx_0#0)
                goto block@4
            block@4: // next_txn_L77
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let tmp%3#0: uint64 = (== txn%%LastLog#0 "World4")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
            block@0: // L80
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = appl
                let inner_txn_params%0%%param_ApplicationArgs_idx_0#0: bytes = method "log_asset_account_app(asset,account,application)void"
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = 0x00
                let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: bytes = 0x01
                let inner_txn_params%0%%param_ApplicationArgs_idx_3#0: bytes = 0x01
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_Accounts_idx_0#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_Applications_idx_0#0: uint64 = app#0
                let inner_txn_params%0%%param_Assets_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field Assets) inner_txn_params%0%%param_Assets_idx_0#0)
                ((itxn_field Applications) inner_txn_params%0%%param_Applications_idx_0#0)
                ((itxn_field Accounts) inner_txn_params%0%%param_Accounts_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_0#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_3#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L82
                itxn_submit
                let txn%%LastLog#0: bytes = (itxn LastLog)
                let (value%0#0: bytes, check%0#0: uint64) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
                let (value%1#0: bytes, check%1#0: uint64) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                let tmp%4#0: uint64 = (== txn%%LastLog#0 tmp%3#0)
                (assert tmp%4#0)
                return 
    
    program clear-state:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.clear_state_program() -> uint64:
            block@0: // L6
                return 1u