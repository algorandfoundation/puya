contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.approval_program() -> bool:
            block@0: // L17
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@15
            block@1: // abi_routing_L17
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_method_selector_kinds(application)void" => block@2, method "test_method_overload(application)void" => block@3, method "test_arg_conversion(application)void" => block@4, method "test_15plus_args(application)void" => block@5, method "test_void(application)void" => block@6, method "test_ref_types(application,asset)void" => block@7, method "test_native_string(application)void" => block@8, method "test_native_bytes(application)void" => block@9, method "test_native_uint64(application)void" => block@10, method "test_native_biguint(application)void" => block@11, method "test_native_tuple(application)void" => block@12, * => block@13}
            block@2: // test_method_selector_kinds_route_L18
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = ((txnas Applications) tmp%6#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%7#0)
                return 1u
            block@3: // test_method_overload_route_L31
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%13#0)
                return 1u
            block@4: // test_arg_conversion_route_L46
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (== tmp%14#0 NoOp)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: bool = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                let tmp%17#0: bytes = (txna ApplicationArgs 1)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = ((txnas Applications) tmp%18#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%19#0)
                return 1u
            block@5: // test_15plus_args_route_L63
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: bool = (== tmp%20#0 NoOp)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: bool = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = (txna ApplicationArgs 1)
                let tmp%24#0: uint64 = (btoi tmp%23#0)
                let tmp%25#0: uint64 = ((txnas Applications) tmp%24#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%25#0)
                return 1u
            block@6: // test_void_route_L91
                let tmp%26#0: uint64 = (txn OnCompletion)
                let tmp%27#0: bool = (== tmp%26#0 NoOp)
                (assert tmp%27#0) // OnCompletion is NoOp
                let tmp%28#0: bool = (txn ApplicationID)
                (assert tmp%28#0) // is not creating
                let tmp%29#0: bytes = (txna ApplicationArgs 1)
                let tmp%30#0: uint64 = (btoi tmp%29#0)
                let tmp%31#0: uint64 = ((txnas Applications) tmp%30#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%31#0)
                return 1u
            block@7: // test_ref_types_route_L105
                let tmp%32#0: uint64 = (txn OnCompletion)
                let tmp%33#0: bool = (== tmp%32#0 NoOp)
                (assert tmp%33#0) // OnCompletion is NoOp
                let tmp%34#0: bool = (txn ApplicationID)
                (assert tmp%34#0) // is not creating
                let tmp%35#0: bytes = (txna ApplicationArgs 1)
                let tmp%36#0: uint64 = (btoi tmp%35#0)
                let tmp%37#0: uint64 = ((txnas Applications) tmp%36#0)
                let tmp%38#0: bytes = (txna ApplicationArgs 2)
                let tmp%39#0: uint64 = (btoi tmp%38#0)
                let tmp%40#0: uint64 = ((txnas Assets) tmp%39#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%37#0, tmp%40#0)
                return 1u
            block@8: // test_native_string_route_L119
                let tmp%41#0: uint64 = (txn OnCompletion)
                let tmp%42#0: bool = (== tmp%41#0 NoOp)
                (assert tmp%42#0) // OnCompletion is NoOp
                let tmp%43#0: bool = (txn ApplicationID)
                (assert tmp%43#0) // is not creating
                let tmp%44#0: bytes = (txna ApplicationArgs 1)
                let tmp%45#0: uint64 = (btoi tmp%44#0)
                let tmp%46#0: uint64 = ((txnas Applications) tmp%45#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%46#0)
                return 1u
            block@9: // test_native_bytes_route_L130
                let tmp%47#0: uint64 = (txn OnCompletion)
                let tmp%48#0: bool = (== tmp%47#0 NoOp)
                (assert tmp%48#0) // OnCompletion is NoOp
                let tmp%49#0: bool = (txn ApplicationID)
                (assert tmp%49#0) // is not creating
                let tmp%50#0: bytes = (txna ApplicationArgs 1)
                let tmp%51#0: uint64 = (btoi tmp%50#0)
                let tmp%52#0: uint64 = ((txnas Applications) tmp%51#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%52#0)
                return 1u
            block@10: // test_native_uint64_route_L143
                let tmp%53#0: uint64 = (txn OnCompletion)
                let tmp%54#0: bool = (== tmp%53#0 NoOp)
                (assert tmp%54#0) // OnCompletion is NoOp
                let tmp%55#0: bool = (txn ApplicationID)
                (assert tmp%55#0) // is not creating
                let tmp%56#0: bytes = (txna ApplicationArgs 1)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: uint64 = ((txnas Applications) tmp%57#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%58#0)
                return 1u
            block@11: // test_native_biguint_route_L154
                let tmp%59#0: uint64 = (txn OnCompletion)
                let tmp%60#0: bool = (== tmp%59#0 NoOp)
                (assert tmp%60#0) // OnCompletion is NoOp
                let tmp%61#0: bool = (txn ApplicationID)
                (assert tmp%61#0) // is not creating
                let tmp%62#0: bytes = (txna ApplicationArgs 1)
                let tmp%63#0: uint64 = (btoi tmp%62#0)
                let tmp%64#0: uint64 = ((txnas Applications) tmp%63#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%64#0)
                return 1u
            block@12: // test_native_tuple_route_L165
                let tmp%65#0: uint64 = (txn OnCompletion)
                let tmp%66#0: bool = (== tmp%65#0 NoOp)
                (assert tmp%66#0) // OnCompletion is NoOp
                let tmp%67#0: bool = (txn ApplicationID)
                (assert tmp%67#0) // is not creating
                let tmp%68#0: bytes = (txna ApplicationArgs 1)
                let tmp%69#0: uint64 = (btoi tmp%68#0)
                let tmp%70#0: uint64 = ((txnas Applications) tmp%69#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%70#0)
                return 1u
            block@13: // switch_case_default_L17
                goto block@14
            block@14: // switch_case_next_L17
                fail // reject transaction
            block@15: // bare_routing_L17
                let tmp%71#0: uint64 = (txn OnCompletion)
                switch tmp%71#0 {0u => block@16, * => block@17}
            block@16: // create_L17
                let tmp%72#0: bool = (txn ApplicationID)
                let tmp%73#0: bool = (! tmp%72#0)
                (assert tmp%73#0) // is creating
                return 1u
            block@17: // reject_bare_on_completion_L17
                fail // reject transaction
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L18
                itxn_begin
                let length%0#0: uint64 = (len "test1")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "test1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L20
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%2#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
                let value%0#0: bytes = tmp%1#0
                let check%0#0: bool = tmp%3#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = value%0#0
                let length%1#0: uint64 = (len "echo: test1")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%4#0: bytes = (concat value_as_uint16%1#0 "echo: test1")
                let tmp%5#0: bool = (== result#0 tmp%4#0)
                (assert tmp%5#0)
                itxn_begin
                let length%2#0: uint64 = (len "test2")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let tmp%6#0: bytes = (concat value_as_uint16%2#0 "test2")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%6#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L22
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%7#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%8#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
                let value%1#0: bytes = tmp%7#0
                let check%1#0: bool = tmp%9#0
                (assert check%1#0) // ARC4 prefix is valid
                let result#0: bytes = value%1#0
                let length%3#0: uint64 = (len "echo: test2")
                let value_as_bytes%3#0: bytes = (itob length%3#0)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let tmp%10#0: bytes = (concat value_as_uint16%3#0 "echo: test2")
                let tmp%11#0: bool = (== result#0 tmp%10#0)
                (assert tmp%11#0)
                itxn_begin
                let length%4#0: uint64 = (len "test3")
                let value_as_bytes%4#0: bytes = (itob length%4#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%12#0: bytes = (concat value_as_uint16%4#0 "test3")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = tmp%12#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L24
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%13#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%14#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%15#0: bool = (== tmp%14#0 0x151f7c75)
                let value%2#0: bytes = tmp%13#0
                let check%2#0: bool = tmp%15#0
                (assert check%2#0) // ARC4 prefix is valid
                let result#0: bytes = value%2#0
                let length%5#0: uint64 = (len "echo: test3")
                let value_as_bytes%5#0: bytes = (itob length%5#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let tmp%16#0: bytes = (concat value_as_uint16%5#0 "echo: test3")
                let tmp%17#0: bool = (== result#0 tmp%16#0)
                (assert tmp%17#0)
                itxn_begin
                let length%6#0: uint64 = (len "test4")
                let value_as_bytes%6#0: bytes = (itob length%6#0)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let tmp%18#0: bytes = (concat value_as_uint16%6#0 "test4")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = tmp%18#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L26
                itxn_submit
                let awst_tmp%7#0: bytes = (itxn LastLog)
                let tmp%19#0: bytes = ((extract 4 0) awst_tmp%7#0)
                let tmp%20#0: bytes = ((extract 0 4) awst_tmp%7#0)
                let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
                let value%3#0: bytes = tmp%19#0
                let check%3#0: bool = tmp%21#0
                (assert check%3#0) // ARC4 prefix is valid
                let result#0: bytes = value%3#0
                let length%7#0: uint64 = (len "echo: test4")
                let value_as_bytes%7#0: bytes = (itob length%7#0)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let tmp%22#0: bytes = (concat value_as_uint16%7#0 "echo: test4")
                let tmp%23#0: bool = (== result#0 tmp%22#0)
                (assert tmp%23#0)
                itxn_begin
                let length%8#0: uint64 = (len "test5")
                let value_as_bytes%8#0: bytes = (itob length%8#0)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let tmp%24#0: bytes = (concat value_as_uint16%8#0 "test5")
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = tmp%24#0
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@5
            block@5: // next_txn_L28
                itxn_submit
                let awst_tmp%9#0: bytes = (itxn LastLog)
                let tmp%25#0: bytes = ((extract 4 0) awst_tmp%9#0)
                let tmp%26#0: bytes = ((extract 0 4) awst_tmp%9#0)
                let tmp%27#0: bool = (== tmp%26#0 0x151f7c75)
                let value%4#0: bytes = tmp%25#0
                let check%4#0: bool = tmp%27#0
                (assert check%4#0) // ARC4 prefix is valid
                let result#0: bytes = value%4#0
                let length%9#0: uint64 = (len "echo: test5")
                let value_as_bytes%9#0: bytes = (itob length%9#0)
                let value_as_uint16%9#0: bytes = ((extract 6 2) value_as_bytes%9#0)
                let tmp%28#0: bytes = (concat value_as_uint16%9#0 "echo: test5")
                let tmp%29#0: bool = (== result#0 tmp%28#0)
                (assert tmp%29#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
            block@0: // L31
                itxn_begin
                let length%0#0: uint64 = (len "typed + ignore")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "typed + ignore")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L33
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%2#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
                let check%0#0: bool = tmp%3#0
                (assert check%0#0) // ARC4 prefix is valid
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                let value%1#0: bytes = tmp%4#0
                let check%1#0: bool = tmp%6#0
                (assert check%1#0) // ARC4 prefix is valid
                let length%1#0: uint64 = (len "echo: typed + ignore")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%7#0: bytes = (concat value_as_uint16%1#0 "echo: typed + ignore")
                let tmp%8#0: bool = (== value%1#0 tmp%7#0)
                (assert tmp%8#0)
                itxn_begin
                let length%2#0: uint64 = (len "untyped + ignore")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let tmp%9#0: bytes = (concat value_as_uint16%2#0 "untyped + ignore")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%9#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L36
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%10#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%11#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%12#0: bool = (== tmp%11#0 0x151f7c75)
                let value%2#0: bytes = tmp%10#0
                let check%2#0: bool = tmp%12#0
                (assert check%2#0) // ARC4 prefix is valid
                let length%3#0: uint64 = (len "echo: untyped + ignore")
                let value_as_bytes%3#0: bytes = (itob length%3#0)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let tmp%13#0: bytes = (concat value_as_uint16%3#0 "echo: untyped + ignore")
                let tmp%14#0: bool = (== value%2#0 tmp%13#0)
                (assert tmp%14#0)
                itxn_begin
                let length%4#0: uint64 = (len "tuple")
                let value_as_bytes%4#0: bytes = (itob length%4#0)
                let value_as_uint16%4#0: bytes = ((extract 6 2) value_as_bytes%4#0)
                let tmp%15#0: bytes = (concat value_as_uint16%4#0 "tuple")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = tmp%15#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L39
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%16#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                let value%3#0: bytes = tmp%16#0
                let check%3#0: bool = tmp%18#0
                (assert check%3#0) // ARC4 prefix is valid
                let result.0#0: bytes = value%3#0
                let result.1.LastLog#0: bytes = (itxn LastLog)
                let length%5#0: uint64 = (len "echo: tuple")
                let value_as_bytes%5#0: bytes = (itob length%5#0)
                let value_as_uint16%5#0: bytes = ((extract 6 2) value_as_bytes%5#0)
                let tmp%19#0: bytes = (concat value_as_uint16%5#0 "echo: tuple")
                let tmp%20#0: bool = (== result.0#0 tmp%19#0)
                (assert tmp%20#0)
                let awst_tmp%6#0: bytes = result.1.LastLog#0
                let tmp%21#0: bytes = ((extract 4 0) awst_tmp%6#0)
                let tmp%22#0: bytes = ((extract 0 4) awst_tmp%6#0)
                let tmp%23#0: bool = (== tmp%22#0 0x151f7c75)
                let value%4#0: bytes = tmp%21#0
                let check%4#0: bool = tmp%23#0
                (assert check%4#0) // ARC4 prefix is valid
                let length%6#0: uint64 = (len "echo: tuple")
                let value_as_bytes%6#0: bytes = (itob length%6#0)
                let value_as_uint16%6#0: bytes = ((extract 6 2) value_as_bytes%6#0)
                let tmp%24#0: bytes = (concat value_as_uint16%6#0 "echo: tuple")
                let tmp%25#0: bool = (== value%4#0 tmp%24#0)
                (assert tmp%25#0)
                itxn_begin
                let length%7#0: uint64 = (len "untyped")
                let value_as_bytes%7#0: bytes = (itob length%7#0)
                let value_as_uint16%7#0: bytes = ((extract 6 2) value_as_bytes%7#0)
                let tmp%26#0: bytes = (concat value_as_uint16%7#0 "untyped")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = tmp%26#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L43
                itxn_submit
                let txn_result.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%7#0: bytes = txn_result.LastLog#0
                let tmp%27#0: bytes = ((extract 4 0) awst_tmp%7#0)
                let tmp%28#0: bytes = ((extract 0 4) awst_tmp%7#0)
                let tmp%29#0: bool = (== tmp%28#0 0x151f7c75)
                let value%5#0: bytes = tmp%27#0
                let check%5#0: bool = tmp%29#0
                (assert check%5#0) // ARC4 prefix is valid
                let length%8#0: uint64 = (len "echo: untyped")
                let value_as_bytes%8#0: bytes = (itob length%8#0)
                let value_as_uint16%8#0: bytes = ((extract 6 2) value_as_bytes%8#0)
                let tmp%30#0: bytes = (concat value_as_uint16%8#0 "echo: untyped")
                let tmp%31#0: bool = (== value%5#0 tmp%30#0)
                (assert tmp%31#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L46
                itxn_begin
                let length%0#0: uint64 = (len "converted1")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "converted1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L48
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: bool = (== txn.LastLog#0 "converted1")
                (assert tmp%1#0)
                itxn_begin
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(uint64)void")
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L51
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%2#0: bytes = (itob 2u)
                let tmp%3#0: bool = (== txn.LastLog#0 tmp%2#0)
                (assert tmp%3#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(uint512)void")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L54
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = (bzero 56u)
                let tmp%5#0: bytes = (itob 3u)
                let tmp%6#0: bytes = (concat tmp%4#0 tmp%5#0)
                let tmp%7#0: bool = (== txn.LastLog#0 tmp%6#0)
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(byte[])void")
                ((itxn_field ApplicationArgs) 0x000134)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L57
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%8#0: bool = (== txn.LastLog#0 "4")
                (assert tmp%8#0)
                itxn_begin
                let tmp%9#0: bytes = (setbit 0x00 0u 1u)
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = tmp%9#0
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(bool)void")
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@5
            block@5: // next_txn_L60
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%10#0: bool = (== txn.LastLog#0 "True")
                (assert tmp%10#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L63
                itxn_begin
                let encoded_tuple_buffer%0#1: bytes = (concat 0x 0xde)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0xad)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0xbe)
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#1 0xef)
                let encoded_tuple_buffer%1#1: bytes = (concat 0x 0x0f)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x10)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x11)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x12)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 encoded_tuple_buffer%0#1)
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#1 0x14)
                let inner_txn_params%0%%param_ApplicationArgs_idx_15#0: bytes = encoded_tuple_buffer%1#1
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field ApplicationArgs) 0x0000000000000003)
                ((itxn_field ApplicationArgs) 0x0000000000000004)
                ((itxn_field ApplicationArgs) 0x0000000000000005)
                ((itxn_field ApplicationArgs) 0x0000000000000006)
                ((itxn_field ApplicationArgs) 0x0000000000000007)
                ((itxn_field ApplicationArgs) 0x0000000000000008)
                ((itxn_field ApplicationArgs) 0x0000000000000009)
                ((itxn_field ApplicationArgs) 0x000000000000000a)
                ((itxn_field ApplicationArgs) 0x000000000000000b)
                ((itxn_field ApplicationArgs) 0x000000000000000c)
                ((itxn_field ApplicationArgs) 0x000000000000000d)
                ((itxn_field ApplicationArgs) 0x000000000000000e)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_15#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L65
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = value%0#0
                let tmp%3#0: bytes = ((extract 2 0) result#0)
                let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L91
                itxn_begin
                let length%0#0: uint64 = (len "World1")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "World1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L93
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: bool = (== txn.LastLog#0 "World1")
                (assert tmp%1#0)
                itxn_begin
                let length%1#0: uint64 = (len "World2")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%2#0: bytes = (concat value_as_uint16%1#0 "World2")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%2#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L96
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%3#0: bool = (== txn.LastLog#0 "World2")
                (assert tmp%3#0)
                itxn_begin
                let length%2#0: uint64 = (len "World3")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let tmp%4#0: bytes = (concat value_as_uint16%2#0 "World3")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = tmp%4#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L99
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%5#0: bool = (== txn.LastLog#0 "World3")
                (assert tmp%5#0)
                itxn_begin
                let length%3#0: uint64 = (len "World4")
                let value_as_bytes%3#0: bytes = (itob length%3#0)
                let value_as_uint16%3#0: bytes = ((extract 6 2) value_as_bytes%3#0)
                let tmp%6#0: bytes = (concat value_as_uint16%3#0 "World4")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = tmp%6#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L102
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%7#0: bool = (== txn.LastLog#0 "World4")
                (assert tmp%7#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
            block@0: // L105
                itxn_begin
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_Accounts_idx_0#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_Applications_idx_0#0: uint64 = app#0
                let inner_txn_params%0%%param_Assets_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Assets) inner_txn_params%0%%param_Assets_idx_0#0)
                ((itxn_field Applications) inner_txn_params%0%%param_Applications_idx_0#0)
                ((itxn_field Accounts) inner_txn_params%0%%param_Accounts_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
                ((itxn_field ApplicationArgs) 0x00)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L107
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
            block@0: // L119
                itxn_begin
                let length%0#0: uint64 = (len "s")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "s")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L121
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%2#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
                let value%0#0: bytes = tmp%1#0
                let check%0#0: bool = tmp%3#0
                (assert check%0#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) value%0#0)
                let tmp%4#0: bool = (== result1#0 "echo: s")
                (assert tmp%4#0)
                itxn_begin
                let length%1#0: uint64 = (len "s")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%5#0: bytes = (concat value_as_uint16%1#0 "s")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%5#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L124
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%6#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%7#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%8#0: bool = (== tmp%7#0 0x151f7c75)
                let value%1#0: bytes = tmp%6#0
                let check%1#0: bool = tmp%8#0
                (assert check%1#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) value%1#0)
                let tmp%9#0: bool = (== result2#0 result1#0)
                (assert tmp%9#0)
                itxn_begin
                let length%2#0: uint64 = (len "s")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let tmp%10#0: bytes = (concat value_as_uint16%2#0 "s")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = tmp%10#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L127
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%11#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%12#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                let value%2#0: bytes = tmp%11#0
                let check%2#0: bool = tmp%13#0
                (assert check%2#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) value%2#0)
                let tmp%14#0: bool = (== result3#0 result1#0)
                (assert tmp%14#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
            block@0: // L130
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L132
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) value%0#0)
                let tmp%3#0: bool = (== result1#0 "echo: b")
                (assert tmp%3#0)
                itxn_begin
                let tmp%4#0: uint64 = (len "b")
                let tmp%5#0: bytes = (itob tmp%4#0)
                let tmp%6#0: bytes = ((substring 6 8) tmp%5#0)
                let tmp%7#0: bytes = (concat tmp%6#0 "b")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%7#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L135
                itxn_submit
                let awst_tmp%4#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%4#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%4#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                let value%1#0: bytes = tmp%8#0
                let check%1#0: bool = tmp%10#0
                (assert check%1#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) value%1#0)
                let tmp%11#0: bool = (== result2#0 result1#0)
                (assert tmp%11#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) 0x000162)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L138
                itxn_submit
                let awst_tmp%6#0: bytes = (itxn LastLog)
                let tmp%12#0: bytes = ((extract 4 0) awst_tmp%6#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%6#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                let value%2#0: bytes = tmp%12#0
                let check%2#0: bool = tmp%14#0
                (assert check%2#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) value%2#0)
                let tmp%15#0: bool = (== result3#0 result1#0)
                (assert tmp%15#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
            block@0: // L143
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L145
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result1#0: uint64 = (btoi value%0#0)
                let tmp%3#0: bool = (== result1#0 2u)
                (assert tmp%3#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = val_as_bytes%0#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L148
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                let value%1#0: bytes = tmp%4#0
                let check%1#0: bool = tmp%6#0
                (assert check%1#0) // ARC4 prefix is valid
                let result2#0: uint64 = (btoi value%1#0)
                let tmp%7#0: bool = (== result2#0 result1#0)
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L151
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                let value%2#0: bytes = tmp%8#0
                let check%2#0: bool = tmp%10#0
                (assert check%2#0) // ARC4 prefix is valid
                let result3#0: uint64 = (btoi value%2#0)
                let tmp%11#0: bool = (== result3#0 result1#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
            block@0: // L154
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L156
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result1#0: bytes = value%0#0
                let tmp%3#0: bool = (b== result1#0 3b)
                (assert tmp%3#0)
                itxn_begin
                let len_%0#0: uint64 = (len 2b)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%4#0: bytes = (b| 2b b_zeros%0#0)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%4#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L159
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                let value%1#0: bytes = tmp%5#0
                let check%1#0: bool = tmp%7#0
                (assert check%1#0) // ARC4 prefix is valid
                let result2#0: bytes = value%1#0
                let tmp%8#0: bool = (b== result2#0 result1#0)
                (assert tmp%8#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L162
                itxn_submit
                let awst_tmp%5#0: bytes = (itxn LastLog)
                let tmp%9#0: bytes = ((extract 4 0) awst_tmp%5#0)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%5#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                let value%2#0: bytes = tmp%9#0
                let check%2#0: bool = tmp%11#0
                (assert check%2#0) // ARC4 prefix is valid
                let result3#0: bytes = value%2#0
                let tmp%12#0: bool = (b== result3#0 result1#0)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
            block@0: // L165
                itxn_begin
                let length%0#0: uint64 = (len "s1")
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%0#0: bytes = (concat value_as_uint16%0#0 "s1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L169
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%0#0: bytes = txn.LastLog#0
                let tmp%1#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%2#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%3#0: bool = (== tmp%2#0 0x151f7c75)
                let value%0#0: bytes = tmp%1#0
                let check%0#0: bool = tmp%3#0
                (assert check%0#0) // ARC4 prefix is valid
                let result1#0: bytes = value%0#0
                let item_index%0#0: uint64 = (extract_uint16 result1#0 0u)
                let item_length%0#0: uint64 = (extract_uint16 result1#0 item_index%0#0)
                let item_length_plus_2%0#0: uint64 = (+ item_length%0#0 2u)
                let item0%0#0: bytes = (extract3 result1#0 item_index%0#0 item_length_plus_2%0#0)
                let item_index%1#0: uint64 = (extract_uint16 result1#0 2u)
                let item_length%1#0: uint64 = (extract_uint16 result1#0 item_index%1#0)
                let item_length_plus_2%1#0: uint64 = (+ item_length%1#0 2u)
                let item1%0#0: bytes = (extract3 result1#0 item_index%1#0 item_length_plus_2%1#0)
                let item2%0#0: bytes = (extract3 result1#0 4u 8u)
                let item3%0#0: bytes = (extract3 result1#0 12u 64u)
                let s#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let u#0: bytes = item2%0#0
                let bu#0: bytes = item3%0#0
                let tmp%4#0: bytes = ((extract 2 0) s#0)
                let tmp%5#0: bool = (== tmp%4#0 "echo: s1")
                (assert tmp%5#0)
                let tmp%6#0: bytes = ((extract 2 0) b#0)
                let tmp%7#0: bool = (== tmp%6#0 "echo: b1")
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (btoi u#0)
                let tmp%9#0: bool = (== tmp%8#0 2u)
                (assert tmp%9#0)
                let tmp%10#0: bool = (b== bu#0 3b)
                (assert tmp%10#0)
                itxn_begin
                let length%1#0: uint64 = (len "s1")
                let value_as_bytes%1#0: bytes = (itob length%1#0)
                let value_as_uint16%1#0: bytes = ((extract 6 2) value_as_bytes%1#0)
                let tmp%11#0: bytes = (concat value_as_uint16%1#0 "s1")
                let tmp%12#0: uint64 = (len "b1")
                let tmp%13#0: bytes = (itob tmp%12#0)
                let tmp%14#0: bytes = ((substring 6 8) tmp%13#0)
                let tmp%15#0: bytes = (concat tmp%14#0 "b1")
                let val_as_bytes%0#0: bytes = (itob 1u)
                let len_%0#0: uint64 = (len 2b)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%16#0: bytes = (b| 2b b_zeros%0#0)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%11#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: bytes = tmp%15#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_3#0: bytes = val_as_bytes%0#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_4#0: bytes = tmp%16#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_3#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_4#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L187
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%2#0: bytes = txn.LastLog#0
                let tmp%17#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%18#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%19#0: bool = (== tmp%18#0 0x151f7c75)
                let value%1#0: bytes = tmp%17#0
                let check%1#0: bool = tmp%19#0
                (assert check%1#0) // ARC4 prefix is valid
                let result2#0: bytes = value%1#0
                let tmp%20#0: bool = (== result1#0 result2#0)
                (assert tmp%20#0)
                itxn_begin
                let length%2#0: uint64 = (len "s1")
                let value_as_bytes%2#0: bytes = (itob length%2#0)
                let value_as_uint16%2#0: bytes = ((extract 6 2) value_as_bytes%2#0)
                let tmp%21#0: bytes = (concat value_as_uint16%2#0 "s1")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = tmp%21#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) 0x00026231)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L201
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%3#0: bytes = txn.LastLog#0
                let tmp%22#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%23#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%24#0: bool = (== tmp%23#0 0x151f7c75)
                let value%2#0: bytes = tmp%22#0
                let check%2#0: bool = tmp%24#0
                (assert check%2#0) // ARC4 prefix is valid
                let result3#0: bytes = value%2#0
                let tmp%25#0: bool = (== result1#0 result3#0)
                (assert tmp%25#0)
                return 
    
    program clear-state:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.clear_state_program() -> bool:
            block@0: // L17
                return 1u