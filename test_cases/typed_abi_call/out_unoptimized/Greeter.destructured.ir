contract test_cases.typed_abi_call.typed_c2c.Greeter:
    program approval:
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.approval_program() -> bool:
            block@0: // L17
                let tmp%0#0: bool = test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.__puya_arc4_router__() -> bool:
            block@0: // L17
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@17
            block@1: // abi_routing_L17
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test_is_a_b(byte[],byte[],application)void" => block@2, method "test_method_selector_kinds(application)void" => block@3, method "test_method_overload(application)void" => block@4, method "test_arg_conversion(application)void" => block@5, method "test_15plus_args(application)void" => block@6, method "test_void(application)void" => block@7, method "test_ref_types(application,asset)void" => block@8, method "test_native_string(application)void" => block@9, method "test_native_bytes(application)void" => block@10, method "test_native_uint64(application)void" => block@11, method "test_native_biguint(application)void" => block@12, method "test_native_tuple(application)void" => block@13, method "test_no_args(application)void" => block@14, * => block@15}
            block@2: // test_is_a_b_route_L18
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
                let tmp%11#0: bytes = (txna ApplicationArgs 3)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: uint64 = ((txnas Applications) tmp%12#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(tmp%8#0, tmp%10#0, tmp%13#0)
                return 1u
            block@3: // test_method_selector_kinds_route_L27
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (== tmp%14#0 NoOp)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: uint64 = (txn ApplicationID)
                let tmp%17#0: bool = (!= tmp%16#0 0u)
                (assert tmp%17#0) // is not creating
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let tmp%19#0: uint64 = (btoi tmp%18#0)
                let tmp%20#0: uint64 = ((txnas Applications) tmp%19#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(tmp%20#0)
                return 1u
            block@4: // test_method_overload_route_L40
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: bool = (== tmp%21#0 NoOp)
                (assert tmp%22#0) // OnCompletion is NoOp
                let tmp%23#0: uint64 = (txn ApplicationID)
                let tmp%24#0: bool = (!= tmp%23#0 0u)
                (assert tmp%24#0) // is not creating
                let tmp%25#0: bytes = (txna ApplicationArgs 1)
                let tmp%26#0: uint64 = (btoi tmp%25#0)
                let tmp%27#0: uint64 = ((txnas Applications) tmp%26#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(tmp%27#0)
                return 1u
            block@5: // test_arg_conversion_route_L55
                let tmp%28#0: uint64 = (txn OnCompletion)
                let tmp%29#0: bool = (== tmp%28#0 NoOp)
                (assert tmp%29#0) // OnCompletion is NoOp
                let tmp%30#0: uint64 = (txn ApplicationID)
                let tmp%31#0: bool = (!= tmp%30#0 0u)
                (assert tmp%31#0) // is not creating
                let tmp%32#0: bytes = (txna ApplicationArgs 1)
                let tmp%33#0: uint64 = (btoi tmp%32#0)
                let tmp%34#0: uint64 = ((txnas Applications) tmp%33#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(tmp%34#0)
                return 1u
            block@6: // test_15plus_args_route_L72
                let tmp%35#0: uint64 = (txn OnCompletion)
                let tmp%36#0: bool = (== tmp%35#0 NoOp)
                (assert tmp%36#0) // OnCompletion is NoOp
                let tmp%37#0: uint64 = (txn ApplicationID)
                let tmp%38#0: bool = (!= tmp%37#0 0u)
                (assert tmp%38#0) // is not creating
                let tmp%39#0: bytes = (txna ApplicationArgs 1)
                let tmp%40#0: uint64 = (btoi tmp%39#0)
                let tmp%41#0: uint64 = ((txnas Applications) tmp%40#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(tmp%41#0)
                return 1u
            block@7: // test_void_route_L100
                let tmp%42#0: uint64 = (txn OnCompletion)
                let tmp%43#0: bool = (== tmp%42#0 NoOp)
                (assert tmp%43#0) // OnCompletion is NoOp
                let tmp%44#0: uint64 = (txn ApplicationID)
                let tmp%45#0: bool = (!= tmp%44#0 0u)
                (assert tmp%45#0) // is not creating
                let tmp%46#0: bytes = (txna ApplicationArgs 1)
                let tmp%47#0: uint64 = (btoi tmp%46#0)
                let tmp%48#0: uint64 = ((txnas Applications) tmp%47#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_void(tmp%48#0)
                return 1u
            block@8: // test_ref_types_route_L114
                let tmp%49#0: uint64 = (txn OnCompletion)
                let tmp%50#0: bool = (== tmp%49#0 NoOp)
                (assert tmp%50#0) // OnCompletion is NoOp
                let tmp%51#0: uint64 = (txn ApplicationID)
                let tmp%52#0: bool = (!= tmp%51#0 0u)
                (assert tmp%52#0) // is not creating
                let tmp%53#0: bytes = (txna ApplicationArgs 1)
                let tmp%54#0: uint64 = (btoi tmp%53#0)
                let tmp%55#0: uint64 = ((txnas Applications) tmp%54#0)
                let tmp%56#0: bytes = (txna ApplicationArgs 2)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: uint64 = ((txnas Assets) tmp%57#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(tmp%55#0, tmp%58#0)
                return 1u
            block@9: // test_native_string_route_L128
                let tmp%59#0: uint64 = (txn OnCompletion)
                let tmp%60#0: bool = (== tmp%59#0 NoOp)
                (assert tmp%60#0) // OnCompletion is NoOp
                let tmp%61#0: uint64 = (txn ApplicationID)
                let tmp%62#0: bool = (!= tmp%61#0 0u)
                (assert tmp%62#0) // is not creating
                let tmp%63#0: bytes = (txna ApplicationArgs 1)
                let tmp%64#0: uint64 = (btoi tmp%63#0)
                let tmp%65#0: uint64 = ((txnas Applications) tmp%64#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(tmp%65#0)
                return 1u
            block@10: // test_native_bytes_route_L139
                let tmp%66#0: uint64 = (txn OnCompletion)
                let tmp%67#0: bool = (== tmp%66#0 NoOp)
                (assert tmp%67#0) // OnCompletion is NoOp
                let tmp%68#0: uint64 = (txn ApplicationID)
                let tmp%69#0: bool = (!= tmp%68#0 0u)
                (assert tmp%69#0) // is not creating
                let tmp%70#0: bytes = (txna ApplicationArgs 1)
                let tmp%71#0: uint64 = (btoi tmp%70#0)
                let tmp%72#0: uint64 = ((txnas Applications) tmp%71#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(tmp%72#0)
                return 1u
            block@11: // test_native_uint64_route_L152
                let tmp%73#0: uint64 = (txn OnCompletion)
                let tmp%74#0: bool = (== tmp%73#0 NoOp)
                (assert tmp%74#0) // OnCompletion is NoOp
                let tmp%75#0: uint64 = (txn ApplicationID)
                let tmp%76#0: bool = (!= tmp%75#0 0u)
                (assert tmp%76#0) // is not creating
                let tmp%77#0: bytes = (txna ApplicationArgs 1)
                let tmp%78#0: uint64 = (btoi tmp%77#0)
                let tmp%79#0: uint64 = ((txnas Applications) tmp%78#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(tmp%79#0)
                return 1u
            block@12: // test_native_biguint_route_L163
                let tmp%80#0: uint64 = (txn OnCompletion)
                let tmp%81#0: bool = (== tmp%80#0 NoOp)
                (assert tmp%81#0) // OnCompletion is NoOp
                let tmp%82#0: uint64 = (txn ApplicationID)
                let tmp%83#0: bool = (!= tmp%82#0 0u)
                (assert tmp%83#0) // is not creating
                let tmp%84#0: bytes = (txna ApplicationArgs 1)
                let tmp%85#0: uint64 = (btoi tmp%84#0)
                let tmp%86#0: uint64 = ((txnas Applications) tmp%85#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(tmp%86#0)
                return 1u
            block@13: // test_native_tuple_route_L174
                let tmp%87#0: uint64 = (txn OnCompletion)
                let tmp%88#0: bool = (== tmp%87#0 NoOp)
                (assert tmp%88#0) // OnCompletion is NoOp
                let tmp%89#0: uint64 = (txn ApplicationID)
                let tmp%90#0: bool = (!= tmp%89#0 0u)
                (assert tmp%90#0) // is not creating
                let tmp%91#0: bytes = (txna ApplicationArgs 1)
                let tmp%92#0: uint64 = (btoi tmp%91#0)
                let tmp%93#0: uint64 = ((txnas Applications) tmp%92#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(tmp%93#0)
                return 1u
            block@14: // test_no_args_route_L224
                let tmp%94#0: uint64 = (txn OnCompletion)
                let tmp%95#0: bool = (== tmp%94#0 NoOp)
                (assert tmp%95#0) // OnCompletion is NoOp
                let tmp%96#0: uint64 = (txn ApplicationID)
                let tmp%97#0: bool = (!= tmp%96#0 0u)
                (assert tmp%97#0) // is not creating
                let tmp%98#0: bytes = (txna ApplicationArgs 1)
                let tmp%99#0: uint64 = (btoi tmp%98#0)
                let tmp%100#0: uint64 = ((txnas Applications) tmp%99#0)
                test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(tmp%100#0)
                return 1u
            block@15: // switch_case_default_L17
                goto block@16
            block@16: // switch_case_next_L17
                goto block@21
            block@17: // bare_routing_L17
                let tmp%101#0: uint64 = (txn OnCompletion)
                switch tmp%101#0 {0u => block@18, * => block@19}
            block@18: // __algopy_default_create_L17
                let tmp%102#0: uint64 = (txn ApplicationID)
                let tmp%103#0: bool = (== tmp%102#0 0u)
                (assert tmp%103#0) // is creating
                test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create()
                return 1u
            block@19: // switch_case_default_L17
                goto block@20
            block@20: // switch_case_next_L17
                goto block@21
            block@21: // after_if_else_L17
                return 0u
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_is_a_b(a: bytes, b: bytes, app: uint64) -> void:
            block@0: // L18
                itxn_begin
                let length%0#0: uint64 = (len a#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
                let length%1#0: uint64 = (len b#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: bytes = encoded_value%1#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "is_a_b(byte[],byte[])void")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L20
                itxn_submit
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_selector_kinds(app: uint64) -> void:
            block@0: // L27
                itxn_begin
                let length%0#0: uint64 = (len "test1")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "test1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L29
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%0#0
                let length%1#0: uint64 = (len "echo: test1")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "echo: test1")
                let tmp%3#0: bool = (== result#0 encoded_value%1#0)
                (assert tmp%3#0)
                itxn_begin
                let length%2#0: uint64 = (len "test2")
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "test2")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L31
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%4#0
                let length%3#0: uint64 = (len "echo: test2")
                let as_bytes%3#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "echo: test2")
                let tmp%7#0: bool = (== result#0 encoded_value%3#0)
                (assert tmp%7#0)
                itxn_begin
                let length%4#0: uint64 = (len "test3")
                let as_bytes%4#0: bytes = (itob length%4#0)
                let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%4#0: bytes = (concat length_uint16%4#0 "test3")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%4#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L33
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%8#0
                let length%5#0: uint64 = (len "echo: test3")
                let as_bytes%5#0: bytes = (itob length%5#0)
                let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_value%5#0: bytes = (concat length_uint16%5#0 "echo: test3")
                let tmp%11#0: bool = (== result#0 encoded_value%5#0)
                (assert tmp%11#0)
                itxn_begin
                let length%6#0: uint64 = (len "test4")
                let as_bytes%6#0: bytes = (itob length%6#0)
                let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
                let encoded_value%6#0: bytes = (concat length_uint16%6#0 "test4")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%6#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L35
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%12#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                (assert tmp%14#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%12#0
                let length%7#0: uint64 = (len "echo: test4")
                let as_bytes%7#0: bytes = (itob length%7#0)
                let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
                let encoded_value%7#0: bytes = (concat length_uint16%7#0 "echo: test4")
                let tmp%15#0: bool = (== result#0 encoded_value%7#0)
                (assert tmp%15#0)
                itxn_begin
                let length%8#0: uint64 = (len "test5")
                let as_bytes%8#0: bytes = (itob length%8#0)
                let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
                let encoded_value%8#0: bytes = (concat length_uint16%8#0 "test5")
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%8#0
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@5
            block@5: // next_txn_L37
                itxn_submit
                let awst_tmp%4#0: bytes = (itxn LastLog)
                let tmp%16#0: bytes = ((extract 4 0) awst_tmp%4#0)
                let tmp%17#0: bytes = ((extract 0 4) awst_tmp%4#0)
                let tmp%18#0: bool = (== tmp%17#0 0x151f7c75)
                (assert tmp%18#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%16#0
                let length%9#0: uint64 = (len "echo: test5")
                let as_bytes%9#0: bytes = (itob length%9#0)
                let length_uint16%9#0: bytes = ((extract 6 2) as_bytes%9#0)
                let encoded_value%9#0: bytes = (concat length_uint16%9#0 "echo: test5")
                let tmp%19#0: bool = (== result#0 encoded_value%9#0)
                (assert tmp%19#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_method_overload(app: uint64) -> void:
            block@0: // L40
                itxn_begin
                let length%0#0: uint64 = (len "typed + ignore")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "typed + ignore")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L42
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%3#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%4#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%5#0: bool = (== tmp%4#0 0x151f7c75)
                (assert tmp%5#0) // ARC4 prefix is valid
                let length%1#0: uint64 = (len "echo: typed + ignore")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "echo: typed + ignore")
                let tmp%6#0: bool = (== tmp%3#0 encoded_value%1#0)
                (assert tmp%6#0)
                itxn_begin
                let length%2#0: uint64 = (len "untyped + ignore")
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "untyped + ignore")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L45
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%7#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%8#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%9#0: bool = (== tmp%8#0 0x151f7c75)
                (assert tmp%9#0) // ARC4 prefix is valid
                let length%3#0: uint64 = (len "echo: untyped + ignore")
                let as_bytes%3#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "echo: untyped + ignore")
                let tmp%10#0: bool = (== tmp%7#0 encoded_value%3#0)
                (assert tmp%10#0)
                itxn_begin
                let length%4#0: uint64 = (len "tuple")
                let as_bytes%4#0: bytes = (itob length%4#0)
                let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%4#0: bytes = (concat length_uint16%4#0 "tuple")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%4#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L48
                itxn_submit
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%11#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%12#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                (assert tmp%13#0) // ARC4 prefix is valid
                let result.0#0: bytes = tmp%11#0
                let result.1.LastLog#0: bytes = (itxn LastLog)
                let length%5#0: uint64 = (len "echo: tuple")
                let as_bytes%5#0: bytes = (itob length%5#0)
                let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_value%5#0: bytes = (concat length_uint16%5#0 "echo: tuple")
                let tmp%14#0: bool = (== result.0#0 encoded_value%5#0)
                (assert tmp%14#0)
                let tmp%15#0: bytes = ((extract 4 0) result.1.LastLog#0)
                let tmp%16#0: bytes = ((extract 0 4) result.1.LastLog#0)
                let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
                (assert tmp%17#0) // ARC4 prefix is valid
                let length%6#0: uint64 = (len "echo: tuple")
                let as_bytes%6#0: bytes = (itob length%6#0)
                let length_uint16%6#0: bytes = ((extract 6 2) as_bytes%6#0)
                let encoded_value%6#0: bytes = (concat length_uint16%6#0 "echo: tuple")
                let tmp%18#0: bool = (== tmp%15#0 encoded_value%6#0)
                (assert tmp%18#0)
                itxn_begin
                let length%7#0: uint64 = (len "untyped")
                let as_bytes%7#0: bytes = (itob length%7#0)
                let length_uint16%7#0: bytes = ((extract 6 2) as_bytes%7#0)
                let encoded_value%7#0: bytes = (concat length_uint16%7#0 "untyped")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%7#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L52
                itxn_submit
                let txn_result.LastLog#0: bytes = (itxn LastLog)
                let tmp%19#0: bytes = ((extract 4 0) txn_result.LastLog#0)
                let tmp%20#0: bytes = ((extract 0 4) txn_result.LastLog#0)
                let tmp%21#0: bool = (== tmp%20#0 0x151f7c75)
                (assert tmp%21#0) // ARC4 prefix is valid
                let length%8#0: uint64 = (len "echo: untyped")
                let as_bytes%8#0: bytes = (itob length%8#0)
                let length_uint16%8#0: bytes = ((extract 6 2) as_bytes%8#0)
                let encoded_value%8#0: bytes = (concat length_uint16%8#0 "echo: untyped")
                let tmp%22#0: bool = (== tmp%19#0 encoded_value%8#0)
                (assert tmp%22#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_arg_conversion(app: uint64) -> void:
            block@0: // L55
                itxn_begin
                let length%0#0: uint64 = (len "converted1")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "converted1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L57
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 0x636f6e76657274656431)
                (assert tmp%0#0)
                itxn_begin
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(uint64)void")
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L60
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: bytes = (itob 2u)
                let tmp%2#0: bool = (== txn.LastLog#0 tmp%1#0)
                (assert tmp%2#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(uint512)void")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L63
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%3#0: bytes = (bzero 56u)
                let tmp%4#0: bytes = (itob 3u)
                let tmp%5#0: bytes = (concat tmp%3#0 tmp%4#0)
                let tmp%6#0: bool = (== txn.LastLog#0 tmp%5#0)
                (assert tmp%6#0)
                itxn_begin
                let length%1#0: uint64 = (len 0x34)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x34)
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%1#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(byte[])void")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L66
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%7#0: bool = (== txn.LastLog#0 0x34)
                (assert tmp%7#0)
                itxn_begin
                let encoded_bool%0#0: bytes = (setbit 0x00 0u 1u)
                let inner_txn_params%4%%param_ApplicationArgs_idx_1#0: bytes = encoded_bool%0#0
                let inner_txn_params%4%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%4%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(bool)void")
                ((itxn_field ApplicationArgs) inner_txn_params%4%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@5
            block@5: // next_txn_L69
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%8#0: bool = (== txn.LastLog#0 0x54727565)
                (assert tmp%8#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_15plus_args(app: uint64) -> void:
            block@0: // L72
                itxn_begin
                let encoded_tuple_buffer%1#0: bytes = (concat 0x 0xde)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 0xad)
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 0xbe)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 0xef)
                let encoded_tuple_buffer%6#0: bytes = (concat 0x 0x0f)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 0x10)
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 0x11)
                let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 0x12)
                let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 encoded_tuple_buffer%4#0)
                let encoded_tuple_buffer%11#0: bytes = (concat encoded_tuple_buffer%10#0 0x14)
                let inner_txn_params%0%%param_ApplicationArgs_idx_15#0: bytes = encoded_tuple_buffer%11#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "return_args_after_14th(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint8,uint8,uint8,(uint8,uint8,uint8,uint8),uint8)byte[]")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x0000000000000002)
                ((itxn_field ApplicationArgs) 0x0000000000000003)
                ((itxn_field ApplicationArgs) 0x0000000000000004)
                ((itxn_field ApplicationArgs) 0x0000000000000005)
                ((itxn_field ApplicationArgs) 0x0000000000000006)
                ((itxn_field ApplicationArgs) 0x0000000000000007)
                ((itxn_field ApplicationArgs) 0x0000000000000008)
                ((itxn_field ApplicationArgs) 0x0000000000000009)
                ((itxn_field ApplicationArgs) 0x000000000000000a)
                ((itxn_field ApplicationArgs) 0x000000000000000b)
                ((itxn_field ApplicationArgs) 0x000000000000000c)
                ((itxn_field ApplicationArgs) 0x000000000000000d)
                ((itxn_field ApplicationArgs) 0x000000000000000e)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_15#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L74
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = tmp%0#0
                let tmp%3#0: bytes = ((extract 2 0) result#0)
                let tmp%4#0: bool = (== tmp%3#0 0x0f101112deadbeef14)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_void(app: uint64) -> void:
            block@0: // L100
                itxn_begin
                let length%0#0: uint64 = (len "World1")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "World1")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L102
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bool = (== txn.LastLog#0 0x576f726c6431)
                (assert tmp%0#0)
                itxn_begin
                let length%1#0: uint64 = (len "World2")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "World2")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%1#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L105
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%1#0: bool = (== txn.LastLog#0 0x576f726c6432)
                (assert tmp%1#0)
                itxn_begin
                let length%2#0: uint64 = (len "World3")
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "World3")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L108
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%2#0: bool = (== txn.LastLog#0 0x576f726c6433)
                (assert tmp%2#0)
                itxn_begin
                let length%3#0: uint64 = (len "World4")
                let as_bytes%3#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 "World4")
                let inner_txn_params%3%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%3#0
                let inner_txn_params%3%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%3%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(string)void")
                ((itxn_field ApplicationArgs) inner_txn_params%3%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@4
            block@4: // next_txn_L111
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%3#0: bool = (== txn.LastLog#0 0x576f726c6434)
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_ref_types(app: uint64, asset: uint64) -> void:
            block@0: // L114
                itxn_begin
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_Accounts_idx_0#0: bytes = tmp%0#0
                let inner_txn_params%0%%param_Applications_idx_0#0: uint64 = app#0
                let inner_txn_params%0%%param_Assets_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field Assets) inner_txn_params%0%%param_Assets_idx_0#0)
                ((itxn_field Applications) inner_txn_params%0%%param_Applications_idx_0#0)
                ((itxn_field Accounts) inner_txn_params%0%%param_Accounts_idx_0#0)
                ((itxn_field ApplicationArgs) method "log(asset,account,application)void")
                ((itxn_field ApplicationArgs) 0x00)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field ApplicationArgs) 0x01)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L116
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetName) asset#0)
                (assert check%0#0) // asset exists
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bytes = (concat value%0#0 tmp%1#0)
                let (value%1#0: bytes, check%1#0: bool) = ((app_params_get AppAddress) app#0)
                (assert check%1#0) // application exists
                let tmp%3#0: bytes = (concat tmp%2#0 value%1#0)
                let tmp%4#0: bool = (== txn.LastLog#0 tmp%3#0)
                (assert tmp%4#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_string(app: uint64) -> void:
            block@0: // L128
                itxn_begin
                let length%0#0: uint64 = (len "s")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "s")
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L130
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result1#0 "echo: s")
                (assert tmp%3#0)
                itxn_begin
                let length%1#0: uint64 = (len "s")
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 "s")
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%1#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L133
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%4#0)
                let tmp%7#0: bool = (== result2#0 result1#0)
                (assert tmp%7#0)
                itxn_begin
                let length%2#0: uint64 = (len "s")
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "s")
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_string(string)string")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L136
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%8#0)
                let tmp%11#0: bool = (== result3#0 result1#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_bytes(app: uint64) -> void:
            block@0: // L139
                itxn_begin
                let length%0#0: uint64 = (len 0x62)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 0x62)
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L141
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = ((extract 2 0) tmp%0#0)
                let tmp%3#0: bool = (== result1#0 0x6563686f3a2062)
                (assert tmp%3#0)
                itxn_begin
                let length%1#0: uint64 = (len 0x62)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x62)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%1#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L144
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result2#0: bytes = ((extract 2 0) tmp%4#0)
                let tmp%7#0: bool = (== result2#0 result1#0)
                (assert tmp%7#0)
                itxn_begin
                let length%2#0: uint64 = (len 0x62)
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 0x62)
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_bytes(byte[])byte[]")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L147
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result3#0: bytes = ((extract 2 0) tmp%8#0)
                let tmp%11#0: bool = (== result3#0 result1#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_uint64(app: uint64) -> void:
            block@0: // L152
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L154
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: uint64 = (btoi tmp%0#0)
                let tmp%3#0: bool = (== result1#0 2u)
                (assert tmp%3#0)
                itxn_begin
                let val_as_bytes%0#0: bytes = (itob 1u)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = val_as_bytes%0#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L157
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let result2#0: uint64 = (btoi tmp%4#0)
                let tmp%7#0: bool = (== result2#0 result1#0)
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_uint64(uint64)uint64")
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L160
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%8#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let result3#0: uint64 = (btoi tmp%8#0)
                let tmp%11#0: bool = (== result3#0 result1#0)
                (assert tmp%11#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_biguint(app: uint64) -> void:
            block@0: // L163
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L165
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = tmp%0#0
                let tmp%3#0: bool = (b== result1#0 3b)
                (assert tmp%3#0)
                itxn_begin
                let len_%0#0: uint64 = (len 2b)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%4#0: bytes = (b| 2b b_zeros%0#0)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = tmp%4#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L168
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%5#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%6#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%7#0: bool = (== tmp%6#0 0x151f7c75)
                (assert tmp%7#0) // ARC4 prefix is valid
                let result2#0: bytes = tmp%5#0
                let tmp%8#0: bool = (b== result2#0 result1#0)
                (assert tmp%8#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_biguint(uint512)uint512")
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L171
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%9#0: bytes = ((extract 4 0) awst_tmp%2#0)
                let tmp%10#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%11#0: bool = (== tmp%10#0 0x151f7c75)
                (assert tmp%11#0) // ARC4 prefix is valid
                let result3#0: bytes = tmp%9#0
                let tmp%12#0: bool = (b== result3#0 result1#0)
                (assert tmp%12#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_native_tuple(app: uint64) -> void:
            block@0: // L174
                itxn_begin
                let length%0#0: uint64 = (len "s1")
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 "s1")
                let length%1#0: uint64 = (len 0x6231)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 0x6231)
                let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%0#0
                let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: bytes = encoded_value%1#0
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L178
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result1#0: bytes = tmp%0#0
                let item_start_offset%0#0: uint64 = (extract_uint16 result1#0 0u)
                let item_end_offset%0#0: uint64 = (extract_uint16 result1#0 2u)
                let item0%0#0: bytes = (substring3 result1#0 item_start_offset%0#0 item_end_offset%0#0)
                let item_start_offset%1#0: uint64 = (extract_uint16 result1#0 2u)
                let item_end_offset%1#0: uint64 = (len result1#0)
                let item1%0#0: bytes = (substring3 result1#0 item_start_offset%1#0 item_end_offset%1#0)
                let item2%0#0: bytes = (extract3 result1#0 4u 8u) // on error: Index access is out of bounds
                let item3%0#0: bytes = (extract3 result1#0 12u 64u) // on error: Index access is out of bounds
                let s#0: bytes = item0%0#0
                let b#0: bytes = item1%0#0
                let u#0: bytes = item2%0#0
                let bu#0: bytes = item3%0#0
                let tmp%3#0: bytes = ((extract 2 0) s#0)
                let tmp%4#0: bool = (== tmp%3#0 "echo: s1")
                (assert tmp%4#0)
                let tmp%5#0: bytes = ((extract 2 0) b#0)
                let tmp%6#0: bool = (== tmp%5#0 0x6563686f3a206231)
                (assert tmp%6#0)
                let tmp%7#0: uint64 = (btoi u#0)
                let tmp%8#0: bool = (== tmp%7#0 2u)
                (assert tmp%8#0)
                let tmp%9#0: bool = (b== bu#0 3b)
                (assert tmp%9#0)
                itxn_begin
                let length%2#0: uint64 = (len "s1")
                let as_bytes%2#0: bytes = (itob length%2#0)
                let length_uint16%2#0: bytes = ((extract 6 2) as_bytes%2#0)
                let encoded_value%2#0: bytes = (concat length_uint16%2#0 "s1")
                let length%3#0: uint64 = (len 0x6231)
                let as_bytes%3#0: bytes = (itob length%3#0)
                let length_uint16%3#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_value%3#0: bytes = (concat length_uint16%3#0 0x6231)
                let val_as_bytes%0#0: bytes = (itob 1u)
                let len_%0#0: uint64 = (len 2b)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%10#0: bytes = (b| 2b b_zeros%0#0)
                let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%2#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_2#0: bytes = encoded_value%3#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_3#0: bytes = val_as_bytes%0#0
                let inner_txn_params%1%%param_ApplicationArgs_idx_4#0: bytes = tmp%10#0
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_3#0)
                ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_4#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L196
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%11#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%12#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%13#0: bool = (== tmp%12#0 0x151f7c75)
                (assert tmp%13#0) // ARC4 prefix is valid
                let result2#0: bytes = tmp%11#0
                let tmp%14#0: bool = (== result1#0 result2#0)
                (assert tmp%14#0)
                itxn_begin
                let length%4#0: uint64 = (len "s1")
                let as_bytes%4#0: bytes = (itob length%4#0)
                let length_uint16%4#0: bytes = ((extract 6 2) as_bytes%4#0)
                let encoded_value%4#0: bytes = (concat length_uint16%4#0 "s1")
                let length%5#0: uint64 = (len 0x6231)
                let as_bytes%5#0: bytes = (itob length%5#0)
                let length_uint16%5#0: bytes = ((extract 6 2) as_bytes%5#0)
                let encoded_value%5#0: bytes = (concat length_uint16%5#0 0x6231)
                let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: bytes = encoded_value%4#0
                let inner_txn_params%2%%param_ApplicationArgs_idx_2#0: bytes = encoded_value%5#0
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "echo_native_tuple(string,byte[],uint64,uint512)(string,byte[],uint64,uint512)")
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
                ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_2#0)
                ((itxn_field ApplicationArgs) 0x0000000000000001)
                ((itxn_field ApplicationArgs) 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L210
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let tmp%15#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%16#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%17#0: bool = (== tmp%16#0 0x151f7c75)
                (assert tmp%17#0) // ARC4 prefix is valid
                let result3#0: bytes = tmp%15#0
                let tmp%18#0: bool = (== result1#0 result3#0)
                (assert tmp%18#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.test_no_args(app: uint64) -> void:
            block@0: // L224
                itxn_begin
                let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L226
                itxn_submit
                let awst_tmp%0#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: uint64 = (btoi tmp%0#0)
                let tmp%3#0: bool = (== result#0 42u)
                (assert tmp%3#0)
                itxn_begin
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L228
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let arc4_result#0: bytes = tmp%4#0
                let reinterpret_biguint%0#0: biguint = arc4_result#0
                let tmp%7#0: bool = (b== reinterpret_biguint%0#0 0x000000000000002a)
                (assert tmp%7#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "no_args()uint64")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L231
                itxn_submit
                let awst_tmp%2#0: bytes = (itxn LastLog)
                let tmp%9#0: bytes = ((extract 0 4) awst_tmp%2#0)
                let tmp%10#0: bool = (== tmp%9#0 0x151f7c75)
                (assert tmp%10#0) // ARC4 prefix is valid
                let awst_tmp%3#0: bytes = (itxn LastLog)
                let tmp%12#0: bytes = ((extract 4 0) awst_tmp%3#0)
                let tmp%13#0: bytes = ((extract 0 4) awst_tmp%3#0)
                let tmp%14#0: bool = (== tmp%13#0 0x151f7c75)
                (assert tmp%14#0) // ARC4 prefix is valid
                let reinterpret_biguint%2#0: biguint = tmp%12#0
                let tmp%15#0: bool = (b== reinterpret_biguint%2#0 0x000000000000002a)
                (assert tmp%15#0)
                return 
        
        subroutine test_cases.typed_abi_call.typed_c2c.Greeter.__algopy_default_create() -> void:
            block@0: // L17
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u