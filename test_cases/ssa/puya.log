>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug ssa
debug: Building AWST for __init__.py
debug: Building AWST for ssa/__init__.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_arc4.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for ssa/contract.py
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@6: // for_header_L105
debug: Terminated block@6: // for_header_L105
debug: Sealing block@None: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@6: // for_header_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L105
debug: Terminated block@7: // for_body_L105
debug: Sealing block@8: // for_footer_L105
debug: Sealing block@None: // after_for_L105
debug: Terminated block@8: // for_footer_L105
debug: Sealing block@6: // for_header_L105
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5, range_item%10#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#6: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#6: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3) in block@3: // ternary_true_L105
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6
debug: Deleting Phi assignment: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4)
debug: Replaced trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6 in current definition for 1 blocks
debug: Added source#6 to Phi node: let source#3: bytes = φ(source#6 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#4 to Phi node: let source#3: bytes = φ(source#6 <- block@5, source#4 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Terminated block@9: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L246
debug: Terminated block@4: // for_header_L246
debug: Sealing block@None: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L246
debug: Terminated block@5: // for_body_L246
debug: Sealing block@6: // for_footer_L246
debug: Sealing block@None: // after_for_L246
debug: Terminated block@6: // for_footer_L246
debug: Sealing block@4: // for_header_L246
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L241
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3) in block@3: // after_if_else_L241
debug: Added tail_cursor#3 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3, tail_cursor#3 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0
debug: Deleting Phi assignment: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#2 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L241
debug: Added header_cursor#2 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@6) in block@6: // for_footer_L246
debug: Terminated block@7: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L48
debug: Terminated block@0: // L48
debug: Sealing block@None: // if_body_L51
debug: Sealing block@None: // else_body_L51
debug: Terminated block@1: // if_body_L51
debug: Sealing block@2: // after_if_else_L51
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@2: // after_if_else_L51
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@0) in block@0: // L48
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@0, b#1 <- block@1) in block@1: // if_body_L51
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L51
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@0) in block@0: // L48
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#0 <- block@0, a#1 <- block@1) in block@1: // if_body_L51
debug: Terminated block@2: // after_if_else_L51
debug: Sealing block@0: // L60
debug: Terminated block@0: // L60
debug: Sealing block@None: // if_body_L61
debug: Sealing block@None: // else_body_L61
debug: Terminated block@1: // if_body_L61
debug: Terminated block@2: // else_body_L61
debug: Sealing block@3: // after_if_else_L61
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@3: // after_if_else_L61
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@1) in block@1: // if_body_L61
debug: Added x#1 to Phi node: let x#2: uint64 = φ(x#0 <- block@1, x#1 <- block@2) in block@2: // else_body_L61
debug: Terminated block@3: // after_if_else_L61
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // while_top_L14
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@1: // while_top_L14
debug: Terminated block@1: // while_top_L14
debug: Sealing block@None: // while_body_L14
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@1: // while_top_L14
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@1: // while_top_L14
debug: Terminated block@2: // while_body_L14
debug: Sealing block@1: // while_top_L14
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@0) in block@0: // L7
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#1 <- block@0, a#3 <- block@2) in block@2: // while_body_L14
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#1 <- block@0) in block@0: // L7
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#1 <- block@0, b#3 <- block@2) in block@2: // while_body_L14
debug: Sealing block@None: // after_while_L14
debug: Terminated block@3: // after_while_L14
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L18
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L18
debug: Terminated block@4: // for_header_L18
debug: Sealing block@None: // for_body_L18
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@4: // for_header_L18
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@4: // for_header_L18
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@4: // for_header_L18
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@4: // for_header_L18
debug: Terminated block@5: // for_body_L18
debug: Sealing block@6: // for_footer_L18
debug: Sealing block@None: // after_for_L18
debug: Terminated block@6: // for_footer_L18
debug: Sealing block@4: // for_header_L18
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_while_L14
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L18
debug: Added b#2 to Phi node: let b#4: uint64 = φ(b#2 <- block@3) in block@3: // after_while_L14
debug: Added b#5 to Phi node: let b#4: uint64 = φ(b#2 <- block@3, b#5 <- block@6) in block@6: // for_footer_L18
debug: Added a#2 to Phi node: let a#4: uint64 = φ(a#2 <- block@3) in block@3: // after_while_L14
debug: Added a#5 to Phi node: let a#4: uint64 = φ(a#2 <- block@3, a#5 <- block@6) in block@6: // for_footer_L18
debug: Terminated block@7: // after_for_L18
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@8: // if_body_L22
debug: Sealing block@None: // if_body_L23
debug: Sealing block@None: // else_body_L23
debug: Terminated block@9: // if_body_L23
debug: Terminated block@10: // else_body_L23
debug: Sealing block@None: // if_body_L28
debug: Sealing block@None: // else_body_L28
debug: Terminated block@11: // if_body_L28
debug: Terminated block@12: // else_body_L28
debug: Sealing block@13: // after_if_else_L28
debug: Terminated block@13: // after_if_else_L28
debug: Sealing block@14: // after_if_else_L23
debug: Terminated block@14: // after_if_else_L23
debug: Terminated block@15: // else_body_L22
debug: Sealing block@None: // if_body_L32
debug: Sealing block@None: // else_body_L32
debug: Terminated block@16: // if_body_L32
debug: Terminated block@17: // else_body_L32
debug: Sealing block@18: // after_if_else_L32
debug: Terminated block@18: // after_if_else_L32
debug: Sealing block@19: // after_if_else_L22
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@19: // after_if_else_L22
debug: Created Phi assignment: let c#5: uint64 = undefined while trying to resolve 'c' in block@14: // after_if_else_L23
debug: Added c#0 to Phi node: let c#5: uint64 = φ(c#0 <- block@9) in block@9: // if_body_L23
debug: Added c#1 to Phi node: let c#5: uint64 = φ(c#0 <- block@9, c#1 <- block@13) in block@13: // after_if_else_L28
debug: Added c#5 to Phi node: let c#4: uint64 = φ(c#5 <- block@14) in block@14: // after_if_else_L23
debug: Created Phi assignment: let c#6: uint64 = undefined while trying to resolve 'c' in block@18: // after_if_else_L32
debug: Added c#2 to Phi node: let c#6: uint64 = φ(c#2 <- block@16) in block@16: // if_body_L32
debug: Added c#3 to Phi node: let c#6: uint64 = φ(c#2 <- block@16, c#3 <- block@17) in block@17: // else_body_L32
debug: Added c#6 to Phi node: let c#4: uint64 = φ(c#5 <- block@14, c#6 <- block@18) in block@18: // after_if_else_L32
debug: Terminated block@19: // after_if_else_L22
debug: Sealing block@0: // L43
debug: Terminated block@0: // L43
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.ssa.ir
info: Optimizing test_cases.ssa.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded 1 + 2 to 3
debug: Folded 4 * 5 to 20
debug: Folded 3 + 2 to 5
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%1#1, i#0
debug: Replacing {range_item%1#1} with i#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable b#6
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@6: // for_footer_L18 with block@5: // for_body_L18 in block@4: // for_header_L18
debug: Merged linear block@6: // for_footer_L18 into block@5: // for_body_L18
debug: Replaced predecessor block@13: // after_if_else_L28 with block@11: // if_body_L28 in block@14: // after_if_else_L23
debug: Merged linear block@13: // after_if_else_L28 into block@11: // if_body_L28
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.one_hundred
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.phi_in_equiv_class
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: y#0, tmp2#0, x#1, tmp1#0, x#0, x#2
debug: Replacing {tmp2#0, x#1, tmp1#0, x#0, x#2} with y#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@1: // if_body_L61
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 3 * 20 to 60
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.one_hundred
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.phi_in_equiv_class
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@2: // else_body_L61
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 60 + 20 to 80
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.one_hundred
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.phi_in_equiv_class
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@3: // after_if_else_L61 into block@0: // L60
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.one_hundred
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.phi_in_equiv_class
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.ssa.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 4, ending loop
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.cssa.ir
debug: Removing Phis from test_cases.ssa.contract.MyContract.approval_program
debug: Removing Phis from test_cases.ssa.contract.one_hundred
debug: Removing Phis from test_cases.ssa.contract.phi_in_equiv_class
debug: Removing Phis from test_cases.ssa.contract.MyContract.clear_state_program
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.ssa.contract.MyContract.approval_program
debug: loc: {b#10=None, a#8=None, b#1=b#1, a#1=a#1}
debug: pred: {b#10=b#1, a#8=a#1}
debug: ready: b#10, a#8
debug: to_do: b#10, a#8
debug: * avail a#8
debug: * avail a#1
debug: * avail b#10
debug: * avail b#1
debug: * to_do a#8
debug: * to_do b#10
debug: loc: {b#2=None, a#2=None, b#10=b#10, a#8=a#8}
debug: pred: {b#2=b#10, a#2=a#8}
debug: ready: b#2, a#2
debug: to_do: b#2, a#2
debug: * avail a#2
debug: * avail a#8
debug: * avail b#2
debug: * avail b#10
debug: * to_do a#2
debug: * to_do b#2
debug: loc: {b#10=None, a#8=None, b#3=b#3, a#3=a#3}
debug: pred: {b#10=b#3, a#8=a#3}
debug: ready: b#10, a#8
debug: to_do: b#10, a#8
debug: * avail a#8
debug: * avail a#3
debug: * avail b#10
debug: * avail b#3
debug: * to_do a#8
debug: * to_do b#10
debug: loc: {a#11=None, b#13=None, i#1=None, a#2=a#2, b#2=b#2, range_item%1#0=range_item%1#0}
debug: pred: {a#11=a#2, b#13=b#2, i#1=range_item%1#0}
debug: ready: a#11, b#13, i#1
debug: to_do: a#11, b#13, i#1
debug: * avail i#1
debug: * avail range_item%1#0
debug: * avail b#13
debug: * avail b#2
debug: * avail a#11
debug: * avail a#2
debug: * to_do i#1
debug: * to_do b#13
debug: * to_do a#11
debug: loc: {a#4=None, b#4=None, i#0=None, a#11=a#11, b#13=b#13, i#1=i#1}
debug: pred: {a#4=a#11, b#4=b#13, i#0=i#1}
debug: ready: a#4, b#4, i#0
debug: to_do: a#4, b#4, i#0
debug: * avail i#0
debug: * avail i#1
debug: * avail b#4
debug: * avail b#13
debug: * avail a#4
debug: * avail a#11
debug: * to_do i#0
debug: * to_do b#4
debug: * to_do a#4
debug: loc: {a#11=None, b#13=None, i#1=None, a#5=a#5, b#5=b#5, range_item%1#2=range_item%1#2}
debug: pred: {a#11=a#5, b#13=b#5, i#1=range_item%1#2}
debug: ready: a#11, b#13, i#1
debug: to_do: a#11, b#13, i#1
debug: * avail i#1
debug: * avail range_item%1#2
debug: * avail b#13
debug: * avail b#5
debug: * avail a#11
debug: * avail a#5
debug: * to_do i#1
debug: * to_do b#13
debug: * to_do a#11
debug: Sequentializing parallel copies in test_cases.ssa.contract.one_hundred
debug: loc: {a#5=None, b#6=None, a#0=a#0, b#0=b#0}
debug: pred: {a#5=a#0, b#6=b#0}
debug: ready: a#5, b#6
debug: to_do: a#5, b#6
debug: * avail b#6
debug: * avail b#0
debug: * avail a#5
debug: * avail a#0
debug: * to_do b#6
debug: * to_do a#5
debug: loc: {a#5=None, b#6=None, a#1=a#1, b#1=b#1}
debug: pred: {a#5=a#1, b#6=b#1}
debug: ready: a#5, b#6
debug: to_do: a#5, b#6
debug: * avail b#6
debug: * avail b#1
debug: * avail a#5
debug: * avail a#1
debug: * to_do b#6
debug: * to_do a#5
debug: loc: {a#2=None, b#2=None, a#5=a#5, b#6=b#6}
debug: pred: {a#2=a#5, b#2=b#6}
debug: ready: a#2, b#2
debug: to_do: a#2, b#2
debug: * avail b#2
debug: * avail b#6
debug: * avail a#2
debug: * avail a#5
debug: * to_do b#2
debug: * to_do a#2
debug: Sequentializing parallel copies in test_cases.ssa.contract.phi_in_equiv_class
debug: Sequentializing parallel copies in test_cases.ssa.contract.MyContract.clear_state_program
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.ssa.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#1 with [a#8, a#2, a#3, a#11, a#4, a#5]
debug: Coalescing b#1 with [b#10, b#2, b#3, b#13, b#4, b#5, b#7]
debug: Coalescing range_item%1#0 with [range_item%1#2]
debug: Coalescing i#0 with [i#1]
debug: Coalescing c#0 with [c#10, c#1, c#5, c#16, c#2, c#13, c#3, c#6, c#4, c#7]
debug: Coalescing resulted in 76 replacement/s
debug: Coalescing local variables in test_cases.ssa.contract.one_hundred using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#1, a#2]
debug: Coalescing b#0 with [b#6, b#1, b#2, b#3]
debug: Coalescing resulted in 17 replacement/s
debug: Coalescing local variables in test_cases.ssa.contract.phi_in_equiv_class using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.ssa.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/test_cases/ssa/out/contract_MyContract.final.ir
debug: Inserted main_while_top@1.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_while_body@2.ops[2]: 'store a#1 to l-stack (copy)'
debug: Replaced main_while_body@2.ops[5]: 'load a#1' with 'load a#1 from l-stack (no copy)'
debug: Inserted main_after_while@3.ops[1]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced main_after_while@3.ops[3]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted main_for_header@4.ops[3]: 'store continue_looping%2#0 to l-stack (copy)'
debug: Replaced main_for_header@4.ops[5]: 'load continue_looping%2#0' with 'load continue_looping%2#0 from l-stack (no copy)'
debug: Inserted main_for_body@5.ops[11]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced main_for_body@5.ops[13]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@5.ops[2]: 'store a#1 to l-stack (copy)'
debug: Replaced main_for_body@5.ops[5]: 'load a#1' with 'load a#1 from l-stack (no copy)'
debug: Inserted main_for_body@5.ops[7]: 'store i#0 to l-stack (copy)'
debug: Replaced main_for_body@5.ops[10]: 'load i#0' with 'load i#0 from l-stack (no copy)'
debug: Inserted main_after_for@7.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_for@7.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_else_body@10.ops[7]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_else_body@10.ops[9]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_else_body@10.ops[3]: 'store b#1 to l-stack (copy)'
debug: Replaced main_else_body@10.ops[6]: 'load b#1' with 'load b#1 from l-stack (no copy)'
debug: Inserted main_else_body@15.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_else_body@15.ops[5]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[6]: 'store c#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[8]: 'load c#0' with 'load c#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[10]: 'store c_bytes#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[12]: 'load c_bytes#0' with 'load c_bytes#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[17]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[19]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[22]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[24]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[29]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[31]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[34]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[36]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[2]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[5]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[1]: 'store c#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[5]: 'load c#0' with 'load c#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@19.ops[11]: 'store c#0 to l-stack (copy)'
debug: Replaced main_after_if_else@19.ops[41]: 'load c#0' with 'load c#0 from l-stack (no copy)'
debug: Found 11 edge set/s for test_cases.ssa.contract.MyContract.approval_program
debug: test_cases.ssa.contract.MyContract.approval_program f-stack entry: ['c#0', 'i#0']
debug: test_cases.ssa.contract.MyContract.approval_program f-stack on first store: ['a#1', 'b#1']
debug: Inserted one_hundred_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced one_hundred_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[1]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[2]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[4]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[7]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.ssa.contract.one_hundred
debug: test_cases.ssa.contract.one_hundred f-stack entry: []
debug: test_cases.ssa.contract.one_hundred f-stack on first store: ['a#0', 'b#0']
debug: Inserted phi_in_equiv_class_block@0.ops[3]: 'store x#3 to l-stack (copy)'
debug: Replaced phi_in_equiv_class_block@0.ops[5]: 'load x#3' with 'load x#3 from l-stack (no copy)'
debug: Inserted main_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted one_hundred_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced one_hundred_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[1]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[2]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[4]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[7]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.ssa.contract.one_hundred
debug: test_cases.ssa.contract.one_hundred f-stack entry: []
debug: test_cases.ssa.contract.one_hundred f-stack on first store: ['a#0', 'b#0']
info: Writing ssa/out/contract.approval.teal
info: Writing ssa/out/contract.approval.debug.teal
info: Writing ssa/out/contract.clear.teal
info: Writing ssa/out/contract.clear.debug.teal
>> exit code = 0