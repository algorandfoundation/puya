main test_cases.ssa.contract.MyContract.approval_program:
    block@0: // L7
        let materialized_values%0#0: uint64 = (+ 1u 2u)
        let a#0: uint64 = materialized_values%0#0
        let materialized_values%1#0: uint64 = (* 4u 5u)
        let b#0: uint64 = materialized_values%1#0
        let materialized_values%2#0: uint64 = (* a#0 b#0)
        let a#0: uint64 = materialized_values%2#0
        let materialized_values%3#0: uint64 = (+ a#0 b#0)
        let b#0: uint64 = materialized_values%3#0
        goto block@1
    block@1: // while_top_L14
        let tmp%0#0: bool = (< a#0 5u)
        goto tmp%0#0 ? block@2 : block@3
    block@2: // while_body_L15
        let materialized_values%4#0: uint64 = (+ b#0 a#0)
        let b#0: uint64 = materialized_values%4#0
        let materialized_values%5#0: uint64 = (+ a#0 1u)
        let a#0: uint64 = materialized_values%5#0
        goto block@1
    block@3: // after_while_L14
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L18
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@5 : block@7
    block@5: // for_body_L19
        let materialized_values%6#0: uint64 = (+ b#0 a#0)
        let b#0: uint64 = materialized_values%6#0
        let materialized_values%7#0: uint64 = (+ a#0 i#0)
        let a#0: uint64 = materialized_values%7#0
        goto block@6
    block@6: // for_footer_L18
        let i#0: uint64 = (+ i#0 1u)
        goto block@4
    block@7: // after_for_L18
        let tmp%1#0: bool = (< a#0 b#0)
        goto tmp%1#0 ? block@8 : block@15
    block@8: // if_body_L23
        let tmp%2#0: bool = (< b#0 2u)
        goto tmp%2#0 ? block@9 : block@10
    block@9: // if_body_L24
        let materialized_values%8#0: uint64 = (+ 3u 2u)
        let b#0: uint64 = materialized_values%8#0
        let materialized_values%9#0: uint64 = (+ a#0 b#0)
        let c#0: uint64 = materialized_values%9#0
        goto block@14
    block@10: // else_body_L27
        let materialized_values%10#0: uint64 = (* 2u a#0)
        let b#0: uint64 = materialized_values%10#0
        let tmp%3#0: uint64 = (* 14u b#0)
        let tmp%4#0: bool = (!= tmp%3#0 0u)
        goto tmp%4#0 ? block@11 : block@12
    block@11: // if_body_L29
        let c#0: uint64 = 2u
        goto block@13
    block@12: // else_body_L31
        return 3u
    block@13: // after_if_else_L28
        goto block@14
    block@14: // after_if_else_L23
        goto block@19
    block@15: // else_body_L32
        let tmp%5#0: bool = (== b#0 a#0)
        goto tmp%5#0 ? block@16 : block@17
    block@16: // if_body_L33
        let materialized_values%11#0: uint64 = (* a#0 b#0)
        let c#0: uint64 = materialized_values%11#0
        goto block@18
    block@17: // else_body_L35
        let materialized_values%12#0: uint64 = (- a#0 b#0)
        let c#0: uint64 = materialized_values%12#0
        goto block@18
    block@18: // after_if_else_L32
        goto block@19
    block@19: // after_if_else_L22
        let tmp%6#0: uint64 = test_cases.ssa.contract.one_hundred(c#0)
        let materialized_values%13#0: uint64 = (+ c#0 tmp%6#0)
        let c#0: uint64 = materialized_values%13#0
        let materialized_values%14#0: bytes = (itob c#0)
        let c_bytes#0: bytes = materialized_values%14#0
        (log c_bytes#0)
        let tmp%7#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 1u)
        let tmp%8#0: bool = (== tmp%7#0 4u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 0u)
        let tmp%10#0: bool = (== tmp%9#0 4u)
        (assert tmp%10#0)
        return c#0

subroutine test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
    block@0: // L47
        let a#0: uint64 = 25u
        let b#0: uint64 = 2u
        let tmp%0#0: bool = (< 25u c#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L52
        let b#0: uint64 = 1u
        let a#0: uint64 = 100u
        goto block@2
    block@2: // after_if_else_L51
        let materialized_values%0#0: uint64 = (* b#0 b#0)
        let b#0: uint64 = materialized_values%0#0
        let tmp%1#0: uint64 = (* a#0 b#0)
        return tmp%1#0

subroutine test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: bool) -> uint64:
    block@0: // L59
        goto b#0 ? block@1 : block@2
    block@1: // if_body_L62
        let tmp1#0: uint64 = y#0
        let x#0: uint64 = tmp1#0
        goto block@3
    block@2: // else_body_L65
        let tmp2#0: uint64 = y#0
        let x#0: uint64 = tmp2#0
        goto block@3
    block@3: // after_if_else_L61
        let materialized_values%0#0: uint64 = (+ x#0 1u)
        let x#0: uint64 = materialized_values%0#0
        return x#0