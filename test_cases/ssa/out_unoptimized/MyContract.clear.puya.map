{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AA2C2B;;AAAZ;;;AAAP;AAGR;;;;;;AAEQ;;AACA;;AADA;;AAED;;AAAA;AAAP;;;AAAA;;;AACY;;AAAJ;;AACI;;AAAJ;;;;;AAEJ;;AAAA;AAAA;AACO;;AAAA;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.ssa.contract.MyContract.clear_state_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "b block@0"
    },
    "4": {
      "block": "block@0",
      "stack_in": [],
      "op": "pushint 40 // 40",
      "defined_out": [
        "40"
      ],
      "stack_out": [
        "40"
      ]
    },
    "6": {
      "callsub": "test_cases.ssa.contract.one_hundred",
      "op": "callsub one_hundred",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "9": {
      "op": "return",
      "stack_out": []
    },
    "10": {
      "subroutine": "test_cases.ssa.contract.one_hundred",
      "params": {
        "c#0": "uint64"
      },
      "block": "one_hundred",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "13": {
      "op": "b one_hundred_block@0"
    },
    "16": {
      "block": "one_hundred_block@0",
      "stack_in": [],
      "op": "pushint 25 // 25",
      "defined_out": [],
      "stack_out": [
        "a#0"
      ]
    },
    "18": {
      "op": "pushint 2 // 2",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "20": {
      "op": "pushint 25 // 25",
      "stack_out": [
        "a#0",
        "b#0",
        "25"
      ]
    },
    "22": {
      "op": "frame_dig -1",
      "defined_out": [
        "25",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "25",
        "c#0 (copy)"
      ]
    },
    "24": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "bz one_hundred_after_if_else@2",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "28": {
      "op": "b one_hundred_if_body@1"
    },
    "31": {
      "block": "one_hundred_if_body@1",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "1"
      ]
    },
    "33": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "35": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "100"
      ]
    },
    "37": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "39": {
      "op": "b one_hundred_after_if_else@2"
    },
    "42": {
      "block": "one_hundred_after_if_else@2",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0"
      ]
    },
    "44": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0 (copy)",
        "b#0"
      ]
    },
    "45": {
      "op": "*",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0"
      ]
    },
    "46": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0",
        "a#0"
      ]
    },
    "48": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "frame_bury 0"
    },
    "51": {
      "retsub": true,
      "op": "retsub"
    }
  }
}