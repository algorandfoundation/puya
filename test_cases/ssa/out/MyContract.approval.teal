#pragma version 10
#pragma typetrack false

// test_cases.ssa.contract.MyContract.approval_program() -> uint64:
main:
    intcblock 5 1 2 25
    pushbytes ""
    dup
    // ssa/contract.py:11-12
    // a = a * b
    // b = a + b
    pushints 60 80 // 60, 80

main_while_top@1:
    // ssa/contract.py:14
    // while a < UInt64(5):
    dig 1
    intc_0 // 5
    <
    bz main_after_while@3
    // ssa/contract.py:15
    // b = b + a
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    // ssa/contract.py:16
    // a = a + 1
    intc_1 // 1
    +
    bury 2
    b main_while_top@1

main_after_while@3:
    // ssa/contract.py:18
    // for i in urange(5):
    pushint 0 // 0
    bury 3

main_for_header@4:
    // ssa/contract.py:18
    // for i in urange(5):
    dig 2
    intc_0 // 5
    <
    bz main_after_for@7
    // ssa/contract.py:19
    // b = b + a
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    // ssa/contract.py:20
    // a = a + i
    dig 3
    dup
    cover 2
    +
    bury 3
    // ssa/contract.py:18
    // for i in urange(5):
    intc_1 // 1
    +
    bury 3
    b main_for_header@4

main_after_for@7:
    // ssa/contract.py:22
    // if a < b:
    dup2
    <
    bz main_else_body@15
    // ssa/contract.py:23
    // if b < 2:
    dup
    intc_2 // 2
    <
    bz main_else_body@10
    // ssa/contract.py:25
    // c = a + b
    dig 1
    // ssa/contract.py:24
    // b = 3 + UInt64(2)
    intc_0 // 5
    // ssa/contract.py:25
    // c = a + b
    +
    bury 4

main_after_if_else@19:
    // ssa/contract.py:49
    // a = UInt64(25)
    intc_3 // 25
    bury 2
    // ssa/contract.py:50
    // b = UInt64(2)
    intc_2 // 2
    bury 1
    // ssa/contract.py:49
    // a = UInt64(25)
    intc_3 // 25
    // ssa/contract.py:51
    // if a < c:
    dig 4
    <
    bz main_after_if_else@22
    // ssa/contract.py:52
    // b = UInt64(1)
    intc_1 // 1
    bury 1
    // ssa/contract.py:53
    // a = UInt64(100)
    pushint 100 // 100
    bury 2

main_after_if_else@22:
    // ssa/contract.py:55
    // b *= b
    dupn 2
    *
    // ssa/contract.py:56
    // return a * b
    dig 2
    *
    // ssa/contract.py:36
    // c = c + one_hundred(c)
    dig 4
    +
    // ssa/contract.py:37
    // c_bytes = op.itob(c)
    dup
    itob
    // ssa/contract.py:38
    // log(c_bytes)
    log
    // ssa/contract.py:41
    // return c
    return

main_else_body@10:
    // ssa/contract.py:28
    // if ((3 * 4) + 2) * b:
    dig 1
    // ssa/contract.py:27-28
    // b = 2 * a
    // if ((3 * 4) + 2) * b:
    pushint 28 // 28
    *
    // ssa/contract.py:28
    // if ((3 * 4) + 2) * b:
    bz main_else_body@12
    // ssa/contract.py:29
    // c = UInt64(2)
    intc_2 // 2
    bury 4
    b main_after_if_else@19

main_else_body@12:
    // ssa/contract.py:31
    // return UInt64(3)
    pushint 3 // 3
    return

main_else_body@15:
    // ssa/contract.py:32
    // elif b == a:
    dup
    dig 2
    ==
    bz main_else_body@17
    // ssa/contract.py:33
    // c = a * b
    dup2
    *
    bury 4
    b main_after_if_else@19

main_else_body@17:
    // ssa/contract.py:35
    // c = a - b
    dup2
    -
    bury 4
    b main_after_if_else@19
