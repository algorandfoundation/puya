contract test_cases.ssa.contract.MyContract:
    program approval:
        subroutine test_cases.ssa.contract.MyContract.approval_program() -> uint64:
            block@0: // L7
                let a#1: uint64 = 60u
                let b#1: uint64 = 80u
                let (b#10: uint64, a#7: uint64) = (b#1, a#1)
                goto block@1
            block@1: // while_top_L14
                let a#9: uint64 = φ(a#7 <- block@0, a#8 <- block@2)
                let b#12: uint64 = φ(b#10 <- block@0, b#11 <- block@2)
                let (b#2: uint64, a#2: uint64) = (b#12, a#9)
                let tmp%0#0: uint64 = (< a#2 5u)
                goto tmp%0#0 ? block@2 : block@3
            block@2: // while_body_L14
                let b#3: uint64 = (+ b#2 a#2)
                let a#3: uint64 = (+ a#2 1u)
                let (b#11: uint64, a#8: uint64) = (b#3, a#3)
                goto block@1
            block@3: // after_while_L14
                let range_item%2#0: uint64 = 0u
                let (a#10: uint64, b#13: uint64, range_item%2#4: uint64) = (a#2, b#2, range_item%2#0)
                goto block@5
            block@5: // for_header_L18
                let i#1: uint64 = φ(range_item%2#4 <- block@3, range_item%2#5 <- block@6)
                let b#15: uint64 = φ(b#13 <- block@3, b#14 <- block@6)
                let a#12: uint64 = φ(a#10 <- block@3, a#11 <- block@6)
                let (a#6: uint64, b#6: uint64, i#0: uint64) = (a#12, b#15, i#1)
                let continue_looping%3#0: uint64 = (< i#0 5u)
                goto continue_looping%3#0 ? block@6 : block@9
            block@6: // for_body_L18
                let b#5: uint64 = (+ b#6 a#6)
                let a#5: uint64 = (+ a#6 i#0)
                let range_item%2#3: uint64 = (+ i#0 1u)
                let (a#11: uint64, b#14: uint64, range_item%2#5: uint64) = (a#5, b#5, range_item%2#3)
                goto block@5
            block@9: // after_for_L18
                let tmp%4#0: uint64 = (< a#6 b#6)
                goto tmp%4#0 ? block@10 : block@17
            block@10: // if_body_L22
                let tmp%5#0: uint64 = (< b#6 2u)
                goto tmp%5#0 ? block@11 : block@12
            block@11: // if_body_L23
                let c#0: uint64 = (+ a#6 5u)
                let c#8: uint64 = c#0
                goto block@16
            block@12: // else_body_L23
                let b#9: uint64 = (* 2u a#6)
                let tmp%6#0: uint64 = (* 14u b#9)
                goto tmp%6#0 ? block@13 : block@14
            block@13: // if_body_L28
                let c#1: uint64 = 2u
                let c#9: uint64 = c#1
                goto block@16
            block@14: // else_body_L28
                return 3u
            block@16: // after_if_else_L23
                let c#10: uint64 = φ(c#8 <- block@11, c#9 <- block@13)
                let c#5: uint64 = c#10
                let c#14: uint64 = c#5
                goto block@21
            block@17: // else_body_L22
                let tmp%7#0: uint64 = (== b#6 a#6)
                goto tmp%7#0 ? block@18 : block@19
            block@18: // if_body_L32
                let c#2: uint64 = (* a#6 b#6)
                let c#11: uint64 = c#2
                goto block@20
            block@19: // else_body_L32
                let c#3: uint64 = (- a#6 b#6)
                let c#12: uint64 = c#3
                goto block@20
            block@20: // after_if_else_L32
                let c#13: uint64 = φ(c#11 <- block@18, c#12 <- block@19)
                let c#6: uint64 = c#13
                let c#15: uint64 = c#6
                goto block@21
            block@21: // after_if_else_L22
                let c#16: uint64 = φ(c#14 <- block@16, c#15 <- block@20)
                let c#4: uint64 = c#16
                let tmp%8#0: uint64 = test_cases.ssa.contract.one_hundred(c#4)
                let c#7: uint64 = (+ c#4 tmp%8#0)
                let c_bytes#0: bytes = (itob c#7)
                (log c_bytes#0)
                let tmp%9#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 1u)
                let tmp%10#0: uint64 = (== tmp%9#0 4u)
                (assert tmp%10#0)
                let tmp%11#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 0u)
                let tmp%12#0: uint64 = (== tmp%11#0 4u)
                (assert tmp%12#0)
                return c#7
        
        subroutine test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
            block@0: // L48
                let a#0: uint64 = 25u
                let b#0: uint64 = 2u
                let tmp%0#0: uint64 = (< 25u c#0)
                let (a#3: uint64, b#4: uint64) = (a#0, b#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L51
                let b#1: uint64 = 1u
                let a#1: uint64 = 100u
                let (a#4: uint64, b#5: uint64) = (a#1, b#1)
                goto block@2
            block@2: // after_if_else_L51
                let b#6: uint64 = φ(b#4 <- block@0, b#5 <- block@1)
                let a#5: uint64 = φ(a#3 <- block@0, a#4 <- block@1)
                let (a#2: uint64, b#2: uint64) = (a#5, b#6)
                let b#3: uint64 = (* b#2 b#2)
                let tmp%1#0: uint64 = (* a#2 b#3)
                return tmp%1#0
        
        subroutine test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: uint64) -> uint64:
            block@0: // L60
                let x#3: uint64 = (+ y#0 1u)
                return x#3
    
    program clear-state:
        subroutine test_cases.ssa.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L43
                let tmp%0#0: uint64 = test_cases.ssa.contract.one_hundred(40u)
                return tmp%0#0
        
        subroutine test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
            block@0: // L48
                let a#0: uint64 = 25u
                let b#0: uint64 = 2u
                let tmp%0#0: uint64 = (< 25u c#0)
                let (a#3: uint64, b#4: uint64) = (a#0, b#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L51
                let b#1: uint64 = 1u
                let a#1: uint64 = 100u
                let (a#4: uint64, b#5: uint64) = (a#1, b#1)
                goto block@2
            block@2: // after_if_else_L51
                let b#6: uint64 = φ(b#4 <- block@0, b#5 <- block@1)
                let a#5: uint64 = φ(a#3 <- block@0, a#4 <- block@1)
                let (a#2: uint64, b#2: uint64) = (a#5, b#6)
                let b#3: uint64 = (* b#2 b#2)
                let tmp%1#0: uint64 = (* a#2 b#3)
                return tmp%1#0