#pragma version 10

test_cases.ssa.contract.MyContract.approval_program:
    byte ""
    // ssa/contract.py:11
    // a = a * b
    int 60
    // ssa/contract.py:12
    // b = a + b
    int 80

main_while_top@1:
    // ssa/contract.py:14
    // while a < UInt64(5):
    dig 1
    int 5
    <
    bz main_after_while@3
    // ssa/contract.py:15
    // b = b + a
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    // ssa/contract.py:16
    // a = a + 1
    int 1
    +
    bury 2
    b main_while_top@1

main_after_while@3:
    // ssa/contract.py:18
    // for i in urange(5):
    int 0
    bury 3

main_for_header@4:
    // ssa/contract.py:18
    // for i in urange(5):
    dig 2
    int 5
    <
    bz main_after_for@8
    // ssa/contract.py:19
    // b = b + a
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    // ssa/contract.py:20
    // a = a + i
    dig 3
    dup
    cover 2
    +
    bury 3
    // ssa/contract.py:18
    // for i in urange(5):
    int 1
    +
    bury 3
    b main_for_header@4

main_after_for@8:
    // ssa/contract.py:22
    // if a < b:
    dup2
    <
    bz main_else_body@16
    // ssa/contract.py:23
    // if b < 2:
    dup
    int 2
    <
    bz main_else_body@11
    // ssa/contract.py:25
    // c = a + b
    dig 1
    // ssa/contract.py:24
    // b = 3 + UInt64(2)
    int 5
    // ssa/contract.py:25
    // c = a + b
    +
    b main_after_if_else@20

main_else_body@11:
    // ssa/contract.py:28
    // if ((3 * 4) + 2) * b:
    dig 1
    int 28
    *
    bz main_else_body@13
    // ssa/contract.py:29
    // c = UInt64(2)
    int 2
    b main_after_if_else@20

main_else_body@13:
    // ssa/contract.py:31
    // return UInt64(3)
    int 3
    return

main_else_body@16:
    // ssa/contract.py:32
    // elif b == a:
    dup
    dig 2
    ==
    bz main_else_body@18
    // ssa/contract.py:33
    // c = a * b
    dup2
    *
    b main_after_if_else@20

main_else_body@18:
    // ssa/contract.py:35
    // c = a - b
    dup2
    -

main_after_if_else@20:
    // ssa/contract.py:36
    // c = c + one_hundred(c)
    dup
    callsub one_hundred
    +
    // ssa/contract.py:37
    // c_bytes = op.itob(c)
    dup
    itob
    // ssa/contract.py:38
    // log(c_bytes)
    log
    // ssa/contract.py:39
    // assert phi_in_equiv_class(UInt64(3), True) == 4
    int 3
    int 1
    callsub phi_in_equiv_class
    int 4
    ==
    assert
    // ssa/contract.py:40
    // assert phi_in_equiv_class(UInt64(3), False) == 4
    int 3
    int 0
    callsub phi_in_equiv_class
    int 4
    ==
    assert
    // ssa/contract.py:41
    // return c
    return


// test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
one_hundred:
    // ssa/contract.py:47-48
    // @subroutine
    // def one_hundred(c: UInt64) -> UInt64:
    proto 1 1
    // ssa/contract.py:49
    // a = UInt64(25)
    int 25
    // ssa/contract.py:50
    // b = UInt64(2)
    int 2
    // ssa/contract.py:49
    // a = UInt64(25)
    int 25
    // ssa/contract.py:51
    // if a < c:
    frame_dig -1
    <
    bz one_hundred_after_if_else@2
    // ssa/contract.py:52
    // b = UInt64(1)
    int 1
    frame_bury 1
    // ssa/contract.py:53
    // a = UInt64(100)
    int 100
    frame_bury 0

one_hundred_after_if_else@2:
    // ssa/contract.py:55
    // b *= b
    frame_dig 1
    dup
    *
    // ssa/contract.py:56
    // return a * b
    frame_dig 0
    *
    frame_bury 0
    retsub


// test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: uint64) -> uint64:
phi_in_equiv_class:
    // ssa/contract.py:59-60
    // @subroutine
    // def phi_in_equiv_class(y: UInt64, b: bool) -> UInt64:
    proto 2 1
    // ssa/contract.py:67
    // x += 1
    frame_dig -2
    int 1
    +
    // ssa/contract.py:68
    // return x
    retsub
