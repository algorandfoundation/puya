contract MyContract
{
  approval_program(): puyapy.UInt64
  {
    a: puyapy.UInt64 = 1u + 2u
    b: puyapy.UInt64 = 4u * 5u
    a: puyapy.UInt64 = a * b
    b: puyapy.UInt64 = a + b
    while (a < 5u) {
      b: puyapy.UInt64 = b + a
      a: puyapy.UInt64 = a + 1u
    }
    for i in range(0u, 5u, 1u) {
      b: puyapy.UInt64 = b + a
      a: puyapy.UInt64 = a + i
    }
    if (a < b) {
      if (b < 2u) {
        b: puyapy.UInt64 = 3u + 2u
        c: puyapy.UInt64 = a + b
      } else {
        b: puyapy.UInt64 = 2u * a
        if (reinterpret_cast<bool>(14u * b)) {
          c: puyapy.UInt64 = 2u
        } else {
          return 3u
        }
      }
    } else {
      if (b == a) {
        c: puyapy.UInt64 = a * b
      } else {
        c: puyapy.UInt64 = a - b
      }
    }
    c: puyapy.UInt64 = c + test_cases.ssa.contract::one_hundred(c)
    c_bytes: puyapy.Bytes = itob(c)
    log(c_bytes)
    assert(test_cases.ssa.contract::phi_in_equiv_class(3u, true) == 4u)
    assert(test_cases.ssa.contract::phi_in_equiv_class(3u, false) == 4u)
    return c
  }
  
  clear_state_program(): puyapy.UInt64
  {
    return test_cases.ssa.contract::one_hundred(40u)
  }
}

subroutine one_hundred(c: puyapy.UInt64): puyapy.UInt64
{
  a: puyapy.UInt64 = 25u
  b: puyapy.UInt64 = 2u
  if (a < c) {
    b: puyapy.UInt64 = 1u
    a: puyapy.UInt64 = 100u
  }
  b *= b
  return a * b
}

subroutine phi_in_equiv_class(y: puyapy.UInt64, b: bool): puyapy.UInt64
{
  if (b) {
    tmp1: puyapy.UInt64 = y
    x: puyapy.UInt64 = tmp1
  } else {
    tmp2: puyapy.UInt64 = y
    x: puyapy.UInt64 = tmp2
  }
  x += 1u
  return x
}