main test_cases.ssa.contract.MyContract.approval_program:
    block@0: // L7
        let a#0: uint64 = 3u
        let b#0: uint64 = 20u
        let a#1: uint64 = 60u
        let b#1: uint64 = 80u
        goto block@1
    block@1: // while_top_L14
        let a#2: uint64 = φ(a#1 <- block@0, a#3 <- block@2)
        let b#2: uint64 = φ(b#1 <- block@0, b#3 <- block@2)
        let tmp%4#0: bool = (< a#2 5u)
        goto tmp%4#0 ? block@2 : block@3
    block@2: // while_body_L15
        let b#3: uint64 = (+ b#2 a#2)
        let a#3: uint64 = (+ a#2 1u)
        goto block@1
    block@3: // after_while_L14
        let value_internal%0#0: uint64 = 0u
        goto block@4
    block@4: // for_header_L18
        let i#0: uint64 = φ(value_internal%0#0 <- block@3, value_internal%0#2 <- block@5)
        let b#4: uint64 = φ(b#2 <- block@3, b#5 <- block@5)
        let a#4: uint64 = φ(a#2 <- block@3, a#5 <- block@5)
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@5 : block@7
    block@5: // for_body_L19
        let b#5: uint64 = (+ b#4 a#4)
        let a#5: uint64 = (+ a#4 i#0)
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@4
    block@7: // after_for_L18
        let tmp%9#0: bool = (< a#4 b#4)
        goto tmp%9#0 ? block@8 : block@15
    block@8: // if_body_L23
        let tmp%10#0: bool = (< b#4 2u)
        goto tmp%10#0 ? block@9 : block@10
    block@9: // if_body_L24
        let b#6: uint64 = 5u
        let c#0: uint64 = (+ a#4 5u)
        goto block@14
    block@10: // else_body_L27
        let b#7: uint64 = (* 2u a#4)
        let tmp%14#0: uint64 = (* a#4 28u)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        goto tmp%14#0 ? block@11 : block@12
    block@11: // if_body_L29
        let c#1: uint64 = 2u
        goto block@14
    block@12: // else_body_L31
        return 3u
    block@14: // after_if_else_L23
        let c#5: uint64 = φ(c#0 <- block@9, c#1 <- block@11)
        goto block@19
    block@15: // else_body_L32
        let tmp%16#0: bool = (== b#4 a#4)
        goto tmp%16#0 ? block@16 : block@17
    block@16: // if_body_L33
        let c#2: uint64 = (* a#4 b#4)
        goto block@18
    block@17: // else_body_L35
        let c#3: uint64 = (- a#4 b#4)
        goto block@18
    block@18: // after_if_else_L32
        let c#6: uint64 = φ(c#2 <- block@16, c#3 <- block@17)
        goto block@19
    block@19: // after_if_else_L22
        let c#4: uint64 = φ(c#5 <- block@14, c#6 <- block@18)
        let a#6: uint64 = 25u
        let b#8: uint64 = 2u
        let tmp%0#1: bool = (< 25u c#4)
        goto tmp%0#1 ? block@21 : block@22
    block@21: // if_body_L52
        let b#9: uint64 = 1u
        let a#7: uint64 = 100u
        goto block@22
    block@22: // after_if_else_L51
        let b#10: uint64 = φ(b#8 <- block@19, b#9 <- block@21)
        let a#8: uint64 = φ(a#6 <- block@19, a#7 <- block@21)
        let b#11: uint64 = (* b#10 b#10)
        let tmp%2#1: uint64 = (* a#8 b#11)
        let c#7: uint64 = (+ c#4 tmp%2#1)
        let c_bytes#0: bytes = (itob c#7)
        (log c_bytes#0)
        let tmp%22#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 1u)
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 0u)
        let tmp%25#0: bool = (== tmp%24#0 4u)
        (assert tmp%25#0)
        return c#7

subroutine test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: bool) -> uint64:
    block@0: // L59
        goto block@3
    block@3: // after_if_else_L61
        let x#3: uint64 = (+ y#0 1u)
        return x#3