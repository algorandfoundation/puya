contract test_cases.ssa.contract.MyContract:
    program approval:
        subroutine test_cases.ssa.contract.MyContract.approval_program() -> uint64:
            block@0: // L7
                let a#0: uint64 = (+ 1u 2u)
                let b#0: uint64 = (* 4u 5u)
                let a#1: uint64 = (* a#0 b#0)
                let b#1: uint64 = (+ a#1 b#0)
                goto block@1
            block@1: // while_top_L14
                let a#2: uint64 = φ(a#1 <- block@0, a#3 <- block@2)
                let b#2: uint64 = φ(b#1 <- block@0, b#3 <- block@2)
                let tmp%0#0: uint64 = (< a#2 5u)
                goto tmp%0#0 ? block@2 : block@3
            block@2: // while_body_L14
                let b#3: uint64 = (+ b#2 a#2)
                let a#3: uint64 = (+ a#2 1u)
                goto block@1
            block@3: // after_while_L14
                (assert 1u) // Step cannot be zero
                let range_item%1#0: uint64 = 0u
                goto block@4
            block@4: // for_header_L18
                let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#3 <- block@7)
                let b#6: uint64 = φ(b#2 <- block@3, b#5 <- block@7)
                let a#6: uint64 = φ(a#2 <- block@3, a#5 <- block@7)
                let continue_looping%2#0: uint64 = (< range_item%1#1 5u)
                goto continue_looping%2#0 ? block@5 : block@8
            block@5: // for_body_L18
                let i#0: uint64 = range_item%1#1
                let b#5: uint64 = (+ b#6 a#6)
                let a#5: uint64 = (+ a#6 i#0)
                goto block@6
            block@6: // for_footer_L18
                goto block@7
            block@7: // for_increment_L18
                let range_item%1#3: uint64 = (+ range_item%1#1 1u)
                goto block@4
            block@8: // after_for_L18
                let tmp%3#0: uint64 = (< a#6 b#6)
                goto tmp%3#0 ? block@9 : block@16
            block@9: // if_body_L22
                let tmp%4#0: uint64 = (< b#6 2u)
                goto tmp%4#0 ? block@10 : block@11
            block@10: // if_body_L23
                let b#7: uint64 = (+ 3u 2u)
                let c#0: uint64 = (+ a#6 b#7)
                goto block@15
            block@11: // else_body_L23
                let b#8: uint64 = (* 2u a#6)
                let tmp%5#0: uint64 = (* 14u b#8)
                goto tmp%5#0 ? block@12 : block@13
            block@12: // if_body_L28
                let c#1: uint64 = 2u
                goto block@14
            block@13: // else_body_L28
                return 3u
            block@14: // after_if_else_L28
                goto block@15
            block@15: // after_if_else_L23
                let c#5: uint64 = φ(c#0 <- block@10, c#1 <- block@14)
                goto block@20
            block@16: // else_body_L22
                let tmp%6#0: uint64 = (== b#6 a#6)
                goto tmp%6#0 ? block@17 : block@18
            block@17: // if_body_L32
                let c#2: uint64 = (* a#6 b#6)
                goto block@19
            block@18: // else_body_L32
                let c#3: uint64 = (- a#6 b#6)
                goto block@19
            block@19: // after_if_else_L32
                let c#6: uint64 = φ(c#2 <- block@17, c#3 <- block@18)
                goto block@20
            block@20: // after_if_else_L22
                let c#4: uint64 = φ(c#5 <- block@15, c#6 <- block@19)
                let tmp%7#0: uint64 = test_cases.ssa.contract.one_hundred(c#4)
                let c#7: uint64 = (+ c#4 tmp%7#0)
                let c_bytes#0: bytes = (itob c#7)
                (log c_bytes#0)
                let tmp%8#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 1u)
                let tmp%9#0: uint64 = (== tmp%8#0 4u)
                (assert tmp%9#0)
                let tmp%10#0: uint64 = test_cases.ssa.contract.phi_in_equiv_class(3u, 0u)
                let tmp%11#0: uint64 = (== tmp%10#0 4u)
                (assert tmp%11#0)
                return c#7
        
        subroutine test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
            block@0: // L47
                let a#0: uint64 = 25u
                let b#0: uint64 = 2u
                let tmp%0#0: uint64 = (< a#0 c#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L51
                let b#1: uint64 = 1u
                let a#1: uint64 = 100u
                goto block@2
            block@2: // after_if_else_L51
                let b#2: uint64 = φ(b#0 <- block@0, b#1 <- block@1)
                let a#2: uint64 = φ(a#0 <- block@0, a#1 <- block@1)
                let b#3: uint64 = (* b#2 b#2)
                let tmp%1#0: uint64 = (* a#2 b#3)
                return tmp%1#0
        
        subroutine test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: uint64) -> uint64:
            block@0: // L59
                goto b#0 ? block@1 : block@2
            block@1: // if_body_L61
                let tmp1#0: uint64 = y#0
                let x#0: uint64 = tmp1#0
                goto block@3
            block@2: // else_body_L61
                let tmp2#0: uint64 = y#0
                let x#1: uint64 = tmp2#0
                goto block@3
            block@3: // after_if_else_L61
                let x#2: uint64 = φ(x#0 <- block@1, x#1 <- block@2)
                let x#3: uint64 = (+ x#2 1u)
                return x#3
    
    program clear-state:
        subroutine test_cases.ssa.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L43
                let tmp%0#0: uint64 = test_cases.ssa.contract.one_hundred(40u)
                return tmp%0#0
        
        subroutine test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
            block@0: // L47
                let a#0: uint64 = 25u
                let b#0: uint64 = 2u
                let tmp%0#0: uint64 = (< a#0 c#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L51
                let b#1: uint64 = 1u
                let a#1: uint64 = 100u
                goto block@2
            block@2: // after_if_else_L51
                let b#2: uint64 = φ(b#0 <- block@0, b#1 <- block@1)
                let a#2: uint64 = φ(a#0 <- block@0, a#1 <- block@1)
                let b#3: uint64 = (* b#2 b#2)
                let tmp%1#0: uint64 = (* a#2 b#3)
                return tmp%1#0