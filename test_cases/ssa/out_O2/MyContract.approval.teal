#pragma version 10

test_cases.ssa.contract.MyContract.approval_program:
    intcblock 1 2 5 3
    pushbytes ""
    pushints 60 80 // 60, 80

main_while_top@1:
    dig 1
    intc_2 // 5
    <
    bz main_after_while@3
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    intc_0 // 1
    +
    bury 2
    b main_while_top@1

main_after_while@3:
    pushint 0 // 0
    bury 3

main_for_header@4:
    dig 2
    intc_2 // 5
    <
    bz main_after_for@7
    dup
    dig 2
    dup
    cover 2
    +
    bury 2
    dig 3
    dup
    cover 2
    +
    bury 3
    intc_0 // 1
    +
    bury 3
    b main_for_header@4

main_after_for@7:
    dup2
    <
    bz main_else_body@15
    dup
    intc_1 // 2
    <
    bz main_else_body@10
    dig 1
    intc_2 // 5
    +
    b main_after_if_else@19

main_else_body@10:
    intc_1 // 2
    dig 2
    *
    pushint 14 // 14
    *
    bz main_else_body@12
    intc_1 // 2
    b main_after_if_else@19

main_else_body@12:
    intc_3 // 3
    return

main_else_body@15:
    dup
    dig 2
    ==
    bz main_else_body@17
    dup2
    *
    b main_after_if_else@19

main_else_body@17:
    dup2
    -

main_after_if_else@19:
    dup
    callsub one_hundred
    +
    dup
    itob
    log
    intc_3 // 3
    intc_0 // 1
    callsub phi_in_equiv_class
    pushint 4 // 4
    ==
    assert
    intc_3 // 3
    pushint 0 // 0
    callsub phi_in_equiv_class
    pushint 4 // 4
    ==
    assert
    return


// test_cases.ssa.contract.one_hundred(c: uint64) -> uint64:
one_hundred:
    proto 1 1
    pushint 25 // 25
    intc_1 // 2
    pushint 25 // 25
    frame_dig -1
    <
    bz one_hundred_after_if_else@2
    intc_0 // 1
    frame_bury 1
    pushint 100 // 100
    frame_bury 0

one_hundred_after_if_else@2:
    frame_dig 1
    dup
    *
    frame_dig 0
    *
    frame_bury 0
    retsub


// test_cases.ssa.contract.phi_in_equiv_class(y: uint64, b: uint64) -> uint64:
phi_in_equiv_class:
    proto 2 1
    frame_dig -2
    intc_0 // 1
    +
    retsub
