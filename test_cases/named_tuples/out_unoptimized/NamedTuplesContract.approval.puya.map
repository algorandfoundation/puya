{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AAcA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAgBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAgBK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AACK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAK;;;AAAL;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAK;;;AAAL;;AAAA;;AAAA;AACO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACA;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAEe;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;;AAAA;AAAuB;AAAvB;AAAP;AACkB;;AAAX;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64 8"
    },
    "7": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "10": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "11": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "14": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "pushbytes 0x456eeace // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))"
      ]
    },
    "23": {
      "op": "pushbytes 0x6f9f5bf0 // method \"test_tuple((uint64,uint512,string,byte[]))void\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ]
    },
    "29": {
      "op": "uncover 2",
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "match main_build_tuple_route@3 main_test_tuple_route@4",
      "stack_out": []
    },
    "37": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "38": {
      "block": "main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "39": {
      "block": "main_test_tuple_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "41": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "42": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "46": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "47": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "48": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "49": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "52": {
      "op": "dup",
      "defined_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "53": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "54": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0",
        "8"
      ]
    },
    "55": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0#0"
      ]
    },
    "56": {
      "op": "btoi",
      "defined_out": [
        "item0%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%1#0"
      ]
    },
    "57": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "tmp%17#0"
      ]
    },
    "58": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "59": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item0%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "8"
      ]
    },
    "60": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "8",
        "item0%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "item0%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "8",
        "64"
      ]
    },
    "61": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "tmp%17#0",
        "item1%0#0"
      ]
    },
    "62": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0"
      ]
    },
    "63": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "64": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "72"
      ]
    },
    "66": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "item_start_offset%0#0"
      ]
    },
    "67": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "69": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "74"
      ]
    },
    "71": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "item_end_offset%0#0"
      ]
    },
    "72": {
      "op": "dig 1",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "item_end_offset%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "74": {
      "op": "uncover 3",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "item_end_offset%0#0",
        "tmp%17#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "76": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "78": {
      "op": "substring3",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "item2%0#0"
      ]
    },
    "79": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "tmp%17#0",
        "item2%1#0"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0"
      ]
    },
    "83": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "84": {
      "op": "pushint 74 // 74",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "74"
      ]
    },
    "86": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_start_offset%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0",
        "item_start_offset%1#0"
      ]
    },
    "87": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_start_offset%1#0",
        "tmp%17#0"
      ]
    },
    "88": {
      "op": "dup",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_start_offset%1#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ]
    },
    "89": {
      "op": "len",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_start_offset%1#0",
        "tmp%17#0",
        "item_end_offset%1#0"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "tmp%17#0"
      ]
    },
    "91": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item_end_offset%1#0",
        "tmp%17#0",
        "item_start_offset%1#0"
      ]
    },
    "93": {
      "op": "uncover 2",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "tmp%17#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "95": {
      "op": "substring3",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item3%0#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item3%0#0"
      ]
    },
    "96": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item3%1#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item3%1#0"
      ]
    },
    "99": {
      "op": "uncover 3",
      "stack_out": [
        "item1%0#0",
        "item2%1#0",
        "item3%1#0",
        "item0%1#0"
      ]
    },
    "101": {
      "op": "uncover 3",
      "stack_out": [
        "item2%1#0",
        "item3%1#0",
        "item0%1#0",
        "item1%0#0"
      ]
    },
    "103": {
      "op": "uncover 3",
      "stack_out": [
        "item3%1#0",
        "item0%1#0",
        "item1%0#0",
        "item2%1#0"
      ]
    },
    "105": {
      "op": "uncover 3",
      "stack_out": [
        "item0%1#0",
        "item1%0#0",
        "item2%1#0",
        "item3%1#0"
      ]
    },
    "107": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "op": "callsub test_tuple",
      "stack_out": []
    },
    "110": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12"
    },
    "114": {
      "block": "main_build_tuple_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "116": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "117": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "118": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "121": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "122": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "123": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "124": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "127": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "131": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%8#0"
      ]
    },
    "134": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0"
      ]
    },
    "137": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "140": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "143": {
      "op": "uncover 3",
      "stack_out": [
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%7#0"
      ]
    },
    "145": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0"
      ]
    },
    "147": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%11#0",
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0"
      ]
    },
    "149": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[64]%0#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "151": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "op": "callsub build_tuple",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "154": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "156": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "159": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "160": {
      "op": "cover 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "162": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "163": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "value_len%0#0"
      ]
    },
    "164": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "value_len%0#0",
        "64"
      ]
    },
    "165": {
      "op": "<=",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "len_ok%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "len_ok%0#0"
      ]
    },
    "166": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "167": {
      "op": "intc_2 // 64",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "64"
      ]
    },
    "168": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "elements_to_encode%1#0",
        "bzero%0#0"
      ]
    },
    "169": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "170": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "171": {
      "op": "dup",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "172": {
      "op": "len",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "length%0#0"
      ]
    },
    "173": {
      "op": "itob",
      "defined_out": [
        "arc4_encoded%0#0",
        "as_bytes%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "174": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "elements_to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "arc4_encoded%0#0",
        "encoded_value%0#0"
      ]
    },
    "179": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "180": {
      "op": "dig 2",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "182": {
      "op": "len",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "length%1#0"
      ]
    },
    "183": {
      "op": "itob",
      "defined_out": [
        "arc4_encoded%0#0",
        "as_bytes%1#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "as_bytes%1#0"
      ]
    },
    "184": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_encoded%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "length_uint16%1#0"
      ]
    },
    "187": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "encoded_value%1#0"
      ]
    },
    "190": {
      "op": "cover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0"
      ]
    },
    "192": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "arc4_encoded%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%1#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "0x"
      ]
    },
    "194": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "arc4_encoded%0#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "arc4_encoded%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "arc4_encoded%0#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "199": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "76"
      ]
    },
    "201": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "202": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%0#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%0#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "206": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "209": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "76"
      ]
    },
    "211": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "212": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "213": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "217": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "219": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "221": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "227": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "228": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "229": {
      "op": "log",
      "stack_out": []
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12"
    },
    "234": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "236": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%18#0"
      ]
    },
    "238": {
      "op": "match main___algopy_default_create@8",
      "stack_out": []
    },
    "242": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "245": {
      "block": "main___algopy_default_create@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "247": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "248": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "249": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "250": {
      "block": "main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12"
    },
    "254": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "257": {
      "block": "build_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "259": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "261": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "263": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "265": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "op": "callsub build_tuple_by_name",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ],
      "stack_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ]
    },
    "268": {
      "op": "cover 3",
      "stack_out": [
        "t1.d#0",
        "t1.a#0",
        "t1.b#0",
        "t1.c#0"
      ]
    },
    "270": {
      "op": "cover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.a#0",
        "t1.b#0"
      ]
    },
    "272": {
      "op": "swap",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "273": {
      "op": "frame_dig -4",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)"
      ]
    },
    "275": {
      "op": "frame_dig -3",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "277": {
      "op": "frame_dig -2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "279": {
      "op": "frame_dig -1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "281": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "op": "callsub build_tuple_by_position",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ]
    },
    "284": {
      "op": "cover 6",
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0"
      ]
    },
    "286": {
      "op": "cover 4",
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.a#0",
        "t2.b#0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "t2.a#0"
      ]
    },
    "289": {
      "op": "dig 2",
      "defined_out": [
        "t1.a#0",
        "t1.a#0 (copy)",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "t2.a#0",
        "t1.a#0 (copy)"
      ]
    },
    "291": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "tmp%0#0"
      ]
    },
    "292": {
      "op": "dig 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.b#0 (copy)",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "tmp%0#0",
        "t1.b#0 (copy)"
      ]
    },
    "294": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%0#0",
        "t1.b#0 (copy)",
        "t2.b#0"
      ]
    },
    "296": {
      "op": "b==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "297": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%2#0"
      ]
    },
    "298": {
      "op": "dig 4",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.c#0 (copy)",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t2.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%2#0",
        "t1.c#0 (copy)"
      ]
    },
    "300": {
      "op": "uncover 4",
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%2#0",
        "t1.c#0 (copy)",
        "t2.c#0"
      ]
    },
    "302": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "303": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0"
      ]
    },
    "304": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t1.d#0 (copy)",
        "t2.d#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t2.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0",
        "t1.d#0 (copy)"
      ]
    },
    "306": {
      "op": "uncover 5",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0",
        "t1.d#0 (copy)",
        "t2.d#0"
      ]
    },
    "308": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "309": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%6#0"
      ]
    },
    "310": {
      "op": "assert",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "311": {
      "op": "swap",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.a#0",
        "t1.b#0"
      ]
    },
    "312": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.a#0",
        "t1.b#0",
        "t1.c#0"
      ]
    },
    "314": {
      "op": "uncover 3",
      "stack_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ]
    },
    "316": {
      "retsub": true,
      "op": "retsub"
    },
    "317": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_name",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "320": {
      "block": "build_tuple_by_name_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "322": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "324": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "326": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "328": {
      "retsub": true,
      "op": "retsub"
    },
    "329": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_position",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "332": {
      "block": "build_tuple_by_position_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "334": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "338": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "340": {
      "retsub": true,
      "op": "retsub"
    },
    "341": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "params": {
        "value.a#0": "uint64",
        "value.b#0": "bytes",
        "value.c#0": "bytes",
        "value.d#0": "bytes"
      },
      "block": "test_tuple",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "344": {
      "block": "test_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)"
      ]
    },
    "346": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)",
        "1000"
      ]
    },
    "349": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "assert",
      "stack_out": []
    },
    "351": {
      "op": "frame_dig -3",
      "defined_out": [
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)"
      ]
    },
    "353": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)",
        "0x020000000000000000"
      ]
    },
    "364": {
      "op": "b<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "365": {
      "op": "assert",
      "stack_out": []
    },
    "366": {
      "op": "frame_dig -2",
      "defined_out": [
        "value.c#0 (copy)"
      ],
      "stack_out": [
        "value.c#0 (copy)"
      ]
    },
    "368": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "369": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "370": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "371": {
      "op": "assert",
      "stack_out": []
    },
    "372": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "374": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ]
    },
    "376": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "377": {
      "op": "assert",
      "stack_out": []
    },
    "378": {
      "retsub": true,
      "op": "retsub"
    }
  }
}