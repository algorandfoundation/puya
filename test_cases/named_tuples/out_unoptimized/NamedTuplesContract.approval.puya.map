{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAcA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAfL;;;;;;AAEa;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAL;;AAAA;;AAAA;;AAAA;;AACK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAL;;AAAA;;AAAA;;AAAA;;AAAA;;AACO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;;;;AAEe;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;;AAAA;AAAuB;AAAvB;AAAP;AACkB;;AAAX;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8 64"
    },
    "7": {
      "op": "b block@0"
    },
    "10": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "13": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "19": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "20": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "21": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "22": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "23": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "25": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "27": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "29": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "31": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "33": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "35": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "36": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "38": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "40": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "42": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "44": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "70": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "73": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "74": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "77": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "80": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "83": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "86": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "89": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "92": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "95": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "98": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "101": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "104": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "106": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "108": {
      "op": "bz else_body@9",
      "stack_out": []
    },
    "111": {
      "op": "b __algopy_default_create@8"
    },
    "114": {
      "block": "__algopy_default_create@8",
      "stack_in": [],
      "op": "b block@22"
    },
    "117": {
      "block": "block@22",
      "stack_in": [],
      "op": "b after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@23"
    },
    "120": {
      "block": "after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "121": {
      "op": "return",
      "stack_out": []
    },
    "122": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "123": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "126": {
      "op": "pushbytes 0x456eeace // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))"
      ]
    },
    "132": {
      "op": "pushbytes 0x6f9f5bf0 // method \"test_tuple((uint64,uint512,string,byte[]))void\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ]
    },
    "138": {
      "op": "uncover 2",
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%5#0"
      ]
    },
    "140": {
      "op": "match build_tuple_route@3 test_tuple_route@4",
      "stack_out": []
    },
    "146": {
      "op": "b switch_case_default@5"
    },
    "149": {
      "block": "switch_case_default@5",
      "stack_in": [],
      "op": "b switch_case_next@6"
    },
    "152": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@6",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "153": {
      "block": "test_tuple_route@4",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "op": "callsub test_tuple"
    },
    "156": {
      "op": "b switch_case_next@6"
    },
    "159": {
      "block": "build_tuple_route@3",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "op": "callsub build_tuple"
    },
    "162": {
      "op": "b switch_case_next@6"
    },
    "165": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "params": {},
      "block": "build_tuple",
      "stack_in": [],
      "op": "b build_tuple_block@0"
    },
    "168": {
      "block": "build_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "171": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "175": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "178": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "181": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "184": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "187": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "191": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "193": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "195": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "op": "callsub test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "198": {
      "op": "cover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "200": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "202": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "204": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "205": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "207": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0"
      ]
    },
    "210": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ]
    },
    "212": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "213": {
      "op": "len",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%value_len%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%value_len%0#0"
      ]
    },
    "214": {
      "op": "intc_3 // 64",
      "defined_out": [
        "64",
        "aggregate%head%0#0",
        "aggregate%value_len%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "215": {
      "op": "<=",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%len_ok%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "216": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ]
    },
    "217": {
      "op": "intc_3 // 64",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "64"
      ]
    },
    "218": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%bzero%0#0"
      ]
    },
    "219": {
      "op": "b|",
      "defined_out": [
        "aggregate%as_Encoded(uint512)%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint512)%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0"
      ]
    },
    "221": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "tmp%6#0 (copy)"
      ]
    },
    "223": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "224": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "225": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "228": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%6#0"
      ]
    },
    "230": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "231": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "76"
      ]
    },
    "233": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "234": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "237": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%1#0"
      ]
    },
    "239": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "241": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "242": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "245": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "246": {
      "op": "pushint 76 // 76",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "248": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "249": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "251": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "252": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "253": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "256": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%7#0"
      ]
    },
    "258": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "259": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "261": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "262": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "265": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "267": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "269": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "270": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "273": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "276": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "282": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "284": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "285": {
      "op": "log",
      "stack_out": []
    },
    "286": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "287": {
      "op": "return",
      "stack_out": []
    },
    "288": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "params": {},
      "block": "test_tuple",
      "stack_in": [],
      "op": "b test_tuple_block@0"
    },
    "291": {
      "block": "test_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "295": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "0"
      ]
    },
    "296": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "297": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "298": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "299": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "301": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "302": {
      "op": "intc_2 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "8"
      ]
    },
    "303": {
      "op": "intc_3 // 64",
      "defined_out": [
        "64",
        "8",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "8",
        "64"
      ]
    },
    "304": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "305": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "307": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "308": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "72"
      ]
    },
    "310": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "311": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "313": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "314": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "74"
      ]
    },
    "316": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "317": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "319": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "321": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "323": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "324": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "327": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "329": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "330": {
      "op": "pushint 74 // 74",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "74"
      ]
    },
    "332": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "333": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "335": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "336": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "337": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "339": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "341": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "343": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "344": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0"
      ]
    },
    "347": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "349": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%item3%0#0"
      ]
    },
    "351": {
      "op": "uncover 3",
      "defined_out": [
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%item3%0#0",
        "tmp%1#0"
      ]
    },
    "353": {
      "op": "uncover 3",
      "defined_out": [
        "aggregate%item3%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item3%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "355": {
      "op": "uncover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "357": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "359": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "361": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "363": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "365": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "op": "callsub test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "stack_out": []
    },
    "368": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "373": {
      "op": "b test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0"
    },
    "376": {
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "378": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "380": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "382": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "384": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "op": "callsub build_tuple_by_name",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "387": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "389": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "391": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "393": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.a#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "395": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.b#0",
        "t1.a#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "397": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%3#0"
      ]
    },
    "399": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "401": {
      "op": "frame_dig -4",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)"
      ]
    },
    "403": {
      "op": "frame_dig -3",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "405": {
      "op": "frame_dig -2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "407": {
      "op": "frame_dig -1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "409": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "op": "callsub build_tuple_by_position",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "412": {
      "op": "cover 3",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "414": {
      "op": "cover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "416": {
      "op": "cover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "418": {
      "op": "cover 2",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "t2.a#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "420": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "tmp%7#0",
        "t2.a#0",
        "tmp%6#0"
      ]
    },
    "422": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%7#0",
        "t2.a#0"
      ]
    },
    "424": {
      "op": "uncover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0",
        "tmp%7#0"
      ]
    },
    "426": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0"
      ]
    },
    "428": {
      "op": "dig 4",
      "defined_out": [
        "t1.a#0",
        "t1.a#0 (copy)",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0",
        "t1.a#0 (copy)"
      ]
    },
    "430": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%8#0"
      ]
    },
    "431": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.b#0 (copy)",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%8#0",
        "t1.b#0 (copy)"
      ]
    },
    "433": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%8#0",
        "t1.b#0 (copy)",
        "t2.b#0"
      ]
    },
    "435": {
      "op": "b==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "436": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%10#0"
      ]
    },
    "437": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.c#0 (copy)",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%10#0",
        "t1.c#0 (copy)"
      ]
    },
    "439": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%10#0",
        "t1.c#0 (copy)",
        "t2.c#0"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "442": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%12#0"
      ]
    },
    "443": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t1.d#0 (copy)",
        "t2.d#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%12#0",
        "t1.d#0 (copy)"
      ]
    },
    "445": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%12#0",
        "t1.d#0 (copy)",
        "t2.d#0"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "448": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%14#0"
      ]
    },
    "449": {
      "op": "assert",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "450": {
      "op": "uncover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.a#0",
        "t1.b#0"
      ]
    },
    "452": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.a#0",
        "t1.b#0",
        "t1.c#0"
      ]
    },
    "454": {
      "op": "uncover 3",
      "stack_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ]
    },
    "456": {
      "retsub": true,
      "op": "retsub"
    },
    "457": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_name",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "460": {
      "op": "b build_tuple_by_name_block@0"
    },
    "463": {
      "block": "build_tuple_by_name_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "465": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "467": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "469": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "471": {
      "retsub": true,
      "op": "retsub"
    },
    "472": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_position",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "475": {
      "op": "b build_tuple_by_position_block@0"
    },
    "478": {
      "block": "build_tuple_by_position_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "480": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "482": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "484": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "486": {
      "retsub": true,
      "op": "retsub"
    },
    "487": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "params": {
        "value.a#0": "uint64",
        "value.b#0": "bytes",
        "value.c#0": "bytes",
        "value.d#0": "bytes"
      },
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "490": {
      "op": "b test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0"
    },
    "493": {
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)"
      ]
    },
    "495": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)",
        "1000"
      ]
    },
    "498": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "assert",
      "stack_out": []
    },
    "500": {
      "op": "frame_dig -3",
      "defined_out": [
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)"
      ]
    },
    "502": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)",
        "0x020000000000000000"
      ]
    },
    "513": {
      "op": "b<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "514": {
      "op": "assert",
      "stack_out": []
    },
    "515": {
      "op": "frame_dig -2",
      "defined_out": [
        "value.c#0 (copy)"
      ],
      "stack_out": [
        "value.c#0 (copy)"
      ]
    },
    "517": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "518": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "519": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "520": {
      "op": "assert",
      "stack_out": []
    },
    "521": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "523": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ]
    },
    "525": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "526": {
      "op": "assert",
      "stack_out": []
    },
    "527": {
      "retsub": true,
      "op": "retsub"
    }
  }
}