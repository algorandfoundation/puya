{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAoBA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;AAAA;AAoBK;;;;;;AAJA;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BJ;;;;;;AAEO;;AAAA;AAAJ;AACA;;AAAA;;;;AA9BC;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAeA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAnBA;;;;;;AAEQ;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAL;;AAAA;;AAAA;;AAAA;;AACK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAL;;AAAA;;AAAA;;AAAA;;AAAA;;AACO;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;AAEH;;;;;;AAEG;;AAAA;;AAAA;;AAAA;;AAAA;AAEH;;;;;;AAEG;;AAAA;;AAAA;;AAAA;;AAAA;;;;AAI4B;AAAL;;;AAAwB;;AAAL;;;AAAwB;;AAAL;;;AAA7D;;AAAA;AAEH;;;;;;AAEU;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;;AAAA;AAAuB;AAAvB;AAAP;AACkB;;AAAX;;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64 76"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75"
    },
    "15": {
      "op": "b main_block@0"
    },
    "18": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "21": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "24": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "25": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "28": {
      "op": "b main_abi_routing@2"
    },
    "31": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "34": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "36": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "39": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "40": {
      "op": "bz main_create_NoOp@8",
      "stack_out": []
    },
    "43": {
      "op": "b main_call_NoOp@3"
    },
    "46": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "49": {
      "op": "pushbytes 0x456eeace // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))"
      ]
    },
    "55": {
      "op": "pushbytes 0x06931f77 // method \"build_tuple_side_effects()(uint64,uint64,uint64)\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))"
      ]
    },
    "61": {
      "op": "pushbytes 0x6f9f5bf0 // method \"test_tuple((uint64,uint512,string,byte[]))void\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ]
    },
    "67": {
      "op": "uncover 3",
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%6#0"
      ]
    },
    "69": {
      "op": "match main_build_tuple_route@4 main_build_tuple_side_effects_route@5 main_test_tuple_route@6",
      "stack_out": []
    },
    "77": {
      "op": "b main_switch_case_next@7"
    },
    "80": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "83": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "86": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "87": {
      "block": "main_test_tuple_route@6",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "op": "callsub test_tuple"
    },
    "90": {
      "op": "b main_switch_case_next@7"
    },
    "93": {
      "block": "main_build_tuple_side_effects_route@5",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]",
      "op": "callsub build_tuple_side_effects"
    },
    "96": {
      "op": "b main_switch_case_next@7"
    },
    "99": {
      "block": "main_build_tuple_route@4",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "op": "callsub build_tuple"
    },
    "102": {
      "op": "b main_switch_case_next@7"
    },
    "105": {
      "block": "main_create_NoOp@8",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "108": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "110": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "116": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "117": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "118": {
      "op": "b main_block@13"
    },
    "121": {
      "block": "main_block@13",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@14"
    },
    "124": {
      "block": "main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "subroutine": "test_cases.named_tuples.contract.echo",
      "params": {
        "value#0": "uint64"
      },
      "block": "echo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "129": {
      "op": "b echo_block@0"
    },
    "132": {
      "block": "echo_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "134": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": []
    },
    "136": {
      "op": "frame_dig -1",
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "138": {
      "retsub": true,
      "op": "retsub"
    },
    "139": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "params": {},
      "block": "build_tuple",
      "stack_in": [],
      "op": "b build_tuple_block@0"
    },
    "142": {
      "block": "build_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "149": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "161": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "163": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "165": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "167": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "169": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "op": "callsub test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "172": {
      "op": "cover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "174": {
      "op": "cover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "176": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "178": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "179": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "180": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "182": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "aggregate%head%0#0"
      ]
    },
    "183": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "186": {
      "op": "len",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%value_len%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%value_len%0#0"
      ]
    },
    "187": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "aggregate%head%0#0",
        "aggregate%value_len%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "188": {
      "op": "<=",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%len_ok%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "189": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0"
      ]
    },
    "190": {
      "op": "intc_2 // 64",
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "64"
      ]
    },
    "191": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "tmp%5#0",
        "aggregate%bzero%0#0"
      ]
    },
    "192": {
      "op": "b|",
      "defined_out": [
        "aggregate%as_Encoded(uint512)%0#0",
        "aggregate%head%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint512)%0#0"
      ]
    },
    "193": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0"
      ]
    },
    "194": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "tmp%6#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "198": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%6#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "201": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%6#0"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "204": {
      "op": "intc_3 // 76",
      "defined_out": [
        "76",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "76"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "206": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "209": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%1#0"
      ]
    },
    "211": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "214": {
      "op": "cover 1",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "216": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0 (copy)"
      ]
    },
    "217": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "218": {
      "op": "intc_3 // 76",
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "219": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "220": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "222": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "223": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "224": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "227": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "tmp%7#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "230": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "232": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "233": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "236": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "238": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "241": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "244": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "247": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "248": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%8#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "251": {
      "op": "log",
      "stack_out": []
    },
    "252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "253": {
      "op": "return",
      "stack_out": []
    },
    "254": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]",
      "params": {},
      "block": "build_tuple_side_effects",
      "stack_in": [],
      "op": "b build_tuple_side_effects_block@0"
    },
    "257": {
      "block": "build_tuple_side_effects_block@0",
      "stack_in": [],
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects",
      "op": "callsub test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "260": {
      "op": "cover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "262": {
      "op": "cover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "265": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "266": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%1#0",
        "aggregate%head%0#0"
      ]
    },
    "269": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%0#0",
        "tmp%1#0"
      ]
    },
    "271": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "273": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%2#0",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "276": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "277": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "278": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%3#0"
      ]
    },
    "280": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "281": {
      "op": "log",
      "stack_out": []
    },
    "282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": []
    },
    "284": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "params": {},
      "block": "test_tuple",
      "stack_in": [],
      "op": "b test_tuple_block@0"
    },
    "287": {
      "block": "test_tuple_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "0"
      ]
    },
    "292": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "8",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "294": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "295": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "296": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "298": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "299": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "8"
      ]
    },
    "301": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "8",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "8",
        "64"
      ]
    },
    "302": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "303": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "305": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "306": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "72"
      ]
    },
    "308": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "309": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "311": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "312": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "74"
      ]
    },
    "314": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%item0%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "315": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "317": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "319": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "321": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%substring3%0#0"
      ]
    },
    "322": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "325": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "327": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "328": {
      "op": "pushint 74 // 74",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "74"
      ]
    },
    "330": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "331": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "333": {
      "op": "dup",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "334": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%len%0#0"
      ]
    },
    "335": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "337": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "339": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "341": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%1#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%1#0"
      ]
    },
    "342": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0"
      ]
    },
    "345": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "347": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%item3%0#0"
      ]
    },
    "349": {
      "op": "uncover 3",
      "defined_out": [
        "aggregate%item2%0#0",
        "aggregate%item3%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%item2%0#0",
        "tmp%0#0",
        "aggregate%item3%0#0",
        "tmp%1#0"
      ]
    },
    "351": {
      "op": "uncover 3",
      "defined_out": [
        "aggregate%item3%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%item3%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "353": {
      "op": "uncover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "355": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "359": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "361": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "363": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "op": "callsub test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "stack_out": []
    },
    "366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "367": {
      "op": "return",
      "stack_out": []
    },
    "368": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "371": {
      "op": "b test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0"
    },
    "374": {
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "376": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "378": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "380": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "382": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "op": "callsub build_tuple_by_name",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "385": {
      "op": "cover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "387": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "389": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.a#0",
        "tmp%3#0",
        "tmp%2#0",
        "tmp%1#0"
      ]
    },
    "393": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.b#0",
        "t1.a#0",
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "395": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%3#0"
      ]
    },
    "397": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "399": {
      "op": "frame_dig -4",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)"
      ]
    },
    "401": {
      "op": "frame_dig -3",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "403": {
      "op": "frame_dig -2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "405": {
      "op": "frame_dig -1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "407": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "op": "callsub build_tuple_by_position",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "410": {
      "op": "cover 3",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "412": {
      "op": "cover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "414": {
      "op": "cover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "416": {
      "op": "cover 2",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%7#0",
        "t2.a#0",
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "418": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.b#0",
        "tmp%7#0",
        "t2.a#0",
        "tmp%6#0"
      ]
    },
    "420": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%7#0",
        "t2.a#0"
      ]
    },
    "422": {
      "op": "uncover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0",
        "tmp%7#0"
      ]
    },
    "424": {
      "op": "cover 3",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0"
      ]
    },
    "426": {
      "op": "dig 4",
      "defined_out": [
        "t1.a#0",
        "t1.a#0 (copy)",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.a#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "t2.a#0",
        "t1.a#0 (copy)"
      ]
    },
    "428": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%8#0"
      ]
    },
    "429": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.b#0 (copy)",
        "t1.c#0",
        "t1.d#0",
        "t2.b#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "t2.b#0",
        "tmp%8#0",
        "t1.b#0 (copy)"
      ]
    },
    "431": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%8#0",
        "t1.b#0 (copy)",
        "t2.b#0"
      ]
    },
    "433": {
      "op": "b==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "434": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%10#0"
      ]
    },
    "435": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.c#0 (copy)",
        "t1.d#0",
        "t2.c#0",
        "t2.d#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "t2.c#0",
        "tmp%10#0",
        "t1.c#0 (copy)"
      ]
    },
    "437": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%10#0",
        "t1.c#0 (copy)",
        "t2.c#0"
      ]
    },
    "439": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "440": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t2.d#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%12#0"
      ]
    },
    "441": {
      "op": "dig 5",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "t1.d#0 (copy)",
        "t2.d#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "t2.d#0",
        "tmp%12#0",
        "t1.d#0 (copy)"
      ]
    },
    "443": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%12#0",
        "t1.d#0 (copy)",
        "t2.d#0"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "446": {
      "op": "&&",
      "defined_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0",
        "tmp%14#0"
      ]
    },
    "447": {
      "op": "assert",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.b#0",
        "t1.a#0"
      ]
    },
    "448": {
      "op": "uncover 1",
      "stack_out": [
        "t1.d#0",
        "t1.c#0",
        "t1.a#0",
        "t1.b#0"
      ]
    },
    "450": {
      "op": "uncover 2",
      "stack_out": [
        "t1.d#0",
        "t1.a#0",
        "t1.b#0",
        "t1.c#0"
      ]
    },
    "452": {
      "op": "uncover 3",
      "stack_out": [
        "t1.a#0",
        "t1.b#0",
        "t1.c#0",
        "t1.d#0"
      ]
    },
    "454": {
      "retsub": true,
      "op": "retsub"
    },
    "455": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_name",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "458": {
      "op": "b build_tuple_by_name_block@0"
    },
    "461": {
      "block": "build_tuple_by_name_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "463": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "465": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "467": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes",
        "d#0": "bytes"
      },
      "block": "build_tuple_by_position",
      "stack_in": [],
      "op": "proto 4 4"
    },
    "473": {
      "op": "b build_tuple_by_position_block@0"
    },
    "476": {
      "block": "build_tuple_by_position_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "478": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "480": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)"
      ]
    },
    "482": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)",
        "c#0 (copy)",
        "d#0 (copy)"
      ]
    },
    "484": {
      "retsub": true,
      "op": "retsub"
    },
    "485": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects",
      "params": {},
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects",
      "stack_in": [],
      "op": "b test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects_block@0"
    },
    "488": {
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "489": {
      "callsub": "test_cases.named_tuples.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "494": {
      "callsub": "test_cases.named_tuples.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "497": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "3"
      ]
    },
    "499": {
      "callsub": "test_cases.named_tuples.contract.echo",
      "op": "callsub echo",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "502": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "504": {
      "retsub": true,
      "op": "retsub"
    },
    "505": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "params": {
        "value.a#0": "uint64",
        "value.b#0": "bytes",
        "value.c#0": "bytes",
        "value.d#0": "bytes"
      },
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "508": {
      "op": "b test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0"
    },
    "511": {
      "block": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0",
      "stack_in": [],
      "op": "frame_dig -4",
      "defined_out": [
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)"
      ]
    },
    "513": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)",
        "1000"
      ]
    },
    "516": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "assert",
      "stack_out": []
    },
    "518": {
      "op": "frame_dig -3",
      "defined_out": [
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)"
      ]
    },
    "520": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)",
        "0x020000000000000000"
      ]
    },
    "531": {
      "op": "b<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "532": {
      "op": "assert",
      "stack_out": []
    },
    "533": {
      "op": "frame_dig -2",
      "defined_out": [
        "value.c#0 (copy)"
      ],
      "stack_out": [
        "value.c#0 (copy)"
      ]
    },
    "535": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "536": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "537": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "538": {
      "op": "assert",
      "stack_out": []
    },
    "539": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "541": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "544": {
      "op": "assert",
      "stack_out": []
    },
    "545": {
      "retsub": true,
      "op": "retsub"
    }
  }
}