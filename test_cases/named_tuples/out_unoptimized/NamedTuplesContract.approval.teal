#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 8 64
    b block@0

block@0:
    b block@1

block@1:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    intc_2 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@9
    b __algopy_default_create@8

__algopy_default_create@8:
    b block@22

block@22:
    b after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@23

after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create@23:
    intc_0 // 1
    return

else_body@9:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x456eeace // method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])"
    pushbytes 0x6f9f5bf0 // method "test_tuple((uint64,uint512,string,byte[]))void"
    uncover 2
    match build_tuple_route@3 test_tuple_route@4
    b switch_case_default@5

switch_case_default@5:
    b switch_case_next@6

switch_case_next@6:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

test_tuple_route@4:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    callsub test_tuple
    b switch_case_next@6

build_tuple_route@3:
    // named_tuples/contract.py:15
    // class NamedTuplesContract(arc4.ARC4Contract):
    callsub build_tuple
    b switch_case_next@6


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
build_tuple:
    b build_tuple_block@0

build_tuple_block@0:
    // named_tuples/contract.py:16
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
    cover 3
    cover 2
    cover 1
    itob
    pushbytes 0x
    uncover 1
    concat
    cover 1
    dup
    len
    intc_3 // 64
    <=
    assert // overflow
    intc_3 // 64
    bzero
    b|
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    pushint 76 // 76
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 76 // 76
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    cover 1
    itob
    extract 6 2
    uncover 3
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
test_tuple:
    b test_tuple_block@0

test_tuple_block@0:
    // named_tuples/contract.py:31
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    intc_2 // 8
    extract3
    btoi
    cover 1
    dup
    intc_2 // 8
    intc_3 // 64
    extract3
    cover 1
    dup
    pushint 72 // 72
    extract_uint16
    cover 1
    dup
    pushint 74 // 74
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 74 // 74
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 3
    cover 1
    uncover 3
    uncover 3
    uncover 2
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
    intc_0 // 1
    return


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
test_cases.named_tuples.contract.NamedTuplesContract.build_tuple:
    // named_tuples/contract.py:16-17
    // @arc4.abimethod()
    // def build_tuple(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    b test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0

test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_block@0:
    // named_tuples/contract.py:18
    // t1 = self.build_tuple_by_name(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub build_tuple_by_name
    cover 3
    cover 2
    cover 1
    cover 3
    cover 3
    cover 3
    cover 3
    // named_tuples/contract.py:19
    // t2 = self.build_tuple_by_position(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub build_tuple_by_position
    cover 3
    cover 2
    cover 1
    cover 2
    cover 3
    cover 3
    uncover 1
    cover 3
    // named_tuples/contract.py:20
    // assert t1 == t2
    dig 4
    ==
    dig 5
    uncover 2
    b==
    &&
    dig 5
    uncover 2
    ==
    &&
    dig 5
    uncover 2
    ==
    &&
    assert
    // named_tuples/contract.py:21
    // return t1
    uncover 1
    uncover 2
    uncover 3
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_name:
    // named_tuples/contract.py:23-24
    // @subroutine
    // def build_tuple_by_name(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    b build_tuple_by_name_block@0

build_tuple_by_name_block@0:
    // named_tuples/contract.py:25
    // return TestTuple(a=a, b=b, c=c, d=d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_position:
    // named_tuples/contract.py:27-28
    // @subroutine
    // def build_tuple_by_position(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    b build_tuple_by_position_block@0

build_tuple_by_position_block@0:
    // named_tuples/contract.py:29
    // return TestTuple(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: bytes, value.c: bytes, value.d: bytes) -> void:
test_cases.named_tuples.contract.NamedTuplesContract.test_tuple:
    // named_tuples/contract.py:31-32
    // @arc4.abimethod()
    // def test_tuple(self, value: TestTuple) -> None:
    proto 4 0
    b test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0

test_cases.named_tuples.contract.NamedTuplesContract.test_tuple_block@0:
    // named_tuples/contract.py:33
    // assert value.a < 1000
    frame_dig -4
    pushint 1000 // 1000
    <
    assert
    // named_tuples/contract.py:34
    // assert value.b < 2**65
    frame_dig -3
    pushbytes 0x020000000000000000
    b<
    assert
    // named_tuples/contract.py:35
    // assert value.c.bytes.length > 1
    frame_dig -2
    len
    intc_0 // 1
    >
    assert
    // named_tuples/contract.py:36
    // assert value.d == Txn.sender.bytes
    txn Sender
    frame_dig -1
    ==
    assert
    retsub
