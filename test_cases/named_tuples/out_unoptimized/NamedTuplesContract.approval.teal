#pragma version 10

test_cases.named_tuples.contract.NamedTuplesContract.approval_program:
    intcblock 0 1 64 76
    callsub __puya_arc4_router__
    return


// test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // named_tuples/contract.py:13
    // class NamedTuplesContract(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __puya_arc4_router___bare_routing@6
    txna ApplicationArgs 0
    pushbytes 0x456eeace // method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])"
    pushbytes 0x6f9f5bf0 // method "test_tuple((uint64,uint512,string,byte[]))void"
    uncover 2
    match __puya_arc4_router___build_tuple_route@2 __puya_arc4_router___test_tuple_route@3
    b __puya_arc4_router___switch_case_default@4

__puya_arc4_router___build_tuple_route@2:
    // named_tuples/contract.py:15
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // named_tuples/contract.py:13
    // class NamedTuplesContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    // named_tuples/contract.py:15
    // @arc4.abimethod()
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub build_tuple
    cover 3
    cover 2
    swap
    itob
    cover 3
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    cover 2
    pushbytes 0x
    uncover 4
    concat
    swap
    concat
    intc_3 // 76
    itob
    extract 6 2
    concat
    dig 1
    len
    intc_3 // 76
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___test_tuple_route@3:
    // named_tuples/contract.py:30
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // is not creating
    // named_tuples/contract.py:13
    // class NamedTuplesContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 8 // 8
    intc_2 // 64
    extract3 // on error: Index access is out of bounds
    swap
    dup
    pushint 72 // 72
    extract_uint16
    swap
    dup
    pushint 74 // 74
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    swap
    dup
    pushint 74 // 74
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    // named_tuples/contract.py:30
    // @arc4.abimethod()
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_tuple
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@4:
    b __puya_arc4_router___after_if_else@10

__puya_arc4_router___bare_routing@6:
    // named_tuples/contract.py:13
    // class NamedTuplesContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match __puya_arc4_router_____algopy_default_create@7
    b __puya_arc4_router___switch_case_default@8

__puya_arc4_router_____algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // is creating
    callsub __algopy_default_create
    intc_1 // 1
    retsub

__puya_arc4_router___switch_case_default@8:

__puya_arc4_router___after_if_else@10:
    // named_tuples/contract.py:13
    // class NamedTuplesContract(arc4.ARC4Contract):
    intc_0 // 0
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple:
    // named_tuples/contract.py:15-16
    // @arc4.abimethod()
    // def build_tuple(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    // named_tuples/contract.py:17
    // t1 = self.build_tuple_by_name(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub build_tuple_by_name
    cover 3
    cover 2
    swap
    // named_tuples/contract.py:18
    // t2 = self.build_tuple_by_position(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub build_tuple_by_position
    cover 6
    cover 4
    swap
    // named_tuples/contract.py:19
    // assert t1 == t2
    dig 2
    ==
    dig 3
    uncover 2
    b==
    &&
    dig 4
    uncover 4
    ==
    &&
    dig 5
    uncover 5
    ==
    &&
    assert
    // named_tuples/contract.py:20
    // return t1
    swap
    uncover 2
    uncover 3
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_name:
    // named_tuples/contract.py:22-23
    // @subroutine
    // def build_tuple_by_name(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    // named_tuples/contract.py:24
    // return TestTuple(a=a, b=b, c=c, d=d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_position:
    // named_tuples/contract.py:26-27
    // @subroutine
    // def build_tuple_by_position(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:
    proto 4 4
    // named_tuples/contract.py:28
    // return TestTuple(a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: bytes, value.c: bytes, value.d: bytes) -> void:
test_tuple:
    // named_tuples/contract.py:30-31
    // @arc4.abimethod()
    // def test_tuple(self, value: TestTuple) -> None:
    proto 4 0
    // named_tuples/contract.py:32
    // assert value.a < 1000
    frame_dig -4
    pushint 1000 // 1000
    <
    assert
    // named_tuples/contract.py:33
    // assert value.b < 2**65
    frame_dig -3
    pushbytes 0x020000000000000000
    b<
    assert
    // named_tuples/contract.py:34
    // assert value.c.bytes.length > 1
    frame_dig -2
    len
    intc_1 // 1
    >
    assert
    // named_tuples/contract.py:35
    // assert value.d == Txn.sender.bytes
    txn Sender
    frame_dig -1
    ==
    assert
    retsub


// test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create() -> void:
__algopy_default_create:
    proto 0 0
    retsub
