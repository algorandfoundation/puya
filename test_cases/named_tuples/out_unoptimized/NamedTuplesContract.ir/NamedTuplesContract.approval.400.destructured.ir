main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L15
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@7, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@19, * => block@20}
    block@2: // switch_case_0_L15
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@3, method "test_tuple((uint64,uint512,string,byte[]))void" => block@4, * => block@5}
    block@3: // build_tuple_route_L16
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@6
    block@4: // test_tuple_route_L31
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@6
    block@5: // switch_case_default_L15
        goto block@6
    block@6: // switch_case_next_L15
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L15
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // __algopy_default_create_L1
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create_L1
        exit 1u
    block@9: // else_body_L15
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L15
        goto block@20
    block@11: // switch_case_3_L15
        goto block@20
    block@12: // switch_case_4_L15
        goto block@20
    block@13: // switch_case_5_L15
        goto block@20
    block@14: // switch_case_6_L15
        goto block@20
    block@15: // switch_case_7_L15
        goto block@20
    block@16: // switch_case_8_L15
        goto block@20
    block@17: // switch_case_9_L15
        goto block@20
    block@18: // switch_case_10_L15
        goto block@20
    block@19: // switch_case_11_L15
        goto block@20
    block@20: // switch_case_default_L15
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@21: // after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L16
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 2)
        let tmp%1#0: biguint = reinterpret_Encoded(uint512)%0#0
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let tmp%2#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%3#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let (tmp%4#0: uint64, tmp%5#0: biguint, tmp%6#0: string, tmp%7#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%5#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%5#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%6#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%6#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 76u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%7#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%7#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = aggregate%concat%1#0
        let tmp%8#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = aggregate%as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 8u 64u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 72u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%item3%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%0#0: uint64 = aggregate%item0%0#0
        let tmp%1#0: biguint = aggregate%extract%1#0
        let tmp%2#0: string = aggregate%item2%0#0
        let tmp%3#0: bytes = aggregate%item3%0#0
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L16
        let (tmp%0#0: uint64, tmp%1#0: biguint, tmp%2#0: string, tmp%3#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a#0, b#0, c#0, d#0)
        let t1.a#0: uint64 = tmp%0#0
        let t1.b#0: biguint = tmp%1#0
        let t1.c#0: string = tmp%2#0
        let t1.d#0: bytes = tmp%3#0
        let (tmp%4#0: uint64, tmp%5#0: biguint, tmp%6#0: string, tmp%7#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a#0, b#0, c#0, d#0)
        let t2.a#0: uint64 = tmp%4#0
        let t2.b#0: biguint = tmp%5#0
        let t2.c#0: string = tmp%6#0
        let t2.d#0: bytes = tmp%7#0
        let tmp%8#0: bool = (== t1.a#0 t2.a#0)
        let tmp%9#0: bool = (b== t1.b#0 t2.b#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let tmp%11#0: bool = (== t1.c#0 t2.c#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (== t1.d#0 t2.d#0)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        return t1.a#0 t1.b#0 t1.c#0 t1.d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L23
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L27
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: biguint, value.c: string, value.d: bytes) -> void:
    block@0: // L31
        let tmp%0#0: bool = (< value.a#0 1000u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len value.c#0)
        let tmp%3#0: bool = (> tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        return 