main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L21
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L21
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@8
    block@3: // call_NoOp_L21
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@4, method "build_tuple_side_effects()(uint64,uint64,uint64)" => block@5, method "test_tuple((uint64,uint512,string,byte[]))void" => block@6, * => block@7}
    block@4: // build_tuple_route_L22
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@7
    block@5: // build_tuple_side_effects_route_L37
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]()
        goto block@7
    block@6: // test_tuple_route_L41
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@7
    block@7: // switch_case_next_L21
        goto block@9
    block@8: // create_NoOp_L21
        goto block@9
    block@9: // after_if_else_L21
        goto block@11
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        goto block@13
    block@13: // L1
        goto block@14
    block@14: // after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create_L1
        exit 1u
    block@11: // after_if_else_L21
        exit 0u
    block@12: // after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.named_tuples.contract.echo(value: uint64) -> uint64:
    block@0: // L49
        let tmp%0#0: bytes = (itob value#0)
        (log tmp%0#0)
        return value#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L22
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 64u)
        (assert eq%1#0) // invalid number of bytes for uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%2#0
        let tmp%3#0: biguint = as_Encoded(uint512)%0#0
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%4#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%4#0
        let tmp%5#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%6#0 0u)
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 add%1#0)
        (assert eq%3#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%6#0
        let tmp%7#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let (tmp%8#0: uint64, tmp%9#0: biguint, tmp%10#0: string, tmp%11#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(tmp%1#0, tmp%3#0, tmp%5#0, tmp%7#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%8#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%9#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%9#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%10#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%10#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 76u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%11#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%11#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = aggregate%concat%1#0
        let tmp%12#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = aggregate%as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]() -> void:
    block@0: // L37
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: uint64) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64) = aggregate%head%2#0
        let tmp%3#0: Encoded(uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64)%0#0
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L41
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = tmp%0#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 8u 64u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 72u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%substring3%0#0: bytes = (substring3 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%len%0#0: uint64 = (len as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 as_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%item3%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%1#0: uint64 = aggregate%item0%0#0
        let tmp%2#0: biguint = aggregate%extract%1#0
        let tmp%3#0: string = aggregate%item2%0#0
        let tmp%4#0: bytes = aggregate%item3%0#0
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L22
        let (tmp%0#0: uint64, tmp%1#0: biguint, tmp%2#0: string, tmp%3#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a#0, b#0, c#0, d#0)
        let t1.a#0: uint64 = tmp%0#0
        let t1.b#0: biguint = tmp%1#0
        let t1.c#0: string = tmp%2#0
        let t1.d#0: bytes = tmp%3#0
        let (tmp%4#0: uint64, tmp%5#0: biguint, tmp%6#0: string, tmp%7#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a#0, b#0, c#0, d#0)
        let t2.a#0: uint64 = tmp%4#0
        let t2.b#0: biguint = tmp%5#0
        let t2.c#0: string = tmp%6#0
        let t2.d#0: bytes = tmp%7#0
        let tmp%8#0: bool = (== t1.a#0 t2.a#0)
        let tmp%9#0: bool = (b== t1.b#0 t2.b#0)
        let tmp%10#0: bool = (&& tmp%8#0 tmp%9#0)
        let tmp%11#0: bool = (== t1.c#0 t2.c#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (== t1.d#0 t2.d#0)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        return t1.a#0 t1.b#0 t1.c#0 t1.d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L29
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L33
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects() -> <uint64, uint64, uint64>:
    block@0: // L37
        let tmp%0#0: uint64 = test_cases.named_tuples.contract.echo(1u)
        let tmp%1#0: uint64 = test_cases.named_tuples.contract.echo(2u)
        let tmp%2#0: uint64 = test_cases.named_tuples.contract.echo(3u)
        return tmp%1#0 tmp%2#0 tmp%0#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: biguint, value.c: string, value.d: bytes) -> void:
    block@0: // L41
        let tmp%0#0: bool = (< value.a#0 1000u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len value.c#0)
        let tmp%3#0: bool = (> tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        return 