main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__() -> bool:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@2, method "test_tuple((uint64,uint512,string,byte[]))void" => block@3, * => block@4}
    block@2: // build_tuple_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let tmp%9#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let (to_encode%0#0: uint64, to_encode%1#0: biguint, to_encode%2#0: string, to_encode%3#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(tmp%7#0, reinterpret_Encoded(uint512)%0#0, tmp%8#0, tmp%9#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let encoded%0#0: Encoded((uint64)) = (concat 0x val_as_bytes%0#0)
        let value_len%0#0: uint64 = (len to_encode%1#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| to_encode%1#0 bzero%0#0)
        let encoded%1#0: Encoded((uint64,uint512)) = (concat encoded%0#0 arc4_encoded%0#0)
        let length%0#0: uint64 = (len to_encode%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%2#0)
        let tail%0#0: bytes = (concat 0x encoded_value%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 76u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 76u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded%2#0: Encoded((uint64,uint512,len+utf8[])) = (concat encoded%1#0 offset_as_uint16%0#0)
        let length%1#0: uint64 = (len to_encode%3#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%3#0)
        let tail%1#0: bytes = (concat tail%0#0 encoded_value%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%3#0: Encoded((uint64,uint512,len+utf8[],len+uint8[])) = (concat encoded%2#0 offset_as_uint16%1#0)
        let encoded%4#0: bytes = (concat encoded%3#0 tail%1#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 encoded%4#0)
        (log tmp%10#0)
        return 1u
    block@3: // test_tuple_route_L31
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0: Encoded((uint64,uint512,len+utf8[],len+uint8[])) = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 8u 64u) // on error: Index access is out of bounds
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 72u)
        let item_end_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 74u)
        let item2%0#0: bytes = (substring3 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item2%1#0: bytes = ((extract 2 0) item2%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 74u)
        let item_end_offset%1#0: uint64 = (len reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0)
        let item3%0#0: bytes = (substring3 reinterpret_Encoded((uint64,uint512,len+utf8[],len+uint8[]))%0#0 item_start_offset%1#0 item_end_offset%1#0)
        let item3%1#0: bytes = ((extract 2 0) item3%0#0)
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(item0%1#0, item1%0#0, item2%1#0, item3%1#0)
        return 1u
    block@4: // switch_case_default_L15
        goto block@5
    block@5: // switch_case_next_L15
        goto block@10
    block@6: // bare_routing_L15
        let tmp%15#0: uint64 = (txn OnCompletion)
        switch tmp%15#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (== tmp%16#0 0u)
        (assert tmp%17#0) // can only call when creating
        test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create()
        return 1u
    block@8: // switch_case_default_L15
        goto block@9
    block@9: // switch_case_next_L15
        goto block@10
    block@10: // after_if_else_L15
        return 0u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L16
        let (materialized_values%0#0: uint64, materialized_values%1#0: biguint, materialized_values%2#0: string, materialized_values%3#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a#0, b#0, c#0, d#0)
        let (t1.a#0: uint64, t1.b#0: biguint, t1.c#0: string, t1.d#0: bytes) = (materialized_values%0#0, materialized_values%1#0, materialized_values%2#0, materialized_values%3#0)
        let (materialized_values%4#0: uint64, materialized_values%5#0: biguint, materialized_values%6#0: string, materialized_values%7#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a#0, b#0, c#0, d#0)
        let (t2.a#0: uint64, t2.b#0: biguint, t2.c#0: string, t2.d#0: bytes) = (materialized_values%4#0, materialized_values%5#0, materialized_values%6#0, materialized_values%7#0)
        let tmp%0#0: bool = (== t1.a#0 t2.a#0)
        let tmp%1#0: bool = (b== t1.b#0 t2.b#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== t1.c#0 t2.c#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (== t1.d#0 t2.d#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        return t1.a#0 t1.b#0 t1.c#0 t1.d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L23
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L27
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: biguint, value.c: string, value.d: bytes) -> void:
    block@0: // L31
        let tmp%0#0: bool = (< value.a#0 1000u)
        (assert tmp%0#0)
        let tmp%1#0: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len value.c#0)
        let tmp%3#0: bool = (> tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: bytes[32] = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        return 

subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create() -> void:
    block@0: // L1
        return 