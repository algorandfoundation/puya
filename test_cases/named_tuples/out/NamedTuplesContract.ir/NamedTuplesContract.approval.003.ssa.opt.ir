main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@7, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20][tmp%4#0] else goto block@20
    block@2: // switch_case_0_L15
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@3, method "test_tuple((uint64,uint512,string,byte[]))void" => block@4, * => block@6}
    block@3: // build_tuple_route_L16
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@6
    block@4: // test_tuple_route_L31
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@6
    block@6: // switch_case_next_L15
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L15
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@20: // switch_case_default_L15
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L16
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 2)
        let b#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let c#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let d#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%8#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = bytes_encode<(uint64,uint512,(len+utf8[]),(len+uint8[]))>(a#0, b#0, c#0, d#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (txna ApplicationArgs 1)
        let (value.a#0: uint64, value.b#0: biguint, value.c#0: string, value.d#0: bytes) = decode_bytes<(uint64,biguint,string,bytes,)>(reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let tmp%0#1: bool = (< value.a#0 1000u)
        (assert tmp%0#1)
        let tmp%1#1: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len value.c#0)
        let tmp%3#1: bool = (> tmp%2#1 1u)
        (assert tmp%3#1)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        exit 1u