main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L15
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@3 : block@9
    block@3: // call_NoOp_L15
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@4, method "test_tuple((uint64,uint512,string,byte[]))void" => block@5, * => block@9}
    block@4: // build_tuple_route_L16
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@9
    block@5: // test_tuple_route_L31
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@9
    block@9: // after_if_else_L15
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create()
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L16
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 2)
        let b#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let c#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let d#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let (t1.a#0: uint64, t1.b#0: biguint, t1.c#0: string, t1.d#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a#0, b#0, c#0, d#0)
        let (t2.a#0: uint64, t2.b#0: biguint, t2.c#0: string, t2.d#0: bytes) = test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a#0, b#0, c#0, d#0)
        let tmp%8#1: bool = (== t1.a#0 t2.a#0)
        let tmp%9#1: bool = (b== t1.b#0 t2.b#0)
        let tmp%10#0: bool = (&& tmp%8#1 tmp%9#1)
        let tmp%11#0: bool = (== t1.c#0 t2.c#0)
        let tmp%12#0: bool = (&& tmp%10#0 tmp%11#0)
        let tmp%13#0: bool = (== t1.d#0 t2.d#0)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let tmp%8#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = bytes_encode<(uint64,uint512,(len+utf8[]),(len+uint8[]))>(t1.a#0, t1.b#0, t1.c#0, t1.d#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (txna ApplicationArgs 1)
        let (value.a#0: uint64, value.b#0: biguint, value.c#0: string, value.d#0: bytes) = decode_bytes<(uint64,biguint,string,bytes,)>(reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let tmp%0#1: bool = (< value.a#0 1000u)
        (assert tmp%0#1)
        let tmp%1#1: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len value.c#0)
        let tmp%3#1: bool = (> tmp%2#1 1u)
        (assert tmp%3#1)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L23
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: biguint, c: string, d: bytes) -> <uint64, biguint, string, bytes>:
    block@0: // L27
        return a#0 b#0 c#0 d#0

subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create() -> void:
    block@0: // L1
        return 