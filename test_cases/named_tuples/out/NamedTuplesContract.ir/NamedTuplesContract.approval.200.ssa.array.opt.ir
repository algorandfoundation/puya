main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@6, method "test_tuple((uint64,uint512,string,byte[]))void" => block@7, * => block@20}
    block@6: // build_tuple_route_L16
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@20
    block@7: // test_tuple_route_L31
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@20
    block@16: // bare_routing_L15
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u
    block@20: // after_if_else_L15
        fail

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L16
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let b#0: biguint = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let c#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let d#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%value_len%0#0: uint64 = (len b#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| b#0 aggregate%bzero%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%arc4_encoded%0#0)
        let aggregate%length%0#0: uint64 = (len c#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 c#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 76u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x004c
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x004c)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len d#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 d#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%9#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let value.a#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 0u)
        let value.b#0: biguint = ((extract 8 64) reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 72u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let value.c#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let value.d#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%0#1: bool = (< value.a#0 1000u)
        (assert tmp%0#1)
        let tmp%1#1: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len value.c#0)
        let tmp%3#1: bool = (> tmp%2#1 1u)
        (assert tmp%3#1)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#0)
        (assert tmp%5#0)
        exit 1u