main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L21
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@4, method "build_tuple_side_effects()(uint64,uint64,uint64)" => block@5, method "test_tuple((uint64,uint512,string,byte[]))void" => block@6, * => block@9}
    block@4: // build_tuple_route_L22
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]()
        goto block@9
    block@5: // build_tuple_side_effects_route_L37
        test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]()
        goto block@9
    block@6: // test_tuple_route_L41
        test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]()
        goto block@9
    block@9: // after_if_else_L21
        fail
    block@10: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
    block@0: // L22
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let a#0: uint64 = (btoi tmp%0#0)
        let b#0: biguint = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len b#0)
        let eq%1#0: bool = (== len%1#0 64u)
        (assert eq%1#0) // invalid number of bytes for uint512
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%4#0 0u)
        let add%0#0: uint64 = (+ aggregate%array_length%0#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for (len+utf8[])
        let c#0: string = ((extract 2 0) tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%6#0 0u)
        let add%1#0: uint64 = (+ aggregate%array_length%1#0 2u)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 add%1#0)
        (assert eq%3#0) // invalid number of bytes for (len+uint8[])
        let d#0: bytes = ((extract 2 0) tmp%6#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let aggregate%len_ok%0#0: bool = (<= len%1#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| b#0 aggregate%bzero%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%arc4_encoded%0#0)
        let aggregate%length%0#0: uint64 = (len c#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 c#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 76u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x004c
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x004c)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 76u aggregate%data_length%0#0)
        let aggregate%length%1#0: uint64 = (len d#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 d#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let tmp%13#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%13#0)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]() -> void:
    block@0: // L37
        let tmp%0#2: bytes = (itob 1u)
        (log tmp%0#2)
        let tmp%0#3: bytes = (itob 2u)
        (log tmp%0#3)
        let tmp%0#4: bytes = (itob 3u)
        (log tmp%0#4)
        let aggregate%head%1#0: bytes = 0x00000000000000020000000000000003
        let aggregate%head%2#0: bytes = 0x000000000000000200000000000000030000000000000001
        let tmp%4#0: bytes = 0x151f7c75000000000000000200000000000000030000000000000001
        (log 0x151f7c75000000000000000200000000000000030000000000000001)
        exit 1u

subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
    block@0: // L41
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = ((extract 0 8) tmp%0#0)
        let value.a#0: uint64 = (extract_uint64 tmp%0#0 0u)
        let value.b#0: biguint = ((extract 8 64) tmp%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%0#0 72u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%0#0 74u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let value.c#0: string = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%len%0#0: uint64 = (len tmp%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%0#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let value.d#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%0#1: bool = (< value.a#0 1000u)
        (assert tmp%0#1)
        let tmp%1#1: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len value.c#0)
        let tmp%3#1: bool = (> tmp%2#1 1u)
        (assert tmp%3#1)
        let tmp%4#1: account = (txn Sender)
        let tmp%5#0: bool = (== value.d#0 tmp%4#1)
        (assert tmp%5#0)
        exit 1u