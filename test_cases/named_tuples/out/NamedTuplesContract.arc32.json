{
    "hints": {
        "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "TestTuple",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint512"
                        ],
                        [
                            "c",
                            "string"
                        ],
                        [
                            "d",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "test_tuple((uint64,uint512,string,byte[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "TestTuple",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint512"
                        ],
                        [
                            "c",
                            "string"
                        ],
                        [
                            "d",
                            "byte[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmFwcHJvdmFsX3Byb2dyYW06CiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgTmFtZWRUdXBsZXNDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANgogICAgbWV0aG9kICJidWlsZF90dXBsZSh1aW50NjQsdWludDUxMixzdHJpbmcsYnl0ZVtdKSh1aW50NjQsdWludDUxMixzdHJpbmcsYnl0ZVtdKSIKICAgIG1ldGhvZCAidGVzdF90dXBsZSgodWludDY0LHVpbnQ1MTIsc3RyaW5nLGJ5dGVbXSkpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2J1aWxkX3R1cGxlX3JvdXRlQDIgX19wdXlhX2FyYzRfcm91dGVyX19fdGVzdF90dXBsZV9yb3V0ZUAzCiAgICBpbnQgMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19idWlsZF90dXBsZV9yb3V0ZUAyOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBOYW1lZFR1cGxlc0NvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBidWlsZF90dXBsZQogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgc3dhcAogICAgaXRvYgogICAgY292ZXIgMwogICAgZHVwCiAgICBsZW4KICAgIGludCA2NAogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50IDY0CiAgICBiemVybwogICAgYnwKICAgIHN3YXAKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkaWcgMgogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIGNvdmVyIDIKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIGJ5dGUgMHgwMDRjCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIGludCA3NgogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3Rlc3RfdHVwbGVfcm91dGVAMzoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgTmFtZWRUdXBsZXNDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGV4dHJhY3QgMCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgc3dhcAogICAgZHVwCiAgICBleHRyYWN0IDggNjQgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBkdXAKICAgIGludCA3MgogICAgZXh0cmFjdF91aW50MTYKICAgIHN3YXAKICAgIGR1cAogICAgaW50IDc0CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDEKICAgIHVuY292ZXIgMwogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBjb3ZlciAyCiAgICBkaWcgMQogICAgbGVuCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiB0ZXN0X3R1cGxlCiAgICBpbnQgMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANjoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgTmFtZWRUdXBsZXNDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgaW50IDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgTmFtZWRUdXBsZXNDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnQgMAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC5idWlsZF90dXBsZShhOiB1aW50NjQsIGI6IGJ5dGVzLCBjOiBieXRlcywgZDogYnl0ZXMpIC0+IHVpbnQ2NCwgYnl0ZXMsIGJ5dGVzLCBieXRlczoKYnVpbGRfdHVwbGU6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTUtMTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYnVpbGRfdHVwbGUoc2VsZiwgYTogVUludDY0LCBiOiBCaWdVSW50LCBjOiBTdHJpbmcsIGQ6IEJ5dGVzKSAtPiBUZXN0VHVwbGU6CiAgICBwcm90byA0IDQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxNwogICAgLy8gdDEgPSBzZWxmLmJ1aWxkX3R1cGxlX2J5X25hbWUoYSwgYiwgYywgZCkKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBidWlsZF90dXBsZV9ieV9uYW1lCiAgICBjb3ZlciAzCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTgKICAgIC8vIHQyID0gc2VsZi5idWlsZF90dXBsZV9ieV9wb3NpdGlvbihhLCBiLCBjLCBkKQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGJ1aWxkX3R1cGxlX2J5X3Bvc2l0aW9uCiAgICBjb3ZlciA2CiAgICBjb3ZlciA0CiAgICBzd2FwCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTkKICAgIC8vIGFzc2VydCB0MSA9PSB0MgogICAgZGlnIDIKICAgID09CiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBiPT0KICAgICYmCiAgICBkaWcgNAogICAgdW5jb3ZlciA0CiAgICA9PQogICAgJiYKICAgIGRpZyA1CiAgICB1bmNvdmVyIDUKICAgID09CiAgICAmJgogICAgYXNzZXJ0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjAKICAgIC8vIHJldHVybiB0MQogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICB1bmNvdmVyIDMKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMubmFtZWRfdHVwbGVzLmNvbnRyYWN0Lk5hbWVkVHVwbGVzQ29udHJhY3QuYnVpbGRfdHVwbGVfYnlfbmFtZShhOiB1aW50NjQsIGI6IGJ5dGVzLCBjOiBieXRlcywgZDogYnl0ZXMpIC0+IHVpbnQ2NCwgYnl0ZXMsIGJ5dGVzLCBieXRlczoKYnVpbGRfdHVwbGVfYnlfbmFtZToKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToyMi0yMwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBidWlsZF90dXBsZV9ieV9uYW1lKHNlbGYsIGE6IFVJbnQ2NCwgYjogQmlnVUludCwgYzogU3RyaW5nLCBkOiBCeXRlcykgLT4gVGVzdFR1cGxlOgogICAgcHJvdG8gNCA0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjQKICAgIC8vIHJldHVybiBUZXN0VHVwbGUoYT1hLCBiPWIsIGM9YywgZD1kKQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmJ1aWxkX3R1cGxlX2J5X3Bvc2l0aW9uKGE6IHVpbnQ2NCwgYjogYnl0ZXMsIGM6IGJ5dGVzLCBkOiBieXRlcykgLT4gdWludDY0LCBieXRlcywgYnl0ZXMsIGJ5dGVzOgpidWlsZF90dXBsZV9ieV9wb3NpdGlvbjoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToyNi0yNwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBidWlsZF90dXBsZV9ieV9wb3NpdGlvbihzZWxmLCBhOiBVSW50NjQsIGI6IEJpZ1VJbnQsIGM6IFN0cmluZywgZDogQnl0ZXMpIC0+IFRlc3RUdXBsZToKICAgIHByb3RvIDQgNAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjI4CiAgICAvLyByZXR1cm4gVGVzdFR1cGxlKGEsIGIsIGMsIGQpCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMubmFtZWRfdHVwbGVzLmNvbnRyYWN0Lk5hbWVkVHVwbGVzQ29udHJhY3QudGVzdF90dXBsZSh2YWx1ZS5hOiB1aW50NjQsIHZhbHVlLmI6IGJ5dGVzLCB2YWx1ZS5jOiBieXRlcywgdmFsdWUuZDogYnl0ZXMpIC0+IHZvaWQ6CnRlc3RfdHVwbGU6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzAtMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdGVzdF90dXBsZShzZWxmLCB2YWx1ZTogVGVzdFR1cGxlKSAtPiBOb25lOgogICAgcHJvdG8gNCAwCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzIKICAgIC8vIGFzc2VydCB2YWx1ZS5hIDwgMTAwMAogICAgZnJhbWVfZGlnIC00CiAgICBpbnQgMTAwMAogICAgPAogICAgYXNzZXJ0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzMKICAgIC8vIGFzc2VydCB2YWx1ZS5iIDwgMioqNjUKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZSAweDAyMDAwMDAwMDAwMDAwMDAwMAogICAgYjwKICAgIGFzc2VydAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBhc3NlcnQgdmFsdWUuYy5ieXRlcy5sZW5ndGggPiAxCiAgICBmcmFtZV9kaWcgLTIKICAgIGxlbgogICAgaW50IDEKICAgID4KICAgIGFzc2VydAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjM1CiAgICAvLyBhc3NlcnQgdmFsdWUuZCA9PSBUeG4uc2VuZGVyLmJ5dGVzCiAgICBmcmFtZV9kaWcgLTEKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NamedTuplesContract",
        "methods": [
            {
                "name": "build_tuple",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint512",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint512,string,byte[])"
                }
            },
            {
                "name": "test_tuple",
                "args": [
                    {
                        "type": "(uint64,uint512,string,byte[])",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}