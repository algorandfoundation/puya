{
    "hints": {
        "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "TestTuple",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint512"
                        ],
                        [
                            "c",
                            "string"
                        ],
                        [
                            "d",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "test_tuple((uint64,uint512,string,byte[]))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "value": {
                    "name": "TestTuple",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "b",
                            "uint512"
                        ],
                        [
                            "c",
                            "string"
                        ],
                        [
                            "d",
                            "byte[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmFwcHJvdmFsX3Byb2dyYW06CiAgICBpbnRjYmxvY2sgMSAwIDY0CiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0Ll9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgTmFtZWRUdXBsZXNDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANgogICAgcHVzaGJ5dGVzcyAweDQ1NmVlYWNlIDB4NmY5ZjViZjAgLy8gbWV0aG9kICJidWlsZF90dXBsZSh1aW50NjQsdWludDUxMixzdHJpbmcsYnl0ZVtdKSh1aW50NjQsdWludDUxMixzdHJpbmcsYnl0ZVtdKSIsIG1ldGhvZCAidGVzdF90dXBsZSgodWludDY0LHVpbnQ1MTIsc3RyaW5nLGJ5dGVbXSkpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2J1aWxkX3R1cGxlX3JvdXRlQDIgX19wdXlhX2FyYzRfcm91dGVyX19fdGVzdF90dXBsZV9yb3V0ZUAzCiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19idWlsZF90dXBsZV9yb3V0ZUAyOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBOYW1lZFR1cGxlc0NvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBleHRyYWN0IDIgMAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBidWlsZF90dXBsZQogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICBkaWcgMwogICAgbGVuCiAgICBpbnRjXzIgLy8gNjQKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludGNfMiAvLyA2NAogICAgYnplcm8KICAgIHVuY292ZXIgNAogICAgYnwKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgZGlnIDMKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgwMDRjCiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBsZW4KICAgIHB1c2hpbnQgNzYgLy8gNzYKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fdGVzdF90dXBsZV9yb3V0ZUAzOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBOYW1lZFR1cGxlc0NvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgZXh0cmFjdCAwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBkaWcgMQogICAgZXh0cmFjdCA4IDY0IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDIKICAgIHB1c2hpbnQgNzIgLy8gNzIKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMwogICAgcHVzaGludCA3NCAvLyA3NAogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyA0CiAgICB1bmNvdmVyIDIKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgZGlnIDQKICAgIGxlbgogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdGVzdF90dXBsZQogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDY6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIE5hbWVkVHVwbGVzQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTAKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIE5hbWVkVHVwbGVzQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMubmFtZWRfdHVwbGVzLmNvbnRyYWN0Lk5hbWVkVHVwbGVzQ29udHJhY3QuYnVpbGRfdHVwbGUoYTogdWludDY0LCBiOiBieXRlcywgYzogYnl0ZXMsIGQ6IGJ5dGVzKSAtPiB1aW50NjQsIGJ5dGVzLCBieXRlcywgYnl0ZXM6CmJ1aWxkX3R1cGxlOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE1LTE2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIGJ1aWxkX3R1cGxlKHNlbGYsIGE6IFVJbnQ2NCwgYjogQmlnVUludCwgYzogU3RyaW5nLCBkOiBCeXRlcykgLT4gVGVzdFR1cGxlOgogICAgcHJvdG8gNCA0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MTcKICAgIC8vIHQxID0gc2VsZi5idWlsZF90dXBsZV9ieV9uYW1lKGEsIGIsIGMsIGQpCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgYnVpbGRfdHVwbGVfYnlfbmFtZQogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE4CiAgICAvLyB0MiA9IHNlbGYuYnVpbGRfdHVwbGVfYnlfcG9zaXRpb24oYSwgYiwgYywgZCkKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBidWlsZF90dXBsZV9ieV9wb3NpdGlvbgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBhc3NlcnQgdDEgPT0gdDIKICAgIGRpZyA3CiAgICB1bmNvdmVyIDQKICAgID09CiAgICBkaWcgNgogICAgdW5jb3ZlciA0CiAgICBiPT0KICAgICYmCiAgICBkaWcgNAogICAgdW5jb3ZlciAzCiAgICA9PQogICAgJiYKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgID09CiAgICAmJgogICAgYXNzZXJ0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjAKICAgIC8vIHJldHVybiB0MQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC5idWlsZF90dXBsZV9ieV9uYW1lKGE6IHVpbnQ2NCwgYjogYnl0ZXMsIGM6IGJ5dGVzLCBkOiBieXRlcykgLT4gdWludDY0LCBieXRlcywgYnl0ZXMsIGJ5dGVzOgpidWlsZF90dXBsZV9ieV9uYW1lOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjIyLTIzCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGJ1aWxkX3R1cGxlX2J5X25hbWUoc2VsZiwgYTogVUludDY0LCBiOiBCaWdVSW50LCBjOiBTdHJpbmcsIGQ6IEJ5dGVzKSAtPiBUZXN0VHVwbGU6CiAgICBwcm90byA0IDQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weToyNAogICAgLy8gcmV0dXJuIFRlc3RUdXBsZShhPWEsIGI9YiwgYz1jLCBkPWQpCiAgICBmcmFtZV9kaWcgLTQKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMubmFtZWRfdHVwbGVzLmNvbnRyYWN0Lk5hbWVkVHVwbGVzQ29udHJhY3QuYnVpbGRfdHVwbGVfYnlfcG9zaXRpb24oYTogdWludDY0LCBiOiBieXRlcywgYzogYnl0ZXMsIGQ6IGJ5dGVzKSAtPiB1aW50NjQsIGJ5dGVzLCBieXRlcywgYnl0ZXM6CmJ1aWxkX3R1cGxlX2J5X3Bvc2l0aW9uOgogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjI2LTI3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGJ1aWxkX3R1cGxlX2J5X3Bvc2l0aW9uKHNlbGYsIGE6IFVJbnQ2NCwgYjogQmlnVUludCwgYzogU3RyaW5nLCBkOiBCeXRlcykgLT4gVGVzdFR1cGxlOgogICAgcHJvdG8gNCA0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjgKICAgIC8vIHJldHVybiBUZXN0VHVwbGUoYSwgYiwgYywgZCkKICAgIGZyYW1lX2RpZyAtNAogICAgZnJhbWVfZGlnIC0zCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC50ZXN0X3R1cGxlKHZhbHVlLmE6IHVpbnQ2NCwgdmFsdWUuYjogYnl0ZXMsIHZhbHVlLmM6IGJ5dGVzLCB2YWx1ZS5kOiBieXRlcykgLT4gdm9pZDoKdGVzdF90dXBsZToKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozMC0zMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB0ZXN0X3R1cGxlKHNlbGYsIHZhbHVlOiBUZXN0VHVwbGUpIC0+IE5vbmU6CiAgICBwcm90byA0IDAKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozMgogICAgLy8gYXNzZXJ0IHZhbHVlLmEgPCAxMDAwCiAgICBmcmFtZV9kaWcgLTQKICAgIHB1c2hpbnQgMTAwMCAvLyAxMDAwCiAgICA8CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozMwogICAgLy8gYXNzZXJ0IHZhbHVlLmIgPCAyKio2NQogICAgZnJhbWVfZGlnIC0zCiAgICBwdXNoYnl0ZXMgMHgwMjAwMDAwMDAwMDAwMDAwMDAKICAgIGI8CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozNAogICAgLy8gYXNzZXJ0IHZhbHVlLmMuYnl0ZXMubGVuZ3RoID4gMQogICAgZnJhbWVfZGlnIC0yCiAgICBsZW4KICAgIGludGNfMCAvLyAxCiAgICA+CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozNQogICAgLy8gYXNzZXJ0IHZhbHVlLmQgPT0gVHhuLnNlbmRlci5ieXRlcwogICAgZnJhbWVfZGlnIC0xCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "NamedTuplesContract",
        "methods": [
            {
                "name": "build_tuple",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint512",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint512,string,byte[])"
                }
            },
            {
                "name": "test_tuple",
                "args": [
                    {
                        "type": "(uint64,uint512,string,byte[])",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}