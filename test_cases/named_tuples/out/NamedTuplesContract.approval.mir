// Op                                                                                      // Op Description                                                Stack (out)                                                                                                                                                          Source code                                                                                          Source line

#pragma version 10

// test_cases.named_tuples.contract.NamedTuplesContract.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                                           //                                                               {__puya_arc4_router__}                                                                                                                                                                                                                                                    INTERNAL:1
                                                                                           // virtual: store tmp%0#0 to l-stack (no copy)                   tmp%0#0                                                                                                                                                                                                                                                                   INTERNAL:1
                                                                                           // virtual: load tmp%0#0 from l-stack (no copy)                  tmp%0#0                                                                                                                                                                                                                                                                   INTERNAL:1
    return                                                                                 //                                                                                                                                                                                                                                                                                                                                         INTERNAL:1


// test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1                                                                              //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13

__puya_arc4_router___block@0:
    txn NumAppArgs                                                                         //                                                               {txn}                                                                                                                                                                class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%0#0 to l-stack (no copy)                   tmp%0#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%0#0 from l-stack (no copy)                  tmp%0#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    bz __puya_arc4_router___bare_routing@6                                                 //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    // Implicit fall through to __puya_arc4_router___abi_routing@1                         //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13

__puya_arc4_router___abi_routing@1:
    txna ApplicationArgs 0                                                                 //                                                               {txna}                                                                                                                                                               class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%2#0 to l-stack (no copy)                   tmp%2#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])"       //                                                               tmp%2#0,method<"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])">                                                                            class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    method "test_tuple((uint64,uint512,string,byte[]))void"                                //                                                               tmp%2#0,method<"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])">,method<"test_tuple((uint64,uint512,string,byte[]))void">                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 2                                                                              // load tmp%2#0 from l-stack (no copy)                           method<"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])">,method<"test_tuple((uint64,uint512,string,byte[]))void">,tmp%2#0                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    match __puya_arc4_router___build_tuple_route@2 __puya_arc4_router___test_tuple_route@3 //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    int 0                                                                                  //                                                               0                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    retsub                                                                                 //                                                               0                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13

__puya_arc4_router___build_tuple_route@2:
    txn OnCompletion                                                                       //                                                               {txn}                                                                                                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store tmp%3#0 to l-stack (no copy)                   tmp%3#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load tmp%3#0 from l-stack (no copy)                  tmp%3#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
    !                                                                                      //                                                               {!}                                                                                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store tmp%4#0 to l-stack (no copy)                   tmp%4#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load tmp%4#0 from l-stack (no copy)                  tmp%4#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
    assert // OnCompletion is NoOp                                                         //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    txn ApplicationID                                                                      //                                                               {txn}                                                                                                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store tmp%5#0 to l-stack (no copy)                   tmp%5#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load tmp%5#0 from l-stack (no copy)                  tmp%5#0                                                                                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
    assert // is not creating                                                              //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    txna ApplicationArgs 1                                                                 //                                                               {txna}                                                                                                                                                               class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%7#0 to l-stack (no copy)                   tmp%7#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%7#0 from l-stack (no copy)                  tmp%7#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    btoi                                                                                   //                                                               {btoi}                                                                                                                                                               class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%8#0 to l-stack (no copy)                   tmp%8#0                                                                                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    txna ApplicationArgs 2                                                                 //                                                               tmp%8#0,{txna}                                                                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%9#0 to l-stack (no copy)                   tmp%8#0,tmp%9#0                                                                                                                                                      class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    txna ApplicationArgs 3                                                                 //                                                               tmp%8#0,tmp%9#0,{txna}                                                                                                                                               class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%10#0 to l-stack (no copy)                  tmp%8#0,tmp%9#0,tmp%10#0                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%10#0 from l-stack (no copy)                 tmp%8#0,tmp%9#0,tmp%10#0                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 2 0                                                                            //                                                               tmp%8#0,tmp%9#0,{extract}                                                                                                                                            class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%11#0 to l-stack (no copy)                  tmp%8#0,tmp%9#0,tmp%11#0                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    txna ApplicationArgs 4                                                                 //                                                               tmp%8#0,tmp%9#0,tmp%11#0,{txna}                                                                                                                                      class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%12#0 to l-stack (no copy)                  tmp%8#0,tmp%9#0,tmp%11#0,tmp%12#0                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%12#0 from l-stack (no copy)                 tmp%8#0,tmp%9#0,tmp%11#0,tmp%12#0                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 2 0                                                                            //                                                               tmp%8#0,tmp%9#0,tmp%11#0,{extract}                                                                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%13#0 to l-stack (no copy)                  tmp%8#0,tmp%9#0,tmp%11#0,tmp%13#0                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 3                                                                              // load tmp%8#0 from l-stack (no copy)                           tmp%9#0,tmp%11#0,tmp%13#0,tmp%8#0                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 3                                                                              // load tmp%9#0 from l-stack (no copy)                           tmp%11#0,tmp%13#0,tmp%8#0,tmp%9#0                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 3                                                                              // load tmp%11#0 from l-stack (no copy)                          tmp%13#0,tmp%8#0,tmp%9#0,tmp%11#0                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 3                                                                              // load tmp%13#0 from l-stack (no copy)                          tmp%8#0,tmp%9#0,tmp%11#0,tmp%13#0                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    callsub build_tuple                                                                    //                                                               {build_tuple}.0,{build_tuple}.1,{build_tuple}.2,{build_tuple}.3                                                                                                      arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 3                                                                                // store elements_to_encode%3#0 to l-stack (no copy)             elements_to_encode%3#0,{build_tuple}.0,{build_tuple}.1,{build_tuple}.2                                                                                               arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 2                                                                                // store elements_to_encode%2#0 to l-stack (no copy)             elements_to_encode%3#0,elements_to_encode%2#0,{build_tuple}.0,{build_tuple}.1                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 1                                                                                // store elements_to_encode%1#0 to l-stack (no copy)             elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,{build_tuple}.0                                                                                 arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store elements_to_encode%0#0 to l-stack (no copy)    elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,elements_to_encode%0#0                                                                          arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load elements_to_encode%0#0 from l-stack (no copy)   elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,elements_to_encode%0#0                                                                          arc4.abimethod()                                                                                     named_tuples/contract.py:15
    itob                                                                                   //                                                               elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,{itob}                                                                                          arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 3                                                                                // store val_as_bytes%0#0 to l-stack (no copy)                   val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
    dig 0                                                                                  // load elements_to_encode%1#0 from l-stack (copy)               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,elements_to_encode%1#0 (copy)                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
    len                                                                                    //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,{len}                                                                          arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store len_%0#0 to l-stack (no copy)                  val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,len_%0#0                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load len_%0#0 from l-stack (no copy)                 val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,len_%0#0                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
    int 64                                                                                 //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,len_%0#0,64                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    <=                                                                                     //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,{<=}                                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store no_overflow%0#0 to l-stack (no copy)           val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,no_overflow%0#0                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load no_overflow%0#0 from l-stack (no copy)          val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,no_overflow%0#0                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
    assert // overflow                                                                     //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
    int 64                                                                                 //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,64                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
    bzero                                                                                  //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,{bzero}                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store b_zeros%0#0 to l-stack (no copy)               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,b_zeros%0#0                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load elements_to_encode%1#0 from l-stack (no copy)   val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,b_zeros%0#0,elements_to_encode%1#0                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load b_zeros%0#0 from l-stack (no copy)              val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,elements_to_encode%1#0,b_zeros%0#0                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    b|                                                                                     //                                                               val_as_bytes%0#0,elements_to_encode%3#0,elements_to_encode%2#0,{b|}                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 1                                                                                // store arc4_item%0#0 to l-stack (no copy)                      val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    dig 0                                                                                  // load elements_to_encode%2#0 from l-stack (copy)               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,elements_to_encode%2#0 (copy)                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
    len                                                                                    //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,{len}                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store length%0#0 to l-stack (no copy)                val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,length%0#0                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load length%0#0 from l-stack (no copy)               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,length%0#0                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
    itob                                                                                   //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,{itob}                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store as_bytes%0#0 to l-stack (no copy)              val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,as_bytes%0#0                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load as_bytes%0#0 from l-stack (no copy)             val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,as_bytes%0#0                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
    extract 6 2                                                                            //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,{extract}                                                                               arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store length_uint16%0#0 to l-stack (no copy)         val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,length_uint16%0#0                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load length_uint16%0#0 from l-stack (no copy)        val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,elements_to_encode%2#0,length_uint16%0#0                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 1                                                                              // load elements_to_encode%2#0 from l-stack (no copy)            val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,length_uint16%0#0,elements_to_encode%2#0                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,{concat}                                                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_value%0#0 to l-stack (no copy)         val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0                                                                                              arc4.abimethod()                                                                                     named_tuples/contract.py:15
    dig 2                                                                                  // load elements_to_encode%3#0 from l-stack (copy)               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,elements_to_encode%3#0 (copy)                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
    len                                                                                    //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,{len}                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store length%1#0 to l-stack (no copy)                val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,length%1#0                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load length%1#0 from l-stack (no copy)               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,length%1#0                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
    itob                                                                                   //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,{itob}                                                                                       arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store as_bytes%1#0 to l-stack (no copy)              val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,as_bytes%1#0                                                                                 arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load as_bytes%1#0 from l-stack (no copy)             val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,as_bytes%1#0                                                                                 arc4.abimethod()                                                                                     named_tuples/contract.py:15
    extract 6 2                                                                            //                                                               val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,{extract}                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store length_uint16%1#0 to l-stack (no copy)         val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,length_uint16%1#0                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load length_uint16%1#0 from l-stack (no copy)        val_as_bytes%0#0,elements_to_encode%3#0,arc4_item%0#0,encoded_value%0#0,length_uint16%1#0                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 3                                                                              // load elements_to_encode%3#0 from l-stack (no copy)            val_as_bytes%0#0,arc4_item%0#0,encoded_value%0#0,length_uint16%1#0,elements_to_encode%3#0                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               val_as_bytes%0#0,arc4_item%0#0,encoded_value%0#0,{concat}                                                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
    cover 2                                                                                // store encoded_value%1#0 to l-stack (no copy)                  val_as_bytes%0#0,encoded_value%1#0,arc4_item%0#0,encoded_value%0#0                                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 3                                                                              // load val_as_bytes%0#0 from l-stack (no copy)                  encoded_value%1#0,arc4_item%0#0,encoded_value%0#0,val_as_bytes%0#0                                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 2                                                                              // load arc4_item%0#0 from l-stack (no copy)                     encoded_value%1#0,encoded_value%0#0,val_as_bytes%0#0,arc4_item%0#0                                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               encoded_value%1#0,encoded_value%0#0,{concat}                                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_tuple_buffer%2#0 to l-stack (no copy)  encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%2#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load encoded_tuple_buffer%2#0 from l-stack (no copy) encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%2#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    byte 0x004c                                                                            //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%2#0,0x004c                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               encoded_value%1#0,encoded_value%0#0,{concat}                                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_tuple_buffer%3#0 to l-stack (no copy)  encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    dig 1                                                                                  // load encoded_value%0#0 from l-stack (copy)                    encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,encoded_value%0#0 (copy)                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:15
    len                                                                                    //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,{len}                                                                                                   arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store data_length%0#0 to l-stack (no copy)           encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,data_length%0#0                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    int 76                                                                                 //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,data_length%0#0,76                                                                                      arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 1                                                                              // load data_length%0#0 from l-stack (no copy)                   encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,76,data_length%0#0                                                                                      arc4.abimethod()                                                                                     named_tuples/contract.py:15
    +                                                                                      //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,{+}                                                                                                     arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store current_tail_offset%1#0 to l-stack (no copy)   encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,current_tail_offset%1#0                                                                                 arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load current_tail_offset%1#0 from l-stack (no copy)  encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,current_tail_offset%1#0                                                                                 arc4.abimethod()                                                                                     named_tuples/contract.py:15
    itob                                                                                   //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,{itob}                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store as_bytes%3#0 to l-stack (no copy)              encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,as_bytes%3#0                                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load as_bytes%3#0 from l-stack (no copy)             encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,as_bytes%3#0                                                                                            arc4.abimethod()                                                                                     named_tuples/contract.py:15
    extract 6 2                                                                            //                                                               encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,{extract}                                                                                               arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store offset_as_uint16%1#0 to l-stack (no copy)      encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,offset_as_uint16%1#0                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load encoded_tuple_buffer%3#0 from l-stack (no copy) encoded_value%1#0,encoded_value%0#0,offset_as_uint16%1#0,encoded_tuple_buffer%3#0                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load offset_as_uint16%1#0 from l-stack (no copy)     encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%3#0,offset_as_uint16%1#0                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               encoded_value%1#0,encoded_value%0#0,{concat}                                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_tuple_buffer%4#0 to l-stack (no copy)  encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%4#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load encoded_tuple_buffer%4#0 from l-stack (no copy) encoded_value%1#0,encoded_value%0#0,encoded_tuple_buffer%4#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 1                                                                              // load encoded_value%0#0 from l-stack (no copy)                 encoded_value%1#0,encoded_tuple_buffer%4#0,encoded_value%0#0                                                                                                         arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               encoded_value%1#0,{concat}                                                                                                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_tuple_buffer%5#0 to l-stack (no copy)  encoded_value%1#0,encoded_tuple_buffer%5#0                                                                                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load encoded_tuple_buffer%5#0 from l-stack (no copy) encoded_value%1#0,encoded_tuple_buffer%5#0                                                                                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 1                                                                              // load encoded_value%1#0 from l-stack (no copy)                 encoded_tuple_buffer%5#0,encoded_value%1#0                                                                                                                           arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               {concat}                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store encoded_tuple_buffer%6#0 to l-stack (no copy)  encoded_tuple_buffer%6#0                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
    byte 0x151f7c75                                                                        //                                                               encoded_tuple_buffer%6#0,0x151f7c75                                                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
    uncover 1                                                                              // load encoded_tuple_buffer%6#0 from l-stack (no copy)          0x151f7c75,encoded_tuple_buffer%6#0                                                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:15
    concat                                                                                 //                                                               {concat}                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: store tmp%14#0 to l-stack (no copy)                  tmp%14#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
                                                                                           // virtual: load tmp%14#0 from l-stack (no copy)                 tmp%14#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:15
    log                                                                                    //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    int 1                                                                                  //                                                               1                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15
    retsub                                                                                 //                                                               1                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:15

__puya_arc4_router___test_tuple_route@3:
    txn OnCompletion                                                                       //                                                               {txn}                                                                                                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: store tmp%15#0 to l-stack (no copy)                  tmp%15#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: load tmp%15#0 from l-stack (no copy)                 tmp%15#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
    !                                                                                      //                                                               {!}                                                                                                                                                                  arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: store tmp%16#0 to l-stack (no copy)                  tmp%16#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: load tmp%16#0 from l-stack (no copy)                 tmp%16#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
    assert // OnCompletion is NoOp                                                         //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:30
    txn ApplicationID                                                                      //                                                               {txn}                                                                                                                                                                arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: store tmp%17#0 to l-stack (no copy)                  tmp%17#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
                                                                                           // virtual: load tmp%17#0 from l-stack (no copy)                 tmp%17#0                                                                                                                                                             arc4.abimethod()                                                                                     named_tuples/contract.py:30
    assert // is not creating                                                              //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:30
    txna ApplicationArgs 1                                                                 //                                                               {txna}                                                                                                                                                               class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%19#0 to l-stack (no copy)                  tmp%19#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 0                                                                                  // load tmp%19#0 from l-stack (copy)                             tmp%19#0,tmp%19#0 (copy)                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 0 8 // on error: Index access is out of bounds                                 //                                                               tmp%19#0,{extract}                                                                                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store item0%0#0 to l-stack (no copy)                 tmp%19#0,item0%0#0                                                                                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load item0%0#0 from l-stack (no copy)                tmp%19#0,item0%0#0                                                                                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    btoi                                                                                   //                                                               tmp%19#0,{btoi}                                                                                                                                                      class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    cover 1                                                                                // store item0%0%0#0 to l-stack (no copy)                        item0%0%0#0,tmp%19#0                                                                                                                                                 class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 0                                                                                  // load tmp%19#0 from l-stack (copy)                             item0%0%0#0,tmp%19#0,tmp%19#0 (copy)                                                                                                                                 class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 8 64 // on error: Index access is out of bounds                                //                                                               item0%0%0#0,tmp%19#0,{extract}                                                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    cover 1                                                                                // store item1%0#0 to l-stack (no copy)                          item0%0%0#0,item1%0#0,tmp%19#0                                                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 0                                                                                  // load tmp%19#0 from l-stack (copy)                             item0%0%0#0,item1%0#0,tmp%19#0,tmp%19#0 (copy)                                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    int 72                                                                                 //                                                               item0%0%0#0,item1%0#0,tmp%19#0,tmp%19#0 (copy),72                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract_uint16                                                                         //                                                               item0%0%0#0,item1%0#0,tmp%19#0,{extract_uint16}                                                                                                                      class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    cover 1                                                                                // store item_start_offset%0#0 to l-stack (no copy)              item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0                                                                                                                 class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 0                                                                                  // load tmp%19#0 from l-stack (copy)                             item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0,tmp%19#0 (copy)                                                                                                 class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    int 74                                                                                 //                                                               item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0,tmp%19#0 (copy),74                                                                                              class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract_uint16                                                                         //                                                               item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0,{extract_uint16}                                                                                                class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store item_end_offset%0#0 to l-stack (no copy)       item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0,item_end_offset%0#0                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 1                                                                                  // load tmp%19#0 from l-stack (copy)                             item0%0%0#0,item1%0#0,item_start_offset%0#0,tmp%19#0,item_end_offset%0#0,tmp%19#0 (copy)                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 3                                                                              // load item_start_offset%0#0 from l-stack (no copy)             item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,tmp%19#0 (copy),item_start_offset%0#0                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 2                                                                                  // load item_end_offset%0#0 from l-stack (copy)                  item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,tmp%19#0 (copy),item_start_offset%0#0,item_end_offset%0#0 (copy)                                                  class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    substring3                                                                             //                                                               item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,{substring3}                                                                                                      class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store item2%0#0 to l-stack (no copy)                 item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,item2%0#0                                                                                                         class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load item2%0#0 from l-stack (no copy)                item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,item2%0#0                                                                                                         class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 2 0                                                                            //                                                               item0%0%0#0,item1%0#0,tmp%19#0,item_end_offset%0#0,{extract}                                                                                                         class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    cover 2                                                                                // store item2%0%0#0 to l-stack (no copy)                        item0%0%0#0,item1%0#0,item2%0%0#0,tmp%19#0,item_end_offset%0#0                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    dig 1                                                                                  // load tmp%19#0 from l-stack (copy)                             item0%0%0#0,item1%0#0,item2%0%0#0,tmp%19#0,item_end_offset%0#0,tmp%19#0 (copy)                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    len                                                                                    //                                                               item0%0%0#0,item1%0#0,item2%0%0#0,tmp%19#0,item_end_offset%0#0,{len}                                                                                                 class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    cover 1                                                                                // store item_end_offset%1#0 to l-stack (no copy)                item0%0%0#0,item1%0#0,item2%0%0#0,tmp%19#0,item_end_offset%1#0,item_end_offset%0#0                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 2                                                                              // load tmp%19#0 from l-stack (no copy)                          item0%0%0#0,item1%0#0,item2%0%0#0,item_end_offset%1#0,item_end_offset%0#0,tmp%19#0                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 1                                                                              // load item_end_offset%0#0 from l-stack (no copy)               item0%0%0#0,item1%0#0,item2%0%0#0,item_end_offset%1#0,tmp%19#0,item_end_offset%0#0                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 2                                                                              // load item_end_offset%1#0 from l-stack (no copy)               item0%0%0#0,item1%0#0,item2%0%0#0,tmp%19#0,item_end_offset%0#0,item_end_offset%1#0                                                                                   class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    substring3                                                                             //                                                               item0%0%0#0,item1%0#0,item2%0%0#0,{substring3}                                                                                                                       class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store item3%0#0 to l-stack (no copy)                 item0%0%0#0,item1%0#0,item2%0%0#0,item3%0#0                                                                                                                          class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load item3%0#0 from l-stack (no copy)                item0%0%0#0,item1%0#0,item2%0%0#0,item3%0#0                                                                                                                          class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    extract 2 0                                                                            //                                                               item0%0%0#0,item1%0#0,item2%0%0#0,{extract}                                                                                                                          class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store item3%0%0#0 to l-stack (no copy)               item0%0%0#0,item1%0#0,item2%0%0#0,item3%0%0#0                                                                                                                        class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    uncover 3                                                                              // load item0%0%0#0 from l-stack (no copy)                       item1%0#0,item2%0%0#0,item3%0%0#0,item0%0%0#0                                                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:30
    uncover 3                                                                              // load item1%0#0 from l-stack (no copy)                         item2%0%0#0,item3%0%0#0,item0%0%0#0,item1%0#0                                                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:30
    uncover 3                                                                              // load item2%0%0#0 from l-stack (no copy)                       item3%0%0#0,item0%0%0#0,item1%0#0,item2%0%0#0                                                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:30
    uncover 3                                                                              // load item3%0%0#0 from l-stack (no copy)                       item0%0%0#0,item1%0#0,item2%0%0#0,item3%0%0#0                                                                                                                        arc4.abimethod()                                                                                     named_tuples/contract.py:30
    callsub test_tuple                                                                     //                                                                                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:30
    int 1                                                                                  //                                                               1                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:30
    retsub                                                                                 //                                                               1                                                                                                                                                                    arc4.abimethod()                                                                                     named_tuples/contract.py:30

__puya_arc4_router___bare_routing@6:
    txn OnCompletion                                                                       //                                                               {txn}                                                                                                                                                                class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%20#0 to l-stack (no copy)                  tmp%20#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%20#0 from l-stack (no copy)                 tmp%20#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    bnz __puya_arc4_router___after_if_else@10                                              //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    // Implicit fall through to __puya_arc4_router_____algopy_default_create@7             //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13

__puya_arc4_router_____algopy_default_create@7:
    txn ApplicationID                                                                      //                                                               {txn}                                                                                                                                                                class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%21#0 to l-stack (no copy)                  tmp%21#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%21#0 from l-stack (no copy)                 tmp%21#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    !                                                                                      //                                                               {!}                                                                                                                                                                  class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: store tmp%22#0 to l-stack (no copy)                  tmp%22#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
                                                                                           // virtual: load tmp%22#0 from l-stack (no copy)                 tmp%22#0                                                                                                                                                             class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    assert // is creating                                                                  //                                                                                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    int 1                                                                                  //                                                               1                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    retsub                                                                                 //                                                               1                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13

__puya_arc4_router___after_if_else@10:
    int 0                                                                                  //                                                               0                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13
    retsub                                                                                 //                                                               0                                                                                                                                                                    class NamedTuplesContract(arc4.ARC4Contract):                                                        named_tuples/contract.py:13


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple:
    proto 4 4                                                                              //                                                               (𝕡) a#0,b#0,c#0,d#0 |                                                                                                                                                @arc4.abimethod()\ndef build_tuple(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple:   named_tuples/contract.py:15-16

build_tuple_block@0:
    frame_dig -4                                                                           // load a#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy)                                                                                                                                     t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    frame_dig -3                                                                           // load b#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy)                                                                                                                          t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    frame_dig -2                                                                           // load c#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy)                                                                                                               t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    frame_dig -1                                                                           // load d#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                                                    t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    callsub build_tuple_by_name                                                            //                                                               (𝕡) a#0,b#0,c#0,d#0 | {build_tuple_by_name}.0,{build_tuple_by_name}.1,{build_tuple_by_name}.2,{build_tuple_by_name}.3                                                self.build_tuple_by_name(a, b, c, d)                                                                 named_tuples/contract.py:17
    cover 3                                                                                // store t1.d#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,{build_tuple_by_name}.0,{build_tuple_by_name}.1,{build_tuple_by_name}.2                                                                 t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    cover 2                                                                                // store t1.c#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,{build_tuple_by_name}.0,{build_tuple_by_name}.1                                                                                  t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    cover 1                                                                                // store t1.b#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,{build_tuple_by_name}.0                                                                                                   t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
                                                                                           // virtual: store t1.a#0 to l-stack (no copy)                    (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0                                                                                                                    t1 = self.build_tuple_by_name(a, b, c, d)                                                            named_tuples/contract.py:17
    frame_dig -4                                                                           // load a#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,a#0 (copy)                                                                                                         t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    frame_dig -3                                                                           // load b#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,a#0 (copy),b#0 (copy)                                                                                              t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    frame_dig -2                                                                           // load c#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,a#0 (copy),b#0 (copy),c#0 (copy)                                                                                   t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    frame_dig -1                                                                           // load d#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                        t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    callsub build_tuple_by_position                                                        //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,{build_tuple_by_position}.0,{build_tuple_by_position}.1,{build_tuple_by_position}.2,{build_tuple_by_position}.3    self.build_tuple_by_position(a, b, c, d)                                                             named_tuples/contract.py:18
    cover 6                                                                                // store t2.d#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,{build_tuple_by_position}.0,{build_tuple_by_position}.1,{build_tuple_by_position}.2                         t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    cover 4                                                                                // store t2.c#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,{build_tuple_by_position}.0,{build_tuple_by_position}.1                                              t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    cover 1                                                                                // store t2.b#0 to l-stack (no copy)                             (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,{build_tuple_by_position}.0                                                                   t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
                                                                                           // virtual: store t2.a#0 to l-stack (no copy)                    (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,t2.a#0                                                                                        t2 = self.build_tuple_by_position(a, b, c, d)                                                        named_tuples/contract.py:18
    dig 2                                                                                  // load t1.a#0 from l-stack (copy)                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,t2.a#0,t1.a#0 (copy)                                                                          t1 == t2                                                                                             named_tuples/contract.py:19
    uncover 1                                                                              // load t2.a#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,t1.a#0 (copy),t2.a#0                                                                          t1 == t2                                                                                             named_tuples/contract.py:19
    ==                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,{==}                                                                                          t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%0#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,tmp%0#0                                                                                       t1 == t2                                                                                             named_tuples/contract.py:19
    dig 3                                                                                  // load t1.b#0 from l-stack (copy)                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,t2.b#0,tmp%0#0,t1.b#0 (copy)                                                                         t1 == t2                                                                                             named_tuples/contract.py:19
    uncover 2                                                                              // load t2.b#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%0#0,t1.b#0 (copy),t2.b#0                                                                         t1 == t2                                                                                             named_tuples/contract.py:19
    b==                                                                                    //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%0#0,{b==}                                                                                        t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%1#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%0#0,tmp%1#0                                                                                      t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%0#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%1#0,tmp%0#0                                                                                      t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%1#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%0#0,tmp%1#0                                                                                      t1 == t2                                                                                             named_tuples/contract.py:19
    &&                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,{&&}                                                                                                 t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%2#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%2#0                                                                                              t1 == t2                                                                                             named_tuples/contract.py:19
    dig 4                                                                                  // load t1.c#0 from l-stack (copy)                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t2.c#0,t1.b#0,t1.a#0,tmp%2#0,t1.c#0 (copy)                                                                                t1 == t2                                                                                             named_tuples/contract.py:19
    uncover 4                                                                              // load t2.c#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%2#0,t1.c#0 (copy),t2.c#0                                                                                t1 == t2                                                                                             named_tuples/contract.py:19
    ==                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%2#0,{==}                                                                                                t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%3#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%2#0,tmp%3#0                                                                                             t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%2#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%3#0,tmp%2#0                                                                                             t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%3#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%2#0,tmp%3#0                                                                                             t1 == t2                                                                                             named_tuples/contract.py:19
    &&                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,{&&}                                                                                                        t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%4#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0                                                                                                     t1 == t2                                                                                             named_tuples/contract.py:19
    dig 5                                                                                  // load t1.d#0 from l-stack (copy)                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t2.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0,t1.d#0 (copy)                                                                                       t1 == t2                                                                                             named_tuples/contract.py:19
    uncover 5                                                                              // load t2.d#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0,t1.d#0 (copy),t2.d#0                                                                                       t1 == t2                                                                                             named_tuples/contract.py:19
    ==                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0,{==}                                                                                                       t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%5#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0,tmp%5#0                                                                                                    t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%4#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%5#0,tmp%4#0                                                                                                    t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%5#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%4#0,tmp%5#0                                                                                                    t1 == t2                                                                                             named_tuples/contract.py:19
    &&                                                                                     //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,{&&}                                                                                                               t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: store tmp%6#0 to l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%6#0                                                                                                            t1 == t2                                                                                             named_tuples/contract.py:19
                                                                                           // virtual: load tmp%6#0 from l-stack (no copy)                  (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0,tmp%6#0                                                                                                            assert t1 == t2                                                                                      named_tuples/contract.py:19
    assert                                                                                 //                                                               (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0                                                                                                                    assert t1 == t2                                                                                      named_tuples/contract.py:19
                                                                                           // virtual: load t1.a#0 from l-stack (no copy)                   (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.b#0,t1.a#0                                                                                                                    return t1                                                                                            named_tuples/contract.py:20
    uncover 1                                                                              // load t1.b#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.c#0,t1.a#0,t1.b#0                                                                                                                    return t1                                                                                            named_tuples/contract.py:20
    uncover 2                                                                              // load t1.c#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.d#0,t1.a#0,t1.b#0,t1.c#0                                                                                                                    return t1                                                                                            named_tuples/contract.py:20
    uncover 3                                                                              // load t1.d#0 from l-stack (no copy)                            (𝕡) a#0,b#0,c#0,d#0 | t1.a#0,t1.b#0,t1.c#0,t1.d#0                                                                                                                    return t1                                                                                            named_tuples/contract.py:20
    retsub                                                                                 //                                                               t1.a#0,t1.b#0,t1.c#0,t1.d#0                                                                                                                                          return t1                                                                                            named_tuples/contract.py:20


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_name:
    proto 4 4                                                                              //                                                               (𝕡) a#0,b#0,c#0,d#0 |                                                                                                                                                @subroutine\ndef build_tuple_by_name(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> TestTuple: named_tuples/contract.py:22-23

build_tuple_by_name_block@0:
    frame_dig -4                                                                           // load a#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy)                                                                                                                                     return TestTuple(a=a, b=b, c=c, d=d)                                                                 named_tuples/contract.py:24
    frame_dig -3                                                                           // load b#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy)                                                                                                                          return TestTuple(a=a, b=b, c=c, d=d)                                                                 named_tuples/contract.py:24
    frame_dig -2                                                                           // load c#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy)                                                                                                               return TestTuple(a=a, b=b, c=c, d=d)                                                                 named_tuples/contract.py:24
    frame_dig -1                                                                           // load d#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                                                    return TestTuple(a=a, b=b, c=c, d=d)                                                                 named_tuples/contract.py:24
    retsub                                                                                 //                                                               a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                                                                          return TestTuple(a=a, b=b, c=c, d=d)                                                                 named_tuples/contract.py:24


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position(a: uint64, b: bytes, c: bytes, d: bytes) -> uint64, bytes, bytes, bytes:
build_tuple_by_position:
    proto 4 4                                                                              //                                                               (𝕡) a#0,b#0,c#0,d#0 |                                                                                                                                                @subroutine\ndef build_tuple_by_position(self, a: UInt64, b: BigUInt, c: String, d: Bytes) -> Tes... named_tuples/contract.py:26-27

build_tuple_by_position_block@0:
    frame_dig -4                                                                           // load a#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy)                                                                                                                                     return TestTuple(a, b, c, d)                                                                         named_tuples/contract.py:28
    frame_dig -3                                                                           // load b#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy)                                                                                                                          return TestTuple(a, b, c, d)                                                                         named_tuples/contract.py:28
    frame_dig -2                                                                           // load c#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy)                                                                                                               return TestTuple(a, b, c, d)                                                                         named_tuples/contract.py:28
    frame_dig -1                                                                           // load d#0 from parameters                                      (𝕡) a#0,b#0,c#0,d#0 | a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                                                    return TestTuple(a, b, c, d)                                                                         named_tuples/contract.py:28
    retsub                                                                                 //                                                               a#0 (copy),b#0 (copy),c#0 (copy),d#0 (copy)                                                                                                                          return TestTuple(a, b, c, d)                                                                         named_tuples/contract.py:28


// test_cases.named_tuples.contract.NamedTuplesContract.test_tuple(value.a: uint64, value.b: bytes, value.c: bytes, value.d: bytes) -> void:
test_tuple:
    proto 4 0                                                                              //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 |                                                                                                                        @arc4.abimethod()\ndef test_tuple(self, value: TestTuple) -> None:                                   named_tuples/contract.py:30-31

test_tuple_block@0:
    frame_dig -4                                                                           // load value.a#0 from parameters                                (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.a#0 (copy)                                                                                                       value.a < 1000                                                                                       named_tuples/contract.py:32
    int 1000                                                                               //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.a#0 (copy),1000                                                                                                  1000                                                                                                 named_tuples/contract.py:32
    <                                                                                      //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {<}                                                                                                                    value.a < 1000                                                                                       named_tuples/contract.py:32
                                                                                           // virtual: store tmp%0#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%0#0                                                                                                                value.a < 1000                                                                                       named_tuples/contract.py:32
                                                                                           // virtual: load tmp%0#0 from l-stack (no copy)                  (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%0#0                                                                                                                assert value.a < 1000                                                                                named_tuples/contract.py:32
    assert                                                                                 //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 |                                                                                                                        assert value.a < 1000                                                                                named_tuples/contract.py:32
    frame_dig -3                                                                           // load value.b#0 from parameters                                (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.b#0 (copy)                                                                                                       value.b < 2**65                                                                                      named_tuples/contract.py:33
    byte 0x020000000000000000                                                              //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.b#0 (copy),0x020000000000000000                                                                                  2**65                                                                                                named_tuples/contract.py:33
    b<                                                                                     //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {b<}                                                                                                                   value.b < 2**65                                                                                      named_tuples/contract.py:33
                                                                                           // virtual: store tmp%1#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%1#0                                                                                                                value.b < 2**65                                                                                      named_tuples/contract.py:33
                                                                                           // virtual: load tmp%1#0 from l-stack (no copy)                  (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%1#0                                                                                                                assert value.b < 2**65                                                                               named_tuples/contract.py:33
    assert                                                                                 //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 |                                                                                                                        assert value.b < 2**65                                                                               named_tuples/contract.py:33
    frame_dig -2                                                                           // load value.c#0 from parameters                                (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.c#0 (copy)                                                                                                       value.c.bytes.length                                                                                 named_tuples/contract.py:34
    len                                                                                    //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {len}                                                                                                                  value.c.bytes.length                                                                                 named_tuples/contract.py:34
                                                                                           // virtual: store tmp%2#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%2#0                                                                                                                value.c.bytes.length                                                                                 named_tuples/contract.py:34
                                                                                           // virtual: load tmp%2#0 from l-stack (no copy)                  (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%2#0                                                                                                                value.c.bytes.length > 1                                                                             named_tuples/contract.py:34
    int 1                                                                                  //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%2#0,1                                                                                                              1                                                                                                    named_tuples/contract.py:34
    >                                                                                      //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {>}                                                                                                                    value.c.bytes.length > 1                                                                             named_tuples/contract.py:34
                                                                                           // virtual: store tmp%3#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%3#0                                                                                                                value.c.bytes.length > 1                                                                             named_tuples/contract.py:34
                                                                                           // virtual: load tmp%3#0 from l-stack (no copy)                  (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%3#0                                                                                                                assert value.c.bytes.length > 1                                                                      named_tuples/contract.py:34
    assert                                                                                 //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 |                                                                                                                        assert value.c.bytes.length > 1                                                                      named_tuples/contract.py:34
    txn Sender                                                                             //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {txn}                                                                                                                  Txn.sender                                                                                           named_tuples/contract.py:35
                                                                                           // virtual: store tmp%4#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%4#0                                                                                                                Txn.sender                                                                                           named_tuples/contract.py:35
    frame_dig -1                                                                           // load value.d#0 from parameters                                (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%4#0,value.d#0 (copy)                                                                                               value.d == Txn.sender.bytes                                                                          named_tuples/contract.py:35
    uncover 1                                                                              // load tmp%4#0 from l-stack (no copy)                           (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | value.d#0 (copy),tmp%4#0                                                                                               value.d == Txn.sender.bytes                                                                          named_tuples/contract.py:35
    ==                                                                                     //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | {==}                                                                                                                   value.d == Txn.sender.bytes                                                                          named_tuples/contract.py:35
                                                                                           // virtual: store tmp%5#0 to l-stack (no copy)                   (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%5#0                                                                                                                value.d == Txn.sender.bytes                                                                          named_tuples/contract.py:35
                                                                                           // virtual: load tmp%5#0 from l-stack (no copy)                  (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 | tmp%5#0                                                                                                                assert value.d == Txn.sender.bytes                                                                   named_tuples/contract.py:35
    assert                                                                                 //                                                               (𝕡) value.a#0,value.b#0,value.c#0,value.d#0 |                                                                                                                        assert value.d == Txn.sender.bytes                                                                   named_tuples/contract.py:35
    retsub                                                                                 //

