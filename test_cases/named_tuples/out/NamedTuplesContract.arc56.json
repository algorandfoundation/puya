{
    "name": "NamedTuplesContract",
    "structs": {
        "TestTuple": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint512"
            },
            {
                "name": "c",
                "type": "string"
            },
            {
                "name": "d",
                "type": "byte[]"
            }
        ],
        "UIntTestTuple": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "build_tuple",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint512",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                }
            ],
            "returns": {
                "type": "(uint64,uint512,string,byte[])",
                "struct": "TestTuple"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "build_tuple_side_effects",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "UIntTestTuple"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple",
            "args": [
                {
                    "type": "(uint64,uint512,string,byte[])",
                    "struct": "TestTuple",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        15
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        82,
                        98,
                        249,
                        271
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        89,
                        105
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        76
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint512"
                },
                {
                    "pc": [
                        66
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "invalid number of bytes for test_cases.named_tuples.contract.TestTuple"
                },
                {
                    "pc": [
                        234
                    ],
                    "errorMessage": "invalid tail pointer at index 2 of (uint64,uint512,(len+utf8[]),(len+uint8[]))"
                },
                {
                    "pc": [
                        258
                    ],
                    "errorMessage": "invalid tail pointer at index 3 of (uint64,uint512,(len+utf8[]),(len+uint8[]))"
                },
                {
                    "pc": [
                        229
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        116
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDAgMiA2NAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBjbGFzcyBOYW1lZFR1cGxlc0NvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEwCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDQ1NmVlYWNlIDB4MDY5MzFmNzcgMHg2ZjlmNWJmMCAvLyBtZXRob2QgImJ1aWxkX3R1cGxlKHVpbnQ2NCx1aW50NTEyLHN0cmluZyxieXRlW10pKHVpbnQ2NCx1aW50NTEyLHN0cmluZyxieXRlW10pIiwgbWV0aG9kICJidWlsZF90dXBsZV9zaWRlX2VmZmVjdHMoKSh1aW50NjQsdWludDY0LHVpbnQ2NCkiLCBtZXRob2QgInRlc3RfdHVwbGUoKHVpbnQ2NCx1aW50NTEyLHN0cmluZyxieXRlW10pKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBidWlsZF90dXBsZSBidWlsZF90dXBsZV9zaWRlX2VmZmVjdHMgdGVzdF90dXBsZQogICAgZXJyCgptYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEwOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgICYmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyB0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmJ1aWxkX3R1cGxlW3JvdXRpbmddKCkgLT4gdm9pZDoKYnVpbGRfdHVwbGU6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQudWludDY0CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBkdXAKICAgIGxlbgogICAgZHVwCiAgICBpbnRjXzMgLy8gNjQKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQudWludDUxMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZHVwCiAgICBpbnRjXzEgLy8gMAogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgYXJyYXkgbGVuZ3RoIGhlYWRlcgogICAgaW50Y18yIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQuZHluYW1pY19hcnJheTxhcmM0LnVpbnQ4PgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2IC8vIG9uIGVycm9yOiBpbnZhbGlkIGFycmF5IGxlbmd0aCBoZWFkZXIKICAgIGludGNfMiAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciBhcmM0LmR5bmFtaWNfYXJyYXk8YXJjNC51aW50OD4KICAgIGV4dHJhY3QgMiAwCiAgICB1bmNvdmVyIDQKICAgIGl0b2IKICAgIHVuY292ZXIgMwogICAgaW50Y18zIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzMgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDQKICAgIGJ8CiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgcHVzaGJ5dGVzIDB4MDA0YwogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICBwdXNoaW50IDc2IC8vIDc2CiAgICArCiAgICBkaWcgMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC5idWlsZF90dXBsZV9zaWRlX2VmZmVjdHNbcm91dGluZ10oKSAtPiB2b2lkOgpidWlsZF90dXBsZV9zaWRlX2VmZmVjdHM6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzkKICAgIC8vIHJldHVybiBVSW50VGVzdFR1cGxlKGM9ZWNobyhVSW50NjQoMSkpLCBhPWVjaG8oVUludDY0KDIpKSwgYj1lY2hvKFVJbnQ2NCgzKSkpCiAgICBpbnRjXzAgLy8gMQogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBsb2codmFsdWUpCiAgICBpdG9iCiAgICBsb2cKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozOQogICAgLy8gcmV0dXJuIFVJbnRUZXN0VHVwbGUoYz1lY2hvKFVJbnQ2NCgxKSksIGE9ZWNobyhVSW50NjQoMikpLCBiPWVjaG8oVUludDY0KDMpKSkKICAgIGludGNfMiAvLyAyCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6NTEKICAgIC8vIGxvZyh2YWx1ZSkKICAgIGl0b2IKICAgIGxvZwogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjM5CiAgICAvLyByZXR1cm4gVUludFRlc3RUdXBsZShjPWVjaG8oVUludDY0KDEpKSwgYT1lY2hvKFVJbnQ2NCgyKSksIGI9ZWNobyhVSW50NjQoMykpKQogICAgcHVzaGludCAzIC8vIDMKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo1MQogICAgLy8gbG9nKHZhbHVlKQogICAgaXRvYgogICAgbG9nCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC50ZXN0X3R1cGxlW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdF90dXBsZToKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgcHVzaGludCA3MiAvLyA3MgogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgdHVwbGUgZW5jb2RpbmcKICAgIGR1cAogICAgcHVzaGludCA3NiAvLyA3NgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHRhaWwgcG9pbnRlciBhdCBpbmRleCAyIG9mICh1aW50NjQsdWludDUxMiwobGVuK3V0ZjhbXSksKGxlbit1aW50OFtdKSkKICAgIGRpZyAxCiAgICBwdXNoaW50IDc0IC8vIDc0CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgaW50Y18xIC8vIDAKICAgIGV4dHJhY3RfdWludDE2IC8vIG9uIGVycm9yOiBpbnZhbGlkIGFycmF5IGxlbmd0aCBoZWFkZXIKICAgIHB1c2hpbnQgNzggLy8gNzgKICAgICsKICAgIGRpZyAyCiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIHRhaWwgcG9pbnRlciBhdCBpbmRleCAzIG9mICh1aW50NjQsdWludDUxMiwobGVuK3V0ZjhbXSksKGxlbit1aW50OFtdKSkKICAgIGRpZyAzCiAgICBsZW4KICAgIGRpZyA0CiAgICB1bmNvdmVyIDQKICAgIGRpZyAyCiAgICBzdWJzdHJpbmczCiAgICBkdXAKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNiAvLyBvbiBlcnJvcjogaW52YWxpZCBhcnJheSBsZW5ndGggaGVhZGVyCiAgICBpbnRjXzIgLy8gMgogICAgKwogICAgdW5jb3ZlciAzCiAgICArCiAgICB1bmNvdmVyIDIKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIHRlc3RfY2FzZXMubmFtZWRfdHVwbGVzLmNvbnRyYWN0LlRlc3RUdXBsZQogICAgZGlnIDIKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgdW5jb3ZlciAzCiAgICBleHRyYWN0IDggNjQKICAgIHVuY292ZXIgMwogICAgZXh0cmFjdCAyIDAKICAgIHVuY292ZXIgMwogICAgZXh0cmFjdCAyIDAKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0MwogICAgLy8gYXNzZXJ0IHZhbHVlLmEgPCAxMDAwCiAgICB1bmNvdmVyIDMKICAgIHB1c2hpbnQgMTAwMCAvLyAxMDAwCiAgICA8CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0NAogICAgLy8gYXNzZXJ0IHZhbHVlLmIgPCAyKio2NQogICAgdW5jb3ZlciAyCiAgICBwdXNoYnl0ZXMgMHgwMjAwMDAwMDAwMDAwMDAwMDAKICAgIGI8CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0NQogICAgLy8gYXNzZXJ0IHZhbHVlLmMuYnl0ZXMubGVuZ3RoID4gMQogICAgc3dhcAogICAgbGVuCiAgICBpbnRjXzAgLy8gMQogICAgPgogICAgYXNzZXJ0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6NDYKICAgIC8vIGFzc2VydCB2YWx1ZS5kID09IFR4bi5zZW5kZXIuYnl0ZXMKICAgIHR4biBTZW5kZXIKICAgID09CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6NDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICByZXR1cm4K",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAQACQDEbQQAkMRkURDEYRIIDBEVu6s4EBpMfdwRvn1vwNhoAjgMACwCFALAAMRkUMRgUEEQiQzYaAUkVgQgSRBc2GgJJFUklEkQ2GgNJI1kkCEsBFRJEVwIANhoESSNZJAhLARUSRFcCAE8EFk8DJQ5EJa9PBKtQSwIVFlcGAk8DUEyAAgBMUEsBFYFMCEsDFRZXBgJPBFBMFlcGAk8CTFBPAlBMUIAEFR98dUxQsCJDIhawJBawgQMWsIAcFR98dQAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAbAiQzYaAUmBSFlJgUwSREsBgUpZSwJPAksCUkkjWYFOCEsCSwESREsDFUsETwRLAlJJI1kkCE8DCE8CEkRLAiNbTwNXCEBPA1cCAE8DVwIATwOB6AcMRE8CgAkCAAAAAAAAAACkREwVIg1EMQASQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}