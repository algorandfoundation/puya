{
    "name": "NamedTuplesContract",
    "structs": {
        "TestTuple": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint512"
            },
            {
                "name": "c",
                "type": "string"
            },
            {
                "name": "d",
                "type": "byte[]"
            }
        ],
        "UIntTestTuple": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "c",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "build_tuple",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "uint512",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                }
            ],
            "returns": {
                "type": "(uint64,uint512,string,byte[])",
                "struct": "TestTuple"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "build_tuple_side_effects",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "UIntTestTuple"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple",
            "args": [
                {
                    "type": "(uint64,uint512,string,byte[])",
                    "struct": "TestTuple",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        13
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        53
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        81
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDY0CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjEKICAgIC8vIGNsYXNzIE5hbWVkVHVwbGVzQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMTAKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4NDU2ZWVhY2UgMHgwNjkzMWY3NyAweDZmOWY1YmYwIC8vIG1ldGhvZCAiYnVpbGRfdHVwbGUodWludDY0LHVpbnQ1MTIsc3RyaW5nLGJ5dGVbXSkodWludDY0LHVpbnQ1MTIsc3RyaW5nLGJ5dGVbXSkiLCBtZXRob2QgImJ1aWxkX3R1cGxlX3NpZGVfZWZmZWN0cygpKHVpbnQ2NCx1aW50NjQsdWludDY0KSIsIG1ldGhvZCAidGVzdF90dXBsZSgodWludDY0LHVpbnQ1MTIsc3RyaW5nLGJ5dGVbXSkpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIGJ1aWxkX3R1cGxlIGJ1aWxkX3R1cGxlX3NpZGVfZWZmZWN0cyB0ZXN0X3R1cGxlCiAgICBlcnIKCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMTA6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyB0ZXN0X2Nhc2VzLm5hbWVkX3R1cGxlcy5jb250cmFjdC5OYW1lZFR1cGxlc0NvbnRyYWN0LmJ1aWxkX3R1cGxlW3JvdXRpbmddKCkgLT4gdm9pZDoKYnVpbGRfdHVwbGU6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgZXh0cmFjdCAyIDAKICAgIHVuY292ZXIgMwogICAgaXRvYgogICAgZGlnIDMKICAgIGxlbgogICAgaW50Y18xIC8vIDY0CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnRjXzEgLy8gNjQKICAgIGJ6ZXJvCiAgICB1bmNvdmVyIDQKICAgIGJ8CiAgICBjb25jYXQKICAgIGRpZyAyCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgc3dhcAogICAgcHVzaGJ5dGVzIDB4MDA0YwogICAgY29uY2F0CiAgICBkaWcgMQogICAgbGVuCiAgICBwdXNoaW50IDc2IC8vIDc2CiAgICArCiAgICBkaWcgMwogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC5idWlsZF90dXBsZV9zaWRlX2VmZmVjdHNbcm91dGluZ10oKSAtPiB2b2lkOgpidWlsZF90dXBsZV9zaWRlX2VmZmVjdHM6CiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzkKICAgIC8vIHJldHVybiBVSW50VGVzdFR1cGxlKGM9ZWNobyhVSW50NjQoMSkpLCBhPWVjaG8oVUludDY0KDIpKSwgYj1lY2hvKFVJbnQ2NCgzKSkpCiAgICBpbnRjXzAgLy8gMQogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBsb2codmFsdWUpCiAgICBpdG9iCiAgICBsb2cKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTozOQogICAgLy8gcmV0dXJuIFVJbnRUZXN0VHVwbGUoYz1lY2hvKFVJbnQ2NCgxKSksIGE9ZWNobyhVSW50NjQoMikpLCBiPWVjaG8oVUludDY0KDMpKSkKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6NTEKICAgIC8vIGxvZyh2YWx1ZSkKICAgIGl0b2IKICAgIGxvZwogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjM5CiAgICAvLyByZXR1cm4gVUludFRlc3RUdXBsZShjPWVjaG8oVUludDY0KDEpKSwgYT1lY2hvKFVJbnQ2NCgyKSksIGI9ZWNobyhVSW50NjQoMykpKQogICAgcHVzaGludCAzIC8vIDMKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo1MQogICAgLy8gbG9nKHZhbHVlKQogICAgaXRvYgogICAgbG9nCiAgICAvLyBuYW1lZF90dXBsZXMvY29udHJhY3QucHk6MzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NTAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gdGVzdF9jYXNlcy5uYW1lZF90dXBsZXMuY29udHJhY3QuTmFtZWRUdXBsZXNDb250cmFjdC50ZXN0X3R1cGxlW3JvdXRpbmddKCkgLT4gdm9pZDoKdGVzdF90dXBsZToKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGR1cAogICAgcHVzaGludCAwIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgZXh0cmFjdCA4IDY0CiAgICBkaWcgMgogICAgcHVzaGludCA3MiAvLyA3MgogICAgZXh0cmFjdF91aW50MTYKICAgIGRpZyAzCiAgICBwdXNoaW50IDc0IC8vIDc0CiAgICBleHRyYWN0X3VpbnQxNgogICAgZGlnIDQKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGV4dHJhY3QgMiAwCiAgICBkaWcgNAogICAgbGVuCiAgICB1bmNvdmVyIDUKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBleHRyYWN0IDIgMAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjQzCiAgICAvLyBhc3NlcnQgdmFsdWUuYSA8IDEwMDAKICAgIHVuY292ZXIgMwogICAgcHVzaGludCAxMDAwIC8vIDEwMDAKICAgIDwKICAgIGFzc2VydAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBhc3NlcnQgdmFsdWUuYiA8IDIqKjY1CiAgICB1bmNvdmVyIDIKICAgIHB1c2hieXRlcyAweDAyMDAwMDAwMDAwMDAwMDAwMAogICAgYjwKICAgIGFzc2VydAogICAgLy8gbmFtZWRfdHVwbGVzL2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBhc3NlcnQgdmFsdWUuYy5ieXRlcy5sZW5ndGggPiAxCiAgICBzd2FwCiAgICBsZW4KICAgIGludGNfMCAvLyAxCiAgICA+CiAgICBhc3NlcnQKICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0NgogICAgLy8gYXNzZXJ0IHZhbHVlLmQgPT0gVHhuLnNlbmRlci5ieXRlcwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIC8vIG5hbWVkX3R1cGxlcy9jb250cmFjdC5weTo0MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHJldHVybgo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyACAUAxG0EAJDEZFEQxGESCAwRFburOBAaTH3cEb59b8DYaAI4DAAkAZACQADEZFDEYFBBDNhoBFzYaAjYaA1cCADYaBFcCAE8DFksDFSMORCOvTwSrUEsCFRZXBgJPA1BMgAIATFBLARWBTAhLAxUWVwYCTwRQTBZXBgJPAkxQTwJQTFCABBUffHVMULAiQyIWsIECFrCBAxawgBwVH3x1AAAAAAAAAAIAAAAAAAAAAwAAAAAAAAABsCJDNhoBSYEAW0sBVwhASwKBSFlLA4FKWUsETwJLAlJXAgBLBBVPBU8DTwJSVwIATwOB6AcMRE8CgAkCAAAAAAAAAACkREwVIg1EMQASQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}