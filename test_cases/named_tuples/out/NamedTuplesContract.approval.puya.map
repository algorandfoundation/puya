{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AAoBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB+B;AAY5B;AAAJ;AAZmD;AAY/C;AAAJ;AAZsE;;AAYlE;AAAJ;AAdC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAEU;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;AAAA;AAAuB;AAAvB;AAAP;AACkB;;AAAX;AALV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 0 2"
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "12": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "14": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "15": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "18": {
      "op": "assert",
      "stack_out": []
    },
    "19": {
      "op": "pushbytess 0x456eeace 0x06931f77 0x6f9f5bf0 // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\", method \"build_tuple_side_effects()(uint64,uint64,uint64)\", method \"test_tuple((uint64,uint512,string,byte[]))void\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ],
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ]
    },
    "36": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(build_tuple_side_effects()(uint64,uint64,uint64))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%6#0"
      ]
    },
    "39": {
      "op": "match build_tuple build_tuple_side_effects test_tuple",
      "stack_out": []
    },
    "47": {
      "op": "err"
    },
    "48": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "50": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "54": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "55": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "56": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "params": {},
      "block": "build_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "60": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "61": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "64": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "65": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "66": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "69": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "70": {
      "op": "len",
      "defined_out": [
        "a#0",
        "b#0",
        "len%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0"
      ]
    },
    "71": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "len%1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "len%1#0 (copy)"
      ]
    },
    "72": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "a#0",
        "b#0",
        "len%1#0",
        "len%1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "len%1#0 (copy)",
        "64"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "eq%1#0",
        "len%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "eq%1#0"
      ]
    },
    "74": {
      "error": "invalid number of bytes for uint512",
      "op": "assert // invalid number of bytes for uint512",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0"
      ]
    },
    "75": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ]
    },
    "78": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "79": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "80": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%array_length%0#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "aggregate%array_length%0#0"
      ]
    },
    "81": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "a#0",
        "aggregate%array_length%0#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "82": {
      "op": "+",
      "defined_out": [
        "a#0",
        "add%0#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "add%0#0"
      ]
    },
    "83": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "add%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "85": {
      "op": "len",
      "defined_out": [
        "a#0",
        "add%0#0",
        "b#0",
        "len%1#0",
        "len%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "add%0#0",
        "len%2#0"
      ]
    },
    "86": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "eq%2#0",
        "len%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "87": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "tmp%4#0"
      ]
    },
    "88": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0"
      ]
    },
    "91": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0"
      ]
    },
    "94": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "len%1#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "95": {
      "op": "intc_2 // 0",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "tmp%6#0 (copy)",
        "0"
      ]
    },
    "96": {
      "op": "extract_uint16",
      "defined_out": [
        "a#0",
        "aggregate%array_length%1#0",
        "b#0",
        "c#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "aggregate%array_length%1#0"
      ]
    },
    "97": {
      "op": "intc_3 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "98": {
      "op": "+",
      "defined_out": [
        "a#0",
        "add%1#0",
        "b#0",
        "c#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "add%1#0"
      ]
    },
    "99": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "add%1#0",
        "tmp%6#0 (copy)"
      ]
    },
    "101": {
      "op": "len",
      "defined_out": [
        "a#0",
        "add%1#0",
        "b#0",
        "c#0",
        "len%1#0",
        "len%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "add%1#0",
        "len%3#0"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "eq%3#0",
        "len%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "103": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "tmp%6#0"
      ]
    },
    "104": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0",
        "len%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "len%1#0",
        "c#0",
        "d#0"
      ]
    },
    "107": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "len%1#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "109": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0",
        "len%1#0"
      ],
      "stack_out": [
        "b#0",
        "len%1#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "110": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "len%1#0"
      ]
    },
    "112": {
      "op": "intc_1 // 64",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "len%1#0",
        "64"
      ]
    },
    "113": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "114": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "115": {
      "op": "intc_1 // 64",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "64"
      ]
    },
    "116": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bzero%0#0"
      ]
    },
    "117": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bzero%0#0",
        "b#0"
      ]
    },
    "119": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%val_as_bytes%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0"
      ]
    },
    "121": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%head%1#0",
        "c#0",
        "c#0 (copy)",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "c#0 (copy)"
      ]
    },
    "123": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "124": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "125": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "128": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "c#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "132": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "0x004c"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "137": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "139": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0"
      ]
    },
    "140": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "142": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "143": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "d#0 (copy)"
      ]
    },
    "145": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "146": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "147": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "150": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "d#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "154": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "155": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "158": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "161": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ]
    },
    "162": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "164": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "167": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "173": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "175": {
      "op": "log",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]",
      "params": {},
      "block": "build_tuple_side_effects",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "179": {
      "op": "itob",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "180": {
      "op": "log",
      "stack_out": []
    },
    "181": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "182": {
      "op": "itob",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "183": {
      "op": "log",
      "stack_out": []
    },
    "184": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "186": {
      "op": "itob",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "187": {
      "op": "log",
      "stack_out": []
    },
    "188": {
      "op": "pushbytes 0x151f7c75000000000000000200000000000000030000000000000001",
      "defined_out": [
        "0x151f7c75000000000000000200000000000000030000000000000001"
      ],
      "stack_out": [
        "0x151f7c75000000000000000200000000000000030000000000000001"
      ]
    },
    "218": {
      "op": "log",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "params": {},
      "block": "test_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "225": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "226": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "value.a#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0"
      ]
    },
    "227": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "tmp%0#0 (copy)"
      ]
    },
    "229": {
      "op": "extract 8 64",
      "defined_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0"
      ]
    },
    "232": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "tmp%0#0 (copy)"
      ]
    },
    "234": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "tmp%0#0 (copy)",
        "72"
      ]
    },
    "236": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "237": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "239": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "tmp%0#0 (copy)",
        "74"
      ]
    },
    "241": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "242": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)"
      ]
    },
    "244": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "246": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "tmp%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "248": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "tmp%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "249": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0"
      ]
    },
    "252": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "tmp%0#0 (copy)"
      ]
    },
    "254": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "aggregate%len%0#0"
      ]
    },
    "255": {
      "op": "uncover 5",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "aggregate%len%0#0",
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "uncover 3",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "aggregate%len%0#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "tmp%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "261": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "aggregate%substring3%1#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ]
    },
    "265": {
      "op": "uncover 3",
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "value.a#0"
      ]
    },
    "267": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "value.a#0",
        "1000"
      ]
    },
    "270": {
      "op": "<",
      "defined_out": [
        "tmp%0#1",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "tmp%0#1"
      ]
    },
    "271": {
      "op": "assert",
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ]
    },
    "272": {
      "op": "uncover 2",
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "value.b#0"
      ]
    },
    "274": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "value.b#0",
        "0x020000000000000000"
      ]
    },
    "285": {
      "op": "b<",
      "defined_out": [
        "tmp%1#1",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "tmp%1#1"
      ]
    },
    "286": {
      "op": "assert",
      "stack_out": [
        "value.c#0",
        "value.d#0"
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "value.d#0",
        "value.c#0"
      ]
    },
    "288": {
      "op": "len",
      "defined_out": [
        "tmp%2#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%2#1"
      ]
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%2#1",
        "1"
      ]
    },
    "290": {
      "op": ">",
      "defined_out": [
        "tmp%3#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%3#1"
      ]
    },
    "291": {
      "op": "assert",
      "stack_out": [
        "value.d#0"
      ]
    },
    "292": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%4#1"
      ]
    },
    "294": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "295": {
      "op": "return",
      "stack_out": []
    }
  }
}