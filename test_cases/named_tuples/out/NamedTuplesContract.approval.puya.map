{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;AAcA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;;;;;;;AACK;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAEU;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;AAAA;AAAuB;AAAvB;AAAP;AACkB;;AAAX;AAAP;AALH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "10": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "12": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "13": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "14": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "16": {
      "op": "assert",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0x456eeace 0x6f9f5bf0 // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\", method \"test_tuple((uint64,uint512,string,byte[]))void\"",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ],
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)"
      ]
    },
    "29": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "Method(build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[]))",
        "Method(test_tuple((uint64,uint512,string,byte[]))void)",
        "tmp%7#0"
      ]
    },
    "32": {
      "op": "match build_tuple test_tuple",
      "stack_out": []
    },
    "38": {
      "op": "err"
    },
    "39": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "not%tmp%9#0"
      ],
      "stack_out": [
        "not%tmp%9#0"
      ]
    },
    "42": {
      "op": "assert",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "46": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "47": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "48": {
      "op": "return",
      "stack_out": []
    },
    "49": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]",
      "params": {},
      "block": "build_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "52": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "53": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "59": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "62": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "65": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "68": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "70": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "71": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "b#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "b#0 (copy)"
      ]
    },
    "73": {
      "op": "len",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%value_len%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%value_len%0#0"
      ]
    },
    "74": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%val_as_bytes%0#0",
        "aggregate%value_len%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "75": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "76": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "77": {
      "op": "intc_1 // 64",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "64"
      ]
    },
    "78": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bzero%0#0"
      ]
    },
    "79": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bzero%0#0",
        "b#0"
      ]
    },
    "81": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0",
        "aggregate%val_as_bytes%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0"
      ]
    },
    "83": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%head%1#0",
        "c#0",
        "c#0 (copy)",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "c#0 (copy)"
      ]
    },
    "85": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length%0#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "87": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "90": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "c#0"
      ]
    },
    "92": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "94": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "0x004c"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "99": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "101": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0"
      ]
    },
    "102": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%data_length%0#0",
        "76"
      ]
    },
    "104": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "105": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0",
        "d#0 (copy)"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "d#0 (copy)"
      ]
    },
    "107": {
      "op": "len",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length%1#0"
      ]
    },
    "108": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "109": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%length_uint16%1#0",
        "d#0"
      ],
      "stack_out": [
        "d#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "112": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%length_uint16%1#0",
        "d#0"
      ]
    },
    "114": {
      "op": "concat",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "116": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "117": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "120": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%2#0"
      ]
    },
    "122": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%2#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0"
      ]
    },
    "124": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "126": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%concat%0#0"
      ]
    },
    "127": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "129": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]",
      "params": {},
      "block": "test_tuple",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "143": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "144": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "0"
      ]
    },
    "146": {
      "op": "extract_uint64",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0"
      ]
    },
    "147": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "149": {
      "op": "extract 8 64",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0"
      ]
    },
    "152": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "154": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "72"
      ]
    },
    "156": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "157": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "159": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "74"
      ]
    },
    "161": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "162": {
      "op": "dig 4",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "164": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "166": {
      "op": "dig 2",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%extract_uint16%1#0 (copy)",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0 (copy)"
      ]
    },
    "168": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%substring3%0#0"
      ]
    },
    "169": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0"
      ]
    },
    "172": {
      "op": "dig 4",
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 (copy)"
      ]
    },
    "174": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "aggregate%len%0#0"
      ]
    },
    "175": {
      "op": "uncover 5",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "aggregate%extract_uint16%1#0",
        "value.c#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0"
      ]
    },
    "177": {
      "op": "uncover 3",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "aggregate%len%0#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "179": {
      "op": "uncover 2",
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%0#0"
      ]
    },
    "181": {
      "op": "substring3",
      "defined_out": [
        "aggregate%substring3%1#0",
        "value.a#0",
        "value.b#0",
        "value.c#0"
      ],
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "aggregate%substring3%1#0"
      ]
    },
    "182": {
      "op": "extract 2 0",
      "defined_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ]
    },
    "185": {
      "op": "uncover 3",
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "value.a#0"
      ]
    },
    "187": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "value.a#0",
        "1000"
      ]
    },
    "190": {
      "op": "<",
      "defined_out": [
        "tmp%0#1",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0",
        "tmp%0#1"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": [
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ]
    },
    "192": {
      "op": "uncover 2",
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "value.b#0"
      ]
    },
    "194": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "value.b#0",
        "0x020000000000000000"
      ]
    },
    "205": {
      "op": "b<",
      "defined_out": [
        "tmp%1#1",
        "value.c#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.c#0",
        "value.d#0",
        "tmp%1#1"
      ]
    },
    "206": {
      "op": "assert",
      "stack_out": [
        "value.c#0",
        "value.d#0"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "value.d#0",
        "value.c#0"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "tmp%2#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%2#1"
      ]
    },
    "209": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%2#1",
        "1"
      ]
    },
    "210": {
      "op": ">",
      "defined_out": [
        "tmp%3#1",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%3#1"
      ]
    },
    "211": {
      "op": "assert",
      "stack_out": [
        "value.d#0"
      ]
    },
    "212": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "value.d#0"
      ],
      "stack_out": [
        "value.d#0",
        "tmp%4#0"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "215": {
      "op": "assert",
      "stack_out": []
    },
    "216": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "217": {
      "op": "return",
      "stack_out": []
    }
  }
}