{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;AAcA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAgBK;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAgBK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;;AAgBA;;;AAEe;;AAAU;;;AAAV;AAAP;AACO;;AAAU;;;;;;;;;;;AAAV;AAAP;AACO;;AAAA;AAAuB;AAAvB;AAAP;AACO;;AAAW;;AAAX;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 64"
    },
    "6": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "8": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "11": {
      "op": "pushbytess 0x456eeace 0x6f9f5bf0 // method \"build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])\", method \"test_tuple((uint64,uint512,string,byte[]))void\""
    },
    "23": {
      "op": "txna ApplicationArgs 0"
    },
    "26": {
      "op": "match main_build_tuple_route@3 main_test_tuple_route@4"
    },
    "32": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "33": {
      "op": "return"
    },
    "34": {
      "block": "main_test_tuple_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "36": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "37": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "38": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "40": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "41": {
      "op": "txna ApplicationArgs 1"
    },
    "44": {
      "op": "dup"
    },
    "45": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%17#0 (copy)",
        "0"
      ]
    },
    "46": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0"
      ]
    },
    "47": {
      "op": "dig 1",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "49": {
      "error": "Index access is out of bounds",
      "op": "extract 8 64 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0"
      ]
    },
    "52": {
      "op": "dig 2",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "54": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "item0%0%0#0",
        "item1%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "tmp%17#0 (copy)",
        "72"
      ]
    },
    "56": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0"
      ]
    },
    "57": {
      "op": "dig 3",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "59": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "tmp%17#0 (copy)",
        "74"
      ]
    },
    "61": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "62": {
      "op": "dig 4",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "64": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "tmp%17#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "66": {
      "op": "dig 2",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "tmp%17#0",
        "tmp%17#0 (copy)"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "tmp%17#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "68": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0#0",
        "item_end_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item2%0#0"
      ]
    },
    "69": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item_end_offset%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item2%0%0#0"
      ]
    },
    "72": {
      "op": "dig 4",
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item2%0%0#0",
        "tmp%17#0 (copy)"
      ]
    },
    "74": {
      "op": "len",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item2%0%0#0",
        "item_end_offset%1#0"
      ]
    },
    "75": {
      "op": "uncover 5",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item_end_offset%0#0",
        "item2%0%0#0",
        "item_end_offset%1#0",
        "tmp%17#0"
      ]
    },
    "77": {
      "op": "uncover 3",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item_end_offset%1#0",
        "tmp%17#0",
        "item_end_offset%0#0"
      ]
    },
    "79": {
      "op": "uncover 2",
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "tmp%17#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "81": {
      "op": "substring3",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item3%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item3%0#0"
      ]
    },
    "82": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item3%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0#0",
        "item2%0%0#0",
        "item3%0%0#0"
      ]
    },
    "85": {
      "callsub": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "op": "callsub test_tuple",
      "stack_out": []
    },
    "88": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "return"
    },
    "90": {
      "block": "main_build_tuple_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "92": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "93": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "94": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "96": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "97": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "100": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "101": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "104": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%8#0"
      ]
    },
    "107": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "110": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%10#0"
      ]
    },
    "113": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0",
        "d#0"
      ]
    },
    "116": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "a#0"
      ]
    },
    "118": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ]
    },
    "119": {
      "op": "dig 3",
      "defined_out": [
        "b#0",
        "b#0 (copy)",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "b#0 (copy)"
      ]
    },
    "121": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "len_%0#0"
      ]
    },
    "122": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "b#0",
        "c#0",
        "d#0",
        "len_%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "len_%0#0",
        "64"
      ]
    },
    "123": {
      "op": "<=",
      "defined_out": [
        "b#0",
        "c#0",
        "d#0",
        "no_overflow%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "no_overflow%0#0"
      ]
    },
    "124": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ]
    },
    "125": {
      "op": "intc_2 // 64",
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "64"
      ]
    },
    "126": {
      "op": "bzero",
      "defined_out": [
        "b#0",
        "b_zeros%0#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0"
      ]
    },
    "127": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "b_zeros%0#0",
        "b#0"
      ]
    },
    "129": {
      "op": "b|",
      "defined_out": [
        "arc4_item%0#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0"
      ]
    },
    "130": {
      "op": "dig 3",
      "defined_out": [
        "arc4_item%0#0",
        "c#0",
        "c#0 (copy)",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "c#0 (copy)"
      ]
    },
    "132": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "c#0",
        "d#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "length%0#0"
      ]
    },
    "133": {
      "op": "itob",
      "defined_out": [
        "arc4_item%0#0",
        "as_bytes%0#0",
        "c#0",
        "d#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "as_bytes%0#0"
      ]
    },
    "134": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_item%0#0",
        "c#0",
        "d#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "length_uint16%0#0"
      ]
    },
    "137": {
      "op": "uncover 4",
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "length_uint16%0#0",
        "c#0"
      ]
    },
    "139": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "d#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0"
      ]
    },
    "140": {
      "op": "dig 3",
      "defined_out": [
        "arc4_item%0#0",
        "d#0",
        "d#0 (copy)",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "d#0 (copy)"
      ]
    },
    "142": {
      "op": "len",
      "defined_out": [
        "arc4_item%0#0",
        "d#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "143": {
      "op": "itob",
      "defined_out": [
        "arc4_item%0#0",
        "as_bytes%1#0",
        "d#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "144": {
      "op": "extract 6 2",
      "defined_out": [
        "arc4_item%0#0",
        "d#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "d#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "147": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "d#0"
      ]
    },
    "149": {
      "op": "concat",
      "defined_out": [
        "arc4_item%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "arc4_item%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "150": {
      "op": "uncover 3"
    },
    "152": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "arc4_item%0#0"
      ]
    },
    "154": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "155": {
      "op": "pushbytes 0x004c",
      "defined_out": [
        "0x004c",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%2#0",
        "0x004c"
      ]
    },
    "159": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "160": {
      "op": "dig 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "162": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "163": {
      "op": "pushint 76 // 76",
      "defined_out": [
        "76",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "76"
      ]
    },
    "165": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "166": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%3#0"
      ]
    },
    "167": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "170": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "171": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0"
      ]
    },
    "175": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "176": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "182": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "183": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "184": {
      "op": "log",
      "stack_out": []
    },
    "185": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "return"
    },
    "187": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "189": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID"
    },
    "194": {
      "op": "!"
    },
    "195": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "196": {
      "op": "intc_0 // 1"
    },
    "197": {
      "op": "return"
    },
    "198": {
      "subroutine": "test_cases.named_tuples.contract.NamedTuplesContract.test_tuple",
      "params": {
        "value.a#0": "uint64",
        "value.b#0": "bytes",
        "value.c#0": "bytes",
        "value.d#0": "bytes"
      },
      "block": "test_tuple",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "201": {
      "op": "frame_dig -4",
      "defined_out": [
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)"
      ]
    },
    "203": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "value.a#0 (copy)"
      ],
      "stack_out": [
        "value.a#0 (copy)",
        "1000"
      ]
    },
    "206": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "207": {
      "op": "assert",
      "stack_out": []
    },
    "208": {
      "op": "frame_dig -3",
      "defined_out": [
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)"
      ]
    },
    "210": {
      "op": "pushbytes 0x020000000000000000",
      "defined_out": [
        "0x020000000000000000",
        "value.b#0 (copy)"
      ],
      "stack_out": [
        "value.b#0 (copy)",
        "0x020000000000000000"
      ]
    },
    "221": {
      "op": "b<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "222": {
      "op": "assert",
      "stack_out": []
    },
    "223": {
      "op": "frame_dig -2",
      "defined_out": [
        "value.c#0 (copy)"
      ],
      "stack_out": [
        "value.c#0 (copy)"
      ]
    },
    "225": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "226": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "227": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "228": {
      "op": "assert",
      "stack_out": []
    },
    "229": {
      "op": "frame_dig -1"
    },
    "231": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "value.d#0 (copy)"
      ],
      "stack_out": [
        "value.d#0 (copy)",
        "tmp%4#0"
      ]
    },
    "233": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "234": {
      "op": "assert",
      "stack_out": []
    },
    "235": {
      "retsub": true,
      "op": "retsub"
    }
  }
}