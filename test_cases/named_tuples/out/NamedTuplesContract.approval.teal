#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 64
    // named_tuples/contract.py:21
    // class NamedTuplesContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x456eeace 0x06931f77 0x6f9f5bf0 // method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])", method "build_tuple_side_effects()(uint64,uint64,uint64)", method "test_tuple((uint64,uint512,string,byte[]))void"
    txna ApplicationArgs 0
    match build_tuple build_tuple_side_effects test_tuple
    err

main___algopy_default_create@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple[routing]() -> void:
build_tuple:
    // named_tuples/contract.py:22
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 8 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    dup
    intc_3 // 64
    ==
    assert // invalid number of bytes for arc4.uint512
    txna ApplicationArgs 3
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    txna ApplicationArgs 4
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
    extract 2 0
    uncover 4
    itob
    uncover 3
    intc_3 // 64
    <=
    assert // overflow
    intc_3 // 64
    bzero
    uncover 4
    b|
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    pushbytes 0x004c
    concat
    dig 1
    len
    pushint 76 // 76
    +
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_side_effects[routing]() -> void:
build_tuple_side_effects:
    // named_tuples/contract.py:39
    // return UIntTestTuple(c=echo(UInt64(1)), a=echo(UInt64(2)), b=echo(UInt64(3)))
    intc_0 // 1
    // named_tuples/contract.py:51
    // log(value)
    itob
    log
    // named_tuples/contract.py:39
    // return UIntTestTuple(c=echo(UInt64(1)), a=echo(UInt64(2)), b=echo(UInt64(3)))
    intc_2 // 2
    // named_tuples/contract.py:51
    // log(value)
    itob
    log
    // named_tuples/contract.py:39
    // return UIntTestTuple(c=echo(UInt64(1)), a=echo(UInt64(2)), b=echo(UInt64(3)))
    pushint 3 // 3
    // named_tuples/contract.py:51
    // log(value)
    itob
    log
    // named_tuples/contract.py:37
    // @arc4.abimethod()
    pushbytes 0x151f7c75000000000000000200000000000000030000000000000001
    log
    intc_0 // 1
    return


// test_cases.named_tuples.contract.NamedTuplesContract.test_tuple[routing]() -> void:
test_tuple:
    // named_tuples/contract.py:41
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    pushint 72 // 72
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 76 // 76
    ==
    assert // invalid tail pointer at index 2 of (uint64,uint512,(len+utf8[]),(len+uint8[]))
    dig 1
    pushint 74 // 74
    extract_uint16
    dig 2
    uncover 2
    dig 2
    substring3
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    pushint 78 // 78
    +
    dig 2
    dig 1
    ==
    assert // invalid tail pointer at index 3 of (uint64,uint512,(len+utf8[]),(len+uint8[]))
    dig 3
    len
    dig 4
    uncover 4
    dig 2
    substring3
    dup
    intc_1 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 2
    +
    uncover 3
    +
    uncover 2
    ==
    assert // invalid number of bytes for test_cases.named_tuples.contract.TestTuple
    dig 2
    intc_1 // 0
    extract_uint64
    uncover 3
    extract 8 64
    uncover 3
    extract 2 0
    uncover 3
    extract 2 0
    // named_tuples/contract.py:43
    // assert value.a < 1000
    uncover 3
    pushint 1000 // 1000
    <
    assert
    // named_tuples/contract.py:44
    // assert value.b < 2**65
    uncover 2
    pushbytes 0x020000000000000000
    b<
    assert
    // named_tuples/contract.py:45
    // assert value.c.bytes.length > 1
    swap
    len
    intc_0 // 1
    >
    assert
    // named_tuples/contract.py:46
    // assert value.d == Txn.sender.bytes
    txn Sender
    ==
    // named_tuples/contract.py:41
    // @arc4.abimethod()
    return
