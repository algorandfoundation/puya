debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['named_tuples'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: Sealing block@0
named_tuples/contract.py:20:16 debug: encountered already materialized expression (t1), reusing result: (t1.a#0, t1.b#0, t1.c#0, t1.d#0)
named_tuples/contract.py:20:22 debug: encountered already materialized expression (t2), reusing result: (t2.a#0, t2.b#0, t2.c#0, t2.d#0)
named_tuples/contract.py:20:16 debug: encountered already materialized expression (t1), reusing result: (t1.a#0, t1.b#0, t1.c#0, t1.d#0)
named_tuples/contract.py:20:22 debug: encountered already materialized expression (t2), reusing result: (t2.a#0, t2.b#0, t2.c#0, t2.d#0)
named_tuples/contract.py:20:16 debug: encountered already materialized expression (t1), reusing result: (t1.a#0, t1.b#0, t1.c#0, t1.d#0)
named_tuples/contract.py:20:22 debug: encountered already materialized expression (t2), reusing result: (t2.a#0, t2.b#0, t2.c#0, t2.d#0)
debug: Terminated block@0
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: optimizing approval program of test_cases.named_tuples.contract.NamedTuplesContract at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.named_tuples.contract.NamedTuplesContract.build_tuple for inlining
debug: marking trivial method test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name as inlineable
debug: marking trivial method test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position as inlineable
debug: marking single-use function test_cases.named_tuples.contract.NamedTuplesContract.test_tuple for inlining
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__ in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable current_tail_offset%2#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (concat 0x val_as_bytes%0#0) to val_as_bytes%0#0
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x004c
debug: Simplified (== tmp%13#0 NoOp) to (! tmp%13#0)
debug: Simplified (btoi item0%0#0) to (extract_uint64 tmp%17#0 0u)
debug: Simplified (== tmp%19#0 0u) to (! tmp%19#0)
debug: Simplified (extract3 tmp%17#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%17#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%17#0 8u 64u) // on error: Index access is out of bounds to ((extract 8 64) tmp%17#0) // on error: Index access is out of bounds
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@7 from switch tmp%18#0 {0u => block@8, * => block@9} to goto_nth [block@8][tmp%18#0] else goto block@9
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@7 from goto_nth [block@8][tmp%18#0] else goto block@9 to goto tmp%18#0 ? block@9 : block@8
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@7
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@6 with block@5 in block@11
debug: Merged linear block@6 into block@5
debug: Replaced predecessor block@10 with block@9 in block@11
debug: Merged linear block@10 into block@9
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@5
debug: Removed empty block: block@9
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%17#0 74u) with copy of existing registers (Register(source_location=named_tuples/contract.py:15, ir_type=uint64, name='item_end_offset%0', version=0),)
debug: Found equivalence set: val_as_bytes%0#0, encoded_tuple_buffer%1#0
debug: selected val_as_bytes%0#0 from equivalence set
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: selected item_end_offset%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create in test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
named_tuples/contract.py:31:6 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.test_tuple in test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
named_tuples/contract.py:16:6 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.build_tuple in test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%7#0, a#0
debug: selected a#0 from equivalence set
debug: Found equivalence set: reinterpret_bytes[64]%0#0, b#0
debug: selected b#0 from equivalence set
debug: Found equivalence set: tmp%9#0, c#0
debug: selected c#0 from equivalence set
debug: Found equivalence set: tmp%11#0, d#0
debug: selected d#0 from equivalence set
debug: Found equivalence set: t1.a#0, elements_to_encode%0#0
debug: selected t1.a#0 from equivalence set
debug: Found equivalence set: t1.b#0, elements_to_encode%1#0
debug: selected t1.b#0 from equivalence set
debug: Found equivalence set: t1.c#0, elements_to_encode%2#0
debug: selected t1.c#0 from equivalence set
debug: Found equivalence set: t1.d#0, elements_to_encode%3#0
debug: selected t1.d#0 from equivalence set
debug: Found equivalence set: item0%1#0, value.a#0
debug: selected value.a#0 from equivalence set
debug: Found equivalence set: item1%0#0, value.b#0
debug: selected value.b#0 from equivalence set
debug: Found equivalence set: item2%1#0, value.c#0
debug: selected value.c#0 from equivalence set
debug: Found equivalence set: item3%1#0, value.d#0
debug: selected value.d#0 from equivalence set
debug: Copy propagation made 15 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable current_tail_offset%2#0
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (concat 0x val_as_bytes%0#0) to val_as_bytes%0#0
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x004c
debug: Simplified (== tmp%13#0 NoOp) to (! tmp%13#0)
debug: Simplified (btoi item0%0#0) to (extract_uint64 tmp%17#0 0u)
debug: Simplified (== tmp%19#0 0u) to (! tmp%19#0)
debug: Simplified (extract3 tmp%17#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%17#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%17#0 8u 64u) // on error: Index access is out of bounds to ((extract 8 64) tmp%17#0) // on error: Index access is out of bounds
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@6 from switch tmp%18#0 {0u => block@7, * => block@8} to goto_nth [block@7][tmp%18#0] else goto block@8
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@6 from goto_nth [block@7][tmp%18#0] else goto block@8 to goto tmp%18#0 ? block@8 : block@7
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@15 with block@2 in block@16
debug: Merged linear block@15 into block@2
debug: Merged linear block@16 into block@2
debug: Replaced predecessor block@13 with block@3 in block@14
debug: Merged linear block@13 into block@3
debug: Merged linear block@14 into block@3
debug: Replaced predecessor block@5 with block@4 in block@10
debug: Merged linear block@5 into block@4
debug: Replaced predecessor block@11 with block@7 in block@12
debug: Merged linear block@11 into block@7
debug: Merged linear block@12 into block@7
debug: Replaced predecessor block@9 with block@8 in block@10
debug: Merged linear block@9 into block@8
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@4
debug: Removed empty block: block@8
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%17#0 74u) with copy of existing registers (Register(source_location=named_tuples/contract.py:15, ir_type=uint64, name='item_end_offset%0', version=0),)
debug: Found equivalence set: val_as_bytes%0#0, encoded_tuple_buffer%1#0
debug: selected val_as_bytes%0#0 from equivalence set
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: selected item_end_offset%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: Optimizer: Perform Subroutine Inlining
named_tuples/contract.py:18:9 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name in test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
named_tuples/contract.py:19:9 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position in test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#0, a#1, t1.a#0, a#2, t2.a#0
debug: selected a#0 from equivalence set
debug: Found equivalence set: b#0, b#1, t1.b#0, b#2, t2.b#0
debug: selected b#0 from equivalence set
debug: Found equivalence set: c#0, c#1, t1.c#0, c#2, t2.c#0
debug: selected c#0 from equivalence set
debug: Found equivalence set: d#0, d#1, t1.d#0, d#2, t2.d#0
debug: selected d#0 from equivalence set
debug: Copy propagation made 12 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== a#0 a#0) to 1u
debug: Simplified (b== b#0 b#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== c#0 c#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Simplified (== d#0 d#0) to 1u
debug: Simplified (&& 1u 1u) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Merged linear block@4 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_name
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple_by_position
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: marking single-use function test_cases.named_tuples.contract.NamedTuplesContract.build_tuple for inlining
debug: marking single-use function test_cases.named_tuples.contract.NamedTuplesContract.test_tuple for inlining
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create in algopy.arc4.ARC4Contract.approval_program
named_tuples/contract.py:31:6 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.test_tuple in algopy.arc4.ARC4Contract.approval_program
named_tuples/contract.py:16:6 debug: inlining call to test_cases.named_tuples.contract.NamedTuplesContract.build_tuple in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%7#0, a#0, elements_to_encode%0#0
debug: selected a#0 from equivalence set
debug: Found equivalence set: reinterpret_bytes[64]%0#0, b#0, elements_to_encode%1#0
debug: selected b#0 from equivalence set
debug: Found equivalence set: tmp%9#0, c#0, elements_to_encode%2#0
debug: selected c#0 from equivalence set
debug: Found equivalence set: tmp%11#0, d#0, elements_to_encode%3#0
debug: selected d#0 from equivalence set
debug: Found equivalence set: item0%1#0, value.a#0
debug: selected value.a#0 from equivalence set
debug: Found equivalence set: item1%0#0, value.b#0
debug: selected value.b#0 from equivalence set
debug: Found equivalence set: item2%1#0, value.c#0
debug: selected value.c#0 from equivalence set
debug: Found equivalence set: item3%1#0, value.d#0
debug: selected value.d#0 from equivalence set
debug: Copy propagation made 15 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%0#3
debug: Removing unused variable tmp%1#2
debug: Removing unused variable tmp%2#2
debug: Removing unused variable tmp%3#2
debug: Removing unused variable tmp%4#2
debug: Removing unused variable tmp%5#2
debug: Removing unused variable tmp%6#1
debug: Removing unused variable as_bytes%2#0
debug: Removing unused variable offset_as_uint16%0#0
debug: Removing unused variable data_length%1#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable item0%0#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@17 with block@3 in block@18
debug: Merged linear block@17 into block@3
debug: Replaced predecessor block@18 with block@3 in block@12
debug: Merged linear block@18 into block@3
debug: Replaced predecessor block@15 with block@4 in block@16
debug: Merged linear block@15 into block@4
debug: Replaced predecessor block@16 with block@4 in block@12
debug: Merged linear block@16 into block@4
debug: Replaced predecessor block@13 with block@8 in block@14
debug: Merged linear block@13 into block@8
debug: Replaced predecessor block@14 with block@8 in block@12
debug: Merged linear block@14 into block@8
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.build_tuple
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.test_tuple
debug: removing unused subroutine test_cases.named_tuples.contract.NamedTuplesContract.__algopy_default_create
debug: Unused subroutines removed
debug: Begin optimization pass 3/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: optimizing clear program of test_cases.named_tuples.contract.NamedTuplesContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.named_tuples.contract.NamedTuplesContract
debug: lowering array IR nodes in clear program of test_cases.named_tuples.contract.NamedTuplesContract
debug: optimizing approval program of test_cases.named_tuples.contract.NamedTuplesContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.named_tuples.contract.NamedTuplesContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.named_tuples.contract.NamedTuplesContract
debug: auto reserving slots in algopy.arc4.ARC4Contract.approval_program, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.named_tuples.contract.NamedTuplesContract
debug: auto reserving slots in algopy.arc4.ARC4Contract.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0 with [test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#1, test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#2, test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#3]
debug: Coalescing tmp%0#0 with [tmp%0#3, tmp%0#2]
debug: Coalescing resulted in 13 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to named_tuples/out_O2/NamedTuplesContract.ir/NamedTuplesContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to named_tuples/out_O2/NamedTuplesContract.ir/NamedTuplesContract.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_abi_routing@2.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_abi_routing@2.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_build_tuple_route@3.ops[1]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_build_tuple_route@3.ops[3]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_build_tuple_route@3.ops[5]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_build_tuple_route@3.ops[7]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_build_tuple_route@3.ops[10]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_build_tuple_route@3.ops[12]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_build_tuple_route@3.ops[15]: 'l-store-copy reinterpret_bytes[8]%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[17]: 'v-load reinterpret_bytes[8]%0#0' with 'l-load reinterpret_bytes[8]%0#0'
debug: Inserted main_build_tuple_route@3.ops[23]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_build_tuple_route@3.ops[25]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_build_tuple_route@3.ops[29]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_build_tuple_route@3.ops[31]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_build_tuple_route@3.ops[39]: 'l-store-copy value_len%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[41]: 'v-load value_len%0#0' with 'l-load value_len%0#0'
debug: Inserted main_build_tuple_route@3.ops[44]: 'l-store-copy len_ok%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[46]: 'v-load len_ok%0#0' with 'l-load len_ok%0#0'
debug: Inserted main_build_tuple_route@3.ops[57]: 'l-store-copy length%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[59]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main_build_tuple_route@3.ops[61]: 'l-store-copy as_bytes%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[63]: 'v-load as_bytes%0#0' with 'l-load as_bytes%0#0'
debug: Inserted main_build_tuple_route@3.ops[65]: 'l-store-copy length_uint16%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[67]: 'v-load length_uint16%0#0' with 'l-load length_uint16%0#0'
debug: Inserted main_build_tuple_route@3.ops[73]: 'l-store-copy length%1#0 0'
debug: Replaced main_build_tuple_route@3.ops[75]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main_build_tuple_route@3.ops[77]: 'l-store-copy as_bytes%1#0 0'
debug: Replaced main_build_tuple_route@3.ops[79]: 'v-load as_bytes%1#0' with 'l-load as_bytes%1#0'
debug: Inserted main_build_tuple_route@3.ops[81]: 'l-store-copy length_uint16%1#0 0'
debug: Replaced main_build_tuple_route@3.ops[83]: 'v-load length_uint16%1#0' with 'l-load length_uint16%1#0'
debug: Inserted main_build_tuple_route@3.ops[90]: 'l-store-copy encoded_tuple_buffer%2#0 0'
debug: Replaced main_build_tuple_route@3.ops[92]: 'v-load encoded_tuple_buffer%2#0' with 'l-load encoded_tuple_buffer%2#0'
debug: Inserted main_build_tuple_route@3.ops[102]: 'l-store-copy current_tail_offset%1#0 0'
debug: Replaced main_build_tuple_route@3.ops[104]: 'v-load current_tail_offset%1#0' with 'l-load current_tail_offset%1#0'
debug: Inserted main_build_tuple_route@3.ops[106]: 'l-store-copy as_bytes%3#0 0'
debug: Replaced main_build_tuple_route@3.ops[108]: 'v-load as_bytes%3#0' with 'l-load as_bytes%3#0'
debug: Inserted main_build_tuple_route@3.ops[114]: 'l-store-copy encoded_tuple_buffer%4#0 0'
debug: Replaced main_build_tuple_route@3.ops[116]: 'v-load encoded_tuple_buffer%4#0' with 'l-load encoded_tuple_buffer%4#0'
debug: Inserted main_build_tuple_route@3.ops[119]: 'l-store-copy encoded_tuple_buffer%5#0 0'
debug: Replaced main_build_tuple_route@3.ops[121]: 'v-load encoded_tuple_buffer%5#0' with 'l-load encoded_tuple_buffer%5#0'
debug: Inserted main_build_tuple_route@3.ops[128]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_build_tuple_route@3.ops[130]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_build_tuple_route@3.ops[133]: 'l-store-copy test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[135]: 'v-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0' with 'l-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0'
debug: Inserted main_build_tuple_route@3.ops[50]: 'l-store-copy bzero%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[53]: 'v-load bzero%0#0' with 'l-load bzero%0#0'
debug: Inserted main_build_tuple_route@3.ops[99]: 'l-store-copy data_length%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[102]: 'v-load data_length%0#0' with 'l-load data_length%0#0'
debug: Inserted main_build_tuple_route@3.ops[112]: 'l-store-copy offset_as_uint16%1#0 0'
debug: Replaced main_build_tuple_route@3.ops[115]: 'v-load offset_as_uint16%1#0' with 'l-load offset_as_uint16%1#0'
debug: Inserted main_build_tuple_route@3.ops[127]: 'l-store-copy encoded_tuple_buffer%6#0 0'
debug: Replaced main_build_tuple_route@3.ops[130]: 'v-load encoded_tuple_buffer%6#0' with 'l-load encoded_tuple_buffer%6#0'
debug: Inserted main_build_tuple_route@3.ops[57]: 'l-store-copy c#0 0'
debug: Replaced main_build_tuple_route@3.ops[70]: 'v-load c#0' with 'l-load c#0'
debug: Inserted main_build_tuple_route@3.ops[74]: 'l-store-copy d#0 0'
debug: Replaced main_build_tuple_route@3.ops[87]: 'v-load d#0' with 'l-load d#0'
debug: Inserted main_build_tuple_route@3.ops[38]: 'l-store-copy b#0 0'
debug: Replaced main_build_tuple_route@3.ops[53]: 'v-load b#0' with 'l-load b#0'
debug: Inserted main_build_tuple_route@3.ops[19]: 'l-store-copy a#0 0'
debug: Replaced main_build_tuple_route@3.ops[35]: 'v-load a#0' with 'l-load a#0'
debug: Inserted main_build_tuple_route@3.ops[22]: 'l-store-copy b#0 1'
debug: Replaced main_build_tuple_route@3.ops[39]: 'v-load b#0' with 'l-load b#0'
debug: Inserted main_build_tuple_route@3.ops[101]: 'l-store-copy encoded_tuple_buffer%3#0 0'
debug: Replaced main_build_tuple_route@3.ops[120]: 'v-load encoded_tuple_buffer%3#0' with 'l-load encoded_tuple_buffer%3#0'
debug: Inserted main_build_tuple_route@3.ops[104]: 'l-store-copy encoded_value%0#0 1'
debug: Replaced main_build_tuple_route@3.ops[127]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_build_tuple_route@3.ops[75]: 'l-store-copy encoded_value%0#0 0'
debug: Replaced main_build_tuple_route@3.ops[104]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_build_tuple_route@3.ops[29]: 'l-store-copy c#0 2'
debug: Replaced main_build_tuple_route@3.ops[60]: 'v-load c#0' with 'l-load c#0'
debug: Inserted main_build_tuple_route@3.ops[59]: 'l-store-copy arc4_encoded%0#0 1'
debug: Replaced main_build_tuple_route@3.ops[97]: 'v-load arc4_encoded%0#0' with 'l-load arc4_encoded%0#0'
debug: Inserted main_build_tuple_route@3.ops[95]: 'l-store-copy encoded_value%1#0 2'
debug: Replaced main_build_tuple_route@3.ops[136]: 'v-load encoded_value%1#0' with 'l-load encoded_value%1#0'
debug: Inserted main_build_tuple_route@3.ops[36]: 'l-store-copy d#0 3'
debug: Replaced main_build_tuple_route@3.ops[80]: 'v-load d#0' with 'l-load d#0'
debug: Inserted main_build_tuple_route@3.ops[40]: 'l-store-copy val_as_bytes%0#0 3'
debug: Replaced main_build_tuple_route@3.ops[99]: 'v-load val_as_bytes%0#0' with 'l-load val_as_bytes%0#0'
debug: Inserted main_test_tuple_route@4.ops[1]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_test_tuple_route@4.ops[3]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_test_tuple_route@4.ops[5]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_test_tuple_route@4.ops[7]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_test_tuple_route@4.ops[10]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_test_tuple_route@4.ops[12]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_test_tuple_route@4.ops[15]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[17]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[36]: 'l-store-copy item2%0#0 0'
debug: Replaced main_test_tuple_route@4.ops[38]: 'v-load item2%0#0' with 'l-load item2%0#0'
debug: Inserted main_test_tuple_route@4.ops[48]: 'l-store-copy item3%0#0 0'
debug: Replaced main_test_tuple_route@4.ops[50]: 'v-load item3%0#0' with 'l-load item3%0#0'
debug: Inserted main_test_tuple_route@4.ops[56]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_test_tuple_route@4.ops[58]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_test_tuple_route@4.ops[63]: 'l-store-copy tmp%1#1 0'
debug: Replaced main_test_tuple_route@4.ops[65]: 'v-load tmp%1#1' with 'l-load tmp%1#1'
debug: Inserted main_test_tuple_route@4.ops[69]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_test_tuple_route@4.ops[71]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_test_tuple_route@4.ops[74]: 'l-store-copy tmp%3#1 0'
debug: Replaced main_test_tuple_route@4.ops[76]: 'v-load tmp%3#1' with 'l-load tmp%3#1'
debug: Inserted main_test_tuple_route@4.ops[83]: 'l-store-copy tmp%5#1 0'
debug: Replaced main_test_tuple_route@4.ops[85]: 'v-load tmp%5#1' with 'l-load tmp%5#1'
debug: Inserted main_test_tuple_route@4.ops[88]: 'l-store-copy test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_test_tuple_route@4.ops[90]: 'v-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0' with 'l-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0'
debug: Inserted main_test_tuple_route@4.ops[79]: 'l-store-copy tmp%4#1 0'
debug: Replaced main_test_tuple_route@4.ops[82]: 'v-load tmp%4#1' with 'l-load tmp%4#1'
debug: Inserted main_test_tuple_route@4.ops[22]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[25]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[32]: 'l-store-copy item_end_offset%0#0 0'
debug: Replaced main_test_tuple_route@4.ops[36]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_test_tuple_route@4.ops[44]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[47]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[46]: 'l-store-copy item_end_offset%1#0 1'
debug: Replaced main_test_tuple_route@4.ops[50]: 'v-load item_end_offset%1#0' with 'l-load item_end_offset%1#0'
debug: Inserted main_test_tuple_route@4.ops[18]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[22]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[27]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[31]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[32]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_test_tuple_route@4.ops[37]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[30]: 'l-store-copy item_start_offset%0#0 1'
debug: Replaced main_test_tuple_route@4.ops[39]: 'v-load item_start_offset%0#0' with 'l-load item_start_offset%0#0'
debug: Inserted main_test_tuple_route@4.ops[39]: 'l-store-copy tmp%17#0 2'
debug: Replaced main_test_tuple_route@4.ops[48]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_test_tuple_route@4.ops[42]: 'l-store-copy item_end_offset%0#0 3'
debug: Replaced main_test_tuple_route@4.ops[55]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_test_tuple_route@4.ops[48]: 'l-store-copy value.c#0 2'
debug: Replaced main_test_tuple_route@4.ops[78]: 'v-load value.c#0' with 'l-load value.c#0'
debug: Inserted main_test_tuple_route@4.ops[63]: 'l-store-copy value.d#0 1'
debug: Replaced main_test_tuple_route@4.ops[93]: 'v-load value.d#0' with 'l-load value.d#0'
debug: Inserted main_test_tuple_route@4.ops[21]: 'l-store-copy value.a#0 1'
debug: Replaced main_test_tuple_route@4.ops[66]: 'v-load value.a#0' with 'l-load value.a#0'
debug: Inserted main_test_tuple_route@4.ops[26]: 'l-store-copy value.b#0 2'
debug: Replaced main_test_tuple_route@4.ops[74]: 'v-load value.b#0' with 'l-load value.b#0'
debug: Inserted main_bare_routing@7.ops[1]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_bare_routing@7.ops[3]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main___algopy_default_create@8.ops[1]: 'l-store-copy tmp%19#0 0'
debug: Replaced main___algopy_default_create@8.ops[3]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main___algopy_default_create@8.ops[5]: 'l-store-copy tmp%20#0 0'
debug: Replaced main___algopy_default_create@8.ops[7]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main___algopy_default_create@8.ops[10]: 'l-store-copy test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0 0'
debug: Replaced main___algopy_default_create@8.ops[12]: 'v-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0' with 'l-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0'
debug: Inserted main_after_if_else@11.ops[1]: 'l-store-copy test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_after_if_else@11.ops[3]: 'v-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0' with 'l-load test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0'
debug: Found 3 edge set/s for algopy.arc4.ARC4Contract.approval_program
debug: Allocated 1 variable/s to x-stack: tmp%0#0
debug: shared x-stack for main_build_tuple_route@3 -> main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_test_tuple_route@4 -> main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main___algopy_default_create@8 -> main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12: tmp%0#0
debug: shared x-stack for main_after_if_else@11 -> main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12: tmp%0#0
debug: optimizing TEAL subroutine ops algopy.arc4.ARC4Contract.approval_program() -> uint64:
debug: optimizing TEAL subroutine blocks algopy.arc4.ARC4Contract.approval_program() -> uint64:
debug: replacing `b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12` with `return`
debug: replacing `b main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12` with `return`
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_abi_routing@2 into main
debug: inlining single reference block main_after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__@12 into main_after_if_else@11
debug: inlining single reference block main___algopy_default_create@8 into main_bare_routing@7
debug: removing explicit jump to fall-through block main_after_if_else@11
debug: optimizing TEAL subroutine ops algopy.arc4.ARC4Contract.clear_state_program() -> uint64:
debug: optimizing TEAL subroutine blocks algopy.arc4.ARC4Contract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing named_tuples/out_O2/NamedTuplesContract.approval.teal
info: Writing named_tuples/out_O2/NamedTuplesContract.clear.teal
info: Writing named_tuples/out_O2/NamedTuplesContract.approval.bin
info: Writing named_tuples/out_O2/NamedTuplesContract.clear.bin
info: Writing named_tuples/out_O2/NamedTuplesContract.approval.stats.txt
info: Writing named_tuples/out_O2/NamedTuplesContract.clear.stats.txt
info: Writing named_tuples/out_O2/NamedTuplesContract.approval.puya.map
info: Writing named_tuples/out_O2/NamedTuplesContract.clear.puya.map