main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "build_tuple(uint64,uint512,string,byte[])(uint64,uint512,string,byte[])" => block@3, method "test_tuple((uint64,uint512,string,byte[]))void" => block@4, * => block@11}
    block@3: // build_tuple_route_L16
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let b#0: biguint = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let c#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 4)
        let d#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob a#0)
        let aggregate%value_len%0#1: uint64 = (len b#0)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| b#0 aggregate%bzero%0#1)
        let aggregate%encoded%1#1: Encoded(uint64,uint512) = (concat aggregate%val_as_bytes%0#1 aggregate%arc4_encoded%0#1)
        let aggregate%length%0#1: uint64 = (len c#0)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 c#0)
        let aggregate%data_length%0#1: uint64 = (len aggregate%encoded_value%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 76u aggregate%data_length%0#1)
        let aggregate%encoded%2#1: Encoded(uint64,uint512,(len+utf8[])) = (concat aggregate%encoded%1#1 0x004c)
        let aggregate%length%1#1: uint64 = (len d#0)
        let aggregate%as_bytes%2#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 d#0)
        let aggregate%tail%1#1: bytes = (concat aggregate%encoded_value%0#1 aggregate%encoded_value%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%3#1: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%4#1: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (concat aggregate%encoded%3#1 aggregate%tail%1#1)
        let tmp%16#0: bytes = (concat 0x151f7c75 aggregate%encoded%4#1)
        (log tmp%16#0)
        let test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0
        goto block@12
    block@4: // test_tuple_route_L31
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0: Encoded(uint64,uint512,(len+utf8[]),(len+uint8[])) = (txna ApplicationArgs 1)
        let value.a#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 0u)
        let value.b#0: biguint = ((extract 8 64) reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 72u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 74u)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let value.c#0: string = ((extract 2 0) aggregate%substring3%0#1)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0)
        let aggregate%substring3%1#1: bytes = (substring3 reinterpret_Encoded(uint64,uint512,(len+utf8[]),(len+uint8[]))%0#0 aggregate%extract_uint16%1#1 aggregate%len%0#1)
        let value.d#0: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let tmp%0#0: bool = (< value.a#0 1000u)
        (assert tmp%0#0)
        let tmp%1#1: bool = (b< value.b#0 36893488147419103232b)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len value.c#0)
        let tmp%3#1: bool = (> tmp%2#1 1u)
        (assert tmp%3#1)
        let tmp%4#1: account = (txn Sender)
        let tmp%5#1: bool = (== value.d#0 tmp%4#1)
        (assert tmp%5#1)
        let test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0
        goto block@12
    block@7: // bare_routing_L15
        let tmp%25#0: uint64 = (txn OnCompletion)
        goto tmp%25#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // can only call when creating
        let test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0
        goto block@12
    block@11: // after_if_else_L15
        let test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_test_cases.named_tuples.contract.NamedTuplesContract.__puya_arc4_router___L1
        return tmp%0#0