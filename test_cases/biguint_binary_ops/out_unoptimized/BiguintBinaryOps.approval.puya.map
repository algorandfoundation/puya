{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKe;AACC;AAED;AAAgB;;;;;;;;;;;AAAhB;AAAP;AAHO;AACC;AAGD;AAAgB;AAAhB;AAAP;AAJO;AACC;AAID;AAAgB;;;;;;;;;;;;;;;;;;;AAAhB;AAAP;AALO;AACC;AAKD;AAAiB;;;AAAjB;AAAP;AANO;AACC;AAMD;AAAgB;;;;;;;;;;AAAhB;AAAP;AAPO;AACC;AAQI;AAAL;AAAP;AATO;AACC;AASI;AAAL;AAAP;AAVO;AACC;AAUD;AAAP;AAXO;AACC;AAWD;AAAP;AAZO;AACC;AAYI;AAAL;AAAP;AAbO;AACC;AAaD;AAAP;AAdO;AACC;AAeD;AAAgB;AAAhB;AAAP;AAhBO;AACC;AAgBD;AAAgB;AAAhB;AAAP;AAjBO;AACC;AAiBD;AAAgB;AAAhB;AAAP;AAlBO;AAmBA;;;AAnBA;AAmBqB;;;AAArB;AAAP;AACO;;AAAP;AAMP;;;;;;AAEwC;;AAAT;AAAyB;;AAAT;AAAD;AAAf;AACR;;AAAA;;AAAA;AAAkB;;;AAAnB;AAEZ;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x032b1c8c1227a00180 0x010000000000000180 0x022b1c8c1227a00000"
    },
    "33": {
      "op": "b main_block@0"
    },
    "36": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "defined_out": [
        "0x032b1c8c1227a00180"
      ],
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "37": {
      "op": "bytec_1 // 0x010000000000000180",
      "defined_out": [
        "0x010000000000000180",
        "0x032b1c8c1227a00180"
      ],
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "38": {
      "op": "b+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "pushbytes 0x042b1c8c1227a00300",
      "defined_out": [
        "0x042b1c8c1227a00300",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x042b1c8c1227a00300"
      ]
    },
    "50": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "51": {
      "op": "assert",
      "stack_out": []
    },
    "52": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "53": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "54": {
      "op": "b-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "55": {
      "op": "bytec_2 // 0x022b1c8c1227a00000",
      "defined_out": [
        "0x022b1c8c1227a00000",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x022b1c8c1227a00000"
      ]
    },
    "56": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "57": {
      "op": "assert",
      "stack_out": []
    },
    "58": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "59": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "60": {
      "op": "b*",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "61": {
      "op": "pushbytes 0x032b1c8c1227a00640aad21b3b70024000",
      "defined_out": [
        "0x032b1c8c1227a00640aad21b3b70024000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x032b1c8c1227a00640aad21b3b70024000"
      ]
    },
    "80": {
      "op": "b==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "81": {
      "op": "assert",
      "stack_out": []
    },
    "82": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "83": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "84": {
      "op": "b/",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "85": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x03"
      ]
    },
    "88": {
      "op": "b==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "89": {
      "op": "assert",
      "stack_out": []
    },
    "90": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "91": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "92": {
      "op": "b%",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "93": {
      "op": "pushbytes 0x2b1c8c12279ffd00",
      "defined_out": [
        "0x2b1c8c12279ffd00",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x2b1c8c12279ffd00"
      ]
    },
    "103": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "104": {
      "op": "assert",
      "stack_out": []
    },
    "105": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "106": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "107": {
      "op": "b<",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "109": {
      "op": "assert",
      "stack_out": []
    },
    "110": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "111": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "112": {
      "op": "b<=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": []
    },
    "115": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "116": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "117": {
      "op": "b>",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "118": {
      "op": "assert",
      "stack_out": []
    },
    "119": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "120": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "121": {
      "op": "b>=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "122": {
      "op": "assert",
      "stack_out": []
    },
    "123": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "124": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "125": {
      "op": "b==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "129": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "130": {
      "op": "b!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "131": {
      "op": "assert",
      "stack_out": []
    },
    "132": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "133": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "134": {
      "op": "b|",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "135": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "tmp%19#0",
        "0x032b1c8c1227a00180"
      ]
    },
    "136": {
      "op": "b==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "137": {
      "op": "assert",
      "stack_out": []
    },
    "138": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "139": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "140": {
      "op": "b&",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "141": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "tmp%21#0",
        "0x010000000000000180"
      ]
    },
    "142": {
      "op": "b==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "143": {
      "op": "assert",
      "stack_out": []
    },
    "144": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "145": {
      "op": "bytec_1 // 0x010000000000000180",
      "stack_out": [
        "0x032b1c8c1227a00180",
        "0x010000000000000180"
      ]
    },
    "146": {
      "op": "b^",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "147": {
      "op": "bytec_2 // 0x022b1c8c1227a00000",
      "stack_out": [
        "tmp%23#0",
        "0x022b1c8c1227a00000"
      ]
    },
    "148": {
      "op": "b==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "149": {
      "op": "assert",
      "stack_out": []
    },
    "150": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "0x032b1c8c1227a00180"
      ]
    },
    "151": {
      "callsub": "test_cases.biguint_binary_ops.contract.bitwise_ops",
      "op": "callsub bitwise_ops",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "154": {
      "op": "bytec_0 // 0x032b1c8c1227a00180",
      "stack_out": [
        "tmp%25#0",
        "0x032b1c8c1227a00180"
      ]
    },
    "155": {
      "callsub": "test_cases.biguint_binary_ops.contract.bitwise_ops",
      "op": "callsub bitwise_ops",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "158": {
      "op": "b==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "162": {
      "op": "return",
      "stack_out": []
    },
    "163": {
      "subroutine": "test_cases.biguint_binary_ops.contract.bitwise_ops",
      "params": {
        "value#0": "bytes"
      },
      "block": "bitwise_ops",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "166": {
      "op": "b bitwise_ops_block@0"
    },
    "169": {
      "block": "bitwise_ops_block@0",
      "stack_in": [],
      "op": "pushint 16 // 16",
      "defined_out": [
        "16"
      ],
      "stack_out": [
        "16"
      ]
    },
    "171": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "tmp%0#0",
        "16"
      ]
    },
    "174": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "175": {
      "op": "b~",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "low128#0"
      ],
      "stack_out": [
        "low128#0"
      ]
    },
    "177": {
      "op": "frame_dig -1",
      "defined_out": [
        "low128#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "low128#0",
        "value#0 (copy)"
      ]
    },
    "179": {
      "op": "dig 1",
      "defined_out": [
        "low128#0",
        "low128#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "low128#0",
        "value#0 (copy)",
        "low128#0 (copy)"
      ]
    },
    "181": {
      "op": "b^",
      "defined_out": [
        "low128#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "low128#0",
        "tmp%3#0"
      ]
    },
    "182": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "low128#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "low128#0",
        "tmp%3#0",
        "0x01"
      ]
    },
    "185": {
      "op": "b+",
      "defined_out": [
        "low128#0",
        "wide_value_compl#0"
      ],
      "stack_out": [
        "low128#0",
        "wide_value_compl#0"
      ]
    },
    "186": {
      "op": "b&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "187": {
      "retsub": true,
      "op": "retsub"
    }
  }
}