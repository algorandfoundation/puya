#pragma version 10
#pragma typetrack false

// test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program() -> uint64:
main:
    bytecblock 0x032b1c8c1227a00180 0x010000000000000180 0x022b1c8c1227a00000
    b main_block@0

main_block@0:
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:8-9
    // # Math
    // assert left + right == BigUInt(76893488147419104000)
    b+
    pushbytes 0x042b1c8c1227a00300
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:10
    // assert left - right == BigUInt(40000000000000000000)
    b-
    bytec_2 // 0x022b1c8c1227a00000
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:11
    // assert left * right == BigUInt(1078152129869320557630474056040704000000)
    b*
    pushbytes 0x032b1c8c1227a00640aad21b3b70024000
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:12
    // assert left // right == BigUInt(3)
    b/
    pushbytes 0x03
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:13
    // assert left % right == BigUInt(3106511852580896000)
    b%
    pushbytes 0x2b1c8c12279ffd00
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:14-15
    // # Boolean
    // assert not (left < right)
    b<
    !
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:16
    // assert not (left <= right)
    b<=
    !
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:17
    // assert left > right
    b>
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:18
    // assert left >= right
    b>=
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:19
    // assert not (left == right)  # noqa: SIM201
    b==
    !
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:20
    // assert left != right
    b!=
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:21-22
    // # Bitwise
    // assert left | right == BigUInt(58446744073709552000)
    b|
    bytec_0 // 0x032b1c8c1227a00180
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:23
    // assert left & right == BigUInt(18446744073709552000)
    b&
    bytec_1 // 0x010000000000000180
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:7
    // right = BigUInt(18446744073709552000)
    bytec_1 // 0x010000000000000180
    // biguint_binary_ops/contract.py:24
    // assert left ^ right == BigUInt(40000000000000000000)
    b^
    bytec_2 // 0x022b1c8c1227a00000
    b==
    assert
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:25
    // assert bitwise_ops(left) == bitwise_ops(left)
    callsub bitwise_ops
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:25
    // assert bitwise_ops(left) == bitwise_ops(left)
    callsub bitwise_ops
    b==
    assert
    // biguint_binary_ops/contract.py:26
    // return True
    pushint 1 // 1
    return


// test_cases.biguint_binary_ops.contract.bitwise_ops(value: bytes) -> bytes:
bitwise_ops:
    // biguint_binary_ops/contract.py:32-33
    // @subroutine
    // def bitwise_ops(value: BigUInt) -> BigUInt:
    proto 1 1
    b bitwise_ops_block@0

bitwise_ops_block@0:
    // biguint_binary_ops/contract.py:34
    // low128 = BigUInt.from_bytes(op.bzero(16) + ~op.bzero(16))
    pushint 16 // 16
    bzero
    pushint 16 // 16
    bzero
    b~
    concat
    // biguint_binary_ops/contract.py:35
    // wide_value_compl = (value ^ low128) + BigUInt(1)
    frame_dig -1
    dig 1
    b^
    pushbytes 0x01
    b+
    // biguint_binary_ops/contract.py:37
    // return wide_value_compl & low128
    b&
    retsub
