#pragma version 10

test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program:
    bytecblock 0x032b1c8c1227a00180 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:25
    // assert bitwise_ops(left) == bitwise_ops(left)
    callsub bitwise_ops
    // biguint_binary_ops/contract.py:6
    // left = BigUInt(58446744073709552000)
    bytec_0 // 0x032b1c8c1227a00180
    // biguint_binary_ops/contract.py:25
    // assert bitwise_ops(left) == bitwise_ops(left)
    callsub bitwise_ops
    b==
    assert
    // biguint_binary_ops/contract.py:26
    // return True
    pushint 1 // 1
    return


// test_cases.biguint_binary_ops.contract.bitwise_ops(value: bytes) -> bytes:
bitwise_ops:
    // biguint_binary_ops/contract.py:32-33
    // @subroutine
    // def bitwise_ops(value: BigUInt) -> BigUInt:
    proto 1 1
    // biguint_binary_ops/contract.py:35
    // wide_value_compl = (value ^ low128) + BigUInt(1)
    frame_dig -1
    // biguint_binary_ops/contract.py:34
    // low128 = BigUInt.from_bytes(op.bzero(16) + ~op.bzero(16))
    bytec_1 // 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // biguint_binary_ops/contract.py:35
    // wide_value_compl = (value ^ low128) + BigUInt(1)
    b^
    pushbytes 0x01
    b+
    // biguint_binary_ops/contract.py:34
    // low128 = BigUInt.from_bytes(op.bzero(16) + ~op.bzero(16))
    bytec_1 // 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // biguint_binary_ops/contract.py:37
    // return wide_value_compl & low128
    b&
    retsub
