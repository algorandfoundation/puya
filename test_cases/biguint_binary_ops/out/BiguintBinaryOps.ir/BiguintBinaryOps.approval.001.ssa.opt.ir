main test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program:
    block@0: // L5
        let tmp%0#0: biguint = 76893488147419104000b
        let tmp%1#0: bool = 1u
        let tmp%2#0: biguint = 40000000000000000000b
        let tmp%3#0: bool = 1u
        let tmp%4#0: biguint = 1078152129869320557630474056040704000000b
        let tmp%5#0: bool = 1u
        let tmp%6#0: biguint = 3b
        let tmp%7#0: bool = 1u
        let tmp%8#0: biguint = 3106511852580896000b
        let tmp%9#0: bool = 1u
        let tmp%10#0: bool = 0u
        let tmp%11#0: bool = 1u
        let tmp%12#0: bool = 0u
        let tmp%13#0: bool = 1u
        let tmp%14#0: bool = 1u
        let tmp%15#0: bool = 1u
        let tmp%16#0: bool = 0u
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        let tmp%19#0: biguint = 0x032b1c8c1227a00180
        let tmp%20#0: bool = 1u
        let tmp%21#0: biguint = 0x010000000000000180
        let tmp%22#0: bool = 1u
        let tmp%23#0: biguint = 0x022b1c8c1227a00000
        let tmp%24#0: bool = 1u
        let tmp%25#0: biguint = test_cases.biguint_binary_ops.contract.bitwise_ops(58446744073709552000b)
        let tmp%26#0: biguint = test_cases.biguint_binary_ops.contract.bitwise_ops(58446744073709552000b)
        let tmp%27#0: bool = (b== tmp%25#0 tmp%26#0)
        (assert tmp%27#0)
        return 1u

subroutine test_cases.biguint_binary_ops.contract.bitwise_ops(value: biguint) -> biguint:
    block@0: // L32
        let tmp%0#0: bytes = (bzero 16u)
        let tmp%2#0: bytes = 0xffffffffffffffffffffffffffffffff
        let low128#0: biguint = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
        let tmp%3#0: biguint = (b^ value#0 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)
        let wide_value_compl#0: biguint = (b+ tmp%3#0 1b)
        let tmp%5#0: biguint = (b& wide_value_compl#0 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff)
        return tmp%5#0