contract test_cases.biguint_binary_ops.contract.BiguintBinaryOps:
    program approval:
        subroutine test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program() -> uint64:
            block@0: // L5
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: bytes, tuple_assignment%2#0: bytes, tuple_assignment%3#0: bytes, tuple_assignment%4#0: bytes, tuple_assignment%5#0: uint64, tuple_assignment%6#0: uint64, tuple_assignment%7#0: uint64, tuple_assignment%8#0: uint64, tuple_assignment%9#0: uint64, tuple_assignment%10#0: uint64, tuple_assignment%11#0: bytes, tuple_assignment%12#0: bytes, tuple_assignment%13#0: bytes) = test_cases.biguint_binary_ops.contract.do_some_ops(58446744073709552000b, 18446744073709552000b)
                let add#0: bytes = tuple_assignment%0#0
                let subtract#0: bytes = tuple_assignment%1#0
                let multiply#0: bytes = tuple_assignment%2#0
                let divide#0: bytes = tuple_assignment%3#0
                let mod#0: bytes = tuple_assignment%4#0
                let lt#0: uint64 = tuple_assignment%5#0
                let lte#0: uint64 = tuple_assignment%6#0
                let gt#0: uint64 = tuple_assignment%7#0
                let gte#0: uint64 = tuple_assignment%8#0
                let eq#0: uint64 = tuple_assignment%9#0
                let neq#0: uint64 = tuple_assignment%10#0
                let b_or#0: bytes = tuple_assignment%11#0
                let b_and#0: bytes = tuple_assignment%12#0
                let b_xor#0: bytes = tuple_assignment%13#0
                let tmp%0#0: uint64 = (b== add#0 76893488147419104000b)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (b== subtract#0 40000000000000000000b)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (b== multiply#0 1078152129869320557630474056040704000000b)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (b== divide#0 3b)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (b== mod#0 3106511852580896000b)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (! lt#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (! lte#0)
                (assert tmp%6#0)
                (assert gt#0)
                (assert gte#0)
                let tmp%7#0: uint64 = (! eq#0)
                (assert tmp%7#0)
                (assert neq#0)
                let tmp%8#0: uint64 = (b== b_or#0 58446744073709552000b)
                (assert tmp%8#0)
                let tmp%9#0: uint64 = (b== b_and#0 18446744073709552000b)
                (assert tmp%9#0)
                let tmp%10#0: uint64 = (b== b_xor#0 40000000000000000000b)
                (assert tmp%10#0)
                return 1u
        
        subroutine test_cases.biguint_binary_ops.contract.do_some_ops(left: bytes, right: bytes) -> <bytes, bytes, bytes, bytes, bytes, uint64, uint64, uint64, uint64, uint64, uint64, bytes, bytes, bytes>:
            block@0: // L43
                let tmp%0#0: bytes = (b+ left#0 right#0)
                let tmp%1#0: bytes = (b- left#0 right#0)
                let tmp%2#0: bytes = (b* left#0 right#0)
                let tmp%3#0: bytes = (b/ left#0 right#0)
                let tmp%4#0: bytes = (b% left#0 right#0)
                let tmp%5#0: uint64 = (b< left#0 right#0)
                let tmp%6#0: uint64 = (b<= left#0 right#0)
                let tmp%7#0: uint64 = (b> left#0 right#0)
                let tmp%8#0: uint64 = (b>= left#0 right#0)
                let tmp%9#0: uint64 = (b== left#0 right#0)
                let tmp%10#0: uint64 = (b!= left#0 right#0)
                let tmp%11#0: bytes = (b| left#0 right#0)
                let tmp%12#0: bytes = (b& left#0 right#0)
                let tmp%13#0: bytes = (b^ left#0 right#0)
                return tmp%0#0 tmp%1#0 tmp%2#0 tmp%3#0 tmp%4#0 tmp%5#0 tmp%6#0 tmp%7#0 tmp%8#0 tmp%9#0 tmp%10#0 tmp%11#0 tmp%12#0 tmp%13#0
    
    program clear-state:
        subroutine test_cases.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program() -> uint64:
            block@0: // L39
                return 1u