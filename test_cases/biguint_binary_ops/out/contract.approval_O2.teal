#pragma version 10

test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program:
    // biguint_binary_ops/contract.py:21
    // ) = do_some_ops(BigUInt(58446744073709552000), BigUInt(18446744073709552000))
    byte 0x032b1c8c1227a00180
    byte 0x010000000000000180
    callsub do_some_ops
    cover 13
    cover 12
    cover 11
    cover 10
    cover 9
    cover 8
    cover 7
    cover 6
    cover 5
    cover 4
    cover 3
    cover 2
    swap
    // biguint_binary_ops/contract.py:23
    // assert add == BigUInt(76893488147419104000)
    byte 0x042b1c8c1227a00300
    b==
    assert
    // biguint_binary_ops/contract.py:24
    // assert subtract == BigUInt(40000000000000000000)
    byte 0x022b1c8c1227a00000
    b==
    assert
    // biguint_binary_ops/contract.py:25
    // assert multiply == BigUInt(1078152129869320557630474056040704000000)
    byte 0x032b1c8c1227a00640aad21b3b70024000
    b==
    assert
    // biguint_binary_ops/contract.py:26
    // assert divide == BigUInt(3)
    byte 0x03
    b==
    assert
    // biguint_binary_ops/contract.py:27
    // assert mod == BigUInt(3106511852580896000)
    byte 0x2b1c8c12279ffd00
    b==
    assert
    // biguint_binary_ops/contract.py:28
    // assert not lt
    !
    assert
    // biguint_binary_ops/contract.py:29
    // assert not lte
    !
    assert
    // biguint_binary_ops/contract.py:30
    // assert gt
    assert
    // biguint_binary_ops/contract.py:31
    // assert gte
    assert
    // biguint_binary_ops/contract.py:32
    // assert not eq
    !
    assert
    // biguint_binary_ops/contract.py:33
    // assert neq
    assert
    // biguint_binary_ops/contract.py:34
    // assert b_or == BigUInt(58446744073709552000)
    byte 0x032b1c8c1227a00180
    b==
    assert
    // biguint_binary_ops/contract.py:35
    // assert b_and == BigUInt(18446744073709552000)
    byte 0x010000000000000180
    b==
    assert
    // biguint_binary_ops/contract.py:36
    // assert b_xor == BigUInt(40000000000000000000)
    byte 0x022b1c8c1227a00000
    b==
    assert
    // biguint_binary_ops/contract.py:37
    // return True
    int 1
    return


// test_cases.biguint_binary_ops.contract.do_some_ops(left: bytes, right: bytes) -> bytes, bytes, bytes, bytes, bytes, uint64, uint64, uint64, uint64, uint64, uint64, bytes, bytes, bytes:
do_some_ops:
    // biguint_binary_ops/contract.py:43-61
    // @subroutine
    // def do_some_ops(
    //     left: BigUInt, right: BigUInt
    // ) -> tuple[
    //     BigUInt,
    //     BigUInt,
    //     BigUInt,
    //     BigUInt,
    //     BigUInt,
    //     bool,
    //     bool,
    //     bool,
    //     bool,
    //     bool,
    //     bool,
    //     BigUInt,
    //     BigUInt,
    //     BigUInt,
    // ]:
    proto 2 14
    // biguint_binary_ops/contract.py:63-64
    // # Math
    // left + right,
    frame_dig -2
    frame_dig -1
    b+
    // biguint_binary_ops/contract.py:65
    // left - right,
    frame_dig -2
    frame_dig -1
    b-
    // biguint_binary_ops/contract.py:66
    // left * right,
    frame_dig -2
    frame_dig -1
    b*
    // biguint_binary_ops/contract.py:67
    // left // right,
    frame_dig -2
    frame_dig -1
    b/
    // biguint_binary_ops/contract.py:68
    // left % right,
    frame_dig -2
    frame_dig -1
    b%
    // biguint_binary_ops/contract.py:69-70
    // # Boolean
    // left < right,
    frame_dig -2
    frame_dig -1
    b<
    // biguint_binary_ops/contract.py:71
    // left <= right,
    frame_dig -2
    frame_dig -1
    b<=
    // biguint_binary_ops/contract.py:72
    // left > right,
    frame_dig -2
    frame_dig -1
    b>
    // biguint_binary_ops/contract.py:73
    // left >= right,
    frame_dig -2
    frame_dig -1
    b>=
    // biguint_binary_ops/contract.py:74
    // left == right,
    frame_dig -2
    frame_dig -1
    b==
    // biguint_binary_ops/contract.py:75
    // left != right,
    frame_dig -2
    frame_dig -1
    b!=
    // biguint_binary_ops/contract.py:76-77
    // # Bitwise
    // left | right,
    frame_dig -2
    frame_dig -1
    b|
    // biguint_binary_ops/contract.py:78
    // left & right,
    frame_dig -2
    frame_dig -1
    b&
    // biguint_binary_ops/contract.py:79
    // left ^ right,
    frame_dig -2
    frame_dig -1
    b^
    // biguint_binary_ops/contract.py:62-80
    // return (
    //     # Math
    //     left + right,
    //     left - right,
    //     left * right,
    //     left // right,
    //     left % right,
    //     # Boolean
    //     left < right,
    //     left <= right,
    //     left > right,
    //     left >= right,
    //     left == right,
    //     left != right,
    //     # Bitwise
    //     left | right,
    //     left & right,
    //     left ^ right,
    // )
    retsub
