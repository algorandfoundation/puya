contract test_cases.biguint_binary_ops.contract.BiguintBinaryOps:
    program approval:
        subroutine test_cases.biguint_binary_ops.contract.BiguintBinaryOps.approval_program() -> bool:
            block@0: // L5
                let tmp%1#0: bool = 1u
                (assert tmp%1#0)
                let tmp%3#0: bool = 1u
                (assert tmp%3#0)
                let tmp%5#0: bool = 1u
                (assert tmp%5#0)
                let tmp%7#0: bool = 1u
                (assert tmp%7#0)
                let tmp%9#0: bool = 1u
                (assert tmp%9#0)
                let tmp%11#0: bool = 1u
                (assert tmp%11#0)
                let tmp%13#0: bool = 1u
                (assert tmp%13#0)
                let tmp%17#0: bool = 1u
                (assert tmp%17#0)
                let tmp%20#0: bool = 1u
                (assert tmp%20#0)
                let tmp%22#0: bool = 1u
                (assert tmp%22#0)
                let tmp%24#0: bool = 1u
                (assert tmp%24#0)
                let tmp%25#0: biguint = test_cases.biguint_binary_ops.contract.bitwise_ops(58446744073709552000b)
                let tmp%26#0: biguint = test_cases.biguint_binary_ops.contract.bitwise_ops(58446744073709552000b)
                let tmp%27#0: bool = (b== tmp%25#0 tmp%26#0)
                (assert tmp%27#0)
                return 1u
        
        subroutine test_cases.biguint_binary_ops.contract.bitwise_ops(value: biguint) -> biguint:
            block@0: // L32
                let low128#0: biguint = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
                let tmp%3#0: biguint = (b^ value#0 low128#0)
                let wide_value_compl#0: biguint = (b+ tmp%3#0 1b)
                let tmp%4#0: biguint = (b& wide_value_compl#0 low128#0)
                return tmp%4#0
    
    program clear-state:
        subroutine test_cases.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program() -> bool:
            block@0: // L28
                return 1u