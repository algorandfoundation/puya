{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAeK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAfL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AACK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAAL;;;AAUQ;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACO;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACA;AAAA;;AAAA;;AAAA;;AAAA;AAER;;;AAIe;;AAAA;AAAwB;AAAxB;AAAP;AACO;;AAAA;AAAwB;AAAxB;AAAP;AACA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64 32"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75 0x00"
    },
    "17": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "20": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "21": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "24": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "pushbytes 0xfb716652 // method \"create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)\"",
      "defined_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))"
      ]
    },
    "33": {
      "op": "pushbytes 0x7ea64078 // method \"tuple_of_arc4((uint8,address))(uint8,address)\"",
      "defined_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))"
      ]
    },
    "39": {
      "op": "uncover 2",
      "stack_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match main_create_route@3 main_tuple_of_arc4_route@4",
      "stack_out": []
    },
    "47": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "block": "main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "49": {
      "block": "main_tuple_of_arc4_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "51": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "52": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "53": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "54": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "56": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "57": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "58": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "59": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)",
        "0"
      ]
    },
    "64": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)",
        "0",
        "1"
      ]
    },
    "65": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "item0%1#0"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "item0%1#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ]
    },
    "67": {
      "op": "intc_1 // 1",
      "stack_out": [
        "item0%1#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "1"
      ]
    },
    "68": {
      "op": "intc_3 // 32",
      "defined_out": [
        "1",
        "32",
        "item0%1#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ],
      "stack_out": [
        "item0%1#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "1",
        "32"
      ]
    },
    "69": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%1#0",
        "item1%2#0"
      ],
      "stack_out": [
        "item0%1#0",
        "item1%2#0"
      ]
    },
    "70": {
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "op": "callsub tuple_of_arc4",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%6#0"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "to_encode%6#0",
        "to_encode%5#0"
      ]
    },
    "74": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "to_encode%5#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "to_encode%5#0",
        "0x"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "to_encode%6#0",
        "0x",
        "to_encode%5#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "encoded%6#0",
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0",
        "encoded%6#0"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "encoded%6#0",
        "to_encode%6#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%7#0"
      ]
    },
    "79": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded%7#0",
        "0x"
      ]
    },
    "80": {
      "op": "concat",
      "defined_out": [
        "encoded%8#0"
      ],
      "stack_out": [
        "encoded%8#0"
      ]
    },
    "81": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%8#0"
      ],
      "stack_out": [
        "encoded%8#0",
        "0x151f7c75"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%8#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "84": {
      "op": "log",
      "stack_out": []
    },
    "85": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "86": {
      "op": "b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9"
    },
    "89": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "91": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "92": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "93": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "94": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "96": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "97": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "98": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "103": {
      "op": "getbit",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "104": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "107": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "108": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "111": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "114": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "120": {
      "op": "extract 2 0",
      "defined_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0"
      ]
    },
    "123": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "126": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "128": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0"
      ]
    },
    "129": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "131": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "133": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "encoded_bool%0#0"
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "135": {
      "op": "getbit",
      "defined_out": [
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item0%0#0"
      ]
    },
    "136": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "137": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "1"
      ]
    },
    "139": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "1",
        "8",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "1",
        "8"
      ]
    },
    "141": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item1%0#0"
      ]
    },
    "142": {
      "op": "btoi",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item1%1#0"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "144": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "145": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "147": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_start_offset%0#0"
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "149": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "150": {
      "op": "pushint 75 // 75",
      "defined_out": [
        "75",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "75"
      ]
    },
    "152": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%0#0"
      ]
    },
    "153": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "155": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "157": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "159": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item2%0#0"
      ]
    },
    "160": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item2%1#0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "164": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "165": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "11"
      ]
    },
    "167": {
      "op": "intc_2 // 64",
      "defined_out": [
        "11",
        "64",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "11",
        "64"
      ]
    },
    "168": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item3%0#0"
      ]
    },
    "169": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "170": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "171": {
      "op": "pushint 75 // 75",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "75"
      ]
    },
    "173": {
      "op": "extract_uint16",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_start_offset%1#0"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "175": {
      "op": "dup",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "176": {
      "op": "len",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_end_offset%1#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_start_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%1#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "178": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_start_offset%1#0"
      ]
    },
    "180": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_start_offset%1#0",
        "item_end_offset%1#0"
      ]
    },
    "182": {
      "op": "substring3",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%0#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%0#0"
      ]
    },
    "183": {
      "op": "extract 2 0",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0"
      ]
    },
    "186": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0"
      ]
    },
    "188": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "190": {
      "op": "uncover 9",
      "stack_out": [
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "192": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0"
      ]
    },
    "194": {
      "op": "uncover 9",
      "stack_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0"
      ]
    },
    "196": {
      "op": "uncover 9",
      "stack_out": [
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0"
      ]
    },
    "198": {
      "op": "uncover 9",
      "stack_out": [
        "item2%1#0",
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0"
      ]
    },
    "200": {
      "op": "uncover 9",
      "stack_out": [
        "item3%0#0",
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0"
      ]
    },
    "202": {
      "op": "uncover 9",
      "stack_out": [
        "item4%1#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0"
      ]
    },
    "204": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_Encoded(uint512)%0#0",
        "tmp%10#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%0#0",
        "item4%1#0"
      ]
    },
    "206": {
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.create",
      "op": "callsub create",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ]
    },
    "209": {
      "op": "cover 4",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0"
      ]
    },
    "211": {
      "op": "cover 3",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%0#0",
        "to_encode%1#0",
        "to_encode%2#0"
      ]
    },
    "213": {
      "op": "cover 2",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%0#0",
        "to_encode%1#0"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "to_encode%0#0"
      ]
    },
    "216": {
      "op": "bytec_2 // 0x00",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "to_encode%0#0",
        "0x00"
      ]
    },
    "217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "218": {
      "op": "uncover 2",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "220": {
      "op": "setbit",
      "defined_out": [
        "encoded_bit%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "encoded_bit%0#0"
      ]
    },
    "221": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_bit%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "encoded_bit%0#0",
        "0x"
      ]
    },
    "222": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "0x",
        "encoded_bit%0#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "encoded%0#0",
        "to_encode%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "to_encode%1#0",
        "encoded%0#0"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "encoded%0#0",
        "to_encode%1#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "encoded%0#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "encoded%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "226": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "to_encode%2#0",
        "encoded%1#0"
      ]
    },
    "227": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "to_encode%2#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "encoded%1#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "229": {
      "op": "len",
      "defined_out": [
        "encoded%1#0",
        "length%0#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "to_encode%2#0",
        "length%0#0"
      ]
    },
    "230": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded%1#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "231": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%1#0",
        "length_uint16%0#0",
        "to_encode%2#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "234": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "length_uint16%0#0",
        "to_encode%2#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "encoded_value%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "encoded_value%0#0"
      ]
    },
    "236": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "0x"
      ]
    },
    "237": {
      "op": "dig 1",
      "defined_out": [
        "0x",
        "encoded%1#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "0x",
        "encoded_value%0#0 (copy)"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "encoded%1#0",
        "encoded_value%0#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "tail%0#0"
      ]
    },
    "240": {
      "op": "cover 2",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "encoded%1#0",
        "encoded_value%0#0"
      ]
    },
    "242": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded%1#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "encoded%1#0",
        "data_length%0#0"
      ]
    },
    "243": {
      "op": "pushint 77 // 77",
      "defined_out": [
        "77",
        "data_length%0#0",
        "encoded%1#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "encoded%1#0",
        "data_length%0#0",
        "77"
      ]
    },
    "245": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "encoded%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0"
      ]
    },
    "247": {
      "op": "pushint 77 // 77",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "77"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "as_bytes%1#0"
      ]
    },
    "250": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%1#0",
        "offset_as_uint16%0#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "254": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%3#0 (copy)",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "256": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "value_len%0#0"
      ]
    },
    "257": {
      "op": "intc_2 // 64",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "value_len%0#0",
        "64"
      ]
    },
    "258": {
      "op": "<=",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%2#0",
        "len_ok%0#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "len_ok%0#0"
      ]
    },
    "259": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "260": {
      "op": "intc_2 // 64",
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "64"
      ]
    },
    "261": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "to_encode%3#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "to_encode%3#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "bzero%0#0"
      ]
    },
    "262": {
      "op": "uncover 4",
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "bzero%0#0",
        "to_encode%3#0"
      ]
    },
    "264": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "tail%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0"
      ]
    },
    "266": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "to_encode%4#0",
        "to_encode%4#0 (copy)"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "to_encode%4#0 (copy)"
      ]
    },
    "268": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length%1#0",
        "tail%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length%1#0"
      ]
    },
    "269": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "as_bytes%2#0"
      ]
    },
    "270": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length_uint16%1#0",
        "tail%0#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length_uint16%1#0"
      ]
    },
    "273": {
      "op": "uncover 4",
      "stack_out": [
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length_uint16%1#0",
        "to_encode%4#0"
      ]
    },
    "275": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%1#0",
        "tail%0#0"
      ],
      "stack_out": [
        "tail%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%1#0"
      ]
    },
    "276": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%1#0",
        "tail%0#0"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%0#0",
        "encoded_value%1#0"
      ]
    },
    "279": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "280": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "as_bytes%3#0"
      ]
    },
    "283": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "tail%1#0",
        "offset_as_uint16%1#0",
        "encoded%3#0"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0"
      ]
    },
    "292": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0",
        "0x151f7c75"
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%5#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "295": {
      "op": "log",
      "stack_out": []
    },
    "296": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9"
    },
    "300": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "303": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.create",
      "params": {
        "bool_param#0": "uint64",
        "uint64_param#0": "uint64",
        "bytes_param#0": "bytes",
        "biguint_param#0": "bytes",
        "string_param#0": "bytes",
        "tuple_param.0#0": "uint64",
        "tuple_param.1#0": "uint64",
        "tuple_param.2#0": "bytes",
        "tuple_param.3#0": "bytes",
        "tuple_param.4#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 10 5"
    },
    "306": {
      "block": "create_block@0",
      "stack_in": [],
      "op": "frame_dig -10",
      "defined_out": [
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0"
      ]
    },
    "308": {
      "op": "frame_dig -9",
      "defined_out": [
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.0#0",
        "result.1#0"
      ]
    },
    "310": {
      "op": "swap",
      "stack_out": [
        "result.1#0",
        "result.0#0"
      ]
    },
    "311": {
      "op": "frame_dig -8",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.0#0",
        "result.2#0"
      ]
    },
    "313": {
      "op": "cover 2",
      "stack_out": [
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "315": {
      "op": "frame_dig -7",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.3#0"
      ]
    },
    "317": {
      "op": "cover 3",
      "stack_out": [
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "319": {
      "op": "frame_dig -6",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ],
      "stack_out": [
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.4#0"
      ]
    },
    "321": {
      "op": "cover 4",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "323": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.0#0 (copy)"
      ]
    },
    "324": {
      "op": "frame_dig -5",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tuple_param.0#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.0#0 (copy)",
        "tuple_param.0#0 (copy)"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0"
      ]
    },
    "327": {
      "op": "dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "result.1#0 (copy)"
      ]
    },
    "329": {
      "op": "frame_dig -4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0",
        "tuple_param.1#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "result.1#0 (copy)",
        "tuple_param.1#0 (copy)"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "332": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0"
      ]
    },
    "333": {
      "op": "dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0",
        "result.4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "result.2#0 (copy)"
      ]
    },
    "335": {
      "op": "frame_dig -3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0",
        "result.4#0",
        "tmp%2#0",
        "tuple_param.2#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "result.2#0 (copy)",
        "tuple_param.2#0 (copy)"
      ]
    },
    "337": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "338": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0"
      ]
    },
    "339": {
      "op": "dig 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "result.4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "result.3#0 (copy)"
      ]
    },
    "341": {
      "op": "frame_dig -2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "result.4#0",
        "tmp%4#0",
        "tuple_param.3#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "result.3#0 (copy)",
        "tuple_param.3#0 (copy)"
      ]
    },
    "343": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "344": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0"
      ]
    },
    "345": {
      "op": "dig 5",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "result.4#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "result.4#0 (copy)"
      ]
    },
    "347": {
      "op": "frame_dig -1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "result.4#0 (copy)",
        "tmp%6#0",
        "tuple_param.4#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "result.4#0 (copy)",
        "tuple_param.4#0 (copy)"
      ]
    },
    "349": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "350": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%8#0"
      ]
    },
    "351": {
      "op": "assert",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "352": {
      "op": "swap",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "353": {
      "op": "uncover 2",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "355": {
      "op": "uncover 3",
      "stack_out": [
        "result.4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "357": {
      "op": "uncover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ]
    },
    "359": {
      "retsub": true,
      "op": "retsub"
    },
    "360": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "tuple_of_arc4",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "363": {
      "block": "tuple_of_arc4_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "args.0#0 (copy)"
      ],
      "stack_out": [
        "args.0#0 (copy)"
      ]
    },
    "365": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "367": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "368": {
      "op": "assert",
      "stack_out": []
    },
    "369": {
      "op": "frame_dig -1",
      "defined_out": [
        "args.1#0 (copy)"
      ],
      "stack_out": [
        "args.1#0 (copy)"
      ]
    },
    "371": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "372": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "374": {
      "op": "assert",
      "stack_out": []
    },
    "375": {
      "op": "frame_dig -2",
      "stack_out": [
        "args.0#0 (copy)"
      ]
    },
    "377": {
      "op": "frame_dig -1",
      "stack_out": [
        "args.0#0 (copy)",
        "args.1#0 (copy)"
      ]
    },
    "379": {
      "retsub": true,
      "op": "retsub"
    }
  }
}