{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAeK;;;;;;AAfL;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AACK;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAcA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAdA;;;;;;AAUG;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACO;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AAEH;;;;;;AAIU;;AAAA;AAAwB;AAAxB;AAAP;AACO;;AAAA;AAAwB;;AAAxB;AAAP;AACA;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 75 2"
    },
    "7": {
      "op": "bytecblock 0x 0x151f7c75"
    },
    "15": {
      "op": "b main_block@0"
    },
    "18": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "21": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "NoOp"
      ]
    },
    "24": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "25": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "29": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "bz main_create_NoOp@5",
      "stack_out": []
    },
    "33": {
      "op": "b main_call_NoOp@2"
    },
    "36": {
      "block": "main_call_NoOp@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "39": {
      "op": "pushbytes 0x7ea64078 // method \"tuple_of_arc4((uint8,address))(uint8,address)\"",
      "defined_out": [
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))"
      ]
    },
    "45": {
      "op": "uncover 1",
      "stack_out": [
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%4#0"
      ]
    },
    "47": {
      "op": "match main_tuple_of_arc4_route@3",
      "stack_out": []
    },
    "51": {
      "op": "b main_switch_case_next@4"
    },
    "54": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "57": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "58": {
      "block": "main_tuple_of_arc4_route@3",
      "stack_in": [],
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]",
      "op": "callsub tuple_of_arc4"
    },
    "61": {
      "op": "b main_switch_case_next@4"
    },
    "64": {
      "block": "main_create_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "67": {
      "op": "pushbytes 0xfb716652 // method \"create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)\"",
      "defined_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))"
      ]
    },
    "73": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "tmp%5#0"
      ]
    },
    "75": {
      "op": "match main_create_route@6",
      "stack_out": []
    },
    "79": {
      "op": "b main_switch_case_next@7"
    },
    "82": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "85": {
      "block": "main_create_route@6",
      "stack_in": [],
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.create[routing]",
      "op": "callsub create"
    },
    "88": {
      "op": "b main_switch_case_next@7"
    },
    "91": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "94": {
      "block": "create_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "98": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "99": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "1"
      ]
    },
    "100": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "101": {
      "error": "invalid number of bytes for arc4.bool",
      "op": "assert // invalid number of bytes for arc4.bool",
      "defined_out": [
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0"
      ]
    },
    "102": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "as_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "103": {
      "op": "getbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "104": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "107": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "108": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "109": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "112": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "113": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "114": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "117": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "118": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "119": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "length%0#0"
      ]
    },
    "120": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "length%0#0",
        "1"
      ]
    },
    "121": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "mul%0#0"
      ]
    },
    "122": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "mul%0#0",
        "2"
      ]
    },
    "123": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%0#0"
      ]
    },
    "124": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%0#0",
        "tmp%4#0 (copy)"
      ]
    },
    "126": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "add%0#0",
        "len%2#0"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "128": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+uint8[])%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "as_Encoded(len+uint8[])%0#0"
      ]
    },
    "129": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "132": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "136": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "137": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "len%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "len%3#0",
        "64"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "140": {
      "error": "invalid number of bytes for arc4.uint512",
      "op": "assert // invalid number of bytes for arc4.uint512",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "141": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "144": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "145": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "0"
      ]
    },
    "146": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%1#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "length%1#0"
      ]
    },
    "147": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "length%1#0",
        "1"
      ]
    },
    "148": {
      "op": "*",
      "defined_out": [
        "mul%1#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "mul%1#0"
      ]
    },
    "149": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "mul%1#0",
        "2"
      ]
    },
    "150": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "add%1#0"
      ]
    },
    "151": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "add%1#0",
        "tmp%8#0 (copy)"
      ]
    },
    "153": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "add%1#0",
        "len%4#0"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "155": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "defined_out": [
        "as_Encoded(len+utf8[])%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "as_Encoded(len+utf8[])%0#0"
      ]
    },
    "156": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "162": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "163": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "9"
      ]
    },
    "165": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "extract_uint16%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "extract_uint16%0#0"
      ]
    },
    "166": {
      "op": "pushint 77 // 77",
      "defined_out": [
        "77",
        "extract_uint16%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "extract_uint16%0#0",
        "77"
      ]
    },
    "168": {
      "op": "==",
      "defined_out": [
        "eq%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "eq%5#0"
      ]
    },
    "169": {
      "error": "invalid tail pointer at index 2 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 2 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "170": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "171": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "9"
      ]
    },
    "173": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "174": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract_uint16%0#0",
        "tmp%10#0"
      ]
    },
    "176": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract_uint16%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "177": {
      "op": "intc_2 // 75",
      "defined_out": [
        "75",
        "aggregate%extract_uint16%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract_uint16%0#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "75"
      ]
    },
    "178": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract_uint16%0#0",
        "tmp%10#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "179": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract_uint16%0#0",
        "tmp%10#0",
        "aggregate%extract_uint16%1#0",
        "tmp%10#0 (copy)"
      ]
    },
    "181": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%1#0",
        "tmp%10#0 (copy)",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "183": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "aggregate%extract_uint16%0#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "185": {
      "op": "substring3",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "186": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "0"
      ]
    },
    "187": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "length%2#0"
      ]
    },
    "188": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "length%2#0",
        "1"
      ]
    },
    "189": {
      "op": "*",
      "defined_out": [
        "mul%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "mul%2#0"
      ]
    },
    "190": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "mul%2#0",
        "2"
      ]
    },
    "191": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%2#0"
      ]
    },
    "192": {
      "op": "pushint 77 // 77",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%2#0",
        "77"
      ]
    },
    "194": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0"
      ]
    },
    "195": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%10#0 (copy)"
      ]
    },
    "197": {
      "op": "intc_2 // 75",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%10#0 (copy)",
        "75"
      ]
    },
    "198": {
      "error": "invalid tuple encoding",
      "op": "extract_uint16 // on error: invalid tuple encoding",
      "defined_out": [
        "add%3#0",
        "extract_uint16%1#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "extract_uint16%1#0"
      ]
    },
    "199": {
      "op": "dig 1",
      "defined_out": [
        "add%3#0",
        "add%3#0 (copy)",
        "extract_uint16%1#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "extract_uint16%1#0",
        "add%3#0 (copy)"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "add%3#0",
        "eq%6#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "eq%6#0"
      ]
    },
    "202": {
      "error": "invalid tail pointer at index 4 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))",
      "op": "assert // invalid tail pointer at index 4 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0"
      ]
    },
    "203": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%10#0 (copy)"
      ]
    },
    "205": {
      "op": "intc_2 // 75",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%10#0 (copy)",
        "75"
      ]
    },
    "206": {
      "op": "extract_uint16",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "207": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%2#0",
        "add%3#0"
      ]
    },
    "209": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%2#0",
        "add%3#0",
        "tmp%10#0 (copy)"
      ]
    },
    "211": {
      "op": "len",
      "defined_out": [
        "add%3#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%2#0",
        "add%3#0",
        "aggregate%len%0#0"
      ]
    },
    "212": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%3#0"
      ]
    },
    "214": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0",
        "add%3#0",
        "tmp%10#0 (copy)"
      ]
    },
    "216": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "aggregate%len%0#0",
        "add%3#0",
        "tmp%10#0 (copy)",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "218": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%10#0 (copy)",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%0#0"
      ]
    },
    "220": {
      "op": "substring3",
      "defined_out": [
        "add%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%12#0"
      ]
    },
    "221": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "tmp%12#0",
        "0"
      ]
    },
    "222": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "add%3#0",
        "length%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "length%3#0"
      ]
    },
    "223": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "length%3#0",
        "1"
      ]
    },
    "224": {
      "op": "*",
      "defined_out": [
        "add%3#0",
        "mul%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "mul%3#0"
      ]
    },
    "225": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "mul%3#0",
        "2"
      ]
    },
    "226": {
      "op": "+",
      "defined_out": [
        "add%3#0",
        "add%4#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%3#0",
        "add%4#0"
      ]
    },
    "227": {
      "op": "+",
      "defined_out": [
        "add%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%5#0"
      ]
    },
    "228": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%5#0",
        "tmp%10#0 (copy)"
      ]
    },
    "230": {
      "op": "len",
      "defined_out": [
        "add%5#0",
        "len%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "add%5#0",
        "len%5#0"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "eq%7#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0",
        "eq%7#0"
      ]
    },
    "232": {
      "error": "invalid number of bytes for arc4.tuple<arc4.bool,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.uint512,arc4.dynamic_array<arc4.uint8>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.bool,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.uint512,arc4.dynamic_array<arc4.uint8>>",
      "defined_out": [
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "233": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "234": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "235": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%get_bit%1#0"
      ]
    },
    "236": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "238": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "239": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "1"
      ]
    },
    "240": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "1",
        "8"
      ]
    },
    "242": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "243": {
      "op": "btoi",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "244": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "246": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "247": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "249": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "250": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "252": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "253": {
      "op": "intc_2 // 75",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "75"
      ]
    },
    "254": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "255": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%extract_uint16%3#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "257": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%4#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%3#0"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "aggregate%extract_uint16%3#0",
        "aggregate%extract_uint16%4#0"
      ]
    },
    "261": {
      "op": "substring3",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%substring3%2#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%substring3%2#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "265": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "267": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "268": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "11",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "11"
      ]
    },
    "270": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "11",
        "64"
      ]
    },
    "272": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "273": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "275": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "276": {
      "op": "intc_2 // 75",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)",
        "75"
      ]
    },
    "277": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "278": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "280": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 (copy)"
      ]
    },
    "281": {
      "op": "len",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%len%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%len%1#0"
      ]
    },
    "282": {
      "op": "cover 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0"
      ]
    },
    "284": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%len%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0",
        "aggregate%extract_uint16%5#0",
        "aggregate%len%1#0"
      ]
    },
    "288": {
      "op": "substring3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%substring3%3#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%substring3%3#0"
      ]
    },
    "289": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%item4%0#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%get_bit%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%item4%0#0"
      ]
    },
    "292": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "aggregate%item4%0#0",
        "aggregate%get_bit%1#0"
      ]
    },
    "294": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%item4%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%item1%0#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "aggregate%item4%0#0"
      ]
    },
    "296": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "aggregate%item4%0#0",
        "aggregate%item1%0#0"
      ]
    },
    "298": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item2%0#0",
        "aggregate%item4%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%item2%0#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "aggregate%item4%0#0"
      ]
    },
    "300": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "aggregate%item4%0#0",
        "aggregate%item2%0#0"
      ]
    },
    "302": {
      "op": "cover 1",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item4%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "aggregate%extract%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "aggregate%item4%0#0"
      ]
    },
    "304": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "aggregate%item4%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "306": {
      "op": "cover 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "308": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0"
      ]
    },
    "310": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "312": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "314": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "316": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "318": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0"
      ]
    },
    "320": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "322": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "324": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%17#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "326": {
      "op": "uncover 9",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "328": {
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.create",
      "op": "callsub test_cases.avm_types_in_abi.contract.TestContract.create",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "331": {
      "op": "cover 4",
      "stack_out": [
        "tmp%22#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "333": {
      "op": "cover 3",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "335": {
      "op": "cover 2",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "337": {
      "op": "cover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "tmp%18#0"
      ]
    },
    "339": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "tmp%18#0",
        "0x00"
      ]
    },
    "342": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "tmp%18#0",
        "0x00",
        "0"
      ]
    },
    "343": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "0x00",
        "0",
        "tmp%18#0"
      ]
    },
    "345": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "346": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%encoded_bool%0#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "aggregate%encoded_bool%0#0",
        "0x"
      ]
    },
    "347": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "0x",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "tmp%19#0",
        "aggregate%head%0#0"
      ]
    },
    "350": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "aggregate%head%0#0",
        "tmp%19#0"
      ]
    },
    "352": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "aggregate%head%0#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "353": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "tmp%20#0",
        "aggregate%head%1#0"
      ]
    },
    "354": {
      "op": "cover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "tmp%20#0"
      ]
    },
    "356": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "357": {
      "op": "len",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length%0#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "tmp%20#0",
        "aggregate%length%0#0"
      ]
    },
    "358": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%1#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "tmp%20#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "359": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "tmp%20#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "362": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%20#0"
      ]
    },
    "364": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "365": {
      "op": "pushint 77 // 77",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "77"
      ]
    },
    "367": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%1#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "368": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%1#0"
      ]
    },
    "373": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "375": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "376": {
      "op": "cover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "378": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "379": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "380": {
      "op": "pushint 77 // 77",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "77"
      ]
    },
    "382": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "383": {
      "op": "cover 1",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "385": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%21#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "tmp%21#0 (copy)"
      ]
    },
    "387": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%value_len%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%value_len%0#0"
      ]
    },
    "388": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "390": {
      "op": "<=",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "aggregate%len_ok%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "391": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "392": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "64"
      ]
    },
    "394": {
      "op": "bzero",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%bzero%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%21#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%bzero%0#0"
      ]
    },
    "395": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%bzero%0#0",
        "tmp%21#0"
      ]
    },
    "397": {
      "op": "b|",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(uint512)%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%2#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%head%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(uint512)%0#0"
      ]
    },
    "398": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(uint512)%0#0",
        "aggregate%head%2#0"
      ]
    },
    "400": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(uint512)%0#0"
      ]
    },
    "402": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "403": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "tmp%22#0 (copy)"
      ]
    },
    "405": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%length%1#0"
      ]
    },
    "406": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "407": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "410": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%length_uint16%1#0",
        "tmp%22#0"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "413": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "415": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "416": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "419": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%3#0"
      ]
    },
    "421": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%3#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "423": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0"
      ]
    },
    "424": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%head%4#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "426": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%as_Encoded(len+utf8[])%0#0",
        "aggregate%concat%0#0"
      ]
    },
    "427": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%as_Encoded(len+utf8[])%0#0"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "430": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "0x151f7c75"
      ]
    },
    "431": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%23#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "434": {
      "op": "log",
      "stack_out": []
    },
    "435": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "436": {
      "op": "return",
      "stack_out": []
    },
    "437": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]",
      "params": {},
      "block": "tuple_of_arc4",
      "stack_in": [],
      "op": "b tuple_of_arc4_block@0"
    },
    "440": {
      "block": "tuple_of_arc4_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "443": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "444": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "445": {
      "op": "pushint 33 // 33",
      "defined_out": [
        "33",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "33"
      ]
    },
    "447": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "448": {
      "error": "invalid number of bytes for arc4.tuple<arc4.uint8,arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(uint8,uint8[32])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint8,uint8[32])%0#0"
      ]
    },
    "449": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)"
      ]
    },
    "450": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)",
        "0"
      ]
    },
    "451": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint8,uint8[32])%0#0",
        "as_Encoded(uint8,uint8[32])%0#0 (copy)",
        "0",
        "1"
      ]
    },
    "452": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint8,uint8[32])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint8,uint8[32])%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "453": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint8,uint8[32])%0#0"
      ]
    },
    "455": {
      "op": "intc_0 // 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint8,uint8[32])%0#0",
        "1"
      ]
    },
    "456": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "1",
        "32",
        "aggregate%extract%0#0",
        "as_Encoded(uint8,uint8[32])%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint8,uint8[32])%0#0",
        "1",
        "32"
      ]
    },
    "458": {
      "op": "extract3",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "459": {
      "callsub": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "op": "callsub test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "462": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0"
      ]
    },
    "464": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%3#0",
        "0x"
      ]
    },
    "465": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%4#0",
        "0x",
        "tmp%3#0"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "aggregate%head%0#0"
      ]
    },
    "468": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%4#0"
      ]
    },
    "470": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "471": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "472": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%5#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "475": {
      "op": "log",
      "stack_out": []
    },
    "476": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.create",
      "params": {
        "bool_param#0": "uint64",
        "uint64_param#0": "uint64",
        "bytes_param#0": "bytes",
        "biguint_param#0": "bytes",
        "string_param#0": "bytes",
        "tuple_param.0#0": "uint64",
        "tuple_param.1#0": "uint64",
        "tuple_param.2#0": "bytes",
        "tuple_param.3#0": "bytes",
        "tuple_param.4#0": "bytes"
      },
      "block": "test_cases.avm_types_in_abi.contract.TestContract.create",
      "stack_in": [],
      "op": "proto 10 5"
    },
    "481": {
      "op": "b test_cases.avm_types_in_abi.contract.TestContract.create_block@0"
    },
    "484": {
      "block": "test_cases.avm_types_in_abi.contract.TestContract.create_block@0",
      "stack_in": [],
      "op": "frame_dig -10",
      "defined_out": [
        "result.0#0"
      ],
      "stack_out": [
        "result.0#0"
      ]
    },
    "486": {
      "op": "frame_dig -9",
      "defined_out": [
        "result.0#0",
        "uint64_param#0 (copy)"
      ],
      "stack_out": [
        "result.0#0",
        "uint64_param#0 (copy)"
      ]
    },
    "488": {
      "op": "cover 1",
      "defined_out": [
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.0#0"
      ]
    },
    "490": {
      "op": "frame_dig -8",
      "defined_out": [
        "bytes_param#0 (copy)",
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "result.1#0",
        "result.0#0",
        "bytes_param#0 (copy)"
      ]
    },
    "492": {
      "op": "cover 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "494": {
      "op": "frame_dig -7",
      "defined_out": [
        "biguint_param#0 (copy)",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ],
      "stack_out": [
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "biguint_param#0 (copy)"
      ]
    },
    "496": {
      "op": "cover 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ],
      "stack_out": [
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "498": {
      "op": "frame_dig -6",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "string_param#0 (copy)"
      ],
      "stack_out": [
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "string_param#0 (copy)"
      ]
    },
    "500": {
      "op": "cover 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "502": {
      "op": "dup",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.0#0 (copy)"
      ]
    },
    "503": {
      "op": "frame_dig -5",
      "defined_out": [
        "result.0#0",
        "result.0#0 (copy)",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tuple_param.0#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "result.0#0 (copy)",
        "tuple_param.0#0 (copy)"
      ]
    },
    "505": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "dig 2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "result.1#0 (copy)"
      ]
    },
    "508": {
      "op": "frame_dig -4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.1#0 (copy)",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0",
        "tuple_param.1#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "result.1#0 (copy)",
        "tuple_param.1#0 (copy)"
      ]
    },
    "510": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "511": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0"
      ]
    },
    "512": {
      "op": "dig 3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0",
        "result.4#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "result.2#0 (copy)"
      ]
    },
    "514": {
      "op": "frame_dig -3",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.2#0 (copy)",
        "result.3#0",
        "result.4#0",
        "tmp%2#0",
        "tuple_param.2#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "result.2#0 (copy)",
        "tuple_param.2#0 (copy)"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "517": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0"
      ]
    },
    "518": {
      "op": "dig 4",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "result.4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "result.3#0 (copy)"
      ]
    },
    "520": {
      "op": "frame_dig -2",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.3#0 (copy)",
        "result.4#0",
        "tmp%4#0",
        "tuple_param.3#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "result.3#0 (copy)",
        "tuple_param.3#0 (copy)"
      ]
    },
    "522": {
      "op": "b==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "523": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0"
      ]
    },
    "524": {
      "op": "dig 5",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "result.4#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "result.4#0 (copy)"
      ]
    },
    "526": {
      "op": "frame_dig -1",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "result.4#0 (copy)",
        "tmp%6#0",
        "tuple_param.4#0 (copy)"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "result.4#0 (copy)",
        "tuple_param.4#0 (copy)"
      ]
    },
    "528": {
      "op": "==",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "529": {
      "op": "&&",
      "defined_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0",
        "tmp%8#0"
      ]
    },
    "530": {
      "op": "assert",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.1#0",
        "result.0#0"
      ]
    },
    "531": {
      "op": "uncover 1",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.2#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "533": {
      "op": "uncover 2",
      "stack_out": [
        "result.4#0",
        "result.3#0",
        "result.0#0",
        "result.1#0",
        "result.2#0"
      ]
    },
    "535": {
      "op": "uncover 3",
      "stack_out": [
        "result.4#0",
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0"
      ]
    },
    "537": {
      "op": "uncover 4",
      "stack_out": [
        "result.0#0",
        "result.1#0",
        "result.2#0",
        "result.3#0",
        "result.4#0"
      ]
    },
    "539": {
      "retsub": true,
      "op": "retsub"
    },
    "540": {
      "subroutine": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "params": {
        "args.0#0": "bytes",
        "args.1#0": "bytes"
      },
      "block": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "543": {
      "op": "b test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0"
    },
    "546": {
      "block": "test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "args.0#0 (copy)"
      ],
      "stack_out": [
        "args.0#0 (copy)"
      ]
    },
    "548": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "551": {
      "op": "assert",
      "stack_out": []
    },
    "552": {
      "op": "frame_dig -1",
      "defined_out": [
        "args.1#0 (copy)"
      ],
      "stack_out": [
        "args.1#0 (copy)"
      ]
    },
    "554": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "555": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "557": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "558": {
      "op": "assert",
      "stack_out": []
    },
    "559": {
      "op": "frame_dig -2",
      "stack_out": [
        "args.0#0 (copy)"
      ]
    },
    "561": {
      "op": "frame_dig -1",
      "stack_out": [
        "args.0#0 (copy)",
        "args.1#0 (copy)"
      ]
    },
    "563": {
      "retsub": true,
      "op": "retsub"
    }
  }
}