main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@3, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@4, * => block@5}
    block@3: // create_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let aggregate%get_bit%0#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let tmp%7#0: bool = aggregate%get_bit%0#0
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%9#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 4)
        let tmp%10#0: biguint = reinterpret_Encoded(uint512)%0#0
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%11#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = (txna ApplicationArgs 6)
        let aggregate%get_bit%1#0: bool = (getbit reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0u)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 1u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 9u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 75u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 11u 64u)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 75u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%item4%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%12#0: bool = aggregate%get_bit%1#0
        let tmp%13#0: uint64 = aggregate%item1%0#0
        let tmp%14#0: bytes = aggregate%item2%0#0
        let tmp%15#0: biguint = aggregate%extract%1#0
        let tmp%16#0: string = aggregate%item4%0#0
        let (tmp%17#0: bool, tmp%18#0: uint64, tmp%19#0: bytes, tmp%20#0: biguint, tmp%21#0: string) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0, tmp%16#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%17#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%encoded_bool%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%19#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%19#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 77u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 77u aggregate%data_length%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%20#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%20#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%21#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%21#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%concat%1#0
        let tmp%22#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0
        let tmp%23#0: bytes = (concat 0x151f7c75 tmp%22#0)
        (log tmp%23#0)
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0
        goto block@9
    block@4: // tuple_of_arc4_route_L19
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        let reinterpret_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = (txna ApplicationArgs 1)
        let aggregate%extract%2#0: bytes = (extract3 reinterpret_Encoded(uint8,uint8[32])%0#0 0u 1u)
        let aggregate%extract%3#0: bytes = (extract3 reinterpret_Encoded(uint8,uint8[32])%0#0 1u 32u)
        let tmp%28#0: Encoded(uint8) = aggregate%extract%2#0
        let tmp%29#0: Encoded(uint8[32]) = aggregate%extract%3#0
        let (tmp%30#0: Encoded(uint8), tmp%31#0: Encoded(uint8[32])) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(tmp%28#0, tmp%29#0)
        let aggregate%head%5#0: bytes = (concat 0x tmp%30#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 tmp%31#0)
        let aggregate%as_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = aggregate%head%6#0
        let tmp%32#0: Encoded(uint8,uint8[32]) = aggregate%as_Encoded(uint8,uint8[32])%0#0
        let tmp%33#0: bytes = (concat 0x151f7c75 tmp%32#0)
        (log tmp%33#0)
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0
        goto block@9
    block@5: // switch_case_default_L4
        goto block@6
    block@6: // switch_case_next_L4
        goto block@8
    block@7: // bare_routing_L4
        goto block@8
    block@8: // after_if_else_L4
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0
        goto block@9
    block@9: // after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: string, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: string) -> <bool, uint64, bytes, biguint, string>:
    block@0: // L5
        let result.0#0: bool = bool_param#0
        let result.1#0: uint64 = uint64_param#0
        let result.2#0: bytes = bytes_param#0
        let result.3#0: biguint = biguint_param#0
        let result.4#0: string = string_param#0
        let tmp%0#0: bool = (== result.0#0 tuple_param.0#0)
        let tmp%1#0: bool = (== result.1#0 tuple_param.1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== result.2#0 tuple_param.2#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (b== result.3#0 tuple_param.3#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== result.4#0 tuple_param.4#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        return result.0#0 result.1#0 result.2#0 result.3#0 result.4#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: Encoded(uint8), args.1: Encoded(uint8[32])) -> <Encoded(uint8), Encoded(uint8[32])>:
    block@0: // L19
        let tmp%0#0: uint64 = (len args.0#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len args.1#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return args.0#0 args.1#0