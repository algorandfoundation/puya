main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#1 NoOp)
        (assert tmp%1#0) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // call_NoOp_L4
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => block@4}
    block@3: // tuple_of_arc4_route_L19
        test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        goto block@8
    block@5: // create_NoOp_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@6, * => block@7}
    block@6: // create_route_L5
        test_cases.avm_types_in_abi.contract.TestContract.create[routing]()
        goto block@7
    block@7: // switch_case_next_L4
        goto block@8
    block@8: // after_if_else_L4
        exit 0u
    block@9: // after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for bool8
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%0#0
        let aggregate%get_bit%0#0: bool = (getbit as_Encoded(bool8)%0#0 0u)
        let tmp%1#0: bool = aggregate%get_bit%0#0
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint64)%0#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%4#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for (len+uint8[])
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%4#0
        let tmp%5#0: bytes = ((extract 2 0) as_Encoded(len+uint8[])%0#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 64u)
        (assert eq%3#0) // invalid number of bytes for uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%6#0
        let tmp%7#0: biguint = as_Encoded(uint512)%0#0
        let tmp%8#0: bytes = (txna ApplicationArgs 5)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%8#0 0u)
        let length%1#0: uint64 = aggregate%array_length%1#0
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%4#0: uint64 = (len tmp%8#0)
        let eq%4#0: bool = (== len%4#0 add%1#0)
        (assert eq%4#0) // invalid number of bytes for (len+utf8[])
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%8#0
        let tmp%9#0: string = ((extract 2 0) as_Encoded(len+utf8[])%0#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 6)
        let as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = tmp%10#0
        let aggregate%get_bit%1#0: bool = (getbit as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0u)
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 1u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 9u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 75u)
        let aggregate%substring3%0#0: bytes = (substring3 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 11u 64u)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 75u)
        let aggregate%len%0#0: uint64 = (len as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%item4%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%11#0: bool = aggregate%get_bit%1#0
        let tmp%12#0: uint64 = aggregate%item1%0#0
        let tmp%13#0: bytes = aggregate%item2%0#0
        let tmp%14#0: biguint = aggregate%extract%1#0
        let tmp%15#0: string = aggregate%item4%0#0
        let (tmp%16#0: bool, tmp%17#0: uint64, tmp%18#0: bytes, tmp%19#0: biguint, tmp%20#0: string) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%1#0, tmp%3#0, tmp%5#0, tmp%7#0, tmp%9#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%16#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%encoded_bool%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%17#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%18#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%18#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 77u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 77u aggregate%data_length%0#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%19#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%19#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%length%1#0: uint64 = (len tmp%20#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%20#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%concat%1#0
        let tmp%21#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
    block@0: // L19
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 33u)
        (assert eq%0#0) // invalid number of bytes for (uint8,uint8[32])
        let as_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = tmp%0#0
        let aggregate%extract%0#0: bytes = (extract3 as_Encoded(uint8,uint8[32])%0#0 0u 1u)
        let aggregate%extract%1#0: bytes = (extract3 as_Encoded(uint8,uint8[32])%0#0 1u 32u)
        let tmp%1#0: Encoded(uint8) = aggregate%extract%0#0
        let tmp%2#0: Encoded(uint8[32]) = aggregate%extract%1#0
        let (tmp%3#0: Encoded(uint8), tmp%4#0: Encoded(uint8[32])) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(tmp%1#0, tmp%2#0)
        let aggregate%head%0#0: bytes = (concat 0x tmp%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%4#0)
        let aggregate%as_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = aggregate%head%1#0
        let tmp%5#0: Encoded(uint8,uint8[32]) = aggregate%as_Encoded(uint8,uint8[32])%0#0
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: string, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: string) -> <bool, uint64, bytes, biguint, string>:
    block@0: // L5
        let result.0#0: bool = bool_param#0
        let result.1#0: uint64 = uint64_param#0
        let result.2#0: bytes = bytes_param#0
        let result.3#0: biguint = biguint_param#0
        let result.4#0: string = string_param#0
        let tmp%0#0: bool = (== result.0#0 tuple_param.0#0)
        let tmp%1#0: bool = (== result.1#0 tuple_param.1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== result.2#0 tuple_param.2#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (b== result.3#0 tuple_param.3#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== result.4#0 tuple_param.4#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        return result.0#0 result.1#0 result.2#0 result.3#0 result.4#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: Encoded(uint8), args.1: Encoded(uint8[32])) -> <Encoded(uint8), Encoded(uint8[32])>:
    block@0: // L19
        let tmp%0#0: uint64 = (len args.0#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len args.1#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return args.0#0 args.1#0