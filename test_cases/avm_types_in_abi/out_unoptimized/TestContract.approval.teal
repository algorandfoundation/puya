#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 64 32
    bytecblock 0x 0x151f7c75
    bytec_0 // ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7
    b main_abi_routing@2

main_abi_routing@2:
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xfb716652 // method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)"
    pushbytes 0x7ea64078 // method "tuple_of_arc4((uint8,address))(uint8,address)"
    uncover 2
    match main_create_route@3 main_tuple_of_arc4_route@4
    b main_switch_case_default@5

main_switch_case_default@5:
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@8

main_after_if_else@8:
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    intc_0 // 0
    bury 1
    b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9

main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9:
    return

main_tuple_of_arc4_route@4:
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_1 // 1
    extract3
    cover 1
    intc_1 // 1
    intc_3 // 32
    extract3
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    callsub tuple_of_arc4
    cover 1
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9

main_create_route@3:
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    dup
    intc_0 // 0
    getbit
    cover 1
    dup
    intc_1 // 1
    pushint 8 // 8
    extract3
    btoi
    cover 1
    dup
    pushint 9 // 9
    extract_uint16
    cover 1
    dup
    pushint 75 // 75
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    extract 2 0
    cover 1
    dup
    pushint 11 // 11
    intc_2 // 64
    extract3
    cover 1
    dup
    pushint 75 // 75
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 4
    cover 1
    uncover 4
    cover 1
    uncover 4
    cover 1
    uncover 4
    cover 1
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    uncover 9
    callsub create
    cover 4
    cover 3
    cover 2
    cover 1
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 77 // 77
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 77 // 77
    +
    cover 1
    dig 3
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 4
    b|
    uncover 3
    uncover 1
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 3
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    concat
    uncover 1
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9

main_bare_routing@7:
    b main_after_if_else@8


// test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: uint64, uint64_param: uint64, bytes_param: bytes, biguint_param: bytes, string_param: bytes, tuple_param.0: uint64, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: bytes, tuple_param.4: bytes) -> uint64, uint64, bytes, bytes, bytes:
create:
    // avm_types_in_abi/contract.py:5-14
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create(
    //     self,
    //     bool_param: bool,
    //     uint64_param: UInt64,
    //     bytes_param: Bytes,
    //     biguint_param: BigUInt,
    //     string_param: String,
    //     tuple_param: tuple[bool, UInt64, Bytes, BigUInt, String],
    // ) -> tuple[bool, UInt64, Bytes, BigUInt, String]:
    proto 10 5
    b create_block@0

create_block@0:
    // avm_types_in_abi/contract.py:15
    // result = (bool_param, uint64_param, bytes_param, biguint_param, string_param)
    frame_dig -10
    frame_dig -9
    cover 1
    frame_dig -8
    cover 2
    frame_dig -7
    cover 3
    frame_dig -6
    cover 4
    // avm_types_in_abi/contract.py:16
    // assert result == tuple_param
    dup
    frame_dig -5
    ==
    dig 2
    frame_dig -4
    ==
    &&
    dig 3
    frame_dig -3
    ==
    &&
    dig 4
    frame_dig -2
    b==
    &&
    dig 5
    frame_dig -1
    ==
    &&
    assert
    // avm_types_in_abi/contract.py:17
    // return result
    uncover 1
    uncover 2
    uncover 3
    uncover 4
    retsub


// test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: bytes, args.1: bytes) -> bytes, bytes:
tuple_of_arc4:
    // avm_types_in_abi/contract.py:19-22
    // @arc4.abimethod
    // def tuple_of_arc4(
    //     self, args: tuple[arc4.UInt8, arc4.Address]
    // ) -> tuple[arc4.UInt8, arc4.Address]:
    proto 2 2
    b tuple_of_arc4_block@0

tuple_of_arc4_block@0:
    // avm_types_in_abi/contract.py:23
    // assert args[0].bytes.length == 1
    frame_dig -2
    len
    intc_1 // 1
    ==
    assert
    // avm_types_in_abi/contract.py:24
    // assert args[1].bytes.length == 32
    frame_dig -1
    len
    intc_3 // 32
    ==
    assert
    // avm_types_in_abi/contract.py:25
    // return args
    frame_dig -2
    frame_dig -1
    retsub
