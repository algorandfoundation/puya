contract examples.avm_types_in_abi.contract.TestContract:
    program approval:
        subroutine examples.avm_types_in_abi.contract.TestContract.approval_program() -> uint64:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "create(bool,uint64,byte[],(bool,uint64,byte[]))(bool,uint64,byte[])" => block@2, * => block@5}
            block@2: // create_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                let tmp%5#0: uint64 = (! tmp%4#0)
                (assert tmp%5#0) // is creating
                let tmp%6#0: bytes = (txna ApplicationArgs 1)
                let tmp%7#0: uint64 = (getbit tmp%6#0 0u)
                let tmp%8#0: bytes = (txna ApplicationArgs 2)
                let tmp%9#0: uint64 = (btoi tmp%8#0)
                let tmp%10#0: bytes = (txna ApplicationArgs 3)
                let tmp%11#0: bytes = ((extract 2 0) tmp%10#0)
                let tmp%12#0: bytes = (txna ApplicationArgs 4)
                let is_true%13#0: uint64 = (getbit tmp%12#0 0u)
                let item0%14#0: any = (setbit 0x00 0u is_true%13#0)
                let item1%15#0: bytes = (extract3 tmp%12#0 1u 8u)
                let item_index%16#0: uint64 = (extract_uint16 tmp%12#0 9u)
                let item_length%17#0: uint64 = (extract_uint16 tmp%12#0 item_index%16#0)
                let item_length_plus_2%18#0: uint64 = (+ item_length%17#0 2u)
                let item2%19#0: bytes = (extract3 tmp%12#0 item_index%16#0 item_length_plus_2%18#0)
                let tmp%21#0: uint64 = (getbit item0%14#0 0u)
                let tmp%22#0: uint64 = (btoi item1%15#0)
                let tmp%23#0: bytes = ((extract 2 0) item2%19#0)
                let (awst_tmp%24.0#0: uint64, awst_tmp%24.1#0: uint64, awst_tmp%24.2#0: bytes) = examples.avm_types_in_abi.contract.TestContract.create(tmp%7#0, tmp%9#0, tmp%11#0, tmp%21#0, tmp%22#0, tmp%23#0)
                let tmp%25#0: any = (setbit 0x00 0u awst_tmp%24.0#0)
                let val_as_bytes%26#0: bytes = (itob awst_tmp%24.1#0)
                let tmp%28#0: uint64 = (len awst_tmp%24.2#0)
                let tmp%29#0: bytes = (itob tmp%28#0)
                let tmp%30#0: bytes = ((substring 6 8) tmp%29#0)
                let tmp%31#0: bytes = (concat tmp%30#0 awst_tmp%24.2#0)
                let encoded_tuple_buffer%33#1: bytes = (concat 0x tmp%25#0)
                let encoded_tuple_buffer%33#2: bytes = (concat encoded_tuple_buffer%33#1 val_as_bytes%26#0)
                let value_as_bytes%34#0: bytes = (itob 11u)
                let value_as_uint16%35#0: bytes = ((extract 6 2) value_as_bytes%34#0)
                let encoded_tuple_buffer%33#3: bytes = (concat encoded_tuple_buffer%33#2 value_as_uint16%35#0)
                let data_length%36#0: uint64 = (len tmp%31#0)
                let current_tail_offset%32#1: uint64 = (+ 11u data_length%36#0)
                let encoded_tuple_buffer%33#4: bytes = (concat encoded_tuple_buffer%33#3 tmp%31#0)
                let tmp%37#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%33#4)
                (log tmp%37#0)
                return 1u
            block@5: // after_if_else_L4
                fail // reject transaction
        
        subroutine examples.avm_types_in_abi.contract.TestContract.create(bool_param: uint64, uint64_param: uint64, bytes_param: bytes, tuple_param.0: uint64, tuple_param.1: uint64, tuple_param.2: bytes) -> <uint64, uint64, bytes>:
            block@0: // L6
                let tmp%0#0: uint64 = (== bool_param#0 tuple_param.0#0)
                goto tmp%0#0 ? block@1 : block@4
            block@1: // and_contd_L14
                let tmp%1#0: uint64 = (== uint64_param#0 tuple_param.1#0)
                goto tmp%1#0 ? block@2 : block@4
            block@2: // and_contd_L14
                let tmp%2#0: uint64 = (== bytes_param#0 tuple_param.2#0)
                goto tmp%2#0 ? block@3 : block@4
            block@3: // bool_true_L14
                let and_result%3#0: uint64 = 1u
                let and_result%3#3: uint64 = and_result%3#0
                goto block@5
            block@4: // bool_false_L14
                let and_result%3#1: uint64 = 0u
                let and_result%3#4: uint64 = and_result%3#1
                goto block@5
            block@5: // bool_merge_L14
                let and_result%3#5: uint64 = Ï†(and_result%3#3 <- block@3, and_result%3#4 <- block@4)
                let and_result%3#2: uint64 = and_result%3#5
                (assert and_result%3#2)
                return bool_param#0 uint64_param#0 bytes_param#0
    
    program clear-state:
        subroutine examples.avm_types_in_abi.contract.TestContract.clear_state_program() -> uint64:
            block@0: // L4
                return 1u