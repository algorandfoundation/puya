main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (! tmp%0#1)
        (assert tmp%1#0) // OnCompletion is not NoOp
        let tmp%2#0: bool = (txn ApplicationID)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // call_NoOp_L4
        let tmp%3#0: bytes = (txna ApplicationArgs 0)
        switch tmp%3#0 {method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => block@10}
    block@3: // tuple_of_arc4_route_L19
        test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]()
        goto block@10
    block@6: // create_NoOp_L4
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@7, * => block@10}
    block@7: // create_route_L5
        test_cases.avm_types_in_abi.contract.TestContract.create[routing]()
        goto block@10
    block@10: // after_if_else_L4
        fail

subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let bool_param#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let uint64_param#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let bytes_param#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let biguint_param#0: biguint = (txna ApplicationArgs 4)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let string_param#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = (txna ApplicationArgs 6)
        let tuple_param.0#0: bool = (getbit reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0u)
        let tuple_param.1#0: uint64 = (extract_uint64 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 1u)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 9u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 75u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let tuple_param.2#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let tuple_param.3#0: biguint = ((extract 11 64) reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 aggregate%extract_uint16%1#0 aggregate%len%0#0)
        let tuple_param.4#0: string = ((extract 2 0) aggregate%substring3%1#0)
        let tmp%0#1: bool = (== bool_param#0 tuple_param.0#0)
        let tmp%1#1: bool = (== uint64_param#0 tuple_param.1#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        let tmp%3#1: bool = (== bytes_param#0 tuple_param.2#0)
        let tmp%4#1: bool = (&& tmp%2#1 tmp%3#1)
        let tmp%5#1: bool = (b== biguint_param#0 tuple_param.3#0)
        let tmp%6#1: bool = (&& tmp%4#1 tmp%5#1)
        let tmp%7#1: bool = (== string_param#0 tuple_param.4#0)
        let tmp%8#1: bool = (&& tmp%6#1 tmp%7#1)
        (assert tmp%8#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u bool_param#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob uint64_param#0)
        let aggregate%head%1#0: bytes = (concat aggregate%encoded_bool%0#0 aggregate%val_as_bytes%0#0)
        let aggregate%length%0#0: uint64 = (len bytes_param#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 bytes_param#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x004d)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 77u aggregate%data_length%0#0)
        let aggregate%value_len%0#0: uint64 = (len biguint_param#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| biguint_param#0 aggregate%bzero%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%arc4_encoded%0#0)
        let aggregate%length%1#0: uint64 = (len string_param#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 string_param#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%encoded_value%1#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%16#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
    block@0: // L19
        let reinterpret_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = (txna ApplicationArgs 1)
        let args.0#0: Encoded(uint8) = ((extract 0 1) reinterpret_Encoded(uint8,uint8[32])%0#0)
        let args.1#0: Encoded(uint8[32]) = ((extract 1 32) reinterpret_Encoded(uint8,uint8[32])%0#0)
        let tmp%0#1: uint64 = (len args.0#0)
        let tmp%1#1: bool = (== tmp%0#1 1u)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len args.1#0)
        let tmp%3#1: bool = (== tmp%2#1 32u)
        (assert tmp%3#1)
        let tmp%5#0: bytes = (concat 0x151f7c75 reinterpret_Encoded(uint8,uint8[32])%0#0)
        (log tmp%5#0)
        exit 1u