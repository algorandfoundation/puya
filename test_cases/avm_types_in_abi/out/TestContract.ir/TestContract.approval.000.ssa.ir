main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (== tmp%0#0 NoOp)
        (assert tmp%1#0) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        goto tmp%3#0 ? block@1 : block@4
    block@1: // call_NoOp_L4
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "tuple_of_arc4((uint8,address))(uint8,address)" => block@2, * => block@3}
    block@2: // tuple_of_arc4_route_L19
        test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]()
        goto block@3
    block@3: // switch_case_next_L4
        goto block@7
    block@4: // create_NoOp_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@5, * => block@6}
    block@5: // create_route_L5
        test_cases.avm_types_in_abi.contract.TestContract.create[routing]()
        goto block@6
    block@6: // switch_case_next_L4
        goto block@7
    block@7: // after_if_else_L4
        exit 0u

subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for arc4.bool
        let as_Encoded(bool8)%0#0: Encoded(bool8) = tmp%0#0
        let tmp%1#0: bool = decode_bytes<bool>(as_Encoded(bool8)%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%2#0
        let tmp%3#0: uint64 = decode_bytes<uint64>(as_Encoded(uint64)%0#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let length%0#0: uint64 = array_len(tmp%4#0)
        let mul%0#0: uint64 = (* length%0#0 1u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = tmp%4#0
        let tmp%5#0: bytes = decode_bytes<bytes>(as_Encoded(len+uint8[])%0#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 64u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint512
        let as_Encoded(uint512)%0#0: Encoded(uint512) = tmp%6#0
        let tmp%7#0: biguint = decode_bytes<biguint>(as_Encoded(uint512)%0#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 5)
        let length%1#0: uint64 = array_len(tmp%8#0)
        let mul%1#0: uint64 = (* length%1#0 1u)
        let add%1#0: uint64 = (+ mul%1#0 2u)
        let len%4#0: uint64 = (len tmp%8#0)
        let eq%4#0: bool = (== len%4#0 add%1#0)
        (assert eq%4#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = tmp%8#0
        let tmp%9#0: string = decode_bytes<string>(as_Encoded(len+utf8[])%0#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 6)
        let extract_uint16%0#0: uint64 = (extract_uint16 tmp%10#0 9u) // on error: invalid tuple encoding
        let eq%5#0: bool = (== extract_uint16%0#0 77u)
        (assert eq%5#0) // invalid tail pointer at index 2 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))
        let tmp%11#0: Encoded(len+uint8[]) = extract_value(tmp%10#0, 2)
        let length%2#0: uint64 = array_len(tmp%11#0)
        let mul%2#0: uint64 = (* length%2#0 1u)
        let add%2#0: uint64 = (+ mul%2#0 2u)
        let add%3#0: uint64 = (+ 77u add%2#0)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%10#0 75u) // on error: invalid tuple encoding
        let eq%6#0: bool = (== extract_uint16%1#0 add%3#0)
        (assert eq%6#0) // invalid tail pointer at index 4 of (bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))
        let tmp%12#0: Encoded(len+utf8[]) = extract_value(tmp%10#0, 4)
        let length%3#0: uint64 = array_len(tmp%12#0)
        let mul%3#0: uint64 = (* length%3#0 1u)
        let add%4#0: uint64 = (+ mul%3#0 2u)
        let add%5#0: uint64 = (+ add%3#0 add%4#0)
        let len%5#0: uint64 = (len tmp%10#0)
        let eq%7#0: bool = (== len%5#0 add%5#0)
        (assert eq%7#0) // invalid number of bytes for arc4.tuple<arc4.bool,arc4.uint64,arc4.dynamic_array<arc4.uint8>,arc4.uint512,arc4.dynamic_array<arc4.uint8>>
        let as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = tmp%10#0
        let (tmp%13#0: bool, tmp%14#0: uint64, tmp%15#0: bytes, tmp%16#0: biguint, tmp%17#0: string) = decode_bytes<(bool,uint64,bytes,biguint,string,)>(as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let (tmp%18#0: bool, tmp%19#0: uint64, tmp%20#0: bytes, tmp%21#0: biguint, tmp%22#0: string) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%1#0, tmp%3#0, tmp%5#0, tmp%7#0, tmp%9#0, tmp%13#0, tmp%14#0, tmp%15#0, tmp%16#0, tmp%17#0)
        let tmp%23#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = bytes_encode<(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))>(tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0)
        let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
        (log tmp%24#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
    block@0: // L19
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 33u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint8,arc4.static_array<arc4.uint8, 32>>
        let as_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = tmp%0#0
        let (tmp%1#0: Encoded(uint8), tmp%2#0: Encoded(uint8[32])) = decode_bytes<(Encoded(uint8),Encoded(uint8[32]),)>(as_Encoded(uint8,uint8[32])%0#0)
        let (tmp%3#0: Encoded(uint8), tmp%4#0: Encoded(uint8[32])) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(tmp%1#0, tmp%2#0)
        let tmp%5#0: Encoded(uint8,uint8[32]) = bytes_encode<(uint8,uint8[32])>(tmp%3#0, tmp%4#0)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%5#0)
        (log tmp%6#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: string, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: string) -> <bool, uint64, bytes, biguint, string>:
    block@0: // L5
        let (result.0#0: bool, result.1#0: uint64, result.2#0: bytes, result.3#0: biguint, result.4#0: string) = (bool_param#0, uint64_param#0, bytes_param#0, biguint_param#0, string_param#0)
        let tmp%0#0: bool = (== result.0#0 tuple_param.0#0)
        let tmp%1#0: bool = (== result.1#0 tuple_param.1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== result.2#0 tuple_param.2#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (b== result.3#0 tuple_param.3#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== result.4#0 tuple_param.4#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        return result.0#0 result.1#0 result.2#0 result.3#0 result.4#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: Encoded(uint8), args.1: Encoded(uint8[32])) -> <Encoded(uint8), Encoded(uint8[32])>:
    block@0: // L19
        let tmp%0#0: uint64 = (len args.0#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len args.1#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return args.0#0 args.1#0