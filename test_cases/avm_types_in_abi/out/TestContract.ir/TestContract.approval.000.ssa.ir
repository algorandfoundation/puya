main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@2, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => block@4}
    block@2: // create_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%7#0: bool = (getbit reinterpret_bytes[1]%0#0 0u)
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%9#0: bytes = (txna ApplicationArgs 3)
        let tmp%10#0: bytes = ((extract 2 0) tmp%9#0)
        let reinterpret_bytes[64]%0#0: bytes[64] = (txna ApplicationArgs 4)
        let tmp%11#0: bytes = (txna ApplicationArgs 5)
        let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
        let tmp%13#0: bytes = (txna ApplicationArgs 6)
        let is_true%0#0: uint64 = (getbit tmp%13#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let item0%0#0: bool = (getbit encoded_bool%0#0 0u)
        let item1%0#0: bytes = (extract3 tmp%13#0 1u 8u) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (btoi item1%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%13#0 9u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%13#0 75u)
        let item2%0#0: bytes = (substring3 tmp%13#0 item_start_offset%0#0 item_end_offset%0#0)
        let item2%1#0: bytes = ((extract 2 0) item2%0#0)
        let item3%0#0: bytes = (extract3 tmp%13#0 11u 64u) // on error: Index access is out of bounds
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%13#0 75u)
        let item_end_offset%1#0: uint64 = (len tmp%13#0)
        let item4%0#0: bytes = (substring3 tmp%13#0 item_start_offset%1#0 item_end_offset%1#0)
        let item4%1#0: bytes = ((extract 2 0) item4%0#0)
        let (elements_to_encode%0#0: bool, elements_to_encode%1#0: uint64, elements_to_encode%2#0: bytes, elements_to_encode%3#0: biguint, elements_to_encode%4#0: bytes) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%7#0, tmp%8#0, tmp%10#0, reinterpret_bytes[64]%0#0, tmp%12#0, item0%0#0, item1%1#0, item2%1#0, item3%0#0, item4%1#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u elements_to_encode%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%1#0)
        let length%0#0: uint64 = (len elements_to_encode%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%2#0)
        let value_len%0#0: uint64 = (len elements_to_encode%3#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| elements_to_encode%3#0 bzero%0#0)
        let length%1#0: uint64 = (len elements_to_encode%4#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 elements_to_encode%4#0)
        let current_tail_offset%0#0: uint64 = 77u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 encoded_bool%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%0#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 arc4_encoded%0#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%2#0: uint64 = (+ current_tail_offset%1#0 data_length%1#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        let tmp%14#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
        (log tmp%14#0)
        return 1u
    block@3: // tuple_of_arc4_route_L19
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_bytes[33]%0#0: bytes[33] = (txna ApplicationArgs 1)
        let item0%1#0: bytes = (extract3 reinterpret_bytes[33]%0#0 0u 1u) // on error: Index access is out of bounds
        let item1%2#0: bytes = (extract3 reinterpret_bytes[33]%0#0 1u 32u) // on error: Index access is out of bounds
        let (elements_to_encode%5#0: bytes[1], elements_to_encode%6#0: bytes[32]) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(item0%1#0, item1%2#0)
        let current_tail_offset%3#0: uint64 = 33u
        let encoded_tuple_buffer%8#0: bytes[0] = 0x
        let encoded_tuple_buffer%9#0: bytes = (concat encoded_tuple_buffer%8#0 elements_to_encode%5#0)
        let encoded_tuple_buffer%10#0: bytes = (concat encoded_tuple_buffer%9#0 elements_to_encode%6#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%10#0)
        (log tmp%19#0)
        return 1u
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@7
    block@6: // bare_routing_L4
        goto block@7
    block@7: // after_if_else_L4
        return 0u

subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: bytes, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: bytes) -> <bool, uint64, bytes, biguint, bytes>:
    block@0: // L5
        let (result.0#0: bool, result.1#0: uint64, result.2#0: bytes, result.3#0: biguint, result.4#0: bytes) = (bool_param#0, uint64_param#0, bytes_param#0, biguint_param#0, string_param#0)
        let tmp%0#0: bool = (== result.0#0 tuple_param.0#0)
        let tmp%1#0: bool = (== result.1#0 tuple_param.1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== result.2#0 tuple_param.2#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (b== result.3#0 tuple_param.3#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== result.4#0 tuple_param.4#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        return result.0#0 result.1#0 result.2#0 result.3#0 result.4#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: bytes[1], args.1: bytes[32]) -> <bytes[1], bytes[32]>:
    block@0: // L19
        let tmp%0#0: uint64 = (len args.0#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len args.1#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return args.0#0 args.1#0