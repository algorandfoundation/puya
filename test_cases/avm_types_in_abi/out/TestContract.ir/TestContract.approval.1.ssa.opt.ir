main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@3, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@4, * => block@8}
    block@3: // create_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let tmp%7#0: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let tmp%9#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 4)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let tmp%10#0: bytes = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0: Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[])) = (txna ApplicationArgs 6)
        let is_true%0#0: uint64 = (getbit reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 0u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let item0%0#0: bool = (getbit encoded_bool%0#0 0u)
        let item1%0#0: bytes = ((extract 1 8) reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 1u)
        let item_start_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 9u)
        let item_end_offset%0#0: uint64 = (extract_uint16 reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 75u)
        let item2%0#0: bytes = (substring3 reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item2%1#0: bytes = ((extract 2 0) item2%0#0)
        let item3%0#0: bytes = ((extract 11 64) reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0) // on error: Index access is out of bounds
        let item_end_offset%1#0: uint64 = (len reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0)
        let item4%0#0: bytes = (substring3 reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 item_end_offset%0#0 item_end_offset%1#0)
        let item4%1#0: bytes = ((extract 2 0) item4%0#0)
        let (to_encode%0#0: bool, to_encode%1#0: uint64, to_encode%2#0: bytes, to_encode%3#0: biguint, to_encode%4#0: string) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%7#0, tmp%8#0, tmp%9#0, reinterpret_Encoded(uint512)%0#0, tmp%10#0, item0%0#0, item1%1#0, item2%1#0, item3%0#0, item4%1#0)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u to_encode%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%1#0)
        let encoded%1#0: Encoded((bool1,uint64)) = (concat encoded_bit%0#0 val_as_bytes%0#0)
        let length%0#0: uint64 = (len to_encode%2#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%2#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%0#0: uint64 = (+ 77u data_length%0#0)
        let as_bytes%1#0: bytes[8] = (itob 77u)
        let offset_as_uint16%0#0: bytes = 0x004d
        let encoded%2#0: Encoded((bool1,uint64,len+uint8[])) = (concat encoded%1#0 0x004d)
        let value_len%0#0: uint64 = (len to_encode%3#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| to_encode%3#0 bzero%0#0)
        let encoded%3#0: Encoded((bool1,uint64,len+uint8[],uint512)) = (concat encoded%2#0 arc4_encoded%0#0)
        let length%1#0: uint64 = (len to_encode%4#0)
        let as_bytes%2#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%4#0)
        let tail%1#0: bytes = (concat encoded_value%0#0 encoded_value%1#0)
        let as_bytes%3#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded%4#0: Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[])) = (concat encoded%3#0 offset_as_uint16%1#0)
        let encoded%5#0: bytes = (concat encoded%4#0 tail%1#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded%5#0)
        (log tmp%11#0)
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@9
    block@4: // tuple_of_arc4_route_L19
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint8,uint8[32]))%0#0: Encoded((uint8,uint8[32])) = (txna ApplicationArgs 1)
        let item0%1#0: bytes = ((extract 0 1) reinterpret_Encoded((uint8,uint8[32]))%0#0) // on error: Index access is out of bounds
        let item1%2#0: bytes = ((extract 1 32) reinterpret_Encoded((uint8,uint8[32]))%0#0) // on error: Index access is out of bounds
        let (to_encode%5#0: Encoded(uint8), to_encode%6#0: Encoded(uint8[32])) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(item0%1#0, item1%2#0)
        let encoded%7#0: Encoded((uint8,uint8[32])) = (concat to_encode%5#0 to_encode%6#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 encoded%7#0)
        (log tmp%16#0)
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@9
    block@8: // after_if_else_L4
        let test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@9
    block@9: // after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0 <- block@3, test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#1 <- block@4, test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#2 <- block@8)
        return tmp%0#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: string, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: string) -> <bool, uint64, bytes, biguint, string>:
    block@0: // L5
        let tmp%0#0: bool = (== bool_param#0 tuple_param.0#0)
        let tmp%1#0: bool = (== uint64_param#0 tuple_param.1#0)
        let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
        let tmp%3#0: bool = (== bytes_param#0 tuple_param.2#0)
        let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
        let tmp%5#0: bool = (b== biguint_param#0 tuple_param.3#0)
        let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
        let tmp%7#0: bool = (== string_param#0 tuple_param.4#0)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        return bool_param#0 uint64_param#0 bytes_param#0 biguint_param#0 string_param#0

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: Encoded(uint8), args.1: Encoded(uint8[32])) -> <Encoded(uint8), Encoded(uint8[32])>:
    block@0: // L19
        let tmp%0#0: uint64 = (len args.0#0)
        let tmp%1#0: bool = (== tmp%0#0 1u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (len args.1#0)
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0)
        return args.0#0 args.1#0