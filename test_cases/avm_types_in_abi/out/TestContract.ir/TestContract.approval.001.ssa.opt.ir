main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20][tmp%4#0] else goto block@20
    block@2: // switch_case_0_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => block@5}
    block@3: // tuple_of_arc4_route_L19
        test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]()
        goto block@5
    block@5: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@7, * => block@9}
    block@7: // create_route_L5
        test_cases.avm_types_in_abi.contract.TestContract.create[routing]()
        goto block@9
    block@9: // switch_case_next_L4
        fail // this contract does not implement the given ABI method for create NoOp
    block@20: // switch_case_default_L4
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
    block@0: // L5
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 1)
        let bool_param#0: bool = decode_bytes<bool>(reinterpret_Encoded(bool8)%0#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let uint64_param#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 3)
        let bytes_param#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(uint512)%0#0: Encoded(uint512) = (txna ApplicationArgs 4)
        let biguint_param#0: biguint = decode_bytes<biguint>(reinterpret_Encoded(uint512)%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 5)
        let string_param#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = (txna ApplicationArgs 6)
        let (tuple_param.0#0: bool, tuple_param.1#0: uint64, tuple_param.2#0: bytes, tuple_param.3#0: biguint, tuple_param.4#0: string) = decode_bytes<(bool,uint64,bytes,biguint,string,)>(reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0)
        let tmp%0#1: bool = (== bool_param#0 tuple_param.0#0)
        let tmp%1#1: bool = (== uint64_param#0 tuple_param.1#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        let tmp%3#1: bool = (== bytes_param#0 tuple_param.2#0)
        let tmp%4#1: bool = (&& tmp%2#1 tmp%3#1)
        let tmp%5#1: bool = (b== biguint_param#0 tuple_param.3#0)
        let tmp%6#1: bool = (&& tmp%4#1 tmp%5#1)
        let tmp%7#1: bool = (== string_param#0 tuple_param.4#0)
        let tmp%8#1: bool = (&& tmp%6#1 tmp%7#1)
        (assert tmp%8#1)
        let tmp%15#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = bytes_encode<(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))>(bool_param#0, uint64_param#0, bytes_param#0, biguint_param#0, string_param#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
    block@0: // L19
        let reinterpret_Encoded(uint8,uint8[32])%0#0: Encoded(uint8,uint8[32]) = (txna ApplicationArgs 1)
        let (args.0#0: Encoded(uint8), args.1#0: Encoded(uint8[32])) = decode_bytes<(Encoded(uint8),Encoded(uint8[32]),)>(reinterpret_Encoded(uint8,uint8[32])%0#0)
        let tmp%0#1: uint64 = (len args.0#0)
        let tmp%1#1: bool = (== tmp%0#1 1u)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len args.1#0)
        let tmp%3#1: bool = (== tmp%2#1 32u)
        (assert tmp%3#1)
        let tmp%4#0: Encoded(uint8,uint8[32]) = reinterpret_Encoded(uint8,uint8[32])%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u