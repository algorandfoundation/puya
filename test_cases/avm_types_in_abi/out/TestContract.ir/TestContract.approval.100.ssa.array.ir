main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (! tmp%0#1)
        (assert tmp%1#0) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        goto tmp%2#0 ? block@2 : block@5
    block@2: // call_NoOp_L4
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => block@8}
    block@3: // tuple_of_arc4_route_L19
        test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]()
        goto block@8
    block@5: // create_NoOp_L4
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@6, * => block@8}
    block@6: // create_route_L5
        test_cases.avm_types_in_abi.contract.TestContract.create[routing]()
        goto block@8
    block@8: // after_if_else_L4
        fail

subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for bool8
        let aggregate%get_bit%0#0: bool = (getbit tmp%0#0 0u)
        let bool_param#0: bool = aggregate%get_bit%0#0
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let uint64_param#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 tmp%4#0 0u)
        let length%0#0: uint64 = aggregate%array_length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 add%0#0)
        (assert eq%2#0) // invalid number of bytes for (len+uint8[])
        let bytes_param#0: bytes = ((extract 2 0) tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%6#0)
        let eq%3#0: bool = (== len%3#0 64u)
        (assert eq%3#0) // invalid number of bytes for uint512
        let biguint_param#0: biguint = tmp%6#0
        let tmp%8#0: bytes = (txna ApplicationArgs 5)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 tmp%8#0 0u)
        let length%1#0: uint64 = aggregate%array_length%1#0
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%4#0: uint64 = (len tmp%8#0)
        let eq%4#0: bool = (== len%4#0 add%1#0)
        (assert eq%4#0) // invalid number of bytes for (len+utf8[])
        let string_param#0: string = ((extract 2 0) tmp%8#0)
        let tmp%10#0: bytes = (txna ApplicationArgs 6)
        let aggregate%get_bit%1#0: bool = (getbit tmp%10#0 0u)
        let aggregate%extract%0#0: bytes = (extract3 tmp%10#0 1u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 tmp%10#0 9u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 tmp%10#0 75u)
        let aggregate%substring3%0#0: bytes = (substring3 tmp%10#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%item2%0#0: bytes = ((extract 2 0) aggregate%substring3%0#0)
        let aggregate%extract%1#0: bytes = (extract3 tmp%10#0 11u 64u)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 tmp%10#0 75u)
        let aggregate%len%0#0: uint64 = (len tmp%10#0)
        let aggregate%substring3%1#0: bytes = (substring3 tmp%10#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let aggregate%item4%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let (tuple_param.0#0: bool, tuple_param.1#0: uint64, tuple_param.2#0: bytes, tuple_param.3#0: biguint, tuple_param.4#0: string) = (aggregate%get_bit%1#0, aggregate%item1%0#0, aggregate%item2%0#0, aggregate%extract%1#0, aggregate%item4%0#0)
        let tmp%0#1: bool = (== bool_param#0 tuple_param.0#0)
        let tmp%1#1: bool = (== uint64_param#0 tuple_param.1#0)
        let tmp%2#1: bool = (&& tmp%0#1 tmp%1#1)
        let tmp%3#1: bool = (== bytes_param#0 tuple_param.2#0)
        let tmp%4#1: bool = (&& tmp%2#1 tmp%3#1)
        let tmp%5#1: bool = (b== biguint_param#0 tuple_param.3#0)
        let tmp%6#1: bool = (&& tmp%4#1 tmp%5#1)
        let tmp%7#1: bool = (== string_param#0 tuple_param.4#0)
        let tmp%8#1: bool = (&& tmp%6#1 tmp%7#1)
        (assert tmp%8#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u bool_param#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%encoded_bool%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob uint64_param#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len bytes_param#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 bytes_param#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 77u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 77u aggregate%data_length%0#0)
        let aggregate%value_len%0#0: uint64 = (len biguint_param#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| biguint_param#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%length%1#0: uint64 = (len string_param#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 string_param#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%1#0)
        let aggregate%data_length%1#0: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%current_tail_offset%1#0: uint64 = (+ aggregate%current_tail_offset%0#0 aggregate%data_length%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%concat%1#0
        let tmp%21#0: Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[])) = aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        exit 1u

subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
    block@0: // L19
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 33u)
        (assert eq%0#0) // invalid number of bytes for (uint8,uint8[32])
        let aggregate%extract%0#0: bytes = (extract3 tmp%0#0 0u 1u)
        let aggregate%extract%1#0: bytes = (extract3 tmp%0#0 1u 32u)
        let (args.0#0: Encoded(uint8), args.1#0: Encoded(uint8[32])) = (aggregate%extract%0#0, aggregate%extract%1#0)
        let tmp%0#1: uint64 = (len args.0#0)
        let tmp%1#1: bool = (== tmp%0#1 1u)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (len args.1#0)
        let tmp%3#1: bool = (== tmp%2#1 32u)
        (assert tmp%3#1)
        let tmp%6#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%6#0)
        exit 1u