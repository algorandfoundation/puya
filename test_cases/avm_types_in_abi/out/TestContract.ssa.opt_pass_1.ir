contract test_cases.avm_types_in_abi.contract.TestContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L-1
                let tmp%0#0: bool = test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@7
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@2, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@3, * => return 0u}
            block@2: // create_route_L5
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0) // is creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bool = (getbit tmp%7#0 0u)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: uint64 = (btoi tmp%9#0)
                let tmp%11#0: bytes = (txna ApplicationArgs 3)
                let tmp%12#0: bytes = ((extract 2 0) tmp%11#0)
                let tmp%13#0: bytes = (txna ApplicationArgs 4)
                let tmp%14#0: bytes = (txna ApplicationArgs 5)
                let tmp%15#0: bytes = ((extract 2 0) tmp%14#0)
                let tmp%16#0: bytes = (txna ApplicationArgs 6)
                let is_true%0#0: uint64 = (getbit tmp%16#0 0u)
                let encoded_bool%0#0: bytes = (setbit 0x00 0u is_true%0#0)
                let item1%0#0: bytes = ((extract 1 8) tmp%16#0) // on error: Index access is out of bounds
                let item_start_offset%0#0: uint64 = (extract_uint16 tmp%16#0 9u)
                let item_end_offset%0#0: uint64 = (extract_uint16 tmp%16#0 75u)
                let item2%0#0: bytes = (substring3 tmp%16#0 item_start_offset%0#0 item_end_offset%0#0)
                let item3%0#0: bytes = ((extract 11 64) tmp%16#0) // on error: Index access is out of bounds
                let item_end_offset%1#0: uint64 = (len tmp%16#0)
                let item4%0#0: bytes = (substring3 tmp%16#0 item_end_offset%0#0 item_end_offset%1#0)
                let tmp%17#0: bool = (getbit encoded_bool%0#0 0u)
                let tmp%18#0: uint64 = (btoi item1%0#0)
                let tmp%19#0: bytes = ((extract 2 0) item2%0#0)
                let tmp%20#0: bytes = ((extract 2 0) item4%0#0)
                let (awst_tmp%0#0: bool, awst_tmp%1#0: uint64, awst_tmp%2#0: bytes, awst_tmp%3#0: biguint, awst_tmp%4#0: bytes) = test_cases.avm_types_in_abi.contract.TestContract.create(tmp%8#0, tmp%10#0, tmp%12#0, tmp%13#0, tmp%15#0, tmp%17#0, tmp%18#0, tmp%19#0, item3%0#0, tmp%20#0)
                let encoded_bool%1#0: bytes = (setbit 0x00 0u awst_tmp%0#0)
                let val_as_bytes%0#0: bytes = (itob awst_tmp%1#0)
                let length%0#0: uint64 = (len awst_tmp%2#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 awst_tmp%2#0)
                let len_%0#0: uint64 = (len awst_tmp%3#0)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%21#0: bytes = (b| awst_tmp%3#0 b_zeros%0#0)
                let length%1#0: uint64 = (len awst_tmp%4#0)
                let as_bytes%1#0: bytes = (itob length%1#0)
                let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
                let encoded_value%1#0: bytes = (concat length_uint16%1#0 awst_tmp%4#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_bool%1#0 val_as_bytes%0#0)
                let offset_as_uint16%0#0: bytes = 0x004d
                let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%0#0)
                let data_length%0#0: uint64 = (len encoded_value%0#0)
                let current_tail_offset%1#0: uint64 = (+ 77u data_length%0#0)
                let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 tmp%21#0)
                let as_bytes%3#0: bytes = (itob current_tail_offset%1#0)
                let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 offset_as_uint16%1#0)
                let data_length%1#0: uint64 = (len encoded_value%1#0)
                let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 encoded_value%0#0)
                let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
                let tmp%22#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%7#0)
                (log tmp%22#0)
                return 1u
            block@3: // tuple_of_arc4_route_L19
                let tmp%23#0: uint64 = (txn OnCompletion)
                let tmp%24#0: bool = (! tmp%23#0)
                (assert tmp%24#0) // OnCompletion is NoOp
                let tmp%25#0: uint64 = (txn ApplicationID)
                (assert tmp%25#0) // is not creating
                let tmp%27#0: bytes = (txna ApplicationArgs 1)
                let item0%1#0: bytes = ((extract 0 1) tmp%27#0) // on error: Index access is out of bounds
                let item1%1#0: bytes = ((extract 1 32) tmp%27#0) // on error: Index access is out of bounds
                let (awst_tmp%5#0: bytes, awst_tmp%6#0: bytes) = test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(item0%1#0, item1%1#0)
                let encoded_tuple_buffer%10#0: bytes = (concat awst_tmp%5#0 awst_tmp%6#0)
                let tmp%28#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%10#0)
                (log tmp%28#0)
                return 1u
            block@7: // after_if_else_L4
                return 0u
        
        subroutine test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: bool, uint64_param: uint64, bytes_param: bytes, biguint_param: biguint, string_param: bytes, tuple_param.0: bool, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: biguint, tuple_param.4: bytes) -> <bool, uint64, bytes, biguint, bytes>:
            block@0: // L5
                let tmp%0#0: bool = (== bool_param#0 tuple_param.0#0)
                let tmp%1#0: bool = (== uint64_param#0 tuple_param.1#0)
                let tmp%2#0: bool = (&& tmp%0#0 tmp%1#0)
                let tmp%3#0: bool = (== bytes_param#0 tuple_param.2#0)
                let tmp%4#0: bool = (&& tmp%2#0 tmp%3#0)
                let tmp%5#0: bool = (b== biguint_param#0 tuple_param.3#0)
                let tmp%6#0: bool = (&& tmp%4#0 tmp%5#0)
                let tmp%7#0: bool = (== string_param#0 tuple_param.4#0)
                let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
                (assert tmp%8#0)
                return bool_param#0 uint64_param#0 bytes_param#0 biguint_param#0 string_param#0
        
        subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: bytes, args.1: bytes) -> <bytes, bytes>:
            block@0: // L19
                let tmp%0#0: uint64 = (len args.0#0)
                let tmp%1#0: bool = (== tmp%0#0 1u)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (len args.1#0)
                let tmp%3#0: bool = (== tmp%2#0 32u)
                (assert tmp%3#0)
                return args.0#0 args.1#0
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u