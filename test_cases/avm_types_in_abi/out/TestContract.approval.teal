#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 64
    bytecblock 0x151f7c75
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz main_create_NoOp@8
    pushbytes 0x7ea64078 // method "tuple_of_arc4((uint8,address))(uint8,address)"
    txna ApplicationArgs 0
    match tuple_of_arc4
    err

main_create_NoOp@8:
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    pushbytes 0xfb716652 // method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)"
    txna ApplicationArgs 0
    match create
    err


// test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
create:
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    dup
    intc_1 // 0
    getbit
    dig 1
    intc_0 // 1
    extract_uint64
    dig 2
    pushint 9 // 9
    extract_uint16
    dig 3
    pushint 75 // 75
    extract_uint16
    dig 4
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 4
    extract 11 64
    dig 5
    len
    uncover 6
    uncover 4
    uncover 2
    substring3
    extract 2 0
    // avm_types_in_abi/contract.py:16
    // assert result == tuple_param
    dig 9
    uncover 5
    ==
    dig 8
    uncover 5
    ==
    &&
    dig 6
    uncover 4
    ==
    &&
    dig 4
    uncover 3
    b==
    &&
    dig 2
    uncover 2
    ==
    &&
    assert
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    pushbytes 0x00
    intc_1 // 0
    uncover 6
    setbit
    uncover 4
    itob
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    pushbytes 0x004d
    concat
    dig 1
    len
    pushint 77 // 77
    +
    dig 4
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 5
    b|
    uncover 2
    swap
    concat
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    itob
    extract 6 2
    uncover 2
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
tuple_of_arc4:
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    extract 0 1
    dig 1
    extract 1 32
    // avm_types_in_abi/contract.py:23
    // assert args[0].bytes.length == 1
    swap
    len
    intc_0 // 1
    ==
    assert
    // avm_types_in_abi/contract.py:24
    // assert args[1].bytes.length == 32
    len
    pushint 32 // 32
    ==
    assert
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
