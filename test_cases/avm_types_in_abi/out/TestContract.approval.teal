#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 64
    bytecblock 0x151f7c75 0x00
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@8
    pushbytess 0xfb716652 0x7ea64078 // method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)", method "tuple_of_arc4((uint8,address))(uint8,address)"
    txna ApplicationArgs 0
    match main_create_route@3 main_tuple_of_arc4_route@4

main_after_if_else@8:
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    intc_0 // 0
    return

main_tuple_of_arc4_route@4:
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    extract 0 1 // on error: Index access is out of bounds
    swap
    extract 1 32 // on error: Index access is out of bounds
    // avm_types_in_abi/contract.py:19
    // @arc4.abimethod
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_route@3:
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // avm_types_in_abi/contract.py:4
    // class TestContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    dup
    intc_0 // 0
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    dig 1
    intc_1 // 1
    extract_uint64
    dig 2
    pushint 9 // 9
    extract_uint16
    dig 3
    pushint 75 // 75
    extract_uint16
    dig 4
    uncover 2
    dig 2
    substring3
    extract 2 0
    dig 4
    extract 11 64 // on error: Index access is out of bounds
    dig 5
    len
    uncover 6
    uncover 4
    uncover 2
    substring3
    extract 2 0
    // avm_types_in_abi/contract.py:5
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    callsub create
    bytec_1 // 0x00
    intc_0 // 0
    uncover 6
    setbit
    uncover 4
    itob
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    dig 4
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    uncover 5
    b|
    dig 4
    len
    itob
    extract 6 2
    uncover 5
    concat
    uncover 4
    uncover 4
    concat
    pushbytes 0x004d
    concat
    dig 3
    len
    pushint 77 // 77
    +
    swap
    uncover 3
    concat
    swap
    itob
    extract 6 2
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: uint64, uint64_param: uint64, bytes_param: bytes, biguint_param: bytes, string_param: bytes, tuple_param.0: uint64, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: bytes, tuple_param.4: bytes) -> uint64, uint64, bytes, bytes, bytes:
create:
    // avm_types_in_abi/contract.py:5-14
    // @arc4.abimethod(allow_actions=["NoOp"], create="require")
    // def create(
    //     self,
    //     bool_param: bool,
    //     uint64_param: UInt64,
    //     bytes_param: Bytes,
    //     biguint_param: BigUInt,
    //     string_param: String,
    //     tuple_param: tuple[bool, UInt64, Bytes, BigUInt, String],
    // ) -> tuple[bool, UInt64, Bytes, BigUInt, String]:
    proto 10 5
    // avm_types_in_abi/contract.py:16
    // assert result == tuple_param
    frame_dig -10
    frame_dig -5
    ==
    frame_dig -9
    frame_dig -4
    ==
    &&
    frame_dig -8
    frame_dig -3
    ==
    &&
    frame_dig -7
    frame_dig -2
    b==
    &&
    frame_dig -6
    frame_dig -1
    ==
    &&
    assert
    // avm_types_in_abi/contract.py:17
    // return result
    frame_dig -10
    frame_dig -9
    frame_dig -8
    frame_dig -7
    frame_dig -6
    retsub
