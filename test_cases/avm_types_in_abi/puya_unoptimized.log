debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=0, target_avm_version=11, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, optimizations_override=immutabledict({}), expand_all_bytes=False, paths=['avm_types_in_abi'], resource_encoding='value', output_awst=False, output_awst_json=False, output_source_annotations_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Terminated block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@5
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let required_budget_with_buffer#3: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@3
debug: Added required_budget_with_buffer#3 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3) in block@3
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let required_budget_with_buffer#4: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@4
debug: Added required_budget_with_buffer#4 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3, required_budget_with_buffer#4 <- block@4) in block@4
debug: Added required_budget_with_buffer#2 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#2 <- block@5) in block@5
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@5
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let fee_source#3: uint64 = undefined while trying to resolve 'fee_source' in block@3
debug: Added fee_source#3 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3) in block@3
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let fee_source#4: uint64 = undefined while trying to resolve 'fee_source' in block@4
debug: Added fee_source#4 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3, fee_source#4 <- block@4) in block@4
debug: Added fee_source#2 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#2 <- block@5) in block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replaced trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1
debug: Deleting Phi assignment: let fee_source#3: uint64 = φ(fee_source#1 <- block@2)
debug: Replaced trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1 in current definition for 1 blocks
debug: Sealing block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4)
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 5 blocks
debug: Added fee_source#1 to Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1
debug: Deleting Phi assignment: let fee_source#4: uint64 = φ(fee_source#1 <- block@2)
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4)
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0 in current definition for 5 blocks
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'value_internal%1' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let value_internal%1#1: uint64 = undefined while trying to resolve 'value_internal%1' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'head_and_tail_length' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_and_tail_length#1: uint64 = undefined while trying to resolve 'head_and_tail_length' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added value_internal%1#0 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4) in block@4
debug: Added value_internal%1#2 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4, value_internal%1#2 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added head_and_tail_length#0 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4) in block@4
debug: Added head_and_tail_length#1 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0
debug: Deleting Phi assignment: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7)
debug: Replaced trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.create
debug: Sealing block@0
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
debug: Terminated block@0
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: removing unused subroutine algopy.arc4.ARC4Contract.approval_program
debug: removing unused subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: optimizing approval program of test_cases.avm_types_in_abi.contract.TestContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__ in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Unused subroutines removed
debug: Begin optimization pass 2/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: optimizing clear program of test_cases.avm_types_in_abi.contract.TestContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.avm_types_in_abi.contract.TestContract
debug: lowering array IR nodes in clear program of test_cases.avm_types_in_abi.contract.TestContract
debug: optimizing approval program of test_cases.avm_types_in_abi.contract.TestContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable aggregate%current_tail_offset%1#0
debug: Removing unused variable aggregate%data_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Begin optimization pass 2/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 2, ending loop
debug: optimizing clear program of test_cases.avm_types_in_abi.contract.TestContract at level 0
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.avm_types_in_abi.contract.TestContract
debug: auto reserving slots in algopy.arc4.ARC4Contract.approval_program, []
avm_types_in_abi/contract.py:5:6 debug: auto reserving slots in test_cases.avm_types_in_abi.contract.TestContract.create[routing], []
avm_types_in_abi/contract.py:19:6 debug: auto reserving slots in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing], []
avm_types_in_abi/contract.py:5 debug: auto reserving slots in test_cases.avm_types_in_abi.contract.TestContract.create, []
avm_types_in_abi/contract.py:19 debug: auto reserving slots in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4, []
debug: Slot allocation not required
debug: removing local static slots in clear program of test_cases.avm_types_in_abi.contract.TestContract
debug: auto reserving slots in algopy.arc4.ARC4Contract.clear_state_program, []
debug: Slot allocation not required
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.approval_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.approval_program
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.create[routing] using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.create[routing]
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing] using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.avm_types_in_abi.contract.TestContract.create
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.create using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.create
debug: Performing post-SSA optimizations at level 0
debug: Performing SSA IR destructuring for test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Performing post-SSA optimizations at level 0
debug: Output IR to avm_types_in_abi/out_unoptimized/TestContract.ir/TestContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.clear_state_program
debug: Performing post-SSA optimizations at level 0
debug: Output IR to avm_types_in_abi/out_unoptimized/TestContract.ir/TestContract.clear.400.destructured.ir
debug: Inserted main_block@1.ops[1]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_block@1.ops[3]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_block@1.ops[6]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_block@1.ops[8]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_block@1.ops[11]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_block@1.ops[13]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_block@1.ops[16]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_block@1.ops[18]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_call_NoOp@2.ops[1]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_call_NoOp@2.ops[4]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_create_NoOp@5.ops[1]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_create_NoOp@5.ops[4]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted create_block@0.ops[1]: 'l-store-copy reinterpret_Encoded(bool8)%0#0 0'
debug: Replaced create_block@0.ops[3]: 'v-load reinterpret_Encoded(bool8)%0#0' with 'l-load reinterpret_Encoded(bool8)%0#0'
debug: Inserted create_block@0.ops[6]: 'l-store-copy aggregate%get_bit%0#0 0'
debug: Replaced create_block@0.ops[8]: 'v-load aggregate%get_bit%0#0' with 'l-load aggregate%get_bit%0#0'
debug: Inserted create_block@0.ops[11]: 'l-store-copy reinterpret_Encoded(uint64)%0#0 0'
debug: Replaced create_block@0.ops[13]: 'v-load reinterpret_Encoded(uint64)%0#0' with 'l-load reinterpret_Encoded(uint64)%0#0'
debug: Inserted create_block@0.ops[17]: 'l-store-copy reinterpret_Encoded(len+uint8[])%0#0 0'
debug: Replaced create_block@0.ops[19]: 'v-load reinterpret_Encoded(len+uint8[])%0#0' with 'l-load reinterpret_Encoded(len+uint8[])%0#0'
debug: Inserted create_block@0.ops[23]: 'l-store-copy reinterpret_Encoded(uint512)%0#0 0'
debug: Replaced create_block@0.ops[25]: 'v-load reinterpret_Encoded(uint512)%0#0' with 'l-load reinterpret_Encoded(uint512)%0#0'
debug: Inserted create_block@0.ops[28]: 'l-store-copy reinterpret_Encoded(len+utf8[])%0#0 0'
debug: Replaced create_block@0.ops[30]: 'v-load reinterpret_Encoded(len+utf8[])%0#0' with 'l-load reinterpret_Encoded(len+utf8[])%0#0'
debug: Inserted create_block@0.ops[34]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[36]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[44]: 'l-store-copy aggregate%extract%0#0 0'
debug: Replaced create_block@0.ops[46]: 'v-load aggregate%extract%0#0' with 'l-load aggregate%extract%0#0'
debug: Inserted create_block@0.ops[61]: 'l-store-copy aggregate%substring3%0#0 0'
debug: Replaced create_block@0.ops[63]: 'v-load aggregate%substring3%0#0' with 'l-load aggregate%substring3%0#0'
debug: Inserted create_block@0.ops[82]: 'l-store-copy aggregate%substring3%1#0 0'
debug: Replaced create_block@0.ops[84]: 'v-load aggregate%substring3%1#0' with 'l-load aggregate%substring3%1#0'
debug: Inserted create_block@0.ops[124]: 'l-store-copy aggregate%val_as_bytes%0#0 0'
debug: Replaced create_block@0.ops[126]: 'v-load aggregate%val_as_bytes%0#0' with 'l-load aggregate%val_as_bytes%0#0'
debug: Inserted create_block@0.ops[134]: 'l-store-copy aggregate%length%0#0 0'
debug: Replaced create_block@0.ops[136]: 'v-load aggregate%length%0#0' with 'l-load aggregate%length%0#0'
debug: Inserted create_block@0.ops[138]: 'l-store-copy aggregate%as_bytes%0#0 0'
debug: Replaced create_block@0.ops[140]: 'v-load aggregate%as_bytes%0#0' with 'l-load aggregate%as_bytes%0#0'
debug: Inserted create_block@0.ops[142]: 'l-store-copy aggregate%length_uint16%0#0 0'
debug: Replaced create_block@0.ops[144]: 'v-load aggregate%length_uint16%0#0' with 'l-load aggregate%length_uint16%0#0'
debug: Inserted create_block@0.ops[147]: 'l-store-copy aggregate%encoded_value%0#0 0'
debug: Replaced create_block@0.ops[149]: 'v-load aggregate%encoded_value%0#0' with 'l-load aggregate%encoded_value%0#0'
debug: Inserted create_block@0.ops[153]: 'l-store-copy aggregate%as_bytes%1#0 0'
debug: Replaced create_block@0.ops[155]: 'v-load aggregate%as_bytes%1#0' with 'l-load aggregate%as_bytes%1#0'
debug: Inserted create_block@0.ops[171]: 'l-store-copy aggregate%value_len%0#0 0'
debug: Replaced create_block@0.ops[173]: 'v-load aggregate%value_len%0#0' with 'l-load aggregate%value_len%0#0'
debug: Inserted create_block@0.ops[176]: 'l-store-copy aggregate%len_ok%0#0 0'
debug: Replaced create_block@0.ops[178]: 'v-load aggregate%len_ok%0#0' with 'l-load aggregate%len_ok%0#0'
debug: Inserted create_block@0.ops[186]: 'l-store-copy aggregate%arc4_encoded%0#0 0'
debug: Replaced create_block@0.ops[188]: 'v-load aggregate%arc4_encoded%0#0' with 'l-load aggregate%arc4_encoded%0#0'
debug: Inserted create_block@0.ops[196]: 'l-store-copy aggregate%length%1#0 0'
debug: Replaced create_block@0.ops[198]: 'v-load aggregate%length%1#0' with 'l-load aggregate%length%1#0'
debug: Inserted create_block@0.ops[200]: 'l-store-copy aggregate%as_bytes%2#0 0'
debug: Replaced create_block@0.ops[202]: 'v-load aggregate%as_bytes%2#0' with 'l-load aggregate%as_bytes%2#0'
debug: Inserted create_block@0.ops[204]: 'l-store-copy aggregate%length_uint16%1#0 0'
debug: Replaced create_block@0.ops[206]: 'v-load aggregate%length_uint16%1#0' with 'l-load aggregate%length_uint16%1#0'
debug: Inserted create_block@0.ops[209]: 'l-store-copy aggregate%encoded_value%1#0 0'
debug: Replaced create_block@0.ops[211]: 'v-load aggregate%encoded_value%1#0' with 'l-load aggregate%encoded_value%1#0'
debug: Inserted create_block@0.ops[215]: 'l-store-copy aggregate%as_bytes%3#0 0'
debug: Replaced create_block@0.ops[217]: 'v-load aggregate%as_bytes%3#0' with 'l-load aggregate%as_bytes%3#0'
debug: Inserted create_block@0.ops[223]: 'l-store-copy aggregate%head%4#0 0'
debug: Replaced create_block@0.ops[225]: 'v-load aggregate%head%4#0' with 'l-load aggregate%head%4#0'
debug: Inserted create_block@0.ops[228]: 'l-store-copy aggregate%concat%0#0 0'
debug: Replaced create_block@0.ops[230]: 'v-load aggregate%concat%0#0' with 'l-load aggregate%concat%0#0'
debug: Inserted create_block@0.ops[233]: 'l-store-copy aggregate%concat%1#0 0'
debug: Replaced create_block@0.ops[235]: 'v-load aggregate%concat%1#0' with 'l-load aggregate%concat%1#0'
debug: Inserted create_block@0.ops[236]: 'l-store-copy aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[238]: 'v-load aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load aggregate%as_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[243]: 'l-store-copy tmp%16#0 0'
debug: Replaced create_block@0.ops[245]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted create_block@0.ops[117]: 'l-store-copy aggregate%encoded_bool%0#0 0'
debug: Replaced create_block@0.ops[120]: 'v-load aggregate%encoded_bool%0#0' with 'l-load aggregate%encoded_bool%0#0'
debug: Inserted create_block@0.ops[128]: 'l-store-copy aggregate%as_Encoded(uint64)%0#0 0'
debug: Replaced create_block@0.ops[131]: 'v-load aggregate%as_Encoded(uint64)%0#0' with 'l-load aggregate%as_Encoded(uint64)%0#0'
debug: Inserted create_block@0.ops[159]: 'l-store-copy aggregate%offset_as_uint16%0#0 0'
debug: Replaced create_block@0.ops[162]: 'v-load aggregate%offset_as_uint16%0#0' with 'l-load aggregate%offset_as_uint16%0#0'
debug: Inserted create_block@0.ops[167]: 'l-store-copy aggregate%data_length%0#0 0'
debug: Replaced create_block@0.ops[170]: 'v-load aggregate%data_length%0#0' with 'l-load aggregate%data_length%0#0'
debug: Inserted create_block@0.ops[186]: 'l-store-copy aggregate%bzero%0#0 0'
debug: Replaced create_block@0.ops[189]: 'v-load aggregate%bzero%0#0' with 'l-load aggregate%bzero%0#0'
debug: Inserted create_block@0.ops[194]: 'l-store-copy aggregate%as_Encoded(uint512)%0#0 0'
debug: Replaced create_block@0.ops[197]: 'v-load aggregate%as_Encoded(uint512)%0#0' with 'l-load aggregate%as_Encoded(uint512)%0#0'
debug: Inserted create_block@0.ops[225]: 'l-store-copy aggregate%offset_as_uint16%1#0 0'
debug: Replaced create_block@0.ops[228]: 'v-load aggregate%offset_as_uint16%1#0' with 'l-load aggregate%offset_as_uint16%1#0'
debug: Inserted create_block@0.ops[246]: 'l-store-copy tmp%15#0 0'
debug: Replaced create_block@0.ops[249]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted create_block@0.ops[56]: 'l-store-copy aggregate%extract_uint16%1#0 0'
debug: Replaced create_block@0.ops[60]: 'v-load aggregate%extract_uint16%1#0' with 'l-load aggregate%extract_uint16%1#0'
debug: Inserted create_block@0.ops[77]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[80]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[79]: 'l-store-copy aggregate%len%0#0 1'
debug: Replaced create_block@0.ops[83]: 'v-load aggregate%len%0#0' with 'l-load aggregate%len%0#0'
debug: Inserted create_block@0.ops[115]: 'l-store-copy tmp%10#0 0'
debug: Replaced create_block@0.ops[119]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted create_block@0.ops[37]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[41]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[51]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[55]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[56]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[61]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[76]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[80]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[71]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[76]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[80]: 'l-store-copy aggregate%extract_uint16%2#0 1'
debug: Replaced create_block@0.ops[88]: 'v-load aggregate%extract_uint16%2#0' with 'l-load aggregate%extract_uint16%2#0'
debug: Inserted create_block@0.ops[54]: 'l-store-copy aggregate%extract_uint16%0#0 1'
debug: Replaced create_block@0.ops[63]: 'v-load aggregate%extract_uint16%0#0' with 'l-load aggregate%extract_uint16%0#0'
debug: Inserted create_block@0.ops[133]: 'l-store-copy aggregate%head%0#0 0'
debug: Replaced create_block@0.ops[142]: 'v-load aggregate%head%0#0' with 'l-load aggregate%head%0#0'
debug: Inserted create_block@0.ops[42]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 0'
debug: Replaced create_block@0.ops[51]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[64]: 'l-store-copy reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0 2'
debug: Replaced create_block@0.ops[73]: 'v-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0' with 'l-load reinterpret_Encoded(bool1,uint64,(len+uint8[]),uint512,(len+utf8[]))%0#0'
debug: Inserted create_block@0.ops[98]: 'l-store-copy aggregate%item4%0#0 0'
debug: Replaced create_block@0.ops[108]: 'v-load aggregate%item4%0#0' with 'l-load aggregate%item4%0#0'
debug: Inserted create_block@0.ops[109]: 'l-store-copy tmp%9#0 0'
debug: Replaced create_block@0.ops[120]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted create_block@0.ops[151]: 'l-store-copy tmp%12#0 0'
debug: Replaced create_block@0.ops[164]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted create_block@0.ops[218]: 'l-store-copy tmp%14#0 0'
debug: Replaced create_block@0.ops[231]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted create_block@0.ops[107]: 'l-store-copy tmp%8#0 1'
debug: Replaced create_block@0.ops[120]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted create_block@0.ops[126]: 'l-store-copy tmp%11#0 1'
debug: Replaced create_block@0.ops[141]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted create_block@0.ops[171]: 'l-store-copy aggregate%as_Encoded(len+uint8[])%0#0 0'
debug: Replaced create_block@0.ops[185]: 'v-load aggregate%as_Encoded(len+uint8[])%0#0' with 'l-load aggregate%as_Encoded(len+uint8[])%0#0'
debug: Inserted create_block@0.ops[105]: 'l-store-copy tmp%7#0 1'
debug: Replaced create_block@0.ops[120]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted create_block@0.ops[195]: 'l-store-copy tmp%13#0 0'
debug: Replaced create_block@0.ops[210]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted create_block@0.ops[103]: 'l-store-copy tmp%6#0 1'
debug: Replaced create_block@0.ops[120]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted create_block@0.ops[101]: 'l-store-copy tmp%5#0 1'
debug: Replaced create_block@0.ops[120]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted create_block@0.ops[243]: 'l-store-copy aggregate%as_Encoded(len+utf8[])%0#0 0'
debug: Replaced create_block@0.ops[264]: 'v-load aggregate%as_Encoded(len+utf8[])%0#0' with 'l-load aggregate%as_Encoded(len+utf8[])%0#0'
debug: Inserted create_block@0.ops[128]: 'l-store-copy tmp%12#0 2'
debug: Replaced create_block@0.ops[156]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted create_block@0.ops[78]: 'l-store-copy aggregate%extract%1#0 1'
debug: Replaced create_block@0.ops[110]: 'v-load aggregate%extract%1#0' with 'l-load aggregate%extract%1#0'
debug: Inserted create_block@0.ops[156]: 'l-store-copy aggregate%head%1#0 1'
debug: Replaced create_block@0.ops[187]: 'v-load aggregate%head%1#0' with 'l-load aggregate%head%1#0'
debug: Inserted create_block@0.ops[226]: 'l-store-copy aggregate%head%3#0 0'
debug: Replaced create_block@0.ops[257]: 'v-load aggregate%head%3#0' with 'l-load aggregate%head%3#0'
debug: Inserted create_block@0.ops[72]: 'l-store-copy aggregate%item2%0#0 1'
debug: Replaced create_block@0.ops[108]: 'v-load aggregate%item2%0#0' with 'l-load aggregate%item2%0#0'
debug: Inserted create_block@0.ops[191]: 'l-store-copy aggregate%head%2#0 1'
debug: Replaced create_block@0.ops[225]: 'v-load aggregate%head%2#0' with 'l-load aggregate%head%2#0'
debug: Inserted create_block@0.ops[200]: 'l-store-copy aggregate%current_tail_offset%0#0 1'
debug: Replaced create_block@0.ops[252]: 'v-load aggregate%current_tail_offset%0#0' with 'l-load aggregate%current_tail_offset%0#0'
debug: Inserted create_block@0.ops[50]: 'l-store-copy aggregate%item1%0#0 1'
debug: Replaced create_block@0.ops[106]: 'v-load aggregate%item1%0#0' with 'l-load aggregate%item1%0#0'
debug: Inserted create_block@0.ops[40]: 'l-store-copy aggregate%get_bit%1#0 1'
debug: Replaced create_block@0.ops[104]: 'v-load aggregate%get_bit%1#0' with 'l-load aggregate%get_bit%1#0'
debug: Inserted create_block@0.ops[131]: 'l-store-copy tmp%13#0 3'
debug: Replaced create_block@0.ops[205]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted create_block@0.ops[197]: 'l-store-copy aggregate%as_Encoded(len+uint8[])%0#0 2'
debug: Replaced create_block@0.ops[270]: 'v-load aggregate%as_Encoded(len+uint8[])%0#0' with 'l-load aggregate%as_Encoded(len+uint8[])%0#0'
debug: Inserted create_block@0.ops[32]: 'l-store-copy tmp%4#0 0'
debug: Replaced create_block@0.ops[124]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted create_block@0.ops[26]: 'l-store-copy tmp%3#0 0'
debug: Replaced create_block@0.ops[124]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted create_block@0.ops[21]: 'l-store-copy tmp%2#0 0'
debug: Replaced create_block@0.ops[124]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted create_block@0.ops[15]: 'l-store-copy tmp%1#0 0'
debug: Replaced create_block@0.ops[124]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted create_block@0.ops[134]: 'l-store-copy tmp%14#0 4'
debug: Replaced create_block@0.ops[240]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted create_block@0.ops[9]: 'l-store-copy tmp%0#0 0'
debug: Replaced create_block@0.ops[124]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[1]: 'l-store-copy reinterpret_Encoded(uint8,uint8[32])%0#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[3]: 'v-load reinterpret_Encoded(uint8,uint8[32])%0#0' with 'l-load reinterpret_Encoded(uint8,uint8[32])%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[25]: 'l-store-copy aggregate%head%0#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[27]: 'v-load aggregate%head%0#0' with 'l-load aggregate%head%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[30]: 'l-store-copy aggregate%head%1#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[32]: 'v-load aggregate%head%1#0' with 'l-load aggregate%head%1#0'
debug: Inserted tuple_of_arc4_block@0.ops[33]: 'l-store-copy aggregate%as_Encoded(uint8,uint8[32])%0#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[35]: 'v-load aggregate%as_Encoded(uint8,uint8[32])%0#0' with 'l-load aggregate%as_Encoded(uint8,uint8[32])%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[40]: 'l-store-copy tmp%5#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[42]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted tuple_of_arc4_block@0.ops[16]: 'l-store-copy tmp%1#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[19]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted tuple_of_arc4_block@0.ops[22]: 'l-store-copy tmp%2#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[25]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted tuple_of_arc4_block@0.ops[38]: 'l-store-copy tmp%4#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[41]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted tuple_of_arc4_block@0.ops[12]: 'l-store-copy aggregate%extract%1#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[16]: 'v-load aggregate%extract%1#0' with 'l-load aggregate%extract%1#0'
debug: Inserted tuple_of_arc4_block@0.ops[15]: 'l-store-copy tmp%0#0 1'
debug: Replaced tuple_of_arc4_block@0.ops[20]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[4]: 'l-store-copy reinterpret_Encoded(uint8,uint8[32])%0#0 0'
debug: Replaced tuple_of_arc4_block@0.ops[9]: 'v-load reinterpret_Encoded(uint8,uint8[32])%0#0' with 'l-load reinterpret_Encoded(uint8,uint8[32])%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[8]: 'l-store-copy aggregate%extract%0#0 1'
debug: Replaced tuple_of_arc4_block@0.ops[16]: 'v-load aggregate%extract%0#0' with 'l-load aggregate%extract%0#0'
debug: Inserted tuple_of_arc4_block@0.ops[25]: 'l-store-copy tmp%3#0 1'
debug: Replaced tuple_of_arc4_block@0.ops[35]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[45]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[47]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[17]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[20]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[26]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[29]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[35]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[38]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[44]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[47]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[13]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[20]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[23]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[30]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[33]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[40]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[43]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[50]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[1]: 'l-store-copy result.0#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[11]: 'v-load result.0#0' with 'l-load result.0#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[4]: 'l-store-copy result.1#0 1'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[17]: 'v-load result.1#0' with 'l-load result.1#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[48]: 'l-store-copy result.4#0 1'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[64]: 'v-load result.4#0' with 'l-load result.4#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[7]: 'l-store-copy result.2#0 2'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[28]: 'v-load result.2#0' with 'l-load result.2#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[39]: 'l-store-copy result.3#0 1'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[65]: 'v-load result.3#0' with 'l-load result.3#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[10]: 'l-store-copy result.3#0 3'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[39]: 'v-load result.3#0' with 'l-load result.3#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[30]: 'l-store-copy result.2#0 2'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[66]: 'v-load result.2#0' with 'l-load result.2#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[13]: 'l-store-copy result.4#0 4'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[52]: 'v-load result.4#0' with 'l-load result.4#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[21]: 'l-store-copy result.1#0 4'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[67]: 'v-load result.1#0' with 'l-load result.1#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[16]: 'l-store-copy result.0#0 4'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.create_block@0.ops[67]: 'v-load result.0#0' with 'l-load result.0#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[2]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[4]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[7]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[9]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[13]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[15]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[18]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4_block@0.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: optimizing TEAL subroutine ops algopy.arc4.ARC4Contract.approval_program() -> uint64:
avm_types_in_abi/contract.py:5:6 debug: optimizing TEAL subroutine ops test_cases.avm_types_in_abi.contract.TestContract.create[routing]() -> void:
avm_types_in_abi/contract.py:19:6 debug: optimizing TEAL subroutine ops test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4[routing]() -> void:
avm_types_in_abi/contract.py:5 debug: optimizing TEAL subroutine ops test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: uint64, uint64_param: uint64, bytes_param: bytes, biguint_param: bytes, string_param: bytes, tuple_param.0: uint64, tuple_param.1: uint64, tuple_param.2: bytes, tuple_param.3: bytes, tuple_param.4: bytes) -> uint64, uint64, bytes, bytes, bytes:
avm_types_in_abi/contract.py:19 debug: optimizing TEAL subroutine ops test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4(args.0: bytes, args.1: bytes) -> bytes, bytes:
debug: optimizing TEAL subroutine ops algopy.arc4.ARC4Contract.clear_state_program() -> uint64:
info: Writing avm_types_in_abi/out_unoptimized/TestContract.approval.teal
info: Writing avm_types_in_abi/out_unoptimized/TestContract.clear.teal
info: Writing avm_types_in_abi/out_unoptimized/TestContract.approval.bin
info: Writing avm_types_in_abi/out_unoptimized/TestContract.clear.bin
info: Writing avm_types_in_abi/out_unoptimized/TestContract.approval.stats.txt
info: Writing avm_types_in_abi/out_unoptimized/TestContract.clear.stats.txt
info: Writing avm_types_in_abi/out_unoptimized/TestContract.approval.puya.map
info: Writing avm_types_in_abi/out_unoptimized/TestContract.clear.puya.map