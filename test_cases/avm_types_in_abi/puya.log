debug: PuyaOptions(paths=(PosixPath('avm_types_in_abi'),), output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, out_dir=None, debug_level=0, optimization_level=1, log_level=<LogLevel.info: 20>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L6
debug: Terminated block@0: // L6
debug: Sealing block@None: // and_contd_L14
debug: Terminated block@1: // and_contd_L14
debug: Sealing block@None: // and_contd_L14
debug: Terminated block@2: // and_contd_L14
debug: Sealing block@None: // bool_true_L14
debug: Sealing block@None: // bool_false_L14
debug: Terminated block@3: // bool_true_L14
debug: Terminated block@4: // bool_false_L14
debug: Sealing block@5: // bool_merge_L14
debug: Created Phi assignment: let and_result%3#2: uint64 = undefined while trying to resolve 'and_result%3' in block@5: // bool_merge_L14
debug: Added and_result%3#0 to Phi node: let and_result%3#2: uint64 = φ(and_result%3#0 <- block@3) in block@3: // bool_true_L14
debug: Added and_result%3#1 to Phi node: let and_result%3#2: uint64 = φ(and_result%3#0 <- block@3, and_result%3#1 <- block@4) in block@4: // bool_false_L14
debug: Created Phi assignment: let result.0#1: uint64 = undefined while trying to resolve 'result.0' in block@5: // bool_merge_L14
debug: Added result.0#0 to Phi node: let result.0#1: uint64 = φ(result.0#0 <- block@3) in block@3: // bool_true_L14
debug: Created Phi assignment: let result.0#2: uint64 = undefined while trying to resolve 'result.0' in block@4: // bool_false_L14
debug: Added result.0#0 to Phi node: let result.0#2: uint64 = φ(result.0#0 <- block@0) in block@0: // L6
debug: Added result.0#0 to Phi node: let result.0#2: uint64 = φ(result.0#0 <- block@0, result.0#0 <- block@1) in block@1: // and_contd_L14
debug: Added result.0#0 to Phi node: let result.0#2: uint64 = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2) in block@2: // and_contd_L14
debug: Replacing trivial Phi node: let result.0#2: uint64 = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2) (result.0#2) with result.0#0
debug: Deleting Phi assignment: let result.0#2: uint64 = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2)
debug: Replaced trivial Phi node: let result.0#2: uint64 = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2) (result.0#2) with result.0#0 in current definition for 1 blocks
debug: Added result.0#0 to Phi node: let result.0#1: uint64 = φ(result.0#0 <- block@3, result.0#0 <- block@4) in block@4: // bool_false_L14
debug: Replacing trivial Phi node: let result.0#1: uint64 = φ(result.0#0 <- block@3, result.0#0 <- block@4) (result.0#1) with result.0#0
debug: Deleting Phi assignment: let result.0#1: uint64 = φ(result.0#0 <- block@3, result.0#0 <- block@4)
debug: Replaced trivial Phi node: let result.0#1: uint64 = φ(result.0#0 <- block@3, result.0#0 <- block@4) (result.0#1) with result.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.1#1: uint64 = undefined while trying to resolve 'result.1' in block@5: // bool_merge_L14
debug: Added result.1#0 to Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@3) in block@3: // bool_true_L14
debug: Created Phi assignment: let result.1#2: uint64 = undefined while trying to resolve 'result.1' in block@4: // bool_false_L14
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0) in block@0: // L6
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1) in block@1: // and_contd_L14
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2) in block@2: // and_contd_L14
debug: Replacing trivial Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2) (result.1#2) with result.1#0
debug: Deleting Phi assignment: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2)
debug: Replaced trivial Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2) (result.1#2) with result.1#0 in current definition for 1 blocks
debug: Added result.1#0 to Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@3, result.1#0 <- block@4) in block@4: // bool_false_L14
debug: Replacing trivial Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@3, result.1#0 <- block@4) (result.1#1) with result.1#0
debug: Deleting Phi assignment: let result.1#1: uint64 = φ(result.1#0 <- block@3, result.1#0 <- block@4)
debug: Replaced trivial Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@3, result.1#0 <- block@4) (result.1#1) with result.1#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.2#1: bytes = undefined while trying to resolve 'result.2' in block@5: // bool_merge_L14
debug: Added result.2#0 to Phi node: let result.2#1: bytes = φ(result.2#0 <- block@3) in block@3: // bool_true_L14
debug: Created Phi assignment: let result.2#2: bytes = undefined while trying to resolve 'result.2' in block@4: // bool_false_L14
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0) in block@0: // L6
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1) in block@1: // and_contd_L14
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2) in block@2: // and_contd_L14
debug: Replacing trivial Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2) (result.2#2) with result.2#0
debug: Deleting Phi assignment: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2)
debug: Replaced trivial Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2) (result.2#2) with result.2#0 in current definition for 1 blocks
debug: Added result.2#0 to Phi node: let result.2#1: bytes = φ(result.2#0 <- block@3, result.2#0 <- block@4) in block@4: // bool_false_L14
debug: Replacing trivial Phi node: let result.2#1: bytes = φ(result.2#0 <- block@3, result.2#0 <- block@4) (result.2#1) with result.2#0
debug: Deleting Phi assignment: let result.2#1: bytes = φ(result.2#0 <- block@3, result.2#0 <- block@4)
debug: Replaced trivial Phi node: let result.2#1: bytes = φ(result.2#0 <- block@3, result.2#0 <- block@4) (result.2#1) with result.2#0 in current definition for 1 blocks
debug: Terminated block@5: // bool_merge_L14
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Sealing block@None: // abi_routing_L4
debug: Sealing block@None: // else_body_L4
debug: Terminated block@1: // abi_routing_L4
debug: Sealing block@None: // switch_case_default_L4
debug: Sealing block@None: // create_route_L5
debug: Terminated block@2: // create_route_L5
debug: Terminated block@3: // switch_case_default_L4
debug: Sealing block@4: // switch_case_next_L4
debug: Terminated block@4: // switch_case_next_L4
debug: Sealing block@5: // after_if_else_L4
debug: Terminated block@5: // after_if_else_L4
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Output IR to avm_types_in_abi/out/contract_TestContract.ssa.ir
info: Optimizing test_cases.avm_types_in_abi.contract.TestContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: item0%14#0, awst_tmp%20.0#0
debug: Replacing {awst_tmp%20.0#0} with item0%14#0 made 1 modifications
debug: Found equivalence set: item1%15#0, awst_tmp%20.1#0
debug: Replacing {awst_tmp%20.1#0} with item1%15#0 made 1 modifications
debug: Found equivalence set: item2%19#0, awst_tmp%20.2#0
debug: Replacing {awst_tmp%20.2#0} with item2%19#0 made 1 modifications
debug: Found equivalence set: awst_tmp%24.2#0, awst_tmp%27#0
debug: Replacing {awst_tmp%27#0} with awst_tmp%24.2#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%32#0
debug: Removing unused variable encoded_tuple_buffer%33#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // switch_case_next_L4 with block@3: // switch_case_default_L4 in block@5: // after_if_else_L4
debug: Merged linear block@4: // switch_case_next_L4 into block@3: // switch_case_default_L4
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bool_param#0, result.0#0
debug: Replacing {result.0#0} with bool_param#0 made 2 modifications
debug: Found equivalence set: uint64_param#0, result.1#0
debug: Replacing {result.1#0} with uint64_param#0 made 2 modifications
debug: Found equivalence set: bytes_param#0, result.2#0
debug: Replacing {result.2#0} with bytes_param#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to avm_types_in_abi/out/contract_TestContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to avm_types_in_abi/out/contract_TestContract.cssa.ir
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.create
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Output IR to avm_types_in_abi/out/contract_TestContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.create
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Output IR to avm_types_in_abi/out/contract_TestContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.approval_program using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%33#1 with [encoded_tuple_buffer%33#2, encoded_tuple_buffer%33#3, encoded_tuple_buffer%33#4]
debug: Coalescing resulted in 6 replacement/s
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.create using strategy RootOperandGrouping
debug: Coalescing and_result%3#0 with [and_result%3#5, and_result%3#1, and_result%3#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to avm_types_in_abi/out/contract_TestContract.final.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_abi_routing@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_abi_routing@1.ops[4]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[14]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[16]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[19]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[21]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[26]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[28]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[32]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[34]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[38]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[40]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[61]: 'store item_length%17#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[63]: 'load item_length%17#0' with 'load item_length%17#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[102]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[104]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[106]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[108]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[110]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[112]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[119]: 'store encoded_tuple_buffer%33#1 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[121]: 'load encoded_tuple_buffer%33#1' with 'load encoded_tuple_buffer%33#1 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[127]: 'store value_as_bytes%34#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[129]: 'load value_as_bytes%34#0' with 'load value_as_bytes%34#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[150]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[152]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[57]: 'store item_index%16#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[60]: 'load item_index%16#0' with 'load item_index%16#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[132]: 'store value_as_uint16%35#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[135]: 'load value_as_uint16%35#0' with 'load value_as_uint16%35#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[140]: 'store data_length%36#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[143]: 'load data_length%36#0' with 'load data_length%36#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[149]: 'store encoded_tuple_buffer%33#1 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[152]: 'load encoded_tuple_buffer%33#1' with 'load encoded_tuple_buffer%33#1 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[43]: 'store is_true%13#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[47]: 'load is_true%13#0' with 'load is_true%13#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[68]: 'store item_length_plus_2%18#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[72]: 'load item_length_plus_2%18#0' with 'load item_length_plus_2%18#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[94]: 'store awst_tmp%24.0#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[98]: 'load awst_tmp%24.0#0' with 'load awst_tmp%24.0#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[56]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[61]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[51]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[56]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[86]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[93]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[96]: 'store awst_tmp%24.1#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[105]: 'load awst_tmp%24.1#0' with 'load awst_tmp%24.1#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[132]: 'store encoded_tuple_buffer%33#1 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[142]: 'load encoded_tuple_buffer%33#1' with 'load encoded_tuple_buffer%33#1 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[63]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[73]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[65]: 'store item_index%16#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[75]: 'load item_index%16#0' with 'load item_index%16#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[78]: 'store item2%19#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[87]: 'load item2%19#0' with 'load item2%19#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[86]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[96]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[149]: 'store encoded_tuple_buffer%33#1 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[159]: 'load encoded_tuple_buffer%33#1' with 'load encoded_tuple_buffer%33#1 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[152]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[161]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[41]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[51]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[84]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[97]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[115]: 'store awst_tmp%24.2#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[128]: 'load awst_tmp%24.2#0' with 'load awst_tmp%24.2#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[101]: 'store awst_tmp%24.2#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[115]: 'load awst_tmp%24.2#0' with 'load awst_tmp%24.2#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[111]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[134]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[115]: 'store val_as_bytes%26#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[140]: 'load val_as_bytes%26#0' with 'load val_as_bytes%26#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[133]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[158]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[56]: 'store item1%15#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[87]: 'load item1%15#0' with 'load item1%15#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[50]: 'store item0%14#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[83]: 'load item0%14#0' with 'load item0%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[36]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[99]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[30]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[99]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_create_route@2.ops[24]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_create_route@2.ops[99]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Simplified txna ApplicationArgs 0; method "create(bool,uint64,byte[],(bool,uint64,byte[]))(bool,uint64,byte[])"; swap to method "create(bool,uint64,byte[],(bool,uint64,byte[]))(bool,uint64,byte[])"; txna ApplicationArgs 0
debug: Simplified uncover 2; uncover 2; uncover 2 to 
debug: Simplified uncover 5; uncover 5; uncover 5; uncover 5; uncover 5; uncover 5 to 
debug: Inserted create_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced create_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted create_and_contd@1.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced create_and_contd@1.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted create_and_contd@2.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced create_and_contd@2.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.avm_types_in_abi.contract.TestContract.create
debug: Allocated 1 variable/s to x-stack: and_result%3#0
debug: shared x-stack for create_bool_true@3 -> create_bool_merge@5: and_result%3#0
debug: shared x-stack for create_bool_false@4 -> create_bool_merge@5: and_result%3#0
info: Writing avm_types_in_abi/out/contract.approval.teal
info: Writing avm_types_in_abi/out/contract.approval.debug.teal
info: Writing avm_types_in_abi/out/contract.clear.teal
info: Writing avm_types_in_abi/out/contract.clear.debug.teal
info: Writing avm_types_in_abi/out/application.json