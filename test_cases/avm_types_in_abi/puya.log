debug: PuyaOptions(paths=['avm_types_in_abi'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // and_contd_L16
debug: Terminated block@1: // and_contd_L16
debug: Sealing block@None: // and_contd_L16
debug: Terminated block@2: // and_contd_L16
debug: Sealing block@None: // and_contd_L16
debug: Terminated block@3: // and_contd_L16
debug: Sealing block@None: // and_contd_L16
debug: Terminated block@4: // and_contd_L16
debug: Sealing block@None: // bool_true_L16
debug: Sealing block@None: // bool_false_L16
debug: Terminated block@5: // bool_true_L16
debug: Terminated block@6: // bool_false_L16
debug: Sealing block@7: // bool_merge_L16
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@7: // bool_merge_L16
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@5) in block@5: // bool_true_L16
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@5, and_result%0#1 <- block@6) in block@6: // bool_false_L16
debug: Created Phi assignment: let result.0#1: bool = undefined while trying to resolve 'result.0' in block@7: // bool_merge_L16
debug: Added result.0#0 to Phi node: let result.0#1: bool = φ(result.0#0 <- block@5) in block@5: // bool_true_L16
debug: Created Phi assignment: let result.0#2: bool = undefined while trying to resolve 'result.0' in block@6: // bool_false_L16
debug: Added result.0#0 to Phi node: let result.0#2: bool = φ(result.0#0 <- block@0) in block@0: // L5
debug: Added result.0#0 to Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1) in block@1: // and_contd_L16
debug: Added result.0#0 to Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2) in block@2: // and_contd_L16
debug: Added result.0#0 to Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2, result.0#0 <- block@3) in block@3: // and_contd_L16
debug: Added result.0#0 to Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2, result.0#0 <- block@3, result.0#0 <- block@4) in block@4: // and_contd_L16
debug: Replacing trivial Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2, result.0#0 <- block@3, result.0#0 <- block@4) (result.0#2) with result.0#0
debug: Deleting Phi assignment: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2, result.0#0 <- block@3, result.0#0 <- block@4)
debug: Replaced trivial Phi node: let result.0#2: bool = φ(result.0#0 <- block@0, result.0#0 <- block@1, result.0#0 <- block@2, result.0#0 <- block@3, result.0#0 <- block@4) (result.0#2) with result.0#0 in current definition for 1 blocks
debug: Added result.0#0 to Phi node: let result.0#1: bool = φ(result.0#0 <- block@5, result.0#0 <- block@6) in block@6: // bool_false_L16
debug: Replacing trivial Phi node: let result.0#1: bool = φ(result.0#0 <- block@5, result.0#0 <- block@6) (result.0#1) with result.0#0
debug: Deleting Phi assignment: let result.0#1: bool = φ(result.0#0 <- block@5, result.0#0 <- block@6)
debug: Replaced trivial Phi node: let result.0#1: bool = φ(result.0#0 <- block@5, result.0#0 <- block@6) (result.0#1) with result.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.1#1: uint64 = undefined while trying to resolve 'result.1' in block@7: // bool_merge_L16
debug: Added result.1#0 to Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@5) in block@5: // bool_true_L16
debug: Created Phi assignment: let result.1#2: uint64 = undefined while trying to resolve 'result.1' in block@6: // bool_false_L16
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0) in block@0: // L5
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1) in block@1: // and_contd_L16
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2) in block@2: // and_contd_L16
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2, result.1#0 <- block@3) in block@3: // and_contd_L16
debug: Added result.1#0 to Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2, result.1#0 <- block@3, result.1#0 <- block@4) in block@4: // and_contd_L16
debug: Replacing trivial Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2, result.1#0 <- block@3, result.1#0 <- block@4) (result.1#2) with result.1#0
debug: Deleting Phi assignment: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2, result.1#0 <- block@3, result.1#0 <- block@4)
debug: Replaced trivial Phi node: let result.1#2: uint64 = φ(result.1#0 <- block@0, result.1#0 <- block@1, result.1#0 <- block@2, result.1#0 <- block@3, result.1#0 <- block@4) (result.1#2) with result.1#0 in current definition for 1 blocks
debug: Added result.1#0 to Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@5, result.1#0 <- block@6) in block@6: // bool_false_L16
debug: Replacing trivial Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@5, result.1#0 <- block@6) (result.1#1) with result.1#0
debug: Deleting Phi assignment: let result.1#1: uint64 = φ(result.1#0 <- block@5, result.1#0 <- block@6)
debug: Replaced trivial Phi node: let result.1#1: uint64 = φ(result.1#0 <- block@5, result.1#0 <- block@6) (result.1#1) with result.1#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.2#1: bytes = undefined while trying to resolve 'result.2' in block@7: // bool_merge_L16
debug: Added result.2#0 to Phi node: let result.2#1: bytes = φ(result.2#0 <- block@5) in block@5: // bool_true_L16
debug: Created Phi assignment: let result.2#2: bytes = undefined while trying to resolve 'result.2' in block@6: // bool_false_L16
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0) in block@0: // L5
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1) in block@1: // and_contd_L16
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2) in block@2: // and_contd_L16
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2, result.2#0 <- block@3) in block@3: // and_contd_L16
debug: Added result.2#0 to Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2, result.2#0 <- block@3, result.2#0 <- block@4) in block@4: // and_contd_L16
debug: Replacing trivial Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2, result.2#0 <- block@3, result.2#0 <- block@4) (result.2#2) with result.2#0
debug: Deleting Phi assignment: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2, result.2#0 <- block@3, result.2#0 <- block@4)
debug: Replaced trivial Phi node: let result.2#2: bytes = φ(result.2#0 <- block@0, result.2#0 <- block@1, result.2#0 <- block@2, result.2#0 <- block@3, result.2#0 <- block@4) (result.2#2) with result.2#0 in current definition for 1 blocks
debug: Added result.2#0 to Phi node: let result.2#1: bytes = φ(result.2#0 <- block@5, result.2#0 <- block@6) in block@6: // bool_false_L16
debug: Replacing trivial Phi node: let result.2#1: bytes = φ(result.2#0 <- block@5, result.2#0 <- block@6) (result.2#1) with result.2#0
debug: Deleting Phi assignment: let result.2#1: bytes = φ(result.2#0 <- block@5, result.2#0 <- block@6)
debug: Replaced trivial Phi node: let result.2#1: bytes = φ(result.2#0 <- block@5, result.2#0 <- block@6) (result.2#1) with result.2#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.3#1: biguint = undefined while trying to resolve 'result.3' in block@7: // bool_merge_L16
debug: Added result.3#0 to Phi node: let result.3#1: biguint = φ(result.3#0 <- block@5) in block@5: // bool_true_L16
debug: Created Phi assignment: let result.3#2: biguint = undefined while trying to resolve 'result.3' in block@6: // bool_false_L16
debug: Added result.3#0 to Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0) in block@0: // L5
debug: Added result.3#0 to Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1) in block@1: // and_contd_L16
debug: Added result.3#0 to Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2) in block@2: // and_contd_L16
debug: Added result.3#0 to Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2, result.3#0 <- block@3) in block@3: // and_contd_L16
debug: Added result.3#0 to Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2, result.3#0 <- block@3, result.3#0 <- block@4) in block@4: // and_contd_L16
debug: Replacing trivial Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2, result.3#0 <- block@3, result.3#0 <- block@4) (result.3#2) with result.3#0
debug: Deleting Phi assignment: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2, result.3#0 <- block@3, result.3#0 <- block@4)
debug: Replaced trivial Phi node: let result.3#2: biguint = φ(result.3#0 <- block@0, result.3#0 <- block@1, result.3#0 <- block@2, result.3#0 <- block@3, result.3#0 <- block@4) (result.3#2) with result.3#0 in current definition for 1 blocks
debug: Added result.3#0 to Phi node: let result.3#1: biguint = φ(result.3#0 <- block@5, result.3#0 <- block@6) in block@6: // bool_false_L16
debug: Replacing trivial Phi node: let result.3#1: biguint = φ(result.3#0 <- block@5, result.3#0 <- block@6) (result.3#1) with result.3#0
debug: Deleting Phi assignment: let result.3#1: biguint = φ(result.3#0 <- block@5, result.3#0 <- block@6)
debug: Replaced trivial Phi node: let result.3#1: biguint = φ(result.3#0 <- block@5, result.3#0 <- block@6) (result.3#1) with result.3#0 in current definition for 1 blocks
debug: Created Phi assignment: let result.4#1: bytes = undefined while trying to resolve 'result.4' in block@7: // bool_merge_L16
debug: Added result.4#0 to Phi node: let result.4#1: bytes = φ(result.4#0 <- block@5) in block@5: // bool_true_L16
debug: Created Phi assignment: let result.4#2: bytes = undefined while trying to resolve 'result.4' in block@6: // bool_false_L16
debug: Added result.4#0 to Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0) in block@0: // L5
debug: Added result.4#0 to Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1) in block@1: // and_contd_L16
debug: Added result.4#0 to Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2) in block@2: // and_contd_L16
debug: Added result.4#0 to Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2, result.4#0 <- block@3) in block@3: // and_contd_L16
debug: Added result.4#0 to Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2, result.4#0 <- block@3, result.4#0 <- block@4) in block@4: // and_contd_L16
debug: Replacing trivial Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2, result.4#0 <- block@3, result.4#0 <- block@4) (result.4#2) with result.4#0
debug: Deleting Phi assignment: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2, result.4#0 <- block@3, result.4#0 <- block@4)
debug: Replaced trivial Phi node: let result.4#2: bytes = φ(result.4#0 <- block@0, result.4#0 <- block@1, result.4#0 <- block@2, result.4#0 <- block@3, result.4#0 <- block@4) (result.4#2) with result.4#0 in current definition for 1 blocks
debug: Added result.4#0 to Phi node: let result.4#1: bytes = φ(result.4#0 <- block@5, result.4#0 <- block@6) in block@6: // bool_false_L16
debug: Replacing trivial Phi node: let result.4#1: bytes = φ(result.4#0 <- block@5, result.4#0 <- block@6) (result.4#1) with result.4#0
debug: Deleting Phi assignment: let result.4#1: bytes = φ(result.4#0 <- block@5, result.4#0 <- block@6)
debug: Replaced trivial Phi node: let result.4#1: bytes = φ(result.4#0 <- block@5, result.4#0 <- block@6) (result.4#1) with result.4#0 in current definition for 1 blocks
debug: Terminated block@7: // bool_merge_L16
debug: Sealing block@0: // L19
debug: Terminated block@0: // L19
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Sealing block@None: // switch_case_default_L4
debug: Sealing block@None: // create_route_L5
debug: Sealing block@None: // tuple_of_arc4_route_L19
debug: Terminated block@1: // create_route_L5
debug: Terminated block@2: // tuple_of_arc4_route_L19
debug: Terminated block@3: // switch_case_default_L4
debug: Sealing block@4: // switch_case_next_L4
debug: Terminated block@4: // switch_case_next_L4
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Output IR to avm_types_in_abi/out/TestContract.ssa.ir
info: Optimizing test_cases.avm_types_in_abi.contract.TestContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: item0%0#0, awst_tmp%0#0
debug: Replacing {awst_tmp%0#0} with item0%0#0 made 1 modifications
debug: Found equivalence set: item1%0#0, awst_tmp%1#0
debug: Replacing {awst_tmp%1#0} with item1%0#0 made 1 modifications
debug: Found equivalence set: item2%0#0, awst_tmp%2#0
debug: Replacing {awst_tmp%2#0} with item2%0#0 made 1 modifications
debug: Found equivalence set: item3%0#0, awst_tmp%3#0
debug: Replacing {awst_tmp%3#0} with item3%0#0 made 1 modifications
debug: Found equivalence set: item4%0#0, awst_tmp%4#0
debug: Replacing {awst_tmp%4#0} with item4%0#0 made 1 modifications
debug: Found equivalence set: awst_tmp%7#0, awst_tmp%10#0
debug: Replacing {awst_tmp%10#0} with awst_tmp%7#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 NoOp) to (! tmp%1#0)
debug: Simplified (extract3 tmp%14#0 1u 8u) // on error: Index access is out of bounds to ((extract 1 8) tmp%14#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%14#0 11u 64u) // on error: Index access is out of bounds to ((extract 11 64) tmp%14#0) // on error: Index access is out of bounds
debug: Simplified (concat 0x tmp%19#0) to tmp%19#0
debug: Simplified ((extract 6 2) value_as_bytes%1#0) to 0x004d
debug: Simplified (== tmp%27#0 NoOp) to (! tmp%27#0)
debug: Simplified (extract3 tmp%30#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%30#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%30#0 1u 32u) // on error: Index access is out of bounds to ((extract 1 32) tmp%30#0) // on error: Index access is out of bounds
debug: Simplified (concat 0x awst_tmp%11#0) to awst_tmp%11#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable value_as_bytes%1#0
debug: Removing unused variable current_tail_offset%0#2
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@0: // L4 as a predecessor of block@4: // switch_case_next_L4 due to inlining of block@3: // switch_case_default_L4
debug: simplified terminator of block@0: // L4 from switch tmp%0#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@1, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@2, * => block@3} to switch tmp%0#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@1, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@2, * => block@4}
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@0: // L4 from switch tmp%0#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@1, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@2, * => block@4} to switch tmp%0#0 {method "create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)" => block@1, method "tuple_of_arc4((uint8,address))(uint8,address)" => block@2, * => fail // reject transaction}
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@4: // switch_case_next_L4 into block@3: // switch_case_default_L4
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3: // switch_case_default_L4
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%14#0 75u) with copy of existing registers [Register(ir_type=uint64, name='item_end_offset%0', version=0, source_location=avm_types_in_abi/contract.py:4)]
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: Replacing {item_start_offset%1#0} with item_end_offset%0#0 made 1 modifications
debug: Found equivalence set: tmp%19#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with tmp%19#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with awst_tmp%11#0 made 1 modifications
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bool_param#0, result.0#0
debug: Replacing {result.0#0} with bool_param#0 made 2 modifications
debug: Found equivalence set: uint64_param#0, result.1#0
debug: Replacing {result.1#0} with uint64_param#0 made 2 modifications
debug: Found equivalence set: bytes_param#0, result.2#0
debug: Replacing {result.2#0} with bytes_param#0 made 2 modifications
debug: Found equivalence set: biguint_param#0, result.3#0
debug: Replacing {result.3#0} with biguint_param#0 made 2 modifications
debug: Found equivalence set: string_param#0, result.4#0
debug: Replacing {result.4#0} with string_param#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to avm_types_in_abi/out/TestContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%1#0
debug: Removing unused variable data_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to avm_types_in_abi/out/TestContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.create
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Removing Phis from test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.approval_program using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%0#2 with [encoded_tuple_buffer%0#3, encoded_tuple_buffer%0#4, encoded_tuple_buffer%0#5, encoded_tuple_buffer%0#6, encoded_tuple_buffer%0#7]
debug: Coalescing resulted in 10 replacement/s
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.create using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.avm_types_in_abi.contract.TestContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.create
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Sequentializing parallel copies in test_cases.avm_types_in_abi.contract.TestContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to avm_types_in_abi/out/TestContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[14]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[16]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[19]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[21]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[26]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[28]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[32]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[34]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[40]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[42]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[46]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[48]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[123]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[125]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[127]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[129]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[131]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[133]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[139]: 'store len_%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[141]: 'load len_%0#0' with 'load len_%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[144]: 'store no_overflow%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[146]: 'load no_overflow%0#0' with 'load no_overflow%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[157]: 'store length%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[159]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[161]: 'store value_as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[163]: 'load value_as_bytes%0#0' with 'load value_as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[165]: 'store value_as_uint16%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[167]: 'load value_as_uint16%0#0' with 'load value_as_uint16%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[174]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[176]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[193]: 'store value_as_bytes%2#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[195]: 'load value_as_bytes%2#0' with 'load value_as_bytes%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[201]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[203]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[206]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[208]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[215]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[217]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[150]: 'store b_zeros%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[153]: 'load b_zeros%0#0' with 'load b_zeros%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[183]: 'store data_length%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[186]: 'load data_length%0#0' with 'load data_length%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[199]: 'store value_as_uint16%2#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[202]: 'load value_as_uint16%2#0' with 'load value_as_uint16%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[214]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[217]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[51]: 'store is_true%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[55]: 'load is_true%0#0' with 'load is_true%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[59]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[62]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[69]: 'store item_end_offset%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[73]: 'load item_end_offset%0#0' with 'load item_end_offset%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[77]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[80]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[81]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[84]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[83]: 'store item_end_offset%1#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[87]: 'load item_end_offset%1#0' with 'load item_end_offset%1#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[118]: 'store awst_tmp%5#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[122]: 'load awst_tmp%5#0' with 'load awst_tmp%5#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[63]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[67]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[68]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[73]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[74]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[79]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[198]: 'store current_tail_offset%0#1 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[204]: 'load current_tail_offset%0#1' with 'load current_tail_offset%0#1 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[66]: 'store item_start_offset%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[76]: 'load item_start_offset%0#0' with 'load item_start_offset%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[121]: 'store awst_tmp%6#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[130]: 'load awst_tmp%6#0' with 'load awst_tmp%6#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[205]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[215]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[192]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[203]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[49]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[59]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[79]: 'store item_end_offset%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[92]: 'load item_end_offset%0#0' with 'load item_end_offset%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[108]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[119]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[137]: 'store awst_tmp%7#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[150]: 'load awst_tmp%7#0' with 'load awst_tmp%7#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[173]: 'store awst_tmp%9#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[186]: 'load awst_tmp%9#0' with 'load awst_tmp%9#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[95]: 'store item4%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[107]: 'load item4%0#0' with 'load item4%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[106]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[119]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[125]: 'store awst_tmp%7#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[139]: 'load awst_tmp%7#0' with 'load awst_tmp%7#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[157]: 'store awst_tmp%8#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[172]: 'load awst_tmp%8#0' with 'load awst_tmp%8#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[103]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[119]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[100]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[119]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[81]: 'store item2%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[107]: 'load item2%0#0' with 'load item2%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[207]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[235]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[127]: 'store awst_tmp%8#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[160]: 'load awst_tmp%8#0' with 'load awst_tmp%8#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[58]: 'store item0%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[99]: 'load item0%0#0' with 'load item0%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[63]: 'store item1%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[105]: 'load item1%0#0' with 'load item1%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[88]: 'store item3%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[126]: 'load item3%0#0' with 'load item3%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[182]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[222]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[200]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[246]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[162]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[213]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[129]: 'store awst_tmp%9#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[186]: 'load awst_tmp%9#0' with 'load awst_tmp%9#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[146]: 'store val_as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[206]: 'load val_as_bytes%0#0' with 'load val_as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[143]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[206]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[44]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[123]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[38]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[123]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[36]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[123]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[30]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[123]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[24]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[123]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[1]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[3]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[5]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[7]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[10]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[12]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[15]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[17]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[27]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[29]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[36]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[38]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[22]: 'store item1%1#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[25]: 'load item1%1#0' with 'load item1%1#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[33]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[36]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[18]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[21]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[28]: 'store awst_tmp%12#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[33]: 'load awst_tmp%12#0' with 'load awst_tmp%12#0 from l-stack (no copy)'
debug: Inserted main_tuple_of_arc4_route@2.ops[20]: 'store item0%1#0 to l-stack (copy)'
debug: Replaced main_tuple_of_arc4_route@2.ops[26]: 'load item0%1#0' with 'load item0%1#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.avm_types_in_abi.contract.TestContract.approval_program
debug: Inserted create_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced create_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted create_and_contd@1.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced create_and_contd@1.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted create_and_contd@2.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced create_and_contd@2.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted create_and_contd@3.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced create_and_contd@3.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted create_and_contd@4.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced create_and_contd@4.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.avm_types_in_abi.contract.TestContract.create
debug: Allocated 1 variable/s to x-stack: and_result%0#0
debug: shared x-stack for create_bool_true@5 -> create_bool_merge@7: and_result%0#0
debug: shared x-stack for create_bool_false@6 -> create_bool_merge@7: and_result%0#0
debug: Inserted tuple_of_arc4_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced tuple_of_arc4_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted tuple_of_arc4_block@0.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced tuple_of_arc4_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted tuple_of_arc4_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced tuple_of_arc4_block@0.ops[15]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted tuple_of_arc4_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced tuple_of_arc4_block@0.ops[20]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
info: Writing avm_types_in_abi/out/TestContract.approval.teal
info: Writing avm_types_in_abi/out/TestContract.clear.teal
info: Writing avm_types_in_abi/out/TestContract.arc32.json
info: Writing avm_types_in_abi/out/client_TestContract.py