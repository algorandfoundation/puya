debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['avm_types_in_abi'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6
debug: Terminated block@6
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.create
debug: Sealing block@0
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
avm_types_in_abi/contract.py:16:16 debug: encountered already materialized expression (result), reusing result: (result.0#0, result.1#0, result.2#0, result.3#0, result.4#0)
avm_types_in_abi/contract.py:16:26 debug: encountered already materialized expression (tuple_param), reusing result: (tuple_param.0#0, tuple_param.1#0, tuple_param.2#0, tuple_param.3#0, tuple_param.4#0)
debug: Terminated block@0
debug: Building IR for function test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy.arc4.ARC4Contract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Building IR for function algopy.arc4.ARC4Contract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
info: optimizing approval program of test_cases.avm_types_in_abi.contract.TestContract at level 2
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.avm_types_in_abi.contract.TestContract.create for inlining
debug: marking single-use function test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 for inlining
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__ in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: encoded_bool%0#0, item0%0#0
debug: Copy propagation made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (== tmp%5#0 0u) to (! tmp%5#0)
debug: Simplified (concat 0x encoded_bool%1#0) to encoded_bool%1#0
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x004d
debug: Simplified (== tmp%18#0 NoOp) to (! tmp%18#0)
debug: Simplified (concat 0x elements_to_encode%5#0) to elements_to_encode%5#0
debug: Simplified (extract3 tmp%16#0 1u 8u) // on error: Index access is out of bounds to ((extract 1 8) tmp%16#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%16#0 11u 64u) // on error: Index access is out of bounds to ((extract 11 64) tmp%16#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%22#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%22#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%22#0 1u 32u) // on error: Index access is out of bounds to ((extract 1 32) tmp%22#0) // on error: Index access is out of bounds
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable as_bytes%2#0
debug: Removing unused variable offset_as_uint16%0#0
debug: Removing unused variable current_tail_offset%2#0
debug: Removing unused variable tmp%21#0
debug: Removing unused variable current_tail_offset%3#0
debug: Removing unused variable encoded_tuple_buffer%8#0
debug: Removing unused variable encoded_tuple_buffer%9#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@7
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@6 with block@5 in block@8
debug: Merged linear block@6 into block@5
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@5
debug: Removed empty block: block@7
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%16#0 75u) with copy of existing registers (Register(source_location=avm_types_in_abi/contract.py:4, ir_type=uint64, name='item_end_offset%0', version=0),)
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: Copy propagation made 1 modifications
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Optimizer: Perform Subroutine Inlining
avm_types_in_abi/contract.py:19:6 debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 in test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
avm_types_in_abi/contract.py:5:6 debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.create in test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: encoded_bool%0#0, item0%0#0
debug: Found equivalence set: tmp%8#0, bool_param#0, result.0#0, elements_to_encode%0#0
debug: Found equivalence set: tmp%10#0, uint64_param#0, result.1#0, elements_to_encode%1#0
debug: Found equivalence set: tmp%12#0, bytes_param#0, result.2#0, elements_to_encode%2#0
debug: Found equivalence set: tmp%13#0, biguint_param#0, result.3#0, elements_to_encode%3#0
debug: Found equivalence set: tmp%15#0, string_param#0, result.4#0, elements_to_encode%4#0
debug: Found equivalence set: item0%0%0#0, tuple_param.0#0
debug: Found equivalence set: item1%0%0#0, tuple_param.1#0
debug: Found equivalence set: item2%0%0#0, tuple_param.2#0
debug: Found equivalence set: item3%0#0, tuple_param.3#0
debug: Found equivalence set: item4%0%0#0, tuple_param.4#0
debug: Found equivalence set: item0%1#0, args.0#0, elements_to_encode%5#0
debug: Found equivalence set: item1%1#0, args.1#0, elements_to_encode%6#0
debug: Copy propagation made 28 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (== tmp%5#0 0u) to (! tmp%5#0)
debug: Simplified (concat 0x encoded_bool%1#0) to encoded_bool%1#0
debug: Simplified ((extract 6 2) as_bytes%2#0) to 0x004d
debug: Simplified (== tmp%18#0 NoOp) to (! tmp%18#0)
debug: Simplified (concat 0x args.0#0) to args.0#0
debug: Simplified (extract3 tmp%16#0 1u 8u) // on error: Index access is out of bounds to ((extract 1 8) tmp%16#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%16#0 11u 64u) // on error: Index access is out of bounds to ((extract 11 64) tmp%16#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%22#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%22#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%22#0 1u 32u) // on error: Index access is out of bounds to ((extract 1 32) tmp%22#0) // on error: Index access is out of bounds
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Removing unused variable as_bytes%2#0
debug: Removing unused variable offset_as_uint16%0#0
debug: Removing unused variable current_tail_offset%2#0
debug: Removing unused variable tmp%21#0
debug: Removing unused variable current_tail_offset%3#0
debug: Removing unused variable encoded_tuple_buffer%8#0
debug: Removing unused variable encoded_tuple_buffer%9#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@10 with block@2 in block@11
debug: Merged linear block@10 into block@2
debug: Merged linear block@11 into block@2
debug: Replaced predecessor block@8 with block@3 in block@9
debug: Merged linear block@8 into block@3
debug: Merged linear block@9 into block@3
debug: Replaced predecessor block@5 with block@4 in block@7
debug: Merged linear block@5 into block@4
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@4
debug: Removed empty block: block@6
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_start_offset%1#0: uint64 = (extract_uint16 tmp%16#0 75u) with copy of existing registers (Register(source_location=avm_types_in_abi/contract.py:4, ir_type=uint64, name='item_end_offset%0', version=0),)
debug: Found equivalence set: item_end_offset%0#0, item_start_offset%1#0
debug: Copy propagation made 1 modifications
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bool_param#0, result.0#0
debug: Found equivalence set: uint64_param#0, result.1#0
debug: Found equivalence set: bytes_param#0, result.2#0
debug: Found equivalence set: biguint_param#0, result.3#0
debug: Found equivalence set: string_param#0, result.4#0
debug: Copy propagation made 10 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__
debug: Begin optimization pass 2/100
debug: marking single-use function test_cases.avm_types_in_abi.contract.TestContract.create for inlining
debug: marking single-use function test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 for inlining
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
avm_types_in_abi/contract.py:19:6 debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4 in algopy.arc4.ARC4Contract.approval_program
avm_types_in_abi/contract.py:5:6 debug: inlining call to test_cases.avm_types_in_abi.contract.TestContract.create in algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%8#0, bool_param#0, elements_to_encode%0#0
debug: Found equivalence set: tmp%10#0, uint64_param#0, elements_to_encode%1#0
debug: Found equivalence set: tmp%12#0, bytes_param#0, elements_to_encode%2#0
debug: Found equivalence set: tmp%13#0, biguint_param#0, elements_to_encode%3#0
debug: Found equivalence set: tmp%15#0, string_param#0, elements_to_encode%4#0
debug: Found equivalence set: item0%0%0#0, tuple_param.0#0
debug: Found equivalence set: item1%0%0#0, tuple_param.1#0
debug: Found equivalence set: item2%0%0#0, tuple_param.2#0
debug: Found equivalence set: item3%0#0, tuple_param.3#0
debug: Found equivalence set: item4%0%0#0, tuple_param.4#0
debug: Found equivalence set: item0%1#0, args.0#0, elements_to_encode%5#0
debug: Found equivalence set: item1%1#0, args.1#0, elements_to_encode%6#0
debug: Copy propagation made 22 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable data_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@12 with block@3 in block@13
debug: Merged linear block@12 into block@3
debug: Replaced predecessor block@13 with block@3 in block@9
debug: Merged linear block@13 into block@3
debug: Replaced predecessor block@10 with block@4 in block@11
debug: Merged linear block@10 into block@4
debug: Replaced predecessor block@11 with block@4 in block@9
debug: Merged linear block@11 into block@4
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.create
debug: removing unused subroutine test_cases.avm_types_in_abi.contract.TestContract.tuple_of_arc4
debug: Begin optimization pass 3/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing tmp%0#1 with [tmp%0#2]
debug: Coalescing tmp%4#0 with [tmp%4#1]
debug: Coalescing tmp%6#0 with [tmp%6#1]
debug: Coalescing tmp%0#0 with [tmp%0#3, tmp%0#4]
debug: Coalescing tmp%1#0 with [tmp%1#1]
debug: Coalescing tmp%3#1 with [tmp%3#2]
debug: Coalescing test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0 with [test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#1, test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#2]
debug: Coalescing resulted in 20 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.approval_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to avm_types_in_abi/out_O2/TestContract.ir/TestContract.approval.0.destructured.ir
info: optimizing clear program of test_cases.avm_types_in_abi.contract.TestContract at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for algopy.arc4.ARC4Contract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in algopy.arc4.ARC4Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to avm_types_in_abi/out_O2/TestContract.ir/TestContract.clear.0.destructured.ir
debug: Inserted main.ops[1]: 'l-store-copy tmp%0#1 0'
debug: Replaced main.ops[3]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_abi_routing@2.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_abi_routing@2.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_create_route@3.ops[1]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_create_route@3.ops[3]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_create_route@3.ops[5]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_create_route@3.ops[7]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_create_route@3.ops[10]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_create_route@3.ops[12]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_create_route@3.ops[14]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_create_route@3.ops[16]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_create_route@3.ops[19]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_create_route@3.ops[21]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_create_route@3.ops[26]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_create_route@3.ops[28]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_create_route@3.ops[32]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_create_route@3.ops[34]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_create_route@3.ops[40]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_create_route@3.ops[42]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_create_route@3.ops[46]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[48]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[56]: 'l-store-copy encoded_bool%0#0 0'
debug: Replaced main_create_route@3.ops[58]: 'v-load encoded_bool%0#0' with 'l-load encoded_bool%0#0'
debug: Inserted main_create_route@3.ops[64]: 'l-store-copy item1%0#0 0'
debug: Replaced main_create_route@3.ops[66]: 'v-load item1%0#0' with 'l-load item1%0#0'
debug: Inserted main_create_route@3.ops[81]: 'l-store-copy item2%0#0 0'
debug: Replaced main_create_route@3.ops[83]: 'v-load item2%0#0' with 'l-load item2%0#0'
debug: Inserted main_create_route@3.ops[96]: 'l-store-copy item4%0#0 0'
debug: Replaced main_create_route@3.ops[98]: 'v-load item4%0#0' with 'l-load item4%0#0'
debug: Inserted main_create_route@3.ops[136]: 'l-store-copy tmp%8#1 0'
debug: Replaced main_create_route@3.ops[138]: 'v-load tmp%8#1' with 'l-load tmp%8#1'
debug: Inserted main_create_route@3.ops[150]: 'l-store-copy length%0#0 0'
debug: Replaced main_create_route@3.ops[152]: 'v-load length%0#0' with 'l-load length%0#0'
debug: Inserted main_create_route@3.ops[154]: 'l-store-copy as_bytes%0#0 0'
debug: Replaced main_create_route@3.ops[156]: 'v-load as_bytes%0#0' with 'l-load as_bytes%0#0'
debug: Inserted main_create_route@3.ops[158]: 'l-store-copy length_uint16%0#0 0'
debug: Replaced main_create_route@3.ops[160]: 'v-load length_uint16%0#0' with 'l-load length_uint16%0#0'
debug: Inserted main_create_route@3.ops[166]: 'l-store-copy len_%0#0 0'
debug: Replaced main_create_route@3.ops[168]: 'v-load len_%0#0' with 'l-load len_%0#0'
debug: Inserted main_create_route@3.ops[171]: 'l-store-copy no_overflow%0#0 0'
debug: Replaced main_create_route@3.ops[173]: 'v-load no_overflow%0#0' with 'l-load no_overflow%0#0'
debug: Inserted main_create_route@3.ops[184]: 'l-store-copy length%1#0 0'
debug: Replaced main_create_route@3.ops[186]: 'v-load length%1#0' with 'l-load length%1#0'
debug: Inserted main_create_route@3.ops[188]: 'l-store-copy as_bytes%1#0 0'
debug: Replaced main_create_route@3.ops[190]: 'v-load as_bytes%1#0' with 'l-load as_bytes%1#0'
debug: Inserted main_create_route@3.ops[192]: 'l-store-copy length_uint16%1#0 0'
debug: Replaced main_create_route@3.ops[194]: 'v-load length_uint16%1#0' with 'l-load length_uint16%1#0'
debug: Inserted main_create_route@3.ops[201]: 'l-store-copy encoded_tuple_buffer%2#0 0'
debug: Replaced main_create_route@3.ops[203]: 'v-load encoded_tuple_buffer%2#0' with 'l-load encoded_tuple_buffer%2#0'
debug: Inserted main_create_route@3.ops[220]: 'l-store-copy as_bytes%3#0 0'
debug: Replaced main_create_route@3.ops[222]: 'v-load as_bytes%3#0' with 'l-load as_bytes%3#0'
debug: Inserted main_create_route@3.ops[228]: 'l-store-copy encoded_tuple_buffer%5#0 0'
debug: Replaced main_create_route@3.ops[230]: 'v-load encoded_tuple_buffer%5#0' with 'l-load encoded_tuple_buffer%5#0'
debug: Inserted main_create_route@3.ops[233]: 'l-store-copy encoded_tuple_buffer%6#0 0'
debug: Replaced main_create_route@3.ops[235]: 'v-load encoded_tuple_buffer%6#0' with 'l-load encoded_tuple_buffer%6#0'
debug: Inserted main_create_route@3.ops[242]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_create_route@3.ops[244]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_create_route@3.ops[247]: 'l-store-copy test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_create_route@3.ops[249]: 'v-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0' with 'l-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0'
debug: Inserted main_create_route@3.ops[108]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_create_route@3.ops[111]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_create_route@3.ops[117]: 'l-store-copy tmp%3#1 0'
debug: Replaced main_create_route@3.ops[120]: 'v-load tmp%3#1' with 'l-load tmp%3#1'
debug: Inserted main_create_route@3.ops[126]: 'l-store-copy tmp%5#1 0'
debug: Replaced main_create_route@3.ops[129]: 'v-load tmp%5#1' with 'l-load tmp%5#1'
debug: Inserted main_create_route@3.ops[135]: 'l-store-copy tmp%7#1 0'
debug: Replaced main_create_route@3.ops[138]: 'v-load tmp%7#1' with 'l-load tmp%7#1'
debug: Inserted main_create_route@3.ops[181]: 'l-store-copy b_zeros%0#0 0'
debug: Replaced main_create_route@3.ops[184]: 'v-load b_zeros%0#0' with 'l-load b_zeros%0#0'
debug: Inserted main_create_route@3.ops[214]: 'l-store-copy data_length%0#0 0'
debug: Replaced main_create_route@3.ops[217]: 'v-load data_length%0#0' with 'l-load data_length%0#0'
debug: Inserted main_create_route@3.ops[230]: 'l-store-copy offset_as_uint16%1#0 0'
debug: Replaced main_create_route@3.ops[233]: 'v-load offset_as_uint16%1#0' with 'l-load offset_as_uint16%1#0'
debug: Inserted main_create_route@3.ops[245]: 'l-store-copy encoded_tuple_buffer%7#0 0'
debug: Replaced main_create_route@3.ops[248]: 'v-load encoded_tuple_buffer%7#0' with 'l-load encoded_tuple_buffer%7#0'
debug: Inserted main_create_route@3.ops[51]: 'l-store-copy is_true%0#0 0'
debug: Replaced main_create_route@3.ops[55]: 'v-load is_true%0#0' with 'l-load is_true%0#0'
debug: Inserted main_create_route@3.ops[77]: 'l-store-copy item_end_offset%0#0 0'
debug: Replaced main_create_route@3.ops[81]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_create_route@3.ops[89]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[92]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[93]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[96]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[95]: 'l-store-copy item_end_offset%1#0 1'
debug: Replaced main_create_route@3.ops[99]: 'v-load item_end_offset%1#0' with 'l-load item_end_offset%1#0'
debug: Inserted main_create_route@3.ops[71]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[75]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[76]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[81]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[111]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_create_route@3.ops[118]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_create_route@3.ops[121]: 'l-store-copy tmp%2#2 0'
debug: Replaced main_create_route@3.ops[128]: 'v-load tmp%2#2' with 'l-load tmp%2#2'
debug: Inserted main_create_route@3.ops[131]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_create_route@3.ops[138]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_create_route@3.ops[141]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_create_route@3.ops[148]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_create_route@3.ops[230]: 'l-store-copy current_tail_offset%1#0 0'
debug: Replaced main_create_route@3.ops[236]: 'v-load current_tail_offset%1#0' with 'l-load current_tail_offset%1#0'
debug: Inserted main_create_route@3.ops[64]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[71]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[75]: 'l-store-copy item_start_offset%0#0 1'
debug: Replaced main_create_route@3.ops[84]: 'v-load item_start_offset%0#0' with 'l-load item_start_offset%0#0'
debug: Inserted main_create_route@3.ops[237]: 'l-store-copy encoded_tuple_buffer%4#0 1'
debug: Replaced main_create_route@3.ops[247]: 'v-load encoded_tuple_buffer%4#0' with 'l-load encoded_tuple_buffer%4#0'
debug: Inserted main_create_route@3.ops[84]: 'l-store-copy tmp%16#0 2'
debug: Replaced main_create_route@3.ops[93]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[225]: 'l-store-copy encoded_tuple_buffer%3#0 0'
debug: Replaced main_create_route@3.ops[236]: 'v-load encoded_tuple_buffer%3#0' with 'l-load encoded_tuple_buffer%3#0'
debug: Inserted main_create_route@3.ops[167]: 'l-store-copy bytes_param#0 0'
debug: Replaced main_create_route@3.ops[180]: 'v-load bytes_param#0' with 'l-load bytes_param#0'
debug: Inserted main_create_route@3.ops[203]: 'l-store-copy string_param#0 0'
debug: Replaced main_create_route@3.ops[216]: 'v-load string_param#0' with 'l-load string_param#0'
debug: Inserted main_create_route@3.ops[184]: 'l-store-copy biguint_param#0 0'
debug: Replaced main_create_route@3.ops[199]: 'v-load biguint_param#0' with 'l-load biguint_param#0'
debug: Inserted main_create_route@3.ops[49]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_create_route@3.ops[64]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_create_route@3.ops[88]: 'l-store-copy item_end_offset%0#0 3'
debug: Replaced main_create_route@3.ops[105]: 'v-load item_end_offset%0#0' with 'l-load item_end_offset%0#0'
debug: Inserted main_create_route@3.ops[233]: 'l-store-copy encoded_value%0#0 1'
debug: Replaced main_create_route@3.ops[261]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_create_route@3.ops[94]: 'l-store-copy tuple_param.2#0 2'
debug: Replaced main_create_route@3.ops[130]: 'v-load tuple_param.2#0' with 'l-load tuple_param.2#0'
debug: Inserted main_create_route@3.ops[113]: 'l-store-copy tuple_param.4#0 1'
debug: Replaced main_create_route@3.ops[151]: 'v-load tuple_param.4#0' with 'l-load tuple_param.4#0'
debug: Inserted main_create_route@3.ops[206]: 'l-store-copy arc4_item%0#0 0'
debug: Replaced main_create_route@3.ops[246]: 'v-load arc4_item%0#0' with 'l-load arc4_item%0#0'
debug: Inserted main_create_route@3.ops[99]: 'l-store-copy tuple_param.3#0 3'
debug: Replaced main_create_route@3.ops[142]: 'v-load tuple_param.3#0' with 'l-load tuple_param.3#0'
debug: Inserted main_create_route@3.ops[132]: 'l-store-copy bytes_param#0 4'
debug: Replaced main_create_route@3.ops[172]: 'v-load bytes_param#0' with 'l-load bytes_param#0'
debug: Inserted main_create_route@3.ops[226]: 'l-store-copy encoded_value%1#0 1'
debug: Replaced main_create_route@3.ops[272]: 'v-load encoded_value%1#0' with 'l-load encoded_value%1#0'
debug: Inserted main_create_route@3.ops[71]: 'l-store-copy tuple_param.1#0 1'
debug: Replaced main_create_route@3.ops[123]: 'v-load tuple_param.1#0' with 'l-load tuple_param.1#0'
debug: Inserted main_create_route@3.ops[63]: 'l-store-copy tuple_param.0#0 1'
debug: Replaced main_create_route@3.ops[119]: 'v-load tuple_param.0#0' with 'l-load tuple_param.0#0'
debug: Inserted main_create_route@3.ops[190]: 'l-store-copy encoded_value%0#0 0'
debug: Replaced main_create_route@3.ops[241]: 'v-load encoded_value%0#0' with 'l-load encoded_value%0#0'
debug: Inserted main_create_route@3.ops[124]: 'l-store-copy uint64_param#0 5'
debug: Replaced main_create_route@3.ops[172]: 'v-load uint64_param#0' with 'l-load uint64_param#0'
debug: Inserted main_create_route@3.ops[146]: 'l-store-copy biguint_param#0 5'
debug: Replaced main_create_route@3.ops[194]: 'v-load biguint_param#0' with 'l-load biguint_param#0'
debug: Inserted main_create_route@3.ops[119]: 'l-store-copy bool_param#0 5'
debug: Replaced main_create_route@3.ops[171]: 'v-load bool_param#0' with 'l-load bool_param#0'
debug: Inserted main_create_route@3.ops[176]: 'l-store-copy val_as_bytes%0#0 2'
debug: Replaced main_create_route@3.ops[236]: 'v-load val_as_bytes%0#0' with 'l-load val_as_bytes%0#0'
debug: Inserted main_create_route@3.ops[173]: 'l-store-copy encoded_bool%1#0 3'
debug: Replaced main_create_route@3.ops[236]: 'v-load encoded_bool%1#0' with 'l-load encoded_bool%1#0'
debug: Inserted main_create_route@3.ops[158]: 'l-store-copy string_param#0 6'
debug: Replaced main_create_route@3.ops[219]: 'v-load string_param#0' with 'l-load string_param#0'
debug: Inserted main_create_route@3.ops[30]: 'l-store-copy uint64_param#0 0'
debug: Replaced main_create_route@3.ops[125]: 'v-load uint64_param#0' with 'l-load uint64_param#0'
debug: Inserted main_create_route@3.ops[24]: 'l-store-copy bool_param#0 0'
debug: Replaced main_create_route@3.ops[120]: 'v-load bool_param#0' with 'l-load bool_param#0'
debug: Inserted main_create_route@3.ops[38]: 'l-store-copy bytes_param#0 2'
debug: Replaced main_create_route@3.ops[138]: 'v-load bytes_param#0' with 'l-load bytes_param#0'
debug: Inserted main_create_route@3.ops[41]: 'l-store-copy biguint_param#0 3'
debug: Replaced main_create_route@3.ops[150]: 'v-load biguint_param#0' with 'l-load biguint_param#0'
debug: Inserted main_create_route@3.ops[48]: 'l-store-copy string_param#0 4'
debug: Replaced main_create_route@3.ops[162]: 'v-load string_param#0' with 'l-load string_param#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[1]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[3]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[5]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[7]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[10]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[12]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[15]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[17]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[25]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[27]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_tuple_of_arc4_route@4.ops[30]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[32]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[36]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[38]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_tuple_of_arc4_route@4.ops[41]: 'l-store-copy tmp%3#1 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[43]: 'v-load tmp%3#1' with 'l-load tmp%3#1'
debug: Inserted main_tuple_of_arc4_route@4.ops[52]: 'l-store-copy tmp%23#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[54]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[57]: 'l-store-copy test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[59]: 'v-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0' with 'l-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[48]: 'l-store-copy encoded_tuple_buffer%10#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[51]: 'v-load encoded_tuple_buffer%10#0' with 'l-load encoded_tuple_buffer%10#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[18]: 'l-store-copy tmp%22#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[21]: 'v-load tmp%22#0' with 'l-load tmp%22#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[20]: 'l-store-copy args.0#0 1'
debug: Replaced main_tuple_of_arc4_route@4.ops[25]: 'v-load args.0#0' with 'l-load args.0#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[24]: 'l-store-copy args.1#0 1'
debug: Replaced main_tuple_of_arc4_route@4.ops[37]: 'v-load args.1#0' with 'l-load args.1#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[38]: 'l-store-copy args.1#0 0'
debug: Replaced main_tuple_of_arc4_route@4.ops[50]: 'v-load args.1#0' with 'l-load args.1#0'
debug: Inserted main_tuple_of_arc4_route@4.ops[27]: 'l-store-copy args.0#0 1'
debug: Replaced main_tuple_of_arc4_route@4.ops[50]: 'v-load args.0#0' with 'l-load args.0#0'
debug: Inserted main_after_if_else@8.ops[1]: 'l-store-copy test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0 0'
debug: Replaced main_after_if_else@8.ops[3]: 'v-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0' with 'l-load test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__%0#0'
debug: Found 2 edge set/s for algopy.arc4.ARC4Contract.approval_program
debug: Allocated 1 variable/s to x-stack: tmp%0#0
debug: shared x-stack for main_create_route@3 -> main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9: tmp%0#0
debug: shared x-stack for main_tuple_of_arc4_route@4 -> main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9: tmp%0#0
debug: shared x-stack for main_after_if_else@8 -> main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9: tmp%0#0
debug: optimizing TEAL subroutine algopy.arc4.ARC4Contract.approval_program() -> uint64:
debug: replacing `b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9` with `return`
debug: replacing `b main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9` with `return`
debug: inlining single reference block main_abi_routing@2 into main
debug: inlining single reference block main_after_inlined_test_cases.avm_types_in_abi.contract.TestContract.__puya_arc4_router__@9 into main_after_if_else@8
debug: removing explicit jump to fall-through block main_after_if_else@8
debug: optimizing TEAL subroutine algopy.arc4.ARC4Contract.clear_state_program() -> uint64:
info: Writing avm_types_in_abi/out_O2/TestContract.approval.teal
info: Writing avm_types_in_abi/out_O2/TestContract.clear.teal
info: Writing avm_types_in_abi/out_O2/TestContract.approval.bin
info: Writing avm_types_in_abi/out_O2/TestContract.clear.bin
info: Writing avm_types_in_abi/out_O2/TestContract.approval.puya.map
info: Writing avm_types_in_abi/out_O2/TestContract.clear.puya.map