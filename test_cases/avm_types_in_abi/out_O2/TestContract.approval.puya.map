{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAeK;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAmBe;;AAAA;AAAwB;AAAxB;AAAP;AACO;AAAA;AAAwB;;AAAxB;AAAP;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADL;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAYe;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;AAXH;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 0x00"
    },
    "15": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "bz main_after_if_else@8",
      "stack_out": []
    },
    "20": {
      "op": "pushbytess 0xfb716652 0x7ea64078 // method \"create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string)\", method \"tuple_of_arc4((uint8,address))(uint8,address)\"",
      "defined_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))"
      ],
      "stack_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))"
      ]
    },
    "32": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(bool,uint64,byte[],uint512,string,(bool,uint64,byte[],uint512,string))(bool,uint64,byte[],uint512,string))",
        "Method(tuple_of_arc4((uint8,address))(uint8,address))",
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "match main_create_route@3 main_tuple_of_arc4_route@4",
      "stack_out": []
    },
    "41": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "42": {
      "op": "return",
      "stack_out": []
    },
    "43": {
      "block": "main_tuple_of_arc4_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "45": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "46": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "47": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "49": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "50": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ]
    },
    "53": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0 (copy)"
      ]
    },
    "54": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "args.0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((uint8,uint8[32]))%0#0",
        "args.0#0"
      ]
    },
    "57": {
      "op": "swap",
      "stack_out": [
        "args.0#0",
        "reinterpret_Encoded((uint8,uint8[32]))%0#0"
      ]
    },
    "58": {
      "error": "Index access is out of bounds",
      "op": "extract 1 32 // on error: Index access is out of bounds",
      "defined_out": [
        "args.0#0",
        "args.1#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0"
      ]
    },
    "61": {
      "op": "dig 1",
      "defined_out": [
        "args.0#0",
        "args.0#0 (copy)",
        "args.1#0"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "args.0#0 (copy)"
      ]
    },
    "63": {
      "op": "len",
      "defined_out": [
        "args.0#0",
        "args.1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%0#1"
      ]
    },
    "64": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "args.0#0",
        "args.1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%0#1",
        "1"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "args.0#0",
        "args.1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%1#1"
      ]
    },
    "66": {
      "op": "assert",
      "stack_out": [
        "args.0#0",
        "args.1#0"
      ]
    },
    "67": {
      "op": "dup",
      "defined_out": [
        "args.0#0",
        "args.1#0",
        "args.1#0 (copy)"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "args.1#0 (copy)"
      ]
    },
    "68": {
      "op": "len",
      "defined_out": [
        "args.0#0",
        "args.1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%2#1"
      ]
    },
    "69": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "args.0#0",
        "args.1#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%2#1",
        "32"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "args.0#0",
        "args.1#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "args.0#0",
        "args.1#0",
        "tmp%3#1"
      ]
    },
    "72": {
      "op": "assert",
      "stack_out": [
        "args.0#0",
        "args.1#0"
      ]
    },
    "73": {
      "op": "concat",
      "defined_out": [
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%7#0"
      ]
    },
    "74": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%7#0"
      ],
      "stack_out": [
        "encoded%7#0",
        "0x151f7c75"
      ]
    },
    "75": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%7#0"
      ]
    },
    "76": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "77": {
      "op": "log",
      "stack_out": []
    },
    "78": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "87": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "88": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "92": {
      "op": "getbit",
      "defined_out": [
        "bool_param#0"
      ],
      "stack_out": [
        "bool_param#0"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "bool_param#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "bool_param#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "96": {
      "op": "btoi",
      "defined_out": [
        "bool_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0"
      ]
    },
    "97": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "bool_param#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "100": {
      "op": "extract 2 0",
      "defined_out": [
        "bool_param#0",
        "bytes_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0"
      ]
    },
    "103": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "109": {
      "op": "extract 2 0",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0"
      ]
    },
    "112": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "0"
      ]
    },
    "117": {
      "op": "getbit",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "is_true%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0"
      ]
    },
    "118": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "is_true%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "120": {
      "op": "uncover 2",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "122": {
      "op": "setbit",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "encoded_bool%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "encoded_bool%0#0"
      ]
    },
    "123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "124": {
      "op": "getbit",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0"
      ]
    },
    "125": {
      "op": "dig 1",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "127": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "string_param#0",
        "tuple_param.0#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "1"
      ]
    },
    "128": {
      "op": "extract_uint64",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0"
      ]
    },
    "129": {
      "op": "dig 2",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "131": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "9"
      ]
    },
    "133": {
      "op": "extract_uint16",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_start_offset%0#0"
      ]
    },
    "134": {
      "op": "dig 3",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "136": {
      "op": "pushint 75 // 75",
      "defined_out": [
        "75",
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "75"
      ]
    },
    "138": {
      "op": "extract_uint16",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "139": {
      "op": "dig 4",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "141": {
      "op": "uncover 2",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "143": {
      "op": "dig 2",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "145": {
      "op": "substring3",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item2%0#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "item2%0#0"
      ]
    },
    "146": {
      "op": "extract 2 0",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0"
      ]
    },
    "149": {
      "op": "dig 4",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "151": {
      "error": "Index access is out of bounds",
      "op": "extract 11 64 // on error: Index access is out of bounds",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_end_offset%0#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0",
        "tuple_param.3#0"
      ]
    },
    "154": {
      "op": "dig 5",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0 (copy)"
      ]
    },
    "156": {
      "op": "len",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "item_end_offset%1#0"
      ]
    },
    "157": {
      "op": "uncover 6",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "item_end_offset%0#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0"
      ]
    },
    "159": {
      "op": "uncover 4",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "item_end_offset%1#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%0#0"
      ]
    },
    "161": {
      "op": "uncover 2",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "reinterpret_Encoded((bool1,uint64,len+uint8[],uint512,len+utf8[]))%0#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "163": {
      "op": "substring3",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "item4%0#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "item4%0#0"
      ]
    },
    "164": {
      "op": "extract 2 0",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0"
      ]
    },
    "167": {
      "op": "dig 9",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bool_param#0 (copy)",
        "bytes_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "bool_param#0 (copy)"
      ]
    },
    "169": {
      "op": "uncover 5",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "bool_param#0 (copy)",
        "tuple_param.0#0"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "dig 8",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%0#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0",
        "uint64_param#0 (copy)"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.1#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%0#0",
        "uint64_param#0 (copy)"
      ]
    },
    "174": {
      "op": "uncover 5",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%0#0",
        "uint64_param#0 (copy)",
        "tuple_param.1#0"
      ]
    },
    "176": {
      "op": "==",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%0#0",
        "tmp%1#1",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "177": {
      "op": "&&",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%2#2",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%2#2"
      ]
    },
    "178": {
      "op": "dig 6",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "bytes_param#0 (copy)",
        "string_param#0",
        "tmp%2#2",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.2#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%2#2",
        "bytes_param#0 (copy)"
      ]
    },
    "180": {
      "op": "uncover 4",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%2#2",
        "bytes_param#0 (copy)",
        "tuple_param.2#0"
      ]
    },
    "182": {
      "op": "==",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%2#2",
        "tmp%3#1",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%2#2",
        "tmp%3#1"
      ]
    },
    "183": {
      "op": "&&",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%4#0"
      ]
    },
    "184": {
      "op": "dig 4",
      "defined_out": [
        "biguint_param#0",
        "biguint_param#0 (copy)",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%4#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.3#0",
        "tuple_param.4#0",
        "tmp%4#0",
        "biguint_param#0 (copy)"
      ]
    },
    "186": {
      "op": "uncover 3",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.4#0",
        "tmp%4#0",
        "biguint_param#0 (copy)",
        "tuple_param.3#0"
      ]
    },
    "188": {
      "op": "b==",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%4#0",
        "tmp%5#1",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.4#0",
        "tmp%4#0",
        "tmp%5#1"
      ]
    },
    "189": {
      "op": "&&",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.4#0",
        "tmp%6#0"
      ]
    },
    "190": {
      "op": "dig 2",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "string_param#0 (copy)",
        "tmp%6#0",
        "tuple_param.4#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tuple_param.4#0",
        "tmp%6#0",
        "string_param#0 (copy)"
      ]
    },
    "192": {
      "op": "uncover 2",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tmp%6#0",
        "string_param#0 (copy)",
        "tuple_param.4#0"
      ]
    },
    "194": {
      "op": "==",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%6#0",
        "tmp%7#1",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tmp%6#0",
        "tmp%7#1"
      ]
    },
    "195": {
      "op": "&&",
      "defined_out": [
        "biguint_param#0",
        "bool_param#0",
        "bytes_param#0",
        "string_param#0",
        "tmp%8#1",
        "uint64_param#0"
      ],
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "tmp%8#1"
      ]
    },
    "196": {
      "op": "assert",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0"
      ]
    },
    "197": {
      "op": "bytec_1 // 0x00",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "0x00"
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "bool_param#0",
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "0x00",
        "0"
      ]
    },
    "199": {
      "op": "uncover 6",
      "stack_out": [
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "0x00",
        "0",
        "bool_param#0"
      ]
    },
    "201": {
      "op": "setbit",
      "defined_out": [
        "biguint_param#0",
        "bytes_param#0",
        "encoded_bit%0#0",
        "string_param#0",
        "uint64_param#0"
      ],
      "stack_out": [
        "uint64_param#0",
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded_bit%0#0"
      ]
    },
    "202": {
      "op": "uncover 4",
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded_bit%0#0",
        "uint64_param#0"
      ]
    },
    "204": {
      "op": "itob",
      "defined_out": [
        "biguint_param#0",
        "bytes_param#0",
        "encoded_bit%0#0",
        "string_param#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded_bit%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "biguint_param#0",
        "bytes_param#0",
        "encoded%1#0",
        "string_param#0"
      ],
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0"
      ]
    },
    "206": {
      "op": "dig 3",
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "bytes_param#0 (copy)"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "biguint_param#0",
        "bytes_param#0",
        "encoded%1#0",
        "length%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "length%0#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "biguint_param#0",
        "bytes_param#0",
        "encoded%1#0",
        "string_param#0"
      ],
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "as_bytes%0#0"
      ]
    },
    "210": {
      "op": "extract 6 2",
      "defined_out": [
        "biguint_param#0",
        "bytes_param#0",
        "encoded%1#0",
        "length_uint16%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "bytes_param#0",
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "length_uint16%0#0"
      ]
    },
    "213": {
      "op": "uncover 4",
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "length_uint16%0#0",
        "bytes_param#0"
      ]
    },
    "215": {
      "op": "concat",
      "defined_out": [
        "biguint_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "encoded_value%0#0"
      ]
    },
    "216": {
      "op": "dup",
      "defined_out": [
        "biguint_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "217": {
      "op": "len",
      "defined_out": [
        "biguint_param#0",
        "data_length%0#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "data_length%0#0"
      ]
    },
    "218": {
      "op": "pushint 77 // 77",
      "defined_out": [
        "77",
        "biguint_param#0",
        "data_length%0#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "data_length%0#0",
        "77"
      ]
    },
    "220": {
      "op": "+",
      "defined_out": [
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0"
      ]
    },
    "221": {
      "op": "uncover 2",
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0"
      ]
    },
    "223": {
      "op": "pushbytes 0x004d",
      "defined_out": [
        "0x004d",
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%1#0",
        "0x004d"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "228": {
      "op": "dig 4",
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "biguint_param#0 (copy)"
      ]
    },
    "230": {
      "op": "len",
      "defined_out": [
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "string_param#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "value_len%0#0"
      ]
    },
    "231": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "string_param#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "value_len%0#0",
        "64"
      ]
    },
    "232": {
      "op": "<=",
      "defined_out": [
        "biguint_param#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "len_ok%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "len_ok%0#0"
      ]
    },
    "233": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0"
      ]
    },
    "234": {
      "op": "intc_2 // 64",
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "64"
      ]
    },
    "235": {
      "op": "bzero",
      "defined_out": [
        "biguint_param#0",
        "bzero%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "biguint_param#0",
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "bzero%0#0"
      ]
    },
    "236": {
      "op": "uncover 5",
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "bzero%0#0",
        "biguint_param#0"
      ]
    },
    "238": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%2#0",
        "arc4_encoded%0#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0"
      ]
    },
    "240": {
      "op": "dig 3",
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "string_param#0 (copy)"
      ]
    },
    "242": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "length%1#0",
        "string_param#0"
      ],
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length%1#0"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "string_param#0"
      ],
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "as_bytes%2#0"
      ]
    },
    "244": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "string_param#0"
      ],
      "stack_out": [
        "string_param#0",
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length_uint16%1#0"
      ]
    },
    "247": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "length_uint16%1#0",
        "string_param#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%1#0"
      ]
    },
    "250": {
      "op": "uncover 3",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "current_tail_offset%0#0",
        "encoded%3#0",
        "tail%1#0"
      ]
    },
    "254": {
      "op": "uncover 2",
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "current_tail_offset%0#0"
      ]
    },
    "256": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded%3#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "as_bytes%3#0"
      ]
    },
    "257": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded%3#0",
        "offset_as_uint16%1#0",
        "tail%1#0"
      ],
      "stack_out": [
        "encoded%3#0",
        "tail%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "260": {
      "op": "uncover 2",
      "stack_out": [
        "tail%1#0",
        "offset_as_uint16%1#0",
        "encoded%3#0"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "tail%1#0",
        "encoded%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "encoded%4#0",
        "tail%1#0"
      ],
      "stack_out": [
        "tail%1#0",
        "encoded%4#0"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "encoded%4#0",
        "tail%1#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0"
      ]
    },
    "266": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded%5#0"
      ],
      "stack_out": [
        "encoded%5#0",
        "0x151f7c75"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded%5#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "269": {
      "op": "log",
      "stack_out": []
    },
    "270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "return",
      "stack_out": []
    }
  }
}