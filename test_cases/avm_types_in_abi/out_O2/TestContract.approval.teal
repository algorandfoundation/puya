#pragma version 10

test_cases.avm_types_in_abi.contract.TestContract.approval_program:
    method "create(bool,uint64,byte[],(bool,uint64,byte[]))(bool,uint64,byte[])"
    txna ApplicationArgs 0
    match main_create_route@1
    err // reject transaction

main_create_route@1:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    txna ApplicationArgs 1
    int 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    dup
    int 0
    getbit
    byte 0x00
    int 0
    uncover 2
    setbit
    swap
    dup
    extract 1 8
    cover 2
    dup
    int 9
    extract_uint16
    dup2
    extract_uint16
    int 2
    +
    extract3
    swap
    int 0
    getbit
    swap
    uncover 2
    btoi
    swap
    extract 2 0
    callsub create
    cover 2
    swap
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    itob
    cover 2
    dup
    len
    itob
    substring 6 8
    swap
    concat
    byte 0x
    uncover 2
    concat
    uncover 2
    concat
    byte 0x000b
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return


// test_cases.avm_types_in_abi.contract.TestContract.create(bool_param: uint64, uint64_param: uint64, bytes_param: bytes, tuple_param.0: uint64, tuple_param.1: uint64, tuple_param.2: bytes) -> uint64, uint64, bytes:
create:
    proto 6 3
    frame_dig -6
    frame_dig -3
    ==
    bz create_bool_false@4
    frame_dig -5
    frame_dig -2
    ==
    bz create_bool_false@4
    frame_dig -4
    frame_dig -1
    ==
    bz create_bool_false@4
    int 1
    b create_bool_merge@5

create_bool_false@4:
    int 0

create_bool_merge@5:
    assert
    frame_dig -6
    frame_dig -5
    frame_dig -4
    retsub
