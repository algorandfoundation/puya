debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=False, output_ssa_ir=False, output_optimization_ir=False, output_destructured_ir=True, output_memory_ir=False, output_bytecode=True, debug_level=0, optimization_level=2, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['simplish'], output_awst=False, output_awst_json=False, output_client=False, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@3
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6
debug: Terminated block@6
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.simplish.contract.Simplish.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.simplish.base_class.CallCounter.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.contract.Simplish.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
simplish/contract.py:35:12 debug: encountered already materialized expression (oca), reusing result: oca#0
debug: Terminated block@3
debug: Sealing block@4
debug: Created Phi assignment: let oca#1: uint64 = undefined while trying to resolve 'oca' in block@4
debug: Added oca#0 to Phi node: let oca#1: uint64 = φ(oca#0 <- block@2) in block@2
debug: Added oca#0 to Phi node: let oca#1: uint64 = φ(oca#0 <- block@2, oca#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let oca#1: uint64 = φ(oca#0 <- block@2, oca#0 <- block@3) (oca#1) with oca#0
debug: Deleting Phi assignment: let oca#1: uint64 = φ(oca#0 <- block@2, oca#0 <- block@3)
debug: Replaced trivial Phi node: let oca#1: uint64 = φ(oca#0 <- block@2, oca#0 <- block@3) (oca#1) with oca#0 in current definition for 1 blocks
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Created Phi assignment: let sender#1: bytes = undefined while trying to resolve 'sender' in block@6
debug: Created Phi assignment: let sender#2: bytes = undefined while trying to resolve 'sender' in block@4
debug: Added sender#0 to Phi node: let sender#2: bytes = φ(sender#0 <- block@2) in block@2
debug: Added sender#0 to Phi node: let sender#2: bytes = φ(sender#0 <- block@2, sender#0 <- block@3) in block@3
debug: Replacing trivial Phi node: let sender#2: bytes = φ(sender#0 <- block@2, sender#0 <- block@3) (sender#2) with sender#0
debug: Deleting Phi assignment: let sender#2: bytes = φ(sender#0 <- block@2, sender#0 <- block@3)
debug: Replaced trivial Phi node: let sender#2: bytes = φ(sender#0 <- block@2, sender#0 <- block@3) (sender#2) with sender#0 in current definition for 1 blocks
debug: Added sender#0 to Phi node: let sender#1: bytes = φ(sender#0 <- block@4) in block@4
debug: Added sender#0 to Phi node: let sender#1: bytes = φ(sender#0 <- block@4, sender#0 <- block@5) in block@5
debug: Replacing trivial Phi node: let sender#1: bytes = φ(sender#0 <- block@4, sender#0 <- block@5) (sender#1) with sender#0
debug: Deleting Phi assignment: let sender#1: bytes = φ(sender#0 <- block@4, sender#0 <- block@5)
debug: Replaced trivial Phi node: let sender#1: bytes = φ(sender#0 <- block@4, sender#0 <- block@5) (sender#1) with sender#0 in current definition for 1 blocks
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Created Phi assignment: let msg#4: bytes = undefined while trying to resolve 'msg' in block@22
debug: Added msg#0 to Phi node: let msg#4: bytes = φ(msg#0 <- block@14) in block@14
debug: Created Phi assignment: let msg#5: bytes = undefined while trying to resolve 'msg' in block@21
debug: Created Phi assignment: let msg#6: bytes = undefined while trying to resolve 'msg' in block@19
debug: Added msg#1 to Phi node: let msg#6: bytes = φ(msg#1 <- block@17) in block@17
debug: Added msg#2 to Phi node: let msg#6: bytes = φ(msg#1 <- block@17, msg#2 <- block@18) in block@18
debug: Added msg#6 to Phi node: let msg#5: bytes = φ(msg#6 <- block@19) in block@19
debug: Added msg#3 to Phi node: let msg#5: bytes = φ(msg#6 <- block@19, msg#3 <- block@20) in block@20
debug: Added msg#5 to Phi node: let msg#4: bytes = φ(msg#0 <- block@14, msg#5 <- block@21) in block@21
debug: Created Phi assignment: let result#3: bool = undefined while trying to resolve 'result' in block@22
debug: Added result#0 to Phi node: let result#3: bool = φ(result#0 <- block@14) in block@14
debug: Created Phi assignment: let result#4: bool = undefined while trying to resolve 'result' in block@21
debug: Added result#1 to Phi node: let result#4: bool = φ(result#1 <- block@19) in block@19
debug: Added result#2 to Phi node: let result#4: bool = φ(result#1 <- block@19, result#2 <- block@20) in block@20
debug: Added result#4 to Phi node: let result#3: bool = φ(result#0 <- block@14, result#4 <- block@21) in block@21
debug: Terminated block@22
debug: Building IR for function test_cases.simplish.contract.itoa
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Building IR for function test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.contract.Simplish.call
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@9
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@1) in block@1
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@8
debug: Added result#1 to Phi node: let result#5: bytes = φ(result#1 <- block@3) in block@3
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@7
debug: Added result#2 to Phi node: let result#6: bytes = φ(result#2 <- block@5) in block@5
debug: Added result#3 to Phi node: let result#6: bytes = φ(result#2 <- block@5, result#3 <- block@6) in block@6
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#1 <- block@3, result#6 <- block@7) in block@7
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#0 <- block@1, result#5 <- block@8) in block@8
debug: Created Phi assignment: let status#2: bool = undefined while trying to resolve 'status' in block@9
debug: Added status#0 to Phi node: let status#2: bool = φ(status#0 <- block@1) in block@1
debug: Created Phi assignment: let status#3: bool = undefined while trying to resolve 'status' in block@8
debug: Added status#0 to Phi node: let status#3: bool = φ(status#0 <- block@3) in block@3
debug: Created Phi assignment: let status#4: bool = undefined while trying to resolve 'status' in block@7
debug: Added status#0 to Phi node: let status#4: bool = φ(status#0 <- block@5) in block@5
debug: Added status#1 to Phi node: let status#4: bool = φ(status#0 <- block@5, status#1 <- block@6) in block@6
debug: Added status#4 to Phi node: let status#3: bool = φ(status#0 <- block@3, status#4 <- block@7) in block@7
debug: Added status#3 to Phi node: let status#2: bool = φ(status#0 <- block@1, status#3 <- block@8) in block@8
debug: Terminated block@9
debug: Building IR for function test_cases.simplish.contract.circle_area
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.contract.circle_circumference
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.contract.Simplish.increment_counter
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.base_class.CallCounter.increment_counter
debug: Sealing block@0
simplish/base_class.py:13:9 debug: encountered already materialized expression ('counter'), reusing result: "counter"
debug: Terminated block@0
debug: Building IR for function test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Building IR for function test_cases.simplish.contract.Simplish.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
info: optimizing approval program of test_cases.simplish.contract.Simplish at level 2
debug: Begin optimization pass 1/100
simplish/contract.py:117 debug: function is auto-recursive: test_cases.simplish.contract.itoa
debug: marking single-use function test_cases.simplish.base_class.CallCounter.__init__ for inlining
debug: marking single-use function test_cases.simplish.contract.Simplish.approval_program for inlining
debug: marking single-use function test_cases.simplish.base_class.CallCounter.set_sender_nickname for inlining
debug: marking single-use function test_cases.simplish.contract.Simplish.call for inlining
debug: marking single-use function test_cases.simplish.contract.Simplish.increment_counter for inlining
debug: marking single-use function test_cases.simplish.base_class.CallCounter.increment_counter for inlining
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.simplish.contract.Simplish.approval_program in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: inlining call to test_cases.simplish.base_class.CallCounter.__init__ in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, msg#0
debug: Found equivalence set: tuple_assignment%1#0, result#0
debug: Found equivalence set: tuple_assignment%2#0, asset_balance#0
debug: Found equivalence set: tuple_assignment%3#0, asset_exists#0
debug: Copy propagation made 4 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%0#1 0u) to (! tmp%0#1)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%1#1 by swapping zero and non-zero targets
debug: simplified terminator of block@3 from goto tmp%1#1 ? block@4 : block@5 to goto tmp%0#1 ? block@5 : block@4
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@27 with block@1 in block@28
debug: Merged linear block@27 into block@1
debug: Replaced predecessor block@28 with block@1 in block@2
debug: Merged linear block@28 into block@1
debug: Replaced predecessor block@3 with block@2 in block@4
debug: Replaced predecessor block@3 with block@2 in block@5
debug: Merged linear block@3 into block@2
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.approval_program
debug: Optimizer: Perform Subroutine Inlining
simplish/contract.py:64:9 debug: inlining call to test_cases.simplish.contract.Simplish.increment_counter in test_cases.simplish.contract.Simplish.approval_program
simplish/contract.py:52:27 debug: inlining call to test_cases.simplish.contract.Simplish.call in test_cases.simplish.contract.Simplish.approval_program
simplish/contract.py:45:17 debug: inlining call to test_cases.simplish.base_class.CallCounter.set_sender_nickname in test_cases.simplish.contract.Simplish.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%13#0, nickname#0
debug: Found equivalence set: method_name#0, method_name#1
debug: Found equivalence set: num_app_args#0, num_app_args#1
debug: Found equivalence set: tmp%5#1, area#1
debug: Found equivalence set: tmp%6#1, circumference#1
debug: Found equivalence set: result#9, tuple_assignment%0#0, msg#0
debug: Found equivalence set: status#2, tuple_assignment%1#0, result#0
debug: Found equivalence set: tuple_assignment%2#0, asset_balance#0
debug: Found equivalence set: tuple_assignment%3#0, asset_exists#0
debug: Copy propagation made 11 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%0#0 0u) to (! tmp%0#0)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%1#0 by swapping zero and non-zero targets
debug: simplified terminator of block@0 from goto tmp%1#0 ? block@1 : block@2 to goto tmp%0#0 ? block@2 : block@1
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@36 with block@9 in block@37
debug: Merged linear block@36 into block@9
debug: Replaced predecessor block@37 with block@9 in block@10
debug: Merged linear block@37 into block@9
debug: Replaced predecessor block@25 with block@14 in block@27
debug: Replaced predecessor block@25 with block@14 in block@26
debug: Merged linear block@25 into block@14
debug: Replaced predecessor block@35 with block@34 in block@22
debug: Merged linear block@35 into block@34
debug: Replaced predecessor block@23 with block@22 in block@24
debug: Merged linear block@23 into block@22
debug: Merged linear block@24 into block@22
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x30313233343536373839) to 10u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable digits#0
debug: Removing unused variable radix#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.call
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%5#0, area#1
debug: Found equivalence set: tmp%6#0, circumference#1
debug: Copy propagation made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 2u 314159u) to 628318u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable two_pi#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Optimizer: Perform Subroutine Inlining
simplish/contract.py:100:9 debug: inlining call to test_cases.simplish.base_class.CallCounter.increment_counter in test_cases.simplish.contract.Simplish.increment_counter
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Merged linear block@2 into block@0
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.increment_counter
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.simplish.base_class.CallCounter.__init__
debug: removing unused subroutine test_cases.simplish.contract.Simplish.approval_program
debug: removing unused subroutine test_cases.simplish.base_class.CallCounter.increment_counter
debug: Begin optimization pass 2/100
debug: marking single-use function test_cases.simplish.base_class.CallCounter.set_sender_nickname for inlining
debug: marking single-use function test_cases.simplish.contract.Simplish.call for inlining
debug: marking single-use function test_cases.simplish.contract.Simplish.increment_counter for inlining
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
simplish/contract.py:64:9 debug: inlining call to test_cases.simplish.contract.Simplish.increment_counter in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
simplish/contract.py:52:27 debug: inlining call to test_cases.simplish.contract.Simplish.call in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
simplish/contract.py:45:17 debug: inlining call to test_cases.simplish.base_class.CallCounter.set_sender_nickname in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%13#0, nickname#0
debug: Found equivalence set: method_name#0, method_name#1
debug: Found equivalence set: num_app_args#0, num_app_args#1
debug: Found equivalence set: result#9, msg#0
debug: Found equivalence set: status#2, result#0
debug: Copy propagation made 7 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#1
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@40 with block@12 in block@41
debug: Merged linear block@40 into block@12
debug: Replaced predecessor block@41 with block@12 in block@13
debug: Merged linear block@41 into block@12
debug: Replaced predecessor block@29 with block@17 in block@31
debug: Replaced predecessor block@29 with block@17 in block@30
debug: Merged linear block@29 into block@17
debug: Replaced predecessor block@39 with block@38 in block@25
debug: Merged linear block@39 into block@38
debug: Replaced predecessor block@27 with block@25 in block@28
debug: Merged linear block@27 into block@25
debug: Replaced predecessor block@28 with block@25 in block@26
debug: Merged linear block@28 into block@25
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.call
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: removing unused subroutine test_cases.simplish.contract.Simplish.call
debug: removing unused subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Begin optimization pass 3/100
debug: marking simple function test_cases.simplish.contract.circle_area for inlining (complexity=3 <= threshold=3)
debug: marking simple function test_cases.simplish.contract.circle_circumference for inlining (complexity=2 <= threshold=3)
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
simplish/contract.py:83:35 debug: inlining call to test_cases.simplish.contract.circle_area in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
simplish/contract.py:83:56 debug: inlining call to test_cases.simplish.contract.circle_circumference in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
simplish/contract.py:80:13 debug: inlining call to test_cases.simplish.contract.circle_circumference in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
simplish/contract.py:77:13 debug: inlining call to test_cases.simplish.contract.circle_area in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: radius#0, radius#4, radius#3, radius#1, radius#2
debug: Found equivalence set: result#13, area#0
debug: Found equivalence set: tmp%1#5, circumference#0
debug: Found equivalence set: result#12, area#1
debug: Found equivalence set: tmp%1#4, circumference#1
debug: Copy propagation made 8 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@45 with block@30 in block@46
debug: Merged linear block@45 into block@30
debug: Replaced predecessor block@46 with block@30 in block@38
debug: Merged linear block@46 into block@30
debug: Replaced predecessor block@43 with block@32 in block@44
debug: Merged linear block@43 into block@32
debug: Replaced predecessor block@44 with block@32 in block@37
debug: Merged linear block@44 into block@32
debug: Replaced predecessor block@39 with block@34 in block@40
debug: Merged linear block@39 into block@34
debug: Replaced predecessor block@40 with block@34 in block@41
debug: Merged linear block@40 into block@34
debug: Replaced predecessor block@41 with block@34 in block@42
debug: Merged linear block@41 into block@34
debug: Replaced predecessor block@42 with block@34 in block@36
debug: Merged linear block@42 into block@34
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine test_cases.simplish.contract.circle_area
debug: removing unused subroutine test_cases.simplish.contract.circle_circumference
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 4, ending loop
debug: Performing SSA IR destructuring for test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init using strategy RootOperandGrouping
debug: Coalescing tmp%0#0 with [tmp%0#2]
debug: Coalescing tmp%0#1 with [tmp%0#6, tmp%0#5, tmp%0#3, tmp%0#4]
debug: Coalescing test_cases.simplish.contract.Simplish.approval_program%0#0 with [test_cases.simplish.contract.Simplish.approval_program%0#2, test_cases.simplish.contract.Simplish.approval_program%0#3]
debug: Coalescing tmp%1#0 with [tmp%1#7]
debug: Coalescing tmp%2#0 with [tmp%2#1]
debug: Coalescing tmp%3#0 with [tmp%3#1]
debug: Coalescing tmp%4#0 with [tmp%4#1]
debug: Coalescing maybe_value%0#0 with [maybe_value%0#1]
debug: Coalescing maybe_exists%0#0 with [maybe_exists%0#1]
debug: Coalescing tmp%7#0 with [tmp%7#1]
debug: Coalescing tmp%8#0 with [tmp%8#1]
debug: Coalescing status#0 with [status#13, status#10, status#7, status#1, status#4, status#3, status#2]
debug: Coalescing tmp%1#3 with [tmp%1#6]
debug: Coalescing result#12 with [result#13]
debug: Coalescing result#5 with [result#22, result#6, result#19, result#7, result#16, result#8, result#11, result#10, result#9]
debug: Coalescing circumference#0 with [circumference#1]
debug: Coalescing msg#1 with [msg#14, msg#9, msg#2, msg#6, msg#12, msg#3, msg#5, msg#4]
debug: Coalescing result#1 with [result#28, result#25, result#2, result#4, result#3]
debug: Coalescing resulted in 109 replacement/s
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {result#5=result#5, status#0=status#0}
debug: pred: {result#5=result#5, status#0=status#0}
debug: ready: 
debug: to_do: result#5, status#0
debug: * to_do status#0
debug: * to_do result#5
debug: loc: {msg#1=None, result#1=None, result#5=result#5, status#0=status#0}
debug: pred: {msg#1=result#5, result#1=status#0}
debug: ready: msg#1, result#1
debug: to_do: msg#1, result#1
debug: * avail result#1
debug: * avail status#0
debug: * avail msg#1
debug: * avail result#5
debug: * to_do result#1
debug: * to_do msg#1
debug: loc: {msg#1=msg#1, result#1=result#1}
debug: pred: {msg#1=msg#1, result#1=result#1}
debug: ready: 
debug: to_do: msg#1, result#1
debug: * to_do result#1
debug: * to_do msg#1
debug: loc: {msg#1=msg#1, result#1=result#1}
debug: pred: {msg#1=msg#1, result#1=result#1}
debug: ready: 
debug: to_do: msg#1, result#1
debug: * to_do result#1
debug: * to_do msg#1
debug: loc: {msg#1=msg#1, result#1=result#1}
debug: pred: {msg#1=msg#1, result#1=result#1}
debug: ready: 
debug: to_do: msg#1, result#1
debug: * to_do result#1
debug: * to_do msg#1
debug: loc: {msg#1=msg#1, result#1=result#1}
debug: pred: {msg#1=msg#1, result#1=result#1}
debug: ready: 
debug: to_do: msg#1, result#1
debug: * to_do result#1
debug: * to_do msg#1
debug: loc: {msg#1=msg#1, result#1=result#1}
debug: pred: {msg#1=msg#1, result#1=result#1}
debug: ready: 
debug: to_do: msg#1, result#1
debug: * to_do result#1
debug: * to_do msg#1
debug: Performing post-SSA optimizations at level 2
debug: Removing jump block block@36
debug: Removing jump block block@37
debug: Removing jump block block@24
debug: branching to block@36 will be replaced with block@38
debug: branching to block@37 will be replaced with block@38
debug: branching to block@24 will be replaced with block@25
debug: Removing duplicated block block@13 and updating references to block@4
debug: Replaced predecessor block@13 with block@4 in block@26
debug: Performing SSA IR destructuring for test_cases.simplish.contract.itoa
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.simplish.contract.itoa using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.simplish.contract.itoa
debug: Performing post-SSA optimizations at level 2
debug: Output IR to simplish/out_O2/Simplish.ir/Simplish.approval.0.destructured.ir
info: optimizing clear program of test_cases.simplish.contract.Simplish at level 2
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for test_cases.simplish.contract.Simplish.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.clear_state_program
debug: Performing post-SSA optimizations at level 2
debug: Output IR to simplish/out_O2/Simplish.ir/Simplish.clear.0.destructured.ir
debug: Inserted main.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[1]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_after_if_else@2.ops[3]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@4.ops[1]: 'l-store-copy test_cases.simplish.contract.Simplish.approval_program%0#0 0'
debug: Replaced main_if_body@4.ops[3]: 'v-load test_cases.simplish.contract.Simplish.approval_program%0#0' with 'l-load test_cases.simplish.contract.Simplish.approval_program%0#0'
debug: Inserted main_after_if_else@5.ops[7]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_after_if_else@5.ops[9]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_after_if_else@5.ops[1]: 'l-store-copy oca#0 0'
debug: Replaced main_after_if_else@5.ops[5]: 'v-load oca#0' with 'l-load oca#0'
debug: Inserted main_or_contd@6.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_or_contd@6.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_if_body@7.ops[3]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_if_body@7.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_if_body@8.ops[13]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_if_body@8.ops[15]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_if_body@8.ops[18]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_if_body@8.ops[20]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_if_body@8.ops[3]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@8.ops[6]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@8.ops[10]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_if_body@8.ops[13]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_if_body@8.ops[5]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_if_body@8.ops[9]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_after_if_else@9.ops[1]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_after_if_else@9.ops[3]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_after_if_else@9.ops[6]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_after_if_else@9.ops[8]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_after_if_else@10.ops[3]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_after_if_else@10.ops[5]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@11.ops[1]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_if_body@11.ops[3]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_if_body@12.ops[1]: 'l-store-copy nickname#0 0'
debug: Replaced main_if_body@12.ops[5]: 'v-load nickname#0' with 'l-load nickname#0'
debug: Inserted main_if_body@15.ops[1]: 'l-store-copy test_cases.simplish.contract.Simplish.approval_program%0#0 0'
debug: Replaced main_if_body@15.ops[3]: 'v-load test_cases.simplish.contract.Simplish.approval_program%0#0' with 'l-load test_cases.simplish.contract.Simplish.approval_program%0#0'
debug: Inserted main_after_if_else@16.ops[1]: 'l-store-copy num_app_args#0 0'
debug: Replaced main_after_if_else@16.ops[3]: 'v-load num_app_args#0' with 'l-load num_app_args#0'
debug: Inserted main_if_body@17.ops[5]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_if_body@17.ops[7]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_if_body@17.ops[10]: 'l-store-copy tmp%1#2 0'
debug: Replaced main_if_body@17.ops[12]: 'v-load tmp%1#2' with 'l-load tmp%1#2'
debug: Inserted main_if_body@17.ops[20]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_if_body@17.ops[22]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_if_body@17.ops[1]: 'l-store-copy method_name#0 0'
debug: Replaced main_if_body@17.ops[18]: 'v-load method_name#0' with 'l-load method_name#0'
debug: Inserted main_if_body@30.ops[3]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_if_body@30.ops[5]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@30.ops[8]: 'l-store-copy tmp%1#3 0'
debug: Replaced main_if_body@30.ops[10]: 'v-load tmp%1#3' with 'l-load tmp%1#3'
debug: Inserted main_if_body@30.ops[13]: 'l-store-copy result#12 0'
debug: Replaced main_if_body@30.ops[15]: 'v-load result#12' with 'l-load result#12'
debug: Inserted main_else_body@31.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_else_body@31.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_if_body@32.ops[3]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_if_body@32.ops[5]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@32.ops[8]: 'l-store-copy circumference#0 0'
debug: Replaced main_if_body@32.ops[10]: 'v-load circumference#0' with 'l-load circumference#0'
debug: Inserted main_else_body@33.ops[3]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_else_body@33.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_if_body@34.ops[3]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_if_body@34.ops[5]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@34.ops[8]: 'l-store-copy tmp%1#3 0'
debug: Replaced main_if_body@34.ops[10]: 'v-load tmp%1#3' with 'l-load tmp%1#3'
debug: Inserted main_if_body@34.ops[17]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_if_body@34.ops[19]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@34.ops[29]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_if_body@34.ops[31]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_if_body@34.ops[41]: 'l-store-copy tmp%11#1 0'
debug: Replaced main_if_body@34.ops[43]: 'v-load tmp%11#1' with 'l-load tmp%11#1'
debug: Inserted main_if_body@34.ops[25]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_if_body@34.ops[28]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_if_body@34.ops[38]: 'l-store-copy tmp%10#1 0'
debug: Replaced main_if_body@34.ops[41]: 'v-load tmp%10#1' with 'l-load tmp%10#1'
debug: Inserted main_if_body@34.ops[51]: 'l-store-copy tmp%13#1 0'
debug: Replaced main_if_body@34.ops[54]: 'v-load tmp%13#1' with 'l-load tmp%13#1'
debug: Inserted main_if_body@34.ops[35]: 'l-store-copy tmp%9#1 0'
debug: Replaced main_if_body@34.ops[41]: 'v-load tmp%9#1' with 'l-load tmp%9#1'
debug: Inserted main_if_body@34.ops[49]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_if_body@34.ops[55]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_if_body@34.ops[15]: 'l-store-copy radius#0 0'
debug: Replaced main_if_body@34.ops[24]: 'v-load radius#0' with 'l-load radius#0'
debug: Inserted main_if_body@34.ops[1]: 'l-store-copy radius#0 0'
debug: Replaced main_if_body@34.ops[15]: 'v-load radius#0' with 'l-load radius#0'
debug: Inserted main_if_body@34.ops[14]: 'l-store-copy result#12 1'
debug: Replaced main_if_body@34.ops[40]: 'v-load result#12' with 'l-load result#12'
debug: Inserted main_if_body@34.ops[25]: 'l-store-copy circumference#0 2'
debug: Replaced main_if_body@34.ops[55]: 'v-load circumference#0' with 'l-load circumference#0'
debug: Inserted main_else_body@18.ops[1]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_else_body@18.ops[3]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_else_body@18.ops[6]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_else_body@18.ops[8]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_if_body@19.ops[3]: 'l-store-copy asset_exists#0 1'
debug: Replaced main_if_body@19.ops[6]: 'v-load asset_exists#0' with 'l-load asset_exists#0'
debug: Inserted main_else_body@21.ops[2]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@21.ops[5]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_after_if_else@25.ops[7]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_after_if_else@25.ops[10]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_after_if_else@25.ops[15]: 'l-store-copy new_state_value%0#0 0'
debug: Replaced main_after_if_else@25.ops[18]: 'v-load new_state_value%0#0' with 'l-load new_state_value%0#0'
debug: Inserted main_after_if_else@25.ops[9]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_after_if_else@25.ops[13]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted itoa.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced itoa.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted itoa_if_body@1.ops[4]: 'l-store-copy tmp%1#0 0'
debug: Replaced itoa_if_body@1.ops[6]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted itoa_after_if_else@2.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced itoa_after_if_else@2.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted itoa_after_if_else@2.ops[20]: 'l-store-copy tmp%6#0 0'
debug: Replaced itoa_after_if_else@2.ops[22]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted itoa_after_if_else@2.ops[11]: 'l-store-copy tmp%4#0 0'
debug: Replaced itoa_after_if_else@2.ops[14]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted itoa_after_if_else@2.ops[17]: 'l-store-copy tmp%5#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted itoa_after_if_else@2.ops[7]: 'l-store-copy tmp%3#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Found 16 edge set/s for test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init
debug: Allocated 3 variable/s to x-stack: result#1, result#5, tmp%1#0
debug: shared x-stack for main_if_body@4 -> main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26: tmp%1#0
debug: shared x-stack for main_after_if_else@9 -> main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26: tmp%1#0
debug: shared x-stack for main_if_body@15 -> main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26: tmp%1#0
debug: shared x-stack for main_after_if_else@25 -> main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26: tmp%1#0
debug: shared x-stack for main_if_body@30 -> main_after_if_else@38: result#5
debug: shared x-stack for main_if_body@32 -> main_after_if_else@38: result#5
debug: shared x-stack for main_if_body@34 -> main_after_if_else@38: result#5
debug: shared x-stack for main_else_body@35 -> main_after_if_else@38: result#5
debug: shared x-stack for main_after_if_else@22 -> main_after_if_else@25: result#1
debug: shared x-stack for main_else_body@23 -> main_after_if_else@25: result#1
debug: shared x-stack for main_after_if_else@38 -> main_after_if_else@25: result#1
debug: Found 1 edge set/s for test_cases.simplish.contract.itoa
debug: test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init f-stack entry: ['method_name#0', 'msg#1', 'sender#0', 'asset_balance#0', 'num_app_args#0', 'oca#0', 'radius#0', 'status#0']
debug: test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init f-stack on first store: []
debug: optimizing TEAL subroutine test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init() -> uint64:
debug: replacing `b main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26` with `return`
debug: replacing `b main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26` with `return`
debug: replacing `b main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26` with `return`
debug: inlining single reference block main_call___init__@1 into main
debug: inlining single reference block main_after_inlined_test_cases.simplish.contract.Simplish.approval_program@26 into main_if_body@4
debug: inlining single reference block main_or_contd@6 into main_after_if_else@5
debug: inlining single reference block main_if_body@8 into main_if_body@7
debug: inlining single reference block main_if_body@11 into main_after_if_else@10
debug: inlining single reference block main_if_body@12 into main_after_if_else@10
debug: inlining single reference block main_if_body@15 into main_after_if_else@14
debug: inlining single reference block main_if_body@17 into main_after_if_else@16
debug: inlining single reference block main_if_body@30 into main_after_if_else@16
debug: inlining single reference block main_if_body@32 into main_else_body@31
debug: inlining single reference block main_if_body@34 into main_else_body@33
debug: inlining single reference block main_if_body@19 into main_else_body@18
debug: inlining single reference block main_if_body@20 into main_else_body@18
debug: removing explicit jump to fall-through block main_after_if_else@2
debug: removing explicit jump to fall-through block main_if_body@4
debug: removing explicit jump to fall-through block main_if_body@7
debug: removing explicit jump to fall-through block main_after_if_else@9
debug: removing explicit jump to fall-through block main_after_if_else@38
debug: removing explicit jump to fall-through block main_after_if_else@25
debug: removing explicit jump to fall-through block main_after_if_else@22
simplish/contract.py:117 debug: optimizing TEAL subroutine test_cases.simplish.contract.itoa(i: uint64) -> bytes:
debug: inlining single reference block itoa_if_body@1 into itoa
simplish/contract.py:67 debug: optimizing TEAL subroutine test_cases.simplish.contract.Simplish.clear_state_program() -> uint64:
info: Writing simplish/out_O2/Simplish.approval.teal
info: Writing simplish/out_O2/Simplish.clear.teal
info: Writing simplish/out_O2/Simplish.approval.bin
info: Writing simplish/out_O2/Simplish.clear.bin
info: Writing simplish/out_O2/Simplish.approval.puya.map
info: Writing simplish/out_O2/Simplish.clear.puya.map