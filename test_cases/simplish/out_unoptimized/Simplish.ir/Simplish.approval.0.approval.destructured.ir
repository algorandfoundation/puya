main test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.simplish.base_class.CallCounter.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = test_cases.simplish.contract.Simplish.approval_program()
        return tmp%1#0

subroutine test_cases.simplish.base_class.CallCounter.__init__() -> void:
    block@0: // L7
        (app_global_put "counter" 0u)
        return 

subroutine test_cases.simplish.contract.Simplish.approval_program() -> bool:
    block@0: // L30
        let tmp%0#0: uint64 = (txn ApplicationID)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L32
        return 1u
    block@2: // after_if_else_L31
        let oca#0: uint64 = (txn OnCompletion)
        let sender#0: bytes = (txn Sender)
        let tmp%2#0: bool = (== oca#0 UpdateApplication)
        goto tmp%2#0 ? block@4 : block@3
    block@3: // or_contd_L35
        let tmp%3#0: bool = (== oca#0 DeleteApplication)
        goto tmp%3#0 ? block@4 : block@7
    block@4: // if_body_L39
        let tmp%4#0: bool = (== oca#0 DeleteApplication)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L40
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%5#0: bytes = test_cases.simplish.contract.itoa(maybe_value%0#0)
        let tmp%6#0: bytes = (concat 0x4920776173207573656420 tmp%5#0)
        let tmp%7#0: bytes = (concat tmp%6#0 0x2074696d65287329206265666f726520492064696564)
        (log tmp%7#0)
        goto block@6
    block@6: // after_if_else_L39
        let tmp%8#0: bytes = (global CreatorAddress)
        let tmp%9#0: bool = (== tmp%8#0 sender#0)
        return tmp%9#0
    block@7: // after_if_else_L35
        let tmp%10#0: bool = (== oca#0 OptIn)
        goto tmp%10#0 ? block@8 : block@11
    block@8: // if_body_L44
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: bool = (> tmp%11#0 0u)
        goto tmp%12#0 ? block@9 : block@10
    block@9: // if_body_L45
        let tmp%13#0: bytes = (txna ApplicationArgs 0)
        test_cases.simplish.base_class.CallCounter.set_sender_nickname(tmp%13#0)
        goto block@10
    block@10: // after_if_else_L44
        return 1u
    block@11: // after_if_else_L43
        let tmp%14#0: bool = (!= oca#0 NoOp)
        goto tmp%14#0 ? block@12 : block@13
    block@12: // if_body_L48
        return 0u
    block@13: // after_if_else_L47
        let num_app_args#0: uint64 = (txn NumAppArgs)
        let tmp%15#0: bool = (> num_app_args#0 0u)
        goto tmp%15#0 ? block@14 : block@15
    block@14: // if_body_L51
        let method_name#0: bytes = (txna ApplicationArgs 0)
        let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: bool) = test_cases.simplish.contract.Simplish.call(method_name#0, num_app_args#0)
        let msg#0: bytes = tuple_assignment%0#0
        let result#0: bool = tuple_assignment%1#0
        goto block@22
    block@15: // else_body_L53
        let tmp%16#0: uint64 = (txn NumAssets)
        let tmp%17#0: bool = (== tmp%16#0 1u)
        goto tmp%17#0 ? block@16 : block@20
    block@16: // if_body_L54
        let (tuple_assignment%2#0: uint64, tuple_assignment%3#0: bool) = ((asset_holding_get AssetBalance) sender#0 0u)
        let asset_balance#0: uint64 = tuple_assignment%2#0
        let asset_exists#0: bool = tuple_assignment%3#0
        goto asset_exists#0 ? block@18 : block@17
    block@17: // if_body_L56
        let msg#0: bytes = 0x596f7520646f206e6f74206861766520616e79206f6620746865206173736574
        goto block@19
    block@18: // else_body_L58
        let tmp%18#0: bytes = test_cases.simplish.contract.itoa(asset_balance#0)
        let msg#0: bytes = (concat 0x596f7520686176652061737365742062616c616e63653a20 tmp%18#0)
        goto block@19
    block@19: // after_if_else_L55
        let result#0: bool = 1u
        goto block@21
    block@20: // else_body_L61
        let msg#0: bytes = 0x6e6f7420656e6f756768206170702061726773206f7220666f726569676e20617373657473
        let result#0: bool = 0u
        goto block@21
    block@21: // after_if_else_L53
        goto block@22
    block@22: // after_if_else_L50
        (log msg#0)
        test_cases.simplish.contract.Simplish.increment_counter()
        return result#0

subroutine test_cases.simplish.contract.itoa(i: uint64) -> bytes:
    block@0: // L117
        let radix#0: uint64 = (len 0x30313233343536373839)
        let tmp%0#0: bool = (< i#0 radix#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L123
        let tmp%1#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return tmp%1#0
    block@2: // after_if_else_L122
        let tmp%2#0: uint64 = (/ i#0 radix#0)
        let tmp%3#0: bytes = test_cases.simplish.contract.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 radix#0)
        let tmp%5#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        return tmp%6#0

subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname(nickname: bytes) -> void:
    block@0: // L15
        (app_local_put 0u "name" nickname#0)
        return 

subroutine test_cases.simplish.contract.Simplish.call(method_name: bytes, num_app_args: uint64) -> <bytes, bool>:
    block@0: // L70
        let tmp%0#0: bool = (== num_app_args#0 2u)
        (assert tmp%0#0) // insufficient arguments
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let radius#0: uint64 = (btoi tmp%1#0)
        let status#0: bool = 1u
        let tmp%2#0: bool = (== method_name#0 0x636972636c655f61726561)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // if_body_L77
        let area#0: uint64 = test_cases.simplish.contract.circle_area(radius#0)
        let result#0: bytes = test_cases.simplish.contract.itoa(area#0)
        goto block@9
    block@2: // else_body_L79
        let tmp%3#0: bool = (== method_name#0 0x636972636c655f63697263756d666572656e6365)
        goto tmp%3#0 ? block@3 : block@4
    block@3: // if_body_L80
        let circumference#0: uint64 = test_cases.simplish.contract.circle_circumference(radius#0)
        let result#0: bytes = test_cases.simplish.contract.itoa(circumference#0)
        goto block@8
    block@4: // else_body_L82
        let tmp%4#0: bool = (== method_name#0 0x636972636c655f7265706f7274)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L83
        let tmp%5#0: uint64 = test_cases.simplish.contract.circle_area(radius#0)
        let tmp%6#0: uint64 = test_cases.simplish.contract.circle_circumference(radius#0)
        let area#0: uint64 = tmp%5#0
        let circumference#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = test_cases.simplish.contract.itoa(radius#0)
        let tmp%8#0: bytes = (concat 0x417070726f78696d617465206172656120616e642063697263756d666572656e6365206f6620636972636c6520776974682072616469757320 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%8#0 0x203d20)
        let tmp%10#0: bytes = test_cases.simplish.contract.itoa(area#0)
        let tmp%11#0: bytes = (concat tmp%9#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%11#0 0x2c20)
        let tmp%13#0: bytes = test_cases.simplish.contract.itoa(circumference#0)
        let result#0: bytes = (concat tmp%12#0 tmp%13#0)
        goto block@7
    block@6: // else_body_L93
        let status#0: bool = 0u
        let result#0: bytes = 0x756e6b6e6f776e206d6574686f64206e616d65
        goto block@7
    block@7: // after_if_else_L82
        goto block@8
    block@8: // after_if_else_L79
        goto block@9
    block@9: // after_if_else_L76
        return result#0 status#0

subroutine test_cases.simplish.contract.circle_area(radius: uint64) -> uint64:
    block@0: // L110
        let tmp%0#0: uint64 = (exp radius#0 2u)
        let tmp%1#0: uint64 = (* tmp%0#0 314159u)
        let result#0: uint64 = (/ tmp%1#0 100000u)
        return result#0

subroutine test_cases.simplish.contract.circle_circumference(radius: uint64) -> uint64:
    block@0: // L103
        let two_pi#0: uint64 = (* 2u 314159u)
        let tmp%0#0: uint64 = (* radius#0 two_pi#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 100000u)
        return tmp%1#0

subroutine test_cases.simplish.contract.Simplish.increment_counter() -> void:
    block@0: // L97
        (log "Incrementing counter!")
        test_cases.simplish.base_class.CallCounter.increment_counter()
        return 

subroutine test_cases.simplish.base_class.CallCounter.increment_counter() -> void:
    block@0: // L11
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "counter" new_state_value%0#0)
        return 