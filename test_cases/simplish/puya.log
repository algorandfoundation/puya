debug: PuyaOptions(paths=['simplish'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Found algopy: 1.0.0
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@None: // if_body_L122
debug: Sealing block@None: // else_body_L122
debug: Terminated block@1: // if_body_L122
debug: Sealing block@2: // after_if_else_L122
debug: Terminated block@2: // after_if_else_L122
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L70
debug: Terminated block@0: // L70
debug: Sealing block@None: // if_body_L76
debug: Sealing block@None: // else_body_L76
debug: Terminated block@1: // if_body_L76
debug: Terminated block@2: // else_body_L76
debug: Sealing block@None: // if_body_L79
debug: Sealing block@None: // else_body_L79
debug: Terminated block@3: // if_body_L79
debug: Terminated block@4: // else_body_L79
debug: Sealing block@None: // if_body_L82
debug: Sealing block@None: // else_body_L82
debug: Terminated block@5: // if_body_L82
debug: Terminated block@6: // else_body_L82
debug: Sealing block@7: // after_if_else_L82
debug: Terminated block@7: // after_if_else_L82
debug: Sealing block@8: // after_if_else_L79
debug: Terminated block@8: // after_if_else_L79
debug: Sealing block@9: // after_if_else_L76
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@9: // after_if_else_L76
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@1) in block@1: // if_body_L76
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@8: // after_if_else_L79
debug: Added result#1 to Phi node: let result#5: bytes = φ(result#1 <- block@3) in block@3: // if_body_L79
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@7: // after_if_else_L82
debug: Added result#2 to Phi node: let result#6: bytes = φ(result#2 <- block@5) in block@5: // if_body_L82
debug: Added result#3 to Phi node: let result#6: bytes = φ(result#2 <- block@5, result#3 <- block@6) in block@6: // else_body_L82
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#1 <- block@3, result#6 <- block@7) in block@7: // after_if_else_L82
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#0 <- block@1, result#5 <- block@8) in block@8: // after_if_else_L79
debug: Created Phi assignment: let status#2: uint64 = undefined while trying to resolve 'status' in block@9: // after_if_else_L76
debug: Added status#0 to Phi node: let status#2: uint64 = φ(status#0 <- block@1) in block@1: // if_body_L76
debug: Created Phi assignment: let status#3: uint64 = undefined while trying to resolve 'status' in block@8: // after_if_else_L79
debug: Added status#0 to Phi node: let status#3: uint64 = φ(status#0 <- block@3) in block@3: // if_body_L79
debug: Created Phi assignment: let status#4: uint64 = undefined while trying to resolve 'status' in block@7: // after_if_else_L82
debug: Added status#0 to Phi node: let status#4: uint64 = φ(status#0 <- block@5) in block@5: // if_body_L82
debug: Added status#1 to Phi node: let status#4: uint64 = φ(status#0 <- block@5, status#1 <- block@6) in block@6: // else_body_L82
debug: Added status#4 to Phi node: let status#3: uint64 = φ(status#0 <- block@3, status#4 <- block@7) in block@7: // after_if_else_L82
debug: Added status#3 to Phi node: let status#2: uint64 = φ(status#0 <- block@1, status#3 <- block@8) in block@8: // after_if_else_L79
debug: Terminated block@9: // after_if_else_L76
debug: Sealing block@0: // L110
debug: Terminated block@0: // L110
debug: Sealing block@0: // L103
debug: Terminated block@0: // L103
debug: Sealing block@0: // L97
debug: Terminated block@0: // L97
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Sealing block@0: // L30
debug: Terminated block@0: // L30
debug: Sealing block@None: // on_create_L7
debug: Terminated block@1: // on_create_L7
debug: Sealing block@2: // entrypoint_L7
debug: Terminated block@2: // entrypoint_L7
debug: Sealing block@None: // if_body_L31
debug: Sealing block@None: // else_body_L31
debug: Terminated block@3: // if_body_L31
debug: Sealing block@4: // after_if_else_L31
debug: Terminated block@4: // after_if_else_L31
debug: Sealing block@None: // if_body_L35
debug: Sealing block@None: // else_body_L35
debug: Terminated block@5: // if_body_L35
debug: Sealing block@None: // if_body_L39
debug: Sealing block@None: // else_body_L39
debug: Terminated block@6: // if_body_L39
debug: Sealing block@7: // after_if_else_L39
debug: Created Phi assignment: let sender#1: bytes = undefined while trying to resolve 'sender' in block@7: // after_if_else_L39
debug: Added sender#0 to Phi node: let sender#1: bytes = φ(sender#0 <- block@5) in block@5: // if_body_L35
debug: Added sender#0 to Phi node: let sender#1: bytes = φ(sender#0 <- block@5, sender#0 <- block@6) in block@6: // if_body_L39
debug: Replacing trivial Phi node: let sender#1: bytes = φ(sender#0 <- block@5, sender#0 <- block@6) (sender#1) with sender#0
debug: Deleting Phi assignment: let sender#1: bytes = φ(sender#0 <- block@5, sender#0 <- block@6)
debug: Replaced trivial Phi node: let sender#1: bytes = φ(sender#0 <- block@5, sender#0 <- block@6) (sender#1) with sender#0 in current definition for 1 blocks
debug: Terminated block@7: // after_if_else_L39
debug: Sealing block@8: // after_if_else_L35
debug: Terminated block@8: // after_if_else_L35
debug: Sealing block@None: // if_body_L43
debug: Sealing block@None: // else_body_L43
debug: Terminated block@9: // if_body_L43
debug: Sealing block@None: // if_body_L44
debug: Sealing block@None: // else_body_L44
debug: Terminated block@10: // if_body_L44
debug: Sealing block@11: // after_if_else_L44
debug: Terminated block@11: // after_if_else_L44
debug: Sealing block@12: // after_if_else_L43
debug: Terminated block@12: // after_if_else_L43
debug: Sealing block@None: // if_body_L47
debug: Sealing block@None: // else_body_L47
debug: Terminated block@13: // if_body_L47
debug: Sealing block@14: // after_if_else_L47
debug: Terminated block@14: // after_if_else_L47
debug: Sealing block@None: // if_body_L50
debug: Sealing block@None: // else_body_L50
debug: Terminated block@15: // if_body_L50
debug: Terminated block@16: // else_body_L50
debug: Sealing block@None: // if_body_L53
debug: Sealing block@None: // else_body_L53
debug: Terminated block@17: // if_body_L53
debug: Sealing block@None: // if_body_L55
debug: Sealing block@None: // else_body_L55
debug: Terminated block@18: // if_body_L55
debug: Terminated block@19: // else_body_L55
debug: Sealing block@20: // after_if_else_L55
debug: Terminated block@20: // after_if_else_L55
debug: Terminated block@21: // else_body_L53
debug: Sealing block@22: // after_if_else_L53
debug: Terminated block@22: // after_if_else_L53
debug: Sealing block@23: // after_if_else_L50
debug: Created Phi assignment: let msg#4: bytes = undefined while trying to resolve 'msg' in block@23: // after_if_else_L50
debug: Added msg#0 to Phi node: let msg#4: bytes = φ(msg#0 <- block@15) in block@15: // if_body_L50
debug: Created Phi assignment: let msg#5: bytes = undefined while trying to resolve 'msg' in block@22: // after_if_else_L53
debug: Created Phi assignment: let msg#6: bytes = undefined while trying to resolve 'msg' in block@20: // after_if_else_L55
debug: Added msg#1 to Phi node: let msg#6: bytes = φ(msg#1 <- block@18) in block@18: // if_body_L55
debug: Added msg#2 to Phi node: let msg#6: bytes = φ(msg#1 <- block@18, msg#2 <- block@19) in block@19: // else_body_L55
debug: Added msg#6 to Phi node: let msg#5: bytes = φ(msg#6 <- block@20) in block@20: // after_if_else_L55
debug: Added msg#3 to Phi node: let msg#5: bytes = φ(msg#6 <- block@20, msg#3 <- block@21) in block@21: // else_body_L53
debug: Added msg#5 to Phi node: let msg#4: bytes = φ(msg#0 <- block@15, msg#5 <- block@22) in block@22: // after_if_else_L53
debug: Created Phi assignment: let result#3: uint64 = undefined while trying to resolve 'result' in block@23: // after_if_else_L50
debug: Added result#0 to Phi node: let result#3: uint64 = φ(result#0 <- block@15) in block@15: // if_body_L50
debug: Created Phi assignment: let result#4: uint64 = undefined while trying to resolve 'result' in block@22: // after_if_else_L53
debug: Added result#1 to Phi node: let result#4: uint64 = φ(result#1 <- block@20) in block@20: // after_if_else_L55
debug: Added result#2 to Phi node: let result#4: uint64 = φ(result#1 <- block@20, result#2 <- block@21) in block@21: // else_body_L53
debug: Added result#4 to Phi node: let result#3: uint64 = φ(result#0 <- block@15, result#4 <- block@22) in block@22: // after_if_else_L53
debug: Terminated block@23: // after_if_else_L50
debug: Sealing block@0: // L67
debug: Terminated block@0: // L67
debug: Output IR to simplish/out/Simplish.ssa.ir
info: Optimizing test_cases.simplish.contract.Simplish at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, msg#0
debug: Replacing {tuple_assignment%0#0} with msg#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, result#0
debug: Replacing {tuple_assignment%1#0} with result#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%2#0, asset_balance#0
debug: Replacing {tuple_assignment%2#0} with asset_balance#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%3#0, asset_exists#0
debug: Replacing {tuple_assignment%3#0} with asset_exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%0#0 0u) to (! tmp%0#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%14#0
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%1#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2: // entrypoint_L7 from goto tmp%1#0 ? block@3 : block@4 to goto tmp%0#0 ? block@4 : block@3
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%3#0: uint64 = (== oca#0 DeleteApplication) with copy of existing registers [Register(atype=uint64, name='is_equal%0', version=0, source_location=simplish/contract.py:35-38:11-9)]
debug: Found equivalence set: is_equal%0#0, tmp%3#0
debug: Replacing {tmp%3#0} with is_equal%0#0 made 1 modifications
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len "0123456789") to 10u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable digits#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.call
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%5#0, area#1
debug: Replacing {tmp%5#0} with area#1 made 1 modifications
debug: Found equivalence set: tmp%6#0, circumference#1
debug: Replacing {tmp%6#0} with circumference#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 2u 314159u) to 628318u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.increment_counter
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to simplish/out/Simplish.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable radix#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.call
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable two_pi#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.increment_counter
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.__init__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to simplish/out/Simplish.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.itoa
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.call
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_area
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.circle_circumference
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.increment_counter
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.increment_counter
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.base_class.CallCounter.__init__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.simplish.contract.Simplish.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from test_cases.simplish.contract.Simplish.approval_program
debug: Removing Phis from test_cases.simplish.contract.itoa
debug: Removing Phis from test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Removing Phis from test_cases.simplish.contract.Simplish.call
debug: Removing Phis from test_cases.simplish.contract.circle_area
debug: Removing Phis from test_cases.simplish.contract.circle_circumference
debug: Removing Phis from test_cases.simplish.contract.Simplish.increment_counter
debug: Removing Phis from test_cases.simplish.base_class.CallCounter.increment_counter
debug: Removing Phis from test_cases.simplish.base_class.CallCounter.__init__
debug: Removing Phis from test_cases.simplish.contract.Simplish.clear_state_program
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.approval_program using strategy RootOperandGrouping
debug: Coalescing msg#0 with [msg#15, msg#1, msg#9, msg#2, msg#6, msg#12, msg#3, msg#5, msg#4]
debug: Coalescing result#0 with [result#10, result#1, result#7, result#2, result#4, result#3]
debug: Coalescing resulted in 35 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.itoa using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.base_class.CallCounter.set_sender_nickname using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.call using strategy RootOperandGrouping
debug: Coalescing status#0 with [status#13, status#10, status#7, status#1, status#4, status#3, status#2]
debug: Coalescing area#0 with [area#1]
debug: Coalescing result#0 with [result#15, result#1, result#12, result#2, result#9, result#3, result#6, result#5, result#4]
debug: Coalescing circumference#0 with [circumference#1]
debug: Coalescing resulted in 42 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.circle_area using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.circle_circumference using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.increment_counter using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.base_class.CallCounter.increment_counter using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.base_class.CallCounter.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.simplish.contract.Simplish.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.approval_program
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: loc: {msg#0=msg#0, result#0=result#0}
debug: pred: {msg#0=msg#0, result#0=result#0}
debug: ready: 
debug: to_do: msg#0, result#0
debug: * to_do result#0
debug: * to_do msg#0
debug: Sequentializing parallel copies in test_cases.simplish.contract.itoa
debug: Sequentializing parallel copies in test_cases.simplish.base_class.CallCounter.set_sender_nickname
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.call
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: loc: {result#0=result#0, status#0=status#0}
debug: pred: {result#0=result#0, status#0=status#0}
debug: ready: 
debug: to_do: result#0, status#0
debug: * to_do status#0
debug: * to_do result#0
debug: Sequentializing parallel copies in test_cases.simplish.contract.circle_area
debug: Sequentializing parallel copies in test_cases.simplish.contract.circle_circumference
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.increment_counter
debug: Sequentializing parallel copies in test_cases.simplish.base_class.CallCounter.increment_counter
debug: Sequentializing parallel copies in test_cases.simplish.base_class.CallCounter.__init__
debug: Sequentializing parallel copies in test_cases.simplish.contract.Simplish.clear_state_program
debug: Performing post-SSA optimizations
debug: Removing jump block block@22: // after_if_else_L53 and replacing references with block@23: // after_if_else_L50
debug: Removing jump block block@7: // after_if_else_L82 and replacing references with block@8: // after_if_else_L79
debug: Output IR to simplish/out/Simplish.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[15]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[17]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[11]: 'store is_equal%0#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[14]: 'load is_equal%0#0' with 'load is_equal%0#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store oca#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[5]: 'load oca#0' with 'load oca#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store oca#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[10]: 'load oca#0' with 'load oca#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[9]: 'store contains%0#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[16]: 'load contains%0#0' with 'load contains%0#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[13]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[15]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[18]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[20]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[3]: 'store counter_exists%0#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[6]: 'load counter_exists%0#0' with 'load counter_exists%0#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[13]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[5]: 'store counter_value%0#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[9]: 'load counter_value%0#0' with 'load counter_value%0#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@7.ops[1]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_if_else@7.ops[3]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@7.ops[6]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_after_if_else@7.ops[8]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[3]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[5]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_if_body@9.ops[1]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_if_body@9.ops[3]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_if_body@10.ops[1]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@10.ops[3]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@14.ops[1]: 'store num_app_args#0 to l-stack (copy)'
debug: Replaced main_after_if_else@14.ops[3]: 'load num_app_args#0' with 'load num_app_args#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[1]: 'store method_name#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[3]: 'load method_name#0' with 'load method_name#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[1]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[3]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[6]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[8]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_if_body@17.ops[3]: 'store asset_exists#0 to l-stack (copy)'
debug: Replaced main_if_body@17.ops[6]: 'load asset_exists#0' with 'load asset_exists#0 from l-stack (no copy)'
debug: Inserted main_else_body@19.ops[2]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_else_body@19.ops[5]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Found 12 edge set/s for test_cases.simplish.contract.Simplish.approval_program
debug: Allocated 1 variable/s to x-stack: result#0
debug: shared x-stack for main_if_body@15 -> main_after_if_else@23: result#0
debug: shared x-stack for main_after_if_else@20 -> main_after_if_else@23: result#0
debug: shared x-stack for main_else_body@21 -> main_after_if_else@23: result#0
debug: test_cases.simplish.contract.Simplish.approval_program f-stack entry: ['msg#0', 'sender#0', 'asset_balance#0', 'is_equal%0#0', 'num_app_args#0', 'oca#0']
debug: test_cases.simplish.contract.Simplish.approval_program f-stack on first store: []
debug: Inserted itoa_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced itoa_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted itoa_if_body@1.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced itoa_if_body@1.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted itoa_if_body@1.ops[3]: 'store index_plus_1%0#0 to l-stack (copy)'
debug: Replaced itoa_if_body@1.ops[7]: 'load index_plus_1%0#0' with 'load index_plus_1%0#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[11]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[13]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[25]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[27]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[21]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[24]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[16]: 'store index_plus_1%1#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[20]: 'load index_plus_1%1#0' with 'load index_plus_1%1#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[14]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[20]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[7]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[26]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.simplish.contract.itoa
debug: Inserted call_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced call_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted call_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced call_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted call_block@0.ops[18]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced call_block@0.ops[20]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted call_if_body@1.ops[2]: 'store area#0 to l-stack (copy)'
debug: Replaced call_if_body@1.ops[4]: 'load area#0' with 'load area#0 from l-stack (no copy)'
debug: Inserted call_else_body@2.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced call_else_body@2.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted call_if_body@3.ops[2]: 'store circumference#0 to l-stack (copy)'
debug: Replaced call_if_body@3.ops[4]: 'load circumference#0' with 'load circumference#0 from l-stack (no copy)'
debug: Inserted call_else_body@4.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced call_else_body@4.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[12]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[14]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[24]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[26]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[8]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[11]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[21]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[24]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[34]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[37]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[1]: 'store radius#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[4]: 'load radius#0' with 'load radius#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[5]: 'store radius#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[8]: 'load radius#0' with 'load radius#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[20]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[26]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[34]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[40]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[3]: 'store area#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[23]: 'load area#0' with 'load area#0 from l-stack (no copy)'
debug: Inserted call_if_body@5.ops[8]: 'store circumference#0 to l-stack (copy)'
debug: Replaced call_if_body@5.ops[38]: 'load circumference#0' with 'load circumference#0 from l-stack (no copy)'
debug: Found 5 edge set/s for test_cases.simplish.contract.Simplish.call
debug: test_cases.simplish.contract.Simplish.call f-stack entry: ['result#0']
debug: test_cases.simplish.contract.Simplish.call f-stack on first store: ['radius#0', 'status#0']
debug: Inserted circle_area_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced circle_area_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted circle_area_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced circle_area_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted circle_area_block@0.ops[13]: 'store result#0 to l-stack (copy)'
debug: Replaced circle_area_block@0.ops[15]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted circle_circumference_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced circle_circumference_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted circle_circumference_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced circle_circumference_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted CallCounter.increment_counter_block@0.ops[3]: 'store counter_exists%0#0 to l-stack (copy)'
debug: Replaced CallCounter.increment_counter_block@0.ops[6]: 'load counter_exists%0#0' with 'load counter_exists%0#0 from l-stack (no copy)'
debug: Inserted CallCounter.increment_counter_block@0.ops[11]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced CallCounter.increment_counter_block@0.ops[14]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Inserted CallCounter.increment_counter_block@0.ops[5]: 'store counter_value%0#0 to l-stack (copy)'
debug: Replaced CallCounter.increment_counter_block@0.ops[9]: 'load counter_value%0#0' with 'load counter_value%0#0 from l-stack (no copy)'
info: Writing simplish/out/Simplish.approval.teal
info: Writing simplish/out/Simplish.clear.teal