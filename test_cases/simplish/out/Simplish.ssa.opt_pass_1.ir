contract test_cases.simplish.contract.Simplish:
    program approval:
        subroutine test_cases.simplish.contract.Simplish.approval_program() -> bool:
            block@0: // L30
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L7
                test_cases.simplish.base_class.CallCounter.__init__()
                goto block@2
            block@2: // entrypoint_L7
                let tmp%0#0: uint64 = (txn ApplicationID)
                let tmp%1#0: bool = (! tmp%0#0)
                goto tmp%0#0 ? block@4 : block@3
            block@3: // if_body_L31
                return 1u
            block@4: // after_if_else_L31
                let oca#0: uint64 = (txn OnCompletion)
                let sender#0: bytes = (txn Sender)
                let contains%0#0: bool = (== oca#0 UpdateApplication)
                let is_equal%0#0: bool = (== oca#0 DeleteApplication)
                let tmp%2#0: bool = (|| contains%0#0 is_equal%0#0)
                goto tmp%2#0 ? block@5 : block@8
            block@5: // if_body_L35
                goto is_equal%0#0 ? block@6 : block@7
            block@6: // if_body_L39
                let (counter_value%0#0: uint64, counter_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert counter_exists%0#0) // check counter exists
                let tmp%4#0: bytes = test_cases.simplish.contract.itoa(counter_value%0#0)
                let tmp%5#0: bytes = (concat 0x4920776173207573656420 tmp%4#0)
                let tmp%6#0: bytes = (concat tmp%5#0 " time(s) before I died")
                (log tmp%6#0)
                goto block@7
            block@7: // after_if_else_L39
                let tmp%7#0: bytes = (global CreatorAddress)
                let tmp%8#0: bool = (== tmp%7#0 sender#0)
                return tmp%8#0
            block@8: // after_if_else_L35
                let tmp%9#0: bool = (== oca#0 OptIn)
                goto tmp%9#0 ? block@9 : block@12
            block@9: // if_body_L43
                let tmp%10#0: uint64 = (txn NumAppArgs)
                goto tmp%10#0 ? block@10 : block@11
            block@10: // if_body_L44
                let tmp%12#0: bytes = (txna ApplicationArgs 0)
                test_cases.simplish.base_class.CallCounter.set_sender_nickname(tmp%12#0)
                goto block@11
            block@11: // after_if_else_L44
                return 1u
            block@12: // after_if_else_L43
                goto oca#0 ? block@13 : block@14
            block@13: // if_body_L47
                return 0u
            block@14: // after_if_else_L47
                let num_app_args#0: uint64 = (txn NumAppArgs)
                goto num_app_args#0 ? block@15 : block@16
            block@15: // if_body_L50
                let method_name#0: bytes = (txna ApplicationArgs 0)
                let (msg#0: bytes, result#0: bool) = test_cases.simplish.contract.Simplish.call(method_name#0, num_app_args#0)
                goto block@23
            block@16: // else_body_L50
                let tmp%15#0: uint64 = (txn NumAssets)
                let tmp%16#0: bool = (== tmp%15#0 1u)
                goto tmp%16#0 ? block@17 : block@21
            block@17: // if_body_L53
                let (asset_balance#0: uint64, asset_exists#0: bool) = ((asset_holding_get AssetBalance) sender#0 0u)
                goto asset_exists#0 ? block@19 : block@18
            block@18: // if_body_L55
                let msg#1: bytes = 0x596f7520646f206e6f74206861766520616e79206f6620746865206173736574
                goto block@20
            block@19: // else_body_L55
                let tmp%17#0: bytes = test_cases.simplish.contract.itoa(asset_balance#0)
                let msg#2: bytes = (concat 0x596f7520686176652061737365742062616c616e63653a20 tmp%17#0)
                goto block@20
            block@20: // after_if_else_L55
                let msg#6: bytes = φ(msg#1 <- block@18, msg#2 <- block@19)
                let result#1: bool = 1u
                goto block@22
            block@21: // else_body_L53
                let msg#3: bytes = 0x6e6f7420656e6f756768206170702061726773206f7220666f726569676e20617373657473
                let result#2: bool = 0u
                goto block@22
            block@22: // after_if_else_L53
                let msg#5: bytes = φ(msg#6 <- block@20, msg#3 <- block@21)
                let result#4: bool = φ(result#1 <- block@20, result#2 <- block@21)
                goto block@23
            block@23: // after_if_else_L50
                let msg#4: bytes = φ(msg#0 <- block@15, msg#5 <- block@22)
                let result#3: bool = φ(result#0 <- block@15, result#4 <- block@22)
                (log msg#4)
                test_cases.simplish.contract.Simplish.increment_counter()
                return result#3
        
        subroutine test_cases.simplish.contract.itoa(i: uint64) -> bytes:
            block@0: // L117
                let radix#0: uint64 = 10u
                let tmp%0#0: bool = (< i#0 radix#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L122
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%1#0: bytes = (substring3 0x30313233343536373839 i#0 index_plus_1%0#0)
                return tmp%1#0
            block@2: // after_if_else_L122
                let tmp%2#0: uint64 = (/ i#0 radix#0)
                let tmp%3#0: bytes = test_cases.simplish.contract.itoa(tmp%2#0)
                let tmp%4#0: uint64 = (% i#0 radix#0)
                let index_plus_1%1#0: uint64 = (+ tmp%4#0 1u)
                let tmp%5#0: bytes = (substring3 0x30313233343536373839 tmp%4#0 index_plus_1%1#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                return tmp%6#0
        
        subroutine test_cases.simplish.base_class.CallCounter.set_sender_nickname(nickname: bytes) -> void:
            block@0: // L15
                (app_local_put 0u "name" nickname#0)
                return 
        
        subroutine test_cases.simplish.contract.Simplish.call(method_name: bytes, num_app_args: uint64) -> <bytes, bool>:
            block@0: // L70
                let tmp%0#0: bool = (== num_app_args#0 2u)
                (assert tmp%0#0) // insufficient arguments
                let tmp%1#0: bytes = (txna ApplicationArgs 1)
                let radius#0: uint64 = (btoi tmp%1#0)
                let status#0: bool = 1u
                let tmp%2#0: bool = (== method_name#0 "circle_area")
                goto tmp%2#0 ? block@1 : block@2
            block@1: // if_body_L76
                let area#0: uint64 = test_cases.simplish.contract.circle_area(radius#0)
                let result#0: bytes = test_cases.simplish.contract.itoa(area#0)
                goto block@9
            block@2: // else_body_L76
                let tmp%3#0: bool = (== method_name#0 "circle_circumference")
                goto tmp%3#0 ? block@3 : block@4
            block@3: // if_body_L79
                let circumference#0: uint64 = test_cases.simplish.contract.circle_circumference(radius#0)
                let result#1: bytes = test_cases.simplish.contract.itoa(circumference#0)
                goto block@8
            block@4: // else_body_L79
                let tmp%4#0: bool = (== method_name#0 "circle_report")
                goto tmp%4#0 ? block@5 : block@6
            block@5: // if_body_L82
                let area#1: uint64 = test_cases.simplish.contract.circle_area(radius#0)
                let circumference#1: uint64 = test_cases.simplish.contract.circle_circumference(radius#0)
                let tmp%7#0: bytes = test_cases.simplish.contract.itoa(radius#0)
                let tmp%8#0: bytes = (concat 0x417070726f78696d617465206172656120616e642063697263756d666572656e6365206f6620636972636c6520776974682072616469757320 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " = ")
                let tmp%10#0: bytes = test_cases.simplish.contract.itoa(area#1)
                let tmp%11#0: bytes = (concat tmp%9#0 tmp%10#0)
                let tmp%12#0: bytes = (concat tmp%11#0 ", ")
                let tmp%13#0: bytes = test_cases.simplish.contract.itoa(circumference#1)
                let result#2: bytes = (concat tmp%12#0 tmp%13#0)
                goto block@7
            block@6: // else_body_L82
                let status#1: bool = 0u
                let result#3: bytes = 0x756e6b6e6f776e206d6574686f64206e616d65
                goto block@7
            block@7: // after_if_else_L82
                let result#6: bytes = φ(result#2 <- block@5, result#3 <- block@6)
                let status#4: bool = φ(status#0 <- block@5, status#1 <- block@6)
                goto block@8
            block@8: // after_if_else_L79
                let result#5: bytes = φ(result#1 <- block@3, result#6 <- block@7)
                let status#3: bool = φ(status#0 <- block@3, status#4 <- block@7)
                goto block@9
            block@9: // after_if_else_L76
                let result#4: bytes = φ(result#0 <- block@1, result#5 <- block@8)
                let status#2: bool = φ(status#0 <- block@1, status#3 <- block@8)
                return result#4 status#2
        
        subroutine test_cases.simplish.contract.circle_area(radius: uint64) -> uint64:
            block@0: // L110
                let tmp%0#0: uint64 = (exp radius#0 2u)
                let tmp%1#0: uint64 = (* tmp%0#0 314159u)
                let result#0: uint64 = (/ tmp%1#0 100000u)
                return result#0
        
        subroutine test_cases.simplish.contract.circle_circumference(radius: uint64) -> uint64:
            block@0: // L103
                let two_pi#0: uint64 = 628318u
                let tmp%0#0: uint64 = (* radius#0 two_pi#0)
                let tmp%1#0: uint64 = (/ tmp%0#0 100000u)
                return tmp%1#0
        
        subroutine test_cases.simplish.contract.Simplish.increment_counter() -> void:
            block@0: // L97
                (log "Incrementing counter!")
                test_cases.simplish.base_class.CallCounter.increment_counter()
                return 
        
        subroutine test_cases.simplish.base_class.CallCounter.increment_counter() -> void:
            block@0: // L11
                let (counter_value%0#0: uint64, counter_exists%0#0: bool) = (app_global_get_ex 0u "counter")
                (assert counter_exists%0#0) // check counter exists
                let new_state_value%0#0: uint64 = (+ counter_value%0#0 1u)
                (app_global_put "counter" new_state_value%0#0)
                return 
        
        subroutine test_cases.simplish.base_class.CallCounter.__init__() -> void:
            block@0: // L7
                (app_global_put "counter" 0u)
                return 
    
    program clear-state:
        subroutine test_cases.simplish.contract.Simplish.clear_state_program() -> bool:
            block@0: // L67
                return 1u