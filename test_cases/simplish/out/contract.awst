SCALE = 100000
SCALED_PI = 314159

contract Simplish extends (test_cases.simplish.base_class::CallCounter)
{
  approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<application>(0u)) {
      return true
    }
    oca: uint64 = txn<OnCompletion>()
    sender: account = txn<Sender>()
    if (oca IS IN (UpdateApplication, DeleteApplication)) {
      if (oca == DeleteApplication) {
        log(hex<"4920776173207573656420"> + test_cases.simplish.contract::itoa(this.counter) + ' time(s) before I died')
      }
      return global<CreatorAddress>() == sender
    }
    if (oca == OptIn) {
      if (txn<NumAppArgs>() > 0u) {
        this::set_sender_nickname(txna<ApplicationArgs, 0>())
      }
      return true
    }
    if (oca != NoOp) {
      return false
    }
    if (num_app_args: uint64 := txn<NumAppArgs>() > 0u) {
      method_name: bytes = txna<ApplicationArgs, 0>()
      (msg, result): tuple<bytes,bool> = this::call(method_name, num_app_args)
    } else {
      if (txn<NumAssets>() == 1u) {
        (asset_balance, asset_exists): tuple<uint64,bool> = asset_holding_get<AssetBalance>(sender, reinterpret_cast<asset>(0u))
        if (!(asset_exists)) {
          msg: bytes = hex<"596F7520646F206E6F74206861766520616E79206F6620746865206173736574">
        } else {
          msg: bytes = hex<"596F7520686176652061737365742062616C616E63653A20"> + test_cases.simplish.contract::itoa(asset_balance)
        }
        result: bool = true
      } else {
        msg: bytes = hex<"6E6F7420656E6F756768206170702061726773206F7220666F726569676E20617373657473">
        result: bool = false
      }
    }
    log(msg)
    this::increment_counter()
    return result
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine call(method_name: bytes, num_app_args: uint64): tuple<bytes,bool>
  {
    assert(num_app_args == 2u, comment="insufficient arguments")
    radius: uint64 = btoi(txna<ApplicationArgs, 1>())
    status: bool = true
    if (method_name == 'circle_area') {
      area: uint64 = test_cases.simplish.contract::circle_area(radius)
      result: bytes = test_cases.simplish.contract::itoa(area)
    } else {
      if (method_name == 'circle_circumference') {
        circumference: uint64 = test_cases.simplish.contract::circle_circumference(radius)
        result: bytes = test_cases.simplish.contract::itoa(circumference)
      } else {
        if (method_name == 'circle_report') {
          (area, circumference): tuple<uint64,uint64> = (test_cases.simplish.contract::circle_area(radius), test_cases.simplish.contract::circle_circumference(radius))
          result: bytes = hex<"417070726F78696D617465206172656120616E642063697263756D666572656E6365206F6620636972636C6520776974682072616469757320"> + test_cases.simplish.contract::itoa(radius) + ' = ' + test_cases.simplish.contract::itoa(area) + ', ' + test_cases.simplish.contract::itoa(circumference)
        } else {
          status: bool = false
          result: bytes = hex<"756E6B6E6F776E206D6574686F64206E616D65">
        }
      }
    }
    return (result, status)
  }
  
  subroutine increment_counter(): void
  {
    log('Incrementing counter!')
    test_cases.simplish.base_class::CallCounter::increment_counter()
  }
}

subroutine circle_circumference(radius: uint64): uint64
{
  two_pi: uint64 = 2u * 314159u
  return radius * two_pi // 100000u
}

subroutine circle_area(radius: uint64): uint64
{
  result: uint64 = radius ** 2u * 314159u // 100000u
  return result
}

subroutine itoa(i: uint64): bytes
{
  digits: bytes = hex<"30313233343536373839">
  radix: uint64 = len(digits)
  if (i < radix) {
    return digits[i]
  }
  return test_cases.simplish.contract::itoa(i // radix) + digits[i % radix]
}

subroutine test_intrinsics(): uint64
{
  _ii: bytes = gload<1, 1>()
  _si: bytes = gloads<2>(2u)
  _ss: bytes = gloadss(3u, 3u)
  _is: bytes = gloadss(4u, 4u)
  _foo_uint: uint64 = setbit(32u, 0u, 3u)
  _foo_int: uint64 = setbit(32u, 0u, 3u)
  _foo_bytes: bytes = setbit(hex<"3332">, 0u, 3u)
  test: bytes = app_global_get('foo')
  app_global_put('b', 'yeah')
  app_global_del('foo')
  _expect_bytes: bytes = test
  _abcd: tuple<uint64,uint64,uint64,uint64> = divmodw(1u, 2u, 3u, 4u)
  _hello_str: bytes = base64_decode<StdEncoding>(hex<"534756736247383D">)
  return 0u
}