main test_cases.simplish.contract.Simplish.approval_program:
    block@0: // L30
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "counter" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: uint64 = (txn ApplicationID)
        goto tmp%1#0 ? block@4 : block@3
    block@3: // if_body_L32
        return 1u
    block@4: // after_if_else_L31
        let oca#0: uint64 = (txn OnCompletion)
        let sender#0: account = (txn Sender)
        let tmp%5#0: bool = (== oca#0 UpdateApplication)
        goto tmp%5#0 ? block@6 : block@5
    block@5: // or_contd_L35
        let tmp%6#0: bool = (== oca#0 DeleteApplication)
        goto tmp%6#0 ? block@6 : block@9
    block@6: // if_body_L39
        let tmp%7#0: bool = (== oca#0 DeleteApplication)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // if_body_L40
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#0) // check self.counter exists
        let tmp%8#0: bytes = test_cases.simplish.contract.itoa(maybe_value%0#0)
        let tmp%9#0: bytes = (concat 0x4920776173207573656420 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 0x2074696d65287329206265666f726520492064696564)
        (log tmp%10#0)
        goto block@8
    block@8: // after_if_else_L39
        let tmp%11#0: account = (global CreatorAddress)
        let tmp%12#0: bool = (== tmp%11#0 sender#0)
        return tmp%12#0
    block@9: // after_if_else_L35
        let tmp%13#0: bool = (== oca#0 OptIn)
        goto tmp%13#0 ? block@10 : block@13
    block@10: // if_body_L44
        let tmp%14#0: uint64 = (txn NumAppArgs)
        goto tmp%14#0 ? block@11 : block@12
    block@11: // if_body_L45
        let nickname#0: bytes = (txna ApplicationArgs 0)
        (app_local_put 0u "name" nickname#0)
        goto block@12
    block@12: // after_if_else_L44
        return 1u
    block@13: // after_if_else_L43
        goto oca#0 ? block@14 : block@15
    block@14: // if_body_L48
        return 0u
    block@15: // after_if_else_L47
        let num_app_args#0: uint64 = (txn NumAppArgs)
        goto num_app_args#0 ? block@16 : block@17
    block@16: // if_body_L51
        let method_name#0: bytes = (txna ApplicationArgs 0)
        let tmp%0#1: bool = (== num_app_args#0 2u)
        (assert tmp%0#1) // insufficient arguments
        let tmp%1#1: bytes = (txna ApplicationArgs 1)
        let radius#0: uint64 = (btoi tmp%1#1)
        let status#0: bool = 1u
        let tmp%3#1: bool = (== method_name#0 0x636972636c655f61726561)
        goto tmp%3#1 ? block@28 : block@29
    block@28: // if_body_L77
        let tmp%0#4: uint64 = (exp radius#0 2u)
        let tmp%1#5: uint64 = (* tmp%0#4 314159u)
        let result#13: uint64 = (/ tmp%1#5 100000u)
        let result#5: bytes = test_cases.simplish.contract.itoa(result#13)
        goto block@36
    block@29: // else_body_L79
        let tmp%6#1: bool = (== method_name#0 0x636972636c655f63697263756d666572656e6365)
        goto tmp%6#1 ? block@30 : block@31
    block@30: // if_body_L80
        let tmp%1#4: uint64 = (* radius#0 628318u)
        let circumference#0: uint64 = (/ tmp%1#4 100000u)
        let result#6: bytes = test_cases.simplish.contract.itoa(circumference#0)
        goto block@35
    block@31: // else_body_L82
        let tmp%9#1: bool = (== method_name#0 0x636972636c655f7265706f7274)
        goto tmp%9#1 ? block@32 : block@33
    block@32: // if_body_L83
        let tmp%0#3: uint64 = (exp radius#0 2u)
        let tmp%1#2: uint64 = (* tmp%0#3 314159u)
        let result#12: uint64 = (/ tmp%1#2 100000u)
        let tmp%1#3: uint64 = (* radius#0 628318u)
        let circumference#1: uint64 = (/ tmp%1#3 100000u)
        let tmp%12#1: bytes = test_cases.simplish.contract.itoa(radius#0)
        let tmp%13#1: bytes = (concat 0x417070726f78696d617465206172656120616e642063697263756d666572656e6365206f6620636972636c6520776974682072616469757320 tmp%12#1)
        let tmp%14#1: bytes = (concat tmp%13#1 0x203d20)
        let tmp%15#1: bytes = test_cases.simplish.contract.itoa(result#12)
        let tmp%16#1: bytes = (concat tmp%14#1 tmp%15#1)
        let tmp%17#1: bytes = (concat tmp%16#1 0x2c20)
        let tmp%18#1: bytes = test_cases.simplish.contract.itoa(circumference#1)
        let result#7: bytes = (concat tmp%17#1 tmp%18#1)
        goto block@34
    block@33: // else_body_L93
        let status#1: bool = 0u
        let result#8: bytes = 0x756e6b6e6f776e206d6574686f64206e616d65
        goto block@34
    block@34: // after_if_else_L82
        let result#11: bytes = φ(result#7 <- block@32, result#8 <- block@33)
        let status#4: bool = φ(status#0 <- block@32, status#1 <- block@33)
        goto block@35
    block@35: // after_if_else_L79
        let result#10: bytes = φ(result#6 <- block@30, result#11 <- block@34)
        let status#3: bool = φ(status#0 <- block@30, status#4 <- block@34)
        goto block@36
    block@36: // after_if_else_L76
        let result#9: bytes = φ(result#5 <- block@28, result#10 <- block@35)
        let status#2: bool = φ(status#0 <- block@28, status#3 <- block@35)
        goto block@24
    block@17: // else_body_L53
        let tmp%23#0: uint64 = (txn NumAssets)
        let tmp%24#0: bool = (== tmp%23#0 1u)
        goto tmp%24#0 ? block@18 : block@22
    block@18: // if_body_L54
        let (asset_balance#0: uint64, asset_exists#0: bool) = ((asset_holding_get AssetBalance) sender#0 0u)
        goto asset_exists#0 ? block@20 : block@19
    block@19: // if_body_L56
        let msg#1: bytes = 0x596f7520646f206e6f74206861766520616e79206f6620746865206173736574
        goto block@21
    block@20: // else_body_L58
        let tmp%27#0: bytes = test_cases.simplish.contract.itoa(asset_balance#0)
        let msg#2: bytes = (concat 0x596f7520686176652061737365742062616c616e63653a20 tmp%27#0)
        goto block@21
    block@21: // after_if_else_L55
        let msg#6: bytes = φ(msg#1 <- block@19, msg#2 <- block@20)
        let result#1: bool = 1u
        goto block@23
    block@22: // else_body_L61
        let msg#3: bytes = 0x6e6f7420656e6f756768206170702061726773206f7220666f726569676e20617373657473
        let result#2: bool = 0u
        goto block@23
    block@23: // after_if_else_L53
        let msg#5: bytes = φ(msg#6 <- block@21, msg#3 <- block@22)
        let result#4: bool = φ(result#1 <- block@21, result#2 <- block@22)
        goto block@24
    block@24: // after_if_else_L50
        let msg#4: bytes = φ(result#9 <- block@36, msg#5 <- block@23)
        let result#3: bool = φ(status#2 <- block@36, result#4 <- block@23)
        (log msg#4)
        (log "Incrementing counter!")
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "counter")
        (assert maybe_exists%0#1) // check self.counter exists
        let tmp%0#2: uint64 = (+ maybe_value%0#1 1u)
        (app_global_put "counter" tmp%0#2)
        return result#3

subroutine test_cases.simplish.contract.itoa(i: uint64) -> bytes:
    block@0: // L117
        let tmp%1#0: bool = (< i#0 10u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L123
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return extract%0#0
    block@2: // after_if_else_L122
        let tmp%2#0: uint64 = (/ i#0 10u)
        let tmp%3#0: bytes = test_cases.simplish.contract.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 10u)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let tmp%5#0: bytes = (concat tmp%3#0 extract%1#0)
        return tmp%5#0