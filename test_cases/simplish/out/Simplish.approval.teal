#pragma version 10
#pragma typetrack false

// test_cases.simplish.contract.Simplish.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 100000 2 314159 628318
    bytecblock "counter" 0x30313233343536373839
    intc_1 // 0
    dupn 2
    pushbytes ""
    dupn 4
    txn ApplicationID
    bnz main_after_if_else@2
    // simplish/base_class.py:8
    // self.counter = UInt64(0)
    bytec_0 // "counter"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // simplish/contract.py:31
    // if Txn.application_id == 0:
    txn ApplicationID
    bnz main_after_if_else@5
    // simplish/contract.py:32
    // return True
    intc_0 // 1
    return

main_after_if_else@5:
    // simplish/contract.py:33
    // oca = Txn.on_completion
    txn OnCompletion
    dup
    bury 4
    // simplish/contract.py:34
    // sender = Txn.sender
    txn Sender
    bury 7
    // simplish/contract.py:36
    // OnCompleteAction.UpdateApplication,
    pushint 4 // UpdateApplication
    // simplish/contract.py:35-38
    // if oca in (
    //     OnCompleteAction.UpdateApplication,
    //     OnCompleteAction.DeleteApplication,
    // ):
    ==
    bnz main_if_body@7
    dig 2
    // simplish/contract.py:37
    // OnCompleteAction.DeleteApplication,
    pushint 5 // DeleteApplication
    // simplish/contract.py:35-38
    // if oca in (
    //     OnCompleteAction.UpdateApplication,
    //     OnCompleteAction.DeleteApplication,
    // ):
    ==
    bz main_after_if_else@10

main_if_body@7:
    // simplish/contract.py:39
    // if oca == OnCompleteAction.DeleteApplication:
    dig 2
    pushint 5 // DeleteApplication
    ==
    bz main_after_if_else@9
    // simplish/contract.py:40
    // log(Bytes(b"I was used ") + itoa(self.counter) + b" time(s) before I died")
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    callsub itoa
    pushbytes 0x4920776173207573656420
    swap
    concat
    pushbytes 0x2074696d65287329206265666f726520492064696564
    concat
    log

main_after_if_else@9:
    // simplish/contract.py:41
    // return Global.creator_address == sender
    global CreatorAddress
    dig 6
    ==
    return

main_after_if_else@10:
    // simplish/contract.py:43
    // if oca == OnCompleteAction.OptIn:
    dig 2
    intc_0 // OptIn
    ==
    bz main_after_if_else@14
    // simplish/contract.py:44
    // if Txn.num_app_args > 0:
    txn NumAppArgs
    bz main_after_if_else@13
    // simplish/base_class.py:17
    // self.name[0] = nickname
    intc_1 // 0
    pushbytes "name"
    // simplish/contract.py:45
    // self.set_sender_nickname(Txn.application_args(0))
    txna ApplicationArgs 0
    // simplish/base_class.py:17
    // self.name[0] = nickname
    app_local_put

main_after_if_else@13:
    // simplish/contract.py:46
    // return True
    intc_0 // 1
    return

main_after_if_else@14:
    // simplish/contract.py:47
    // if oca != OnCompleteAction.NoOp:
    dig 2
    bz main_after_if_else@16
    err

main_after_if_else@16:
    // simplish/contract.py:50
    // if (num_app_args := Txn.num_app_args) > 0:
    txn NumAppArgs
    dup
    bury 5
    bz main_else_body@18
    // simplish/contract.py:51
    // method_name = Txn.application_args(0)
    txna ApplicationArgs 0
    dup
    bury 9
    // simplish/contract.py:72
    // assert num_app_args == 2, "insufficient arguments"
    dig 4
    intc_3 // 2
    ==
    assert // insufficient arguments
    // simplish/contract.py:73
    // radius = btoi(Txn.application_args(1))
    txna ApplicationArgs 1
    btoi
    bury 3
    // simplish/contract.py:75
    // status = True
    intc_0 // 1
    bury 2
    // simplish/contract.py:76
    // if method_name == b"circle_area":
    pushbytes 0x636972636c655f61726561
    ==
    bz main_else_body@31
    // simplish/contract.py:112-113
    // # PI * r ^ 2
    // result = radius**2 * SCALED_PI // SCALE
    dig 1
    intc_3 // 2
    exp
    intc 4 // 314159
    *
    intc_2 // 100000
    /
    // simplish/contract.py:78
    // result = itoa(area)
    callsub itoa

main_after_if_else@38:
    dig 1
    swap
    bury 8

main_after_if_else@25:
    // simplish/contract.py:63
    // log(msg)
    dig 7
    log
    // simplish/contract.py:99
    // log("Incrementing counter!")
    pushbytes "Incrementing counter!"
    log
    // simplish/base_class.py:13
    // self.counter += 1
    intc_1 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_0 // 1
    +
    bytec_0 // "counter"
    swap
    app_global_put
    return

main_else_body@31:
    // simplish/contract.py:79
    // elif method_name == b"circle_circumference":
    dig 7
    pushbytes 0x636972636c655f63697263756d666572656e6365
    ==
    bz main_else_body@33
    // simplish/contract.py:107
    // return radius * two_pi // SCALE
    dig 1
    // simplish/contract.py:105-106
    // # PI * 2r
    // two_pi = UInt64(2) * SCALED_PI
    intc 5 // 628318
    // simplish/contract.py:107
    // return radius * two_pi // SCALE
    *
    intc_2 // 100000
    /
    // simplish/contract.py:81
    // result = itoa(circumference)
    callsub itoa
    b main_after_if_else@38

main_else_body@33:
    // simplish/contract.py:82
    // elif method_name == b"circle_report":
    dig 7
    pushbytes 0x636972636c655f7265706f7274
    ==
    bz main_else_body@35
    // simplish/contract.py:112-113
    // # PI * r ^ 2
    // result = radius**2 * SCALED_PI // SCALE
    dig 1
    dup
    intc_3 // 2
    exp
    intc 4 // 314159
    *
    intc_2 // 100000
    /
    // simplish/contract.py:107
    // return radius * two_pi // SCALE
    dig 1
    // simplish/contract.py:105-106
    // # PI * 2r
    // two_pi = UInt64(2) * SCALED_PI
    intc 5 // 628318
    // simplish/contract.py:107
    // return radius * two_pi // SCALE
    *
    intc_2 // 100000
    /
    // simplish/contract.py:86
    // + itoa(radius)
    uncover 2
    callsub itoa
    // simplish/contract.py:85
    // Bytes(b"Approximate area and circumference of circle with radius ")
    pushbytes 0x417070726f78696d617465206172656120616e642063697263756d666572656e6365206f6620636972636c6520776974682072616469757320
    // simplish/contract.py:85-86
    // Bytes(b"Approximate area and circumference of circle with radius ")
    // + itoa(radius)
    swap
    concat
    // simplish/contract.py:87
    // + b" = "
    pushbytes 0x203d20
    // simplish/contract.py:85-87
    // Bytes(b"Approximate area and circumference of circle with radius ")
    // + itoa(radius)
    // + b" = "
    concat
    // simplish/contract.py:88
    // + itoa(area)
    uncover 2
    callsub itoa
    // simplish/contract.py:85-88
    // Bytes(b"Approximate area and circumference of circle with radius ")
    // + itoa(radius)
    // + b" = "
    // + itoa(area)
    concat
    // simplish/contract.py:89
    // + b", "
    pushbytes 0x2c20
    // simplish/contract.py:85-89
    // Bytes(b"Approximate area and circumference of circle with radius ")
    // + itoa(radius)
    // + b" = "
    // + itoa(area)
    // + b", "
    concat
    // simplish/contract.py:90
    // + itoa(circumference)
    swap
    callsub itoa
    // simplish/contract.py:85-90
    // Bytes(b"Approximate area and circumference of circle with radius ")
    // + itoa(radius)
    // + b" = "
    // + itoa(area)
    // + b", "
    // + itoa(circumference)
    concat
    b main_after_if_else@38

main_else_body@35:
    // simplish/contract.py:93
    // status = False
    intc_1 // 0
    bury 1
    // simplish/contract.py:94
    // result = Bytes(b"unknown method name")
    pushbytes 0x756e6b6e6f776e206d6574686f64206e616d65
    b main_after_if_else@38

main_else_body@18:
    // simplish/contract.py:53
    // elif Txn.num_assets == 1:
    txn NumAssets
    intc_0 // 1
    ==
    bz main_else_body@23
    // simplish/contract.py:54
    // asset_balance, asset_exists = AssetHoldingGet.asset_balance(sender, 0)
    dig 5
    intc_1 // 0
    asset_holding_get AssetBalance
    swap
    bury 6
    // simplish/contract.py:55
    // if not asset_exists:
    bnz main_else_body@21
    // simplish/contract.py:56
    // msg = Bytes(b"You do not have any of the asset")
    pushbytes 0x596f7520646f206e6f74206861766520616e79206f6620746865206173736574
    bury 7

main_after_if_else@22:
    // simplish/contract.py:59
    // result = True
    intc_0 // 1
    b main_after_if_else@25

main_else_body@21:
    // simplish/contract.py:58
    // msg = Bytes(b"You have asset balance: ") + itoa(asset_balance)
    dig 4
    callsub itoa
    pushbytes 0x596f7520686176652061737365742062616c616e63653a20
    swap
    concat
    bury 7
    b main_after_if_else@22

main_else_body@23:
    // simplish/contract.py:61
    // msg = Bytes(b"not enough app args or foreign assets")
    pushbytes 0x6e6f7420656e6f756768206170702061726773206f7220666f726569676e20617373657473
    bury 7
    // simplish/contract.py:62
    // result = False
    intc_1 // 0
    b main_after_if_else@25


// test_cases.simplish.contract.itoa(i: uint64) -> bytes:
itoa:
    // simplish/contract.py:117-118
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // simplish/contract.py:122
    // if i < radix:
    frame_dig -1
    // simplish/contract.py:121
    // radix = digits.length
    pushint 10 // 10
    // simplish/contract.py:122
    // if i < radix:
    <
    bz itoa_after_if_else@2
    // simplish/contract.py:120
    // digits = Bytes(b"0123456789")
    bytec_1 // 0x30313233343536373839
    // simplish/contract.py:123
    // return digits[i]
    frame_dig -1
    intc_0 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // simplish/contract.py:124
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    // simplish/contract.py:121
    // radix = digits.length
    pushint 10 // 10
    // simplish/contract.py:124
    // return itoa(i // radix) + digits[i % radix]
    /
    callsub itoa
    frame_dig -1
    // simplish/contract.py:121
    // radix = digits.length
    pushint 10 // 10
    // simplish/contract.py:124
    // return itoa(i // radix) + digits[i % radix]
    %
    // simplish/contract.py:120
    // digits = Bytes(b"0123456789")
    bytec_1 // 0x30313233343536373839
    // simplish/contract.py:124
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_0 // 1
    extract3
    concat
    retsub
