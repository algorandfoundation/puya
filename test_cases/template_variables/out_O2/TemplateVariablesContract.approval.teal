#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 64 TMPL_DELETABLE TMPL_UPDATABLE
    bytecblock 0x151f7c75 TMPL_SOME_BIG_UINT TMPL_SOME_BYTES
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x2fcaddf6 0x37f64cf3 // method "get_bytes()byte[]", method "get_big_uint()uint512"
    txna ApplicationArgs 0
    match main_get_bytes_route@3 main_get_big_uint_route@4

main_after_if_else@13:
    pushint 0 // 0
    return

main_get_big_uint_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_1 // TMPL_SOME_BIG_UINT
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_bytes_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_2 // TMPL_SOME_BYTES
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    txn OnCompletion
    switch main___algopy_default_create@10 main_after_if_else@13 main_after_if_else@13 main_after_if_else@13 main_on_update@8 main_on_delete@9
    b main_after_if_else@13

main_on_delete@9:
    txn ApplicationID
    assert // can only call when not creating
    intc_2 // TMPL_DELETABLE
    assert
    intc_0 // 1
    return

main_on_update@8:
    txn ApplicationID
    assert // can only call when not creating
    intc_3 // TMPL_UPDATABLE
    assert
    intc_0 // 1
    return

main___algopy_default_create@10:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
