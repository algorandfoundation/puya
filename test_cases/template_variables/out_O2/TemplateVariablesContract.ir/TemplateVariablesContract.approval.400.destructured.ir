main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@10
    block@2: // abi_routing_L5
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "get_bytes()byte[]" => block@4, method "get_big_uint()uint512" => block@5, * => block@16}
    block@4: // get_bytes_route_L6
        let value#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        let aggregate%length%0#0: uint64 = (len value#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 value#0)
        let tmp%2#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%0#0)
        (log tmp%2#1)
        exit 1u
    block@5: // get_big_uint_route_L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let aggregate%value_len%0#0: uint64 = (len x#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| x#0 aggregate%bzero%0#0)
        let tmp%1#1: bytes = (concat 0x151f7c75 aggregate%arc4_encoded%0#0)
        (log tmp%1#1)
        exit 1u
    block@10: // bare_routing_L5
        let tmp%7#0: uint64 = (txn OnCompletion)
        goto_nth [block@11, block@16, block@16, block@16, block@12, block@13][tmp%7#0] else goto block@16
    block@11: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        exit 1u
    block@12: // on_update_L15
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        exit 1u
    block@13: // on_delete_L19
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        (assert TemplateVar[uint64](TMPL_DELETABLE))
        exit 1u
    block@16: // after_if_else_L5
        fail