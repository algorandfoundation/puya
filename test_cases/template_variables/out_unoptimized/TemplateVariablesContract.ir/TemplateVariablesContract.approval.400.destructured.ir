main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L5
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L5
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@3 : block@8
    block@3: // call_NoOp_L5
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "get_bytes()byte[]" => block@4, method "get_big_uint()uint512" => block@5, * => block@6}
    block@4: // get_bytes_route_L6
        test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]()
        goto block@7
    block@5: // get_big_uint_route_L10
        test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]()
        goto block@7
    block@6: // switch_case_default_L5
        goto block@7
    block@7: // switch_case_next_L5
        goto block@9
    block@8: // create_NoOp_L5
        goto block@9
    block@9: // after_if_else_L5
        goto block@16
    block@10: // bare_routing_L5
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {NoOp => block@11, UpdateApplication => block@12, DeleteApplication => block@13, * => block@14}
    block@11: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        goto block@18
    block@18: // L1
        goto block@19
    block@19: // after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create_L1
        exit 1u
    block@12: // on_update_L15
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        test_cases.template_variables.contract.TemplateVariablesContract.on_update()
        exit 1u
    block@13: // on_delete_L19
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        test_cases.template_variables.contract.TemplateVariablesContract.on_delete()
        exit 1u
    block@14: // switch_case_default_L5
        goto block@15
    block@15: // switch_case_next_L5
        goto block@16
    block@16: // after_if_else_L5
        exit 0u
    block@17: // after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
    block@0: // L6
        let tmp%0#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_bytes()
        let aggregate%length%0#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%0#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
    block@0: // L10
        let tmp%0#0: Encoded(uint512) = test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
    block@0: // L6
        let tmp%0#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.receive_value(TemplateVar[bytes](TMPL_SOME_BYTES))
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> Encoded(uint512):
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let aggregate%value_len%0#0: uint64 = (len x#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| x#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let tmp%0#0: Encoded(uint512) = aggregate%as_Encoded(uint512)%0#0
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
    block@0: // L15
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        return 

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
    block@0: // L19
        let tmp%0#0: bool = (!= TemplateVar[uint64](TMPL_DELETABLE) 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.template_variables.contract.TemplateVariablesContract.receive_value(value: bytes) -> bytes:
    block@0: // L23
        return value#0