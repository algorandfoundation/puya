{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAKK;;;;;;AAJA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAcK;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAJA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AATA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAF6B;AAAnB;;;AAAP;;;;AAII;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;;AAIO;AAAP;;;;;AAIO;;AAAA;AAAA;AAAP;;AAER;;;;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64 TMPL_UPDATABLE TMPL_DELETABLE"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT"
    },
    "17": {
      "op": "b main_block@0"
    },
    "20": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "23": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "26": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "30": {
      "op": "b main_abi_routing@2"
    },
    "33": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "36": {
      "op": "match",
      "stack_out": []
    },
    "38": {
      "op": "b main_route_NoOp@3"
    },
    "41": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "43": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "44": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "45": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "49": {
      "op": "match",
      "stack_out": []
    },
    "51": {
      "op": "b main_switch_case_default@4"
    },
    "54": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "56": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "59": {
      "op": "b main_call_NoOp@5"
    },
    "62": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "65": {
      "op": "pushbytes 0x2fcaddf6 // method \"get_bytes()byte[]\"",
      "defined_out": [
        "Method(get_bytes()byte[])",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_bytes()byte[])"
      ]
    },
    "71": {
      "op": "pushbytes 0x37f64cf3 // method \"get_big_uint()uint512\"",
      "defined_out": [
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)"
      ]
    },
    "77": {
      "op": "uncover 2",
      "stack_out": [
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)",
        "tmp%7#0"
      ]
    },
    "79": {
      "op": "match main_get_bytes_route@6 main_get_big_uint_route@7",
      "stack_out": []
    },
    "85": {
      "op": "b main_switch_case_default@8"
    },
    "88": {
      "block": "main_switch_case_default@8",
      "stack_in": [],
      "op": "b main_switch_case_next@9"
    },
    "91": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "94": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "97": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "100": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "103": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "104": {
      "block": "main_get_big_uint_route@7",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "op": "callsub get_big_uint"
    },
    "107": {
      "op": "b main_switch_case_next@9"
    },
    "110": {
      "block": "main_get_bytes_route@6",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "op": "callsub get_bytes"
    },
    "113": {
      "op": "b main_switch_case_next@9"
    },
    "116": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "119": {
      "op": "match",
      "stack_out": []
    },
    "121": {
      "op": "b main_switch_case_default@11"
    },
    "124": {
      "block": "main_switch_case_default@11",
      "stack_in": [],
      "op": "b main_switch_case_next@12"
    },
    "127": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "130": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "132": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "4"
      ]
    },
    "134": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "4",
        "5",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "4",
        "5"
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "4",
        "5",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "4",
        "5",
        "0"
      ]
    },
    "137": {
      "op": "uncover 3",
      "stack_out": [
        "4",
        "5",
        "0",
        "tmp%9#0"
      ]
    },
    "139": {
      "op": "match main_on_update@17 main_on_delete@18 main___algopy_default_create@19",
      "stack_out": []
    },
    "147": {
      "op": "b main_switch_case_default@20"
    },
    "150": {
      "block": "main_switch_case_default@20",
      "stack_in": [],
      "op": "b main_switch_case_next@21"
    },
    "153": {
      "block": "main_switch_case_next@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "156": {
      "block": "main___algopy_default_create@19",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "158": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "159": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "160": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "161": {
      "op": "b main_block@24"
    },
    "164": {
      "block": "main_block@24",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@25"
    },
    "167": {
      "block": "main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@25",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "block": "main_on_delete@18",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "172": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "174": {
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.on_delete",
      "op": "callsub on_delete"
    },
    "177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "178": {
      "op": "return",
      "stack_out": []
    },
    "179": {
      "block": "main_on_update@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "182": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.on_update",
      "op": "callsub on_update"
    },
    "187": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "188": {
      "op": "return",
      "stack_out": []
    },
    "189": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "params": {},
      "block": "get_bytes",
      "stack_in": [],
      "op": "b get_bytes_block@0"
    },
    "192": {
      "block": "get_bytes_block@0",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "op": "callsub test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "196": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "198": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "201": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "204": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "205": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "208": {
      "op": "log",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "params": {},
      "block": "get_big_uint",
      "stack_in": [],
      "op": "b get_big_uint_block@0"
    },
    "214": {
      "block": "get_big_uint_block@0",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "op": "callsub test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "221": {
      "op": "log",
      "stack_out": []
    },
    "222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "223": {
      "op": "return",
      "stack_out": []
    },
    "224": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "params": {},
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "stack_in": [],
      "op": "b test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0"
    },
    "227": {
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0",
      "stack_in": [],
      "op": "bytec_1 // TMPL_SOME_BYTES",
      "defined_out": [
        "TMPL_SOME_BYTES"
      ],
      "stack_out": [
        "TMPL_SOME_BYTES"
      ]
    },
    "228": {
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.receive_value",
      "op": "callsub receive_value",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "retsub": true,
      "op": "retsub"
    },
    "232": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "params": {},
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "stack_in": [],
      "op": "b test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0"
    },
    "235": {
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0",
      "stack_in": [],
      "op": "bytec_2 // TMPL_SOME_BIG_UINT",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "x#0 (copy)"
      ]
    },
    "237": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0"
      ]
    },
    "238": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "239": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "240": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "x#0"
      ]
    },
    "241": {
      "op": "intc_2 // 64",
      "stack_out": [
        "x#0",
        "64"
      ]
    },
    "242": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%bzero%0#0"
      ]
    },
    "243": {
      "op": "b|",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    },
    "245": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.on_update",
      "params": {},
      "block": "on_update",
      "stack_in": [],
      "op": "b on_update_block@0"
    },
    "248": {
      "block": "on_update_block@0",
      "stack_in": [],
      "op": "intc_3 // TMPL_UPDATABLE",
      "defined_out": [
        "TMPL_UPDATABLE"
      ],
      "stack_out": [
        "TMPL_UPDATABLE"
      ]
    },
    "249": {
      "op": "assert",
      "stack_out": []
    },
    "250": {
      "retsub": true,
      "op": "retsub"
    },
    "251": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.on_delete",
      "params": {},
      "block": "on_delete",
      "stack_in": [],
      "op": "b on_delete_block@0"
    },
    "254": {
      "block": "on_delete_block@0",
      "stack_in": [],
      "op": "intc 4 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE",
        "0"
      ]
    },
    "257": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "258": {
      "op": "assert",
      "stack_out": []
    },
    "259": {
      "retsub": true,
      "op": "retsub"
    },
    "260": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.receive_value",
      "params": {
        "value#0": "bytes"
      },
      "block": "receive_value",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "263": {
      "op": "b receive_value_block@0"
    },
    "266": {
      "block": "receive_value_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "268": {
      "retsub": true,
      "op": "retsub"
    }
  }
}