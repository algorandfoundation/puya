{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAcK;;;AAAA;AAAA;AAdL;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAUK;;;AAAA;AAAA;AAVL;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAF6B;AAAnB;;;AAAP;;;;AAII;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;;AAIO;AAAP;;;;;AAIO;;AAAA;AAAA;AAAP;;AAER;;;;;;AAEQ;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 64 TMPL_UPDATABLE TMPL_DELETABLE"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT"
    },
    "17": {
      "op": "b block@0"
    },
    "20": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "23": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "26": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "29": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "31": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "32": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "33": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "35": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "37": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "39": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "41": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "43": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "45": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "47": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "49": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "51": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "53": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "55": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "81": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "84": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "85": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "88": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "90": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "91": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "92": {
      "op": "bz else_body@22",
      "stack_out": []
    },
    "95": {
      "op": "b on_delete@21"
    },
    "98": {
      "block": "on_delete@21",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.on_delete",
      "op": "callsub on_delete"
    },
    "101": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "error": "this contract does not implement the given ABI method for call DeleteApplication",
      "block": "else_body@22",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call DeleteApplication"
    },
    "104": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "107": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "109": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "111": {
      "op": "bz else_body@18",
      "stack_out": []
    },
    "114": {
      "op": "b on_update@17"
    },
    "117": {
      "block": "on_update@17",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.on_update",
      "op": "callsub on_update"
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "121": {
      "op": "return",
      "stack_out": []
    },
    "122": {
      "error": "this contract does not implement the given ABI method for call UpdateApplication",
      "block": "else_body@18",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call UpdateApplication"
    },
    "123": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "126": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "129": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "132": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "135": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "138": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "141": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "143": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "145": {
      "op": "bz else_body@9",
      "stack_out": []
    },
    "148": {
      "op": "b __algopy_default_create@8"
    },
    "151": {
      "block": "__algopy_default_create@8",
      "stack_in": [],
      "op": "b block@26"
    },
    "154": {
      "block": "block@26",
      "stack_in": [],
      "op": "b after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@27"
    },
    "157": {
      "block": "after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@27",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "158": {
      "op": "return",
      "stack_out": []
    },
    "159": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "160": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "163": {
      "op": "pushbytes 0x2fcaddf6 // method \"get_bytes()byte[]\"",
      "defined_out": [
        "Method(get_bytes()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_bytes()byte[])"
      ]
    },
    "169": {
      "op": "pushbytes 0x37f64cf3 // method \"get_big_uint()uint512\"",
      "defined_out": [
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)"
      ]
    },
    "175": {
      "op": "uncover 2",
      "stack_out": [
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)",
        "tmp%5#0"
      ]
    },
    "177": {
      "op": "match get_bytes_route@3 get_big_uint_route@4",
      "stack_out": []
    },
    "183": {
      "op": "b switch_case_default@5"
    },
    "186": {
      "block": "switch_case_default@5",
      "stack_in": [],
      "op": "b switch_case_next@6"
    },
    "189": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@6",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "190": {
      "block": "get_big_uint_route@4",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "op": "callsub get_big_uint"
    },
    "193": {
      "op": "b switch_case_next@6"
    },
    "196": {
      "block": "get_bytes_route@3",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "op": "callsub get_bytes"
    },
    "199": {
      "op": "b switch_case_next@6"
    },
    "202": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "params": {},
      "block": "get_bytes",
      "stack_in": [],
      "op": "b get_bytes_block@0"
    },
    "205": {
      "block": "get_bytes_block@0",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "op": "callsub test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "209": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "210": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "211": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "214": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "217": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "218": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "221": {
      "op": "log",
      "stack_out": []
    },
    "222": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "223": {
      "op": "return",
      "stack_out": []
    },
    "224": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "params": {},
      "block": "get_big_uint",
      "stack_in": [],
      "op": "b get_big_uint_block@0"
    },
    "227": {
      "block": "get_big_uint_block@0",
      "stack_in": [],
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "op": "callsub test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "231": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "234": {
      "op": "log",
      "stack_out": []
    },
    "235": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "236": {
      "op": "return",
      "stack_out": []
    },
    "237": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "params": {},
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes",
      "stack_in": [],
      "op": "b test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0"
    },
    "240": {
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0",
      "stack_in": [],
      "op": "bytec_1 // TMPL_SOME_BYTES",
      "defined_out": [
        "TMPL_SOME_BYTES"
      ],
      "stack_out": [
        "TMPL_SOME_BYTES"
      ]
    },
    "241": {
      "callsub": "test_cases.template_variables.contract.TemplateVariablesContract.receive_value",
      "op": "callsub receive_value",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    },
    "245": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "params": {},
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint",
      "stack_in": [],
      "op": "b test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0"
    },
    "248": {
      "block": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0",
      "stack_in": [],
      "op": "bytec_2 // TMPL_SOME_BIG_UINT",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "249": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "x#0 (copy)"
      ]
    },
    "250": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0"
      ]
    },
    "251": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "252": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "253": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "x#0"
      ]
    },
    "254": {
      "op": "intc_2 // 64",
      "stack_out": [
        "x#0",
        "64"
      ]
    },
    "255": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%bzero%0#0"
      ]
    },
    "256": {
      "op": "b|",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.on_update",
      "params": {},
      "block": "on_update",
      "stack_in": [],
      "op": "b on_update_block@0"
    },
    "261": {
      "block": "on_update_block@0",
      "stack_in": [],
      "op": "intc_3 // TMPL_UPDATABLE",
      "defined_out": [
        "TMPL_UPDATABLE"
      ],
      "stack_out": [
        "TMPL_UPDATABLE"
      ]
    },
    "262": {
      "op": "assert",
      "stack_out": []
    },
    "263": {
      "retsub": true,
      "op": "retsub"
    },
    "264": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.on_delete",
      "params": {},
      "block": "on_delete",
      "stack_in": [],
      "op": "b on_delete_block@0"
    },
    "267": {
      "block": "on_delete_block@0",
      "stack_in": [],
      "op": "intc 4 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "269": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE",
        "0"
      ]
    },
    "270": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "assert",
      "stack_out": []
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    },
    "273": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.receive_value",
      "params": {
        "value#0": "bytes"
      },
      "block": "receive_value",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "276": {
      "op": "b receive_value_block@0"
    },
    "279": {
      "block": "receive_value_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "281": {
      "retsub": true,
      "op": "retsub"
    }
  }
}