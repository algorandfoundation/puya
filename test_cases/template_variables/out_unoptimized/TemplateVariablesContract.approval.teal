#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 64 TMPL_UPDATABLE TMPL_DELETABLE
    bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT
    pushbytes ""
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7
    b main_abi_routing@2

main_abi_routing@2:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x2fcaddf6 // method "get_bytes()byte[]"
    pushbytes 0x37f64cf3 // method "get_big_uint()uint512"
    uncover 2
    match main_get_bytes_route@3 main_get_big_uint_route@4
    b main_switch_case_default@5

main_switch_case_default@5:
    b main_switch_case_next@6

main_switch_case_next@6:
    b main_after_if_else@13

main_after_if_else@13:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    intc_0 // 0
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14

main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14:
    return

main_get_big_uint_route@4:
    // template_variables/contract.py:10
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub get_big_uint
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14

main_get_bytes_route@3:
    // template_variables/contract.py:6
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub get_bytes
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14

main_bare_routing@7:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn OnCompletion
    pushint 4 // 4
    pushint 5 // 5
    intc_0 // 0
    uncover 3
    match main_on_update@8 main_on_delete@9 main___algopy_default_create@10
    b main_switch_case_default@11

main_switch_case_default@11:
    b main_switch_case_next@12

main_switch_case_next@12:
    b main_after_if_else@13

main___algopy_default_create@10:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    b main_block@15

main_block@15:
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@16

main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@16:
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14

main_on_delete@9:
    // template_variables/contract.py:19
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub on_delete
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14

main_on_update@8:
    // template_variables/contract.py:15
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub on_update
    intc_1 // 1
    bury 1
    b main_after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__@14


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
get_bytes:
    b get_bytes_block@0

get_bytes_block@0:
    // template_variables/contract.py:8
    // return self.receive_value(TemplateVar[Bytes]("SOME_BYTES"))
    bytec_1 // TMPL_SOME_BYTES
    callsub receive_value
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> bytes:
get_big_uint:
    b get_big_uint_block@0

get_big_uint_block@0:
    // template_variables/contract.py:12
    // x = TemplateVar[BigUInt]("SOME_BIG_UINT")
    bytec_2 // TMPL_SOME_BIG_UINT
    // template_variables/contract.py:13
    // return UInt512(x)
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
on_update:
    b on_update_block@0

on_update_block@0:
    // template_variables/contract.py:17
    // assert TemplateVar[bool]("UPDATABLE")
    intc_3 // TMPL_UPDATABLE
    assert
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
on_delete:
    b on_delete_block@0

on_delete_block@0:
    // template_variables/contract.py:21
    // assert TemplateVar[UInt64]("DELETABLE")
    intc 4 // TMPL_DELETABLE
    intc_0 // 0
    !=
    assert
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.receive_value(value: bytes) -> bytes:
receive_value:
    // template_variables/contract.py:23-24
    // @subroutine()
    // def receive_value(self, value: Bytes) -> Bytes:
    proto 1 1
    b receive_value_block@0

receive_value_block@0:
    // template_variables/contract.py:25
    // return value
    frame_dig -1
    retsub
