#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 64 TMPL_UPDATABLE TMPL_DELETABLE
    bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT
    b block@0

block@0:
    b block@1

block@1:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz bare_routing@10
    b abi_routing@2

abi_routing@2:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@8
    b call_NoOp@3

call_NoOp@3:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x2fcaddf6 // method "get_bytes()byte[]"
    pushbytes 0x37f64cf3 // method "get_big_uint()uint512"
    uncover 2
    match get_bytes_route@4 get_big_uint_route@5
    b switch_case_default@6

switch_case_default@6:
    b switch_case_next@7

switch_case_next@7:
    b after_if_else@9

after_if_else@9:
    b after_if_else@16

after_if_else@16:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    err

get_big_uint_route@5:
    // template_variables/contract.py:10
    // @arc4.abimethod()
    callsub get_big_uint
    b switch_case_next@7

get_bytes_route@4:
    // template_variables/contract.py:6
    // @arc4.abimethod()
    callsub get_bytes
    b switch_case_next@7

create_NoOp@8:
    b after_if_else@9

bare_routing@10:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    pushint 4 // UpdateApplication
    pushint 5 // DeleteApplication
    uncover 3
    match __algopy_default_create@11 on_update@12 on_delete@13
    b switch_case_default@14

switch_case_default@14:
    b switch_case_next@15

switch_case_next@15:
    b after_if_else@16

on_delete@13:
    // template_variables/contract.py:19
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub on_delete
    intc_1 // 1
    return

on_update@12:
    // template_variables/contract.py:15
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub on_update
    intc_1 // 1
    return

__algopy_default_create@11:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    b block@18

block@18:
    b after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@19

after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create@19:
    intc_1 // 1
    return


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
get_bytes:
    b get_bytes_block@0

get_bytes_block@0:
    // template_variables/contract.py:6
    // @arc4.abimethod()
    callsub test_cases.template_variables.contract.TemplateVariablesContract.get_bytes
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
get_big_uint:
    b get_big_uint_block@0

get_big_uint_block@0:
    // template_variables/contract.py:10
    // @arc4.abimethod()
    callsub test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
test_cases.template_variables.contract.TemplateVariablesContract.get_bytes:
    b test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0

test_cases.template_variables.contract.TemplateVariablesContract.get_bytes_block@0:
    // template_variables/contract.py:8
    // return self.receive_value(TemplateVar[Bytes]("SOME_BYTES"))
    bytec_1 // TMPL_SOME_BYTES
    callsub receive_value
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> bytes:
test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint:
    b test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0

test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint_block@0:
    // template_variables/contract.py:12
    // x = TemplateVar[BigUInt]("SOME_BIG_UINT")
    bytec_2 // TMPL_SOME_BIG_UINT
    // template_variables/contract.py:13
    // return UInt512(x)
    dup
    len
    intc_2 // 64
    <=
    assert // overflow
    intc_2 // 64
    bzero
    b|
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
on_update:
    b on_update_block@0

on_update_block@0:
    // template_variables/contract.py:17
    // assert TemplateVar[bool]("UPDATABLE")
    intc_3 // TMPL_UPDATABLE
    assert
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
on_delete:
    b on_delete_block@0

on_delete_block@0:
    // template_variables/contract.py:21
    // assert TemplateVar[UInt64]("DELETABLE")
    intc 4 // TMPL_DELETABLE
    intc_0 // 0
    !=
    assert
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.receive_value(value: bytes) -> bytes:
receive_value:
    // template_variables/contract.py:23-24
    // @subroutine()
    // def receive_value(self, value: Bytes) -> Bytes:
    proto 1 1
    b receive_value_block@0

receive_value_block@0:
    // template_variables/contract.py:25
    // return value
    frame_dig -1
    retsub
