contract TemplateVariablesContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.template_variables.contract.TemplateVariablesContract.get_bytes(): bytes
  {
    return this::receive_value(TemplateVar[bytes](TMPL_SOME_BYTES))
  }
  
  abimethod test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint(): arc4.uint512
  {
    x: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
    return arc4_encode(x, arc4.uint512)
  }
  
  baremethod test_cases.template_variables.contract.TemplateVariablesContract.on_update(): void
  {
    assert(TemplateVar[bool](TMPL_UPDATABLE))
  }
  
  baremethod test_cases.template_variables.contract.TemplateVariablesContract.on_delete(): void
  {
    assert(TemplateVar[uint64](TMPL_DELETABLE) != 0u)
  }
  
  subroutine test_cases.template_variables.contract.TemplateVariablesContract.receive_value(value: bytes): bytes
  {
    return value
  }
  
  baremethod test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create(): void
  {
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}