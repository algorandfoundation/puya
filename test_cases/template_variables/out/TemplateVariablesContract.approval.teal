#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 64 TMPL_UPDATABLE TMPL_DELETABLE
    bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x2fcaddf6 0x37f64cf3 // method "get_bytes()byte[]", method "get_big_uint()uint512"
    txna ApplicationArgs 0
    match main_get_bytes_route@3 main_get_big_uint_route@4

main_after_if_else@13:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    pushint 0 // 0
    return

main_get_big_uint_route@4:
    // template_variables/contract.py:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_big_uint
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_get_bytes_route@3:
    // template_variables/contract.py:6
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_bytes
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn OnCompletion
    switch main___algopy_default_create@10 main_after_if_else@13 main_after_if_else@13 main_after_if_else@13 main_on_update@8 main_on_delete@9
    b main_after_if_else@13

main_on_delete@9:
    // template_variables/contract.py:19
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    assert // can only call when not creating
    callsub on_delete
    intc_0 // 1
    return

main_on_update@8:
    // template_variables/contract.py:15
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // can only call when not creating
    callsub on_update
    intc_0 // 1
    return

main___algopy_default_create@10:
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
get_bytes:
    // template_variables/contract.py:8
    // return self.receive_value(TemplateVar[Bytes]("SOME_BYTES"))
    bytec_1 // TMPL_SOME_BYTES
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> bytes:
get_big_uint:
    // template_variables/contract.py:12
    // x = TemplateVar[BigUInt]("SOME_BIG_UINT")
    bytec_2 // TMPL_SOME_BIG_UINT
    // template_variables/contract.py:13
    // return UInt512(x)
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
on_update:
    // template_variables/contract.py:17
    // assert TemplateVar[bool]("UPDATABLE")
    intc_2 // TMPL_UPDATABLE
    assert
    retsub


// test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
on_delete:
    // template_variables/contract.py:21
    // assert TemplateVar[UInt64]("DELETABLE")
    intc_3 // TMPL_DELETABLE
    assert
    retsub
