#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 64 TMPL_DELETABLE TMPL_UPDATABLE
    bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz bare_routing@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x2fcaddf6 0x37f64cf3 // method "get_bytes()byte[]", method "get_big_uint()uint512"
    txna ApplicationArgs 0
    match get_bytes get_big_uint

after_if_else@16:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    err

bare_routing@10:
    // template_variables/contract.py:5
    // class TemplateVariablesContract(arc4.ARC4Contract):
    txn OnCompletion
    switch __algopy_default_create@11 after_if_else@16 after_if_else@16 after_if_else@16 on_update@12 on_delete@13
    err

on_delete@13:
    // template_variables/contract.py:19
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    txn ApplicationID
    assert // can only call when not creating
    // template_variables/contract.py:21
    // assert TemplateVar[UInt64]("DELETABLE")
    intc_2 // TMPL_DELETABLE
    // template_variables/contract.py:19
    // @arc4.baremethod(allow_actions=["DeleteApplication"])
    return

on_update@12:
    // template_variables/contract.py:15
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    txn ApplicationID
    assert // can only call when not creating
    // template_variables/contract.py:17
    // assert TemplateVar[bool]("UPDATABLE")
    intc_3 // TMPL_UPDATABLE
    // template_variables/contract.py:15
    // @arc4.baremethod(allow_actions=["UpdateApplication"])
    return

__algopy_default_create@11:
    txn ApplicationID
    !
    return // on error: can only call when creating


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
get_bytes:
    // template_variables/contract.py:8
    // return self.receive_value(TemplateVar[Bytes]("SOME_BYTES"))
    bytec_1 // TMPL_SOME_BYTES
    // template_variables/contract.py:6
    // @arc4.abimethod()
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
get_big_uint:
    // template_variables/contract.py:12
    // x = TemplateVar[BigUInt]("SOME_BIG_UINT")
    bytec_2 // TMPL_SOME_BIG_UINT
    // template_variables/contract.py:13
    // return UInt512(x)
    dup
    len
    intc_1 // 64
    <=
    assert // overflow
    intc_1 // 64
    bzero
    b|
    // template_variables/contract.py:10
    // @arc4.abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return
