{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAcK;AAVL;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;AAcK;;AAAA;AAEU;AAFV;AAJA;;AAAA;AAEU;AAFV;;;;;AAP6B;AAF7B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 TMPL_DELETABLE TMPL_UPDATABLE"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT"
    },
    "16": {
      "op": "intc_0 // 1"
    },
    "17": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "lifted%return#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "bz main_bare_routing@16",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "22": {
      "op": "txn OnCompletion",
      "defined_out": [
        "lifted%return#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%3#0"
      ]
    },
    "24": {
      "op": "!",
      "defined_out": [
        "lifted%return#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%4#0"
      ]
    },
    "25": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "lifted%return#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%6#0"
      ]
    },
    "28": {
      "op": "assert",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "29": {
      "op": "pushbytess 0x2fcaddf6 0x37f64cf3 // method \"get_bytes()byte[]\", method \"get_big_uint()uint512\"",
      "defined_out": [
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])",
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)"
      ]
    },
    "41": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])",
        "lifted%return#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)",
        "tmp%7#0"
      ]
    },
    "44": {
      "op": "match get_bytes get_big_uint",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "50": {
      "block": "main_after_if_else@22",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "err"
    },
    "51": {
      "block": "main_bare_routing@16",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%9#0"
      ]
    },
    "53": {
      "op": "switch main___algopy_default_create@19 main_after_if_else@22 main_after_if_else@22 main_after_if_else@22 main_on_update@17 main_on_delete@18",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "67": {
      "op": "err"
    },
    "68": {
      "block": "main_on_delete@18",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%12#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "71": {
      "op": "intc_2 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "lifted%return#0",
        "TMPL_DELETABLE"
      ]
    },
    "72": {
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "73": {
      "block": "main_on_update@17",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%10#0"
      ]
    },
    "75": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "76": {
      "op": "intc_3 // TMPL_UPDATABLE",
      "defined_out": [
        "TMPL_UPDATABLE"
      ],
      "stack_out": [
        "lifted%return#0",
        "TMPL_UPDATABLE"
      ]
    },
    "77": {
      "op": "return",
      "defined_out": [
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "78": {
      "block": "main___algopy_default_create@19",
      "stack_in": [
        "lifted%return#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%14#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "lifted%return#0",
        "tmp%15#0"
      ]
    },
    "81": {
      "error": "can only call when creating",
      "op": "return // on error: can only call when creating",
      "defined_out": [
        "lifted%return#0"
      ],
      "stack_out": [
        "lifted%return#0"
      ]
    },
    "82": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "params": {},
      "block": "get_bytes",
      "stack_in": [],
      "op": "bytec_1 // TMPL_SOME_BYTES",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "83": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "84": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%length%0#0"
      ]
    },
    "85": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "86": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "value#0"
      ]
    },
    "90": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "91": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "92": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "93": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "94": {
      "op": "log",
      "stack_out": []
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "params": {},
      "block": "get_big_uint",
      "stack_in": [],
      "op": "bytec_2 // TMPL_SOME_BIG_UINT",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "98": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "x#0 (copy)"
      ]
    },
    "99": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0"
      ]
    },
    "100": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "101": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "102": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "x#0"
      ]
    },
    "103": {
      "op": "intc_1 // 64",
      "stack_out": [
        "x#0",
        "64"
      ]
    },
    "104": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%bzero%0#0"
      ]
    },
    "105": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "109": {
      "op": "log",
      "stack_out": []
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    }
  }
}