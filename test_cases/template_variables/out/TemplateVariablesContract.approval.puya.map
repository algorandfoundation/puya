{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;AAcK;;AAAA;AAEU;AAFV;AAJA;;AAAA;AAEU;AAFV;;;;;;;AAP6B;AAF7B;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAEU;AAFV;AAAA;AAAA;AAAA;AAIA;AAEU;;AAFV;AAAA;AAAA;AAAA;AAIA;AAEU;;AAFV;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 64 TMPL_DELETABLE TMPL_UPDATABLE"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 TMPL_SOME_BYTES TMPL_SOME_BIG_UINT TMPL_NAMED_TUPLE TMPL_TUPLE TMPL_STRUCT"
    },
    "67": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "69": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "72": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "75": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "78": {
      "op": "assert",
      "stack_out": []
    },
    "79": {
      "op": "pushbytess 0x2fcaddf6 0x37f64cf3 0x25fcb1b1 0x95fd8ad1 0xb4cefa39 // method \"get_bytes()byte[]\", method \"get_big_uint()uint512\", method \"get_a_named_tuple()(uint64,uint64)\", method \"get_a_tuple()(uint64,uint64)\", method \"get_a_struct()(uint64,uint64)\"",
      "defined_out": [
        "Method(get_a_named_tuple()(uint64,uint64))",
        "Method(get_a_struct()(uint64,uint64))",
        "Method(get_a_tuple()(uint64,uint64))",
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])"
      ],
      "stack_out": [
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)",
        "Method(get_a_named_tuple()(uint64,uint64))",
        "Method(get_a_tuple()(uint64,uint64))",
        "Method(get_a_struct()(uint64,uint64))"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(get_a_named_tuple()(uint64,uint64))",
        "Method(get_a_struct()(uint64,uint64))",
        "Method(get_a_tuple()(uint64,uint64))",
        "Method(get_big_uint()uint512)",
        "Method(get_bytes()byte[])",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(get_bytes()byte[])",
        "Method(get_big_uint()uint512)",
        "Method(get_a_named_tuple()(uint64,uint64))",
        "Method(get_a_tuple()(uint64,uint64))",
        "Method(get_a_struct()(uint64,uint64))",
        "tmp%6#0"
      ]
    },
    "109": {
      "op": "match get_bytes get_big_uint get_a_named_tuple get_a_tuple get_a_struct",
      "stack_out": []
    },
    "121": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "err"
    },
    "122": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "124": {
      "op": "switch main___algopy_default_create@13 main_after_if_else@17 main_after_if_else@17 main_after_if_else@17 main_on_update@14 main_on_delete@15",
      "stack_out": []
    },
    "138": {
      "op": "err"
    },
    "139": {
      "block": "main_on_delete@15",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "141": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "142": {
      "op": "intc_2 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "143": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "144": {
      "block": "main_on_update@14",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "intc_3 // TMPL_UPDATABLE",
      "defined_out": [
        "TMPL_UPDATABLE"
      ],
      "stack_out": [
        "TMPL_UPDATABLE"
      ]
    },
    "148": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "149": {
      "block": "main___algopy_default_create@13",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "152": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "154": {
      "op": "return",
      "stack_out": []
    },
    "155": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]",
      "params": {},
      "block": "get_bytes",
      "stack_in": [],
      "op": "bytec_1 // TMPL_SOME_BYTES",
      "defined_out": [
        "value#0"
      ],
      "stack_out": [
        "value#0"
      ]
    },
    "156": {
      "op": "dup",
      "defined_out": [
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0",
        "value#0 (copy)"
      ]
    },
    "157": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%length%0#0"
      ]
    },
    "158": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "159": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "value#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "164": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]",
      "params": {},
      "block": "get_big_uint",
      "stack_in": [],
      "op": "bytec_2 // TMPL_SOME_BIG_UINT",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "171": {
      "op": "dup",
      "defined_out": [
        "x#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0",
        "x#0 (copy)"
      ]
    },
    "172": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0"
      ]
    },
    "173": {
      "op": "intc_1 // 64",
      "defined_out": [
        "64",
        "aggregate%value_len%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%value_len%0#0",
        "64"
      ]
    },
    "174": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "175": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "x#0"
      ]
    },
    "176": {
      "op": "intc_1 // 64",
      "stack_out": [
        "x#0",
        "64"
      ]
    },
    "177": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "aggregate%bzero%0#0"
      ]
    },
    "178": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "179": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "180": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "181": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "182": {
      "op": "log",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "184": {
      "op": "return",
      "stack_out": []
    },
    "185": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_a_named_tuple[routing]",
      "params": {},
      "block": "get_a_named_tuple",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "186": {
      "op": "bytec_3 // TMPL_NAMED_TUPLE",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_a_tuple[routing]",
      "params": {},
      "block": "get_a_tuple",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "192": {
      "op": "bytec 4 // TMPL_TUPLE",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "195": {
      "op": "log",
      "stack_out": []
    },
    "196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "subroutine": "test_cases.template_variables.contract.TemplateVariablesContract.get_a_struct[routing]",
      "params": {},
      "block": "get_a_struct",
      "stack_in": [],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "0x151f7c75"
      ]
    },
    "199": {
      "op": "bytec 5 // TMPL_STRUCT",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": []
    },
    "203": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "204": {
      "op": "return",
      "stack_out": []
    }
  }
}