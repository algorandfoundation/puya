contract test_cases.template_variables.contract.TemplateVariablesContract:
    program approval:
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.approval_program() -> bool:
            block@0: // L5
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L5
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "get_bytes()byte[]" => block@2, method "get_big_uint()uint512" => block@3, * => block@4}
            block@2: // get_bytes_route_L6
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_bytes()
                let length%0#0: uint64 = (len tmp%5#0)
                let as_bytes%0#0: bytes = (itob length%0#0)
                let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
                let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%5#0)
                let tmp%6#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
                (log tmp%6#0)
                return 1u
            block@3: // get_big_uint_route_L10
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 NoOp)
                (assert tmp%8#0) // OnCompletion is NoOp
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                let tmp%10#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint()
                let tmp%11#0: bytes = (concat 0x151f7c75 tmp%10#0)
                (log tmp%11#0)
                return 1u
            block@4: // switch_case_default_L5
                goto block@5
            block@5: // switch_case_next_L5
                fail // reject transaction
            block@6: // bare_routing_L5
                let tmp%12#0: uint64 = (txn OnCompletion)
                switch tmp%12#0 {0u => block@7, 4u => block@8, 5u => block@9, * => block@10}
            block@7: // create_L5
                let tmp%13#0: bool = (txn ApplicationID)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0) // is creating
                return 1u
            block@8: // on_update_L15
                let tmp%15#0: bool = (txn ApplicationID)
                (assert tmp%15#0) // is not creating
                test_cases.template_variables.contract.TemplateVariablesContract.on_update()
                return 1u
            block@9: // on_delete_L19
                let tmp%16#0: bool = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                test_cases.template_variables.contract.TemplateVariablesContract.on_delete()
                return 1u
            block@10: // reject_bare_on_completion_L5
                fail // reject transaction
        
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
            block@0: // L6
                return TemplateVar[bytes](TMPL_SOME_BYTES)
        
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> bytes:
            block@0: // L10
                let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
                let len_%0#0: uint64 = (len x#0)
                let no_overflow%0#0: bool = (<= len_%0#0 64u)
                (assert no_overflow%0#0) // overflow
                let b_zeros%0#0: bytes = (bzero 64u)
                let tmp%0#0: bytes = (b| x#0 b_zeros%0#0)
                return tmp%0#0
        
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
            block@0: // L15
                (assert TemplateVar[bool](TMPL_UPDATABLE))
                return 
        
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
            block@0: // L19
                let tmp%0#0: bool = (!= TemplateVar[uint64](TMPL_DELETABLE) 0u)
                (assert tmp%0#0)
                return 
    
    program clear-state:
        subroutine test_cases.template_variables.contract.TemplateVariablesContract.clear_state_program() -> bool:
            block@0: // L5
                return 1u