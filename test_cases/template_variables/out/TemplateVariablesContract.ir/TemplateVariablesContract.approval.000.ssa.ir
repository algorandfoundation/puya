main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__() -> bool:
    block@0: // L5
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@6, 2u => block@9, 3u => block@10, 4u => block@11, 5u => block@12, 6u => block@13, 7u => block@14, 8u => block@15, 9u => block@18, 10u => block@19, 11u => block@22, * => block@23}
    block@1: // switch_case_0_L5
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_bytes()byte[]" => block@2, method "get_big_uint()uint512" => block@3, * => block@4}
    block@2: // get_bytes_route_L6
        test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]()
        goto block@5
    block@3: // get_big_uint_route_L10
        test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]()
        goto block@5
    block@4: // switch_case_default_L5
        goto block@5
    block@5: // switch_case_next_L5
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L5
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // __algopy_default_create_L1
        test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create()
        exit 1u
    block@8: // else_body_L5
        fail // this contract does not implement the given ABI method for create NoOp
    block@9: // switch_case_2_L5
        goto block@23
    block@10: // switch_case_3_L5
        goto block@23
    block@11: // switch_case_4_L5
        goto block@23
    block@12: // switch_case_5_L5
        goto block@23
    block@13: // switch_case_6_L5
        goto block@23
    block@14: // switch_case_7_L5
        goto block@23
    block@15: // switch_case_8_L5
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        goto tmp%9#0 ? block@16 : block@17
    block@16: // on_update_L15
        test_cases.template_variables.contract.TemplateVariablesContract.on_update()
        exit 1u
    block@17: // else_body_L5
        fail // this contract does not implement the given ABI method for call UpdateApplication
    block@18: // switch_case_9_L5
        goto block@23
    block@19: // switch_case_10_L5
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        goto tmp%11#0 ? block@20 : block@21
    block@20: // on_delete_L19
        test_cases.template_variables.contract.TemplateVariablesContract.on_delete()
        exit 1u
    block@21: // else_body_L5
        fail // this contract does not implement the given ABI method for call DeleteApplication
    block@22: // switch_case_11_L5
        goto block@23
    block@23: // switch_case_default_L5
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
    block@0: // L6
        let tmp%0#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_bytes()
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
    block@0: // L10
        let tmp%0#0: Encoded(uint512) = test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
    block@0: // L6
        let tmp%0#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.receive_value(TemplateVar[bytes](TMPL_SOME_BYTES))
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> Encoded(uint512):
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let tmp%0#0: Encoded(uint512) = bytes_encode<uint512>(x#0)
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
    block@0: // L15
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        return 

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
    block@0: // L19
        let tmp%0#0: bool = (!= TemplateVar[uint64](TMPL_DELETABLE) 0u)
        (assert tmp%0#0)
        return 

subroutine test_cases.template_variables.contract.TemplateVariablesContract.receive_value(value: bytes) -> bytes:
    block@0: // L23
        return value#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.__algopy_default_create() -> void:
    block@0: // L1
        return 