main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@7, block@24, block@24, block@24, block@24, block@24, block@24, block@16, block@24, block@20, block@24][tmp%4#0] else goto block@24
    block@2: // switch_case_0_L5
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "get_bytes()byte[]" => block@3, method "get_big_uint()uint512" => block@4, * => block@6}
    block@3: // get_bytes_route_L6
        test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]()
        goto block@6
    block@4: // get_big_uint_route_L10
        test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]()
        goto block@6
    block@6: // switch_case_next_L5
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L5
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@16: // switch_case_8_L5
        let tmp%8#0: uint64 = (txn NumAppArgs)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // this contract does not implement the given ABI method for call UpdateApplication
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        exit 1u
    block@20: // switch_case_10_L5
        let tmp%10#0: uint64 = (txn NumAppArgs)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // this contract does not implement the given ABI method for call DeleteApplication
        (assert TemplateVar[uint64](TMPL_DELETABLE))
        exit 1u
    block@24: // switch_case_default_L5
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
    block@0: // L6
        let value#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(value#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let tmp%0#1: Encoded(uint512) = bytes_encode<uint512>(x#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#1)
        (log tmp%1#0)
        exit 1u