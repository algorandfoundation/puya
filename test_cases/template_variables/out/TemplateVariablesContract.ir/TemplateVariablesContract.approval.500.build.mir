// Op                                                                     Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    block@0:
        // template_variables/contract.py:5
        // class TemplateVariablesContract(arc4.ARC4Contract):
        txn NumAppArgs                                                    tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                    tmp%0#1
        bz bare_routing@10 ; b abi_routing@2

    abi_routing@2:
        // template_variables/contract.py:5
        // class TemplateVariablesContract(arc4.ARC4Contract):
        txn OnCompletion                                                  tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                    tmp%2#0
        !                                                                 tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                    tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                 tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                    tmp%4#0
        assert
        txna ApplicationArgs 0                                            tmp%6#0
        v-store tmp%6#0
        method get_bytes()byte[]                                          Method(get_bytes()byte[])
        method get_big_uint()uint512                                      Method(get_bytes()byte[]),Method(get_big_uint()uint512)
        v-load tmp%6#0                                                    Method(get_bytes()byte[]),Method(get_big_uint()uint512),tmp%6#0
        match get_bytes_route@4 get_big_uint_route@5 ; b after_if_else@16

    get_bytes_route@4:
        // template_variables/contract.py:6
        // @arc4.abimethod()
        callsub get_bytes
        b after_if_else@16

    get_big_uint_route@5:
        // template_variables/contract.py:10
        // @arc4.abimethod()
        callsub get_big_uint
        b after_if_else@16

    bare_routing@10:
        // template_variables/contract.py:5
        // class TemplateVariablesContract(arc4.ARC4Contract):
        txn OnCompletion                                                  tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                    tmp%7#0
        switch __algopy_default_create@11 after_if_else@16 after_if_else@16 after_if_else@16 on_update@12 on_delete@13 ; b after_if_else@16 

    __algopy_default_create@11:
        txn ApplicationID                                                 tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                    tmp%8#0
        !                                                                 tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                    tmp%9#0
        assert // can only call when creating
        int 1                                                             1
        return

    on_update@12:
        // template_variables/contract.py:15
        // @arc4.baremethod(allow_actions=["UpdateApplication"])
        txn ApplicationID                                                 tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                   tmp%10#0
        assert // can only call when not creating
        // template_variables/contract.py:17
        // assert TemplateVar[bool]("UPDATABLE")
        int TMPL_UPDATABLE                                                TMPL_UPDATABLE
        assert
        // template_variables/contract.py:15
        // @arc4.baremethod(allow_actions=["UpdateApplication"])
        int 1                                                             1
        return

    on_delete@13:
        // template_variables/contract.py:19
        // @arc4.baremethod(allow_actions=["DeleteApplication"])
        txn ApplicationID                                                 tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                   tmp%12#0
        assert // can only call when not creating
        // template_variables/contract.py:21
        // assert TemplateVar[UInt64]("DELETABLE")
        int TMPL_DELETABLE                                                TMPL_DELETABLE
        assert
        // template_variables/contract.py:19
        // @arc4.baremethod(allow_actions=["DeleteApplication"])
        int 1                                                             1
        return

    after_if_else@16:
        // template_variables/contract.py:5
        // class TemplateVariablesContract(arc4.ARC4Contract):
        err


// test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
subroutine get_bytes:
    get_bytes_block@0:
        // template_variables/contract.py:8
        // return self.receive_value(TemplateVar[Bytes]("SOME_BYTES"))
        byte TMPL_SOME_BYTES                                              TMPL_SOME_BYTES
        v-store value#0
        // template_variables/contract.py:6
        // @arc4.abimethod()
        v-load value#0                                                    value#0
        len                                                               aggregate%length%0#0
        v-store aggregate%length%0#0
        v-load aggregate%length%0#0                                       aggregate%length%0#0
        itob                                                              aggregate%as_bytes%0#0
        v-store aggregate%as_bytes%0#0
        v-load aggregate%as_bytes%0#0                                     aggregate%as_bytes%0#0
        extract 6 2                                                       aggregate%length_uint16%0#0
        v-store aggregate%length_uint16%0#0
        v-load aggregate%length_uint16%0#0                                aggregate%length_uint16%0#0
        v-load value#0                                                    aggregate%length_uint16%0#0,value#0
        concat                                                            aggregate%encoded_value%0#0
        v-store aggregate%encoded_value%0#0
        byte 0x151f7c75                                                   0x151f7c75
        v-load aggregate%encoded_value%0#0                                0x151f7c75,aggregate%encoded_value%0#0
        concat                                                            tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                    tmp%2#0
        log
        int 1                                                             1
        return


// test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
subroutine get_big_uint:
    get_big_uint_block@0:
        // template_variables/contract.py:12
        // x = TemplateVar[BigUInt]("SOME_BIG_UINT")
        byte TMPL_SOME_BIG_UINT                                           TMPL_SOME_BIG_UINT
        v-store x#0
        // template_variables/contract.py:13
        // return UInt512(x)
        v-load x#0                                                        x#0
        len                                                               aggregate%value_len%0#0
        v-store aggregate%value_len%0#0
        v-load aggregate%value_len%0#0                                    aggregate%value_len%0#0
        int 64                                                            aggregate%value_len%0#0,64
        <=                                                                aggregate%len_ok%0#0
        v-store aggregate%len_ok%0#0
        v-load aggregate%len_ok%0#0                                       aggregate%len_ok%0#0
        assert // overflow
        int 64                                                            64
        bzero                                                             aggregate%bzero%0#0
        v-store aggregate%bzero%0#0
        v-load x#0                                                        x#0
        v-load aggregate%bzero%0#0                                        x#0,aggregate%bzero%0#0
        b|                                                                aggregate%arc4_encoded%0#0
        v-store aggregate%arc4_encoded%0#0
        // template_variables/contract.py:10
        // @arc4.abimethod()
        byte 0x151f7c75                                                   0x151f7c75
        v-load aggregate%arc4_encoded%0#0                                 0x151f7c75,aggregate%arc4_encoded%0#0
        concat                                                            tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                    tmp%1#0
        log
        int 1                                                             1
        return


