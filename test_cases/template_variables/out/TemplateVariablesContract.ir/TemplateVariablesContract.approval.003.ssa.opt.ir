main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "get_bytes()byte[]" => block@3, method "get_big_uint()uint512" => block@4, * => block@13}
    block@3: // get_bytes_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_bytes()
        let tmp%8#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@14
    block@4: // get_big_uint_route_L10
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let tmp%14#0: Encoded(uint512) = test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint()
        let tmp%15#0: bytes = (concat 0x151f7c75 tmp%14#0)
        (log tmp%15#0)
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@14
    block@7: // bare_routing_L5
        let tmp%16#0: uint64 = (txn OnCompletion)
        goto_nth [block@10, block@13, block@13, block@13, block@8, block@9][tmp%16#0] else goto block@13
    block@8: // on_update_L15
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@14
    block@9: // on_delete_L19
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        (assert TemplateVar[uint64](TMPL_DELETABLE))
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@14
    block@10: // __algopy_default_create_L1
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // can only call when creating
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@14
    block@13: // after_if_else_L5
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#5: bool = 0u
        goto block@14
    block@14: // after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0 <- block@3, test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#1 <- block@4, test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#2 <- block@8, test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#3 <- block@9, test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#4 <- block@10, test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#5 <- block@13)
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
    block@0: // L6
        let value#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        return value#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> Encoded(uint512):
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let tmp%0#0: Encoded(uint512) = bytes_encode<uint512>(x#0)
        return tmp%0#0