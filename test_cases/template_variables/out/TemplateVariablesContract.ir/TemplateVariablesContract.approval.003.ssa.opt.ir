main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "get_bytes()byte[]" => block@6, method "get_big_uint()uint512" => block@7, * => block@22}
    block@6: // get_bytes_route_L6
        test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]()
        goto block@22
    block@7: // get_big_uint_route_L10
        test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]()
        goto block@22
    block@16: // bare_routing_L5
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto_nth [block@19, block@22, block@22, block@22, block@17, block@18][tmp%9#0] else goto block@22
    block@17: // on_update_L15
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        exit 1u
    block@18: // on_delete_L19
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        (assert TemplateVar[uint64](TMPL_DELETABLE))
        exit 1u
    block@19: // __algopy_default_create_L1
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // can only call when creating
        exit 1u
    block@22: // after_if_else_L5
        fail

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes[routing]() -> void:
    block@0: // L6
        let value#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(value#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint[routing]() -> void:
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let tmp%0#1: Encoded(uint512) = bytes_encode<uint512>(x#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#1)
        (log tmp%1#0)
        exit 1u