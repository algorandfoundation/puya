main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L5
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "get_bytes()byte[]" => block@3, method "get_big_uint()uint512" => block@4, * => block@13}
    block@3: // get_bytes_route_L6
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let to_encode%0#0: bytes = test_cases.template_variables.contract.TemplateVariablesContract.get_bytes()
        let length%0#0: uint64 = (len to_encode%0#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 to_encode%0#0)
        let tmp%7#0: bytes = (concat 0x151f7c75 encoded_value%0#0)
        (log tmp%7#0)
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@4: // get_big_uint_route_L10
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let tmp%12#0: bytes[64] = test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint()
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@7: // bare_routing_L5
        let tmp%14#0: uint64 = (txn OnCompletion)
        goto_nth [block@10, block@13, block@13, block@13, block@8, block@9][tmp%14#0] else goto block@13
    block@8: // on_update_L15
        let tmp%15#0: uint64 = (txn ApplicationID)
        (assert tmp%15#0) // can only call when not creating
        test_cases.template_variables.contract.TemplateVariablesContract.on_update()
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@9: // on_delete_L19
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        test_cases.template_variables.contract.TemplateVariablesContract.on_delete()
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@10: // __algopy_default_create_L1
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // can only call when creating
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@13: // after_if_else_L5
        let test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router__%0#0
        goto block@14
    block@14: // after_inlined_test_cases.template_variables.contract.TemplateVariablesContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_bytes() -> bytes:
    block@0: // L6
        let value#0: bytes = TemplateVar[bytes](TMPL_SOME_BYTES)
        return value#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.get_big_uint() -> bytes[64]:
    block@0: // L10
        let x#0: biguint = TemplateVar[biguint](TMPL_SOME_BIG_UINT)
        let value_len%0#0: uint64 = (len x#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| x#0 bzero%0#0)
        return arc4_encoded%0#0

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_update() -> void:
    block@0: // L15
        (assert TemplateVar[bool](TMPL_UPDATABLE))
        return 

subroutine test_cases.template_variables.contract.TemplateVariablesContract.on_delete() -> void:
    block@0: // L19
        (assert TemplateVar[uint64](TMPL_DELETABLE))
        return 