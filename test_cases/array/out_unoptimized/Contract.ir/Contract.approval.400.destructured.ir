slot_allocation(dynamic, reserved=[])
main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L13
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@17
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array()void" => block@3, method "test_array_extend()void" => block@4, method "test_array_multiple_append()void" => block@5, method "overhead()void" => block@6, method "test_array_too_long()void" => block@7, method "test_array_copy_and_extend()void" => block@8, method "test_array_evaluation_order()void" => block@9, method "test_array_assignment_maximum_cursage()void" => block@10, method "test_allocations(uint64)void" => block@11, method "test_iteration()void" => block@12, method "test_quicksort()void" => block@13, method "test_unobserved_write()void" => block@14, * => block@15}
    block@3: // test_array_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@4: // test_array_extend_route_L50
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@5: // test_array_multiple_append_route_L62
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_multiple_append()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@6: // overhead_route_L71
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        test_cases.array.uint64.Contract.overhead()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@7: // test_array_too_long_route_L75
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_too_long()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@8: // test_array_copy_and_extend_route_L84
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_copy_and_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@9: // test_array_evaluation_order_route_L106
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_evaluation_order()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@10: // test_array_assignment_maximum_cursage_route_L125
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@11: // test_allocations_route_L134
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.uint64.Contract.test_allocations(tmp%39#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@12: // test_iteration_route_L140
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_iteration()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@13: // test_quicksort_route_L174
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_quicksort()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@14: // test_unobserved_write_route_L191
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (== tmp%48#0 NoOp)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (!= tmp%50#0 0u)
        (assert tmp%51#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_unobserved_write()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@15: // switch_case_default_L13
        goto block@16
    block@16: // switch_case_next_L13
        goto block@21
    block@17: // bare_routing_L13
        let tmp%52#0: uint64 = (txn OnCompletion)
        switch tmp%52#0 {0u => block@18, * => block@19}
    block@18: // __algopy_default_create_L1
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (== tmp%53#0 0u)
        (assert tmp%54#0) // can only call when creating
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.array.uint64.Contract.__algopy_default_create_L1
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@19: // switch_case_default_L13
        goto block@20
    block@20: // switch_case_next_L13
        goto block@21
    block@21: // after_if_else_L13
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.array.uint64.Contract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.array.uint64.quicksort_window(arr: Encoded(uint64[])*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L201
        let left#0: uint64 = window_left#0
        let right#0: uint64 = window_right#0
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%1#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%0#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let pivot#0: uint64 = values%0#0
        goto block@1
    block@1: // while_top_L210
        let left#20: uint64 = left#0
        let arr#15: Encoded(uint64[])* = arr#0
        let right#17: uint64 = right#0
        goto 1u ? block@2 : block@22
    block@2: // while_body_L212
        goto block@3
    block@3: // while_top_L212
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* left#0 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%2#0: bool = (< values%1#0 pivot#0)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // while_body_L213
        let tmp%3#0: uint64 = (+ left#0 1u)
        let left#0: uint64 = tmp%3#0
        goto block@3
    block@5: // after_while_L212
        goto block@6
    block@6: // while_top_L215
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* right#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%2#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%4#0: bool = (< pivot#0 values%2#0)
        goto tmp%4#0 ? block@7 : block@10
    block@7: // while_body_L217
        let tmp%5#0: bool = (== right#0 0u)
        goto tmp%5#0 ? block@8 : block@9
    block@8: // if_body_L218
        goto block@21
    block@9: // after_if_else_L217
        let tmp%6#0: uint64 = (- right#0 1u)
        let right#0: uint64 = tmp%6#0
        goto block@6
    block@10: // after_while_L215
        let tmp%7#0: bool = (< left#0 right#0)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L223
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%3#1: uint64 = (* right#0 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%4#1: uint64 = (* left#0 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: uint64 = (btoi array_item%4#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob values%3#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%0#1: uint64 = (* left#0 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%5#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = aggregate%updated_array%0#1
        store(arr#0, updated_array%0#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob values%4#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%1#1: uint64 = (* right#0 8u)
        let aggregate%updated_array%1#1: bytes = (replace3 slot_contents%6#0 aggregate%write_offset%1#1 encoded_value%1#0)
        let updated_array%1#0: Encoded(uint64[]) = aggregate%updated_array%1#1
        store(arr#0, updated_array%1#0)
        let tmp%8#0: uint64 = (+ left#0 1u)
        let left#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (== right#0 0u)
        goto tmp%9#0 ? block@12 : block@13
    block@12: // if_body_L227
        let left#20: uint64 = left#0
        let arr#15: Encoded(uint64[])* = arr#0
        let right#17: uint64 = right#0
        goto block@22
    block@13: // after_if_else_L226
        let tmp%10#0: uint64 = (- right#0 1u)
        let right#0: uint64 = tmp%10#0
        let tmp%11#0: bool = (<= left#0 right#0)
        goto tmp%11#0 ? block@14 : block@15
    block@14: // if_body_L231
        goto block@1
    block@15: // after_if_else_L230
        let left#20: uint64 = left#0
        let arr#15: Encoded(uint64[])* = arr#0
        let right#17: uint64 = right#0
        goto block@22
    block@16: // after_if_else_L222
        let tmp%12#0: bool = (== left#0 right#0)
        goto tmp%12#0 ? block@17 : block@20
    block@17: // if_body_L237
        let tmp%13#0: uint64 = (+ left#0 1u)
        let left#0: uint64 = tmp%13#0
        let tmp%14#0: bool = (!= right#0 0u)
        let right#17: uint64 = right#0
        goto tmp%14#0 ? block@18 : block@19
    block@18: // if_body_L240
        let tmp%15#0: uint64 = (- right#0 1u)
        let right#0: uint64 = tmp%15#0
        let right#17: uint64 = right#0
        goto block@19
    block@19: // after_if_else_L239
        let right#0: uint64 = right#17
        let left#20: uint64 = left#0
        let arr#15: Encoded(uint64[])* = arr#0
        let right#17: uint64 = right#0
        goto block@22
    block@20: // after_if_else_L236
        goto block@21
    block@21: // L215
        let left#20: uint64 = left#0
        let arr#15: Encoded(uint64[])* = arr#0
        let right#17: uint64 = right#0
        goto block@22
    block@22: // after_while_L210
        let left#0: uint64 = left#20
        let arr#0: Encoded(uint64[])* = arr#15
        let right#0: uint64 = right#17
        let tmp%16#0: bool = (< window_left#0 right#0)
        goto tmp%16#0 ? block@23 : block@24
    block@23: // if_body_L249
        test_cases.array.uint64.quicksort_window(arr#0, window_left#0, right#0)
        goto block@24
    block@24: // after_if_else_L248
        let tmp%17#0: bool = (< left#0 window_right#0)
        goto tmp%17#0 ? block@25 : block@26
    block@25: // if_body_L252
        test_cases.array.uint64.quicksort_window(arr#0, left#0, window_right#0)
        goto block@26
    block@26: // after_if_else_L251
        return 

subroutine test_cases.array.uint64.create_array() -> Encoded(uint64[])*:
    block@0: // L255
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L258
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L259
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L258
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L258
        return arr#0

subroutine test_cases.array.uint64.assert_last_is_zero(arr: Encoded(uint64[])*) -> void:
    block@0: // L263
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%0#0: uint64 = (- array_len%0#0 1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%0#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%1#0: bool = (== values%0#0 0u)
        (assert tmp%1#0)
        return 

subroutine test_cases.array.uint64.return_ref(arr: Encoded(uint64[])*, arr2: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L268
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 99u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 100u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        return arr#0

subroutine test_cases.array.uint64.add_x(arr: Encoded(uint64[])*, x: uint64) -> void:
    block@0: // L277
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L279
        let continue_looping%0#0: bool = (< i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L280
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L279
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L279
        return 

subroutine test_cases.array.uint64.pop_x(arr: Encoded(uint64[])*, x: uint64, expected: uint64) -> void:
    block@0: // L283
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L285
        let continue_looping%0#0: bool = (< _i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L286
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let len%0#0: uint64 = (len slot_contents%0#0)
        let sub%0#0: uint64 = (- len%0#0 8u)
        let total_length%0#0: uint64 = (len slot_contents%0#0)
        let data%0#0: bytes = (substring3 slot_contents%0#0 sub%0#0 total_length%0#0)
        let extract%0#0: bytes = (extract3 slot_contents%0#0 0u sub%0#0)
        let tmp%0#0: uint64 = (btoi data%0#0)
        store(arr#0, extract%0#0)
        let popped#0: uint64 = tmp%0#0
        let tmp%1#0: bool = (== popped#0 expected#0)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (- expected#0 1u)
        let expected#0: uint64 = tmp%2#0
        goto block@3
    block@3: // for_footer_L285
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L285
        return 

subroutine test_cases.array.uint64.append_length_and_return(arr: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L291
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob array_len%0#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%0#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        return arr#0

subroutine test_cases.array.uint64.Contract.test_array() -> void:
    block@0: // L14
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%0#0: bool = (== array_len%0#0 0u)
        (assert tmp%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%1#0: uint64 = (len slot_contents%2#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%2#0: bool = (== array_len%1#0 1u)
        (assert tmp%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%2#0: uint64 = (len slot_contents%3#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let tmp%3#0: uint64 = (- array_len%2#0 1u)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%3#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%4#0: bool = (== values%0#0 42u)
        (assert tmp%4#0)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%3#0: uint64 = (len slot_contents%5#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let tmp%5#0: bool = (== array_len%3#0 6u)
        (assert tmp%5#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%4#0: uint64 = (len slot_contents%6#0)
        let array_len%4#0: uint64 = (/ bytes_len%4#0 8u)
        let tmp%6#0: uint64 = (- array_len%4#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%6#0 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%7#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%7#0: bool = (== values%1#0 4u)
        (assert tmp%7#0)
        test_cases.array.uint64.pop_x(arr#0, 3u, 4u)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%5#0: uint64 = (len slot_contents%8#0)
        let array_len%5#0: uint64 = (/ bytes_len%5#0 8u)
        let tmp%8#0: bool = (== array_len%5#0 3u)
        (assert tmp%8#0)
        let slot_contents%9#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%6#0: uint64 = (len slot_contents%9#0)
        let array_len%6#0: uint64 = (/ bytes_len%6#0 8u)
        let tmp%9#0: uint64 = (- array_len%6#0 1u)
        let slot_contents%10#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%9#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%10#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%10#0: bool = (== values%2#0 1u)
        (assert tmp%10#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 43u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%11#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%11#0 tmp%11#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%7#0: uint64 = (len slot_contents%12#0)
        let array_len%7#0: uint64 = (/ bytes_len%7#0 8u)
        let tmp%12#0: bool = (== array_len%7#0 4u)
        (assert tmp%12#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%8#0: uint64 = (len slot_contents%13#0)
        let array_len%8#0: uint64 = (/ bytes_len%8#0 8u)
        let tmp%13#0: uint64 = (- array_len%8#0 1u)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%3#1: uint64 = (* tmp%13#0 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 slot_contents%14#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%14#0: bool = (== values%3#0 43u)
        (assert tmp%14#0)
        let slot_contents%15#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 slot_contents%15#0 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%15#0: bool = (== values%4#0 42u)
        (assert tmp%15#0)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let slot_contents%16#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%9#0: uint64 = (len slot_contents%16#0)
        let array_len%9#0: uint64 = (/ bytes_len%9#0 8u)
        let tmp%16#0: bool = (== array_len%9#0 14u)
        (assert tmp%16#0)
        let slot_contents%17#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%10#0: uint64 = (len slot_contents%17#0)
        let array_len%10#0: uint64 = (/ bytes_len%10#0 8u)
        let tmp%17#0: uint64 = (- array_len%10#0 1u)
        let slot_contents%18#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%5#1: uint64 = (* tmp%17#0 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 slot_contents%18#0 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%18#0: bool = (== values%5#0 9u)
        (assert tmp%18#0)
        let slot_contents%19#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 44u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(uint64[])%3#1: Encoded(uint64[]) = aggregate%head%2#1
        let tmp%19#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%3#1
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%19#0 tmp%19#0) // on error: max array length exceeded
        store(arr#0, concat%2#0)
        let slot_contents%20#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%11#0: uint64 = (len slot_contents%20#0)
        let array_len%11#0: uint64 = (/ bytes_len%11#0 8u)
        let tmp%20#0: bool = (== array_len%11#0 15u)
        (assert tmp%20#0)
        let slot_contents%21#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%12#0: uint64 = (len slot_contents%21#0)
        let array_len%12#0: uint64 = (/ bytes_len%12#0 8u)
        let tmp%21#0: uint64 = (- array_len%12#0 1u)
        let slot_contents%22#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%6#1: uint64 = (* tmp%21#0 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 slot_contents%22#0 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%6#0: uint64 = (btoi array_item%6#0)
        let tmp%22#0: bool = (== values%6#0 44u)
        (assert tmp%22#0)
        let tmp%23#0: Encoded(uint64[])* = test_cases.array.uint64.return_ref(arr#0, arr#0)
        let slot_contents%23#0: Encoded(uint64[]) = load(tmp%23#0)
        let aggregate%bytes_offset%7#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 slot_contents%23#0 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%7#1
        let values%7#0: uint64 = (btoi array_item%7#0)
        let tmp%24#0: uint64 = (+ values%7#0 2u)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%24#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#1
        let slot_contents%24#0: Encoded(uint64[]) = load(tmp%23#0)
        let aggregate%write_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%24#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = aggregate%updated_array%0#1
        store(tmp%23#0, updated_array%0#0)
        let slot_contents%25#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%13#0: uint64 = (len slot_contents%25#0)
        let array_len%13#0: uint64 = (/ bytes_len%13#0 8u)
        let tmp%25#0: bool = (== array_len%13#0 17u)
        (assert tmp%25#0)
        let slot_contents%26#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%9#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%9#1: bytes = (extract3 slot_contents%26#0 aggregate%bytes_offset%9#1 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%9#1
        let values%8#0: uint64 = (btoi array_item%8#0)
        let tmp%26#0: bool = (== values%8#0 44u)
        (assert tmp%26#0)
        let slot_contents%27#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%14#0: uint64 = (len slot_contents%27#0)
        let array_len%14#0: uint64 = (/ bytes_len%14#0 8u)
        let tmp%27#0: uint64 = (- array_len%14#0 2u)
        let slot_contents%28#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%10#1: uint64 = (* tmp%27#0 8u)
        let aggregate%encoded_element%10#1: bytes = (extract3 slot_contents%28#0 aggregate%bytes_offset%10#1 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%10#1
        let values%9#0: uint64 = (btoi array_item%9#0)
        let tmp%28#0: bool = (== values%9#0 99u)
        (assert tmp%28#0)
        let slot_contents%29#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%15#0: uint64 = (len slot_contents%29#0)
        let array_len%15#0: uint64 = (/ bytes_len%15#0 8u)
        let tmp%29#0: uint64 = (- array_len%15#0 1u)
        let slot_contents%30#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%11#1: uint64 = (* tmp%29#0 8u)
        let aggregate%encoded_element%11#1: bytes = (extract3 slot_contents%30#0 aggregate%bytes_offset%11#1 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%11#1
        let values%10#0: uint64 = (btoi array_item%10#0)
        let tmp%30#0: bool = (== values%10#0 100u)
        (assert tmp%30#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_extend() -> void:
    block@0: // L50
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot%1#0: Encoded(uint64[])* = new()
        store(slot%1#0, 0x)
        let arr2#0: Encoded(uint64[])* = slot%1#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr2#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr2#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%3#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%3#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr2#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(uint64[])%4#1: Encoded(uint64[]) = aggregate%head%2#1
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%4#1
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%2#0) // on error: max array length exceeded
        store(arr2#0, concat%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr2#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let concat%3#0: Encoded(uint64[]) = (concat slot_contents%4#0 slot_contents%3#0) // on error: max array length exceeded
        store(arr#0, concat%3#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%1#0: uint64 = (len slot_contents%5#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%3#0: bool = (== array_len%1#0 4u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_multiple_append() -> void:
    block@0: // L62
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%head%2#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_Encoded(uint64[])%3#1: Encoded(uint64[]) = aggregate%head%2#1
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%3#1
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%2#0) // on error: max array length exceeded
        store(arr#0, concat%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%3#0: bool = (== array_len%0#0 4u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.overhead() -> void:
    block@0: // L71
        return 

subroutine test_cases.array.uint64.Contract.test_array_too_long() -> void:
    block@0: // L75
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let array#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L78
        let continue_looping%0#0: bool = (< i#0 512u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L79
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(array#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L78
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L78
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 512u)
        (assert tmp%1#0) // array is expected length
        let slot_contents%2#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 512u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%2#0) // on error: max array length exceeded
        store(array#0, concat%1#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_copy_and_extend() -> void:
    block@0: // L84
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let array#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L87
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L88
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(array#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L87
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L87
        let slot%1#0: Encoded(uint64[])* = new()
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        store(slot%1#0, slot_contents%1#0)
        let array2#0: Encoded(uint64[])* = slot%1#0
        let slot_contents%2#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 5u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%head%1#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%as_Encoded(uint64[])%2#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%1#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#1
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%1#0) // on error: max array length exceeded
        store(array#0, concat%1#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%2#0: bool = (== array_len%0#0 6u)
        (assert tmp%2#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%1#0: uint64 = (len slot_contents%4#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%3#0: uint64 = (- array_len%1#0 1u)
        let slot_contents%5#0: Encoded(uint64[]) = load(array#0)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%3#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%5#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%4#0: bool = (== values%0#0 5u)
        (assert tmp%4#0) // expected 5
        let slot_contents%6#0: Encoded(uint64[]) = load(array2#0)
        let bytes_len%2#0: uint64 = (len slot_contents%6#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let tmp%5#0: bool = (== array_len%2#0 5u)
        (assert tmp%5#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(array2#0)
        let bytes_len%3#0: uint64 = (len slot_contents%7#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let tmp%6#0: uint64 = (- array_len%3#0 1u)
        let slot_contents%8#0: Encoded(uint64[]) = load(array2#0)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%6#0 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%8#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%7#0: bool = (== values%1#0 4u)
        (assert tmp%7#0) // expected 4
        let slot_contents%9#0: Encoded(uint64[]) = load(array2#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(array#0)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%10#0 slot_contents%9#0) // on error: max array length exceeded
        store(array#0, concat%2#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%5#0: uint64 = (len slot_contents%11#0)
        let array_len%5#0: uint64 = (/ bytes_len%5#0 8u)
        let tmp%8#0: bool = (== array_len%5#0 11u)
        (assert tmp%8#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(array2#0)
        let bytes_len%6#0: uint64 = (len slot_contents%12#0)
        let array_len%6#0: uint64 = (/ bytes_len%6#0 8u)
        let tmp%9#0: bool = (== array_len%6#0 5u)
        (assert tmp%9#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%7#0: uint64 = (len slot_contents%13#0)
        let array_len%7#0: uint64 = (/ bytes_len%7#0 8u)
        let tmp%10#0: uint64 = (- array_len%7#0 1u)
        let slot_contents%14#0: Encoded(uint64[]) = load(array#0)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%10#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%14#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%11#0: bool = (== values%2#0 4u)
        (assert tmp%11#0) // expected 4
        let slot_contents%15#0: Encoded(uint64[]) = load(array#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 slot_contents%15#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%12#0: bool = (== values%3#0 4u)
        (assert tmp%12#0) // expected 4
        let slot_contents%16#0: Encoded(uint64[]) = load(array#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 slot_contents%16#0 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%13#0: bool = (== values%4#0 5u)
        (assert tmp%13#0) // expected 4
        let slot_contents%17#0: Encoded(uint64[]) = load(array#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 slot_contents%17#0 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%14#0: bool = (== values%5#0 0u)
        (assert tmp%14#0) // expected 4
        return 

subroutine test_cases.array.uint64.Contract.test_array_evaluation_order() -> void:
    block@0: // L106
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let tmp%1#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%2#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(tmp%2#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(tmp%1#0)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 slot_contents%1#0) // on error: max array length exceeded
        store(tmp%1#0, concat%1#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%1#0: uint64 = (len slot_contents%3#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%3#0: bool = (== array_len%1#0 6u)
        (assert tmp%3#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%4#0: bool = (== values%0#0 3u)
        (assert tmp%4#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%5#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%5#0: bool = (== values%1#0 1u)
        (assert tmp%5#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%6#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%6#0: bool = (== values%2#0 2u)
        (assert tmp%6#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 slot_contents%7#0 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%7#0: bool = (== values%3#0 3u)
        (assert tmp%7#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 slot_contents%8#0 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%8#0: bool = (== values%4#0 1u)
        (assert tmp%8#0)
        let slot_contents%9#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 slot_contents%9#0 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%9#0: bool = (== values%5#0 2u)
        (assert tmp%9#0)
        let tmp%10#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%10#0)
        let bytes_len%2#0: uint64 = (len slot_contents%10#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let tmp%11#0: uint64 = (- array_len%2#0 1u)
        let slot_contents%11#0: Encoded(uint64[]) = load(tmp%10#0)
        let aggregate%bytes_offset%6#1: uint64 = (* tmp%11#0 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 slot_contents%11#0 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%6#0: uint64 = (btoi array_item%6#0)
        let tmp%12#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(tmp%12#0)
        let aggregate%bytes_offset%7#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 slot_contents%12#0 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%7#1
        let values%7#0: uint64 = (btoi array_item%7#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob values%6#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%0#1: uint64 = (* values%7#0 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%13#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = aggregate%updated_array%0#1
        store(arr#0, updated_array%0#0)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%3#0: uint64 = (len slot_contents%14#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let tmp%13#0: bool = (== array_len%3#0 8u)
        (assert tmp%13#0)
        let slot_contents%15#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%9#1: uint64 = (* 6u 8u)
        let aggregate%encoded_element%9#1: bytes = (extract3 slot_contents%15#0 aggregate%bytes_offset%9#1 8u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint64) = aggregate%encoded_element%9#1
        let values%8#0: uint64 = (btoi array_item%8#0)
        let tmp%14#0: bool = (== values%8#0 6u)
        (assert tmp%14#0)
        let slot_contents%16#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%10#1: uint64 = (* 7u 8u)
        let aggregate%encoded_element%10#1: bytes = (extract3 slot_contents%16#0 aggregate%bytes_offset%10#1 8u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint64) = aggregate%encoded_element%10#1
        let values%9#0: uint64 = (btoi array_item%9#0)
        let tmp%15#0: bool = (== values%9#0 7u)
        (assert tmp%15#0)
        let slot_contents%17#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%11#1: uint64 = (* 3u 8u)
        let aggregate%encoded_element%11#1: bytes = (extract3 slot_contents%17#0 aggregate%bytes_offset%11#1 8u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint64) = aggregate%encoded_element%11#1
        let values%10#0: uint64 = (btoi array_item%10#0)
        let tmp%16#0: bool = (== values%10#0 6u)
        (assert tmp%16#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage() -> void:
    block@0: // L125
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let update_assignment_current_base_value%0#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let slot_contents%1#0: Encoded(uint64[]) = load(update_assignment_current_base_value%0#0)
        let aggregate%write_offset%0#1: uint64 = (* 0u 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%1#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = aggregate%updated_array%0#1
        store(update_assignment_current_base_value%0#0, updated_array%0#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 2u)
        (assert tmp%1#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 42u)
        (assert tmp%2#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* 1u 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.test_allocations(num: uint64) -> void:
    block@0: // L134
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L136
        let continue_looping%0#0: bool = (< _i#0 num#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L137
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let alloc_test#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        goto block@3
    block@3: // for_footer_L136
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L136
        return 

subroutine test_cases.array.uint64.Contract.test_iteration() -> void:
    block@0: // L140
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let arr#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let val#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L143
        let continue_looping%0#0: bool = (< val#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L144
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob val#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L143
        let val#0: uint64 = (+ val#0 1u)
        goto block@1
    block@4: // after_for_L143
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 5u)
        (assert tmp%1#0) // expected array of length 5
        let last#0: uint64 = 0u
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%1#0: uint64 = (len slot_contents%2#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L149
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array_len%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L150
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let value#0: uint64 = values%0#0
        let tmp%2#0: bool = (>= value#0 last#0)
        (assert tmp%2#0) // array is not sorted
        let last#0: uint64 = value#0
        goto block@7
    block@7: // for_footer_L149
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@5
    block@8: // after_for_L149
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%2#0: uint64 = (len slot_contents%4#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L154
        let continue_looping%2#0: bool = (< item_index_internal%1#0 array_len%2#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L155
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* item_index_internal%1#0 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 slot_contents%5#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let value#0: uint64 = values%1#0
        let idx#0: uint64 = item_index_internal%1#0
        let tmp%3#0: bool = (== value#0 idx#0)
        (assert tmp%3#0) // incorrect array value
        goto block@11
    block@11: // for_footer_L154
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@9
    block@12: // after_for_L154
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%3#0: uint64 = (len slot_contents%6#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let reverse_index_internal%2#0: uint64 = array_len%3#0
        goto block@13
    block@13: // for_header_L158
        let continue_looping%3#0: bool = (> reverse_index_internal%2#0 0u)
        goto continue_looping%3#0 ? block@14 : block@16
    block@14: // for_body_L159
        let reverse_index_internal%2#0: uint64 = (- reverse_index_internal%2#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* reverse_index_internal%2#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%7#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let value#0: uint64 = values%2#0
        let tmp%4#0: bool = (<= value#0 last#0)
        (assert tmp%4#0) // array is not sorted
        let last#0: uint64 = value#0
        goto block@15
    block@15: // for_footer_L158
        goto block@13
    block@16: // after_for_L158
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%as_Encoded(len+uint64[])%0#1: Encoded(len+uint64[]) = aggregate%len_u16%0#1
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#1
        let arc4_arr#0: Encoded(len+uint64[]) = encoded_array%1#0
        let slot%1#0: Encoded(uint64[])* = new()
        store(slot%1#0, 0x)
        let native_arr#0: Encoded(uint64[])* = slot%1#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L164
        let continue_looping%4#0: bool = (< i#0 5u)
        goto continue_looping%4#0 ? block@18 : block@20
    block@18: // for_body_L165
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let aggregate%head%1#1: bytes = (concat 0x tmp%5#0)
        let aggregate%as_Encoded(uint64[])%3#1: Encoded(uint64[]) = aggregate%head%1#1
        let tmp%6#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%3#1
        let concat%1#0: Encoded(len+uint64[]) = (concat arc4_arr#0 tmp%6#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arc4_arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arc4_arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let tmp%7#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#1
        let slot_contents%8#0: Encoded(uint64[]) = load(native_arr#0)
        let aggregate%head%2#1: bytes = (concat 0x tmp%7#0)
        let aggregate%as_Encoded(uint64[])%4#1: Encoded(uint64[]) = aggregate%head%2#1
        let tmp%8#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%4#1
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%8#0 tmp%8#0) // on error: max array length exceeded
        store(native_arr#0, concat%2#0)
        goto block@19
    block@19: // for_footer_L164
        let i#0: uint64 = (+ i#0 1u)
        goto block@17
    block@20: // after_for_L164
        let slot_contents%9#0: Encoded(uint64[]) = load(native_arr#0)
        let concat%3#0: Encoded(len+uint64[]) = (concat arc4_arr#0 slot_contents%9#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%3#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%3#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let combined_arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        let array_length%0#0: uint64 = (extract_uint16 combined_arr#0 0u)
        let tmp%9#0: bool = (== array_length%0#0 10u)
        (assert tmp%9#0)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) combined_arr#0)
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: Encoded(uint64) = array_item%3#0
        let reinterpret_biguint%0#0: biguint = values%3#0
        let tmp%10#0: bool = (b== reinterpret_biguint%0#0 0x0000000000000000)
        (assert tmp%10#0)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) combined_arr#0)
        let aggregate%bytes_offset%4#1: uint64 = (* 4u 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: Encoded(uint64) = array_item%4#0
        let reinterpret_biguint%2#0: biguint = values%4#0
        let tmp%11#0: bool = (b== reinterpret_biguint%2#0 0x0000000000000004)
        (assert tmp%11#0)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) combined_arr#0)
        let aggregate%bytes_offset%5#1: uint64 = (* 5u 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%5#0: Encoded(uint64) = array_item%5#0
        let reinterpret_biguint%4#0: biguint = values%5#0
        let tmp%12#0: bool = (b== reinterpret_biguint%4#0 0x0000000000000000)
        (assert tmp%12#0)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) combined_arr#0)
        let aggregate%bytes_offset%6#1: uint64 = (* 9u 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%6#0: Encoded(uint64) = array_item%6#0
        let reinterpret_biguint%6#0: biguint = values%6#0
        let tmp%13#0: bool = (b== reinterpret_biguint%6#0 0x0000000000000004)
        (assert tmp%13#0)
        return 

subroutine test_cases.array.uint64.Contract.test_quicksort() -> void:
    block@0: // L174
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, 0x)
        let rnd#0: Encoded(uint64[])* = slot%0#0
        let tmp%0#0: account = (txn Sender)
        let bytes_length%0#0: uint64 = (len tmp%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L178
        let continue_looping%0#0: bool = (< item_index_internal%0#0 bytes_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L179
        let b#0: bytes = (extract3 tmp%0#0 item_index_internal%0#0 1u)
        let tmp%1#0: uint64 = (btoi b#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%head%0#1: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%as_Encoded(uint64[])%1#1: Encoded(uint64[]) = aggregate%head%0#1
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#1
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%2#0) // on error: max array length exceeded
        store(rnd#0, concat%0#0)
        goto block@3
    block@3: // for_footer_L178
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L178
        let slot_contents%1#0: Encoded(uint64[]) = load(rnd#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%3#0: bool = (== array_len%0#0 32u)
        (assert tmp%3#0) // expected array of length 32
        let slot_contents%2#0: Encoded(uint64[]) = load(rnd#0)
        let bytes_len%1#0: uint64 = (len slot_contents%2#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%4#0: uint64 = (- array_len%1#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%4#0)
        let last#0: uint64 = 0u
        let slot_contents%3#0: Encoded(uint64[]) = load(rnd#0)
        let bytes_len%2#0: uint64 = (len slot_contents%3#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L187
        let continue_looping%1#0: bool = (< item_index_internal%1#0 array_len%2#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L188
        let slot_contents%4#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%1#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let value#0: uint64 = values%0#0
        let tmp%5#0: bool = (>= value#0 last#0)
        (assert tmp%5#0) // array is not sorted
        let last#0: uint64 = value#0
        goto block@7
    block@7: // for_footer_L187
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@8: // after_for_L187
        return 

subroutine test_cases.array.uint64.Contract.test_unobserved_write() -> void:
    block@0: // L191
        let tmp%0#0: Encoded(uint64[])* = test_cases.array.uint64.create_array()
        let arr#0: Encoded(uint64[])* = tmp%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: uint64 = (- array_len%0#0 1u)
        let last#0: uint64 = tmp%1#0
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%0#1: uint64 = (* last#0 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%1#0 aggregate%write_offset%0#1 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = aggregate%updated_array%0#1
        store(arr#0, updated_array%0#0)
        test_cases.array.uint64.assert_last_is_zero(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%1#1: uint64 = (* last#0 8u)
        let aggregate%updated_array%1#1: bytes = (replace3 slot_contents%2#0 aggregate%write_offset%1#1 encoded_value%1#0)
        let updated_array%1#0: Encoded(uint64[]) = aggregate%updated_array%1#1
        store(arr#0, updated_array%1#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* last#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        return 