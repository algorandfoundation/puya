slot_allocation(dynamic, reserved=[])
main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L93
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@38
    block@2: // abi_routing_L93
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L93
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L93
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@32
    block@5: // call_NoOp_L93
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_uint64_array()void" => block@6, method "test_biguint_array()void" => block@7, method "test_bool_array(uint64)void" => block@8, method "test_fixed_size_tuple_array()void" => block@9, method "test_fixed_size_named_tuple_array()void" => block@10, method "test_dynamic_sized_tuple_array()void" => block@11, method "test_dynamic_sized_named_tuple_array()void" => block@12, method "test_implicit_conversion_log(uint64[])void" => block@13, method "test_implicit_conversion_emit(uint64[])void" => block@14, method "test_nested_array(uint64,uint64[][])uint64[]" => block@15, method "test_bit_packed_tuples()void" => block@16, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@17, method "test_uint64_return(uint64)uint64[]" => block@18, method "test_bool_return(uint64)bool[]" => block@19, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@20, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@21, method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]" => block@22, method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]" => block@23, method "test_concat_with_native_tuple((uint64,uint64))uint64[]" => block@24, method "test_dynamic_concat_with_arc4_tuple((string,string))string[]" => block@25, method "test_dynamic_concat_with_native_tuple((string,string))string[]" => block@26, method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]" => block@27, method "test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]" => block@28, method "test_imm_fixed_arr()(uint64,uint64)[3]" => block@29, * => block@30}
    block@6: // test_uint64_array_route_L94
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array[routing]()
        goto block@31
    block@7: // test_biguint_array_route_L130
        test_cases.array.immutable.ImmutableArrayContract.test_biguint_array[routing]()
        goto block@31
    block@8: // test_bool_array_route_L155
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array[routing]()
        goto block@31
    block@9: // test_fixed_size_tuple_array_route_L179
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array[routing]()
        goto block@31
    block@10: // test_fixed_size_named_tuple_array_route_L197
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array[routing]()
        goto block@31
    block@11: // test_dynamic_sized_tuple_array_route_L212
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array[routing]()
        goto block@31
    block@12: // test_dynamic_sized_named_tuple_array_route_L231
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array[routing]()
        goto block@31
    block@13: // test_implicit_conversion_log_route_L250
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log[routing]()
        goto block@31
    block@14: // test_implicit_conversion_emit_route_L254
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit[routing]()
        goto block@31
    block@15: // test_nested_array_route_L258
        test_cases.array.immutable.ImmutableArrayContract.test_nested_array[routing]()
        goto block@31
    block@16: // test_bit_packed_tuples_route_L276
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples[routing]()
        goto block@31
    block@17: // sum_uints_and_lengths_and_trues_route_L341
        test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues[routing]()
        goto block@31
    block@18: // test_uint64_return_route_L368
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_return[routing]()
        goto block@31
    block@19: // test_bool_return_route_L375
        test_cases.array.immutable.ImmutableArrayContract.test_bool_return[routing]()
        goto block@31
    block@20: // test_tuple_return_route_L382
        test_cases.array.immutable.ImmutableArrayContract.test_tuple_return[routing]()
        goto block@31
    block@21: // test_dynamic_tuple_return_route_L389
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return[routing]()
        goto block@31
    block@22: // test_convert_to_array_and_back_route_L396
        test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back[routing]()
        goto block@31
    block@23: // test_concat_with_arc4_tuple_route_L406
        test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple[routing]()
        goto block@31
    block@24: // test_concat_with_native_tuple_route_L414
        test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple[routing]()
        goto block@31
    block@25: // test_dynamic_concat_with_arc4_tuple_route_L422
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple[routing]()
        goto block@31
    block@26: // test_dynamic_concat_with_native_tuple_route_L430
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple[routing]()
        goto block@31
    block@27: // test_concat_immutable_dynamic_route_L438
        test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic[routing]()
        goto block@31
    block@28: // test_immutable_arc4_route_L444
        test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4[routing]()
        goto block@31
    block@29: // test_imm_fixed_arr_route_L450
        test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr[routing]()
        goto block@31
    block@30: // switch_case_default_L93
        goto block@31
    block@31: // switch_case_next_L93
        goto block@35
    block@32: // create_NoOp_L93
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@33}
    block@33: // switch_case_default_L93
        goto block@34
    block@34: // switch_case_next_L93
        goto block@35
    block@35: // after_if_else_L93
        goto block@36
    block@36: // switch_case_next_L93
        goto block@37
    block@37: // switch_case_next_L93
        goto block@42
    block@38: // bare_routing_L93
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@39, * => block@40}
    block@39: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@44
    block@44: // L1
        goto block@45
    block@45: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create_L1
        exit 1u
    block@40: // switch_case_default_L93
        goto block@41
    block@41: // switch_case_next_L93
        goto block@42
    block@42: // after_if_else_L93
        exit 0u
    block@43: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bool, bytes>:
    block@0: // L25
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ length_minus_1#0 16u)
        let popped_location#0: uint64 = tmp%5#0
        let tmp%6#0: bool = (getbit result#0 popped_location#0)
        let popped#0: bool = tmp%6#0
        let tmp%7#0: bytes = (setbit result#0 popped_location#0 0u)
        let result#0: bytes = tmp%7#0
        let tmp%8#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#0: uint64 = (/ tmp%8#0 8u)
        let tmp%10#0: uint64 = (+ 2u tmp%9#0)
        let tmp%11#0: bytes = (substring3 result#0 0u tmp%10#0)
        let result#0: bytes = tmp%11#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let tmp%4#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (len result#0)
        let tmp%6#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let item_location#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let popped#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (substring3 result#0 0u item_location#0)
        let result#0: bytes = tmp%8#0
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* length_minus_1#0 2u)
        let popped_header_offset#0: uint64 = tmp%2#0
        let tmp%3#0: bytes = ((extract 2 0) array#0)
        let head_and_tail#0: bytes = tmp%3#0
        let tmp%4#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let popped_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let tmp%6#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let popped#0: bytes = tmp%6#0
        let new_head#0: bytes = 0x
        let tmp%7#0: uint64 = (* length_minus_1#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let continue_looping%0#0: bool = (< head_offset#0 tmp%7#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let tmp%8#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- item_offset#0 2u)
        let item_offset#0: uint64 = tmp%9#0
        let tmp%10#0: bytes = (itob item_offset#0)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let tmp%12#0: bytes = (concat new_head#0 tmp%11#0)
        let new_head#0: bytes = tmp%12#0
        goto block@3
    block@3: // for_footer_L110
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#0)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let tmp%18#0: bytes = (concat tmp%15#0 tmp%17#0)
        let updated#0: bytes = tmp%18#0
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = (itob new_array_length#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let new_array_length_b#0: bytes = tmp%3#0
        let tmp%4#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let result#0: bytes = tmp%4#0
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let tmp%6#0: uint64 = (/ tmp%5#0 8u)
        let current_bytes#0: uint64 = tmp%6#0
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let tmp%8#0: uint64 = (/ tmp%7#0 8u)
        let required_bytes#0: uint64 = tmp%8#0
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let tmp%12#0: bytes = (concat result#0 tmp%11#0)
        let result#0: bytes = tmp%12#0
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let tmp%13#0: uint64 = (+ array_length#0 16u)
        let write_offset#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = (+ write_offset#0 new_items_count#0)
        let write_end#0: uint64 = tmp%14#0
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: bool = (getbit new_items_bytes#0 read_offset#0)
        let tmp%17#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let result#0: bytes = tmp%17#0
        let tmp%18#0: uint64 = (+ write_offset#0 1u)
        let write_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ read_offset#0 read_step#0)
        let read_offset#0: uint64 = tmp%19#0
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let tmp%0#0: uint64 = (extract_uint16 array#0 0u)
        let array_length#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ array_length#0 new_items_count#0)
        let new_length#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let tmp%3#0: uint64 = (+ tmp%2#0 2u)
        let header_end#0: uint64 = tmp%3#0
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let tmp%0#0: uint64 = (* new_items_count#0 2u)
        let item_offset_adjustment#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat new_head#0 tmp%5#0)
        let new_head#0: bytes = tmp%6#0
        goto block@3
    block@3: // for_footer_L203
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let tmp%7#0: uint64 = (len array_head_and_tail#0)
        let item_offset_adjustment#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 tmp%8#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let tmp%9#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = (concat new_head#0 tmp%12#0)
        let new_head#0: bytes = tmp%13#0
        goto block@7
    block@7: // for_footer_L208
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#0)
        let tmp%18#0: uint64 = (* array_items_count#0 2u)
        let tmp%19#0: uint64 = (len array_head_and_tail#0)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%18#0 tmp%19#0)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%22#0: uint64 = (* new_items_count#0 2u)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 tmp%22#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let continue_looping%0#0: bool = (< head_offset#0 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#0 head_offset#0 tail_offset_bytes#0)
        let array_head_and_tail#0: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#0 tail_offset#0)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#0 tmp%10#0)
        let tail_offset#0: uint64 = tmp%11#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#0

subroutine test_cases.array.immutable.sum_imm_fixed(arr: Encoded((uint64,uint64)[3])) -> uint64:
    block@0: // L479
        let total#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L482
        let continue_looping%0#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L483
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 arr#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let item#0: Encoded(uint64,uint64) = array_item%0#0
        let aggregate%extract%0#0: bytes = (extract3 item#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ total#0 values%0#0)
        let total#0: uint64 = tmp%0#0
        let aggregate%extract%1#0: bytes = (extract3 item#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%1#0
        let values%1#0: uint64 = (btoi tuple_item%1#0)
        let tmp%1#0: uint64 = (+ total#0 values%1#0)
        let total#0: uint64 = tmp%1#0
        goto block@3
    block@3: // for_footer_L482
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L482
        return total#0

subroutine test_cases.array.immutable.times(n: uint64) -> string:
    block@0: // L488
        let result#0: string = ""
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L491
        let continue_looping%0#0: bool = (< _i#0 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L492
        let tmp%0#0: bytes = (concat result#0 " ")
        let result#0: string = tmp%0#0
        goto block@3
    block@3: // for_footer_L491
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L491
        return result#0

subroutine test_cases.array.immutable.add_x(arr: Encoded(len+uint64[]), x: uint64) -> Encoded(len+uint64[]):
    block@0: // L496
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L498
        let continue_looping%0#0: bool = (< i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L499
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@3
    block@3: // for_footer_L498
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L498
        return arr#0

subroutine test_cases.array.immutable.pop_x(arr: Encoded(len+uint64[]), x: uint64) -> Encoded(len+uint64[]):
    block@0: // L503
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L505
        let continue_looping%0#0: bool = (< _i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L506
        let (tmp%0#0: bytes, tmp%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#0, 8u)
        let arr#0: Encoded(len+uint64[]) = tmp%1#0
        goto block@3
    block@3: // for_footer_L505
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L505
        return arr#0

subroutine test_cases.array.immutable.add_xb(arr: Encoded(len+uint512[]), x: uint64) -> Encoded(len+uint512[]):
    block@0: // L510
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L512
        let continue_looping%0#0: bool = (< i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L513
        let tmp%0#0: biguint = (itob i#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%0#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%0#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%0#0)
        let aggregate%as_Encoded(uint512[])%0#0: Encoded(uint512[]) = aggregate%head%0#0
        let tmp%1#0: Encoded(uint512[]) = aggregate%as_Encoded(uint512[])%0#0
        let concat%0#0: Encoded(len+uint512[]) = (concat arr#0 tmp%1#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = replace%0#0
        let arr#0: Encoded(len+uint512[]) = as_Encoded(len+uint512[])%0#0
        goto block@3
    block@3: // for_footer_L512
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L512
        return arr#0

subroutine test_cases.array.immutable.sum_arr(arr: Encoded(len+uint64[])) -> uint64:
    block@0: // L517
        let total#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L520
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L521
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let i#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ total#0 i#0)
        let total#0: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L520
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L520
        return total#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array[routing]() -> void:
    block@0: // L94
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_biguint_array[routing]() -> void:
    block@0: // L130
        test_cases.array.immutable.ImmutableArrayContract.test_biguint_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array[routing]() -> void:
    block@0: // L155
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%0#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array[routing]() -> void:
    block@0: // L179
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array[routing]() -> void:
    block@0: // L197
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array[routing]() -> void:
    block@0: // L212
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array[routing]() -> void:
    block@0: // L231
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log[routing]() -> void:
    block@0: // L250
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(reinterpret_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit[routing]() -> void:
    block@0: // L254
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(reinterpret_Encoded(len+uint64[])%0#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array[routing]() -> void:
    block@0: // L258
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 2)
        let tmp%1#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_nested_array(tmp%0#0, reinterpret_Encoded(len+(len+uint64[])[])%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples[routing]() -> void:
    block@0: // L276
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues[routing]() -> void:
    block@0: // L341
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 4)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: uint64, tmp%3#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(reinterpret_Encoded(len+uint64[])%0#0, reinterpret_Encoded(len+bool1[])%0#0, reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0, reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64,uint64,uint64)%0#0: Encoded(uint64,uint64,uint64,uint64) = aggregate%head%3#0
        let tmp%4#0: Encoded(uint64,uint64,uint64,uint64) = aggregate%as_Encoded(uint64,uint64,uint64,uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return[routing]() -> void:
    block@0: // L368
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return[routing]() -> void:
    block@0: // L375
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(len+bool1[]) = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return[routing]() -> void:
    block@0: // L382
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return[routing]() -> void:
    block@0: // L389
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(len+(uint64,(len+utf8[]))[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back[routing]() -> void:
    block@0: // L396
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0, tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple[routing]() -> void:
    block@0: // L406
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple[routing]() -> void:
    block@0: // L414
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 0u 8u)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 8u 8u)
        let tmp%0#0: Encoded(uint64) = aggregate%extract%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%extract%1#0
        let tmp%2#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(tmp%0#0, tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple[routing]() -> void:
    block@0: // L422
        let reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%0#0: Encoded(len+(len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple[routing]() -> void:
    block@0: // L430
        let reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 0u)
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 2u)
        let aggregate%substring3%0#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 aggregate%extract_uint16%0#0 aggregate%extract_uint16%1#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 2u)
        let aggregate%len%0#0: uint64 = (len reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let aggregate%substring3%1#0: bytes = (substring3 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 aggregate%extract_uint16%2#0 aggregate%len%0#0)
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%substring3%0#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%substring3%1#0
        let tmp%2#0: Encoded(len+(len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(tmp%0#0, tmp%1#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic[routing]() -> void:
    block@0: // L438
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%1#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 2)
        let tmp%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0, reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%1#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4[routing]() -> void:
    block@0: // L444
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%0#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr[routing]() -> void:
    block@0: // L450
        let tmp%0#0: Encoded((uint64,uint64)[3]) = test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr()
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L94
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%2#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%2#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%1#0
        let tmp%4#0: bool = (== tmp%3#0 1u)
        (assert tmp%4#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%2#0
        let tmp%6#0: uint64 = (- tmp%5#0 1u)
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%6#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%7#0: bool = (== values%0#0 42u)
        (assert tmp%7#0)
        let tmp%8#0: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(arr#0, 5u)
        let arr#0: Encoded(len+uint64[]) = tmp%8#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%9#0: uint64 = aggregate%array_length%3#0
        let tmp%10#0: bool = (== tmp%9#0 6u)
        (assert tmp%10#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%11#0: uint64 = aggregate%array_length%4#0
        let tmp%12#0: uint64 = (- tmp%11#0 1u)
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%12#0 8u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#0
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%13#0: bool = (== values%1#0 4u)
        (assert tmp%13#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 43u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64[])%1#0: Encoded(uint64[]) = aggregate%head%1#0
        let tmp%14#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#0
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#0 tmp%14#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%15#0: uint64 = aggregate%array_length%5#0
        let tmp%16#0: bool = (== tmp%15#0 7u)
        (assert tmp%16#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%17#0: uint64 = aggregate%array_length%6#0
        let tmp%18#0: uint64 = (- tmp%17#0 1u)
        let aggregate%total_length%2#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 arr#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%18#0 8u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#0
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%19#0: bool = (== values%2#0 43u)
        (assert tmp%19#0)
        let aggregate%total_length%3#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 arr#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#0
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%20#0: bool = (== values%3#0 42u)
        (assert tmp%20#0)
        let tmp%21#0: Encoded(len+uint64[]) = test_cases.array.immutable.pop_x(arr#0, 3u)
        let arr#0: Encoded(len+uint64[]) = tmp%21#0
        let aggregate%array_length%7#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%22#0: uint64 = aggregate%array_length%7#0
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%24#0: uint64 = aggregate%array_length%8#0
        let tmp%25#0: uint64 = (- tmp%24#0 1u)
        let aggregate%total_length%4#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 arr#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* tmp%25#0 8u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#0
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%26#0: bool = (== values%4#0 2u)
        (assert tmp%26#0)
        let tmp%27#0: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(arr#0, 10u)
        let arr#0: Encoded(len+uint64[]) = tmp%27#0
        let aggregate%array_length%9#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%28#0: uint64 = aggregate%array_length%9#0
        let tmp%29#0: bool = (== tmp%28#0 14u)
        (assert tmp%29#0)
        let aggregate%array_length%10#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%30#0: uint64 = aggregate%array_length%10#0
        let tmp%31#0: uint64 = (- tmp%30#0 1u)
        let aggregate%total_length%5#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 arr#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* tmp%31#0 8u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#0
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%32#0: bool = (== values%5#0 9u)
        (assert tmp%32#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 44u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint64[])%2#0: Encoded(uint64[]) = aggregate%head%2#0
        let tmp%33#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%2#0
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#0 tmp%33#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 arr#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = replace%2#0
        let arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%2#0
        let aggregate%array_length%11#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%34#0: uint64 = aggregate%array_length%11#0
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let aggregate%array_length%12#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%36#0: uint64 = aggregate%array_length%12#0
        let tmp%37#0: uint64 = (- tmp%36#0 1u)
        let aggregate%total_length%6#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%6#0: bytes = (substring3 arr#0 2u aggregate%total_length%6#0)
        let aggregate%bytes_offset%6#0: uint64 = (* tmp%37#0 8u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%6#0 aggregate%bytes_offset%6#0 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#0
        let values%6#0: uint64 = (btoi array_item%6#0)
        let tmp%38#0: bool = (== values%6#0 44u)
        (assert tmp%38#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 23u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#0
        let aggregate%write_offset%0#0: uint64 = (* 2u 8u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 arr#0 aggregate%write_offset_with_length_header%0#0 encoded_value%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(len+uint64[]) = aggregate%updated_array%0#0
        let arr#0: Encoded(len+uint64[]) = updated_array%0#0
        let aggregate%array_length%13#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%39#0: uint64 = aggregate%array_length%13#0
        let tmp%40#0: bool = (== tmp%39#0 15u)
        (assert tmp%40#0)
        let aggregate%total_length%8#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%8#0: bytes = (substring3 arr#0 2u aggregate%total_length%8#0)
        let aggregate%bytes_offset%8#0: uint64 = (* 2u 8u)
        let aggregate%encoded_element%8#0: bytes = (extract3 aggregate%array_trimmed%8#0 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%8#0
        let values%7#0: uint64 = (btoi array_item%7#0)
        let tmp%41#0: bool = (== values%7#0 23u)
        (assert tmp%41#0)
        (app_global_put "a" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_biguint_array() -> void:
    block@0: // L130
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint512[]) = aggregate%as_Encoded(len+uint512[])%0#0
        let arr#0: Encoded(len+uint512[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: uint64 = (- tmp%2#0 1u)
        let tmp%4#0: biguint = (itob tmp%3#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%4#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%4#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%0#0)
        let aggregate%as_Encoded(uint512[])%0#0: Encoded(uint512[]) = aggregate%head%0#0
        let tmp%5#0: Encoded(uint512[]) = aggregate%as_Encoded(uint512[])%0#0
        let concat%0#0: Encoded(len+uint512[]) = (concat arr#0 tmp%5#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint512[])%0#0: Encoded(len+uint512[]) = replace%0#0
        let arr#0: Encoded(len+uint512[]) = as_Encoded(len+uint512[])%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%6#0: uint64 = aggregate%array_length%1#0
        let tmp%7#0: bool = (== tmp%6#0 1u)
        (assert tmp%7#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%8#0: uint64 = aggregate%array_length%2#0
        let tmp%9#0: uint64 = (- tmp%8#0 1u)
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%9#0 64u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 64u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint512) = aggregate%encoded_element%0#0
        let values%0#0: biguint = array_item%0#0
        let tmp%10#0: bool = (b== values%0#0 0b)
        (assert tmp%10#0)
        let tmp%11#0: Encoded(len+uint512[]) = test_cases.array.immutable.add_xb(arr#0, 5u)
        let arr#0: Encoded(len+uint512[]) = tmp%11#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%12#0: uint64 = aggregate%array_length%3#0
        let tmp%13#0: bool = (== tmp%12#0 6u)
        (assert tmp%13#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%14#0: uint64 = aggregate%array_length%4#0
        let tmp%15#0: uint64 = (- tmp%14#0 1u)
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%15#0 64u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 64u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint512) = aggregate%encoded_element%1#0
        let values%1#0: biguint = array_item%1#0
        let tmp%16#0: bool = (b== values%1#0 4b)
        (assert tmp%16#0)
        let tmp%17#0: uint64 = (txn NumAppArgs)
        let tmp%18#0: biguint = (itob tmp%17#0)
        let tmp%19#0: biguint = (b- 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b tmp%18#0)
        let aggregate%value_len%1#0: uint64 = (len tmp%19#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%19#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%1#0)
        let aggregate%as_Encoded(uint512[])%1#0: Encoded(uint512[]) = aggregate%head%1#0
        let tmp%20#0: Encoded(uint512[]) = aggregate%as_Encoded(uint512[])%1#0
        let concat%1#0: Encoded(len+uint512[]) = (concat arr#0 tmp%20#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint512[])%1#0: Encoded(len+uint512[]) = replace%1#0
        let arr#0: Encoded(len+uint512[]) = as_Encoded(len+uint512[])%1#0
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%21#0: uint64 = aggregate%array_length%5#0
        let tmp%22#0: bool = (== tmp%21#0 7u)
        (assert tmp%22#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%23#0: uint64 = aggregate%array_length%6#0
        let tmp%24#0: uint64 = (- tmp%23#0 1u)
        let aggregate%total_length%2#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 arr#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* tmp%24#0 64u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = aggregate%encoded_element%2#0
        let values%2#0: biguint = array_item%2#0
        let tmp%25#0: bool = (b== values%2#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084094b)
        (assert tmp%25#0)
        let aggregate%total_length%3#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 arr#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 64u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 64u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint512) = aggregate%encoded_element%3#0
        let values%3#0: biguint = array_item%3#0
        let tmp%26#0: bool = (b== values%3#0 0b)
        (assert tmp%26#0)
        let aggregate%value_len%2#0: uint64 = (len 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint512)%2#0)
        let aggregate%as_Encoded(uint512[])%2#0: Encoded(uint512[]) = aggregate%head%2#0
        let tmp%27#0: Encoded(uint512[]) = aggregate%as_Encoded(uint512[])%2#0
        let concat%2#0: Encoded(len+uint512[]) = (concat arr#0 tmp%27#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 arr#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+uint512[])%2#0: Encoded(len+uint512[]) = replace%2#0
        let arr#0: Encoded(len+uint512[]) = as_Encoded(len+uint512[])%2#0
        let aggregate%array_length%7#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%28#0: uint64 = aggregate%array_length%7#0
        let tmp%29#0: bool = (== tmp%28#0 8u)
        (assert tmp%29#0)
        let aggregate%array_length%8#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%30#0: uint64 = aggregate%array_length%8#0
        let tmp%31#0: uint64 = (- tmp%30#0 1u)
        let aggregate%total_length%4#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%4#0: bytes = (substring3 arr#0 2u aggregate%total_length%4#0)
        let aggregate%bytes_offset%4#0: uint64 = (* tmp%31#0 64u)
        let aggregate%encoded_element%4#0: bytes = (extract3 aggregate%array_trimmed%4#0 aggregate%bytes_offset%4#0 64u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint512) = aggregate%encoded_element%4#0
        let values%4#0: biguint = array_item%4#0
        let tmp%32#0: bool = (b== values%4#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        (assert tmp%32#0)
        let aggregate%total_length%5#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%5#0: bytes = (substring3 arr#0 2u aggregate%total_length%5#0)
        let aggregate%bytes_offset%5#0: uint64 = (* 0u 64u)
        let aggregate%encoded_element%5#0: bytes = (extract3 aggregate%array_trimmed%5#0 aggregate%bytes_offset%5#0 64u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint512) = aggregate%encoded_element%5#0
        let values%5#0: biguint = array_item%5#0
        let tmp%33#0: bool = (b== values%5#0 0b)
        (assert tmp%33#0)
        (box_del 0x62696775696e74)
        (box_put 0x62696775696e74 arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L155
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let arr#0: Encoded(len+bool1[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L160
        let continue_looping%0#0: bool = (< i#0 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L161
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: bool = (== i#0 tmp%2#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(bool8)%0#0)
        let aggregate%as_Encoded(bool8[])%0#0: Encoded(bool8[]) = aggregate%head%0#0
        let tmp%4#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#0
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#0, tmp%4#0, 1u, 8u)
        let arr#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        goto block@3
    block@3: // for_footer_L160
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L160
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%1#0
        let tmp%6#0: bool = (== tmp%5#0 length#0)
        (assert tmp%6#0)
        let tmp%7#0: bool = (> length#0 0u)
        goto tmp%7#0 ? block@5 : block@6
    block@5: // if_body_L166
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%2#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%add%0#0: uint64 = (+ 0u 16u)
        let aggregate%get_bit%0#0: bool = (getbit arr#0 aggregate%add%0#0)
        let array_item%0#0: bool = aggregate%get_bit%0#0
        let values%0#0: bool = array_item%0#0
        let tmp%8#0: bool = (! values%0#0)
        (assert tmp%8#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L165
        let tmp%9#0: bool = (> length#0 1u)
        goto tmp%9#0 ? block@7 : block@8
    block@7: // if_body_L168
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%lt%1#0: bool = (< 1u aggregate%array_length%3#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%add%1#0: uint64 = (+ 1u 16u)
        let aggregate%get_bit%1#0: bool = (getbit arr#0 aggregate%add%1#0)
        let array_item%1#0: bool = aggregate%get_bit%1#0
        let values%1#0: bool = array_item%1#0
        let tmp%10#0: bool = (! values%1#0)
        (assert tmp%10#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L167
        let tmp%11#0: bool = (> length#0 2u)
        goto tmp%11#0 ? block@9 : block@10
    block@9: // if_body_L170
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%lt%2#0: bool = (< 2u aggregate%array_length%4#0)
        (assert aggregate%lt%2#0) // index access is out of bounds
        let aggregate%add%2#0: uint64 = (+ 2u 16u)
        let aggregate%get_bit%2#0: bool = (getbit arr#0 aggregate%add%2#0)
        let array_item%2#0: bool = aggregate%get_bit%2#0
        let values%2#0: bool = array_item%2#0
        (assert values%2#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L169
        let tmp%12#0: bool = (> length#0 3u)
        goto tmp%12#0 ? block@11 : block@12
    block@11: // if_body_L172
        let tmp%13#0: uint64 = (- length#0 1u)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%lt%3#0: bool = (< tmp%13#0 aggregate%array_length%5#0)
        (assert aggregate%lt%3#0) // index access is out of bounds
        let aggregate%add%3#0: uint64 = (+ tmp%13#0 16u)
        let aggregate%get_bit%3#0: bool = (getbit arr#0 aggregate%add%3#0)
        let array_item%3#0: bool = aggregate%get_bit%3#0
        let values%3#0: bool = array_item%3#0
        let tmp%14#0: bool = (! values%3#0)
        (assert tmp%14#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L171
        (app_global_put "g" arr#0)
        let tmp%15#0: bool = (!= length#0 0u)
        goto tmp%15#0 ? block@13 : block@14
    block@13: // if_body_L176
        let (tmp%16#0: bool, tmp%17#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(arr#0)
        let arr#0: Encoded(len+bool1[]) = tmp%17#0
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%19#0: uint64 = aggregate%array_length%6#0
        let tmp%20#0: uint64 = (- length#0 1u)
        let tmp%21#0: bool = (== tmp%19#0 tmp%20#0)
        (assert tmp%21#0)
        goto block@14
    block@14: // after_if_else_L175
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L179
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%as_Encoded(len+(uint64,uint64)[])%0#0
        let arr#0: Encoded(len+(uint64,uint64)[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L184
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L185
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: uint64 = (+ i#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64,uint64)%0#0)
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = aggregate%head%2#0
        let tmp%4#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat arr#0 tmp%4#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = replace%0#0
        let arr#0: Encoded(len+(uint64,uint64)[]) = as_Encoded(len+(uint64,uint64)[])%0#0
        goto block@3
    block@3: // for_footer_L184
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L184
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%1#0
        let tmp%6#0: bool = (== tmp%5#0 5u)
        (assert tmp%6#0)
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 array_item%0#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let values%0#0: uint64 = aggregate%item0%0#0
        let values%1#0: uint64 = aggregate%item1%0#0
        let tmp%7#0: bool = (== values%0#0 1u)
        let tmp%8#0: bool = (== values%1#0 2u)
        let tmp%9#0: bool = (&& tmp%7#0 tmp%8#0)
        (assert tmp%9#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%10#0: uint64 = aggregate%array_length%2#0
        let tmp%11#0: uint64 = (- tmp%10#0 1u)
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%11#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#0
        let aggregate%extract%2#0: bytes = (extract3 array_item%1#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%2#0)
        let aggregate%extract%3#0: bytes = (extract3 array_item%1#0 8u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%3#0)
        let values%2#0: uint64 = aggregate%item0%1#0
        let values%3#0: uint64 = aggregate%item1%1#0
        let tmp%12#0: bool = (== values%2#0 5u)
        let tmp%13#0: bool = (== values%3#0 6u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let (tmp%15#0: bytes, tmp%16#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#0, 16u)
        let arr#0: Encoded(len+(uint64,uint64)[]) = tmp%16#0
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%19#0: uint64 = aggregate%array_length%3#0
        let tmp%20#0: bool = (== tmp%19#0 4u)
        (assert tmp%20#0)
        let aggregate%total_length%2#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%2#0: bytes = (substring3 arr#0 2u aggregate%total_length%2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%2#0: bytes = (extract3 aggregate%array_trimmed%2#0 aggregate%bytes_offset%2#0 16u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,uint64) = aggregate%encoded_element%2#0
        let aggregate%extract%4#0: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%2#0: uint64 = (btoi aggregate%extract%4#0)
        let aggregate%extract%5#0: bytes = (extract3 array_item%2#0 8u 8u)
        let aggregate%item1%2#0: uint64 = (btoi aggregate%extract%5#0)
        let values%4#0: uint64 = aggregate%item0%2#0
        let values%5#0: uint64 = aggregate%item1%2#0
        let tmp%21#0: bool = (== values%4#0 1u)
        let tmp%22#0: bool = (== values%5#0 2u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%24#0: uint64 = aggregate%array_length%4#0
        let tmp%25#0: uint64 = (- tmp%24#0 1u)
        let aggregate%total_length%3#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%3#0: bytes = (substring3 arr#0 2u aggregate%total_length%3#0)
        let aggregate%bytes_offset%3#0: uint64 = (* tmp%25#0 16u)
        let aggregate%encoded_element%3#0: bytes = (extract3 aggregate%array_trimmed%3#0 aggregate%bytes_offset%3#0 16u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64,uint64) = aggregate%encoded_element%3#0
        let aggregate%extract%6#0: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%3#0: uint64 = (btoi aggregate%extract%6#0)
        let aggregate%extract%7#0: bytes = (extract3 array_item%3#0 8u 8u)
        let aggregate%item1%3#0: uint64 = (btoi aggregate%extract%7#0)
        let values%6#0: uint64 = aggregate%item0%3#0
        let values%7#0: uint64 = aggregate%item1%3#0
        let tmp%26#0: bool = (== values%6#0 4u)
        let tmp%27#0: bool = (== values%7#0 5u)
        let tmp%28#0: bool = (&& tmp%26#0 tmp%27#0)
        (assert tmp%28#0)
        (app_global_put "c" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L197
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%as_Encoded(len+(uint64,bool1,bool1)[])%0#0
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L202
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L203
        let tmp%2#0: uint64 = (% i#0 2u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let tmp%4#0: uint64 = (* i#0 3u)
        let tmp%5#0: uint64 = (% tmp%4#0 2u)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%6#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(uint64,bool1,bool1)%0#0: Encoded(uint64,bool1,bool1) = aggregate%head%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1)%0#0)
        let aggregate%as_Encoded((uint64,bool1,bool1)[])%0#0: Encoded((uint64,bool1,bool1)[]) = aggregate%head%2#0
        let tmp%7#0: Encoded((uint64,bool1,bool1)[]) = aggregate%as_Encoded((uint64,bool1,bool1)[])%0#0
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#0 tmp%7#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = replace%0#0
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = as_Encoded(len+(uint64,bool1,bool1)[])%0#0
        goto block@3
    block@3: // for_footer_L202
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L202
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%8#0: uint64 = aggregate%array_length%1#0
        let tmp%9#0: bool = (== tmp%8#0 5u)
        (assert tmp%9#0)
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 9u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 9u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,bool1,bool1) = aggregate%encoded_element%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%get_bit%0#0: bool = (getbit array_item%0#0 64u)
        let aggregate%get_bit%1#0: bool = (getbit array_item%0#0 65u)
        let values%0#0: uint64 = aggregate%item0%0#0
        let values%1#0: bool = aggregate%get_bit%0#0
        let values%2#0: bool = aggregate%get_bit%1#0
        let foo#0: uint64 = values%0#0
        let bar#0: bool = values%1#0
        let baz#0: bool = values%2#0
        let tmp%10#0: bool = (== foo#0 0u)
        (assert tmp%10#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L212
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = aggregate%as_Encoded(len+(uint64,(len+uint8[]))[])%0#0
        let arr#0: Encoded(len+(uint64,(len+uint8[]))[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L217
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L218
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: bytes = (bzero i#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let total_length%0#0: uint64 = (len arr#0)
        let extract_to_end%0#0: bytes = (substring3 arr#0 2u total_length%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%3#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]))%0#0: Encoded(uint64,(len+uint8[])) = aggregate%concat%0#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64,(len+uint8[]))%0#0)
        let aggregate%as_Encoded((uint64,(len+uint8[]))[])%0#0: Encoded((uint64,(len+uint8[]))[]) = aggregate%concat%1#0
        let tmp%4#0: Encoded((uint64,(len+uint8[]))[]) = aggregate%as_Encoded((uint64,(len+uint8[]))[])%0#0
        let as_Encoded(len+(uint64,(len+uint8[]))[])%0#0: Encoded(len+(uint64,(len+uint8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%4#0)
        let arr#0: Encoded(len+(uint64,(len+uint8[]))[]) = as_Encoded(len+(uint64,(len+uint8[]))[])%0#0
        goto block@3
    block@3: // for_footer_L217
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L217
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%1#0
        let tmp%6#0: bool = (== tmp%5#0 5u)
        (assert tmp%6#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L221
        let continue_looping%1#0: bool = (< i#0 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L222
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ i#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let array_item%0#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let values%0#0: uint64 = aggregate%item0%0#0
        let tmp%7#0: uint64 = (+ i#0 1u)
        let tmp%8#0: bool = (== values%0#0 tmp%7#0)
        (assert tmp%8#0) // expected 1st element to be correct
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%1#0: uint64 = (+ i#0 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%3#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        let array_item%1#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%2#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 array_item%1#0 8u)
        let aggregate%len%1#0: uint64 = (len array_item%1#0)
        let aggregate%substring3%3#0: bytes = (substring3 array_item%1#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%3#0)
        let values%3#0: bytes = aggregate%item1%1#0
        let tmp%9#0: uint64 = (len values%3#0)
        let tmp%10#0: bool = (== tmp%9#0 i#0)
        (assert tmp%10#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L221
        let i#0: uint64 = (+ i#0 1u)
        goto block@5
    block@8: // after_for_L221
        let (tmp%11#0: bytes, tmp%12#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#0)
        let arr#0: Encoded(len+(uint64,(len+uint8[]))[]) = tmp%12#0
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%15#0: uint64 = aggregate%array_length%4#0
        let tmp%16#0: bool = (== tmp%15#0 4u)
        (assert tmp%16#0)
        let aggregate%total_length%2#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 arr#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%2#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%5#0 aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%2#0)
        let array_item%2#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%4#0
        let aggregate%extract%2#0: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%2#0: uint64 = (btoi aggregate%extract%2#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 array_item%2#0 8u)
        let aggregate%len%2#0: uint64 = (len array_item%2#0)
        let aggregate%substring3%5#0: bytes = (substring3 array_item%2#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let aggregate%item1%2#0: bytes = ((extract 2 0) aggregate%substring3%5#0)
        let values%4#0: uint64 = aggregate%item0%2#0
        let values%5#0: bytes = aggregate%item1%2#0
        let tmp%17#0: bool = (== values%4#0 1u)
        let tmp%18#0: bytes = (bzero 0u)
        let tmp%19#0: bool = (== values%5#0 tmp%18#0)
        let tmp%20#0: bool = (&& tmp%17#0 tmp%19#0)
        (assert tmp%20#0) // expected 1, 0
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%21#0: uint64 = aggregate%array_length%6#0
        let tmp%22#0: uint64 = (- tmp%21#0 1u)
        let aggregate%total_length%3#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%3#0: bytes = (substring3 arr#0 2u aggregate%total_length%3#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%3#0: uint64 = (* tmp%22#0 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%next_index%3#0: uint64 = (+ tmp%22#0 1u)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%7#0 aggregate%next_index%3#0) // on error: index access is out of bounds
        let aggregate%end_of_array%3#0: uint64 = (len aggregate%array_head_and_tail%3#0)
        let aggregate%next_item_offset_offset%3#0: uint64 = (* aggregate%next_index%3#0 2u)
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%3#0)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%6#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%end_offset%3#0)
        let array_item%3#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%6#0
        let aggregate%extract%3#0: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%3#0: uint64 = (btoi aggregate%extract%3#0)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%3#0: uint64 = (len array_item%3#0)
        let aggregate%substring3%7#0: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%3#0 aggregate%len%3#0)
        let aggregate%item1%3#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let values%6#0: uint64 = aggregate%item0%3#0
        let values%7#0: bytes = aggregate%item1%3#0
        let tmp%23#0: bool = (== values%6#0 4u)
        let tmp%24#0: bytes = (bzero 3u)
        let tmp%25#0: bool = (== values%7#0 tmp%24#0)
        let tmp%26#0: bool = (&& tmp%23#0 tmp%25#0)
        (assert tmp%26#0) // expected 4, 3
        (app_global_put "e" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L231
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = encoded_array%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L236
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L237
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: string = test_cases.array.immutable.times(i#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let total_length%0#0: uint64 = (len arr#0)
        let extract_to_end%0#0: bytes = (substring3 arr#0 2u total_length%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len tmp%3#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%3#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = aggregate%concat%0#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%as_Encoded((uint64,(len+utf8[]))[])%0#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%concat%1#0
        let tmp%4#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%as_Encoded((uint64,(len+utf8[]))[])%0#0
        let as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%4#0)
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        goto block@3
    block@3: // for_footer_L236
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L236
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%1#0
        let tmp%6#0: bool = (== tmp%5#0 5u)
        (assert tmp%6#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L240
        let continue_looping%1#0: bool = (< i#0 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L241
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ i#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%2#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let array_item%0#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let values%0#0: uint64 = aggregate%item0%0#0
        let tmp%7#0: uint64 = (+ i#0 1u)
        let tmp%8#0: bool = (== values%0#0 tmp%7#0)
        (assert tmp%8#0) // expected 1st element to be correct
        let aggregate%total_length%1#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%1#0: bytes = (substring3 arr#0 2u aggregate%total_length%1#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%1#0: uint64 = (* i#0 2u)
        let aggregate%item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%item_offset_offset%1#0)
        let aggregate%next_index%1#0: uint64 = (+ i#0 1u)
        let aggregate%has_next%1#0: uint64 = (- aggregate%array_length%3#0 aggregate%next_index%1#0) // on error: index access is out of bounds
        let aggregate%end_of_array%1#0: uint64 = (len aggregate%array_head_and_tail%1#0)
        let aggregate%next_item_offset_offset%1#0: uint64 = (* aggregate%next_index%1#0 2u)
        let aggregate%next_item_offset%1#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#0 aggregate%next_item_offset_offset%1#0)
        let aggregate%end_offset%1#0: uint64 = (select aggregate%end_of_array%1#0 aggregate%next_item_offset%1#0 aggregate%has_next%1#0)
        let aggregate%substring3%2#0: bytes = (substring3 aggregate%array_head_and_tail%1#0 aggregate%item_offset%1#0 aggregate%end_offset%1#0)
        let array_item%1#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%2#0
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 array_item%1#0 8u)
        let aggregate%len%1#0: uint64 = (len array_item%1#0)
        let aggregate%substring3%3#0: bytes = (substring3 array_item%1#0 aggregate%extract_uint16%1#0 aggregate%len%1#0)
        let aggregate%item1%1#0: bytes = ((extract 2 0) aggregate%substring3%3#0)
        let values%3#0: string = aggregate%item1%1#0
        let tmp%9#0: string = test_cases.array.immutable.times(i#0)
        let tmp%10#0: bool = (== values%3#0 tmp%9#0)
        (assert tmp%10#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L240
        let i#0: uint64 = (+ i#0 1u)
        goto block@5
    block@8: // after_for_L240
        let (tmp%11#0: bytes, tmp%12#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#0)
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = tmp%12#0
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%15#0: uint64 = aggregate%array_length%4#0
        let tmp%16#0: bool = (== tmp%15#0 4u)
        (assert tmp%16#0)
        let aggregate%total_length%2#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%2#0: bytes = (substring3 arr#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%2#0: uint64 = (* 0u 2u)
        let aggregate%item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%item_offset_offset%2#0)
        let aggregate%next_index%2#0: uint64 = (+ 0u 1u)
        let aggregate%has_next%2#0: uint64 = (- aggregate%array_length%5#0 aggregate%next_index%2#0) // on error: index access is out of bounds
        let aggregate%end_of_array%2#0: uint64 = (len aggregate%array_head_and_tail%2#0)
        let aggregate%next_item_offset_offset%2#0: uint64 = (* aggregate%next_index%2#0 2u)
        let aggregate%next_item_offset%2#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#0 aggregate%next_item_offset_offset%2#0)
        let aggregate%end_offset%2#0: uint64 = (select aggregate%end_of_array%2#0 aggregate%next_item_offset%2#0 aggregate%has_next%2#0)
        let aggregate%substring3%4#0: bytes = (substring3 aggregate%array_head_and_tail%2#0 aggregate%item_offset%2#0 aggregate%end_offset%2#0)
        let array_item%2#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%4#0
        let aggregate%extract%2#0: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%2#0: uint64 = (btoi aggregate%extract%2#0)
        let aggregate%extract_uint16%2#0: uint64 = (extract_uint16 array_item%2#0 8u)
        let aggregate%len%2#0: uint64 = (len array_item%2#0)
        let aggregate%substring3%5#0: bytes = (substring3 array_item%2#0 aggregate%extract_uint16%2#0 aggregate%len%2#0)
        let aggregate%item1%2#0: bytes = ((extract 2 0) aggregate%substring3%5#0)
        let values%4#0: uint64 = aggregate%item0%2#0
        let values%5#0: string = aggregate%item1%2#0
        let tmp%17#0: bool = (== values%4#0 1u)
        let tmp%18#0: bool = (== values%5#0 "")
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // expected 1, 0
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%20#0: uint64 = aggregate%array_length%6#0
        let tmp%21#0: uint64 = (- tmp%20#0 1u)
        let aggregate%total_length%3#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%3#0: bytes = (substring3 arr#0 2u aggregate%total_length%3#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 arr#0 0u)
        let aggregate%item_offset_offset%3#0: uint64 = (* tmp%21#0 2u)
        let aggregate%item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%item_offset_offset%3#0)
        let aggregate%next_index%3#0: uint64 = (+ tmp%21#0 1u)
        let aggregate%has_next%3#0: uint64 = (- aggregate%array_length%7#0 aggregate%next_index%3#0) // on error: index access is out of bounds
        let aggregate%end_of_array%3#0: uint64 = (len aggregate%array_head_and_tail%3#0)
        let aggregate%next_item_offset_offset%3#0: uint64 = (* aggregate%next_index%3#0 2u)
        let aggregate%next_item_offset%3#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%3#0 aggregate%next_item_offset_offset%3#0)
        let aggregate%end_offset%3#0: uint64 = (select aggregate%end_of_array%3#0 aggregate%next_item_offset%3#0 aggregate%has_next%3#0)
        let aggregate%substring3%6#0: bytes = (substring3 aggregate%array_head_and_tail%3#0 aggregate%item_offset%3#0 aggregate%end_offset%3#0)
        let array_item%3#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%6#0
        let aggregate%extract%3#0: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%3#0: uint64 = (btoi aggregate%extract%3#0)
        let aggregate%extract_uint16%3#0: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%3#0: uint64 = (len array_item%3#0)
        let aggregate%substring3%7#0: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%3#0 aggregate%len%3#0)
        let aggregate%item1%3#0: bytes = ((extract 2 0) aggregate%substring3%7#0)
        let values%6#0: uint64 = aggregate%item0%3#0
        let values%7#0: string = aggregate%item1%3#0
        let tmp%22#0: bool = (== values%6#0 4u)
        let tmp%23#0: bool = (== values%7#0 "   ")
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        (assert tmp%24#0) // expected 4, 3
        (app_global_put "f" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: Encoded(len+uint64[])) -> void:
    block@0: // L250
        (log arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: Encoded(len+uint64[])) -> void:
    block@0: // L254
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%0#0 arr#0)
        let aggregate%as_Encoded((len+uint64[]))%0#0: Encoded((len+uint64[])) = aggregate%concat%0#0
        let tmp%0#0: Encoded((len+uint64[])) = aggregate%as_Encoded((len+uint64[]))%0#0
        let event%0#0: bytes = (concat method "emit_test(uint64[])" tmp%0#0)
        (log event%0#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: Encoded(len+(len+uint64[])[])) -> Encoded(len+uint64[]):
    block@0: // L258
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L263
        let continue_looping%0#0: bool = (< i#0 arr_to_add#0)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L264
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let extra_arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L265
        let continue_looping%1#0: bool = (< j#0 i#0)
        goto continue_looping%1#0 ? block@4 : block@6
    block@4: // for_body_L266
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob j#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat extra_arr#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 extra_arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let extra_arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@5
    block@5: // for_footer_L265
        let j#0: uint64 = (+ j#0 1u)
        goto block@3
    block@6: // after_for_L265
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#0 0u)
        let total_length%0#0: uint64 = (len arr#0)
        let extract_to_end%0#0: bytes = (substring3 arr#0 2u total_length%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 extra_arr#0)
        let aggregate%as_Encoded((len+uint64[])[])%0#0: Encoded((len+uint64[])[]) = aggregate%concat%0#0
        let tmp%1#0: Encoded((len+uint64[])[]) = aggregate%as_Encoded((len+uint64[])[])%0#0
        let as_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%0#0, 1u, tmp%1#0)
        let arr#0: Encoded(len+(len+uint64[])[]) = as_Encoded(len+(len+uint64[])[])%0#0
        goto block@7
    block@7: // for_footer_L263
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@8: // after_for_L263
        let aggregate%as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = aggregate%len_u16%1#0
        let encoded_array%1#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%1#0
        let totals#0: Encoded(len+uint64[]) = encoded_array%1#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L271
        let continue_looping%2#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L272
        let aggregate%total_length%0#0: uint64 = (len arr#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 arr#0 2u aggregate%total_length%0#0)
        let aggregate%item_offset_offset%0#0: uint64 = (* item_index_internal%0#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%item_length%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0)
        let aggregate%item_length_in_bytes%0#0: uint64 = (* aggregate%item_length%0#0 8u)
        let aggregate%item_head_tail_length%0#0: uint64 = (+ aggregate%item_length_in_bytes%0#0 2u)
        let aggregate%item%0#0: bytes = (extract3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%item_head_tail_length%0#0)
        let array_item%0#0: Encoded(len+uint64[]) = aggregate%item%0#0
        let inner_arr#0: Encoded(len+uint64[]) = array_item%0#0
        let tmp%2#0: uint64 = test_cases.array.immutable.sum_arr(inner_arr#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64[])%1#0: Encoded(uint64[]) = aggregate%head%2#0
        let tmp%3#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#0
        let concat%1#0: Encoded(len+uint64[]) = (concat totals#0 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 totals#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = replace%1#0
        let totals#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%1#0
        goto block@11
    block@11: // for_footer_L271
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@9
    block@12: // after_for_L271
        return totals#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L276
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(bool1,bool1)[])%0#0: Encoded(len+(bool1,bool1)[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(bool1,bool1)[]) = aggregate%as_Encoded(len+(bool1,bool1)[])%0#0
        let arr2#0: Encoded(len+(bool1,bool1)[]) = encoded_array%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%len_u16%1#0
        let encoded_array%1#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let arr7#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = encoded_array%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%len_u16%2#0
        let encoded_array%2#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let arr8#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = encoded_array%2#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%len_u16%3#0
        let encoded_array%3#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let arr9#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = encoded_array%3#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%2#0: uint64 = aggregate%array_length%1#0
        let tmp%3#0: bool = (== tmp%2#0 0u)
        (assert tmp%3#0)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%4#0: uint64 = aggregate%array_length%2#0
        let tmp%5#0: bool = (== tmp%4#0 0u)
        (assert tmp%5#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%6#0: uint64 = aggregate%array_length%3#0
        let tmp%7#0: bool = (== tmp%6#0 0u)
        (assert tmp%7#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L287
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L288
        let tmp%8#0: bool = (== i#0 0u)
        let tmp%9#0: bool = (== i#0 1u)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%8#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%9#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%set_bit%0#0)
        let aggregate%as_Encoded(bool1,bool1)%0#0: Encoded(bool1,bool1) = aggregate%head%0#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(bool1,bool1)%0#0)
        let aggregate%as_Encoded((bool1,bool1)[])%0#0: Encoded((bool1,bool1)[]) = aggregate%head%1#0
        let tmp%10#0: Encoded((bool1,bool1)[]) = aggregate%as_Encoded((bool1,bool1)[])%0#0
        let concat%0#0: Encoded(len+(bool1,bool1)[]) = (concat arr2#0 tmp%10#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(bool1,bool1)[])%0#0: Encoded(len+(bool1,bool1)[]) = replace%0#0
        let arr2#0: Encoded(len+(bool1,bool1)[]) = as_Encoded(len+(bool1,bool1)[])%0#0
        let tmp%11#0: bool = (== i#0 0u)
        let tmp%12#0: bool = (== i#0 1u)
        let tmp%13#0: bool = (== i#0 2u)
        let tmp%14#0: bool = (== i#0 3u)
        let tmp%15#0: bool = (== i#0 4u)
        let tmp%16#0: bool = (== i#0 5u)
        let tmp%17#0: bool = (== i#0 6u)
        let tmp%18#0: uint64 = (+ i#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%11#0)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%encoded_bool%1#0 1u tmp%12#0)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 2u tmp%13#0)
        let aggregate%set_bit%3#0: bytes[1] = (setbit aggregate%set_bit%2#0 3u tmp%14#0)
        let aggregate%set_bit%4#0: bytes[1] = (setbit aggregate%set_bit%3#0 4u tmp%15#0)
        let aggregate%set_bit%5#0: bytes[1] = (setbit aggregate%set_bit%4#0 5u tmp%16#0)
        let aggregate%set_bit%6#0: bytes[1] = (setbit aggregate%set_bit%5#0 6u tmp%17#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%set_bit%6#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%18#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = aggregate%head%4#0
        let aggregate%head%5#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0)
        let aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%head%5#0
        let tmp%19#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let concat%1#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr7#0 tmp%19#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr7#0 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%1#0: bytes = (replace3 concat%1#0 0u as_u16_bytes%1#0)
        let as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = replace%1#0
        let arr7#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let tmp%20#0: bool = (== i#0 0u)
        let tmp%21#0: bool = (== i#0 1u)
        let tmp%22#0: bool = (== i#0 2u)
        let tmp%23#0: bool = (== i#0 3u)
        let tmp%24#0: bool = (== i#0 4u)
        let tmp%25#0: bool = (== i#0 5u)
        let tmp%26#0: bool = (== i#0 6u)
        let tmp%27#0: bool = (== i#0 7u)
        let tmp%28#0: uint64 = (+ i#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%6#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u tmp%20#0)
        let aggregate%set_bit%7#0: bytes[1] = (setbit aggregate%encoded_bool%2#0 1u tmp%21#0)
        let aggregate%set_bit%8#0: bytes[1] = (setbit aggregate%set_bit%7#0 2u tmp%22#0)
        let aggregate%set_bit%9#0: bytes[1] = (setbit aggregate%set_bit%8#0 3u tmp%23#0)
        let aggregate%set_bit%10#0: bytes[1] = (setbit aggregate%set_bit%9#0 4u tmp%24#0)
        let aggregate%set_bit%11#0: bytes[1] = (setbit aggregate%set_bit%10#0 5u tmp%25#0)
        let aggregate%set_bit%12#0: bytes[1] = (setbit aggregate%set_bit%11#0 6u tmp%26#0)
        let aggregate%set_bit%13#0: bytes[1] = (setbit aggregate%set_bit%12#0 7u tmp%27#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%set_bit%13#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%28#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%8#0: bytes = (concat aggregate%head%7#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = aggregate%head%8#0
        let aggregate%head%9#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0)
        let aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%head%9#0
        let tmp%29#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let concat%2#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr8#0 tmp%29#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 arr8#0 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let replace%2#0: bytes = (replace3 concat%2#0 0u as_u16_bytes%2#0)
        let as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = replace%2#0
        let arr8#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let tmp%30#0: bool = (== i#0 0u)
        let tmp%31#0: bool = (== i#0 1u)
        let tmp%32#0: bool = (== i#0 2u)
        let tmp%33#0: bool = (== i#0 3u)
        let tmp%34#0: bool = (== i#0 4u)
        let tmp%35#0: bool = (== i#0 5u)
        let tmp%36#0: bool = (== i#0 6u)
        let tmp%37#0: bool = (== i#0 7u)
        let tmp%38#0: bool = (== i#0 8u)
        let tmp%39#0: uint64 = (+ i#0 1u)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%10#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u tmp%30#0)
        let aggregate%set_bit%14#0: bytes[1] = (setbit aggregate%encoded_bool%3#0 1u tmp%31#0)
        let aggregate%set_bit%15#0: bytes[1] = (setbit aggregate%set_bit%14#0 2u tmp%32#0)
        let aggregate%set_bit%16#0: bytes[1] = (setbit aggregate%set_bit%15#0 3u tmp%33#0)
        let aggregate%set_bit%17#0: bytes[1] = (setbit aggregate%set_bit%16#0 4u tmp%34#0)
        let aggregate%set_bit%18#0: bytes[1] = (setbit aggregate%set_bit%17#0 5u tmp%35#0)
        let aggregate%set_bit%19#0: bytes[1] = (setbit aggregate%set_bit%18#0 6u tmp%36#0)
        let aggregate%set_bit%20#0: bytes[1] = (setbit aggregate%set_bit%19#0 7u tmp%37#0)
        let aggregate%head%11#0: bytes = (concat aggregate%head%10#0 aggregate%set_bit%20#0)
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u tmp%38#0)
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%encoded_bool%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%39#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = aggregate%head%13#0
        let aggregate%head%14#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)%0#0)
        let aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%head%14#0
        let tmp%40#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%as_Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        let concat%3#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr9#0 tmp%40#0) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 arr9#0 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let replace%3#0: bytes = (replace3 concat%3#0 0u as_u16_bytes%3#0)
        let as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = replace%3#0
        let arr9#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = as_Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[])%0#0
        goto block@3
    block@3: // for_footer_L287
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L287
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%41#0: uint64 = aggregate%array_length%4#0
        let tmp%42#0: bool = (== tmp%41#0 5u)
        (assert tmp%42#0)
        let aggregate%array_length%5#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%43#0: uint64 = aggregate%array_length%5#0
        let tmp%44#0: bool = (== tmp%43#0 5u)
        (assert tmp%44#0)
        let aggregate%array_length%6#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%45#0: uint64 = aggregate%array_length%6#0
        let tmp%46#0: bool = (== tmp%45#0 5u)
        (assert tmp%46#0)
        let aggregate%array_length%7#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%47#0: uint64 = aggregate%array_length%7#0
        let tmp%48#0: bool = (== tmp%47#0 5u)
        (assert tmp%48#0)
        (app_global_put "bool2" arr2#0)
        (app_global_put "bool7" arr7#0)
        (app_global_put "bool8" arr8#0)
        (app_global_put "bool9" arr9#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: Encoded(len+uint64[]), arr2: Encoded(len+bool1[]), arr3: Encoded(len+(uint64,bool1,bool1)[]), arr4: Encoded(len+(uint64,(len+utf8[]))[])) -> <uint64, uint64, uint64, uint64>:
    block@0: // L341
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr1#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L350
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L351
        let aggregate%total_length%0#0: uint64 = (len arr1#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 arr1#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let i#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ sum1#0 i#0)
        let sum1#0: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L350
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L350
        let aggregate%array_length%1#0: uint64 = (extract_uint16 arr2#0 0u)
        let array_length%1#0: uint64 = aggregate%array_length%1#0
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L352
        let continue_looping%1#0: bool = (< item_index_internal%1#0 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L353
        let aggregate%add%0#0: uint64 = (+ item_index_internal%1#0 16u)
        let aggregate%get_bit%0#0: bool = (getbit arr2#0 aggregate%add%0#0)
        let array_item%1#0: bool = aggregate%get_bit%0#0
        let values%1#0: bool = array_item%1#0
        let b#0: bool = values%1#0
        let sum2#10: uint64 = sum2#0
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L354
        let tmp%1#0: uint64 = (+ sum2#0 1u)
        let sum2#0: uint64 = tmp%1#0
        let sum2#10: uint64 = sum2#0
        goto block@8
    block@8: // after_if_else_L353
        let sum2#0: uint64 = sum2#10
        goto block@9
    block@9: // for_footer_L352
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@10: // after_for_L352
        let aggregate%array_length%2#0: uint64 = (extract_uint16 arr3#0 0u)
        let array_length%2#0: uint64 = aggregate%array_length%2#0
        let item_index_internal%2#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L355
        let continue_looping%2#0: bool = (< item_index_internal%2#0 array_length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L356
        let aggregate%total_length%1#0: uint64 = (len arr3#0)
        let aggregate%array_trimmed%1#0: bytes = (substring3 arr3#0 2u aggregate%total_length%1#0)
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%2#0 9u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%1#0 aggregate%bytes_offset%1#0 9u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,bool1,bool1) = aggregate%encoded_element%1#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%get_bit%1#0: bool = (getbit array_item%2#0 64u)
        let aggregate%get_bit%2#0: bool = (getbit array_item%2#0 65u)
        let values%2#0: uint64 = aggregate%item0%0#0
        let values%3#0: bool = aggregate%get_bit%1#0
        let values%4#0: bool = aggregate%get_bit%2#0
        let tup.foo#0: uint64 = values%2#0
        let tup.bar#0: bool = values%3#0
        let tup.baz#0: bool = values%4#0
        let tmp%2#0: uint64 = (+ sum3#0 tup.foo#0)
        let sum3#0: uint64 = tmp%2#0
        let sum3#15: uint64 = sum3#0
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L358
        let tmp%3#0: uint64 = (+ sum3#0 1u)
        let sum3#0: uint64 = tmp%3#0
        let sum3#15: uint64 = sum3#0
        goto block@14
    block@14: // after_if_else_L357
        let sum3#0: uint64 = sum3#15
        let sum3#15: uint64 = sum3#0
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L360
        let tmp%4#0: uint64 = (+ sum3#0 1u)
        let sum3#0: uint64 = tmp%4#0
        let sum3#15: uint64 = sum3#0
        goto block@16
    block@16: // after_if_else_L359
        let sum3#0: uint64 = sum3#15
        goto block@17
    block@17: // for_footer_L355
        let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
        goto block@11
    block@18: // after_for_L355
        let aggregate%array_length%3#0: uint64 = (extract_uint16 arr4#0 0u)
        let array_length%3#0: uint64 = aggregate%array_length%3#0
        let item_index_internal%3#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L361
        let continue_looping%3#0: bool = (< item_index_internal%3#0 array_length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L362
        let aggregate%total_length%2#0: uint64 = (len arr4#0)
        let aggregate%array_head_and_tail%0#0: bytes = (substring3 arr4#0 2u aggregate%total_length%2#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 arr4#0 0u)
        let aggregate%item_offset_offset%0#0: uint64 = (* item_index_internal%3#0 2u)
        let aggregate%item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%item_offset_offset%0#0)
        let aggregate%next_index%0#0: uint64 = (+ item_index_internal%3#0 1u)
        let aggregate%has_next%0#0: uint64 = (- aggregate%array_length%4#0 aggregate%next_index%0#0) // on error: index access is out of bounds
        let aggregate%end_of_array%0#0: uint64 = (len aggregate%array_head_and_tail%0#0)
        let aggregate%next_item_offset_offset%0#0: uint64 = (* aggregate%next_index%0#0 2u)
        let aggregate%next_item_offset%0#0: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#0 aggregate%next_item_offset_offset%0#0)
        let aggregate%end_offset%0#0: uint64 = (select aggregate%end_of_array%0#0 aggregate%next_item_offset%0#0 aggregate%has_next%0#0)
        let aggregate%substring3%0#0: bytes = (substring3 aggregate%array_head_and_tail%0#0 aggregate%item_offset%0#0 aggregate%end_offset%0#0)
        let array_item%3#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%0#0
        let aggregate%extract%1#0: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%1#0)
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%0#0: uint64 = (len array_item%3#0)
        let aggregate%substring3%1#0: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%0#0 aggregate%len%0#0)
        let aggregate%item1%0#0: bytes = ((extract 2 0) aggregate%substring3%1#0)
        let values%5#0: uint64 = aggregate%item0%1#0
        let values%6#0: string = aggregate%item1%0#0
        let dyn_tup.foo#0: uint64 = values%5#0
        let dyn_tup.bar#0: string = values%6#0
        let idx#0: uint64 = item_index_internal%3#0
        let tmp%5#0: uint64 = (+ sum4#0 dyn_tup.foo#0)
        let sum4#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (len dyn_tup.bar#0)
        let tmp%7#0: uint64 = (+ sum4#0 tmp%6#0)
        let sum4#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (len dyn_tup.bar#0)
        let tmp%9#0: bool = (== tmp%8#0 idx#0)
        (assert tmp%9#0) // expected string length to match index
        goto block@21
    block@21: // for_footer_L361
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        goto block@19
    block@22: // after_for_L361
        return sum1#0 sum2#0 sum3#0 sum4#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> Encoded(len+uint64[]):
    block@0: // L368
        let aggregate%as_bytes%0#0: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let arr#0: Encoded(len+uint64[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L371
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L372
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let arr#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        goto block@3
    block@3: // for_footer_L371
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L371
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> Encoded(len+bool1[]):
    block@0: // L375
        let aggregate%as_bytes%0#0: bytes[8] = (itob 5u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u 0u)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u 1u)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u 0u)
        let aggregate%set_bit%3#0: bytes[1] = (setbit aggregate%set_bit%2#0 4u 1u)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%set_bit%3#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%head%0#0
        let encoded_array%0#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let arr#0: Encoded(len+bool1[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L378
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L379
        let tmp%0#0: uint64 = (% i#0 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let aggregate%head%1#0: bytes = (concat 0x aggregate%as_Encoded(bool8)%0#0)
        let aggregate%as_Encoded(bool8[])%0#0: Encoded(bool8[]) = aggregate%head%1#0
        let tmp%2#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#0
        let as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#0, tmp%2#0, 1u, 8u)
        let arr#0: Encoded(len+bool1[]) = as_Encoded(len+bool1[])%0#0
        goto block@3
    block@3: // for_footer_L378
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L378
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L382
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u 0u)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(uint64,bool1,bool1)%0#0: Encoded(uint64,bool1,bool1) = aggregate%head%1#0
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 aggregate%as_Encoded(uint64,bool1,bool1)%0#0)
        let aggregate%as_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%head%2#0
        let encoded_array%0#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%as_Encoded(len+(uint64,bool1,bool1)[])%0#0
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L385
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L386
        let tmp%0#0: uint64 = (% i#0 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let tmp%2#0: uint64 = (% i#0 3u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%encoded_bool%1#0 1u tmp%3#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%set_bit%1#0)
        let aggregate%as_Encoded(uint64,bool1,bool1)%1#0: Encoded(uint64,bool1,bool1) = aggregate%head%4#0
        let aggregate%head%5#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1)%1#0)
        let aggregate%as_Encoded((uint64,bool1,bool1)[])%0#0: Encoded((uint64,bool1,bool1)[]) = aggregate%head%5#0
        let tmp%4#0: Encoded((uint64,bool1,bool1)[]) = aggregate%as_Encoded((uint64,bool1,bool1)[])%0#0
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#0 tmp%4#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = replace%0#0
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = as_Encoded(len+(uint64,bool1,bool1)[])%0#0
        goto block@3
    block@3: // for_footer_L385
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L385
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> Encoded(len+(uint64,(len+utf8[]))[]):
    block@0: // L389
        let aggregate%as_bytes%0#0: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(len+utf8[])%0#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%0#0: Encoded(uint64,(len+utf8[])) = aggregate%concat%0#0
        let aggregate%as_bytes%3#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%2#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64,(len+utf8[]))%0#0)
        let aggregate%as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%concat%1#0
        let encoded_array%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = encoded_array%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L392
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L393
        let tmp%0#0: string = test_cases.array.immutable.times(i#0)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#0 0u)
        let total_length%0#0: uint64 = (len arr#0)
        let extract_to_end%0#0: bytes = (substring3 arr#0 2u total_length%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%3#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%1#0: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%0#0)
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let aggregate%as_bytes%5#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%5#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%offset_as_uint16%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%4#0 aggregate%as_Encoded(len+utf8[])%1#0)
        let aggregate%as_Encoded(uint64,(len+utf8[]))%1#0: Encoded(uint64,(len+utf8[])) = aggregate%concat%2#0
        let aggregate%as_bytes%6#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%3#0: bytes = ((extract 6 2) aggregate%as_bytes%6#0)
        let aggregate%head%5#0: bytes = (concat 0x aggregate%offset_as_uint16%3#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint64,(len+utf8[]))%1#0)
        let aggregate%as_Encoded((uint64,(len+utf8[]))[])%0#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%concat%3#0
        let tmp%1#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%as_Encoded((uint64,(len+utf8[]))[])%0#0
        let as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%1#0)
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        goto block@3
    block@3: // for_footer_L392
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L392
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: Encoded(len+(uint64,bool1,bool1)[]), append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L396
        let slot%0#0: Encoded((uint64,bool1,bool1)[])* = new()
        store(slot%0#0, 0x)
        let mutable#0: Encoded((uint64,bool1,bool1)[])* = slot%0#0
        let slot_contents%0#0: Encoded((uint64,bool1,bool1)[]) = load(mutable#0)
        let total_length%0#0: uint64 = (len arr#0)
        let extract_to_end%0#0: bytes = (substring3 arr#0 2u total_length%0#0)
        let concat%0#0: Encoded((uint64,bool1,bool1)[]) = (concat slot_contents%0#0 extract_to_end%0#0) // on error: max array length exceeded
        store(mutable#0, concat%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L402
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L403
        let tmp%0#0: uint64 = (% i#0 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let tmp%2#0: uint64 = (% i#0 3u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let slot_contents%1#0: Encoded((uint64,bool1,bool1)[]) = load(mutable#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%3#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%set_bit%0#0)
        let aggregate%as_Encoded(uint64,bool1,bool1)%0#0: Encoded(uint64,bool1,bool1) = aggregate%head%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64,bool1,bool1)%0#0)
        let aggregate%as_Encoded((uint64,bool1,bool1)[])%1#0: Encoded((uint64,bool1,bool1)[]) = aggregate%head%2#0
        let tmp%4#0: Encoded((uint64,bool1,bool1)[]) = aggregate%as_Encoded((uint64,bool1,bool1)[])%1#0
        let concat%1#0: Encoded((uint64,bool1,bool1)[]) = (concat slot_contents%1#0 tmp%4#0) // on error: max array length exceeded
        store(mutable#0, concat%1#0)
        goto block@3
    block@3: // for_footer_L402
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L402
        let slot_contents%2#0: Encoded((uint64,bool1,bool1)[]) = load(mutable#0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 9u)
        let tmp%5#0: uint64 = aggregate%array_len%0#0
        let as_bytes%0#0: bytes[8] = (itob tmp%5#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat as_u16_bytes%0#0 slot_contents%2#0)
        return converted_array%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: Encoded(uint64,uint64)) -> Encoded(len+uint64[]):
    block@0: // L406
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000000000000001)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000000000000002)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let prefix#0: Encoded(len+uint64[]) = encoded_array%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat prefix#0 arg#0) // on error: max array length exceeded
        let total_length%0#0: uint64 = (len concat%0#0)
        let extract_to_end%0#0: bytes = (substring3 concat%0#0 2u total_length%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let result#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: Encoded(uint64), arg.1: Encoded(uint64)) -> Encoded(len+uint64[]):
    block@0: // L414
        let aggregate%as_bytes%0#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 0x0000000000000001)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x0000000000000002)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%head%1#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let prefix#0: Encoded(len+uint64[]) = encoded_array%0#0
        let aggregate%head%2#0: bytes = (concat 0x arg.0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 arg.1#0)
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = aggregate%head%3#0
        let tmp%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let concat%0#0: Encoded(len+uint64[]) = (concat prefix#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 prefix#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 2u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let replace%0#0: bytes = (replace3 concat%0#0 0u as_u16_bytes%0#0)
        let as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = replace%0#0
        let result#0: Encoded(len+uint64[]) = as_Encoded(len+uint64[])%0#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: Encoded((len+utf8[]),(len+utf8[]))) -> Encoded(len+(len+utf8[])[]):
    block@0: // L422
        let aggregate%length%0#0: uint64 = (len "a")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "a")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "b")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "b")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let prefix#0: Encoded(len+(len+utf8[])[]) = encoded_array%0#0
        let start_of_tail%0#0: uint64 = (* 2u 2u)
        let total_length%0#0: uint64 = (len arg#0)
        let data%0#0: bytes = (substring3 arg#0 start_of_tail%0#0 total_length%0#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%0#0, 2u)
        let result#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: Encoded(len+utf8[]), arg.1: Encoded(len+utf8[])) -> Encoded(len+(len+utf8[])[]):
    block@0: // L430
        let aggregate%length%0#0: uint64 = (len "a")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "a")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let aggregate%length%1#0: uint64 = (len "b")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "b")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let aggregate%as_bytes%2#0: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%0#0: bytes = (concat aggregate%len_u16%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len tmp%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 4u aggregate%data_length%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%1#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%1#0 tmp%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%1#0)
        let aggregate%as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = aggregate%concat%1#0
        let encoded_array%0#0: Encoded(len+(len+utf8[])[]) = aggregate%as_Encoded(len+(len+utf8[])[])%0#0
        let prefix#0: Encoded(len+(len+utf8[])[]) = encoded_array%0#0
        let concat%0#0: bytes = (concat 0x arg.0#0)
        let concat%1#0: bytes = (concat concat%0#0 arg.1#0)
        let as_Encoded(len+(len+utf8[])[])%0#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, concat%1#0, 2u)
        let result#0: Encoded(len+(len+utf8[])[]) = as_Encoded(len+(len+utf8[])[])%0#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: Encoded(len+(uint64,(len+utf8[]))[]), imm2: Encoded(len+(uint64,(len+utf8[]))[])) -> Encoded(len+(uint64,(len+utf8[]))[]):
    block@0: // L438
        let extract_uint16%0#0: uint64 = (extract_uint16 imm1#0 0u)
        let total_length%0#0: uint64 = (len imm1#0)
        let extract_to_end%0#0: bytes = (substring3 imm1#0 2u total_length%0#0)
        let total_length%1#0: uint64 = (len imm2#0)
        let extract_to_end%1#0: bytes = (substring3 imm2#0 2u total_length%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 imm2#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, tmp%0#0, extract_to_end%1#0)
        return as_Encoded(len+(uint64,(len+utf8[]))[])%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(imm: Encoded(len+(uint64,uint64)[])) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L444
        let aggregate%array_length%0#0: uint64 = (extract_uint16 imm#0 0u)
        let tmp%0#0: uint64 = aggregate%array_length%0#0
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        (assert tmp%1#0) // expected non empty array
        let aggregate%array_length%1#0: uint64 = (extract_uint16 imm#0 0u)
        let tmp%2#0: uint64 = aggregate%array_length%1#0
        let tmp%3#0: uint64 = (- tmp%2#0 1u)
        let aggregate%total_length%0#0: uint64 = (len imm#0)
        let aggregate%array_trimmed%0#0: bytes = (substring3 imm#0 2u aggregate%total_length%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let aggregate%write_offset%0#0: uint64 = (* tmp%3#0 16u)
        let aggregate%write_offset_with_length_header%0#0: uint64 = (+ aggregate%write_offset%0#0 2u)
        let aggregate%updated_array%0#0: bytes = (replace3 imm#0 aggregate%write_offset_with_length_header%0#0 array_item%0#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded(len+(uint64,uint64)[]) = aggregate%updated_array%0#0
        let imm#0: Encoded(len+(uint64,uint64)[]) = updated_array%0#0
        return imm#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr() -> Encoded((uint64,uint64)[3]):
    block@0: // L450
        let tmp%0#0: Encoded((uint64,uint64)[3]) = (bzero 48u)
        let arr1#0: Encoded((uint64,uint64)[3]) = tmp%0#0
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (+ tmp%1#0 1u)
        let tmp%3#0: uint64 = (txn NumAppArgs)
        let tmp%4#0: uint64 = (+ tmp%3#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%1#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%5#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let struct12#0: Encoded(uint64,uint64) = tmp%5#0
        let aggregate%head%2#0: bytes = (concat 0x struct12#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 struct12#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 struct12#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%0#0: Encoded((uint64,uint64)[3]) = aggregate%head%4#0
        let encoded_array%0#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%0#0
        let arr2#0: Encoded((uint64,uint64)[3]) = encoded_array%0#0
        let aggregate%head%5#0: bytes = (concat 0x struct12#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 struct12#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 struct12#0)
        let aggregate%as_Encoded((uint64,uint64)[3])%1#0: Encoded((uint64,uint64)[3]) = aggregate%head%7#0
        let encoded_array%1#0: Encoded((uint64,uint64)[3]) = aggregate%as_Encoded((uint64,uint64)[3])%1#0
        let arr3#0: Encoded((uint64,uint64)[3]) = encoded_array%1#0
        let tmp%6#0: bool = (!= arr1#0 arr2#0)
        (assert tmp%6#0) // expected arrays to be different
        let tmp%7#0: bool = (== arr2#0 arr3#0)
        (assert tmp%7#0) // expected arrays to be the same
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L459
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L460
        let aggregate%write_offset%0#0: uint64 = (* i#0 16u)
        let aggregate%updated_array%0#0: bytes = (replace3 arr1#0 aggregate%write_offset%0#0 struct12#0) // on error: index access is out of bounds
        let updated_array%0#0: Encoded((uint64,uint64)[3]) = aggregate%updated_array%0#0
        let arr1#0: Encoded((uint64,uint64)[3]) = updated_array%0#0
        goto block@3
    block@3: // for_footer_L459
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L459
        let tmp%8#0: bool = (== arr1#0 arr2#0)
        (assert tmp%8#0) // expected arrays to be the same
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L464
        let continue_looping%1#0: bool = (< item_index_internal%0#0 3u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L465
        let aggregate%bytes_offset%1#0: uint64 = (* item_index_internal%0#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 arr1#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#0
        let struct_it#0: Encoded(uint64,uint64) = array_item%0#0
        let tmp%9#0: bool = (== struct_it#0 struct12#0)
        (assert tmp%9#0) // expected items on iteration to be the same
        goto block@7
    block@7: // for_footer_L464
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@5
    block@8: // after_for_L464
        (app_global_put "imm_fixed_arr" arr1#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "imm_fixed_arr")
        (assert maybe_exists%0#0) // check self.imm_fixed_arr exists
        let tmp%10#0: bool = (== maybe_value%0#0 arr2#0)
        (assert tmp%10#0) // expected array in storage to be the same
        let mut_arr#0: Encoded((uint64,uint64)[3]) = arr1#0
        let tmp%13#0: uint64 = test_cases.array.immutable.sum_imm_fixed(mut_arr#0)
        let tmp%14#0: bool = (== tmp%13#0 15u)
        (assert tmp%14#0) // expected sum to be 15
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%2#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%9#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%9#0
        let tmp%15#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let aggregate%write_offset%1#0: uint64 = (* 0u 16u)
        let aggregate%updated_array%1#0: bytes = (replace3 mut_arr#0 aggregate%write_offset%1#0 tmp%15#0) // on error: index access is out of bounds
        let updated_array%1#0: Encoded((uint64,uint64)[3]) = aggregate%updated_array%1#0
        let mut_arr#0: Encoded((uint64,uint64)[3]) = updated_array%1#0
        let tmp%17#0: uint64 = test_cases.array.immutable.sum_imm_fixed(mut_arr#0)
        let tmp%18#0: bool = (== tmp%17#0 10u)
        (assert tmp%18#0) // expected sum to be 10
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "imm_fixed_arr")
        (assert maybe_exists%1#0) // check self.imm_fixed_arr exists
        return maybe_value%1#0