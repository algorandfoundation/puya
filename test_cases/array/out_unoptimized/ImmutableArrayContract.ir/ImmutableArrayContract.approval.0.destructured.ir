main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L72
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@17
    block@2: // abi_routing_L72
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint64_array()void" => block@3, method "test_bool_array(uint64)void" => block@4, method "test_fixed_size_tuple_array()void" => block@5, method "test_fixed_size_named_tuple_array()void" => block@6, method "test_dynamic_sized_tuple_array()void" => block@7, method "test_dynamic_sized_named_tuple_array()void" => block@8, method "test_bit_packed_tuples()void" => block@9, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@10, method "test_uint64_return(uint64)uint64[]" => block@11, method "test_bool_return(uint64)bool[]" => block@12, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@13, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@14, * => block@15}
    block@3: // test_uint64_array_route_L73
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@4: // test_bool_array_route_L109
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%11#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%11#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@5: // test_fixed_size_tuple_array_route_L133
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@6: // test_fixed_size_named_tuple_array_route_L151
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@7: // test_dynamic_sized_tuple_array_route_L166
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@8: // test_dynamic_sized_named_tuple_array_route_L185
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@9: // test_bit_packed_tuples_route_L204
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@10: // sum_uints_and_lengths_and_trues_route_L269
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (== tmp%32#0 NoOp)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let tmp%36#0: bytes = (txna ApplicationArgs 1)
        let tmp%37#0: bytes = (txna ApplicationArgs 2)
        let tmp%38#0: bytes = (txna ApplicationArgs 3)
        let tmp%39#0: bytes = (txna ApplicationArgs 4)
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64, elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(tmp%36#0, tmp%37#0, tmp%38#0, tmp%39#0)
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%3#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%3#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%4#0)
        (log tmp%40#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@11: // test_uint64_return_route_L296
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (== tmp%41#0 NoOp)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%46#0: uint64[] = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%45#0)
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@12: // test_bool_return_route_L303
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (== tmp%48#0 NoOp)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (!= tmp%50#0 0u)
        (assert tmp%51#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%52#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let tmp%53#0: bool[] = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%52#0)
        let tmp%54#0: bytes = (concat 0x151f7c75 tmp%53#0)
        (log tmp%54#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@13: // test_tuple_return_route_L310
        let tmp%55#0: uint64 = (txn OnCompletion)
        let tmp%56#0: bool = (== tmp%55#0 NoOp)
        (assert tmp%56#0) // OnCompletion is not NoOp
        let tmp%57#0: uint64 = (txn ApplicationID)
        let tmp%58#0: bool = (!= tmp%57#0 0u)
        (assert tmp%58#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%59#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%60#0: (uint64,bool,bool)[] = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%59#0)
        let tmp%61#0: bytes = (concat 0x151f7c75 tmp%60#0)
        (log tmp%61#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@14: // test_dynamic_tuple_return_route_L317
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (== tmp%62#0 NoOp)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        let tmp%65#0: bool = (!= tmp%64#0 0u)
        (assert tmp%65#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%66#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let tmp%67#0: (uint64,bytes)[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%66#0)
        let tmp%68#0: bytes = (concat 0x151f7c75 tmp%67#0)
        (log tmp%68#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@15: // switch_case_default_L72
        goto block@16
    block@16: // switch_case_next_L72
        goto block@21
    block@17: // bare_routing_L72
        let tmp%69#0: uint64 = (txn OnCompletion)
        switch tmp%69#0 {0u => block@18, * => block@19}
    block@18: // __algopy_default_create_L1
        let tmp%70#0: uint64 = (txn ApplicationID)
        let tmp%71#0: bool = (== tmp%70#0 0u)
        (assert tmp%71#0) // can only call when creating
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create_L1
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@19: // switch_case_default_L72
        goto block@20
    block@20: // switch_case_next_L72
        goto block@21
    block@21: // after_if_else_L72
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
        let popped#0: bytes = (setbit 0x00 0u tmp%2#0)
        let result#0: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#0: uint64 = (/ tmp%3#0 8u)
        let tmp%5#0: uint64 = (+ 2u tmp%4#0)
        let result#0: bytes = (substring3 result#0 0u tmp%5#0)
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#0: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#0

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let new_head#0: bytes = 0x
        let tmp%1#0: uint64 = (* length_minus_1#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let continue_looping%0#0: bool = (< head_offset#0 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = (- item_offset#0 2u)
        let tmp%2#0: bytes = (itob item_offset#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#0: bytes = (concat new_head#0 tmp%3#0)
        goto block@3
    block@3: // for_footer_L110
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%5#0 new_head#0)
        let tmp%7#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%8#0: bytes = (substring3 head_and_tail#0 tmp%7#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%6#0 tmp%8#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#0: bytes = (concat result#0 tmp%5#0)
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%6#0: bool = (< write_offset#0 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%7#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#0: bytes = (concat new_head#0 tmp%3#0)
        goto block@3
    block@3: // for_footer_L203
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#0: uint64 = (len array_head_and_tail#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 tmp%4#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#0: bytes = (concat new_head#0 tmp%7#0)
        goto block@7
    block@7: // for_footer_L208
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#0)
        let tmp%12#0: uint64 = (* array_items_count#0 2u)
        let tmp%13#0: uint64 = (len array_head_and_tail#0)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%16#0: uint64 = (* new_items_count#0 2u)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 tmp%16#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine test_cases.array.immutable.times(n: uint64) -> bytes:
    block@0: // L327
        let result#0: bytes = ""
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L330
        let continue_looping%0#0: bool = (< _i#0 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L331
        let result#0: bytes = (concat result#0 " ")
        goto block@3
    block@3: // for_footer_L330
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L330
        return result#0

subroutine test_cases.array.immutable.add_x(arr: uint64[], x: uint64) -> uint64[]:
    block@0: // L335
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L337
        let continue_looping%0#0: bool = (< i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L338
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%0#1: bytes[8] = (itob i#0)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let encoded%0#0: uint64[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: uint64[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L337
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L337
        return arr#0

subroutine test_cases.array.immutable.pop_x(arr: uint64[], x: uint64) -> uint64[]:
    block@0: // L342
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L344
        let continue_looping%0#0: bool = (< _i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L345
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#0, 8u)
        let arr#0: uint64[] = data%0#0
        goto block@3
    block@3: // for_footer_L344
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@1
    block@4: // after_for_L344
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L73
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: uint64[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%0#1: bytes[8] = (itob 42u)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let encoded%0#0: uint64[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: uint64[] = concat_result%0#0
        let tmp%2#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: uint64 = (- tmp%4#0 1u)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset%0#0: uint64 = (* tmp%5#0 8u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi arc4_item%0#0)
        let tmp%7#0: bool = (== tmp%6#0 42u)
        (assert tmp%7#0)
        let arr#0: uint64[] = test_cases.array.immutable.add_x(arr#0, 5u)
        let tmp%8#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%9#0: bool = (== tmp%8#0 6u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%11#0: uint64 = (- tmp%10#0 1u)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let item_offset%1#0: uint64 = (* tmp%11#0 8u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi arc4_item%1#0)
        let tmp%13#0: bool = (== tmp%12#0 4u)
        (assert tmp%13#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%1#1: bytes[8] = (itob 43u)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat 0x array%encoded%1#1)
        let encoded%1#0: uint64[] = array%data%1#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#0: uint64[] = concat_result%1#0
        let tmp%14#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%15#0: bool = (== tmp%14#0 7u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let item_offset%2#0: uint64 = (* tmp%17#0 8u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 8u) // on error: Index access is out of bounds
        let tmp%18#0: uint64 = (btoi arc4_item%2#0)
        let tmp%19#0: bool = (== tmp%18#0 43u)
        (assert tmp%19#0)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let item_offset%3#0: uint64 = (* 0u 8u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 8u) // on error: Index access is out of bounds
        let tmp%20#0: uint64 = (btoi arc4_item%3#0)
        let tmp%21#0: bool = (== tmp%20#0 42u)
        (assert tmp%21#0)
        let arr#0: uint64[] = test_cases.array.immutable.pop_x(arr#0, 3u)
        let tmp%22#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%25#0: uint64 = (- tmp%24#0 1u)
        let array_head_and_tail%4#0: bytes = ((extract 2 0) arr#0)
        let item_offset%4#0: uint64 = (* tmp%25#0 8u)
        let arc4_item%4#0: bytes = (extract3 array_head_and_tail%4#0 item_offset%4#0 8u) // on error: Index access is out of bounds
        let tmp%26#0: uint64 = (btoi arc4_item%4#0)
        let tmp%27#0: bool = (== tmp%26#0 2u)
        (assert tmp%27#0)
        let arr#0: uint64[] = test_cases.array.immutable.add_x(arr#0, 10u)
        let tmp%28#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%29#0: bool = (== tmp%28#0 14u)
        (assert tmp%29#0)
        let tmp%30#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%31#0: uint64 = (- tmp%30#0 1u)
        let array_head_and_tail%5#0: bytes = ((extract 2 0) arr#0)
        let item_offset%5#0: uint64 = (* tmp%31#0 8u)
        let arc4_item%5#0: bytes = (extract3 array_head_and_tail%5#0 item_offset%5#0 8u) // on error: Index access is out of bounds
        let tmp%32#0: uint64 = (btoi arc4_item%5#0)
        let tmp%33#0: bool = (== tmp%32#0 9u)
        (assert tmp%33#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%2#1: bytes[8] = (itob 44u)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat 0x array%encoded%2#1)
        let encoded%2#0: uint64[] = array%data%2#1
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 encoded%2#0)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let arr#0: uint64[] = concat_result%2#0
        let tmp%34#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let tmp%36#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%37#0: uint64 = (- tmp%36#0 1u)
        let array_head_and_tail%6#0: bytes = ((extract 2 0) arr#0)
        let item_offset%6#0: uint64 = (* tmp%37#0 8u)
        let arc4_item%6#0: bytes = (extract3 array_head_and_tail%6#0 item_offset%6#0 8u) // on error: Index access is out of bounds
        let tmp%38#0: uint64 = (btoi arc4_item%6#0)
        let tmp%39#0: bool = (== tmp%38#0 44u)
        (assert tmp%39#0)
        let val_as_bytes%0#0: bytes[8] = (itob 23u)
        let assigned_value%0#0: bytes[8] = val_as_bytes%0#0
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let index_is_in_bounds%0#0: bool = (< 2u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 arr#0 18u assigned_value%0#0)
        let arr#0: uint64[] = updated_target%0#0
        let tmp%40#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%41#0: bool = (== tmp%40#0 15u)
        (assert tmp%41#0)
        let array_head_and_tail%7#0: bytes = ((extract 2 0) arr#0)
        let item_offset%7#0: uint64 = (* 2u 8u)
        let arc4_item%7#0: bytes = (extract3 array_head_and_tail%7#0 item_offset%7#0 8u) // on error: Index access is out of bounds
        let tmp%42#0: uint64 = (btoi arc4_item%7#0)
        let tmp%43#0: bool = (== tmp%42#0 23u)
        (assert tmp%43#0)
        (app_global_put "a" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L109
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: bool[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L114
        let continue_looping%0#0: bool = (< i#0 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L115
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let to_encode%0#0: bool = (== i#0 tmp%2#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let encoded_item%0#0: bytes[1] = encoded_bool%0#0
        let data%0#0: bytes = (concat 0x encoded_item%0#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(arr#0, data%0#0, 1u, 8u)
        let arr#0: bool[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L114
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L114
        let tmp%3#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%4#0: bool = (== tmp%3#0 length#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (> length#0 0u)
        goto tmp%5#0 ? block@5 : block@6
    block@5: // if_body_L120
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%0#0 0u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let arc4_item%0#0: bytes[1] = encoded_bool%1#0
        let tmp%6#0: bool = (getbit arc4_item%0#0 0u)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L119
        let tmp%8#0: bool = (> length#0 1u)
        goto tmp%8#0 ? block@7 : block@8
    block@7: // if_body_L122
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let index_is_in_bounds%1#0: bool = (< 1u array_length%1#0)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let is_true%1#0: uint64 = (getbit array_head_and_tail%1#0 1u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let arc4_item%1#0: bytes[1] = encoded_bool%2#0
        let tmp%9#0: bool = (getbit arc4_item%1#0 0u)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L121
        let tmp%11#0: bool = (> length#0 2u)
        goto tmp%11#0 ? block@9 : block@10
    block@9: // if_body_L124
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let index_is_in_bounds%2#0: bool = (< 2u array_length%2#0)
        (assert index_is_in_bounds%2#0) // Index access is out of bounds
        let is_true%2#0: uint64 = (getbit array_head_and_tail%2#0 2u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let arc4_item%2#0: bytes[1] = encoded_bool%3#0
        let tmp%12#0: bool = (getbit arc4_item%2#0 0u)
        (assert tmp%12#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L123
        let tmp%13#0: bool = (> length#0 3u)
        goto tmp%13#0 ? block@11 : block@12
    block@11: // if_body_L126
        let tmp%14#0: uint64 = (- length#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let index_is_in_bounds%3#0: bool = (< tmp%14#0 array_length%3#0)
        (assert index_is_in_bounds%3#0) // Index access is out of bounds
        let is_true%3#0: uint64 = (getbit array_head_and_tail%3#0 tmp%14#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%3#0)
        let arc4_item%3#0: bytes[1] = encoded_bool%4#0
        let tmp%15#0: bool = (getbit arc4_item%3#0 0u)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L125
        (app_global_put "g" arr#0)
        let tmp%17#0: bool = (!= length#0 0u)
        goto tmp%17#0 ? block@13 : block@14
    block@13: // if_body_L130
        let (popped%0#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(arr#0)
        let arr#0: bool[] = data%1#0
        let tmp%18#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%19#0: uint64 = (- length#0 1u)
        let tmp%20#0: bool = (== tmp%18#0 tmp%19#0)
        (assert tmp%20#0)
        goto block@14
    block@14: // after_if_else_L129
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L133
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,uint64)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L138
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L139
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: uint64 = (+ i#0 2u)
        let array%sub_item%0#1: bytes[8] = (itob tmp%2#0)
        let array%encoded%0#1: (uint64,uint64)[] = (concat 0x array%sub_item%0#1)
        let array%sub_item%1#1: bytes[8] = (itob tmp%3#0)
        let array%encoded%1#1: (uint64,uint64)[] = (concat array%encoded%0#1 array%sub_item%1#1)
        let array%data%0#1: (uint64,uint64)[] = (concat 0x array%encoded%1#1)
        let encoded%0#0: (uint64,uint64)[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: (uint64,uint64)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L138
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L138
        let tmp%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset%0#0: uint64 = (* 0u 16u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 arc4_item%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let tmp%6#0: bool = (== item0%0%0#0 1u)
        let tmp%7#0: bool = (== item1%0%0#0 2u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%10#0: uint64 = (- tmp%9#0 1u)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let item_offset%1#0: uint64 = (* tmp%10#0 16u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let item0%1#0: bytes = (extract3 arc4_item%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item1%1#0: bytes = (extract3 arc4_item%1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1%0#0: uint64 = (btoi item1%1#0)
        let tmp%11#0: bool = (== item0%1%0#0 5u)
        let tmp%12#0: bool = (== item1%1%0#0 6u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#0, 16u)
        let arr#0: (uint64,uint64)[] = data%0#0
        let tmp%14#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%15#0: bool = (== tmp%14#0 4u)
        (assert tmp%15#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let item_offset%2#0: uint64 = (* 0u 16u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 16u) // on error: Index access is out of bounds
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item1%2#0: bytes = (extract3 arc4_item%2#0 8u 8u) // on error: Index access is out of bounds
        let item1%2%0#0: uint64 = (btoi item1%2#0)
        let tmp%16#0: bool = (== item0%2%0#0 1u)
        let tmp%17#0: bool = (== item1%2%0#0 2u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%20#0: uint64 = (- tmp%19#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let item_offset%3#0: uint64 = (* tmp%20#0 16u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 16u) // on error: Index access is out of bounds
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item1%3#0: bytes = (extract3 arc4_item%3#0 8u 8u) // on error: Index access is out of bounds
        let item1%3%0#0: uint64 = (btoi item1%3#0)
        let tmp%21#0: bool = (== item0%3%0#0 4u)
        let tmp%22#0: bool = (== item1%3%0#0 5u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        (app_global_put "c" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L151
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bool,bool)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L156
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L157
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let tmp%2#0: uint64 = (% i#0 2u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let tmp%4#0: uint64 = (* i#0 3u)
        let tmp%5#0: uint64 = (% tmp%4#0 2u)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        let array%sub_item%0#1: bytes[8] = (itob i#0)
        let array%encoded%0#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%0#1)
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%3#0)
        let array%encoded%1#1: (uint64,bool,bool)[] = (concat array%encoded%0#1 array%encoded_bit%0#1)
        let array%sub_item%1#1: (uint64,bool,bool)[] = (setbit array%encoded%1#1 65u tmp%6#0)
        let array%data%0#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%1#1)
        let encoded%0#0: (uint64,bool,bool)[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: (uint64,bool,bool)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L156
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L156
        let tmp%7#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%8#0: bool = (== tmp%7#0 5u)
        (assert tmp%8#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset%0#0: uint64 = (* 0u 9u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 9u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let is_true%0#0: uint64 = (getbit arc4_item%0#0 64u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let item1%0#0: bytes[1] = encoded_bool%0#0
        let item1%0%0#0: bool = (getbit item1%0#0 0u)
        let is_true%1#0: uint64 = (getbit arc4_item%0#0 65u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let item2%0#0: bytes[1] = encoded_bool%1#0
        let item2%0%0#0: bool = (getbit item2%0#0 0u)
        let foo#0: uint64 = item0%0%0#0
        let bar#0: bool = item1%0%0#0
        let baz#0: bool = item2%0%0#0
        let tmp%9#0: bool = (== foo#0 0u)
        (assert tmp%9#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L166
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bytes)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L171
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L172
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: bytes = (bzero i#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, r_head_and_tail%0#0)
        let arr#0: (uint64,bytes)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L171
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L171
        let tmp%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L175
        let continue_looping%1#0: bool = (< i#0 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L176
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%0#0: uint64 = (* i#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%0#0: uint64 = (+ i#0 1u)
        let has_next%0#0: uint64 = (- array_length%0#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let tmp%6#0: uint64 = (+ i#0 1u)
        let tmp%7#0: bool = (== item0%0%0#0 tmp%6#0)
        (assert tmp%7#0) // expected 1st element to be correct
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%1#0: uint64 = (* i#0 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%1#0: uint64 = (+ i#0 1u)
        let has_next%1#0: uint64 = (- array_length%1#0 next_index%1#0) // on error: Index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let arc4_item%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arc4_item%1#0 8u)
        let item_end_offset%1#0: uint64 = (len arc4_item%1#0)
        let item1%1#0: bytes = (substring3 arc4_item%1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let tmp%8#0: uint64 = (len item1%1%0#0)
        let tmp%9#0: bool = (== tmp%8#0 i#0)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L175
        let i#0: uint64 = (+ i#0 1u)
        goto block@5
    block@8: // after_for_L175
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#0)
        let arr#0: (uint64,bytes)[] = data%0#0
        let tmp%10#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%2#0: uint64 = (* 0u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%2#0: uint64 = (+ 0u 1u)
        let has_next%2#0: uint64 = (- array_length%2#0 next_index%2#0) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bytes = (bzero 0u)
        let tmp%14#0: bool = (== item1%2%0#0 tmp%13#0)
        let tmp%15#0: bool = (&& tmp%12#0 tmp%14#0)
        (assert tmp%15#0) // expected 1, 0
        let tmp%16#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%3#0: uint64 = (* tmp%17#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%3#0)
        let array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%3#0: uint64 = (+ tmp%17#0 1u)
        let has_next%3#0: uint64 = (- array_length%3#0 next_index%3#0) // on error: Index access is out of bounds
        let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%3#0 end_offset%3#0)
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%18#0: bool = (== item0%3%0#0 4u)
        let tmp%19#0: bytes = (bzero 3u)
        let tmp%20#0: bool = (== item1%3%0#0 tmp%19#0)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        (assert tmp%21#0) // expected 4, 3
        (app_global_put "e" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L185
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bytes)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L190
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L191
        let tmp%2#0: uint64 = (+ i#0 1u)
        let tmp%3#0: bytes = test_cases.array.immutable.times(i#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, r_head_and_tail%0#0)
        let arr#0: (uint64,bytes)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L190
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L190
        let tmp%4#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L194
        let continue_looping%1#0: bool = (< i#0 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L195
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%0#0: uint64 = (* i#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%0#0: uint64 = (+ i#0 1u)
        let has_next%0#0: uint64 = (- array_length%0#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let tmp%6#0: uint64 = (+ i#0 1u)
        let tmp%7#0: bool = (== item0%0%0#0 tmp%6#0)
        (assert tmp%7#0) // expected 1st element to be correct
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%1#0: uint64 = (* i#0 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%1#0: uint64 = (+ i#0 1u)
        let has_next%1#0: uint64 = (- array_length%1#0 next_index%1#0) // on error: Index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let arc4_item%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arc4_item%1#0 8u)
        let item_end_offset%1#0: uint64 = (len arc4_item%1#0)
        let item1%1#0: bytes = (substring3 arc4_item%1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let tmp%8#0: bytes = test_cases.array.immutable.times(i#0)
        let tmp%9#0: bool = (== item1%1%0#0 tmp%8#0)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L194
        let i#0: uint64 = (+ i#0 1u)
        goto block@5
    block@8: // after_for_L194
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#0)
        let arr#0: (uint64,bytes)[] = data%0#0
        let tmp%10#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%2#0: uint64 = (* 0u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%2#0: uint64 = (+ 0u 1u)
        let has_next%2#0: uint64 = (- array_length%2#0 next_index%2#0) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bool = (== item1%2%0#0 "")
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // expected 1, 0
        let tmp%15#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%16#0: uint64 = (- tmp%15#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#0)
        let item_offset_offset%3#0: uint64 = (* tmp%16#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%3#0)
        let array_length%3#0: uint64 = (extract_uint16 arr#0 0u)
        let next_index%3#0: uint64 = (+ tmp%16#0 1u)
        let has_next%3#0: uint64 = (- array_length%3#0 next_index%3#0) // on error: Index access is out of bounds
        let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%3#0 end_offset%3#0)
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%17#0: bool = (== item0%3%0#0 4u)
        let tmp%18#0: bool = (== item1%3%0#0 "   ")
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // expected 4, 3
        (app_global_put "f" arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L204
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr2#0: (bool,bool)[] = array_data%0#0
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let arr7#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%1#0
        let array_data%2#0: bytes = (concat 0x0000 0x)
        let arr8#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%2#0
        let array_data%3#0: bytes = (concat 0x0000 0x)
        let arr9#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%3#0
        let tmp%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%5#0: bool = (== tmp%4#0 0u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        (assert tmp%7#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L215
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L216
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr2#0)
        let tmp%8#0: bool = (== i#0 0u)
        let tmp%9#0: bool = (== i#0 1u)
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%8#0)
        let array%encoded%0#1: (bool,bool)[] = (concat 0x array%encoded_bit%0#1)
        let array%sub_item%0#1: (bool,bool)[] = (setbit array%encoded%0#1 1u tmp%9#0)
        let array%data%0#1: (bool,bool)[] = (concat 0x array%sub_item%0#1)
        let encoded%0#0: (bool,bool)[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr2#0: (bool,bool)[] = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr7#0)
        let tmp%10#0: bool = (== i#0 0u)
        let tmp%11#0: bool = (== i#0 1u)
        let tmp%12#0: bool = (== i#0 2u)
        let tmp%13#0: bool = (== i#0 3u)
        let tmp%14#0: bool = (== i#0 4u)
        let tmp%15#0: bool = (== i#0 5u)
        let tmp%16#0: bool = (== i#0 6u)
        let tmp%17#0: uint64 = (+ i#0 1u)
        let array%sub_item%1#1: bytes[8] = (itob i#0)
        let array%encoded%1#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%sub_item%1#1)
        let array%encoded_bit%1#1: bytes = (select 0x00 0x80 tmp%10#0)
        let array%encoded%2#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%encoded%1#1 array%encoded_bit%1#1)
        let array%sub_item%2#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%encoded%2#1 65u tmp%11#0)
        let array%sub_item%3#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%2#1 66u tmp%12#0)
        let array%sub_item%4#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%3#1 67u tmp%13#0)
        let array%sub_item%5#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%4#1 68u tmp%14#0)
        let array%sub_item%6#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%5#1 69u tmp%15#0)
        let array%sub_item%7#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%6#1 70u tmp%16#0)
        let array%sub_item%8#1: bytes[8] = (itob tmp%17#0)
        let array%encoded%3#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%7#1 array%sub_item%8#1)
        let array%data%1#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%encoded%3#1)
        let encoded%1#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array%data%1#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%0#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%0#0 17u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr7#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%1#0
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) arr8#0)
        let tmp%18#0: bool = (== i#0 0u)
        let tmp%19#0: bool = (== i#0 1u)
        let tmp%20#0: bool = (== i#0 2u)
        let tmp%21#0: bool = (== i#0 3u)
        let tmp%22#0: bool = (== i#0 4u)
        let tmp%23#0: bool = (== i#0 5u)
        let tmp%24#0: bool = (== i#0 6u)
        let tmp%25#0: bool = (== i#0 7u)
        let tmp%26#0: uint64 = (+ i#0 1u)
        let array%sub_item%9#1: bytes[8] = (itob i#0)
        let array%encoded%4#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%sub_item%9#1)
        let array%encoded_bit%2#1: bytes = (select 0x00 0x80 tmp%18#0)
        let array%encoded%5#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%encoded%4#1 array%encoded_bit%2#1)
        let array%sub_item%10#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%encoded%5#1 65u tmp%19#0)
        let array%sub_item%11#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%10#1 66u tmp%20#0)
        let array%sub_item%12#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%11#1 67u tmp%21#0)
        let array%sub_item%13#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%12#1 68u tmp%22#0)
        let array%sub_item%14#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%13#1 69u tmp%23#0)
        let array%sub_item%15#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%14#1 70u tmp%24#0)
        let array%sub_item%16#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%15#1 71u tmp%25#0)
        let array%sub_item%17#1: bytes[8] = (itob tmp%26#0)
        let array%encoded%6#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%16#1 array%sub_item%17#1)
        let array%data%2#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%encoded%6#1)
        let encoded%2#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array%data%2#1
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 encoded%2#0)
        let byte_len%1#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%1#0 17u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let arr8#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%2#0
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) arr9#0)
        let tmp%27#0: bool = (== i#0 0u)
        let tmp%28#0: bool = (== i#0 1u)
        let tmp%29#0: bool = (== i#0 2u)
        let tmp%30#0: bool = (== i#0 3u)
        let tmp%31#0: bool = (== i#0 4u)
        let tmp%32#0: bool = (== i#0 5u)
        let tmp%33#0: bool = (== i#0 6u)
        let tmp%34#0: bool = (== i#0 7u)
        let tmp%35#0: bool = (== i#0 8u)
        let tmp%36#0: uint64 = (+ i#0 1u)
        let array%sub_item%18#1: bytes[8] = (itob i#0)
        let array%encoded%7#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%sub_item%18#1)
        let array%encoded_bit%3#1: bytes = (select 0x00 0x80 tmp%27#0)
        let array%encoded%8#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%encoded%7#1 array%encoded_bit%3#1)
        let array%sub_item%19#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%encoded%8#1 65u tmp%28#0)
        let array%sub_item%20#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%19#1 66u tmp%29#0)
        let array%sub_item%21#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%20#1 67u tmp%30#0)
        let array%sub_item%22#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%21#1 68u tmp%31#0)
        let array%sub_item%23#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%22#1 69u tmp%32#0)
        let array%sub_item%24#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%23#1 70u tmp%33#0)
        let array%sub_item%25#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%24#1 71u tmp%34#0)
        let array%sub_item%26#1: bytes = (setbit 0x00 0u tmp%35#0)
        let array%encoded%9#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%25#1 array%sub_item%26#1)
        let array%sub_item%27#1: bytes[8] = (itob tmp%36#0)
        let array%encoded%10#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%encoded%9#1 array%sub_item%27#1)
        let array%data%3#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat 0x array%encoded%10#1)
        let encoded%3#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array%data%3#1
        let concatenated%3#0: bytes = (concat expr_value_trimmed%3#0 encoded%3#0)
        let byte_len%2#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%2#0 18u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let arr9#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%3#0
        goto block@3
    block@3: // for_footer_L215
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L215
        let tmp%37#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%38#0: bool = (== tmp%37#0 5u)
        (assert tmp%38#0)
        let tmp%39#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%40#0: bool = (== tmp%39#0 5u)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%42#0: bool = (== tmp%41#0 5u)
        (assert tmp%42#0)
        let tmp%43#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%44#0: bool = (== tmp%43#0 5u)
        (assert tmp%44#0)
        (app_global_put "bool2" arr2#0)
        (app_global_put "bool7" arr7#0)
        (app_global_put "bool8" arr8#0)
        (app_global_put "bool9" arr9#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: uint64[], arr2: bool[], arr3: (uint64,bool,bool)[], arr4: (uint64,bytes)[]) -> <uint64, uint64, uint64, uint64>:
    block@0: // L269
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr1#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L278
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L279
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr1#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let value_at_index%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let i#0: uint64 = (btoi value_at_index%0#0)
        let sum1#0: uint64 = (+ sum1#0 i#0)
        goto block@3
    block@3: // for_footer_L278
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L278
        let array_length%1#0: uint64 = (extract_uint16 arr2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L280
        let continue_looping%1#0: bool = (< item_index_internal%1#0 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L281
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr2#0)
        let is_true%0#0: uint64 = (getbit array_head_and_tail%1#0 item_index_internal%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let value_at_index%1#0: bytes[1] = encoded_bool%0#0
        let b#0: bool = (getbit value_at_index%1#0 0u)
        let sum2#10: uint64 = sum2#0
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L282
        let sum2#0: uint64 = (+ sum2#0 1u)
        let sum2#10: uint64 = sum2#0
        goto block@8
    block@8: // after_if_else_L281
        let sum2#0: uint64 = sum2#10
        goto block@9
    block@9: // for_footer_L280
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@5
    block@10: // after_for_L280
        let array_length%2#0: uint64 = (extract_uint16 arr3#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L283
        let continue_looping%2#0: bool = (< item_index_internal%2#0 array_length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L284
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr3#0)
        let item_offset%1#0: uint64 = (* item_index_internal%2#0 9u)
        let value_at_index%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%1#0 9u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 value_at_index%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let is_true%1#0: uint64 = (getbit value_at_index%2#0 64u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let item1%0#0: bytes[1] = encoded_bool%1#0
        let item1%0%0#0: bool = (getbit item1%0#0 0u)
        let is_true%2#0: uint64 = (getbit value_at_index%2#0 65u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%0#0: bytes[1] = encoded_bool%2#0
        let item2%0%0#0: bool = (getbit item2%0#0 0u)
        let tup.foo#0: uint64 = item0%0%0#0
        let tup.bar#0: bool = item1%0%0#0
        let tup.baz#0: bool = item2%0%0#0
        let sum3#0: uint64 = (+ sum3#0 tup.foo#0)
        let sum3#15: uint64 = sum3#0
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L286
        let sum3#0: uint64 = (+ sum3#0 1u)
        let sum3#15: uint64 = sum3#0
        goto block@14
    block@14: // after_if_else_L285
        let sum3#0: uint64 = sum3#15
        let sum3#15: uint64 = sum3#0
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L288
        let sum3#0: uint64 = (+ sum3#0 1u)
        let sum3#15: uint64 = sum3#0
        goto block@16
    block@16: // after_if_else_L287
        let sum3#0: uint64 = sum3#15
        goto block@17
    block@17: // for_footer_L283
        let item_index_internal%2#0: uint64 = (+ item_index_internal%2#0 1u)
        goto block@11
    block@18: // after_for_L283
        let array_length%3#0: uint64 = (extract_uint16 arr4#0 0u)
        let item_index_internal%3#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L289
        let continue_looping%3#0: bool = (< item_index_internal%3#0 array_length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L290
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr4#0)
        let item_offset_offset%0#0: uint64 = (* item_index_internal%3#0 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%0#0)
        let array_length%4#0: uint64 = (extract_uint16 arr4#0 0u)
        let next_index%0#0: uint64 = (+ item_index_internal%3#0 1u)
        let has_next%0#0: uint64 = (- array_length%4#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let value_at_index%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%2#0 end_offset%0#0)
        let item0%1#0: bytes = (extract3 value_at_index%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 value_at_index%3#0 8u)
        let item_end_offset%0#0: uint64 = (len value_at_index%3#0)
        let item1%1#0: bytes = (substring3 value_at_index%3#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let dyn_tup.foo#0: uint64 = item0%1%0#0
        let dyn_tup.bar#0: bytes = item1%1%0#0
        let idx#0: uint64 = item_index_internal%3#0
        let sum4#0: uint64 = (+ sum4#0 dyn_tup.foo#0)
        let tmp%0#0: uint64 = (len dyn_tup.bar#0)
        let sum4#0: uint64 = (+ sum4#0 tmp%0#0)
        let tmp%1#0: uint64 = (len dyn_tup.bar#0)
        let tmp%2#0: bool = (== tmp%1#0 idx#0)
        (assert tmp%2#0) // expected string length to match index
        goto block@21
    block@21: // for_footer_L289
        let item_index_internal%3#0: uint64 = (+ item_index_internal%3#0 1u)
        goto block@19
    block@22: // after_for_L289
        return sum1#0 sum2#0 sum3#0 sum4#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> uint64[]:
    block@0: // L296
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let array%sub_item%0#1: bytes[8] = (itob 1u)
        let array%encoded%0#1: uint64[] = (concat 0x array%sub_item%0#1)
        let array%data%0#1: uint64[] = (concat 0x array%encoded%0#1)
        let array%sub_item%1#1: bytes[8] = (itob 2u)
        let array%encoded%1#1: uint64[] = (concat 0x array%sub_item%1#1)
        let array%data%1#1: uint64[] = (concat array%data%0#1 array%encoded%1#1)
        let array%sub_item%2#1: bytes[8] = (itob 3u)
        let array%encoded%2#1: uint64[] = (concat 0x array%sub_item%2#1)
        let array%data%2#1: uint64[] = (concat array%data%1#1 array%encoded%2#1)
        let encoded%0#0: uint64[] = array%data%2#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: uint64[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L299
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L300
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#0)
        let array%sub_item%3#1: bytes[8] = (itob i#0)
        let array%encoded%3#1: uint64[] = (concat 0x array%sub_item%3#1)
        let array%data%3#1: uint64[] = (concat 0x array%encoded%3#1)
        let encoded%1#0: uint64[] = array%data%3#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#0: uint64[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L299
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L299
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bool[]:
    block@0: // L303
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%0#0: bytes[1] = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_item%1#0: bytes[1] = encoded_bool%1#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%2#0: bytes[1] = encoded_bool%2#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_item%3#0: bytes[1] = encoded_bool%3#0
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%4#0: bytes[1] = encoded_bool%4#0
        let data%0#0: bytes = (concat 0x encoded_item%0#0)
        let data%1#0: bytes = (concat data%0#0 encoded_item%1#0)
        let data%2#0: bytes = (concat data%1#0 encoded_item%2#0)
        let data%3#0: bytes = (concat data%2#0 encoded_item%3#0)
        let data%4#0: bytes = (concat data%3#0 encoded_item%4#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(array_data%0#0, data%4#0, 5u, 8u)
        let arr#0: bool[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L306
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L307
        let tmp%0#0: uint64 = (% i#0 2u)
        let to_encode%0#0: bool = (== tmp%0#0 0u)
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let encoded_item%5#0: bytes[1] = encoded_bool%5#0
        let data%5#0: bytes = (concat 0x encoded_item%5#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(arr#0, data%5#0, 1u, 8u)
        let arr#0: bool[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L306
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L306
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> (uint64,bool,bool)[]:
    block@0: // L310
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let array%sub_item%0#1: bytes[8] = (itob 0u)
        let array%encoded%0#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%0#1)
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 1u)
        let array%encoded%1#1: (uint64,bool,bool)[] = (concat array%encoded%0#1 array%encoded_bit%0#1)
        let array%sub_item%1#1: (uint64,bool,bool)[] = (setbit array%encoded%1#1 65u 0u)
        let array%data%0#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%1#1)
        let encoded%0#0: (uint64,bool,bool)[] = array%data%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: (uint64,bool,bool)[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L313
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L314
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#0)
        let tmp%0#0: uint64 = (% i#0 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let tmp%2#0: uint64 = (% i#0 3u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let array%sub_item%2#1: bytes[8] = (itob i#0)
        let array%encoded%2#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%2#1)
        let array%encoded_bit%1#1: bytes = (select 0x00 0x80 tmp%1#0)
        let array%encoded%3#1: (uint64,bool,bool)[] = (concat array%encoded%2#1 array%encoded_bit%1#1)
        let array%sub_item%3#1: (uint64,bool,bool)[] = (setbit array%encoded%3#1 65u tmp%3#0)
        let array%data%1#1: (uint64,bool,bool)[] = (concat 0x array%sub_item%3#1)
        let encoded%1#0: (uint64,bool,bool)[] = array%data%1#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 9u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#0: (uint64,bool,bool)[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L313
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L313
        return arr#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> (uint64,bytes)[]:
    block@0: // L317
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let val_as_bytes%0#0: bytes[8] = (itob 0u)
        let length%0#0: uint64 = (len "Hello")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Hello")
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 array_data%0#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) array_data%0#0)
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, r_head_and_tail%0#0)
        let arr#0: (uint64,bytes)[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L320
        let continue_looping%0#0: bool = (< i#0 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L321
        let tmp%0#0: bytes = test_cases.array.immutable.times(i#0)
        let val_as_bytes%1#0: bytes[8] = (itob i#0)
        let length%1#0: uint64 = (len tmp%0#0)
        let as_bytes%3#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat 0x val_as_bytes%1#0)
        let as_bytes%4#0: bytes[8] = (itob 10u)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        let encoded_tuple%1#0: bytes = encoded_tuple_buffer%7#0
        let as_bytes%5#0: bytes[8] = (itob 2u)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let result%2#0: bytes = (concat 0x next_item_head%1#0)
        let result%3#0: bytes = (concat result%2#0 encoded_tuple%1#0)
        let l_count%1#0: uint64 = (extract_uint16 arr#0 0u)
        let l_head_and_tail%1#0: bytes = ((extract 2 0) arr#0)
        let r_head_and_tail%1#0: bytes = result%3#0
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, r_head_and_tail%1#0)
        let arr#0: (uint64,bytes)[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L320
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L320
        return arr#0