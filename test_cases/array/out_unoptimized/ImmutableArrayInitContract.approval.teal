#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 2 1 0
    bytecblock 0x
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0
    b main_block@0

main_block@0:
    b main_block@1

main_block@1:
    // array/immutable-init.py:10
    // class ImmutableArrayInitContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_3 // 0
    !=
    bz main___algopy_default_create@11
    b main_abi_routing@2

main_abi_routing@2:
    // array/immutable-init.py:10
    // class ImmutableArrayInitContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_3 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_3 // 0
    !=
    bz main_create_NoOp@9
    b main_call_NoOp@3

main_call_NoOp@3:
    // array/immutable-init.py:10
    // class ImmutableArrayInitContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x8434ba2a // method "test_immutable_array_init()void"
    pushbytes 0x63aabba0 // method "test_immutable_array_init_without_type_generic()void"
    pushbytes 0xdbaf034e // method "test_reference_array_init()void"
    pushbytes 0xa9d14554 // method "test_reference_array_init_without_type_generic()void"
    uncover 4
    match main_test_immutable_array_init_route@4 main_test_immutable_array_init_without_type_generic_route@5 main_test_reference_array_init_route@6 main_test_reference_array_init_without_type_generic_route@7
    b main_switch_case_next@8

main_switch_case_next@8:
    b main_after_if_else@10

main_after_if_else@10:
    b main_after_if_else@12

main_after_if_else@12:
    // array/immutable-init.py:10
    // class ImmutableArrayInitContract(arc4.ARC4Contract):
    err

main_test_reference_array_init_without_type_generic_route@7:
    // array/immutable-init.py:77
    // @arc4.abimethod()
    callsub test_reference_array_init_without_type_generic
    b main_switch_case_next@8

main_test_reference_array_init_route@6:
    // array/immutable-init.py:55
    // @arc4.abimethod()
    callsub test_reference_array_init
    b main_switch_case_next@8

main_test_immutable_array_init_without_type_generic_route@5:
    // array/immutable-init.py:33
    // @arc4.abimethod()
    callsub test_immutable_array_init_without_type_generic
    b main_switch_case_next@8

main_test_immutable_array_init_route@4:
    // array/immutable-init.py:11
    // @arc4.abimethod()
    callsub test_immutable_array_init
    b main_switch_case_next@8

main_create_NoOp@9:
    b main_after_if_else@10

main___algopy_default_create@11:
    txn OnCompletion
    intc_3 // NoOp
    ==
    txn ApplicationID
    intc_3 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@14

main_block@14:
    b main_after_inlined_test_cases.array.immutable-init.ImmutableArrayInitContract.__algopy_default_create@15

main_after_inlined_test_cases.array.immutable-init.ImmutableArrayInitContract.__algopy_default_create@15:
    intc_2 // 1
    return


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init[routing]() -> void:
test_immutable_array_init:
    b test_immutable_array_init_block@0

test_immutable_array_init_block@0:
    // array/immutable-init.py:11
    // @arc4.abimethod()
    callsub test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init
    intc_2 // 1
    return


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic[routing]() -> void:
test_immutable_array_init_without_type_generic:
    b test_immutable_array_init_without_type_generic_block@0

test_immutable_array_init_without_type_generic_block@0:
    // array/immutable-init.py:33
    // @arc4.abimethod()
    callsub test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic
    intc_2 // 1
    return


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init[routing]() -> void:
test_reference_array_init:
    b test_reference_array_init_block@0

test_reference_array_init_block@0:
    // array/immutable-init.py:55
    // @arc4.abimethod()
    callsub test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init
    intc_2 // 1
    return


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic[routing]() -> void:
test_reference_array_init_without_type_generic:
    b test_reference_array_init_without_type_generic_block@0

test_reference_array_init_without_type_generic_block@0:
    // array/immutable-init.py:77
    // @arc4.abimethod()
    callsub test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic
    intc_2 // 1
    return


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init() -> void:
test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init:
    b test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_block@0

test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_block@0:
    // array/immutable-init.py:13
    // a1 = ImmutableArray[UInt64]((UInt64(1), UInt64(2), UInt64(3)))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // array/immutable-init.py:15
    // a2 = ImmutableArray[UInt64](FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    pushint 3 // 3
    itob
    extract 6 2
    uncover 1
    concat
    // array/immutable-init.py:16
    // assert a1.length == a2.length
    dig 1
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    uncover 2
    ==
    assert
    // array/immutable-init.py:17
    // assert a1[0] == a2[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:18
    // assert a1[1] == a2[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:19
    // assert a1[2] == a2[2]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:21
    // a3 = ImmutableArray[UInt64](ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    dup
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    uncover 1
    concat
    // array/immutable-init.py:22
    // assert a3.length == 3
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    pushint 3 // 3
    ==
    assert
    // array/immutable-init.py:23
    // assert a1[0] == a3[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:24
    // assert a1[1] == a3[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:25
    // assert a1[2] == a3[2]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:27
    // a4 = ImmutableArray[UInt64](ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // array/immutable-init.py:28
    // assert a1.length == a4.length
    dig 1
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    uncover 2
    ==
    assert
    // array/immutable-init.py:29
    // assert a1[0] == a4[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:30
    // assert a1[1] == a4[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:31
    // assert a1[2] == a4[2]
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    retsub


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic() -> void:
test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic:
    b test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic_block@0

test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic_block@0:
    // array/immutable-init.py:35
    // a1 = ImmutableArray((UInt64(1), UInt64(2), UInt64(3)))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // array/immutable-init.py:37
    // a2 = ImmutableArray(FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    pushint 3 // 3
    itob
    extract 6 2
    uncover 1
    concat
    // array/immutable-init.py:38
    // assert a1.length == a2.length
    dig 1
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    uncover 2
    ==
    assert
    // array/immutable-init.py:39
    // assert a1[0] == a2[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:40
    // assert a1[1] == a2[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:41
    // assert a1[2] == a2[2]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:43
    // a3 = ImmutableArray(ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    dup
    len
    intc_0 // 8
    /
    itob
    extract 6 2
    uncover 1
    concat
    // array/immutable-init.py:44
    // assert a3.length == 3
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    pushint 3 // 3
    ==
    assert
    // array/immutable-init.py:45
    // assert a1[0] == a3[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:46
    // assert a1[1] == a3[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:47
    // assert a1[2] == a3[2]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:49
    // a4 = ImmutableArray(ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // array/immutable-init.py:50
    // assert a1.length == a4.length
    dig 1
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    cover 1
    dup
    intc_3 // 0
    extract_uint16 // on error: invalid array length header
    uncover 2
    ==
    assert
    // array/immutable-init.py:51
    // assert a1[0] == a4[0]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:52
    // assert a1[1] == a4[1]
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    dig 2
    intc_1 // 2
    uncover 3
    substring3
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:53
    // assert a1[2] == a4[2]
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    len
    cover 1
    uncover 2
    intc_1 // 2
    uncover 3
    substring3
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    retsub


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init() -> void:
test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init:
    b test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_block@0

test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_block@0:
    // array/immutable-init.py:57
    // a1 = ReferenceArray[UInt64]((UInt64(1), UInt64(2), UInt64(3)))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:59
    // a2 = ReferenceArray[UInt64](FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:60
    // assert a1.length == a2.length
    dig 1
    loads
    len
    intc_0 // 8
    /
    cover 1
    dup
    loads
    len
    intc_0 // 8
    /
    uncover 2
    ==
    assert
    // array/immutable-init.py:61
    // assert a1[0] == a2[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:62
    // assert a1[1] == a2[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:63
    // assert a1[2] == a2[2]
    dig 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:65
    // a3 = ReferenceArray[UInt64](ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:66
    // assert a3.length == 3
    dup
    loads
    len
    intc_0 // 8
    /
    pushint 3 // 3
    ==
    assert
    // array/immutable-init.py:67
    // assert a1[0] == a3[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:68
    // assert a1[1] == a3[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:69
    // assert a1[2] == a3[2]
    dig 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:71
    // a4 = ReferenceArray[UInt64](ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    cover 1
    dig 1
    uncover 1
    stores
    // array/immutable-init.py:72
    // assert a1.length == a4.length
    dig 1
    loads
    len
    intc_0 // 8
    /
    cover 1
    dup
    loads
    len
    intc_0 // 8
    /
    uncover 2
    ==
    assert
    // array/immutable-init.py:73
    // assert a1[0] == a4[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:74
    // assert a1[1] == a4[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:75
    // assert a1[2] == a4[2]
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    retsub


// test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic() -> void:
test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic:
    b test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic_block@0

test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic_block@0:
    // array/immutable-init.py:79
    // a1 = ReferenceArray((UInt64(1), UInt64(2), UInt64(3)))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:81
    // a2 = ReferenceArray(FixedArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:82
    // assert a1.length == a2.length
    dig 1
    loads
    len
    intc_0 // 8
    /
    cover 1
    dup
    loads
    len
    intc_0 // 8
    /
    uncover 2
    ==
    assert
    // array/immutable-init.py:83
    // assert a1[0] == a2[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:84
    // assert a1[1] == a2[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:85
    // assert a1[2] == a2[2]
    dig 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:87
    // a3 = ReferenceArray(ImmutableArray((UInt64(1), UInt64(2), UInt64(3))))
    pushint 3 // 3
    itob
    extract 6 2
    intc_2 // 1
    itob
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    dup
    len
    cover 1
    intc_1 // 2
    uncover 2
    substring3
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/immutable-init.py:88
    // assert a3.length == 3
    dup
    loads
    len
    intc_0 // 8
    /
    pushint 3 // 3
    ==
    assert
    // array/immutable-init.py:89
    // assert a1[0] == a3[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:90
    // assert a1[1] == a3[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:91
    // assert a1[2] == a3[2]
    dig 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:93
    // a4 = ReferenceArray(ReferenceArray((UInt64(1), UInt64(2), UInt64(3))))
    intc_2 // 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_1 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    callsub _puya_lib.mem.new_slot
    cover 1
    dig 1
    uncover 1
    stores
    // array/immutable-init.py:94
    // assert a1.length == a4.length
    dig 1
    loads
    len
    intc_0 // 8
    /
    cover 1
    dup
    loads
    len
    intc_0 // 8
    /
    uncover 2
    ==
    assert
    // array/immutable-init.py:95
    // assert a1[0] == a4[0]
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_3 // 0
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:96
    // assert a1[1] == a4[1]
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    dig 1
    loads
    intc_2 // 1
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    // array/immutable-init.py:97
    // assert a1[2] == a4[2]
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    uncover 1
    loads
    intc_1 // 2
    intc_0 // 8
    *
    intc_0 // 8
    extract3 // on error: index access is out of bounds
    btoi
    ==
    assert
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    b _puya_lib.mem.new_slot@entry

_puya_lib.mem.new_slot@entry:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_3 // 0
    setbit // on error: no available slots
    store 0
    retsub
