main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L12
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_implicit_conversion_abi_call(uint64[],application)void" => block@3, * => block@4}
    block@3: // test_implicit_conversion_abi_call_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_encoded_uint64[]%0#0: encoded_uint64[] = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%8#0: uint64 = ((txnas Applications) tmp%7#0)
        test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(reinterpret_encoded_uint64[]%0#0, tmp%8#0)
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@4: // switch_case_default_L12
        goto block@5
    block@5: // switch_case_next_L12
        goto block@10
    block@6: // bare_routing_L12
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__algopy_default_create_L1
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@8: // switch_case_default_L12
        goto block@9
    block@9: // switch_case_next_L12
        goto block@10
    block@10: // after_if_else_L12
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#0: bytes = (concat new_head#0 tmp%3#0)
        goto block@3
    block@3: // for_footer_L203
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#0: uint64 = (len array_head_and_tail#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 tmp%4#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#0: bytes = (concat new_head#0 tmp%7#0)
        goto block@7
    block@7: // for_footer_L208
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#0)
        let tmp%12#0: uint64 = (* array_items_count#0 2u)
        let tmp%13#0: uint64 = (len array_head_and_tail#0)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%16#0: uint64 = (* new_items_count#0 2u)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 tmp%16#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(arr: encoded_uint64[], app: uint64) -> void:
    block@0: // L13
        itxn_begin
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: encoded_uint64[] = arr#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L18
        itxn_submit
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let nested_arr#0: encoded_uint64[][] = array_data%0#0
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let result%1#0: bytes = (concat result%0#0 arr#0)
        let l_count%0#0: uint64 = (extract_uint16 nested_arr#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) nested_arr#0)
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, r_head_and_tail%0#0)
        let nested_arr#0: encoded_uint64[][] = concat_result%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: encoded_uint64[][] = nested_arr#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[][])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L22
        itxn_submit
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let indirect_nested_arr#0: (encoded_uint64[],encoded_uint64)[] = array_data%1#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let as_bytes%1#0: bytes[8] = (itob 10u)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x offset_as_uint16%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 arr#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%2#0: bytes = (concat 0x next_item_head%1#0)
        let result%3#0: bytes = (concat result%2#0 encoded_tuple%0#0)
        let l_count%1#0: uint64 = (extract_uint16 indirect_nested_arr#0 0u)
        let l_head_and_tail%1#0: bytes = ((extract 2 0) indirect_nested_arr#0)
        let r_head_and_tail%1#0: bytes = result%3#0
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, r_head_and_tail%1#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: (encoded_uint64[],encoded_uint64)[] = indirect_nested_arr#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call((uint64[],uint64)[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L26
        itxn_submit
        return 