main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L12
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_implicit_conversion_abi_call(uint64[],uint64)void" => block@3, * => block@4}
    block@3: // test_implicit_conversion_abi_call_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]()
        goto block@5
    block@4: // switch_case_default_L12
        goto block@5
    block@5: // switch_case_next_L12
        goto block@10
    block@6: // bare_routing_L12
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__algopy_default_create_L1
        exit 1u
    block@8: // switch_case_default_L12
        goto block@9
    block@9: // switch_case_next_L12
        goto block@10
    block@10: // after_if_else_L12
        exit 0u
    block@11: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let tmp%0#0: uint64 = (* new_items_count#0 2u)
        let item_offset_adjustment#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat new_head#0 tmp%5#0)
        let new_head#0: bytes = tmp%6#0
        goto block@3
    block@3: // for_footer_L203
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let tmp%7#0: uint64 = (len array_head_and_tail#0)
        let item_offset_adjustment#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 tmp%8#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let tmp%9#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let item_offset#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let tmp%13#0: bytes = (concat new_head#0 tmp%12#0)
        let new_head#0: bytes = tmp%13#0
        goto block@7
    block@7: // for_footer_L208
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#0)
        let tmp%18#0: uint64 = (* array_items_count#0 2u)
        let tmp%19#0: uint64 = (len array_head_and_tail#0)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%18#0 tmp%19#0)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%22#0: uint64 = (* new_items_count#0 2u)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 tmp%22#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]() -> void:
    block@0: // L13
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(reinterpret_Encoded(len+uint64[])%0#0, tmp%0#0)
        exit 1u

subroutine test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(arr: Encoded(len+uint64[]), app: uint64) -> void:
    block@0: // L13
        itxn_begin
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint64[]) = arr#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L18
        itxn_submit
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+(len+uint64[])[]) = aggregate%as_Encoded(len+(len+uint64[])[])%0#0
        let nested_arr#0: Encoded(len+(len+uint64[])[]) = encoded_array%0#0
        let extract_uint16%0#0: uint64 = (extract_uint16 nested_arr#0 0u)
        let total_length%0#0: uint64 = (len nested_arr#0)
        let extract_to_end%0#0: bytes = (substring3 nested_arr#0 2u total_length%0#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%0#0: bytes = (concat 0x aggregate%offset_as_uint16%0#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%0#0 arr#0)
        let aggregate%as_Encoded((len+uint64[])[])%0#0: Encoded((len+uint64[])[]) = aggregate%concat%0#0
        let tmp%0#0: Encoded((len+uint64[])[]) = aggregate%as_Encoded((len+uint64[])[])%0#0
        let as_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%0#0)
        let nested_arr#0: Encoded(len+(len+uint64[])[]) = as_Encoded(len+(len+uint64[])[])%0#0
        itxn_begin
        let inner_txn_params%1%%param_ApplicationArgs_idx_1#0: Encoded(len+(len+uint64[])[]) = nested_arr#0
        let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[][])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%1%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L22
        itxn_submit
        let aggregate%as_bytes%2#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%as_Encoded(len+((len+uint64[]),uint64)[])%0#0: Encoded(len+((len+uint64[]),uint64)[]) = aggregate%len_u16%1#0
        let encoded_array%1#0: Encoded(len+((len+uint64[]),uint64)[]) = aggregate%as_Encoded(len+((len+uint64[]),uint64)[])%0#0
        let indirect_nested_arr#0: Encoded(len+((len+uint64[]),uint64)[]) = encoded_array%1#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: uint64 = aggregate%array_length%0#0
        let extract_uint16%1#0: uint64 = (extract_uint16 indirect_nested_arr#0 0u)
        let total_length%1#0: uint64 = (len indirect_nested_arr#0)
        let extract_to_end%1#0: bytes = (substring3 indirect_nested_arr#0 2u total_length%1#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%head%1#0: bytes = (concat 0x aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%2#0 arr#0)
        let aggregate%as_Encoded((len+uint64[]),uint64)%0#0: Encoded((len+uint64[]),uint64) = aggregate%concat%1#0
        let aggregate%as_bytes%4#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%3#0: bytes = (concat 0x aggregate%offset_as_uint16%2#0)
        let aggregate%concat%2#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded((len+uint64[]),uint64)%0#0)
        let aggregate%as_Encoded(((len+uint64[]),uint64)[])%0#0: Encoded(((len+uint64[]),uint64)[]) = aggregate%concat%2#0
        let tmp%2#0: Encoded(((len+uint64[]),uint64)[]) = aggregate%as_Encoded(((len+uint64[]),uint64)[])%0#0
        let as_Encoded(len+((len+uint64[]),uint64)[])%0#0: Encoded(len+((len+uint64[]),uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%1#0, 1u, tmp%2#0)
        itxn_begin
        let inner_txn_params%2%%param_ApplicationArgs_idx_1#0: Encoded(len+((len+uint64[]),uint64)[]) = indirect_nested_arr#0
        let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "dont_call((uint64[],uint64)[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%2%%param_ApplicationArgs_idx_1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@3
    block@3: // next_txn_L26
        itxn_submit
        return 