slot_allocation(dynamic, reserved=[])
main test_cases.array.fixed_size.FixedSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.array.fixed_size.FixedSizeContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine test_cases.array.fixed_size.path_length(path: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[]*) -> uint64:
    block@0: // L98
        let slot_contents%0#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%0#1: uint64 = (* 0u 80u)
        let array%value%0#1: bytes = (extract3 slot_contents%0#0 array%bytes_index%0#1 80u)
        let array%sub_item%0#1: bytes = (extract3 array%value%0#1 0u 8u)
        let array%sub_item%1#1: bytes = (extract3 array%value%0#1 8u 8u)
        let array%sub_item%2#1: uint64 = (btoi array%sub_item%1#1)
        let last_point.x#0: bytes[8] = array%sub_item%0#1
        let last_point.y#0: uint64 = array%sub_item%2#1
        let length#0: uint64 = 0u
        let slot_contents%1#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_len%0#1: uint64 = (len slot_contents%1#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 80u)
        let tmp%0#0: uint64 = array%array_len%0#1
        (assert 1u) // Step cannot be zero
        let point_idx#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L102
        let continue_looping%0#0: bool = (< point_idx#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@10
    block@2: // for_body_L103
        let slot_contents%2#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%1#1: uint64 = (* point_idx#0 80u)
        let array%value%1#1: bytes = (extract3 slot_contents%2#0 array%bytes_index%1#1 80u)
        let array%sub_item%9#1: bytes = (extract3 array%value%1#1 0u 8u)
        let array%sub_item%10#1: bytes = (extract3 array%value%1#1 8u 8u)
        let array%sub_item%11#1: uint64 = (btoi array%sub_item%10#1)
        let point.x#0: bytes[8] = array%sub_item%9#1
        let point.y#0: uint64 = array%sub_item%11#1
        let reinterpret_biguint%0#0: biguint = point.x#0
        let reinterpret_biguint%1#0: biguint = last_point.x#0
        let tmp%1#0: bool = (b< reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L105
        let tmp%2#0: uint64 = (btoi last_point.x#0)
        let tmp%3#0: uint64 = (btoi point.x#0)
        let dx#0: uint64 = (- tmp%2#0 tmp%3#0)
        goto block@5
    block@4: // else_body_L107
        let tmp%4#0: uint64 = (btoi point.x#0)
        let tmp%5#0: uint64 = (btoi last_point.x#0)
        let dx#0: uint64 = (- tmp%4#0 tmp%5#0)
        goto block@5
    block@5: // after_if_else_L104
        let tmp%6#0: bool = (< point.y#0 last_point.y#0)
        goto tmp%6#0 ? block@6 : block@7
    block@6: // if_body_L109
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@8
    block@7: // else_body_L111
        let dy#0: uint64 = (- point.y#0 last_point.y#0)
        goto block@8
    block@8: // after_if_else_L108
        let tmp%7#0: uint64 = (* dx#0 dx#0)
        let tmp%8#0: uint64 = (* dy#0 dy#0)
        let tmp%9#0: uint64 = (+ tmp%7#0 tmp%8#0)
        let tmp%10#0: uint64 = (sqrt tmp%9#0)
        let length#0: uint64 = (+ length#0 tmp%10#0)
        goto block@9
    block@9: // for_footer_L102
        let point_idx#0: uint64 = (+ point_idx#0 1u)
        goto block@1
    block@10: // after_for_L102
        return length#0

subroutine test_cases.array.fixed_size.FixedSizeContract.__init__() -> void:
    block@0: // L25
        (app_global_put "count" 0u)
        return 

subroutine test_cases.array.fixed_size.FixedSizeContract.test_array(x1: bytes[8], y1: uint64, x2: bytes[8], y2: uint64) -> uint64:
    block@0: // L28
        (app_global_put "count" 0u)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: bytes[32], tmp%3#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let (tmp%4#0: uint64, tmp%5#0: uint64, tmp%6#0: bytes[32], tmp%7#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let (tmp%8#0: uint64, tmp%9#0: uint64, tmp%10#0: bytes[32], tmp%11#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let array%encoded%0#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat 0x 0x0000000000000000)
        let array%sub_item%0#1: bytes[8] = (itob 0u)
        let array%encoded%1#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%0#1 array%sub_item%0#1)
        let array%sub_item%1#1: bytes[8] = (itob tmp%0#0)
        let array%encoded%2#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%1#1 array%sub_item%1#1)
        let array%sub_item%2#1: bytes[8] = (itob tmp%1#0)
        let array%encoded%3#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%2#1 array%sub_item%2#1)
        let array%encoded%4#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%3#1 tmp%2#0)
        let array%encoded%5#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%4#1 tmp%3#0)
        let array%data%0#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat 0x array%encoded%5#1)
        let array%encoded%6#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat 0x x1#0)
        let array%sub_item%3#1: bytes[8] = (itob y1#0)
        let array%encoded%7#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%6#1 array%sub_item%3#1)
        let array%sub_item%4#1: bytes[8] = (itob tmp%4#0)
        let array%encoded%8#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%7#1 array%sub_item%4#1)
        let array%sub_item%5#1: bytes[8] = (itob tmp%5#0)
        let array%encoded%9#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%8#1 array%sub_item%5#1)
        let array%encoded%10#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%9#1 tmp%6#0)
        let array%encoded%11#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%10#1 tmp%7#0)
        let array%data%1#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%data%0#1 array%encoded%11#1)
        let array%encoded%12#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat 0x x2#0)
        let array%sub_item%6#1: bytes[8] = (itob y2#0)
        let array%encoded%13#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%12#1 array%sub_item%6#1)
        let array%sub_item%7#1: bytes[8] = (itob tmp%8#0)
        let array%encoded%14#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%13#1 array%sub_item%7#1)
        let array%sub_item%8#1: bytes[8] = (itob tmp%9#0)
        let array%encoded%15#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%14#1 array%sub_item%8#1)
        let array%encoded%16#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%15#1 tmp%10#0)
        let array%encoded%17#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%encoded%16#1 tmp%11#0)
        let array%data%2#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat array%data%1#1 array%encoded%17#1)
        let encoded%0#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = array%data%2#1
        let slot%0#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[]* = new()
        write(slot%0#0, encoded%0#0)
        let path#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[]* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L36
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L37
        let slot_contents%0#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%0#1: uint64 = (* i#0 80u)
        let array%value%0#1: bytes = (extract3 slot_contents%0#0 array%bytes_index%0#1 80u)
        let array%sub_item%14#1: bytes = (extract3 array%value%0#1 24u 8u)
        let array%sub_item%15#1: uint64 = (btoi array%sub_item%14#1)
        let tmp%15#0: uint64 = array%sub_item%15#1
        let tmp%18#0: uint64 = (+ i#0 1u)
        let tmp%19#0: bool = (== tmp%15#0 tmp%18#0)
        (assert tmp%19#0)
        let slot_contents%1#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%1#1: uint64 = (* i#0 80u)
        let array%value%1#1: bytes = (extract3 slot_contents%1#0 array%bytes_index%1#1 80u)
        let array%sub_item%26#1: bytes = (extract3 array%value%1#1 64u 16u)
        let tmp%25#0: bytes[16] = array%sub_item%26#1
        let reinterpret_biguint%0#0: biguint = (extract3 tmp%25#0 0u 8u) // on error: Index access is out of bounds
        let tmp%26#0: uint64 = (+ i#0 2u)
        let tmp%27#0: biguint = (itob tmp%26#0)
        let tmp%28#0: bool = (b== reinterpret_biguint%0#0 tmp%27#0)
        (assert tmp%28#0)
        let slot_contents%2#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%2#1: uint64 = (* i#0 80u)
        let array%value%2#1: bytes = (extract3 slot_contents%2#0 array%bytes_index%2#1 80u)
        let array%sub_item%35#1: bytes = (extract3 array%value%2#1 64u 16u)
        let tmp%34#0: bytes[16] = array%sub_item%35#1
        let reinterpret_biguint%1#0: biguint = (extract3 tmp%34#0 8u 8u) // on error: Index access is out of bounds
        let tmp%35#0: uint64 = (+ i#0 1u)
        let tmp%36#0: uint64 = (+ i#0 1u)
        let tmp%37#0: uint64 = (* tmp%35#0 tmp%36#0)
        let tmp%38#0: biguint = (itob tmp%37#0)
        let tmp%39#0: bool = (b== reinterpret_biguint%1#0 tmp%38#0)
        (assert tmp%39#0)
        goto block@3
    block@3: // for_footer_L36
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L36
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let slot_contents%3#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%3#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 80u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        (box_del "a")
        (box_put "a" concat_result%0#0)
        let tmp%40#0: uint64 = test_cases.array.fixed_size.path_length(path#0)
        return tmp%40#0

subroutine test_cases.array.fixed_size.FixedSizeContract.test_bool_array(length: uint64) -> uint64:
    block@0: // L44
        let slot%0#0: bool[]* = new()
        write(slot%0#0, 0x)
        let arr#0: bool[]* = slot%0#0
        let slot_contents%0#0: bool[] = read(arr#0)
        let array%bytes_len%0#1: uint64 = (len slot_contents%0#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 1u)
        let tmp%0#0: uint64 = array%array_len%0#1
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L49
        let continue_looping%0#0: bool = (< i#0 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L50
        let tmp%3#0: uint64 = (% i#0 2u)
        let tmp%4#0: bool = (== tmp%3#0 0u)
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%4#0)
        let array%encoded%0#1: bool[] = (concat 0x array%encoded_bit%0#1)
        let array%data%0#1: bool[] = (concat 0x array%encoded%0#1)
        let encoded%1#0: bool[] = array%data%0#1
        let slot_contents%1#0: bool[] = read(arr#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%1#0 encoded%1#0) // on error: max array length exceeded
        let extended%0#0: bool[] = array%array_contents%0#1
        write(arr#0, extended%0#0)
        goto block@3
    block@3: // for_footer_L49
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L49
        let slot_contents%2#0: bool[] = read(arr#0)
        let array%bytes_len%1#1: uint64 = (len slot_contents%2#0)
        let array%array_len%1#1: uint64 = (/ array%bytes_len%1#1 1u)
        let tmp%5#0: uint64 = array%array_len%1#1
        let tmp%6#0: bool = (== tmp%5#0 length#0)
        (assert tmp%6#0) // expected correct length
        let count#0: uint64 = 0u
        let slot_contents%3#0: bool[] = read(arr#0)
        let array%bytes_len%2#1: uint64 = (len slot_contents%3#0)
        let array%array_len%2#1: uint64 = (/ array%bytes_len%2#1 1u)
        let array_length%0#0: uint64 = array%array_len%2#1
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L53
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L54
        let slot_contents%4#0: bool[] = read(arr#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#0 1u)
        let array%value%0#1: bytes = (extract3 slot_contents%4#0 array%bytes_index%0#1 1u)
        let array%sub_item%0#1: bytes = (extract3 array%value%0#1 0u 1u)
        let array%sub_item%1#1: uint64 = (btoi array%sub_item%0#1)
        let val#0: bool = array%sub_item%1#1
        let count#9: uint64 = count#0
        goto val#0 ? block@7 : block@8
    block@7: // if_body_L55
        let count#0: uint64 = (+ count#0 1u)
        let count#9: uint64 = count#0
        goto block@8
    block@8: // after_if_else_L54
        let count#0: uint64 = count#9
        goto block@9
    block@9: // for_footer_L53
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@5
    block@10: // after_for_L53
        return count#0

subroutine test_cases.array.fixed_size.FixedSizeContract.test_arc4_conversion(length: uint64) -> bytes:
    block@0: // L58
        let slot%0#0: bytes[8][]* = new()
        write(slot%0#0, 0x)
        let arr#0: bytes[8][]* = slot%0#0
        let slot_contents%0#0: bytes[8][] = read(arr#0)
        let array%bytes_len%0#1: uint64 = (len slot_contents%0#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let tmp%0#0: uint64 = array%array_len%0#1
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L63
        let continue_looping%0#0: bool = (< i#0 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L64
        let val_as_bytes%0#0: bytes[8] = (itob i#0)
        let array%encoded%0#1: bytes[8][] = (concat 0x val_as_bytes%0#0)
        let array%data%0#1: bytes[8][] = (concat 0x array%encoded%0#1)
        let encoded%1#0: bytes[8][] = array%data%0#1
        let slot_contents%1#0: bytes[8][] = read(arr#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%1#0 encoded%1#0) // on error: max array length exceeded
        let extended%0#0: bytes[8][] = array%array_contents%0#1
        write(arr#0, extended%0#0)
        goto block@3
    block@3: // for_footer_L63
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L63
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let array%bytes_len%1#1: uint64 = (len slot_contents%2#0)
        let array%array_len%1#1: uint64 = (/ array%bytes_len%1#1 8u)
        let tmp%3#0: uint64 = array%array_len%1#1
        let tmp%4#0: bool = (== tmp%3#0 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let slot_contents%3#0: bytes[8][] = read(arr#0)
        let array%bytes_len%2#1: uint64 = (len slot_contents%3#0)
        let array%array_len%2#1: uint64 = (/ array%bytes_len%2#1 8u)
        let array_length%0#0: uint64 = array%array_len%2#1
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L67
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L68
        let slot_contents%4#0: bytes[8][] = read(arr#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#0 8u)
        let array%value%0#1: bytes = (extract3 slot_contents%4#0 array%bytes_index%0#1 8u)
        let array%sub_item%0#1: bytes = (extract3 array%value%0#1 0u 8u)
        let val#0: bytes[8] = array%sub_item%0#1
        let tmp%5#0: bool = (!= val#0 0x0000000000000000)
        let count#9: uint64 = count#0
        goto tmp%5#0 ? block@7 : block@8
    block@7: // if_body_L69
        let count#0: uint64 = (+ count#0 1u)
        let count#9: uint64 = count#0
        goto block@8
    block@8: // after_if_else_L68
        let count#0: uint64 = count#9
        goto block@9
    block@9: // for_footer_L67
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@5
    block@10: // after_for_L67
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arc4_arr#0: bytes = array_data%0#0
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arc4_arr#0)
        let slot_contents%5#0: bytes[8][] = read(arr#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%5#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arc4_arr#0: bytes = concat_result%0#0
        return arc4_arr#0

subroutine test_cases.array.fixed_size.FixedSizeContract.sum_array(arc4_arr: bytes) -> uint64:
    block@0: // L76
        let slot%0#0: bytes[8][]* = new()
        write(slot%0#0, 0x)
        let arr#0: bytes[8][]* = slot%0#0
        let expr_value_trimmed%0#0: bytes[8][] = ((extract 2 0) arc4_arr#0)
        let slot_contents%0#0: bytes[8][] = read(arr#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%0#0 expr_value_trimmed%0#0) // on error: max array length exceeded
        let extended%0#0: bytes[8][] = array%array_contents%0#1
        write(arr#0, extended%0#0)
        let total#0: uint64 = 0u
        let slot_contents%1#0: bytes[8][] = read(arr#0)
        let array%bytes_len%0#1: uint64 = (len slot_contents%1#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let array_length%0#0: uint64 = array%array_len%0#1
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L82
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L83
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#0 8u)
        let array%value%0#1: bytes = (extract3 slot_contents%2#0 array%bytes_index%0#1 8u)
        let array%sub_item%0#1: bytes = (extract3 array%value%0#1 0u 8u)
        let item#0: bytes[8] = array%sub_item%0#1
        let tmp%0#0: uint64 = (btoi item#0)
        let total#0: uint64 = (+ total#0 tmp%0#0)
        goto block@3
    block@3: // for_footer_L82
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L82
        return total#0

subroutine test_cases.array.fixed_size.FixedSizeContract.xtra() -> <uint64, uint64, bytes[32], bytes[16]>:
    block@0: // L87
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" new_state_value%0#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%1#0) // check self.count exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let to_encode%0#0: uint64 = (+ maybe_value%2#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%3#0) // check self.count exists
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%4#0) // check self.count exists
        let to_encode%1#0: uint64 = (* maybe_value%3#0 maybe_value%4#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return tmp%0#0 maybe_value%1#0 tmp%1#0 encoded_tuple_buffer%2#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L24
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@3, method "test_bool_array(uint64)uint64" => block@4, method "test_arc4_conversion(uint64)uint64[]" => block@5, method "sum_array(uint64[])uint64" => block@6, * => block@7}
    block@3: // test_array_route_L28
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 4)
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let to_encode%0#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.test_array(reinterpret_bytes[8]%0#0, tmp%7#0, reinterpret_bytes[8]%2#0, tmp%8#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%9#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@4: // test_bool_array_route_L44
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let to_encode%1#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.test_bool_array(tmp%14#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%15#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%15#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@5: // test_arc4_conversion_route_L58
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let tmp%21#0: bytes = test_cases.array.fixed_size.FixedSizeContract.test_arc4_conversion(tmp%20#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@6: // sum_array_route_L76
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let tmp%27#0: bytes = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.sum_array(tmp%27#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%28#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@7: // switch_case_default_L24
        goto block@8
    block@8: // switch_case_next_L24
        goto block@15
    block@9: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        switch tmp%29#0 {0u => block@10, * => block@13}
    block@10: // __algopy_default_create_L1
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (== tmp%30#0 0u)
        (assert tmp%31#0) // can only call when creating
        goto block@11
    block@11: // L1
        goto block@12
    block@12: // after_inlined_test_cases.array.fixed_size.FixedSizeContract.__algopy_default_create_L1
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@13: // switch_case_default_L24
        goto block@14
    block@14: // switch_case_next_L24
        goto block@15
    block@15: // after_if_else_L24
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0
        goto block@16
    block@16: // after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router___L1
        return tmp%0#0