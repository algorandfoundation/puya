#pragma version 10
#pragma typetrack false

// test_cases.array.fixed_size.FixedSizeContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 80
    bytecblock 0x "count" 0x151f7c75 0x0000000000000000
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.array.fixed_size.path_length(path: uint64) -> uint64:
path_length:
    // array/fixed_size.py:97-98
    // @subroutine
    // def path_length(path: Array[Point]) -> UInt64:
    proto 1 1
    bytec_0 // ""
    dup
    // array/fixed_size.py:99
    // last_point = path[0]
    frame_dig -1
    loads
    intc_0 // 0
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    swap
    intc_2 // 8
    dup
    extract3
    btoi
    // array/fixed_size.py:100
    // length = UInt64()
    intc_0 // 0
    // array/fixed_size.py:101
    // for point_idx in urange(1, path.length):
    frame_dig -1
    loads
    len
    intc_3 // 80
    /
    intc_1 // 1
    assert // Step cannot be zero
    intc_1 // 1

path_length_for_header@1:
    // array/fixed_size.py:101
    // for point_idx in urange(1, path.length):
    frame_dig 6
    frame_dig 5
    <
    bz path_length_after_for@10

path_length_for_body@2:
    // array/fixed_size.py:102
    // point = path[point_idx]
    frame_dig -1
    loads
    frame_dig 6
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    dup
    intc_0 // 0
    intc_2 // 8
    extract3
    swap
    intc_2 // 8
    dup
    extract3
    btoi
    swap
    dup
    cover 2
    cover 2
    frame_bury 1
    // array/fixed_size.py:103
    // if point.x < last_point.x:
    frame_dig 2
    b<
    bz path_length_else_body@4

path_length_if_body@3:
    // array/fixed_size.py:104
    // dx = last_point.x.native - point.x.native
    frame_dig 2
    btoi
    swap
    btoi
    -
    frame_bury 0

path_length_after_if_else@5:
    // array/fixed_size.py:107
    // if point.y < last_point.y:
    frame_dig 1
    frame_dig 3
    <
    bz path_length_else_body@7

path_length_if_body@6:
    // array/fixed_size.py:108
    // dy = last_point.y - point.y
    frame_dig 3
    frame_dig 1
    -

path_length_after_if_else@8:
    // array/fixed_size.py:111
    // length += op.sqrt(dx * dx + dy * dy)
    frame_dig 0
    dup
    *
    swap
    dup
    *
    +
    sqrt
    frame_dig 4
    +
    frame_bury 4

path_length_for_footer@9:
    // array/fixed_size.py:101
    // for point_idx in urange(1, path.length):
    frame_dig 6
    intc_1 // 1
    +
    frame_bury 6
    b path_length_for_header@1

path_length_else_body@7:
    // array/fixed_size.py:110
    // dy = point.y - last_point.y
    frame_dig 1
    frame_dig 3
    -
    b path_length_after_if_else@8

path_length_else_body@4:
    // array/fixed_size.py:106
    // dx = point.x.native - last_point.x.native
    btoi
    frame_dig 2
    btoi
    -
    frame_bury 0
    b path_length_after_if_else@5

path_length_after_for@10:
    // array/fixed_size.py:112
    // return length
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.array.fixed_size.FixedSizeContract.__init__() -> void:
__init__:
    // array/fixed_size.py:26
    // self.count = UInt64(0)
    bytec_1 // "count"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.array.fixed_size.FixedSizeContract.test_array(x1: bytes, y1: uint64, x2: bytes, y2: uint64) -> uint64:
test_array:
    // array/fixed_size.py:28-29
    // @arc4.abimethod()
    // def test_array(self, x1: arc4.UInt64, y1: UInt64, x2: arc4.UInt64, y2: UInt64) -> UInt64:
    proto 4 1
    // array/fixed_size.py:30
    // self.count = UInt64(0)
    bytec_1 // "count"
    intc_0 // 0
    app_global_put
    // array/fixed_size.py:32
    // Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    callsub xtra
    cover 3
    cover 2
    swap
    // array/fixed_size.py:33
    // Point(x=x1, y=y1, other=self.xtra()),
    callsub xtra
    cover 7
    cover 6
    cover 5
    cover 4
    // array/fixed_size.py:34
    // Point(x=x2, y=y2, other=self.xtra()),
    callsub xtra
    cover 11
    cover 10
    cover 9
    cover 8
    // array/fixed_size.py:32
    // Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    bytec_0 // 0x
    bytec_3 // 0x0000000000000000
    concat
    intc_0 // 0
    itob
    concat
    swap
    itob
    concat
    swap
    itob
    concat
    swap
    concat
    swap
    concat
    // array/fixed_size.py:31-35
    // path = Array(
    //     Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    //     Point(x=x1, y=y1, other=self.xtra()),
    //     Point(x=x2, y=y2, other=self.xtra()),
    // )
    bytec_0 // 0x
    swap
    concat
    // array/fixed_size.py:33
    // Point(x=x1, y=y1, other=self.xtra()),
    bytec_0 // 0x
    frame_dig -4
    concat
    frame_dig -3
    itob
    concat
    uncover 2
    itob
    concat
    uncover 2
    itob
    concat
    uncover 2
    concat
    uncover 2
    concat
    // array/fixed_size.py:31-35
    // path = Array(
    //     Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    //     Point(x=x1, y=y1, other=self.xtra()),
    //     Point(x=x2, y=y2, other=self.xtra()),
    // )
    concat
    // array/fixed_size.py:34
    // Point(x=x2, y=y2, other=self.xtra()),
    bytec_0 // 0x
    frame_dig -2
    concat
    frame_dig -1
    itob
    concat
    uncover 2
    itob
    concat
    uncover 2
    itob
    concat
    uncover 2
    concat
    uncover 2
    concat
    // array/fixed_size.py:31-35
    // path = Array(
    //     Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    //     Point(x=x1, y=y1, other=self.xtra()),
    //     Point(x=x2, y=y2, other=self.xtra()),
    // )
    concat
    callsub _puya_lib.mem.new_slot
    dup
    uncover 2
    stores
    // array/fixed_size.py:36
    // for i in urange(3):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_array_for_header@1:
    // array/fixed_size.py:36
    // for i in urange(3):
    frame_dig 1
    pushint 3 // 3
    <
    bz test_array_after_for@4

test_array_for_body@2:
    // array/fixed_size.py:37
    // assert path[i].other.b == i + 1
    frame_dig 0
    dup
    loads
    frame_dig 1
    dup
    cover 2
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    pushint 24 // 24
    intc_2 // 8
    extract3
    btoi
    dig 1
    intc_1 // 1
    +
    ==
    assert
    // array/fixed_size.py:38
    // assert path[i].other.d.foo == i + 2
    dig 1
    loads
    dig 1
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    pushint 64 // 64
    pushint 16 // 16
    extract3
    intc_0 // 0
    intc_2 // 8
    extract3 // on error: Index access is out of bounds
    dig 1
    pushint 2 // 2
    +
    itob
    b==
    assert
    // array/fixed_size.py:39
    // assert path[i].other.d.bar == (i + 1) * (i + 1)
    swap
    loads
    dig 1
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    pushint 64 // 64
    pushint 16 // 16
    extract3
    intc_2 // 8
    dup
    extract3 // on error: Index access is out of bounds
    dig 1
    intc_1 // 1
    +
    swap
    uncover 2
    intc_1 // 1
    +
    uncover 2
    *
    itob
    b==
    assert

test_array_for_footer@3:
    // array/fixed_size.py:36
    // for i in urange(3):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_array_for_header@1

test_array_after_for@4:
    // array/fixed_size.py:41
    // return path_length(path)
    frame_dig 0
    callsub path_length
    frame_bury 0
    retsub


// test_cases.array.fixed_size.FixedSizeContract.test_bool_array(length: uint64) -> uint64:
test_bool_array:
    // array/fixed_size.py:43-44
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> UInt64:
    proto 1 1
    bytec_0 // ""
    dupn 3
    // array/fixed_size.py:45
    // arr = Array[bool]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    dup
    // array/fixed_size.py:46
    // assert arr.length == 0
    loads
    len
    intc_1 // 1
    /
    intc_0 // 0
    ==
    assert
    // array/fixed_size.py:48
    // for i in urange(1, length + 1):
    frame_dig -1
    intc_1 // 1
    +
    intc_1 // 1
    assert // Step cannot be zero
    intc_1 // 1

test_bool_array_for_header@1:
    // array/fixed_size.py:48
    // for i in urange(1, length + 1):
    frame_dig 6
    frame_dig 5
    <
    bz test_bool_array_after_for@4

test_bool_array_for_body@2:
    // array/fixed_size.py:49
    // arr.append(i % 2 == 0)
    frame_dig 6
    pushint 2 // 2
    %
    intc_0 // 0
    ==
    itob
    pushint 7 // 7
    intc_1 // 1
    extract3
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    frame_dig 4
    dup
    cover 2
    loads
    swap
    concat // on error: max array length exceeded
    stores

test_bool_array_for_footer@3:
    // array/fixed_size.py:48
    // for i in urange(1, length + 1):
    frame_dig 6
    intc_1 // 1
    +
    frame_bury 6
    b test_bool_array_for_header@1

test_bool_array_after_for@4:
    // array/fixed_size.py:50
    // assert arr.length == length, "expected correct length"
    frame_dig 4
    dup
    loads
    len
    intc_1 // 1
    /
    frame_dig -1
    ==
    assert // expected correct length
    // array/fixed_size.py:51
    // count = UInt64(0)
    intc_0 // 0
    frame_bury 1
    // array/fixed_size.py:52
    // for val in arr:
    loads
    len
    intc_1 // 1
    /
    frame_bury 0
    intc_0 // 0
    frame_bury 3

test_bool_array_for_header@5:
    // array/fixed_size.py:52
    // for val in arr:
    frame_dig 3
    frame_dig 0
    <
    bz test_bool_array_after_for@10

test_bool_array_for_body@6:
    // array/fixed_size.py:52
    // for val in arr:
    frame_dig 4
    loads
    frame_dig 3
    intc_1 // 1
    *
    intc_1 // 1
    extract3
    intc_0 // 0
    intc_1 // 1
    extract3
    btoi
    frame_dig 1
    frame_bury 2
    // array/fixed_size.py:53
    // if val:
    bz test_bool_array_after_if_else@8

test_bool_array_if_body@7:
    // array/fixed_size.py:54
    // count += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 2

test_bool_array_after_if_else@8:
    frame_dig 2
    frame_bury 1

test_bool_array_for_footer@9:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_bool_array_for_header@5

test_bool_array_after_for@10:
    // array/fixed_size.py:55
    // return count
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.fixed_size.FixedSizeContract.test_arc4_conversion(length: uint64) -> bytes:
test_arc4_conversion:
    // array/fixed_size.py:57-58
    // @arc4.abimethod()
    // def test_arc4_conversion(self, length: UInt64) -> arc4.DynamicArray[arc4.UInt64]:
    proto 1 1
    bytec_0 // ""
    dupn 3
    // array/fixed_size.py:59
    // arr = Array[arc4.UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    dup
    // array/fixed_size.py:60
    // assert arr.length == 0
    loads
    len
    intc_2 // 8
    /
    intc_0 // 0
    ==
    assert
    // array/fixed_size.py:62
    // for i in urange(1, length + 1):
    frame_dig -1
    intc_1 // 1
    +
    intc_1 // 1
    assert // Step cannot be zero
    intc_1 // 1

test_arc4_conversion_for_header@1:
    // array/fixed_size.py:62
    // for i in urange(1, length + 1):
    frame_dig 6
    frame_dig 5
    <
    bz test_arc4_conversion_after_for@4

test_arc4_conversion_for_body@2:
    // array/fixed_size.py:63
    // arr.append(arc4.UInt64(i))
    frame_dig 6
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    frame_dig 4
    dup
    cover 2
    loads
    swap
    concat // on error: max array length exceeded
    stores

test_arc4_conversion_for_footer@3:
    // array/fixed_size.py:62
    // for i in urange(1, length + 1):
    frame_dig 6
    intc_1 // 1
    +
    frame_bury 6
    b test_arc4_conversion_for_header@1

test_arc4_conversion_after_for@4:
    // array/fixed_size.py:64
    // assert arr.length == length, "expected correct length"
    frame_dig 4
    dup
    loads
    len
    intc_2 // 8
    /
    frame_dig -1
    ==
    assert // expected correct length
    // array/fixed_size.py:65
    // count = UInt64(0)
    intc_0 // 0
    frame_bury 1
    // array/fixed_size.py:66
    // for val in arr:
    loads
    len
    intc_2 // 8
    /
    frame_bury 0
    intc_0 // 0
    frame_bury 3

test_arc4_conversion_for_header@5:
    // array/fixed_size.py:66
    // for val in arr:
    frame_dig 3
    frame_dig 0
    <
    bz test_arc4_conversion_after_for@10

test_arc4_conversion_for_body@6:
    // array/fixed_size.py:66
    // for val in arr:
    frame_dig 4
    loads
    frame_dig 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    intc_0 // 0
    intc_2 // 8
    extract3
    // array/fixed_size.py:67
    // if val:
    bytec_3 // 0x0000000000000000
    !=
    frame_dig 1
    frame_bury 2
    bz test_arc4_conversion_after_if_else@8

test_arc4_conversion_if_body@7:
    // array/fixed_size.py:68
    // count += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 2

test_arc4_conversion_after_if_else@8:
    frame_dig 2
    frame_bury 1

test_arc4_conversion_for_footer@9:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_arc4_conversion_for_header@5

test_arc4_conversion_after_for@10:
    // array/fixed_size.py:70
    // arc4_arr = arc4.DynamicArray[arc4.UInt64]()
    pushbytes 0x0000
    bytec_0 // 0x
    concat
    // array/fixed_size.py:71
    // arc4_arr.extend(arr)
    extract 2 0
    frame_dig 4
    loads
    concat
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/fixed_size.py:73
    // return arc4_arr
    frame_bury 0
    retsub


// test_cases.array.fixed_size.FixedSizeContract.sum_array(arc4_arr: bytes) -> uint64:
sum_array:
    // array/fixed_size.py:75-76
    // @arc4.abimethod()
    // def sum_array(self, arc4_arr: arc4.DynamicArray[arc4.UInt64]) -> UInt64:
    proto 1 1
    // array/fixed_size.py:77
    // arr = Array[arc4.UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    dup
    // array/fixed_size.py:78
    // arr.extend(arc4_arr)
    frame_dig -1
    extract 2 0
    swap
    dup
    loads
    uncover 2
    concat // on error: max array length exceeded
    dig 1
    swap
    stores
    // array/fixed_size.py:80
    // total = UInt64(0)
    intc_0 // 0
    swap
    // array/fixed_size.py:81
    // for item in arr:
    loads
    len
    intc_2 // 8
    /
    intc_0 // 0

sum_array_for_header@1:
    // array/fixed_size.py:81
    // for item in arr:
    frame_dig 3
    frame_dig 2
    <
    bz sum_array_after_for@4

sum_array_for_body@2:
    // array/fixed_size.py:81
    // for item in arr:
    frame_dig 0
    loads
    frame_dig 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    intc_0 // 0
    intc_2 // 8
    extract3
    // array/fixed_size.py:82
    // total += item.native
    btoi
    frame_dig 1
    +
    frame_bury 1

sum_array_for_footer@3:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b sum_array_for_header@1

sum_array_after_for@4:
    // array/fixed_size.py:84
    // return total
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.fixed_size.FixedSizeContract.xtra() -> uint64, uint64, bytes, bytes:
xtra:
    // array/fixed_size.py:88
    // self.count += 1
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_1 // "count"
    swap
    app_global_put
    // array/fixed_size.py:90
    // a=Txn.num_app_args,
    txn NumAppArgs
    // array/fixed_size.py:91
    // b=self.count,
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    // array/fixed_size.py:92
    // c=Txn.sender,
    txn Sender
    // array/fixed_size.py:93
    // d=More(foo=arc4.UInt64(self.count + 1), bar=arc4.UInt64(self.count * self.count)),
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    itob
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    *
    itob
    bytec_0 // 0x
    uncover 2
    concat
    swap
    concat
    // array/fixed_size.py:89-94
    // return Xtra(
    //     a=Txn.num_app_args,
    //     b=self.count,
    //     c=Txn.sender,
    //     d=More(foo=arc4.UInt64(self.count + 1), bar=arc4.UInt64(self.count * self.count)),
    // )
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:

approval_program_block@1:
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@9

approval_program_abi_routing@2:
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x28d7c1b8 // method "test_array(uint64,uint64,uint64,uint64)uint64"
    pushbytes 0xf8fd68a7 // method "test_bool_array(uint64)uint64"
    pushbytes 0x1f028db1 // method "test_arc4_conversion(uint64)uint64[]"
    pushbytes 0x096b3a59 // method "sum_array(uint64[])uint64"
    uncover 4
    match approval_program_test_array_route@3 approval_program_test_bool_array_route@4 approval_program_test_arc4_conversion_route@5 approval_program_sum_array_route@6

approval_program_switch_case_default@7:

approval_program_switch_case_next@8:

approval_program_after_if_else@15:
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    intc_0 // 0

approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16:
    retsub

approval_program_sum_array_route@6:
    // array/fixed_size.py:75
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/fixed_size.py:75
    // @arc4.abimethod()
    callsub sum_array
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16

approval_program_test_arc4_conversion_route@5:
    // array/fixed_size.py:57
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/fixed_size.py:57
    // @arc4.abimethod()
    callsub test_arc4_conversion
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16

approval_program_test_bool_array_route@4:
    // array/fixed_size.py:43
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/fixed_size.py:43
    // @arc4.abimethod()
    callsub test_bool_array
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16

approval_program_test_array_route@3:
    // array/fixed_size.py:28
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    // array/fixed_size.py:28
    // @arc4.abimethod()
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_array
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16

approval_program_bare_routing@9:
    // array/fixed_size.py:24
    // class FixedSizeContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match approval_program___algopy_default_create@10

approval_program_switch_case_default@13:

approval_program_switch_case_next@14:
    b approval_program_after_if_else@15

approval_program___algopy_default_create@10:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

approval_program_block@11:

approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__algopy_default_create@12:
    intc_1 // 1
    b approval_program_after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__@16


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
