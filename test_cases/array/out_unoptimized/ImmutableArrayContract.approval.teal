#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x 0x00 0x0000 0x151f7c75 0x80 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 0x62696775696e74 "Hello" 0x0000000000000001 0x0000000000000002 0x000161 0x000162
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0

main_block@0:

main_block@1:
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@27

main_abi_routing@2:
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x44d42f99 // method "test_uint64_array()void"
    pushbytes 0xb7eaa60b // method "test_biguint_array()void"
    pushbytes 0x743d70ed // method "test_bool_array(uint64)void"
    pushbytes 0x1c7e0494 // method "test_fixed_size_tuple_array()void"
    pushbytes 0xa2d5860b // method "test_fixed_size_named_tuple_array()void"
    pushbytes 0xe05fc564 // method "test_dynamic_sized_tuple_array()void"
    pushbytes 0x1e092b83 // method "test_dynamic_sized_named_tuple_array()void"
    pushbytes 0x01310262 // method "test_implicit_conversion_log(uint64[])void"
    pushbytes 0xc8654a98 // method "test_implicit_conversion_emit(uint64[])void"
    pushbytes 0x89d196f8 // method "test_nested_array(uint64,uint64[][])uint64[]"
    pushbytes 0x6cb7c991 // method "test_bit_packed_tuples()void"
    pushbytes 0x9898bf02 // method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)"
    pushbytes 0xf6b61ee8 // method "test_uint64_return(uint64)uint64[]"
    pushbytes 0x60b86a7b // method "test_bool_return(uint64)bool[]"
    pushbytes 0x73ad283f // method "test_tuple_return(uint64)(uint64,bool,bool)[]"
    pushbytes 0x529dfae9 // method "test_dynamic_tuple_return(uint64)(uint64,string)[]"
    pushbytes 0x206d514f // method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]"
    pushbytes 0xe06465e2 // method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]"
    pushbytes 0xec0300a2 // method "test_concat_with_native_tuple((uint64,uint64))uint64[]"
    pushbytes 0xecdf14af // method "test_dynamic_concat_with_arc4_tuple((string,string))string[]"
    pushbytes 0x511aca64 // method "test_dynamic_concat_with_native_tuple((string,string))string[]"
    pushbytes 0x29852e4f // method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]"
    uncover 22
    match main_test_uint64_array_route@3 main_test_biguint_array_route@4 main_test_bool_array_route@5 main_test_fixed_size_tuple_array_route@6 main_test_fixed_size_named_tuple_array_route@7 main_test_dynamic_sized_tuple_array_route@8 main_test_dynamic_sized_named_tuple_array_route@9 main_test_implicit_conversion_log_route@10 main_test_implicit_conversion_emit_route@11 main_test_nested_array_route@12 main_test_bit_packed_tuples_route@13 main_sum_uints_and_lengths_and_trues_route@14 main_test_uint64_return_route@15 main_test_bool_return_route@16 main_test_tuple_return_route@17 main_test_dynamic_tuple_return_route@18 main_test_convert_to_array_and_back_route@19 main_test_concat_with_arc4_tuple_route@20 main_test_concat_with_native_tuple_route@21 main_test_dynamic_concat_with_arc4_tuple_route@22 main_test_dynamic_concat_with_native_tuple_route@23 main_test_concat_immutable_dynamic_route@24

main_switch_case_default@25:

main_switch_case_next@26:

main_after_if_else@31:
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32:
    return

main_test_concat_immutable_dynamic_route@24:
    // array/immutable.py:421
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // array/immutable.py:421
    // @arc4.abimethod()
    callsub test_concat_immutable_dynamic
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_dynamic_concat_with_native_tuple_route@23:
    // array/immutable.py:413
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    swap
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    swap
    dup
    intc_2 // 2
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    // array/immutable.py:413
    // @arc4.abimethod()
    callsub test_dynamic_concat_with_native_tuple
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_dynamic_concat_with_arc4_tuple_route@22:
    // array/immutable.py:405
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/immutable.py:405
    // @arc4.abimethod()
    callsub test_dynamic_concat_with_arc4_tuple
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_concat_with_native_tuple_route@21:
    // array/immutable.py:397
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    // array/immutable.py:397
    // @arc4.abimethod()
    callsub test_concat_with_native_tuple
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_concat_with_arc4_tuple_route@20:
    // array/immutable.py:389
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/immutable.py:389
    // @arc4.abimethod()
    callsub test_concat_with_arc4_tuple
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_convert_to_array_and_back_route@19:
    // array/immutable.py:379
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // array/immutable.py:379
    // @arc4.abimethod()
    callsub test_convert_to_array_and_back
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_dynamic_tuple_return_route@18:
    // array/immutable.py:372
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:372
    // @arc4.abimethod()
    callsub test_dynamic_tuple_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_tuple_return_route@17:
    // array/immutable.py:365
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:365
    // @arc4.abimethod()
    callsub test_tuple_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_bool_return_route@16:
    // array/immutable.py:358
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:358
    // @arc4.abimethod()
    callsub test_bool_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_uint64_return_route@15:
    // array/immutable.py:351
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:351
    // @arc4.abimethod()
    callsub test_uint64_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_sum_uints_and_lengths_and_trues_route@14:
    // array/immutable.py:324
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // array/immutable.py:324
    // @arc4.abimethod()
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub sum_uints_and_lengths_and_trues
    cover 3
    cover 2
    swap
    itob
    cover 2
    itob
    cover 2
    itob
    cover 3
    uncover 2
    itob
    cover 3
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_bit_packed_tuples_route@13:
    // array/immutable.py:259
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_bit_packed_tuples
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_nested_array_route@12:
    // array/immutable.py:241
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // array/immutable.py:241
    // @arc4.abimethod()
    callsub test_nested_array
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_implicit_conversion_emit_route@11:
    // array/immutable.py:237
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/immutable.py:237
    // @arc4.abimethod()
    callsub test_implicit_conversion_emit
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_implicit_conversion_log_route@10:
    // array/immutable.py:233
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/immutable.py:233
    // @arc4.abimethod()
    callsub test_implicit_conversion_log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_dynamic_sized_named_tuple_array_route@9:
    // array/immutable.py:214
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_sized_named_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_dynamic_sized_tuple_array_route@8:
    // array/immutable.py:195
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_sized_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_fixed_size_named_tuple_array_route@7:
    // array/immutable.py:180
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_fixed_size_named_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_fixed_size_tuple_array_route@6:
    // array/immutable.py:162
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_fixed_size_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_bool_array_route@5:
    // array/immutable.py:138
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:138
    // @arc4.abimethod()
    callsub test_bool_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_biguint_array_route@4:
    // array/immutable.py:113
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_biguint_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_test_uint64_array_route@3:
    // array/immutable.py:77
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_uint64_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32

main_bare_routing@27:
    // array/immutable.py:76
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@28

main_switch_case_default@29:

main_switch_case_next@30:
    b main_after_if_else@31

main___algopy_default_create@28:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@33:

main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create@34:
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@32


// _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> bytes, bytes:
dynamic_array_pop_bit:
    proto 1 2

dynamic_array_pop_bit_block@0:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dup
    itob
    extract 6 0
    frame_dig -1
    swap
    replace2 0
    dig 1
    pushint 16 // 16
    +
    dup2
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 3
    intc_0 // 0
    setbit
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    intc_2 // 2
    +
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2

dynamic_array_pop_fixed_size_block@0:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:
    proto 1 2

dynamic_array_pop_dynamic_element_block@0:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dupn 2
    intc_2 // 2
    *
    dup
    cover 2
    frame_dig -1
    extract 2 0
    dup
    cover 3
    dup
    uncover 2
    extract_uint16
    dup
    cover 2
    cover 3
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    bytec_0 // 0x
    swap
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_pop_dynamic_element_for_header@1:
    frame_dig 7
    frame_dig 6
    <
    bz dynamic_array_pop_dynamic_element_after_for@4

dynamic_array_pop_dynamic_element_for_body@2:
    frame_dig 2
    frame_dig 7
    extract_uint16
    intc_2 // 2
    -
    itob
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5

dynamic_array_pop_dynamic_element_for_footer@3:
    frame_dig 7
    intc_2 // 2
    +
    frame_bury 7
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_after_for@4:
    frame_dig 0
    itob
    extract 6 2
    frame_dig 5
    concat
    frame_dig 1
    intc_2 // 2
    +
    frame_dig 2
    swap
    frame_dig 3
    substring3
    concat
    frame_dig 4
    swap
    frame_bury 1
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_0 // ""
    dupn 2

dynamic_array_concat_bits_block@0:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    cover 3
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2

dynamic_array_concat_bits_if_body@1:
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5

dynamic_array_concat_bits_while_body@4:
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1

dynamic_array_concat_byte_length_head_block@0:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    swap
    intc_2 // 2
    *
    intc_2 // 2
    +
    swap
    dup
    itob
    extract 6 2
    swap
    frame_dig -3
    intc_2 // 2
    dig 4
    substring3
    frame_dig -1
    intc_2 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 5
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    swap
    intc_0 // 0
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_0 // ""

dynamic_array_concat_dynamic_element_block@0:
    bytec_0 // 0x
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4

dynamic_array_concat_dynamic_element_for_body@2:
    frame_dig -3
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1

dynamic_array_concat_dynamic_element_for_footer@3:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 2
    frame_dig -2
    intc_2 // 2
    *
    frame_bury 0
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 0
    <
    bz dynamic_array_concat_dynamic_element_after_for@8

dynamic_array_concat_dynamic_element_for_body@6:
    frame_dig -1
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1

dynamic_array_concat_dynamic_element_for_footer@7:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -4
    intc_2 // 2
    *
    frame_dig -3
    len
    frame_dig -3
    uncover 2
    uncover 2
    substring3
    concat
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    proto 3 1

recalculate_head_for_elements_with_byte_length_head_block@0:
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    frame_dig -3
    swap
    extract_uint16
    frame_dig -1
    select
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    frame_dig 2
    frame_dig 1
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4

recalculate_head_for_elements_with_byte_length_head_for_body@2:
    frame_dig 0
    dup
    itob
    extract 6 2
    frame_dig -3
    frame_dig 2
    uncover 2
    replace3
    dup
    frame_bury -3
    dig 1
    extract_uint16
    intc_2 // 2
    +
    +
    frame_bury 0

recalculate_head_for_elements_with_byte_length_head_for_footer@3:
    frame_dig 2
    intc_2 // 2
    +
    frame_bury 2
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    frame_dig -3
    frame_bury 0
    retsub


// test_cases.array.immutable.times(n: uint64) -> bytes:
times:
    // array/immutable.py:428-429
    // @subroutine
    // def times(n: UInt64) -> String:
    proto 1 1

times_block@0:
    // array/immutable.py:430
    // result = String()
    bytec_0 // ""
    // array/immutable.py:431
    // for _i in urange(n):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

times_for_header@1:
    // array/immutable.py:431
    // for _i in urange(n):
    frame_dig 1
    frame_dig -1
    <
    bz times_after_for@4

times_for_body@2:
    // array/immutable.py:432
    // result += String(" ")
    frame_dig 0
    pushbytes " "
    concat
    frame_bury 0

times_for_footer@3:
    // array/immutable.py:431
    // for _i in urange(n):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b times_for_header@1

times_after_for@4:
    // array/immutable.py:433
    // return result
    retsub


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
add_x:
    // array/immutable.py:436-437
    // @subroutine
    // def add_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1

add_x_block@0:
    // array/immutable.py:438
    // for i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

add_x_for_header@1:
    // array/immutable.py:438
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_x_after_for@4

add_x_for_body@2:
    // array/immutable.py:439
    // arr = arr.append(i)
    frame_dig -2
    extract 2 0
    frame_dig 0
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury -2

add_x_for_footer@3:
    // array/immutable.py:438
    // for i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b add_x_for_header@1

add_x_after_for@4:
    // array/immutable.py:440
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.pop_x(arr: bytes, x: uint64) -> bytes:
pop_x:
    // array/immutable.py:443-444
    // @subroutine
    // def pop_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1

pop_x_block@0:
    // array/immutable.py:445
    // for _i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

pop_x_for_header@1:
    // array/immutable.py:445
    // for _i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz pop_x_after_for@4

pop_x_for_body@2:
    // array/immutable.py:446
    // arr = arr.pop()
    frame_dig -2
    intc_3 // 8
    callsub dynamic_array_pop_fixed_size
    bury 1
    frame_bury -2

pop_x_for_footer@3:
    // array/immutable.py:445
    // for _i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b pop_x_for_header@1

pop_x_after_for@4:
    // array/immutable.py:447
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.add_xb(arr: bytes, x: uint64) -> bytes:
add_xb:
    // array/immutable.py:450-451
    // @subroutine
    // def add_xb(arr: ImmutableArray[BigUInt], x: UInt64) -> ImmutableArray[BigUInt]:
    proto 2 1

add_xb_block@0:
    // array/immutable.py:452
    // for i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

add_xb_for_header@1:
    // array/immutable.py:452
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_xb_after_for@4

add_xb_for_body@2:
    // array/immutable.py:453
    // arr = arr.append(BigUInt(i))
    frame_dig -2
    extract 2 0
    frame_dig 0
    itob
    dup
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 64 // 64
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury -2

add_xb_for_footer@3:
    // array/immutable.py:452
    // for i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b add_xb_for_header@1

add_xb_after_for@4:
    // array/immutable.py:454
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.sum_arr(arr: bytes) -> uint64:
sum_arr:
    // array/immutable.py:457-458
    // @subroutine
    // def sum_arr(arr: ImmutableArray[UInt64]) -> UInt64:
    proto 1 1

sum_arr_block@0:
    // array/immutable.py:459
    // total = UInt64()
    intc_0 // 0
    // array/immutable.py:460
    // for i in arr:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0

sum_arr_for_header@1:
    // array/immutable.py:460
    // for i in arr:
    frame_dig 2
    frame_dig 1
    <
    bz sum_arr_after_for@4

sum_arr_for_body@2:
    // array/immutable.py:460
    // for i in arr:
    frame_dig -1
    extract 2 0
    frame_dig 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // array/immutable.py:461
    // total += i
    frame_dig 0
    +
    frame_bury 0

sum_arr_for_footer@3:
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b sum_arr_for_header@1

sum_arr_after_for@4:
    // array/immutable.py:462
    // return total
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
test_uint64_array:

test_uint64_array_block@0:
    // array/immutable.py:79
    // arr = ImmutableArray[UInt64]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    // array/immutable.py:80
    // assert arr.length == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:82
    // arr = arr.append(UInt64(42))
    extract 2 0
    pushint 42 // 42
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:83
    // assert arr.length == 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert
    // array/immutable.py:84
    // assert arr[-1] == 42
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:86
    // arr = add_x(arr, UInt64(5))
    pushint 5 // 5
    callsub add_x
    // array/immutable.py:87
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:88
    // assert arr[-1] == 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:90
    // arr = arr.append(UInt64(43))
    extract 2 0
    pushint 43 // 43
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:91
    // assert arr.length == 7
    dup
    intc_0 // 0
    extract_uint16
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:92
    // assert arr[-1] == 43
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 43 // 43
    ==
    assert
    // array/immutable.py:93
    // assert arr[0] == 42
    dup
    extract 2 0
    intc_0 // 0
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:95
    // arr = pop_x(arr, UInt64(3))
    pushint 3 // 3
    callsub pop_x
    // array/immutable.py:96
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:97
    // assert arr[-1] == 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 2
    ==
    assert
    // array/immutable.py:99
    // arr = add_x(arr, UInt64(10))
    pushint 10 // 10
    callsub add_x
    // array/immutable.py:100
    // assert arr.length == 14
    dup
    intc_0 // 0
    extract_uint16
    pushint 14 // 14
    ==
    assert
    // array/immutable.py:101
    // assert arr[-1] == 9
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 9 // 9
    ==
    assert
    // array/immutable.py:103
    // arr = arr.append(UInt64(44))
    extract 2 0
    pushint 44 // 44
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:104
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:105
    // assert arr[-1] == 44
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 44 // 44
    ==
    assert
    // array/immutable.py:107
    // arr = arr.replace(2, UInt64(23))
    pushint 23 // 23
    itob
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    >
    assert // Index access is out of bounds
    swap
    pushint 18 // 18
    uncover 2
    replace3
    // array/immutable.py:108
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:109
    // assert arr[2] == 23
    dup
    extract 2 0
    intc_2 // 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 23 // 23
    ==
    assert
    // array/immutable.py:111
    // self.a = arr
    pushbytes "a"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_biguint_array() -> void:
test_biguint_array:

test_biguint_array_block@0:
    // array/immutable.py:115
    // arr = ImmutableArray[BigUInt]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    // array/immutable.py:116
    // assert arr.length == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:118
    // arr = arr.append(BigUInt(Txn.num_app_args - 1))
    extract 2 0
    txn NumAppArgs
    intc_1 // 1
    -
    itob
    dup
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 64 // 64
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:119
    // assert arr.length == 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert
    // array/immutable.py:120
    // assert arr[-1] == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:122
    // arr = add_xb(arr, UInt64(5))
    pushint 5 // 5
    callsub add_xb
    // array/immutable.py:123
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:124
    // assert arr[-1] == 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    pushbytes 0x04
    b==
    assert
    // array/immutable.py:126
    // arr = arr.append(BigUInt(2**512 - 1) - Txn.num_app_args)
    extract 2 0
    txn NumAppArgs
    itob
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    swap
    b-
    dup
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 64 // 64
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:127
    // assert arr.length == 7
    dup
    intc_0 // 0
    extract_uint16
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:128
    // assert arr[-1] == 2**512 - 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    pushbytes 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
    b==
    assert
    // array/immutable.py:129
    // assert arr[0] == 0
    dup
    extract 2 0
    intc_0 // 0
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:131
    // arr = arr.append(BigUInt(2**512 - 1))
    extract 2 0
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    pushint 64 // 64
    bzero
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    b|
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 64 // 64
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:132
    // assert arr.length == 8
    dup
    intc_0 // 0
    extract_uint16
    intc_3 // 8
    ==
    assert
    // array/immutable.py:133
    // assert arr[-1] == 2**512 - 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    bytec 5 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    b==
    assert
    // array/immutable.py:134
    // assert arr[0] == 0
    dup
    extract 2 0
    intc_0 // 0
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: Index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:136
    // Box(ImmutableArray[BigUInt], key=b"biguint").value = arr
    bytec 6 // 0x62696775696e74
    box_del
    pop
    bytec 6 // 0x62696775696e74
    swap
    box_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
test_bool_array:
    // array/immutable.py:138-139
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> None:
    proto 1 0

test_bool_array_block@0:
    // array/immutable.py:140
    // arr = ImmutableArray[bool]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:141
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:143
    // for i in urange(length):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_bool_array_for_header@1:
    // array/immutable.py:143
    // for i in urange(length):
    frame_dig 1
    frame_dig -1
    <
    bz test_bool_array_after_for@4

test_bool_array_for_body@2:
    // array/immutable.py:144
    // arr = arr.append(i == Txn.num_app_args)
    txn NumAppArgs
    frame_dig 1
    ==
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    swap
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0

test_bool_array_for_footer@3:
    // array/immutable.py:143
    // for i in urange(length):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_bool_array_for_header@1

test_bool_array_after_for@4:
    // array/immutable.py:146
    // assert arr.length == length
    frame_dig 0
    intc_0 // 0
    extract_uint16
    frame_dig -1
    ==
    assert
    // array/immutable.py:148
    // if length > 0:
    frame_dig -1
    intc_0 // 0
    >
    bz test_bool_array_after_if_else@6

test_bool_array_if_body@5:
    // array/immutable.py:149
    // assert not arr[0], "expected element 0 to be False"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // Index access is out of bounds
    intc_0 // 0
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 0 to be False

test_bool_array_after_if_else@6:
    // array/immutable.py:150
    // if length > 1:
    frame_dig -1
    intc_1 // 1
    >
    bz test_bool_array_after_if_else@8

test_bool_array_if_body@7:
    // array/immutable.py:151
    // assert not arr[1], "expected element 1 to be False"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    >
    assert // Index access is out of bounds
    intc_1 // 1
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 1 to be False

test_bool_array_after_if_else@8:
    // array/immutable.py:152
    // if length > 2:
    frame_dig -1
    intc_2 // 2
    >
    bz test_bool_array_after_if_else@10

test_bool_array_if_body@9:
    // array/immutable.py:153
    // assert arr[2], "expected element 2 to be True"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    >
    assert // Index access is out of bounds
    intc_2 // 2
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // expected element 2 to be True

test_bool_array_after_if_else@10:
    // array/immutable.py:154
    // if length > 3:
    frame_dig -1
    pushint 3 // 3
    >
    bz test_bool_array_after_if_else@12

test_bool_array_if_body@11:
    // array/immutable.py:155
    // assert not arr[length - 1], "expected last element to be False"
    frame_dig -1
    intc_1 // 1
    -
    frame_dig 0
    dup
    extract 2 0
    cover 2
    intc_0 // 0
    extract_uint16
    dig 1
    >
    assert // Index access is out of bounds
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected last element to be False

test_bool_array_after_if_else@12:
    // array/immutable.py:157
    // self.g = arr
    pushbytes "g"
    frame_dig 0
    app_global_put
    // array/immutable.py:158
    // if length:
    frame_dig -1
    intc_0 // 0
    !=
    bz test_bool_array_after_if_else@14

test_bool_array_if_body@13:
    // array/immutable.py:159
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_bit
    bury 1
    // array/immutable.py:160
    // assert arr.length == length - 1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    intc_1 // 1
    -
    ==
    assert

test_bool_array_after_if_else@14:
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
test_fixed_size_tuple_array:
    // array/immutable.py:162-163
    // @arc4.abimethod()
    // def test_fixed_size_tuple_array(self) -> None:
    proto 0 0

test_fixed_size_tuple_array_block@0:
    // array/immutable.py:164
    // arr = ImmutableArray[tuple[UInt64, UInt64]]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:165
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:167
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_fixed_size_tuple_array_for_header@1:
    // array/immutable.py:167
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_tuple_array_after_for@4

test_fixed_size_tuple_array_for_body@2:
    // array/immutable.py:168
    // arr = arr.append((i + 1, i + 2))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    intc_2 // 2
    +
    swap
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    itob
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 16 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_fixed_size_tuple_array_for_footer@3:
    // array/immutable.py:167
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_fixed_size_tuple_array_for_header@1

test_fixed_size_tuple_array_after_for@4:
    // array/immutable.py:170
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:171
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:172
    // assert arr[-1] == (UInt64(5), UInt64(6))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 5 // 5
    ==
    swap
    pushint 6 // 6
    ==
    &&
    assert
    // array/immutable.py:174
    // arr = arr.pop()
    pushint 16 // 16
    callsub dynamic_array_pop_fixed_size
    bury 1
    // array/immutable.py:175
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:176
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:177
    // assert arr[-1] == (UInt64(4), UInt64(5))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 4 // 4
    ==
    swap
    pushint 5 // 5
    ==
    &&
    assert
    // array/immutable.py:178
    // self.c = arr
    pushbytes "c"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
test_fixed_size_named_tuple_array:
    // array/immutable.py:180-181
    // @arc4.abimethod()
    // def test_fixed_size_named_tuple_array(self) -> None:
    proto 0 0

test_fixed_size_named_tuple_array_block@0:
    // array/immutable.py:182
    // arr = ImmutableArray[MyTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:183
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:185
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_fixed_size_named_tuple_array_for_header@1:
    // array/immutable.py:185
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_named_tuple_array_after_for@4

test_fixed_size_named_tuple_array_for_body@2:
    // array/immutable.py:186
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    dup
    pushint 3 // 3
    *
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_fixed_size_named_tuple_array_for_footer@3:
    // array/immutable.py:185
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_fixed_size_named_tuple_array_for_header@1

test_fixed_size_named_tuple_array_after_for@4:
    // array/immutable.py:188
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:189
    // foo, bar, baz = arr[0]
    dup
    extract 2 0
    intc_0 // 0
    pushint 9 // 9
    *
    pushint 9 // 9
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 64 // 64
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    swap
    pushint 65 // 65
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    uncover 2
    swap
    cover 2
    // array/immutable.py:190
    // assert foo == 0
    intc_0 // 0
    ==
    assert
    // array/immutable.py:191
    // assert bar
    assert
    // array/immutable.py:192
    // assert baz
    assert
    // array/immutable.py:193
    // self.d = arr
    pushbytes "d"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
test_dynamic_sized_tuple_array:
    // array/immutable.py:195-196
    // @arc4.abimethod()
    // def test_dynamic_sized_tuple_array(self) -> None:
    proto 0 0

test_dynamic_sized_tuple_array_block@0:
    // array/immutable.py:197
    // arr = ImmutableArray[tuple[UInt64, Bytes]]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:198
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:200
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_dynamic_sized_tuple_array_for_header@1:
    // array/immutable.py:200
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@4

test_dynamic_sized_tuple_array_for_body@2:
    // array/immutable.py:201
    // arr = arr.append((i + 1, op.bzero(i)))
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    bzero
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0

test_dynamic_sized_tuple_array_for_footer@3:
    // array/immutable.py:200
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_tuple_array_for_header@1

test_dynamic_sized_tuple_array_after_for@4:
    // array/immutable.py:203
    // assert arr.length == 5
    frame_dig 0
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:204
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 1

test_dynamic_sized_tuple_array_for_header@5:
    // array/immutable.py:204
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@8

test_dynamic_sized_tuple_array_for_body@6:
    // array/immutable.py:205
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 0
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    dig 1
    intc_0 // 0
    extract_uint16
    dig 3
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dig 2
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:206
    // assert arr[i][1].length == i, "expected 2nd element to be correct"
    dup
    extract 2 0
    dig 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    swap
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    len
    ==
    assert // expected 2nd element to be correct

test_dynamic_sized_tuple_array_for_footer@7:
    // array/immutable.py:204
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_tuple_array_for_header@5

test_dynamic_sized_tuple_array_after_for@8:
    // array/immutable.py:208
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:209
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:210
    // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
    dup
    extract 2 0
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    swap
    intc_0 // 0
    bzero
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:211
    // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    dup
    intc_2 // 2
    *
    dig 2
    swap
    extract_uint16
    cover 3
    dig 2
    intc_0 // 0
    extract_uint16
    swap
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    swap
    pushint 3 // 3
    bzero
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:212
    // self.e = arr
    pushbytes "e"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
test_dynamic_sized_named_tuple_array:
    // array/immutable.py:214-215
    // @arc4.abimethod()
    // def test_dynamic_sized_named_tuple_array(self) -> None:
    proto 0 0

test_dynamic_sized_named_tuple_array_block@0:
    // array/immutable.py:216
    // arr = ImmutableArray[MyDynamicSizedTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:217
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:219
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_dynamic_sized_named_tuple_array_for_header@1:
    // array/immutable.py:219
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@4

test_dynamic_sized_named_tuple_array_for_body@2:
    // array/immutable.py:220
    // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    callsub times
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0

test_dynamic_sized_named_tuple_array_for_footer@3:
    // array/immutable.py:219
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_named_tuple_array_for_header@1

test_dynamic_sized_named_tuple_array_after_for@4:
    // array/immutable.py:222
    // assert arr.length == 5
    frame_dig 0
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:223
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 1

test_dynamic_sized_named_tuple_array_for_header@5:
    // array/immutable.py:223
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@8

test_dynamic_sized_named_tuple_array_for_body@6:
    // array/immutable.py:224
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 0
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    dig 1
    intc_0 // 0
    extract_uint16
    dig 3
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dig 2
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:225
    // assert arr[i][1] == times(i), "expected 2nd element to be correct"
    dup
    extract 2 0
    dig 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    swap
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    callsub times
    ==
    assert // expected 2nd element to be correct

test_dynamic_sized_named_tuple_array_for_footer@7:
    // array/immutable.py:223
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_named_tuple_array_for_header@5

test_dynamic_sized_named_tuple_array_after_for@8:
    // array/immutable.py:227
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:228
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:229
    // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
    dup
    extract 2 0
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    swap
    bytec_0 // ""
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:230
    // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    dup
    intc_2 // 2
    *
    dig 2
    swap
    extract_uint16
    cover 3
    dig 2
    intc_0 // 0
    extract_uint16
    swap
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    swap
    pushbytes "   "
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:231
    // self.f = arr
    pushbytes "f"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: bytes) -> void:
test_implicit_conversion_log:
    // array/immutable.py:233-234
    // @arc4.abimethod()
    // def test_implicit_conversion_log(self, arr: ImmutableArray[UInt64]) -> None:
    proto 1 0

test_implicit_conversion_log_block@0:
    // array/immutable.py:235
    // log(arr)
    frame_dig -1
    log
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: bytes) -> void:
test_implicit_conversion_emit:
    // array/immutable.py:237-238
    // @arc4.abimethod()
    // def test_implicit_conversion_emit(self, arr: ImmutableArray[UInt64]) -> None:
    proto 1 0

test_implicit_conversion_emit_block@0:
    // array/immutable.py:239
    // arc4.emit("emit_test", arr)
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    frame_dig -1
    concat
    pushbytes 0xfa40c053 // method "emit_test(uint64[])"
    swap
    concat
    log
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: bytes) -> bytes:
test_nested_array:
    // array/immutable.py:241-244
    // @arc4.abimethod()
    // def test_nested_array(
    //     self, arr_to_add: UInt64, arr: ImmutableArray[ImmutableArray[UInt64]]
    // ) -> ImmutableArray[UInt64]:
    proto 2 1
    intc_0 // 0
    dup
    bytec_0 // ""
    dupn 2

test_nested_array_block@0:
    // array/immutable.py:245-246
    // # add n new arrays
    // for i in urange(arr_to_add):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_nested_array_for_header@1:
    // array/immutable.py:245-246
    // # add n new arrays
    // for i in urange(arr_to_add):
    frame_dig 5
    frame_dig -2
    <
    bz test_nested_array_after_for@8

test_nested_array_for_body@2:
    // array/immutable.py:247
    // extra_arr = ImmutableArray[UInt64]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    frame_bury 0
    // array/immutable.py:248
    // for j in urange(i):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4

test_nested_array_for_header@3:
    // array/immutable.py:248
    // for j in urange(i):
    frame_dig 4
    frame_dig 5
    <
    bz test_nested_array_after_for@6

test_nested_array_for_body@4:
    // array/immutable.py:249
    // extra_arr = extra_arr.append(j)
    frame_dig 0
    extract 2 0
    frame_dig 4
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_nested_array_for_footer@5:
    // array/immutable.py:248
    // for j in urange(i):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_nested_array_for_header@3

test_nested_array_after_for@6:
    // array/immutable.py:250
    // arr = arr.append(extra_arr)
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    concat
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury -1

test_nested_array_for_footer@7:
    // array/immutable.py:245-246
    // # add n new arrays
    // for i in urange(arr_to_add):
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b test_nested_array_for_header@1

test_nested_array_after_for@8:
    // array/immutable.py:252-253
    // # sum inner arrays and return an array containing sums
    // totals = ImmutableArray[UInt64]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    frame_bury 1
    // array/immutable.py:254
    // for inner_arr in arr:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 3

test_nested_array_for_header@9:
    // array/immutable.py:254
    // for inner_arr in arr:
    frame_dig 3
    frame_dig 2
    <
    bz test_nested_array_after_for@12

test_nested_array_for_body@10:
    // array/immutable.py:254
    // for inner_arr in arr:
    frame_dig -1
    extract 2 0
    frame_dig 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    // array/immutable.py:255
    // totals = totals.append(sum_arr(inner_arr))
    frame_dig 1
    extract 2 0
    swap
    callsub sum_arr
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1

test_nested_array_for_footer@11:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_nested_array_for_header@9

test_nested_array_after_for@12:
    // array/immutable.py:257
    // return totals
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
test_bit_packed_tuples:
    // array/immutable.py:259-260
    // @arc4.abimethod()
    // def test_bit_packed_tuples(self) -> None:
    proto 0 0

test_bit_packed_tuples_block@0:
    // array/immutable.py:261
    // arr2 = ImmutableArray[TwoBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:262
    // arr7 = ImmutableArray[SevenBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 2
    cover 2
    // array/immutable.py:263
    // arr8 = ImmutableArray[EightBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 3
    cover 3
    // array/immutable.py:264
    // arr9 = ImmutableArray[NineBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 4
    cover 4
    // array/immutable.py:265
    // assert arr2.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:266
    // assert arr7.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:267
    // assert arr8.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:268
    // assert arr9.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:270
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_bit_packed_tuples_for_header@1:
    // array/immutable.py:270
    // for i in urange(5):
    frame_dig 4
    pushint 5 // 5
    <
    bz test_bit_packed_tuples_after_for@4

test_bit_packed_tuples_for_body@2:
    // array/immutable.py:271
    // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
    frame_dig 0
    extract 2 0
    frame_dig 4
    dup
    intc_0 // 0
    ==
    swap
    dup
    intc_1 // 1
    ==
    swap
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    uncover 3
    setbit
    bytec_0 // 0x
    swap
    concat
    uncover 2
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:272-284
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    frame_dig 1
    extract 2 0
    swap
    // array/immutable.py:276
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:277
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:278
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:279
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:280
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:281
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:282
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:275
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 7
    // array/immutable.py:274-275
    // foo=i,
    // bar=i + 1,
    dup
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 3
    setbit
    pushint 66 // 66
    uncover 3
    setbit
    pushint 67 // 67
    uncover 3
    setbit
    pushint 68 // 68
    uncover 3
    setbit
    pushint 69 // 69
    uncover 3
    setbit
    pushint 70 // 70
    uncover 4
    setbit
    uncover 2
    itob
    concat
    // array/immutable.py:273-283
    // SevenBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:272-284
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    uncover 2
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // array/immutable.py:285-298
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    frame_dig 2
    extract 2 0
    swap
    // array/immutable.py:289
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:290
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:291
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:292
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:293
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:294
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:295
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:296
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:288
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 8
    // array/immutable.py:287-288
    // foo=i,
    // bar=i + 1,
    dup
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 3
    setbit
    pushint 66 // 66
    uncover 3
    setbit
    pushint 67 // 67
    uncover 3
    setbit
    pushint 68 // 68
    uncover 3
    setbit
    pushint 69 // 69
    uncover 3
    setbit
    pushint 70 // 70
    uncover 3
    setbit
    pushint 71 // 71
    uncover 4
    setbit
    uncover 2
    itob
    concat
    // array/immutable.py:286-297
    // EightBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    //     h=i == 7,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:285-298
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    uncover 2
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 2
    // array/immutable.py:299-313
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    frame_dig 3
    extract 2 0
    swap
    // array/immutable.py:303
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:304
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:305
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:306
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:307
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:308
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:309
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:310
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:311
    // i=i == 8,
    dup
    intc_3 // 8
    ==
    cover 9
    // array/immutable.py:302
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 10
    // array/immutable.py:301-302
    // foo=i,
    // bar=i + 1,
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 3
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    pushint 66 // 66
    uncover 2
    setbit
    pushint 67 // 67
    uncover 2
    setbit
    pushint 68 // 68
    uncover 2
    setbit
    pushint 69 // 69
    uncover 2
    setbit
    pushint 70 // 70
    uncover 2
    setbit
    pushint 71 // 71
    uncover 2
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    swap
    itob
    concat
    // array/immutable.py:300-312
    // NineBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    //     h=i == 7,
    //     i=i == 8,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:299-313
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    concat
    dup
    len
    pushint 18 // 18
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 3

test_bit_packed_tuples_for_footer@3:
    // array/immutable.py:270
    // for i in urange(5):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_bit_packed_tuples_for_header@1

test_bit_packed_tuples_after_for@4:
    // array/immutable.py:315
    // assert arr2.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:316
    // assert arr7.length == 5
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:317
    // assert arr8.length == 5
    frame_dig 2
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:318
    // assert arr9.length == 5
    frame_dig 3
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:319
    // self.bool2 = arr2
    pushbytes "bool2"
    uncover 4
    app_global_put
    // array/immutable.py:320
    // self.bool7 = arr7
    pushbytes "bool7"
    uncover 3
    app_global_put
    // array/immutable.py:321
    // self.bool8 = arr8
    pushbytes "bool8"
    uncover 2
    app_global_put
    // array/immutable.py:322
    // self.bool9 = arr9
    pushbytes "bool9"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: bytes, arr2: bytes, arr3: bytes, arr4: bytes) -> uint64, uint64, uint64, uint64:
sum_uints_and_lengths_and_trues:
    // array/immutable.py:324-331
    // @arc4.abimethod()
    // def sum_uints_and_lengths_and_trues(
    //     self,
    //     arr1: ImmutableArray[UInt64],
    //     arr2: ImmutableArray[bool],
    //     arr3: ImmutableArray[MyTuple],
    //     arr4: ImmutableArray[MyDynamicSizedTuple],
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 4 4
    bytec_0 // ""
    dupn 8

sum_uints_and_lengths_and_trues_block@0:
    // array/immutable.py:332
    // sum1 = sum2 = sum3 = sum4 = UInt64()
    intc_0 // 0
    dupn 3
    // array/immutable.py:333
    // for i in arr1:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    intc_0 // 0

sum_uints_and_lengths_and_trues_for_header@1:
    // array/immutable.py:333
    // for i in arr1:
    frame_dig 14
    frame_dig 13
    <
    bz sum_uints_and_lengths_and_trues_after_for@4

sum_uints_and_lengths_and_trues_for_body@2:
    // array/immutable.py:333
    // for i in arr1:
    frame_dig -4
    extract 2 0
    frame_dig 14
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    // array/immutable.py:334
    // sum1 += i
    frame_dig 12
    +
    frame_bury 12

sum_uints_and_lengths_and_trues_for_footer@3:
    frame_dig 14
    intc_1 // 1
    +
    frame_bury 14
    b sum_uints_and_lengths_and_trues_for_header@1

sum_uints_and_lengths_and_trues_after_for@4:
    // array/immutable.py:335
    // for b in arr2:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    frame_bury 0
    intc_0 // 0
    frame_bury 3

sum_uints_and_lengths_and_trues_for_header@5:
    // array/immutable.py:335
    // for b in arr2:
    frame_dig 3
    frame_dig 0
    <
    bz sum_uints_and_lengths_and_trues_after_for@10

sum_uints_and_lengths_and_trues_for_body@6:
    // array/immutable.py:335
    // for b in arr2:
    frame_dig -3
    extract 2 0
    frame_dig 3
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    frame_dig 11
    frame_bury 6
    // array/immutable.py:336
    // if b:
    bz sum_uints_and_lengths_and_trues_after_if_else@8

sum_uints_and_lengths_and_trues_if_body@7:
    // array/immutable.py:337
    // sum2 += 1
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 6

sum_uints_and_lengths_and_trues_after_if_else@8:
    frame_dig 6
    frame_bury 11

sum_uints_and_lengths_and_trues_for_footer@9:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b sum_uints_and_lengths_and_trues_for_header@5

sum_uints_and_lengths_and_trues_after_for@10:
    // array/immutable.py:338
    // for tup in arr3:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 4

sum_uints_and_lengths_and_trues_for_header@11:
    // array/immutable.py:338
    // for tup in arr3:
    frame_dig 4
    frame_dig 1
    <
    bz sum_uints_and_lengths_and_trues_after_for@18

sum_uints_and_lengths_and_trues_for_body@12:
    // array/immutable.py:338
    // for tup in arr3:
    frame_dig -2
    extract 2 0
    frame_dig 4
    pushint 9 // 9
    *
    pushint 9 // 9
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 64 // 64
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    swap
    pushint 65 // 65
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    uncover 2
    swap
    frame_bury 8
    // array/immutable.py:339
    // sum3 += tup.foo
    frame_dig 10
    +
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:340
    // if tup.bar:
    bz sum_uints_and_lengths_and_trues_after_if_else@14

sum_uints_and_lengths_and_trues_if_body@13:
    // array/immutable.py:341
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7

sum_uints_and_lengths_and_trues_after_if_else@14:
    frame_dig 7
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:342
    // if tup.baz:
    frame_dig 8
    bz sum_uints_and_lengths_and_trues_after_if_else@16

sum_uints_and_lengths_and_trues_if_body@15:
    // array/immutable.py:343
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7

sum_uints_and_lengths_and_trues_after_if_else@16:
    frame_dig 7
    frame_bury 10

sum_uints_and_lengths_and_trues_for_footer@17:
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b sum_uints_and_lengths_and_trues_for_header@11

sum_uints_and_lengths_and_trues_after_for@18:
    // array/immutable.py:344
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 5

sum_uints_and_lengths_and_trues_for_header@19:
    // array/immutable.py:344
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig 5
    frame_dig 2
    <
    bz sum_uints_and_lengths_and_trues_after_for@22

sum_uints_and_lengths_and_trues_for_body@20:
    // array/immutable.py:344
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig -1
    extract 2 0
    frame_dig 5
    dup
    cover 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    // array/immutable.py:345
    // sum4 += dyn_tup.foo
    frame_dig 9
    +
    // array/immutable.py:346
    // sum4 += dyn_tup.bar.bytes.length
    dig 1
    len
    +
    frame_bury 9
    // array/immutable.py:347
    // assert dyn_tup.bar.bytes.length == idx, "expected string length to match index"
    len
    ==
    assert // expected string length to match index

sum_uints_and_lengths_and_trues_for_footer@21:
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b sum_uints_and_lengths_and_trues_for_header@19

sum_uints_and_lengths_and_trues_after_for@22:
    // array/immutable.py:349
    // return sum1, sum2, sum3, sum4
    frame_dig 12
    frame_dig 11
    frame_dig 10
    frame_dig 9
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> bytes:
test_uint64_return:
    // array/immutable.py:351-352
    // @arc4.abimethod()
    // def test_uint64_return(self, append: UInt64) -> ImmutableArray[UInt64]:
    proto 1 1

test_uint64_return_block@0:
    // array/immutable.py:353
    // arr = ImmutableArray(UInt64(1), UInt64(2), UInt64(3))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    intc_1 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    intc_2 // 2
    itob
    bytec_0 // 0x
    swap
    concat
    concat
    pushint 3 // 3
    itob
    bytec_0 // 0x
    swap
    concat
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:354
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_uint64_return_for_header@1:
    // array/immutable.py:354
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_uint64_return_after_for@4

test_uint64_return_for_body@2:
    // array/immutable.py:355
    // arr = arr.append(i)
    frame_dig 0
    extract 2 0
    frame_dig 1
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_uint64_return_for_footer@3:
    // array/immutable.py:354
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_uint64_return_for_header@1

test_uint64_return_after_for@4:
    // array/immutable.py:356
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bytes:
test_bool_return:
    // array/immutable.py:358-359
    // @arc4.abimethod()
    // def test_bool_return(self, append: UInt64) -> ImmutableArray[bool]:
    proto 1 1

test_bool_return_block@0:
    // array/immutable.py:360
    // arr = ImmutableArray(True, False, True, False, True)
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushint 5 // 5
    intc_3 // 8
    callsub dynamic_array_concat_bits
    // array/immutable.py:361
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_bool_return_for_header@1:
    // array/immutable.py:361
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_bool_return_after_for@4

test_bool_return_for_body@2:
    // array/immutable.py:362
    // arr = arr.append(i % 2 == 0)
    frame_dig 1
    intc_2 // 2
    %
    intc_0 // 0
    ==
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    swap
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0

test_bool_return_for_footer@3:
    // array/immutable.py:361
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_bool_return_for_header@1

test_bool_return_after_for@4:
    // array/immutable.py:363
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> bytes:
test_tuple_return:
    // array/immutable.py:365-366
    // @arc4.abimethod()
    // def test_tuple_return(self, append: UInt64) -> ImmutableArray[MyTuple]:
    proto 1 1

test_tuple_return_block@0:
    // array/immutable.py:367
    // arr = ImmutableArray(MyTuple(UInt64(), True, False))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    intc_0 // 0
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    intc_1 // 1
    select
    concat
    pushint 65 // 65
    intc_0 // 0
    setbit
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:368
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_tuple_return_for_header@1:
    // array/immutable.py:368
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_tuple_return_after_for@4

test_tuple_return_for_body@2:
    // array/immutable.py:369
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    dup
    pushint 3 // 3
    %
    intc_0 // 0
    ==
    cover 2
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 3
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_tuple_return_for_footer@3:
    // array/immutable.py:368
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_tuple_return_for_header@1

test_tuple_return_after_for@4:
    // array/immutable.py:370
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> bytes:
test_dynamic_tuple_return:
    // array/immutable.py:372-373
    // @arc4.abimethod()
    // def test_dynamic_tuple_return(self, append: UInt64) -> ImmutableArray[MyDynamicSizedTuple]:
    proto 1 1

test_dynamic_tuple_return_block@0:
    // array/immutable.py:374
    // arr = ImmutableArray(MyDynamicSizedTuple(UInt64(), String("Hello")))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    intc_0 // 0
    itob
    bytec 7 // "Hello"
    len
    itob
    extract 6 2
    bytec 7 // "Hello"
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    extract 2 0
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    // array/immutable.py:375
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_dynamic_tuple_return_for_header@1:
    // array/immutable.py:375
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_dynamic_tuple_return_after_for@4

test_dynamic_tuple_return_for_body@2:
    // array/immutable.py:376
    // arr = arr.append(MyDynamicSizedTuple(i, times(i)))
    frame_dig 1
    dup
    callsub times
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0

test_dynamic_tuple_return_for_footer@3:
    // array/immutable.py:375
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_tuple_return_for_header@1

test_dynamic_tuple_return_after_for@4:
    // array/immutable.py:377
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: bytes, append: uint64) -> bytes:
test_convert_to_array_and_back:
    // array/immutable.py:379-382
    // @arc4.abimethod()
    // def test_convert_to_array_and_back(
    //     self, arr: ImmutableArray[MyTuple], append: UInt64
    // ) -> ImmutableArray[MyTuple]:
    proto 2 1

test_convert_to_array_and_back_block@0:
    // array/immutable.py:383
    // mutable = Array[MyTuple]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    dup
    // array/immutable.py:384
    // mutable.extend(arr)
    frame_dig -2
    extract 2 0
    swap
    dup
    loads
    uncover 2
    concat // on error: max array length exceeded
    stores
    // array/immutable.py:385
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_convert_to_array_and_back_for_header@1:
    // array/immutable.py:385
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_convert_to_array_and_back_after_for@4

test_convert_to_array_and_back_for_body@2:
    // array/immutable.py:386
    // mutable.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    dup
    pushint 3 // 3
    %
    intc_0 // 0
    ==
    cover 2
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec 4 // 0x80
    uncover 3
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    dup
    cover 2
    loads
    swap
    concat // on error: max array length exceeded
    stores

test_convert_to_array_and_back_for_footer@3:
    // array/immutable.py:385
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_convert_to_array_and_back_for_header@1

test_convert_to_array_and_back_after_for@4:
    // array/immutable.py:387
    // return mutable.freeze()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    frame_dig 0
    loads
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: bytes) -> bytes:
test_concat_with_arc4_tuple:
    // array/immutable.py:389-392
    // @arc4.abimethod()
    // def test_concat_with_arc4_tuple(
    //     self, arg: arc4.Tuple[arc4.UInt64, arc4.UInt64]
    // ) -> ImmutableArray[arc4.UInt64]:
    proto 1 1

test_concat_with_arc4_tuple_block@0:
    // array/immutable.py:393
    // prefix = ImmutableArray(arc4.UInt64(1), arc4.UInt64(2))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    bytec_0 // 0x
    bytec 8 // 0x0000000000000001
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    bytec 9 // 0x0000000000000002
    concat
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:394
    // result = prefix + arg
    extract 2 0
    bytec_0 // 0x
    frame_dig -1
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:395
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes:
test_concat_with_native_tuple:
    // array/immutable.py:397-400
    // @arc4.abimethod()
    // def test_concat_with_native_tuple(
    //     self, arg: tuple[arc4.UInt64, arc4.UInt64]
    // ) -> ImmutableArray[arc4.UInt64]:
    proto 2 1

test_concat_with_native_tuple_block@0:
    // array/immutable.py:401
    // prefix = ImmutableArray(arc4.UInt64(1), arc4.UInt64(2))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    bytec_0 // 0x
    bytec 8 // 0x0000000000000001
    concat
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    bytec 9 // 0x0000000000000002
    concat
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:402
    // result = prefix + arg
    extract 2 0
    // array/immutable.py:399
    // self, arg: tuple[arc4.UInt64, arc4.UInt64]
    bytec_0 // 0x
    frame_dig -2
    concat
    // array/immutable.py:402
    // result = prefix + arg
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:399
    // self, arg: tuple[arc4.UInt64, arc4.UInt64]
    bytec_0 // 0x
    frame_dig -1
    concat
    // array/immutable.py:402
    // result = prefix + arg
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:403
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: bytes) -> bytes:
test_dynamic_concat_with_arc4_tuple:
    // array/immutable.py:405-408
    // @arc4.abimethod()
    // def test_dynamic_concat_with_arc4_tuple(
    //     self, arg: arc4.Tuple[arc4.String, arc4.String]
    // ) -> ImmutableArray[arc4.String]:
    proto 1 1

test_dynamic_concat_with_arc4_tuple_block@0:
    // array/immutable.py:409
    // prefix = ImmutableArray(arc4.String("a"), arc4.String("b"))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    bytec 10 // 0x000161
    concat
    bytec 11 // 0x000162
    concat
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:410
    // result = prefix + arg
    intc_2 // 2
    dup
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:411
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes:
test_dynamic_concat_with_native_tuple:
    // array/immutable.py:413-416
    // @arc4.abimethod()
    // def test_dynamic_concat_with_native_tuple(
    //     self, arg: tuple[arc4.String, arc4.String]
    // ) -> ImmutableArray[arc4.String]:
    proto 2 1

test_dynamic_concat_with_native_tuple_block@0:
    // array/immutable.py:417
    // prefix = ImmutableArray(arc4.String("a"), arc4.String("b"))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    bytec_0 // 0x
    bytec 10 // 0x000161
    concat
    bytec 11 // 0x000162
    concat
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:418
    // result = prefix + arg
    bytec_0 // 0x
    frame_dig -2
    concat
    frame_dig -1
    concat
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:419
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: bytes, imm2: bytes) -> bytes:
test_concat_immutable_dynamic:
    // array/immutable.py:421-424
    // @arc4.abimethod()
    // def test_concat_immutable_dynamic(
    //     self, imm1: ImmutableArray[MyDynamicSizedTuple], imm2: ImmutableArray[MyDynamicSizedTuple]
    // ) -> ImmutableArray[MyDynamicSizedTuple]:
    proto 2 1

test_concat_immutable_dynamic_block@0:
    // array/immutable.py:425
    // return imm1 + imm2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_dig -2
    extract 2 0
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    extract 2 0
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:

_puya_lib.mem.new_slot@entry:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
