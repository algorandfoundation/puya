#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x 0x00 0x0000 0x80 0x151f7c75 "Hello"

main_block@1:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@17

main_abi_routing@2:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x44d42f99 // method "test_uint64_array()void"
    pushbytes 0x743d70ed // method "test_bool_array(uint64)void"
    pushbytes 0x1c7e0494 // method "test_fixed_size_tuple_array()void"
    pushbytes 0xa2d5860b // method "test_fixed_size_named_tuple_array()void"
    pushbytes 0xe05fc564 // method "test_dynamic_sized_tuple_array()void"
    pushbytes 0x1e092b83 // method "test_dynamic_sized_named_tuple_array()void"
    pushbytes 0x6cb7c991 // method "test_bit_packed_tuples()void"
    pushbytes 0x2608af8b // method "test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void"
    pushbytes 0x98f7dac6 // method "test_uint64_return()uint64[]"
    pushbytes 0x54a93077 // method "test_bool_return()bool[]"
    pushbytes 0xcf4dde74 // method "test_tuple_return()(uint64,bool,bool)[]"
    pushbytes 0xa32a85fa // method "test_dynamic_tuple_return()(uint64,string)[]"
    uncover 12
    match main_test_uint64_array_route@3 main_test_bool_array_route@4 main_test_fixed_size_tuple_array_route@5 main_test_fixed_size_named_tuple_array_route@6 main_test_dynamic_sized_tuple_array_route@7 main_test_dynamic_sized_named_tuple_array_route@8 main_test_bit_packed_tuples_route@9 main_test_args_route@10 main_test_uint64_return_route@11 main_test_bool_return_route@12 main_test_tuple_return_route@13 main_test_dynamic_tuple_return_route@14

main_switch_case_default@15:

main_switch_case_next@16:

main_after_if_else@21:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22:
    return

main_test_dynamic_tuple_return_route@14:
    // array/immutable.py:280
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_tuple_return
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_tuple_return_route@13:
    // array/immutable.py:276
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_tuple_return
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_bool_return_route@12:
    // array/immutable.py:272
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_bool_return
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_uint64_return_route@11:
    // array/immutable.py:268
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_uint64_return
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_args_route@10:
    // array/immutable.py:258
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // array/immutable.py:258
    // @arc4.abimethod()
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_args
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_bit_packed_tuples_route@9:
    // array/immutable.py:193
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_bit_packed_tuples
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_dynamic_sized_named_tuple_array_route@8:
    // array/immutable.py:174
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_sized_named_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_dynamic_sized_tuple_array_route@7:
    // array/immutable.py:155
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_dynamic_sized_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_fixed_size_named_tuple_array_route@6:
    // array/immutable.py:140
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_fixed_size_named_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_fixed_size_tuple_array_route@5:
    // array/immutable.py:122
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_fixed_size_tuple_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_bool_array_route@4:
    // array/immutable.py:98
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:98
    // @arc4.abimethod()
    callsub test_bool_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_test_uint64_array_route@3:
    // array/immutable.py:62
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test_uint64_array
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22

main_bare_routing@17:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@18

main_switch_case_default@19:

main_switch_case_next@20:
    b main_after_if_else@21

main___algopy_default_create@18:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@23:

main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create@24:
    intc_1 // 1
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22


// _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> bytes, bytes:
dynamic_array_pop_bit:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dup
    itob
    extract 6 0
    frame_dig -1
    swap
    replace2 0
    dig 1
    pushint 16 // 16
    +
    dup2
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    cover 3
    intc_0 // 0
    setbit
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    intc_2 // 2
    +
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    swap
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dupn 2
    intc_2 // 2
    *
    dup
    cover 2
    frame_dig -1
    extract 2 0
    dup
    cover 3
    dup
    uncover 2
    extract_uint16
    dup
    cover 2
    cover 3
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    swap
    bytec_0 // 0x
    swap
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_pop_dynamic_element_for_header@1:
    frame_dig 7
    frame_dig 6
    <
    bz dynamic_array_pop_dynamic_element_after_for@4

dynamic_array_pop_dynamic_element_for_body@2:
    frame_dig 2
    frame_dig 7
    extract_uint16
    intc_2 // 2
    -
    itob
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5

dynamic_array_pop_dynamic_element_for_footer@3:
    frame_dig 7
    intc_2 // 2
    +
    frame_bury 7
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_after_for@4:
    frame_dig 0
    itob
    extract 6 2
    frame_dig 5
    concat
    frame_dig 1
    intc_2 // 2
    +
    frame_dig 2
    swap
    frame_dig 3
    substring3
    concat
    frame_dig 4
    swap
    frame_bury 1
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_0 // ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    cover 3
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2

dynamic_array_concat_bits_if_body@1:
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5

dynamic_array_concat_bits_while_body@4:
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_0 // ""
    dup
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4

dynamic_array_concat_dynamic_element_for_body@2:
    frame_dig -3
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1

dynamic_array_concat_dynamic_element_for_footer@3:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 2
    frame_dig -2
    intc_2 // 2
    *
    frame_bury 0
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 0
    <
    bz dynamic_array_concat_dynamic_element_after_for@8

dynamic_array_concat_dynamic_element_for_body@6:
    frame_dig -1
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1

dynamic_array_concat_dynamic_element_for_footer@7:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -4
    intc_2 // 2
    *
    frame_dig -3
    len
    frame_dig -3
    uncover 2
    uncover 2
    substring3
    concat
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// test_cases.array.immutable.times(n: uint64) -> bytes:
times:
    // array/immutable.py:287-288
    // @subroutine
    // def times(n: UInt64) -> String:
    proto 1 1
    // array/immutable.py:289
    // result = String()
    bytec_0 // ""
    // array/immutable.py:290
    // for _i in urange(n):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

times_for_header@1:
    // array/immutable.py:290
    // for _i in urange(n):
    frame_dig 1
    frame_dig -1
    <
    bz times_after_for@4

times_for_body@2:
    // array/immutable.py:291
    // result += String(" ")
    frame_dig 0
    pushbytes " "
    concat
    frame_bury 0

times_for_footer@3:
    // array/immutable.py:290
    // for _i in urange(n):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b times_for_header@1

times_after_for@4:
    // array/immutable.py:292
    // return result
    retsub


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
add_x:
    // array/immutable.py:295-296
    // @subroutine
    // def add_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1
    // array/immutable.py:297
    // for i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

add_x_for_header@1:
    // array/immutable.py:297
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_x_after_for@4

add_x_for_body@2:
    // array/immutable.py:298
    // arr = arr.append(i)
    frame_dig -2
    extract 2 0
    frame_dig 0
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury -2

add_x_for_footer@3:
    // array/immutable.py:297
    // for i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b add_x_for_header@1

add_x_after_for@4:
    // array/immutable.py:299
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.pop_x(arr: bytes, x: uint64) -> bytes:
pop_x:
    // array/immutable.py:302-303
    // @subroutine
    // def pop_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1
    // array/immutable.py:304
    // for _i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

pop_x_for_header@1:
    // array/immutable.py:304
    // for _i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz pop_x_after_for@4

pop_x_for_body@2:
    // array/immutable.py:305
    // arr = arr.pop()
    frame_dig -2
    intc_3 // 8
    callsub dynamic_array_pop_fixed_size
    bury 1
    frame_bury -2

pop_x_for_footer@3:
    // array/immutable.py:304
    // for _i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b pop_x_for_header@1

pop_x_after_for@4:
    // array/immutable.py:306
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
test_uint64_array:
    // array/immutable.py:64
    // arr = ImmutableArray[UInt64]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    // array/immutable.py:65
    // assert arr.length == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:67
    // arr = arr.append(UInt64(42))
    extract 2 0
    pushint 42 // 42
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:68
    // assert arr.length == 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert
    // array/immutable.py:69
    // assert arr[-1] == 42
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:71
    // arr = add_x(arr, UInt64(5))
    pushint 5 // 5
    callsub add_x
    // array/immutable.py:72
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:73
    // assert arr[-1] == 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:75
    // arr = arr.append(UInt64(43))
    extract 2 0
    pushint 43 // 43
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:76
    // assert arr.length == 7
    dup
    intc_0 // 0
    extract_uint16
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:77
    // assert arr[-1] == 43
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 43 // 43
    ==
    assert
    // array/immutable.py:78
    // assert arr[0] == 42
    dup
    extract 2 0
    intc_0 // 0
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:80
    // arr = pop_x(arr, UInt64(3))
    pushint 3 // 3
    callsub pop_x
    // array/immutable.py:81
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:82
    // assert arr[-1] == 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    intc_2 // 2
    ==
    assert
    // array/immutable.py:84
    // arr = add_x(arr, UInt64(10))
    pushint 10 // 10
    callsub add_x
    // array/immutable.py:85
    // assert arr.length == 14
    dup
    intc_0 // 0
    extract_uint16
    pushint 14 // 14
    ==
    assert
    // array/immutable.py:86
    // assert arr[-1] == 9
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 9 // 9
    ==
    assert
    // array/immutable.py:88
    // arr = arr.append(UInt64(44))
    extract 2 0
    pushint 44 // 44
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:89
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:90
    // assert arr[-1] == 44
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 44 // 44
    ==
    assert
    // array/immutable.py:92
    // arr = arr.replace(2, UInt64(23))
    pushint 23 // 23
    itob
    dig 1
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    >
    assert // Index access is out of bounds
    swap
    pushint 18 // 18
    uncover 2
    replace3
    // array/immutable.py:93
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:94
    // assert arr[2] == 23
    dup
    extract 2 0
    intc_2 // 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    pushint 23 // 23
    ==
    assert
    // array/immutable.py:96
    // self.a = arr
    pushbytes "a"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
test_bool_array:
    // array/immutable.py:98-99
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> None:
    proto 1 0
    // array/immutable.py:100
    // arr = ImmutableArray[bool]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:101
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:103
    // for i in urange(length):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_bool_array_for_header@1:
    // array/immutable.py:103
    // for i in urange(length):
    frame_dig 1
    frame_dig -1
    <
    bz test_bool_array_after_for@4

test_bool_array_for_body@2:
    // array/immutable.py:104
    // arr = arr.append(i == Txn.num_app_args)
    txn NumAppArgs
    frame_dig 1
    ==
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    frame_dig 0
    swap
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0

test_bool_array_for_footer@3:
    // array/immutable.py:103
    // for i in urange(length):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_bool_array_for_header@1

test_bool_array_after_for@4:
    // array/immutable.py:106
    // assert arr.length == length
    frame_dig 0
    intc_0 // 0
    extract_uint16
    frame_dig -1
    ==
    assert
    // array/immutable.py:108
    // if length > 0:
    frame_dig -1
    intc_0 // 0
    >
    bz test_bool_array_after_if_else@6

test_bool_array_if_body@5:
    // array/immutable.py:109
    // assert not arr[0], "expected element 0 to be False"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // Index access is out of bounds
    intc_0 // 0
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 0 to be False

test_bool_array_after_if_else@6:
    // array/immutable.py:110
    // if length > 1:
    frame_dig -1
    intc_1 // 1
    >
    bz test_bool_array_after_if_else@8

test_bool_array_if_body@7:
    // array/immutable.py:111
    // assert not arr[1], "expected element 1 to be False"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    >
    assert // Index access is out of bounds
    intc_1 // 1
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 1 to be False

test_bool_array_after_if_else@8:
    // array/immutable.py:112
    // if length > 2:
    frame_dig -1
    intc_2 // 2
    >
    bz test_bool_array_after_if_else@10

test_bool_array_if_body@9:
    // array/immutable.py:113
    // assert arr[2], "expected element 2 to be True"
    frame_dig 0
    dup
    extract 2 0
    swap
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    >
    assert // Index access is out of bounds
    intc_2 // 2
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // expected element 2 to be True

test_bool_array_after_if_else@10:
    // array/immutable.py:114
    // if length > 3:
    frame_dig -1
    pushint 3 // 3
    >
    bz test_bool_array_after_if_else@12

test_bool_array_if_body@11:
    // array/immutable.py:115
    // assert not arr[length - 1], "expected last element to be False"
    frame_dig -1
    intc_1 // 1
    -
    frame_dig 0
    dup
    extract 2 0
    cover 2
    intc_0 // 0
    extract_uint16
    dig 1
    >
    assert // Index access is out of bounds
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected last element to be False

test_bool_array_after_if_else@12:
    // array/immutable.py:117
    // self.g = arr
    pushbytes "g"
    frame_dig 0
    app_global_put
    // array/immutable.py:118
    // if length:
    frame_dig -1
    intc_0 // 0
    !=
    bz test_bool_array_after_if_else@14

test_bool_array_if_body@13:
    // array/immutable.py:119
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_bit
    bury 1
    // array/immutable.py:120
    // assert arr.length == length - 1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    intc_1 // 1
    -
    ==
    assert

test_bool_array_after_if_else@14:
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
test_fixed_size_tuple_array:
    // array/immutable.py:122-123
    // @arc4.abimethod()
    // def test_fixed_size_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:124
    // arr = ImmutableArray[tuple[UInt64, UInt64]]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:125
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:127
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_fixed_size_tuple_array_for_header@1:
    // array/immutable.py:127
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_tuple_array_after_for@4

test_fixed_size_tuple_array_for_body@2:
    // array/immutable.py:128
    // arr = arr.append((i + 1, i + 2))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    intc_2 // 2
    +
    swap
    itob
    bytec_0 // 0x
    swap
    concat
    swap
    itob
    concat
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 16 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_fixed_size_tuple_array_for_footer@3:
    // array/immutable.py:127
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_fixed_size_tuple_array_for_header@1

test_fixed_size_tuple_array_after_for@4:
    // array/immutable.py:130
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:131
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:132
    // assert arr[-1] == (UInt64(5), UInt64(6))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 5 // 5
    ==
    swap
    pushint 6 // 6
    ==
    &&
    assert
    // array/immutable.py:134
    // arr = arr.pop()
    pushint 16 // 16
    callsub dynamic_array_pop_fixed_size
    bury 1
    // array/immutable.py:135
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:136
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    extract 2 0
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:137
    // assert arr[-1] == (UInt64(4), UInt64(5))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    intc_3 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 4 // 4
    ==
    swap
    pushint 5 // 5
    ==
    &&
    assert
    // array/immutable.py:138
    // self.c = arr
    pushbytes "c"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
test_fixed_size_named_tuple_array:
    // array/immutable.py:140-141
    // @arc4.abimethod()
    // def test_fixed_size_named_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:142
    // arr = ImmutableArray[MyTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:143
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:145
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_fixed_size_named_tuple_array_for_header@1:
    // array/immutable.py:145
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_named_tuple_array_after_for@4

test_fixed_size_named_tuple_array_for_body@2:
    // array/immutable.py:146
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    dup
    pushint 3 // 3
    *
    intc_2 // 2
    %
    intc_0 // 0
    ==
    swap
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec_3 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0

test_fixed_size_named_tuple_array_for_footer@3:
    // array/immutable.py:145
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_fixed_size_named_tuple_array_for_header@1

test_fixed_size_named_tuple_array_after_for@4:
    // array/immutable.py:148
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:149
    // foo, bar, baz = arr[0]
    dup
    extract 2 0
    intc_0 // 0
    pushint 9 // 9
    *
    pushint 9 // 9
    extract3 // on error: Index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    pushint 64 // 64
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    swap
    pushint 65 // 65
    getbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    uncover 2
    swap
    cover 2
    // array/immutable.py:150
    // assert foo == 0
    intc_0 // 0
    ==
    assert
    // array/immutable.py:151
    // assert bar
    assert
    // array/immutable.py:152
    // assert baz
    assert
    // array/immutable.py:153
    // self.d = arr
    pushbytes "d"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
test_dynamic_sized_tuple_array:
    // array/immutable.py:155-156
    // @arc4.abimethod()
    // def test_dynamic_sized_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:157
    // arr = ImmutableArray[tuple[UInt64, Bytes]]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:158
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:160
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_dynamic_sized_tuple_array_for_header@1:
    // array/immutable.py:160
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@4

test_dynamic_sized_tuple_array_for_body@2:
    // array/immutable.py:161
    // arr = arr.append((i + 1, op.bzero(i)))
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    bzero
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0

test_dynamic_sized_tuple_array_for_footer@3:
    // array/immutable.py:160
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_tuple_array_for_header@1

test_dynamic_sized_tuple_array_after_for@4:
    // array/immutable.py:163
    // assert arr.length == 5
    frame_dig 0
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:164
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 1

test_dynamic_sized_tuple_array_for_header@5:
    // array/immutable.py:164
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@8

test_dynamic_sized_tuple_array_for_body@6:
    // array/immutable.py:165
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 0
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    dig 1
    intc_0 // 0
    extract_uint16
    dig 3
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dig 2
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:166
    // assert arr[i][1].length == i, "expected 2nd element to be correct"
    dup
    extract 2 0
    dig 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    swap
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    len
    ==
    assert // expected 2nd element to be correct

test_dynamic_sized_tuple_array_for_footer@7:
    // array/immutable.py:164
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_tuple_array_for_header@5

test_dynamic_sized_tuple_array_after_for@8:
    // array/immutable.py:168
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:169
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:170
    // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
    dup
    extract 2 0
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    swap
    intc_0 // 0
    bzero
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:171
    // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    dup
    intc_2 // 2
    *
    dig 2
    swap
    extract_uint16
    cover 3
    dig 2
    intc_0 // 0
    extract_uint16
    swap
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    swap
    pushint 3 // 3
    bzero
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:172
    // self.e = arr
    pushbytes "e"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
test_dynamic_sized_named_tuple_array:
    // array/immutable.py:174-175
    // @arc4.abimethod()
    // def test_dynamic_sized_named_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:176
    // arr = ImmutableArray[MyDynamicSizedTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:177
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:179
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_dynamic_sized_named_tuple_array_for_header@1:
    // array/immutable.py:179
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@4

test_dynamic_sized_named_tuple_array_for_body@2:
    // array/immutable.py:180
    // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    callsub times
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    uncover 2
    swap
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0

test_dynamic_sized_named_tuple_array_for_footer@3:
    // array/immutable.py:179
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_named_tuple_array_for_header@1

test_dynamic_sized_named_tuple_array_after_for@4:
    // array/immutable.py:182
    // assert arr.length == 5
    frame_dig 0
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:183
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 1

test_dynamic_sized_named_tuple_array_for_header@5:
    // array/immutable.py:183
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@8

test_dynamic_sized_named_tuple_array_for_body@6:
    // array/immutable.py:184
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 0
    dup
    extract 2 0
    frame_dig 1
    dup
    cover 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    dig 1
    intc_0 // 0
    extract_uint16
    dig 3
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    dig 2
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:185
    // assert arr[i][1] == times(i), "expected 2nd element to be correct"
    dup
    extract 2 0
    dig 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 3
    swap
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    callsub times
    ==
    assert // expected 2nd element to be correct

test_dynamic_sized_named_tuple_array_for_footer@7:
    // array/immutable.py:183
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_sized_named_tuple_array_for_header@5

test_dynamic_sized_named_tuple_array_after_for@8:
    // array/immutable.py:187
    // arr = arr.pop()
    frame_dig 0
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:188
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:189
    // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
    dup
    extract 2 0
    intc_0 // 0
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    cover 2
    dig 1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    swap
    bytec_0 // ""
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:190
    // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    dup
    intc_2 // 2
    *
    dig 2
    swap
    extract_uint16
    cover 3
    dig 2
    intc_0 // 0
    extract_uint16
    swap
    intc_1 // 1
    +
    swap
    dig 1
    - // on error: Index access is out of bounds
    swap
    dig 2
    len
    cover 2
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    swap
    uncover 2
    select
    swap
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    dup
    intc_3 // 8
    extract_uint16
    swap
    dup
    len
    swap
    uncover 2
    uncover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    swap
    pushbytes "   "
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:191
    // self.f = arr
    pushbytes "f"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
test_bit_packed_tuples:
    // array/immutable.py:193-194
    // @arc4.abimethod()
    // def test_bit_packed_tuples(self) -> None:
    proto 0 0
    // array/immutable.py:195
    // arr2 = ImmutableArray[TwoBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    // array/immutable.py:196
    // arr7 = ImmutableArray[SevenBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 2
    cover 2
    // array/immutable.py:197
    // arr8 = ImmutableArray[EightBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 3
    cover 3
    // array/immutable.py:198
    // arr9 = ImmutableArray[NineBoolTuple]()
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    dup
    cover 4
    cover 4
    // array/immutable.py:199
    // assert arr2.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:200
    // assert arr7.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:201
    // assert arr8.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:202
    // assert arr9.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:204
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

test_bit_packed_tuples_for_header@1:
    // array/immutable.py:204
    // for i in urange(5):
    frame_dig 4
    pushint 5 // 5
    <
    bz test_bit_packed_tuples_after_for@4

test_bit_packed_tuples_for_body@2:
    // array/immutable.py:205
    // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
    frame_dig 0
    extract 2 0
    frame_dig 4
    dup
    intc_0 // 0
    ==
    swap
    dup
    intc_1 // 1
    ==
    swap
    bytec_1 // 0x00
    bytec_3 // 0x80
    uncover 4
    select
    bytec_0 // 0x
    swap
    concat
    intc_1 // 1
    uncover 3
    setbit
    bytec_0 // 0x
    swap
    concat
    uncover 2
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:206-218
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    frame_dig 1
    extract 2 0
    swap
    // array/immutable.py:210
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:211
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:212
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:213
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:214
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:215
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:216
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:209
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 7
    // array/immutable.py:208-209
    // foo=i,
    // bar=i + 1,
    dup
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec_3 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 3
    setbit
    pushint 66 // 66
    uncover 3
    setbit
    pushint 67 // 67
    uncover 3
    setbit
    pushint 68 // 68
    uncover 3
    setbit
    pushint 69 // 69
    uncover 3
    setbit
    pushint 70 // 70
    uncover 4
    setbit
    uncover 2
    itob
    concat
    // array/immutable.py:207-217
    // SevenBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:206-218
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    uncover 2
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // array/immutable.py:219-232
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    frame_dig 2
    extract 2 0
    swap
    // array/immutable.py:223
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:224
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:225
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:226
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:227
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:228
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:229
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:230
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:222
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 8
    // array/immutable.py:221-222
    // foo=i,
    // bar=i + 1,
    dup
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec_3 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 3
    setbit
    pushint 66 // 66
    uncover 3
    setbit
    pushint 67 // 67
    uncover 3
    setbit
    pushint 68 // 68
    uncover 3
    setbit
    pushint 69 // 69
    uncover 3
    setbit
    pushint 70 // 70
    uncover 3
    setbit
    pushint 71 // 71
    uncover 4
    setbit
    uncover 2
    itob
    concat
    // array/immutable.py:220-231
    // EightBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    //     h=i == 7,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:219-232
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    uncover 2
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 2
    // array/immutable.py:233-247
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    frame_dig 3
    extract 2 0
    swap
    // array/immutable.py:237
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    swap
    // array/immutable.py:238
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:239
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:240
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:241
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:242
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:243
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:244
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:245
    // i=i == 8,
    dup
    intc_3 // 8
    ==
    cover 9
    // array/immutable.py:236
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 10
    // array/immutable.py:235-236
    // foo=i,
    // bar=i + 1,
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec_3 // 0x80
    uncover 3
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    pushint 66 // 66
    uncover 2
    setbit
    pushint 67 // 67
    uncover 2
    setbit
    pushint 68 // 68
    uncover 2
    setbit
    pushint 69 // 69
    uncover 2
    setbit
    pushint 70 // 70
    uncover 2
    setbit
    pushint 71 // 71
    uncover 2
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    swap
    itob
    concat
    // array/immutable.py:234-246
    // NineBoolTuple(
    //     foo=i,
    //     bar=i + 1,
    //     a=i == 0,
    //     b=i == 1,
    //     c=i == 2,
    //     d=i == 3,
    //     e=i == 4,
    //     f=i == 5,
    //     g=i == 6,
    //     h=i == 7,
    //     i=i == 8,
    // )
    bytec_0 // 0x
    swap
    concat
    // array/immutable.py:233-247
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    concat
    dup
    len
    pushint 18 // 18
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 3

test_bit_packed_tuples_for_footer@3:
    // array/immutable.py:204
    // for i in urange(5):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_bit_packed_tuples_for_header@1

test_bit_packed_tuples_after_for@4:
    // array/immutable.py:249
    // assert arr2.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:250
    // assert arr7.length == 5
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:251
    // assert arr8.length == 5
    frame_dig 2
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:252
    // assert arr9.length == 5
    frame_dig 3
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:253
    // self.bool2 = arr2
    pushbytes "bool2"
    uncover 4
    app_global_put
    // array/immutable.py:254
    // self.bool7 = arr7
    pushbytes "bool7"
    uncover 3
    app_global_put
    // array/immutable.py:255
    // self.bool8 = arr8
    pushbytes "bool8"
    uncover 2
    app_global_put
    // array/immutable.py:256
    // self.bool9 = arr9
    pushbytes "bool9"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_args(arr1: bytes, arr2: bytes, arr3: bytes, arr4: bytes) -> void:
test_args:
    // array/immutable.py:258-265
    // @arc4.abimethod()
    // def test_args(
    //     self,
    //     arr1: ImmutableArray[UInt64],
    //     arr2: ImmutableArray[bool],
    //     arr3: ImmutableArray[MyTuple],
    //     arr4: ImmutableArray[MyDynamicSizedTuple],
    // ) -> None:
    proto 4 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return() -> bytes:
test_uint64_return:
    // array/immutable.py:270
    // return ImmutableArray(UInt64(1), UInt64(2), UInt64(3))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    intc_1 // 1
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_0 // 0x
    swap
    concat
    intc_2 // 2
    itob
    bytec_0 // 0x
    swap
    concat
    concat
    pushint 3 // 3
    itob
    bytec_0 // 0x
    swap
    concat
    concat
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return() -> bytes:
test_bool_return:
    // array/immutable.py:274
    // return ImmutableArray(True, False, True, False, True)
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    dup
    setbit
    bytec_1 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    bytec_0 // 0x
    uncover 5
    concat
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushint 5 // 5
    intc_3 // 8
    callsub dynamic_array_concat_bits
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return() -> bytes:
test_tuple_return:
    // array/immutable.py:278
    // return ImmutableArray(MyTuple(UInt64(), True, False))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    extract 2 0
    intc_0 // 0
    itob
    bytec_0 // 0x
    swap
    concat
    bytec_1 // 0x00
    bytec_3 // 0x80
    intc_1 // 1
    select
    concat
    pushint 65 // 65
    intc_0 // 0
    setbit
    bytec_0 // 0x
    swap
    concat
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return() -> bytes:
test_dynamic_tuple_return:
    // array/immutable.py:282
    // return ImmutableArray(MyDynamicSizedTuple(UInt64(), String("Hello")))
    bytec_2 // 0x0000
    bytec_0 // 0x
    concat
    intc_0 // 0
    itob
    bytec 5 // "Hello"
    len
    itob
    extract 6 2
    bytec 5 // "Hello"
    concat
    swap
    bytec_0 // 0x
    swap
    concat
    pushint 10 // 10
    itob
    extract 6 2
    concat
    swap
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    swap
    concat
    swap
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    swap
    uncover 2
    extract 2 0
    uncover 2
    swap
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    retsub
