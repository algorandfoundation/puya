#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x 0x151f7c75 0x00 "a" 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff "b" "imm_fixed_arr" 0x62696775696e74 "Hello" 0x0000000000000001 0x0000000000000002
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0
    b block@0

block@0:
    b block@1

block@1:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    intc_0 // 0
    intc_1 // 1
    intc_2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    intc_3 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    ==
    bz else_body@31
    b __algopy_default_create@30

__algopy_default_create@30:
    b block@44

block@44:
    b after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create@45

after_inlined_test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create@45:
    intc_1 // 1
    return

else_body@31:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x44d42f99 // method "test_uint64_array()void"
    pushbytes 0xb7eaa60b // method "test_biguint_array()void"
    pushbytes 0x743d70ed // method "test_bool_array(uint64)void"
    pushbytes 0x1c7e0494 // method "test_fixed_size_tuple_array()void"
    pushbytes 0xa2d5860b // method "test_fixed_size_named_tuple_array()void"
    pushbytes 0xe05fc564 // method "test_dynamic_sized_tuple_array()void"
    pushbytes 0x1e092b83 // method "test_dynamic_sized_named_tuple_array()void"
    pushbytes 0x01310262 // method "test_implicit_conversion_log(uint64[])void"
    pushbytes 0xc8654a98 // method "test_implicit_conversion_emit(uint64[])void"
    pushbytes 0x89d196f8 // method "test_nested_array(uint64,uint64[][])uint64[]"
    pushbytes 0x6cb7c991 // method "test_bit_packed_tuples()void"
    pushbytes 0x9898bf02 // method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)"
    pushbytes 0xf6b61ee8 // method "test_uint64_return(uint64)uint64[]"
    pushbytes 0x60b86a7b // method "test_bool_return(uint64)bool[]"
    pushbytes 0x73ad283f // method "test_tuple_return(uint64)(uint64,bool,bool)[]"
    pushbytes 0x529dfae9 // method "test_dynamic_tuple_return(uint64)(uint64,string)[]"
    pushbytes 0x206d514f // method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]"
    pushbytes 0xe06465e2 // method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]"
    pushbytes 0xec0300a2 // method "test_concat_with_native_tuple((uint64,uint64))uint64[]"
    pushbytes 0xecdf14af // method "test_dynamic_concat_with_arc4_tuple((string,string))string[]"
    pushbytes 0x511aca64 // method "test_dynamic_concat_with_native_tuple((string,string))string[]"
    pushbytes 0x29852e4f // method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]"
    pushbytes 0x6d4aa358 // method "test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]"
    pushbytes 0xb7cb96bd // method "test_imm_fixed_arr()(uint64,uint64)[3]"
    uncover 24
    match test_uint64_array_route@3 test_biguint_array_route@4 test_bool_array_route@5 test_fixed_size_tuple_array_route@6 test_fixed_size_named_tuple_array_route@7 test_dynamic_sized_tuple_array_route@8 test_dynamic_sized_named_tuple_array_route@9 test_implicit_conversion_log_route@10 test_implicit_conversion_emit_route@11 test_nested_array_route@12 test_bit_packed_tuples_route@13 sum_uints_and_lengths_and_trues_route@14 test_uint64_return_route@15 test_bool_return_route@16 test_tuple_return_route@17 test_dynamic_tuple_return_route@18 test_convert_to_array_and_back_route@19 test_concat_with_arc4_tuple_route@20 test_concat_with_native_tuple_route@21 test_dynamic_concat_with_arc4_tuple_route@22 test_dynamic_concat_with_native_tuple_route@23 test_concat_immutable_dynamic_route@24 test_immutable_arc4_route@25 test_imm_fixed_arr_route@26
    b switch_case_default@27

switch_case_default@27:
    b switch_case_next@28

switch_case_next@28:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

test_imm_fixed_arr_route@26:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_imm_fixed_arr
    b switch_case_next@28

test_immutable_arc4_route@25:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_immutable_arc4
    b switch_case_next@28

test_concat_immutable_dynamic_route@24:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_concat_immutable_dynamic
    b switch_case_next@28

test_dynamic_concat_with_native_tuple_route@23:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_dynamic_concat_with_native_tuple
    b switch_case_next@28

test_dynamic_concat_with_arc4_tuple_route@22:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_dynamic_concat_with_arc4_tuple
    b switch_case_next@28

test_concat_with_native_tuple_route@21:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_concat_with_native_tuple
    b switch_case_next@28

test_concat_with_arc4_tuple_route@20:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_concat_with_arc4_tuple
    b switch_case_next@28

test_convert_to_array_and_back_route@19:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_convert_to_array_and_back
    b switch_case_next@28

test_dynamic_tuple_return_route@18:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_dynamic_tuple_return
    b switch_case_next@28

test_tuple_return_route@17:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_tuple_return
    b switch_case_next@28

test_bool_return_route@16:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_bool_return
    b switch_case_next@28

test_uint64_return_route@15:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_uint64_return
    b switch_case_next@28

sum_uints_and_lengths_and_trues_route@14:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub sum_uints_and_lengths_and_trues
    b switch_case_next@28

test_bit_packed_tuples_route@13:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_bit_packed_tuples
    b switch_case_next@28

test_nested_array_route@12:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_nested_array
    b switch_case_next@28

test_implicit_conversion_emit_route@11:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_implicit_conversion_emit
    b switch_case_next@28

test_implicit_conversion_log_route@10:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_implicit_conversion_log
    b switch_case_next@28

test_dynamic_sized_named_tuple_array_route@9:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_dynamic_sized_named_tuple_array
    b switch_case_next@28

test_dynamic_sized_tuple_array_route@8:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_dynamic_sized_tuple_array
    b switch_case_next@28

test_fixed_size_named_tuple_array_route@7:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_fixed_size_named_tuple_array
    b switch_case_next@28

test_fixed_size_tuple_array_route@6:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_fixed_size_tuple_array
    b switch_case_next@28

test_bool_array_route@5:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_bool_array
    b switch_case_next@28

test_biguint_array_route@4:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_biguint_array
    b switch_case_next@28

test_uint64_array_route@3:
    // array/immutable.py:93
    // class ImmutableArrayContract(arc4.ARC4Contract):
    callsub test_uint64_array
    b switch_case_next@28


// _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> uint64, bytes:
dynamic_array_pop_bit:
    proto 1 2
    b dynamic_array_pop_bit_block@0

dynamic_array_pop_bit_block@0:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dup
    itob
    extract 6 0
    frame_dig -1
    uncover 1
    replace2 0
    dig 1
    pushint 16 // 16
    +
    dup2
    getbit
    cover 3
    intc_0 // 0
    setbit
    uncover 1
    pushint 7 // 7
    +
    intc_3 // 8
    /
    intc_2 // 2
    +
    uncover 1
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    b dynamic_array_pop_fixed_size_block@0

dynamic_array_pop_fixed_size_block@0:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    uncover 1
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    cover 2
    uncover 1
    intc_0 // 0
    uncover 2
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:
    proto 1 2
    b dynamic_array_pop_dynamic_element_block@0

dynamic_array_pop_dynamic_element_block@0:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dupn 2
    intc_2 // 2
    *
    dup
    cover 2
    frame_dig -1
    extract 2 0
    dup
    cover 3
    dup
    uncover 2
    extract_uint16
    dup
    cover 3
    dig 1
    len
    cover 1
    uncover 2
    uncover 1
    uncover 2
    substring3
    cover 1
    bytec_0 // 0x
    cover 1
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_for_header@1:
    frame_dig 7
    frame_dig 6
    <
    bz dynamic_array_pop_dynamic_element_after_for@4
    b dynamic_array_pop_dynamic_element_for_body@2

dynamic_array_pop_dynamic_element_for_body@2:
    frame_dig 2
    frame_dig 7
    extract_uint16
    intc_2 // 2
    -
    itob
    extract 6 2
    frame_dig 5
    uncover 1
    concat
    frame_bury 5
    b dynamic_array_pop_dynamic_element_for_footer@3

dynamic_array_pop_dynamic_element_for_footer@3:
    frame_dig 7
    intc_2 // 2
    +
    frame_bury 7
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_after_for@4:
    frame_dig 0
    itob
    extract 6 2
    frame_dig 5
    concat
    frame_dig 1
    intc_2 // 2
    +
    frame_dig 2
    uncover 1
    frame_dig 3
    substring3
    concat
    frame_dig 4
    uncover 1
    frame_bury 1
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b dynamic_array_concat_bits_block@0

dynamic_array_concat_bits_block@0:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    uncover 1
    replace2 0
    dup
    cover 3
    cover 3
    uncover 1
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    uncover 1
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    b dynamic_array_concat_bits_if_body@1

dynamic_array_concat_bits_if_body@1:
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    uncover 1
    concat
    frame_bury 7
    b dynamic_array_concat_bits_after_if_else@2

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    b dynamic_array_concat_bits_while_body@4

dynamic_array_concat_bits_while_body@4:
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1
    b dynamic_array_concat_byte_length_head_block@0

dynamic_array_concat_byte_length_head_block@0:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    cover 1
    intc_2 // 2
    *
    intc_2 // 2
    +
    dig 1
    itob
    extract 6 2
    cover 1
    frame_dig -3
    intc_2 // 2
    dig 2
    substring3
    frame_dig -1
    intc_2 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 3
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    uncover 2
    intc_0 // 0
    callsub recalculate_head_for_elements_with_byte_length_head
    concat
    retsub


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_0 // ""
    b dynamic_array_concat_dynamic_element_block@0

dynamic_array_concat_dynamic_element_block@0:
    bytec_0 // 0x
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    b dynamic_array_concat_dynamic_element_for_body@2

dynamic_array_concat_dynamic_element_for_body@2:
    frame_dig -3
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    uncover 1
    concat
    frame_bury 1
    b dynamic_array_concat_dynamic_element_for_footer@3

dynamic_array_concat_dynamic_element_for_footer@3:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 2
    frame_dig -2
    intc_2 // 2
    *
    frame_bury 0
    intc_2 // 2
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 0
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    b dynamic_array_concat_dynamic_element_for_body@6

dynamic_array_concat_dynamic_element_for_body@6:
    frame_dig -1
    frame_dig 4
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    uncover 1
    concat
    frame_bury 1
    b dynamic_array_concat_dynamic_element_for_footer@7

dynamic_array_concat_dynamic_element_for_footer@7:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -4
    intc_2 // 2
    *
    frame_dig -3
    len
    frame_dig -3
    uncover 2
    uncover 2
    substring3
    concat
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
recalculate_head_for_elements_with_byte_length_head:
    proto 3 1
    b recalculate_head_for_elements_with_byte_length_head_block@0

recalculate_head_for_elements_with_byte_length_head_block@0:
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    frame_dig -3
    uncover 1
    extract_uint16
    frame_dig -1
    select
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -1
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_for_header@1:
    frame_dig 2
    frame_dig 1
    <
    bz recalculate_head_for_elements_with_byte_length_head_after_for@4
    b recalculate_head_for_elements_with_byte_length_head_for_body@2

recalculate_head_for_elements_with_byte_length_head_for_body@2:
    frame_dig 0
    dup
    itob
    extract 6 2
    frame_dig -3
    frame_dig 2
    uncover 2
    replace3
    dup
    frame_bury -3
    dig 1
    extract_uint16
    intc_2 // 2
    +
    +
    frame_bury 0
    b recalculate_head_for_elements_with_byte_length_head_for_footer@3

recalculate_head_for_elements_with_byte_length_head_for_footer@3:
    frame_dig 2
    intc_2 // 2
    +
    frame_bury 2
    b recalculate_head_for_elements_with_byte_length_head_for_header@1

recalculate_head_for_elements_with_byte_length_head_after_for@4:
    frame_dig -3
    frame_bury 0
    retsub


// test_cases.array.immutable.sum_imm_fixed(arr: bytes) -> uint64:
sum_imm_fixed:
    // array/immutable.py:479-480
    // @subroutine
    // def sum_imm_fixed(arr: NativeStruct3) -> UInt64:
    proto 1 1
    b sum_imm_fixed_block@0

sum_imm_fixed_block@0:
    // array/immutable.py:481
    // total = UInt64(0)
    intc_0 // 0
    intc_0 // 0
    b sum_imm_fixed_for_header@1

sum_imm_fixed_for_header@1:
    // array/immutable.py:482
    // for item in arr:
    frame_dig 1
    pushint 3 // 3
    <
    bz sum_imm_fixed_after_for@4
    b sum_imm_fixed_for_body@2

sum_imm_fixed_for_body@2:
    // array/immutable.py:482
    // for item in arr:
    frame_dig 1
    pushint 16 // 16
    *
    frame_dig -1
    uncover 1
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    // array/immutable.py:483
    // total += item.foo
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    frame_dig 0
    +
    // array/immutable.py:484
    // total += item.bar
    uncover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    +
    frame_bury 0
    b sum_imm_fixed_for_footer@3

sum_imm_fixed_for_footer@3:
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b sum_imm_fixed_for_header@1

sum_imm_fixed_after_for@4:
    // array/immutable.py:485
    // return total
    retsub


// test_cases.array.immutable.times(n: uint64) -> bytes:
times:
    // array/immutable.py:488-489
    // @subroutine
    // def times(n: UInt64) -> String:
    proto 1 1
    b times_block@0

times_block@0:
    // array/immutable.py:490
    // result = String()
    bytec_0 // ""
    // array/immutable.py:491
    // for _i in urange(n):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b times_for_header@1

times_for_header@1:
    // array/immutable.py:491
    // for _i in urange(n):
    frame_dig 1
    frame_dig -1
    <
    bz times_after_for@4
    b times_for_body@2

times_for_body@2:
    // array/immutable.py:492
    // result += String(" ")
    frame_dig 0
    pushbytes " "
    concat
    frame_bury 0
    b times_for_footer@3

times_for_footer@3:
    // array/immutable.py:491
    // for _i in urange(n):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b times_for_header@1

times_after_for@4:
    // array/immutable.py:493
    // return result
    retsub


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
add_x:
    // array/immutable.py:496-497
    // @subroutine
    // def add_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1
    b add_x_block@0

add_x_block@0:
    // array/immutable.py:498
    // for i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b add_x_for_header@1

add_x_for_header@1:
    // array/immutable.py:498
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_x_after_for@4
    b add_x_for_body@2

add_x_for_body@2:
    // array/immutable.py:499
    // arr = arr.append(i)
    frame_dig 0
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    b add_x_for_footer@3

add_x_for_footer@3:
    // array/immutable.py:498
    // for i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b add_x_for_header@1

add_x_after_for@4:
    // array/immutable.py:500
    // return arr
    frame_dig -2
    uncover 1
    retsub


// test_cases.array.immutable.pop_x(arr: bytes, x: uint64) -> bytes:
pop_x:
    // array/immutable.py:503-504
    // @subroutine
    // def pop_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1
    intc_0 // 0
    b pop_x_block@0

pop_x_block@0:
    // array/immutable.py:505
    // for _i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b pop_x_for_header@1

pop_x_for_header@1:
    // array/immutable.py:505
    // for _i in urange(x):
    frame_dig 1
    frame_dig -1
    <
    bz pop_x_after_for@4
    b pop_x_for_body@2

pop_x_for_body@2:
    // array/immutable.py:506
    // arr = arr.pop()
    frame_dig -2
    intc_3 // 8
    callsub dynamic_array_pop_fixed_size
    cover 1
    frame_bury 0
    frame_bury -2
    b pop_x_for_footer@3

pop_x_for_footer@3:
    // array/immutable.py:505
    // for _i in urange(x):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b pop_x_for_header@1

pop_x_after_for@4:
    // array/immutable.py:507
    // return arr
    frame_dig -2
    frame_bury 0
    retsub


// test_cases.array.immutable.add_xb(arr: bytes, x: uint64) -> bytes:
add_xb:
    // array/immutable.py:510-511
    // @subroutine
    // def add_xb(arr: ImmutableArray[BigUInt], x: UInt64) -> ImmutableArray[BigUInt]:
    proto 2 1
    b add_xb_block@0

add_xb_block@0:
    // array/immutable.py:512
    // for i in urange(x):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b add_xb_for_header@1

add_xb_for_header@1:
    // array/immutable.py:512
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_xb_after_for@4
    b add_xb_for_body@2

add_xb_for_body@2:
    // array/immutable.py:513
    // arr = arr.append(BigUInt(i))
    frame_dig 0
    itob
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -2
    uncover 1
    concat // on error: max array length exceeded
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury -2
    b add_xb_for_footer@3

add_xb_for_footer@3:
    // array/immutable.py:512
    // for i in urange(x):
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b add_xb_for_header@1

add_xb_after_for@4:
    // array/immutable.py:514
    // return arr
    frame_dig -2
    uncover 1
    retsub


// test_cases.array.immutable.sum_arr(arr: bytes) -> uint64:
sum_arr:
    // array/immutable.py:517-518
    // @subroutine
    // def sum_arr(arr: ImmutableArray[UInt64]) -> UInt64:
    proto 1 1
    b sum_arr_block@0

sum_arr_block@0:
    // array/immutable.py:519
    // total = UInt64()
    intc_0 // 0
    // array/immutable.py:520
    // for i in arr:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    b sum_arr_for_header@1

sum_arr_for_header@1:
    // array/immutable.py:520
    // for i in arr:
    frame_dig 2
    frame_dig 1
    <
    bz sum_arr_after_for@4
    b sum_arr_for_body@2

sum_arr_for_body@2:
    // array/immutable.py:520
    // for i in arr:
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // array/immutable.py:521
    // total += i
    frame_dig 0
    +
    frame_bury 0
    b sum_arr_for_footer@3

sum_arr_for_footer@3:
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b sum_arr_for_header@1

sum_arr_after_for@4:
    // array/immutable.py:522
    // return total
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array[routing]() -> void:
test_uint64_array:
    b test_uint64_array_block@0

test_uint64_array_block@0:
    // array/immutable.py:94
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_uint64_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_biguint_array[routing]() -> void:
test_biguint_array:
    b test_biguint_array_block@0

test_biguint_array_block@0:
    // array/immutable.py:130
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_biguint_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array[routing]() -> void:
test_bool_array:
    b test_bool_array_block@0

test_bool_array_block@0:
    // array/immutable.py:155
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_bool_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array[routing]() -> void:
test_fixed_size_tuple_array:
    b test_fixed_size_tuple_array_block@0

test_fixed_size_tuple_array_block@0:
    // array/immutable.py:179
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array[routing]() -> void:
test_fixed_size_named_tuple_array:
    b test_fixed_size_named_tuple_array_block@0

test_fixed_size_named_tuple_array_block@0:
    // array/immutable.py:197
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array[routing]() -> void:
test_dynamic_sized_tuple_array:
    b test_dynamic_sized_tuple_array_block@0

test_dynamic_sized_tuple_array_block@0:
    // array/immutable.py:212
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array[routing]() -> void:
test_dynamic_sized_named_tuple_array:
    b test_dynamic_sized_named_tuple_array_block@0

test_dynamic_sized_named_tuple_array_block@0:
    // array/immutable.py:231
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log[routing]() -> void:
test_implicit_conversion_log:
    b test_implicit_conversion_log_block@0

test_implicit_conversion_log_block@0:
    // array/immutable.py:250
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit[routing]() -> void:
test_implicit_conversion_emit:
    b test_implicit_conversion_emit_block@0

test_implicit_conversion_emit_block@0:
    // array/immutable.py:254
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_nested_array[routing]() -> void:
test_nested_array:
    b test_nested_array_block@0

test_nested_array_block@0:
    // array/immutable.py:258
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    callsub test_cases.array.immutable.ImmutableArrayContract.test_nested_array
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples[routing]() -> void:
test_bit_packed_tuples:
    b test_bit_packed_tuples_block@0

test_bit_packed_tuples_block@0:
    // array/immutable.py:276
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues[routing]() -> void:
sum_uints_and_lengths_and_trues:
    b sum_uints_and_lengths_and_trues_block@0

sum_uints_and_lengths_and_trues_block@0:
    // array/immutable.py:341
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    callsub test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues
    cover 3
    cover 2
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    uncover 1
    itob
    concat
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return[routing]() -> void:
test_uint64_return:
    b test_uint64_return_block@0

test_uint64_return_block@0:
    // array/immutable.py:368
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_uint64_return
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return[routing]() -> void:
test_bool_return:
    b test_bool_return_block@0

test_bool_return_block@0:
    // array/immutable.py:375
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_bool_return
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return[routing]() -> void:
test_tuple_return:
    b test_tuple_return_block@0

test_tuple_return_block@0:
    // array/immutable.py:382
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_tuple_return
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return[routing]() -> void:
test_dynamic_tuple_return:
    b test_dynamic_tuple_return_block@0

test_dynamic_tuple_return_block@0:
    // array/immutable.py:389
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back[routing]() -> void:
test_convert_to_array_and_back:
    b test_convert_to_array_and_back_block@0

test_convert_to_array_and_back_block@0:
    // array/immutable.py:396
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    callsub test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple[routing]() -> void:
test_concat_with_arc4_tuple:
    b test_concat_with_arc4_tuple_block@0

test_concat_with_arc4_tuple_block@0:
    // array/immutable.py:406
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple[routing]() -> void:
test_concat_with_native_tuple:
    b test_concat_with_native_tuple_block@0

test_concat_with_native_tuple_block@0:
    // array/immutable.py:414
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    callsub test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple[routing]() -> void:
test_dynamic_concat_with_arc4_tuple:
    b test_dynamic_concat_with_arc4_tuple_block@0

test_dynamic_concat_with_arc4_tuple_block@0:
    // array/immutable.py:422
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple[routing]() -> void:
test_dynamic_concat_with_native_tuple:
    b test_dynamic_concat_with_native_tuple_block@0

test_dynamic_concat_with_native_tuple_block@0:
    // array/immutable.py:430
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_2 // 2
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    cover 1
    dup
    intc_2 // 2
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    callsub test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic[routing]() -> void:
test_concat_immutable_dynamic:
    b test_concat_immutable_dynamic_block@0

test_concat_immutable_dynamic_block@0:
    // array/immutable.py:438
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4[routing]() -> void:
test_immutable_arc4:
    b test_immutable_arc4_block@0

test_immutable_arc4_block@0:
    // array/immutable.py:444
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr[routing]() -> void:
test_imm_fixed_arr:
    b test_imm_fixed_arr_block@0

test_imm_fixed_arr_block@0:
    // array/immutable.py:450
    // @arc4.abimethod()
    callsub test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr
    bytec_1 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_uint64_array:
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_uint64_array_block@0:
    // array/immutable.py:96
    // arr = ImmutableArray[UInt64]()
    intc_0 // 0
    itob
    extract 6 2
    // array/immutable.py:97
    // assert arr.length == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:99
    // arr = arr.append(UInt64(42))
    pushint 42 // 42
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:100
    // assert arr.length == 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert
    // array/immutable.py:101
    // assert arr[-1] == 42
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:103
    // arr = add_x(arr, UInt64(5))
    pushint 5 // 5
    callsub add_x
    // array/immutable.py:104
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:105
    // assert arr[-1] == 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:107
    // arr = arr.append(UInt64(43))
    pushint 43 // 43
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:108
    // assert arr.length == 7
    dup
    intc_0 // 0
    extract_uint16
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:109
    // assert arr[-1] == 43
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 43 // 43
    ==
    assert
    // array/immutable.py:110
    // assert arr[0] == 42
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:112
    // arr = pop_x(arr, UInt64(3))
    pushint 3 // 3
    callsub pop_x
    // array/immutable.py:113
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:114
    // assert arr[-1] == 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    intc_2 // 2
    ==
    assert
    // array/immutable.py:116
    // arr = add_x(arr, UInt64(10))
    pushint 10 // 10
    callsub add_x
    // array/immutable.py:117
    // assert arr.length == 14
    dup
    intc_0 // 0
    extract_uint16
    pushint 14 // 14
    ==
    assert
    // array/immutable.py:118
    // assert arr[-1] == 9
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 9 // 9
    ==
    assert
    // array/immutable.py:120
    // arr = arr.append(UInt64(44))
    pushint 44 // 44
    itob
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:121
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:122
    // assert arr[-1] == 44
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 44 // 44
    ==
    assert
    // array/immutable.py:124
    // arr = arr.replace(2, UInt64(23))
    pushint 23 // 23
    itob
    intc_2 // 2
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    // array/immutable.py:125
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:126
    // assert arr[2] == 23
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_2 // 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    pushint 23 // 23
    ==
    assert
    // array/immutable.py:128
    // self.a = arr
    bytec_3 // "a"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_biguint_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_biguint_array:
    b test_cases.array.immutable.ImmutableArrayContract.test_biguint_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_biguint_array_block@0:
    // array/immutable.py:132
    // arr = ImmutableArray[BigUInt]()
    intc_0 // 0
    itob
    extract 6 2
    // array/immutable.py:133
    // assert arr.length == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:135
    // arr = arr.append(BigUInt(Txn.num_app_args - 1))
    txn NumAppArgs
    intc_1 // 1
    -
    itob
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:136
    // assert arr.length == 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    ==
    assert
    // array/immutable.py:137
    // assert arr[-1] == 0
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:139
    // arr = add_xb(arr, UInt64(5))
    pushint 5 // 5
    callsub add_xb
    // array/immutable.py:140
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:141
    // assert arr[-1] == 4
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    pushbytes 0x04
    b==
    assert
    // array/immutable.py:143
    // arr = arr.append(BigUInt(2**512 - 1) - Txn.num_app_args)
    txn NumAppArgs
    itob
    bytec 4 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    uncover 1
    b-
    dup
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    b|
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:144
    // assert arr.length == 7
    dup
    intc_0 // 0
    extract_uint16
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:145
    // assert arr[-1] == 2**512 - 2
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    pushbytes 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
    b==
    assert
    // array/immutable.py:146
    // assert arr[0] == 0
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:148
    // arr = arr.append(BigUInt(2**512 - 1))
    bytec 4 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    bytec 4 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    b|
    bytec_0 // 0x
    uncover 1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:149
    // assert arr.length == 8
    dup
    intc_0 // 0
    extract_uint16
    intc_3 // 8
    ==
    assert
    // array/immutable.py:150
    // assert arr[-1] == 2**512 - 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    bytec 4 // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    b==
    assert
    // array/immutable.py:151
    // assert arr[0] == 0
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    pushint 64 // 64
    *
    pushint 64 // 64
    extract3 // on error: index access is out of bounds
    bytec_0 // 0x
    b==
    assert
    // array/immutable.py:153
    // Box(ImmutableArray[BigUInt], key=b"biguint").value = arr
    bytec 7 // 0x62696775696e74
    box_del
    pop
    bytec 7 // 0x62696775696e74
    uncover 1
    box_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
test_cases.array.immutable.ImmutableArrayContract.test_bool_array:
    // array/immutable.py:155-156
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> None:
    proto 1 0
    bytec_0 // ""
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_block@0:
    // array/immutable.py:157
    // arr = ImmutableArray[bool]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:158
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:160
    // for i in urange(length):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_header@1:
    // array/immutable.py:160
    // for i in urange(length):
    frame_dig 2
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_body@2:
    // array/immutable.py:161
    // arr = arr.append(i == Txn.num_app_args)
    txn NumAppArgs
    frame_dig 2
    ==
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 1
    uncover 1
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_footer@3:
    // array/immutable.py:160
    // for i in urange(length):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_for@4:
    // array/immutable.py:163
    // assert arr.length == length
    frame_dig 1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    ==
    assert
    // array/immutable.py:165
    // if length > 0:
    frame_dig -1
    intc_0 // 0
    >
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@6
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@5

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@5:
    // array/immutable.py:166
    // assert not arr[0], "expected element 0 to be False"
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    >
    assert // index access is out of bounds
    intc_0 // 0
    pushint 16 // 16
    +
    getbit
    !
    assert // expected element 0 to be False
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@6

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@6:
    // array/immutable.py:167
    // if length > 1:
    frame_dig -1
    intc_1 // 1
    >
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@8
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@7

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@7:
    // array/immutable.py:168
    // assert not arr[1], "expected element 1 to be False"
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    >
    assert // index access is out of bounds
    intc_1 // 1
    pushint 16 // 16
    +
    getbit
    !
    assert // expected element 1 to be False
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@8

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@8:
    // array/immutable.py:169
    // if length > 2:
    frame_dig -1
    intc_2 // 2
    >
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@10
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@9

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@9:
    // array/immutable.py:170
    // assert arr[2], "expected element 2 to be True"
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    >
    assert // index access is out of bounds
    intc_2 // 2
    pushint 16 // 16
    +
    getbit
    assert // expected element 2 to be True
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@10

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@10:
    // array/immutable.py:171
    // if length > 3:
    frame_dig -1
    pushint 3 // 3
    >
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@12
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@11

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@11:
    // array/immutable.py:172
    // assert not arr[length - 1], "expected last element to be False"
    frame_dig -1
    intc_1 // 1
    -
    frame_dig 1
    dup
    cover 2
    intc_0 // 0
    extract_uint16
    dig 1
    >
    assert // index access is out of bounds
    pushint 16 // 16
    +
    getbit
    !
    assert // expected last element to be False
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@12

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@12:
    // array/immutable.py:174
    // self.g = arr
    pushbytes "g"
    frame_dig 1
    app_global_put
    // array/immutable.py:175
    // if length:
    frame_dig -1
    intc_0 // 0
    !=
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@14
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@13

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_if_body@13:
    // array/immutable.py:176
    // arr = arr.pop()
    frame_dig 1
    callsub dynamic_array_pop_bit
    cover 1
    frame_bury 0
    // array/immutable.py:177
    // assert arr.length == length - 1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    intc_1 // 1
    -
    ==
    assert
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@14

test_cases.array.immutable.ImmutableArrayContract.test_bool_array_after_if_else@14:
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array:
    // array/immutable.py:179-180
    // @arc4.abimethod()
    // def test_fixed_size_tuple_array(self) -> None:
    proto 0 0
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_block@0:
    // array/immutable.py:181
    // arr = ImmutableArray[tuple[UInt64, UInt64]]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:182
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:184
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_header@1:
    // array/immutable.py:184
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_body@2:
    // array/immutable.py:185
    // arr = arr.append((i + 1, i + 2))
    frame_dig 2
    dup
    intc_1 // 1
    +
    cover 1
    intc_2 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 1
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_footer@3:
    // array/immutable.py:184
    // for i in urange(5):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array_after_for@4:
    // array/immutable.py:187
    // assert arr.length == 5
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:188
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_1 // 1
    ==
    cover 1
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:189
    // assert arr[-1] == (UInt64(5), UInt64(6))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    cover 1
    pushint 5 // 5
    ==
    cover 1
    pushint 6 // 6
    ==
    &&
    assert
    // array/immutable.py:191
    // arr = arr.pop()
    pushint 16 // 16
    callsub dynamic_array_pop_fixed_size
    cover 1
    frame_bury 0
    // array/immutable.py:192
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:193
    // assert arr[0] == (UInt64(1), UInt64(2))
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_1 // 1
    ==
    cover 1
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:194
    // assert arr[-1] == (UInt64(4), UInt64(5))
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    uncover 1
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    intc_3 // 8
    intc_3 // 8
    extract3
    btoi
    cover 1
    pushint 4 // 4
    ==
    cover 1
    pushint 5 // 5
    ==
    &&
    assert
    // array/immutable.py:195
    // self.c = arr
    pushbytes "c"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array:
    // array/immutable.py:197-198
    // @arc4.abimethod()
    // def test_fixed_size_named_tuple_array(self) -> None:
    proto 0 0
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_block@0:
    // array/immutable.py:199
    // arr = ImmutableArray[MyTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:200
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:202
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_header@1:
    // array/immutable.py:202
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_body@2:
    // array/immutable.py:203
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    cover 1
    dup
    pushint 3 // 3
    *
    intc_2 // 2
    %
    intc_0 // 0
    ==
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 3
    setbit
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_footer@3:
    // array/immutable.py:202
    // for i in urange(5):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array_after_for@4:
    // array/immutable.py:205
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:206
    // foo, bar, baz = arr[0]
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    intc_0 // 0
    pushint 9 // 9
    *
    pushint 9 // 9
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    pushint 64 // 64
    getbit
    cover 1
    pushint 65 // 65
    getbit
    uncover 2
    cover 1
    cover 2
    cover 2
    cover 2
    cover 2
    // array/immutable.py:207
    // assert foo == 0
    intc_0 // 0
    ==
    assert
    // array/immutable.py:208
    // assert bar
    assert
    // array/immutable.py:209
    // assert baz
    assert
    // array/immutable.py:210
    // self.d = arr
    pushbytes "d"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array:
    // array/immutable.py:212-213
    // @arc4.abimethod()
    // def test_dynamic_sized_tuple_array(self) -> None:
    proto 0 0
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_block@0:
    // array/immutable.py:214
    // arr = ImmutableArray[tuple[UInt64, Bytes]]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:215
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:217
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@1:
    // array/immutable.py:217
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_body@2:
    // array/immutable.py:218
    // arr = arr.append((i + 1, op.bzero(i)))
    frame_dig 2
    dup
    intc_1 // 1
    +
    cover 1
    bzero
    cover 1
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    cover 3
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    cover 2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    uncover 2
    uncover 2
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_footer@3:
    // array/immutable.py:217
    // for i in urange(5):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_after_for@4:
    // array/immutable.py:220
    // assert arr.length == 5
    frame_dig 1
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:221
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@5:
    // array/immutable.py:221
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_after_for@8
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_body@6

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_body@6:
    // array/immutable.py:222
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 1
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    frame_dig 2
    dup
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    cover 3
    dup
    intc_1 // 1
    +
    uncover 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 5
    len
    cover 2
    intc_2 // 2
    *
    dig 6
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 4
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    dig 1
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:223
    // assert arr[i][1].length == i, "expected 2nd element to be correct"
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    uncover 2
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_2 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 3
    dup
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 3
    len
    cover 2
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 2
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    len
    ==
    assert // expected 2nd element to be correct
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_footer@7

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_footer@7:
    // array/immutable.py:221
    // for i in urange(5):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array_after_for@8:
    // array/immutable.py:225
    // arr = arr.pop()
    frame_dig 1
    callsub dynamic_array_pop_dynamic_element
    cover 1
    frame_bury 0
    // array/immutable.py:226
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:227
    // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_2 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_2 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    cover 1
    intc_1 // 1
    ==
    cover 1
    intc_0 // 0
    bzero
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:228
    // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    cover 1
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 2
    dig 3
    intc_2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    cover 3
    uncover 4
    intc_1 // 1
    +
    uncover 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 3
    len
    cover 2
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 2
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    cover 1
    pushint 4 // 4
    ==
    cover 1
    pushint 3 // 3
    bzero
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:229
    // self.e = arr
    pushbytes "e"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array:
    // array/immutable.py:231-232
    // @arc4.abimethod()
    // def test_dynamic_sized_named_tuple_array(self) -> None:
    proto 0 0
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_block@0:
    // array/immutable.py:233
    // arr = ImmutableArray[MyDynamicSizedTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:234
    // assert arr.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:236
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@1:
    // array/immutable.py:236
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_body@2:
    // array/immutable.py:237
    // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
    frame_dig 2
    dup
    intc_1 // 1
    +
    cover 1
    callsub times
    cover 1
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    cover 3
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    cover 2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    uncover 2
    uncover 2
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_footer@3:
    // array/immutable.py:236
    // for i in urange(5):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_after_for@4:
    // array/immutable.py:239
    // assert arr.length == 5
    frame_dig 1
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:240
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@5:
    // array/immutable.py:240
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_after_for@8
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_body@6

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_body@6:
    // array/immutable.py:241
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 1
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    frame_dig 2
    dup
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    cover 3
    dup
    intc_1 // 1
    +
    uncover 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 5
    len
    cover 2
    intc_2 // 2
    *
    dig 6
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 4
    uncover 4
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    dig 1
    intc_1 // 1
    +
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:242
    // assert arr[i][1] == times(i), "expected 2nd element to be correct"
    dig 1
    len
    cover 1
    dig 2
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    uncover 2
    intc_0 // 0
    extract_uint16
    cover 1
    dup
    intc_2 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 3
    dup
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 3
    len
    cover 2
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 2
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    uncover 1
    callsub times
    ==
    assert // expected 2nd element to be correct
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_footer@7

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_footer@7:
    // array/immutable.py:240
    // for i in urange(5):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array_after_for@8:
    // array/immutable.py:244
    // arr = arr.pop()
    frame_dig 1
    callsub dynamic_array_pop_dynamic_element
    cover 1
    frame_bury 0
    // array/immutable.py:245
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:246
    // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    intc_0 // 0
    intc_2 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    intc_0 // 0
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_2 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    cover 1
    intc_1 // 1
    ==
    cover 1
    bytec_0 // ""
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:247
    // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    cover 1
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 2
    dig 3
    intc_2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    cover 3
    uncover 4
    intc_1 // 1
    +
    uncover 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 3
    len
    cover 2
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 2
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    cover 1
    pushint 4 // 4
    ==
    cover 1
    pushbytes "   "
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:248
    // self.f = arr
    pushbytes "f"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: bytes) -> void:
test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log:
    // array/immutable.py:250-251
    // @arc4.abimethod()
    // def test_implicit_conversion_log(self, arr: ImmutableArray[UInt64]) -> None:
    proto 1 0
    b test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log_block@0

test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log_block@0:
    // array/immutable.py:252
    // log(arr)
    frame_dig -1
    log
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: bytes) -> void:
test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit:
    // array/immutable.py:254-255
    // @arc4.abimethod()
    // def test_implicit_conversion_emit(self, arr: ImmutableArray[UInt64]) -> None:
    proto 1 0
    b test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit_block@0

test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit_block@0:
    // array/immutable.py:256
    // arc4.emit("emit_test", arr)
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig -1
    concat
    pushbytes 0xfa40c053 // method "emit_test(uint64[])"
    uncover 1
    concat
    log
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_nested_array:
    // array/immutable.py:258-261
    // @arc4.abimethod()
    // def test_nested_array(
    //     self, arr_to_add: UInt64, arr: ImmutableArray[ImmutableArray[UInt64]]
    // ) -> ImmutableArray[UInt64]:
    proto 2 1
    intc_0 // 0
    intc_0 // 0
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_block@0

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_block@0:
    // array/immutable.py:262-263
    // # add n new arrays
    // for i in urange(arr_to_add):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@1:
    // array/immutable.py:262-263
    // # add n new arrays
    // for i in urange(arr_to_add):
    frame_dig 5
    frame_dig -2
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@8
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@2:
    // array/immutable.py:264
    // extra_arr = ImmutableArray[UInt64]()
    intc_0 // 0
    itob
    extract 6 2
    frame_bury 0
    // array/immutable.py:265
    // for j in urange(i):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@3

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@3:
    // array/immutable.py:265
    // for j in urange(i):
    frame_dig 4
    frame_dig 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@6
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@4

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@4:
    // array/immutable.py:266
    // extra_arr = extra_arr.append(j)
    frame_dig 4
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@5

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@5:
    // array/immutable.py:265
    // for j in urange(i):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@3

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@6:
    // array/immutable.py:267
    // arr = arr.append(extra_arr)
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    concat
    uncover 2
    uncover 2
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury -1
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@7

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@7:
    // array/immutable.py:262-263
    // # add n new arrays
    // for i in urange(arr_to_add):
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@8:
    // array/immutable.py:269-270
    // # sum inner arrays and return an array containing sums
    // totals = ImmutableArray[UInt64]()
    intc_0 // 0
    itob
    extract 6 2
    frame_bury 1
    // array/immutable.py:271
    // for inner_arr in arr:
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 3
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@9

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@9:
    // array/immutable.py:271
    // for inner_arr in arr:
    frame_dig 3
    frame_dig 2
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@12
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@10

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_body@10:
    // array/immutable.py:271
    // for inner_arr in arr:
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 3
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    // array/immutable.py:272
    // totals = totals.append(sum_arr(inner_arr))
    callsub sum_arr
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 1
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@11

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_footer@11:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_cases.array.immutable.ImmutableArrayContract.test_nested_array_for_header@9

test_cases.array.immutable.ImmutableArrayContract.test_nested_array_after_for@12:
    // array/immutable.py:274
    // return totals
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples:
    // array/immutable.py:276-277
    // @arc4.abimethod()
    // def test_bit_packed_tuples(self) -> None:
    proto 0 0
    b test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_block@0

test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_block@0:
    // array/immutable.py:278
    // arr2 = ImmutableArray[TwoBoolTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    // array/immutable.py:279
    // arr7 = ImmutableArray[SevenBoolTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    cover 2
    cover 2
    // array/immutable.py:280
    // arr8 = ImmutableArray[EightBoolTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    cover 3
    cover 3
    // array/immutable.py:281
    // arr9 = ImmutableArray[NineBoolTuple]()
    intc_0 // 0
    itob
    extract 6 2
    dup
    cover 4
    cover 4
    // array/immutable.py:282
    // assert arr2.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:283
    // assert arr7.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:284
    // assert arr8.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:285
    // assert arr9.length == 0
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert
    // array/immutable.py:287
    // for i in urange(5):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_header@1:
    // array/immutable.py:287
    // for i in urange(5):
    frame_dig 4
    pushint 5 // 5
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_body@2:
    // array/immutable.py:288
    // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
    frame_dig 4
    dup
    intc_0 // 0
    ==
    cover 1
    dup
    intc_1 // 1
    ==
    cover 1
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 3
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    // array/immutable.py:293
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    cover 1
    // array/immutable.py:294
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:295
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:296
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:297
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:298
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:299
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:292
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 8
    // array/immutable.py:289-301
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    dup
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 4
    setbit
    intc_2 // 2
    uncover 4
    setbit
    pushint 3 // 3
    uncover 4
    setbit
    pushint 4 // 4
    uncover 4
    setbit
    pushint 5 // 5
    uncover 4
    setbit
    pushint 6 // 6
    uncover 4
    setbit
    concat
    uncover 2
    itob
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 1
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 1
    // array/immutable.py:306
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    cover 1
    // array/immutable.py:307
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:308
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:309
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:310
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:311
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:312
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:313
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:305
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 9
    // array/immutable.py:302-315
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    dup
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 4
    setbit
    intc_2 // 2
    uncover 4
    setbit
    pushint 3 // 3
    uncover 4
    setbit
    pushint 4 // 4
    uncover 4
    setbit
    pushint 5 // 5
    uncover 4
    setbit
    pushint 6 // 6
    uncover 4
    setbit
    pushint 7 // 7
    uncover 4
    setbit
    concat
    uncover 2
    itob
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 2
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 2
    // array/immutable.py:320
    // a=i == 0,
    dup
    intc_0 // 0
    ==
    cover 1
    // array/immutable.py:321
    // b=i == 1,
    dup
    intc_1 // 1
    ==
    cover 2
    // array/immutable.py:322
    // c=i == 2,
    dup
    intc_2 // 2
    ==
    cover 3
    // array/immutable.py:323
    // d=i == 3,
    dup
    pushint 3 // 3
    ==
    cover 4
    // array/immutable.py:324
    // e=i == 4,
    dup
    pushint 4 // 4
    ==
    cover 5
    // array/immutable.py:325
    // f=i == 5,
    dup
    pushint 5 // 5
    ==
    cover 6
    // array/immutable.py:326
    // g=i == 6,
    dup
    pushint 6 // 6
    ==
    cover 7
    // array/immutable.py:327
    // h=i == 7,
    dup
    pushint 7 // 7
    ==
    cover 8
    // array/immutable.py:328
    // i=i == 8,
    dup
    intc_3 // 8
    ==
    cover 9
    // array/immutable.py:319
    // bar=i + 1,
    dup
    intc_1 // 1
    +
    cover 10
    // array/immutable.py:316-330
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    intc_1 // 1
    uncover 3
    setbit
    intc_2 // 2
    uncover 3
    setbit
    pushint 3 // 3
    uncover 3
    setbit
    pushint 4 // 4
    uncover 3
    setbit
    pushint 5 // 5
    uncover 3
    setbit
    pushint 6 // 6
    uncover 3
    setbit
    pushint 7 // 7
    uncover 3
    setbit
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    concat
    uncover 1
    itob
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 3
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 3
    b test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_footer@3:
    // array/immutable.py:287
    // for i in urange(5):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples_after_for@4:
    // array/immutable.py:332
    // assert arr2.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:333
    // assert arr7.length == 5
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:334
    // assert arr8.length == 5
    frame_dig 2
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:335
    // assert arr9.length == 5
    frame_dig 3
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:336
    // self.bool2 = arr2
    pushbytes "bool2"
    uncover 4
    app_global_put
    // array/immutable.py:337
    // self.bool7 = arr7
    pushbytes "bool7"
    uncover 3
    app_global_put
    // array/immutable.py:338
    // self.bool8 = arr8
    pushbytes "bool8"
    uncover 2
    app_global_put
    // array/immutable.py:339
    // self.bool9 = arr9
    pushbytes "bool9"
    uncover 1
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: bytes, arr2: bytes, arr3: bytes, arr4: bytes) -> uint64, uint64, uint64, uint64:
test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues:
    // array/immutable.py:341-348
    // @arc4.abimethod()
    // def sum_uints_and_lengths_and_trues(
    //     self,
    //     arr1: ImmutableArray[UInt64],
    //     arr2: ImmutableArray[bool],
    //     arr3: ImmutableArray[MyTuple],
    //     arr4: ImmutableArray[MyDynamicSizedTuple],
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 4 4
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_block@0

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_block@0:
    // array/immutable.py:349
    // sum1 = sum2 = sum3 = sum4 = UInt64()
    intc_0 // 0
    intc_0 // 0
    intc_0 // 0
    intc_0 // 0
    // array/immutable.py:350
    // for i in arr1:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@1

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@1:
    // array/immutable.py:350
    // for i in arr1:
    frame_dig 14
    frame_dig 13
    <
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@2

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@2:
    // array/immutable.py:350
    // for i in arr1:
    frame_dig -4
    len
    frame_dig -4
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 14
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // array/immutable.py:351
    // sum1 += i
    frame_dig 12
    +
    frame_bury 12
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@3:
    frame_dig 14
    intc_1 // 1
    +
    frame_bury 14
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@1

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@4:
    // array/immutable.py:352
    // for b in arr2:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    frame_bury 0
    intc_0 // 0
    frame_bury 3
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@5

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@5:
    // array/immutable.py:352
    // for b in arr2:
    frame_dig 3
    frame_dig 0
    <
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@10
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@6

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@6:
    // array/immutable.py:352
    // for b in arr2:
    frame_dig 3
    pushint 16 // 16
    +
    frame_dig -3
    uncover 1
    getbit
    frame_dig 11
    frame_bury 6
    // array/immutable.py:353
    // if b:
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@8
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@7

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@7:
    // array/immutable.py:354
    // sum2 += 1
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 6
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@8

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@8:
    frame_dig 6
    frame_bury 11
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@9

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@9:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@5

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@10:
    // array/immutable.py:355
    // for tup in arr3:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@11

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@11:
    // array/immutable.py:355
    // for tup in arr3:
    frame_dig 4
    frame_dig 1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@18
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@12

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@12:
    // array/immutable.py:355
    // for tup in arr3:
    frame_dig -2
    len
    frame_dig -2
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 4
    pushint 9 // 9
    *
    pushint 9 // 9
    extract3 // on error: index access is out of bounds
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    pushint 64 // 64
    getbit
    cover 1
    pushint 65 // 65
    getbit
    uncover 2
    cover 1
    cover 2
    cover 2
    cover 2
    frame_bury 8
    // array/immutable.py:356
    // sum3 += tup.foo
    frame_dig 10
    +
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:357
    // if tup.bar:
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@14
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@13

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@13:
    // array/immutable.py:358
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@14

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@14:
    frame_dig 7
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:359
    // if tup.baz:
    frame_dig 8
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@16
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@15

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_if_body@15:
    // array/immutable.py:360
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@16

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_if_else@16:
    frame_dig 7
    frame_bury 10
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@17

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@17:
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@11

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@18:
    // array/immutable.py:361
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 5
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@19

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@19:
    // array/immutable.py:361
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig 5
    frame_dig 2
    <
    bz test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@22
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@20

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_body@20:
    // array/immutable.py:361
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig -1
    intc_0 // 0
    extract_uint16
    cover 1
    frame_dig 5
    dup
    intc_2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    cover 3
    dup
    intc_1 // 1
    +
    uncover 3
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 3
    len
    cover 2
    intc_2 // 2
    *
    dig 4
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 2
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    extract 2 0
    cover 1
    // array/immutable.py:362
    // sum4 += dyn_tup.foo
    frame_dig 9
    +
    // array/immutable.py:363
    // sum4 += dyn_tup.bar.bytes.length
    dig 1
    len
    +
    frame_bury 9
    // array/immutable.py:364
    // assert dyn_tup.bar.bytes.length == idx, "expected string length to match index"
    len
    ==
    assert // expected string length to match index
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@21

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_footer@21:
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_for_header@19

test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues_after_for@22:
    // array/immutable.py:366
    // return sum1, sum2, sum3, sum4
    frame_dig 12
    frame_dig 11
    frame_dig 10
    frame_dig 9
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_uint64_return:
    // array/immutable.py:368-369
    // @arc4.abimethod()
    // def test_uint64_return(self, append: UInt64) -> ImmutableArray[UInt64]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_block@0

test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_block@0:
    // array/immutable.py:370
    // arr = ImmutableArray(UInt64(1), UInt64(2), UInt64(3))
    pushint 3 // 3
    itob
    extract 6 2
    intc_1 // 1
    itob
    concat
    intc_2 // 2
    itob
    concat
    pushint 3 // 3
    itob
    concat
    // array/immutable.py:371
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_header@1:
    // array/immutable.py:371
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_body@2:
    // array/immutable.py:372
    // arr = arr.append(i)
    frame_dig 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_footer@3:
    // array/immutable.py:371
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_uint64_return_after_for@4:
    // array/immutable.py:373
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_bool_return:
    // array/immutable.py:375-376
    // @arc4.abimethod()
    // def test_bool_return(self, append: UInt64) -> ImmutableArray[bool]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_return_block@0

test_cases.array.immutable.ImmutableArrayContract.test_bool_return_block@0:
    // array/immutable.py:377
    // arr = ImmutableArray(True, False, True, False, True)
    pushint 5 // 5
    itob
    extract 6 2
    bytec_2 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_1 // 1
    intc_0 // 0
    setbit
    intc_2 // 2
    intc_1 // 1
    setbit
    pushint 3 // 3
    intc_0 // 0
    setbit
    pushint 4 // 4
    intc_1 // 1
    setbit
    concat
    // array/immutable.py:378
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_header@1:
    // array/immutable.py:378
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_bool_return_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_body@2:
    // array/immutable.py:379
    // arr = arr.append(i % 2 == 0)
    frame_dig 1
    intc_2 // 2
    %
    intc_0 // 0
    ==
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    uncover 1
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_footer@3:
    // array/immutable.py:378
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_bool_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_bool_return_after_for@4:
    // array/immutable.py:380
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_tuple_return:
    // array/immutable.py:382-383
    // @arc4.abimethod()
    // def test_tuple_return(self, append: UInt64) -> ImmutableArray[MyTuple]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_block@0

test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_block@0:
    // array/immutable.py:384
    // arr = ImmutableArray(MyTuple(UInt64(), True, False))
    intc_1 // 1
    itob
    extract 6 2
    intc_0 // 0
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    intc_1 // 1
    setbit
    intc_1 // 1
    intc_0 // 0
    setbit
    concat
    concat
    // array/immutable.py:385
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_header@1:
    // array/immutable.py:385
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_body@2:
    // array/immutable.py:386
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    cover 1
    dup
    pushint 3 // 3
    %
    intc_0 // 0
    ==
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 3
    setbit
    concat
    bytec_0 // 0x
    uncover 1
    concat
    frame_dig 0
    dup
    cover 2
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_footer@3:
    // array/immutable.py:385
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_tuple_return_after_for@4:
    // array/immutable.py:387
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return:
    // array/immutable.py:389-390
    // @arc4.abimethod()
    // def test_dynamic_tuple_return(self, append: UInt64) -> ImmutableArray[MyDynamicSizedTuple]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_block@0

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_block@0:
    // array/immutable.py:391
    // arr = ImmutableArray(MyDynamicSizedTuple(UInt64(), String("Hello")))
    intc_1 // 1
    itob
    extract 6 2
    intc_0 // 0
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec 8 // "Hello"
    len
    itob
    extract 6 2
    bytec 8 // "Hello"
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    intc_2 // 2
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    // array/immutable.py:392
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_header@1:
    // array/immutable.py:392
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_body@2:
    // array/immutable.py:393
    // arr = arr.append(MyDynamicSizedTuple(i, times(i)))
    frame_dig 1
    dup
    callsub times
    cover 1
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    cover 3
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    cover 2
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 10 // 10
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 1
    concat
    intc_2 // 2
    itob
    extract 6 2
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    concat
    uncover 2
    uncover 2
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_footer@3:
    // array/immutable.py:392
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return_after_for@4:
    // array/immutable.py:394
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: bytes, append: uint64) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back:
    // array/immutable.py:396-399
    // @arc4.abimethod()
    // def test_convert_to_array_and_back(
    //     self, arr: ImmutableArray[MyTuple], append: UInt64
    // ) -> ImmutableArray[MyTuple]:
    proto 2 1
    b test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_block@0

test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_block@0:
    // array/immutable.py:400
    // mutable = ReferenceArray[MyTuple]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    dupn 2
    // array/immutable.py:401
    // mutable.extend(arr)
    loads
    frame_dig -2
    len
    frame_dig -2
    intc_2 // 2
    uncover 2
    substring3
    concat // on error: max array length exceeded
    stores
    // array/immutable.py:402
    // for i in urange(append):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_header@1:
    // array/immutable.py:402
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_body@2:
    // array/immutable.py:403
    // mutable.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
    frame_dig 1
    dup
    intc_2 // 2
    %
    intc_0 // 0
    ==
    cover 1
    dup
    pushint 3 // 3
    %
    intc_0 // 0
    ==
    cover 1
    frame_dig 0
    dup
    cover 4
    loads
    cover 3
    itob
    bytec_0 // 0x
    uncover 1
    concat
    bytec_2 // 0x00
    intc_0 // 0
    uncover 4
    setbit
    intc_1 // 1
    uncover 3
    setbit
    concat
    bytec_0 // 0x
    uncover 1
    concat
    concat // on error: max array length exceeded
    stores
    b test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_footer@3:
    // array/immutable.py:402
    // for i in urange(append):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back_after_for@4:
    // array/immutable.py:404
    // return mutable.freeze()
    frame_dig 0
    loads
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    uncover 1
    concat
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple:
    // array/immutable.py:406-409
    // @arc4.abimethod()
    // def test_concat_with_arc4_tuple(
    //     self, arg: arc4.Tuple[arc4.UInt64, arc4.UInt64]
    // ) -> ImmutableArray[arc4.UInt64]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple_block@0

test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple_block@0:
    // array/immutable.py:410
    // prefix = ImmutableArray(arc4.UInt64(1), arc4.UInt64(2))
    intc_2 // 2
    itob
    extract 6 2
    bytec 9 // 0x0000000000000001
    concat
    bytec 10 // 0x0000000000000002
    concat
    // array/immutable.py:411
    // result = prefix + arg
    frame_dig -1
    concat // on error: max array length exceeded
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:412
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple:
    // array/immutable.py:414-417
    // @arc4.abimethod()
    // def test_concat_with_native_tuple(
    //     self, arg: tuple[arc4.UInt64, arc4.UInt64]
    // ) -> ImmutableArray[arc4.UInt64]:
    proto 2 1
    b test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple_block@0

test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple_block@0:
    // array/immutable.py:418
    // prefix = ImmutableArray(arc4.UInt64(1), arc4.UInt64(2))
    intc_2 // 2
    itob
    extract 6 2
    bytec 9 // 0x0000000000000001
    concat
    bytec 10 // 0x0000000000000002
    concat
    // array/immutable.py:419
    // result = prefix + arg
    bytec_0 // 0x
    frame_dig -2
    concat
    frame_dig -1
    concat
    dig 1
    uncover 1
    concat // on error: max array length exceeded
    cover 1
    intc_0 // 0
    extract_uint16
    intc_2 // 2
    +
    itob
    extract 6 2
    uncover 1
    intc_0 // 0
    uncover 2
    replace3
    // array/immutable.py:420
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple:
    // array/immutable.py:422-425
    // @arc4.abimethod()
    // def test_dynamic_concat_with_arc4_tuple(
    //     self, arg: arc4.Tuple[arc4.String, arc4.String]
    // ) -> ImmutableArray[arc4.String]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple_block@0

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple_block@0:
    // array/immutable.py:426
    // prefix = ImmutableArray(arc4.String("a"), arc4.String("b"))
    bytec_3 // "a"
    len
    itob
    extract 6 2
    bytec_3 // "a"
    concat
    bytec 5 // "b"
    len
    itob
    extract 6 2
    bytec 5 // "b"
    concat
    cover 1
    intc_2 // 2
    itob
    extract 6 2
    pushint 4 // 4
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    // array/immutable.py:427
    // result = prefix + arg
    intc_2 // 2
    intc_2 // 2
    *
    frame_dig -1
    len
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:428
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple:
    // array/immutable.py:430-433
    // @arc4.abimethod()
    // def test_dynamic_concat_with_native_tuple(
    //     self, arg: tuple[arc4.String, arc4.String]
    // ) -> ImmutableArray[arc4.String]:
    proto 2 1
    b test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple_block@0

test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple_block@0:
    // array/immutable.py:434
    // prefix = ImmutableArray(arc4.String("a"), arc4.String("b"))
    bytec_3 // "a"
    len
    itob
    extract 6 2
    bytec_3 // "a"
    concat
    bytec 5 // "b"
    len
    itob
    extract 6 2
    bytec 5 // "b"
    concat
    cover 1
    intc_2 // 2
    itob
    extract 6 2
    pushint 4 // 4
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 4 // 4
    +
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    // array/immutable.py:435
    // result = prefix + arg
    bytec_0 // 0x
    frame_dig -2
    concat
    frame_dig -1
    concat
    intc_2 // 2
    callsub dynamic_array_concat_byte_length_head
    // array/immutable.py:436
    // return result
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: bytes, imm2: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic:
    // array/immutable.py:438-441
    // @arc4.abimethod()
    // def test_concat_immutable_dynamic(
    //     self, imm1: ImmutableArray[MyDynamicSizedTuple], imm2: ImmutableArray[MyDynamicSizedTuple]
    // ) -> ImmutableArray[MyDynamicSizedTuple]:
    proto 2 1
    b test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic_block@0

test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic_block@0:
    // array/immutable.py:442
    // return imm1 + imm2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_dig -2
    len
    frame_dig -2
    intc_2 // 2
    uncover 2
    substring3
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig -1
    intc_0 // 0
    extract_uint16
    uncover 3
    uncover 3
    uncover 2
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(imm: bytes) -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4:
    // array/immutable.py:444-445
    // @arc4.abimethod()
    // def test_immutable_arc4(self, imm: ImmutableArray[MyStruct]) -> ImmutableArray[MyStruct]:
    proto 1 1
    b test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4_block@0

test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4_block@0:
    // array/immutable.py:446
    // assert imm, "expected non empty array"
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    !=
    assert // expected non empty array
    // array/immutable.py:447
    // imm = imm.replace(imm.length - 1, imm[0])
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    frame_dig -1
    len
    frame_dig -1
    intc_2 // 2
    uncover 2
    substring3
    intc_0 // 0
    pushint 16 // 16
    *
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    uncover 1
    pushint 16 // 16
    *
    intc_2 // 2
    +
    frame_dig -1
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    dup
    frame_bury -1
    // array/immutable.py:448
    // return imm
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr() -> bytes:
test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr:
    // array/immutable.py:450-451
    // @arc4.abimethod()
    // def test_imm_fixed_arr(self) -> NativeStruct3:
    proto 0 1
    bytec_0 // ""
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_block@0

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_block@0:
    // array/immutable.py:452
    // arr1 = zero_bytes(NativeStruct3)
    pushint 48 // 48
    bzero
    dup
    // array/immutable.py:453
    // struct12 = NativeStruct(Txn.num_app_args + 1, Txn.num_app_args + 2)
    txn NumAppArgs
    intc_1 // 1
    +
    txn NumAppArgs
    intc_2 // 2
    +
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    dup
    cover 2
    // array/immutable.py:454
    // arr2 = NativeStruct3((struct12, struct12, struct12))
    bytec_0 // 0x
    dig 1
    concat
    dig 1
    concat
    dig 1
    concat
    dup
    cover 2
    cover 3
    // array/immutable.py:455
    // arr3 = NativeStruct3.full(struct12)
    bytec_0 // 0x
    dig 1
    concat
    dig 1
    concat
    uncover 1
    concat
    // array/immutable.py:456
    // assert arr1 != arr2, "expected arrays to be different"
    uncover 2
    dig 2
    !=
    assert // expected arrays to be different
    // array/immutable.py:457
    // assert arr2 == arr3, "expected arrays to be the same"
    ==
    assert // expected arrays to be the same
    // array/immutable.py:459
    // for i in urange(3):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@1:
    // array/immutable.py:459
    // for i in urange(3):
    frame_dig 4
    pushint 3 // 3
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_after_for@4
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_body@2

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_body@2:
    // array/immutable.py:460
    // arr1 = arr1.replace(i, struct12)
    frame_dig 4
    pushint 16 // 16
    *
    frame_dig 1
    uncover 1
    frame_dig 2
    replace3 // on error: index access is out of bounds
    frame_bury 1
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_footer@3

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_footer@3:
    // array/immutable.py:459
    // for i in urange(3):
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@1

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_after_for@4:
    // array/immutable.py:462
    // assert arr1 == arr2, "expected arrays to be the same"
    frame_dig 1
    frame_dig 3
    ==
    assert // expected arrays to be the same
    intc_0 // 0
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@5:
    // array/immutable.py:464
    // for struct_it in arr1:
    frame_dig 0
    pushint 3 // 3
    <
    bz test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_after_for@8
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_body@6

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_body@6:
    // array/immutable.py:464
    // for struct_it in arr1:
    frame_dig 0
    pushint 16 // 16
    *
    frame_dig 1
    uncover 1
    pushint 16 // 16
    extract3 // on error: index access is out of bounds
    // array/immutable.py:465
    // assert struct_it == struct12, "expected items on iteration to be the same"
    frame_dig 2
    ==
    assert // expected items on iteration to be the same
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_footer@7

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_footer@7:
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_for_header@5

test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr_after_for@8:
    // array/immutable.py:467
    // self.imm_fixed_arr = arr1
    bytec 6 // "imm_fixed_arr"
    frame_dig 1
    dup
    cover 2
    app_global_put
    // array/immutable.py:468
    // assert self.imm_fixed_arr == arr2, "expected array in storage to be the same"
    intc_0 // 0
    bytec 6 // "imm_fixed_arr"
    app_global_get_ex
    assert // check self.imm_fixed_arr exists
    frame_dig 3
    ==
    assert // expected array in storage to be the same
    // array/immutable.py:471
    // assert sum_imm_fixed(mut_arr.freeze()) == 15, "expected sum to be 15"
    dup
    callsub sum_imm_fixed
    pushint 15 // 15
    ==
    assert // expected sum to be 15
    // array/immutable.py:473
    // mut_arr[0] = NativeStruct(UInt64(), UInt64())
    intc_0 // 0
    itob
    bytec_0 // 0x
    uncover 1
    concat
    intc_0 // 0
    itob
    concat
    intc_0 // 0
    pushint 16 // 16
    *
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    // array/immutable.py:474
    // assert sum_imm_fixed(mut_arr.freeze()) == 10, "expected sum to be 10"
    callsub sum_imm_fixed
    pushint 10 // 10
    ==
    assert // expected sum to be 10
    // array/immutable.py:476
    // return self.imm_fixed_arr
    intc_0 // 0
    bytec 6 // "imm_fixed_arr"
    app_global_get_ex
    assert // check self.imm_fixed_arr exists
    frame_bury 0
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    b _puya_lib.mem.new_slot@entry

_puya_lib.mem.new_slot@entry:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_0 // 0
    setbit // on error: no available slots
    store 0
    retsub
