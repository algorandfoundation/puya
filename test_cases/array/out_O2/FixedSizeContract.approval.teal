#pragma version 10
#pragma typetrack false

// test_cases.array.fixed_size.FixedSizeContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 80
    bytecblock "count" 0x151f7c75 0x "a"
    intc_0 // 0
    dupn 5
    bytec_2 // ""
    dupn 14
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@31
    pushbytess 0x28d7c1b8 0xf8fd68a7 0x1f028db1 0x096b3a59 // method "test_array(uint64,uint64,uint64,uint64)uint64", method "test_bool_array(uint64)uint64", method "test_arc4_conversion(uint64)uint64[]", method "sum_array(uint64[])uint64"
    txna ApplicationArgs 0
    match main_test_array_route@5 main_test_bool_array_route@9 main_test_arc4_conversion_route@18 main_sum_array_route@27

main_after_if_else@33:
    intc_0 // 0
    return

main_sum_array_route@27:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    extract 2 0
    dup
    bury 17
    intc_0 // 0
    bury 2
    len
    intc_2 // 8
    /
    bury 13
    intc_0 // 0
    bury 8

main_for_header@28:
    dig 7
    dig 13
    <
    bz main_after_for@30
    dig 15
    dig 8
    dup
    cover 2
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    intc_0 // 0
    extract_uint64
    dig 2
    +
    bury 2
    intc_1 // 1
    +
    bury 8
    b main_for_header@28

main_after_for@30:
    dup
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_arc4_conversion_route@18:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 6
    bytec_2 // 0x
    bury 18
    intc_1 // 1
    +
    bury 2
    intc_1 // 1
    bury 9

main_for_header@19:
    dig 8
    dig 2
    <
    bz main_after_for@21
    dig 8
    dup
    itob
    dig 18
    swap
    concat // on error: max array length exceeded
    bury 18
    intc_1 // 1
    +
    bury 9
    b main_for_header@19

main_after_for@21:
    dig 16
    len
    intc_2 // 8
    /
    dup
    bury 15
    dig 5
    ==
    assert // expected correct length
    intc_0 // 0
    bury 12
    intc_0 // 0
    bury 8

main_for_header@22:
    dig 7
    dig 14
    <
    bz main_after_for@26
    dig 16
    dig 8
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    extract 0 8
    pushbytes 0x0000000000000000
    !=
    dig 12
    bury 12
    bz main_after_if_else@25
    dig 11
    intc_1 // 1
    +
    bury 11

main_after_if_else@25:
    dig 10
    bury 12
    dig 7
    intc_1 // 1
    +
    bury 8
    b main_for_header@22

main_after_for@26:
    dig 16
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_bool_array_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 6
    bytec_2 // 0x
    bury 19
    intc_1 // 1
    +
    bury 2
    intc_1 // 1
    bury 9

main_for_header@10:
    dig 8
    dig 2
    <
    bz main_after_for@12
    dig 8
    dup
    pushint 2 // 2
    %
    !
    pushbytess 0x00 0x80 // 0x00, 0x80
    uncover 2
    select
    dig 19
    swap
    concat // on error: max array length exceeded
    bury 19
    intc_1 // 1
    +
    bury 9
    b main_for_header@10

main_after_for@12:
    dig 17
    len
    intc_1 // 1
    /
    dup
    bury 16
    dig 5
    ==
    assert // expected correct length
    intc_0 // 0
    bury 12
    intc_0 // 0
    bury 8

main_for_header@13:
    dig 7
    dig 15
    <
    bz main_after_for@17
    dig 17
    dig 8
    intc_1 // 1
    extract3
    intc_0 // 0
    getbyte
    dig 12
    bury 12
    bz main_after_if_else@16
    dig 11
    intc_1 // 1
    +
    bury 11

main_after_if_else@16:
    dig 10
    bury 12
    dig 7
    intc_1 // 1
    +
    bury 8
    b main_for_header@13

main_after_for@17:
    dig 11
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_array_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    bytec_0 // "count"
    intc_0 // 0
    app_global_put
    callsub xtra
    callsub xtra
    callsub xtra
    uncover 11
    itob
    pushbytes 0x00000000000000000000000000000000
    swap
    concat
    uncover 11
    itob
    concat
    uncover 10
    concat
    uncover 9
    concat
    uncover 11
    itob
    uncover 12
    swap
    concat
    uncover 9
    itob
    concat
    uncover 8
    itob
    concat
    uncover 7
    concat
    uncover 6
    concat
    concat
    uncover 5
    itob
    uncover 6
    swap
    concat
    uncover 5
    itob
    concat
    uncover 4
    itob
    concat
    uncover 3
    concat
    uncover 2
    concat
    concat
    bury 19
    intc_0 // 0
    bury 9

main_for_header@6:
    dig 8
    pushint 3 // 3
    <
    bz main_after_for@8
    dig 18
    dig 9
    dup
    cover 2
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    dup
    pushint 24 // 24
    extract_uint64
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    ==
    assert
    swap
    extract 64 16
    dup
    extract 0 8 // on error: Index access is out of bounds
    uncover 3
    pushint 2 // 2
    +
    itob
    b==
    assert
    extract 8 8 // on error: Index access is out of bounds
    dig 1
    dig 2
    *
    itob
    b==
    assert
    bury 9
    b main_for_header@6

main_after_for@8:
    dig 18
    dup
    len
    intc_3 // 80
    /
    dup
    bury 8
    itob
    extract 6 2
    dig 1
    concat
    bytec_3 // "a"
    box_del
    pop
    bytec_3 // "a"
    swap
    box_put
    extract 0 80
    dup
    bury 22
    dup
    extract 0 8
    bury 21
    intc_2 // 8
    extract_uint64
    bury 7
    intc_0 // 0
    bury 5
    intc_1 // 1
    bury 3

main_for_header@36:
    dig 2
    dig 6
    <
    bz main_after_for@44
    dig 18
    dig 3
    intc_3 // 80
    *
    intc_3 // 80
    extract3
    dupn 2
    extract 0 8
    swap
    intc_2 // 8
    extract_uint64
    bury 6
    dig 21
    b<
    bz main_else_body@39
    dig 21
    intc_0 // 0
    extract_uint64
    swap
    intc_0 // 0
    extract_uint64
    -
    bury 10

main_after_if_else@40:
    dig 3
    dig 7
    <
    bz main_else_body@42
    dig 6
    dig 4
    -

main_after_if_else@43:
    dig 10
    dup
    *
    swap
    dup
    *
    +
    sqrt
    dig 5
    +
    bury 5
    dig 2
    intc_1 // 1
    +
    bury 3
    b main_for_header@36

main_else_body@42:
    dig 3
    dig 7
    -
    b main_after_if_else@43

main_else_body@39:
    intc_0 // 0
    extract_uint64
    dig 21
    intc_0 // 0
    extract_uint64
    -
    bury 10
    b main_after_if_else@40

main_after_for@44:
    dig 4
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@31:
    txn OnCompletion
    bnz main_after_if_else@33
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test_cases.array.fixed_size.FixedSizeContract.xtra() -> uint64, uint64, bytes, bytes:
xtra:
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_0 // "count"
    swap
    app_global_put
    txn NumAppArgs
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    txn Sender
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    itob
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_0 // 0
    bytec_0 // "count"
    app_global_get_ex
    assert // check self.count exists
    *
    itob
    concat
    retsub
