main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_implicit_conversion_abi_call(uint64[],application)void" => block@3, * => block@10}
    block@3: // test_implicit_conversion_abi_call_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let app#0: uint64 = ((txnas Applications) tmp%7#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[])uint64")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let encoded%3#0: Encoded(len+uint64[][]) = (concat 0x0002 arr#0)
        let nested_arr#1: Encoded(len+len+uint64[][]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, encoded%3#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[][])uint64")
        ((itxn_field ApplicationArgs) nested_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let array%array_length%0#1: uint64 = (extract_uint16 arr#0 0u)
        let val_as_bytes%0#0: bytes[8] = (itob array%array_length%0#1)
        let encoded%7#0: Encoded((len+uint64[],uint64)) = (concat 0x000a val_as_bytes%0#0)
        let encoded%8#0: Encoded((len+uint64[],uint64)) = (concat encoded%7#0 arr#0)
        let encoded%10#0: Encoded((len+uint64[],uint64)[]) = (concat 0x0002 encoded%8#0)
        let as_Encoded(len+(len+uint64[],uint64)[])%0#0: Encoded(len+(len+uint64[],uint64)[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, encoded%10#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call((uint64[],uint64)[])uint64")
        ((itxn_field ApplicationArgs) 0x0000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@6: // bare_routing_L12
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@10: // after_if_else_L12
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let continue_looping%0#0: bool = (< head_offset#0 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#0: bytes = (concat new_head#0 tmp%5#0)
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let continue_looping%1#0: bool = (< head_offset#0 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#0: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#0)
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#0)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#0: bytes = (concat new_head#0 tmp%12#0)
        let head_offset#0: uint64 = (+ head_offset#0 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#0)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%1#0 item_offset_adjustment#2)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0