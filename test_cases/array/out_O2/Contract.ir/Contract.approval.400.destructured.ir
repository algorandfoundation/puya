slot_allocation(dynamic, reserved=[])
main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array()void" => block@3, method "test_array_extend()void" => block@4, method "test_array_multiple_append()void" => block@5, method "overhead()void" => block@6, method "test_array_too_long()void" => block@7, method "test_array_copy_and_extend()void" => block@8, method "test_array_evaluation_order()void" => block@9, method "test_array_assignment_maximum_cursage()void" => block@10, method "test_allocations(uint64)void" => block@11, method "test_iteration()void" => block@12, method "test_quicksort()void" => block@13, method "test_unobserved_write()void" => block@14, * => block@21}
    block@3: // test_array_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = new()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        store(arr#0, aggregate%val_as_bytes%0#0)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let aggregate%slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%3#0: uint64 = (len aggregate%slot_contents%3#0)
        let aggregate%array_len%3#0: uint64 = (/ aggregate%bytes_len%3#0 8u)
        let tmp%10#1: bool = (== aggregate%array_len%3#0 6u)
        (assert tmp%10#1)
        let tmp%12#3: uint64 = (- aggregate%array_len%3#0 1u)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%12#3 8u)
        let values%1#0: uint64 = (extract_uint64 aggregate%slot_contents%3#0 aggregate%bytes_offset%1#0)
        let tmp%13#2: bool = (== values%1#0 4u)
        (assert tmp%13#2)
        let expected#0: uint64 = 4u
        let _i#0: uint64 = 0u
        goto block@78
    block@78: // for_header_L287
        let continue_looping%0#0: bool = (< _i#0 3u)
        goto continue_looping%0#0 ? block@79 : block@80
    block@79: // for_body_L288
        let b#0: bytes = load(arr#0)
        let aggregate%bytes_len%5#0: uint64 = (len b#0)
        let aggregate%array_len%5#0: uint64 = (/ aggregate%bytes_len%5#0 8u)
        let sub%0#0: uint64 = (- aggregate%array_len%5#0 1u)
        let aggregate%bytes_offset%2#0: uint64 = (* sub%0#0 8u)
        let popped#0: uint64 = (extract_uint64 b#0 aggregate%bytes_offset%2#0)
        let tmp%1#2: uint64 = (- aggregate%bytes_len%5#0 8u)
        let tmp%2#0: bytes = (substring3 b#0 0u tmp%1#2)
        store(arr#0, tmp%2#0)
        let tmp%4#0: bool = (== popped#0 expected#0)
        (assert tmp%4#0)
        let expected#0: uint64 = (- expected#0 1u)
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@78
    block@80: // after_for_L287
        let aggregate%slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%6#0: uint64 = (len aggregate%slot_contents%5#0)
        let aggregate%array_len%6#0: uint64 = (/ aggregate%bytes_len%6#0 8u)
        let tmp%15#4: bool = (== aggregate%array_len%6#0 3u)
        (assert tmp%15#4)
        let tmp%17#0: uint64 = (- aggregate%array_len%6#0 1u)
        let aggregate%bytes_offset%3#0: uint64 = (* tmp%17#0 8u)
        let values%2#0: uint64 = (extract_uint64 aggregate%slot_contents%5#0 aggregate%bytes_offset%3#0)
        let tmp%18#1: bool = (== values%2#0 1u)
        (assert tmp%18#1)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob 43u)
        let aggregate%concat%1#0: Encoded(uint64[]) = (concat aggregate%slot_contents%5#0 aggregate%val_as_bytes%1#0) // on error: max array length exceeded
        store(arr#0, aggregate%concat%1#0)
        let aggregate%bytes_len%8#0: uint64 = (len aggregate%concat%1#0)
        let aggregate%array_len%8#0: uint64 = (/ aggregate%bytes_len%8#0 8u)
        let tmp%22#1: bool = (== aggregate%array_len%8#0 4u)
        (assert tmp%22#1)
        let tmp%24#2: uint64 = (- aggregate%array_len%8#0 1u)
        let aggregate%bytes_offset%4#0: uint64 = (* tmp%24#2 8u)
        let values%3#0: uint64 = (extract_uint64 aggregate%concat%1#0 aggregate%bytes_offset%4#0)
        let tmp%25#1: bool = (== values%3#0 43u)
        (assert tmp%25#1)
        let values%4#0: uint64 = (extract_uint64 aggregate%concat%1#0 0u)
        let tmp%26#1: bool = (== values%4#0 42u)
        (assert tmp%26#1)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let aggregate%slot_contents%9#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%10#0: uint64 = (len aggregate%slot_contents%9#0)
        let aggregate%array_len%10#0: uint64 = (/ aggregate%bytes_len%10#0 8u)
        let tmp%28#0: bool = (== aggregate%array_len%10#0 14u)
        (assert tmp%28#0)
        let tmp%30#1: uint64 = (- aggregate%array_len%10#0 1u)
        let aggregate%bytes_offset%6#0: uint64 = (* tmp%30#1 8u)
        let values%5#0: uint64 = (extract_uint64 aggregate%slot_contents%9#0 aggregate%bytes_offset%6#0)
        let tmp%31#1: bool = (== values%5#0 9u)
        (assert tmp%31#1)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob 44u)
        let aggregate%concat%2#0: Encoded(uint64[]) = (concat aggregate%slot_contents%9#0 aggregate%val_as_bytes%2#0) // on error: max array length exceeded
        let aggregate%bytes_len%12#0: uint64 = (len aggregate%concat%2#0)
        let aggregate%array_len%12#0: uint64 = (/ aggregate%bytes_len%12#0 8u)
        let tmp%35#1: bool = (== aggregate%array_len%12#0 15u)
        (assert tmp%35#1)
        let tmp%37#0: uint64 = (- aggregate%array_len%12#0 1u)
        let aggregate%bytes_offset%7#0: uint64 = (* tmp%37#0 8u)
        let values%6#1: uint64 = (extract_uint64 aggregate%concat%2#0 aggregate%bytes_offset%7#0)
        let tmp%38#1: bool = (== values%6#1 44u)
        (assert tmp%38#1)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob 99u)
        let aggregate%concat%3#0: Encoded(uint64[]) = (concat aggregate%concat%2#0 aggregate%val_as_bytes%3#0) // on error: max array length exceeded
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob 100u)
        let aggregate%concat%4#0: Encoded(uint64[]) = (concat aggregate%concat%3#0 aggregate%val_as_bytes%4#0) // on error: max array length exceeded
        let values%7#0: uint64 = (extract_uint64 aggregate%concat%4#0 0u)
        let tmp%40#0: uint64 = (+ values%7#0 2u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%40#0)
        let aggregate%updated_array%0#0: bytes = ((replace2 0) aggregate%concat%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%bytes_len%14#0: uint64 = (len aggregate%updated_array%0#0)
        let aggregate%array_len%14#0: uint64 = (/ aggregate%bytes_len%14#0 8u)
        let tmp%42#1: bool = (== aggregate%array_len%14#0 17u)
        (assert tmp%42#1)
        let values%8#0: uint64 = (extract_uint64 aggregate%updated_array%0#0 0u)
        let tmp%43#1: bool = (== values%8#0 44u)
        (assert tmp%43#1)
        let tmp%45#1: uint64 = (- aggregate%array_len%14#0 2u)
        let aggregate%bytes_offset%11#0: uint64 = (* tmp%45#1 8u)
        let values%9#0: uint64 = (extract_uint64 aggregate%updated_array%0#0 aggregate%bytes_offset%11#0)
        let tmp%46#1: bool = (== values%9#0 99u)
        (assert tmp%46#1)
        let tmp%48#0: uint64 = (- aggregate%array_len%14#0 1u)
        let aggregate%bytes_offset%12#0: uint64 = (* tmp%48#0 8u)
        let values%10#0: uint64 = (extract_uint64 aggregate%updated_array%0#0 aggregate%bytes_offset%12#0)
        let tmp%49#0: bool = (== values%10#0 100u)
        (assert tmp%49#0)
        let aggregate%extract_to_end%0#0: bytes = ((extract 8 0) aggregate%updated_array%0#0)
        store(arr#0, aggregate%extract_to_end%0#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@4: // test_array_extend_route_L52
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        test_cases.array.uint64.add_x(arr#0, 1u)
        store(local.0, 0x000000000000000100000000000000020000000000000003)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%concat%9#0: Encoded(uint64[]) = (concat slot_contents%4#0 0x000000000000000100000000000000020000000000000003) // on error: max array length exceeded
        store(arr#0, aggregate%concat%9#0)
        let aggregate%bytes_len%18#0: uint64 = (len aggregate%concat%9#0)
        let aggregate%array_len%18#0: uint64 = (/ aggregate%bytes_len%18#0 8u)
        let tmp%9#1: bool = (== aggregate%array_len%18#0 4u)
        (assert tmp%9#1)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@5: // test_array_multiple_append_route_L64
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot_contents%0#1: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob 1u)
        let aggregate%concat%10#0: Encoded(uint64[]) = (concat slot_contents%0#1 aggregate%val_as_bytes%9#0) // on error: max array length exceeded
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob 2u)
        let aggregate%concat%11#0: Encoded(uint64[]) = (concat aggregate%concat%10#0 aggregate%val_as_bytes%10#0) // on error: max array length exceeded
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob 3u)
        let aggregate%concat%12#0: Encoded(uint64[]) = (concat aggregate%concat%11#0 aggregate%val_as_bytes%11#0) // on error: max array length exceeded
        store(arr#0, aggregate%concat%12#0)
        let aggregate%bytes_len%19#0: uint64 = (len aggregate%concat%12#0)
        let aggregate%array_len%19#0: uint64 = (/ aggregate%bytes_len%19#0 8u)
        let tmp%7#3: bool = (== aggregate%array_len%19#0 4u)
        (assert tmp%7#3)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@6: // overhead_route_L73
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@7: // test_array_too_long_route_L77
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        store(local.1, 0x)
        let i#0: uint64 = 0u
        goto block@67
    block@67: // for_header_L80
        let continue_looping%0#0: bool = (< i#0 512u)
        goto continue_looping%0#0 ? block@68 : block@69
    block@68: // for_body_L81
        let slot_contents%0#1: Encoded(uint64[]) = load(local.1)
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob i#0)
        let aggregate%concat%13#0: Encoded(uint64[]) = (concat slot_contents%0#1 aggregate%val_as_bytes%12#0) // on error: max array length exceeded
        store(local.1, aggregate%concat%13#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@67
    block@69: // after_for_L80
        let aggregate%slot_contents%18#0: Encoded(uint64[]) = load(local.1)
        let aggregate%bytes_len%20#0: uint64 = (len aggregate%slot_contents%18#0)
        let aggregate%array_len%20#0: uint64 = (/ aggregate%bytes_len%20#0 8u)
        let tmp%3#1: bool = (== aggregate%array_len%20#0 512u)
        (assert tmp%3#1) // array is expected length
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob 512u)
        let aggregate%concat%14#0: Encoded(uint64[]) = (concat aggregate%slot_contents%18#0 aggregate%val_as_bytes%13#0) // on error: max array length exceeded
        store(local.1, aggregate%concat%14#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@8: // test_array_copy_and_extend_route_L86
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        store(local.2, 0x)
        let i#0: uint64 = 0u
        goto block@62
    block@62: // for_header_L89
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@63 : block@64
    block@63: // for_body_L90
        let slot_contents%0#1: Encoded(uint64[]) = load(local.2)
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob i#0)
        let aggregate%concat%15#0: Encoded(uint64[]) = (concat slot_contents%0#1 aggregate%val_as_bytes%14#0) // on error: max array length exceeded
        store(local.2, aggregate%concat%15#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@62
    block@64: // after_for_L89
        let slot_contents%1#0: Encoded(uint64[]) = load(local.2)
        store(local.3, slot_contents%1#0)
        let slot_contents%2#1: Encoded(uint64[]) = load(local.2)
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob 5u)
        let aggregate%concat%16#0: Encoded(uint64[]) = (concat slot_contents%2#1 aggregate%val_as_bytes%15#0) // on error: max array length exceeded
        store(local.2, aggregate%concat%16#0)
        let aggregate%bytes_len%21#0: uint64 = (len aggregate%concat%16#0)
        let aggregate%array_len%21#0: uint64 = (/ aggregate%bytes_len%21#0 8u)
        let tmp%5#1: bool = (== aggregate%array_len%21#0 6u)
        (assert tmp%5#1)
        let tmp%7#0: uint64 = (- aggregate%array_len%21#0 1u)
        let aggregate%bytes_offset%14#0: uint64 = (* tmp%7#0 8u)
        let values%0#0: uint64 = (extract_uint64 aggregate%concat%16#0 aggregate%bytes_offset%14#0)
        let tmp%8#0: bool = (== values%0#0 5u)
        (assert tmp%8#0) // expected 5
        let aggregate%slot_contents%21#0: Encoded(uint64[]) = load(local.3)
        let aggregate%bytes_len%23#0: uint64 = (len aggregate%slot_contents%21#0)
        let aggregate%array_len%23#0: uint64 = (/ aggregate%bytes_len%23#0 8u)
        let tmp%10#1: bool = (== aggregate%array_len%23#0 5u)
        (assert tmp%10#1)
        let tmp%12#3: uint64 = (- aggregate%array_len%23#0 1u)
        let aggregate%bytes_offset%15#0: uint64 = (* tmp%12#3 8u)
        let values%1#0: uint64 = (extract_uint64 aggregate%slot_contents%21#0 aggregate%bytes_offset%15#0)
        let tmp%13#2: bool = (== values%1#0 4u)
        (assert tmp%13#2) // expected 4
        let aggregate%concat%17#0: Encoded(uint64[]) = (concat aggregate%concat%16#0 aggregate%slot_contents%21#0) // on error: max array length exceeded
        store(local.2, aggregate%concat%17#0)
        let aggregate%bytes_len%26#0: uint64 = (len aggregate%concat%17#0)
        let aggregate%array_len%26#0: uint64 = (/ aggregate%bytes_len%26#0 8u)
        let tmp%17#1: bool = (== aggregate%array_len%26#0 11u)
        (assert tmp%17#1)
        let aggregate%slot_contents%24#0: Encoded(uint64[]) = load(local.3)
        let aggregate%bytes_len%27#0: uint64 = (len aggregate%slot_contents%24#0)
        let aggregate%array_len%27#0: uint64 = (/ aggregate%bytes_len%27#0 8u)
        let tmp%19#1: bool = (== aggregate%array_len%27#0 5u)
        (assert tmp%19#1)
        let tmp%21#0: uint64 = (- aggregate%array_len%26#0 1u)
        let aggregate%bytes_offset%16#0: uint64 = (* tmp%21#0 8u)
        let values%2#0: uint64 = (extract_uint64 aggregate%concat%17#0 aggregate%bytes_offset%16#0)
        let tmp%22#1: bool = (== values%2#0 4u)
        (assert tmp%22#1) // expected 4
        let values%3#0: uint64 = (extract_uint64 aggregate%concat%17#0 32u)
        let tmp%23#1: bool = (== values%3#0 4u)
        (assert tmp%23#1) // expected 4
        let values%4#0: uint64 = (extract_uint64 aggregate%concat%17#0 40u)
        let tmp%24#0: bool = (== values%4#0 5u)
        (assert tmp%24#0) // expected 4
        let values%5#0: uint64 = (extract_uint64 aggregate%concat%17#0 48u)
        let tmp%25#1: bool = (! values%5#0)
        (assert tmp%25#1) // expected 4
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@9: // test_array_evaluation_order_route_L108
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = new()
        let aggregate%val_as_bytes%16#0: bytes[8] = (itob 3u)
        store(arr#0, aggregate%val_as_bytes%16#0)
        let tmp%2#4: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%3#5: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(tmp%3#5)
        let slot_contents%2#1: Encoded(uint64[]) = load(tmp%2#4)
        let aggregate%concat%19#0: Encoded(uint64[]) = (concat slot_contents%2#1 slot_contents%1#0) // on error: max array length exceeded
        store(tmp%2#4, aggregate%concat%19#0)
        let aggregate%slot_contents%26#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%30#0: uint64 = (len aggregate%slot_contents%26#0)
        let aggregate%array_len%30#0: uint64 = (/ aggregate%bytes_len%30#0 8u)
        let tmp%7#3: bool = (== aggregate%array_len%30#0 6u)
        (assert tmp%7#3)
        let values%0#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 0u)
        let tmp%8#0: bool = (== values%0#0 3u)
        (assert tmp%8#0)
        let values%1#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 8u)
        let tmp%9#1: bool = (== values%1#0 1u)
        (assert tmp%9#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 16u)
        let tmp%10#1: bool = (== values%2#0 2u)
        (assert tmp%10#1)
        let values%3#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 24u)
        let tmp%11#1: bool = (== values%3#0 3u)
        (assert tmp%11#1)
        let values%4#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 32u)
        let tmp%12#0: bool = (== values%4#0 1u)
        (assert tmp%12#0)
        let values%5#0: uint64 = (extract_uint64 aggregate%slot_contents%26#0 40u)
        let tmp%13#2: bool = (== values%5#0 2u)
        (assert tmp%13#2)
        let tmp%14#1: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let aggregate%slot_contents%27#0: Encoded(uint64[]) = load(tmp%14#1)
        let aggregate%bytes_len%31#0: uint64 = (len aggregate%slot_contents%27#0)
        let aggregate%array_len%31#0: uint64 = (/ aggregate%bytes_len%31#0 8u)
        let tmp%16#2: uint64 = (- aggregate%array_len%31#0 1u)
        let aggregate%bytes_offset%26#0: uint64 = (* tmp%16#2 8u)
        let aggregate%encoded_element%26#0: bytes = (extract3 aggregate%slot_contents%27#0 aggregate%bytes_offset%26#0 8u) // on error: index access is out of bounds
        let tmp%17#2: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%17#2)
        let values%7#0: uint64 = (extract_uint64 slot_contents%10#0 0u)
        let slot_contents%11#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%1#0: uint64 = (* values%7#0 8u)
        let aggregate%updated_array%1#0: bytes = (replace3 slot_contents%11#0 aggregate%write_offset%1#0 aggregate%encoded_element%26#0)
        store(arr#0, aggregate%updated_array%1#0)
        let aggregate%bytes_len%32#0: uint64 = (len aggregate%updated_array%1#0)
        let aggregate%array_len%32#0: uint64 = (/ aggregate%bytes_len%32#0 8u)
        let tmp%19#1: bool = (== aggregate%array_len%32#0 8u)
        (assert tmp%19#1)
        let values%8#0: uint64 = (extract_uint64 aggregate%updated_array%1#0 48u)
        let tmp%20#0: bool = (== values%8#0 6u)
        (assert tmp%20#0)
        let values%9#0: uint64 = (extract_uint64 aggregate%updated_array%1#0 56u)
        let tmp%21#1: bool = (== values%9#0 7u)
        (assert tmp%21#1)
        let values%10#0: uint64 = (extract_uint64 aggregate%updated_array%1#0 24u)
        let tmp%22#1: bool = (== values%10#0 6u)
        (assert tmp%22#1)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@10: // test_array_assignment_maximum_cursage_route_L127
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = new()
        let aggregate%val_as_bytes%17#0: bytes[8] = (itob 3u)
        store(arr#0, aggregate%val_as_bytes%17#0)
        let update_assignment_current_base_value%0#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let aggregate%val_as_bytes%18#0: bytes[8] = (itob 42u)
        let slot_contents%1#0: Encoded(uint64[]) = load(update_assignment_current_base_value%0#0)
        let aggregate%updated_array%2#0: bytes = ((replace2 0) slot_contents%1#0 aggregate%val_as_bytes%18#0)
        store(update_assignment_current_base_value%0#0, aggregate%updated_array%2#0)
        let aggregate%slot_contents%29#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%33#0: uint64 = (len aggregate%slot_contents%29#0)
        let aggregate%array_len%33#0: uint64 = (/ aggregate%bytes_len%33#0 8u)
        let tmp%3#1: bool = (== aggregate%array_len%33#0 2u)
        (assert tmp%3#1)
        let values%0#0: uint64 = (extract_uint64 aggregate%slot_contents%29#0 0u)
        let tmp%4#0: bool = (== values%0#0 42u)
        (assert tmp%4#0)
        let values%1#0: uint64 = (extract_uint64 aggregate%slot_contents%29#0 8u)
        let tmp%5#1: bool = (== values%1#0 1u)
        (assert tmp%5#1)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@11: // test_allocations_route_L136
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let num#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let _i#0: uint64 = 0u
        goto block@53
    block@53: // for_header_L138
        let continue_looping%0#0: bool = (< _i#0 num#0)
        goto continue_looping%0#0 ? block@54 : block@55
    block@54: // for_body_L139
        let alloc_test#0: Encoded(uint64[])* = new()
        store(alloc_test#0, 0x)
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        let _i#0: uint64 = (+ _i#0 1u)
        goto block@53
    block@55: // after_for_L138
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@12: // test_iteration_route_L142
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        store(local.4, 0x)
        let val#0: uint64 = 0u
        goto block@36
    block@36: // for_header_L145
        let continue_looping%0#0: bool = (< val#0 5u)
        goto continue_looping%0#0 ? block@37 : block@38
    block@37: // for_body_L146
        let slot_contents%0#1: Encoded(uint64[]) = load(local.4)
        let aggregate%val_as_bytes%19#0: bytes[8] = (itob val#0)
        let aggregate%concat%21#0: Encoded(uint64[]) = (concat slot_contents%0#1 aggregate%val_as_bytes%19#0) // on error: max array length exceeded
        store(local.4, aggregate%concat%21#0)
        let val#0: uint64 = (+ val#0 1u)
        goto block@36
    block@38: // after_for_L145
        let aggregate%slot_contents%30#0: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_len%34#0: uint64 = (len aggregate%slot_contents%30#0)
        let aggregate%array_len%34#0: uint64 = (/ aggregate%bytes_len%34#0 8u)
        let tmp%3#1: bool = (== aggregate%array_len%34#0 5u)
        (assert tmp%3#1) // expected array of length 5
        let last#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@39
    block@39: // for_header_L151
        let continue_looping%1#0: bool = (< item_index_internal%0#0 aggregate%array_len%34#0)
        goto continue_looping%1#0 ? block@40 : block@41
    block@40: // for_body_L152
        let slot_contents%1#0: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_offset%35#0: uint64 = (* item_index_internal%0#0 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%35#0)
        let tmp%4#0: bool = (>= value#0 last#0)
        (assert tmp%4#0) // array is not sorted
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        let last#0: uint64 = value#0
        goto block@39
    block@41: // after_for_L151
        let aggregate%slot_contents%32#0: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_len%36#0: uint64 = (len aggregate%slot_contents%32#0)
        let aggregate%array_len%36#0: uint64 = (/ aggregate%bytes_len%36#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        let idx#0: uint64 = item_index_internal%1#0
        goto block@42
    block@42: // for_header_L156
        let continue_looping%2#0: bool = (< idx#0 aggregate%array_len%36#0)
        goto continue_looping%2#0 ? block@43 : block@44
    block@43: // for_body_L157
        let slot_contents%2#1: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_offset%36#0: uint64 = (* idx#0 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%2#1 aggregate%bytes_offset%36#0)
        let tmp%5#1: bool = (== value#0 idx#0)
        (assert tmp%5#1) // incorrect array value
        let item_index_internal%1#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = item_index_internal%1#0
        goto block@42
    block@44: // after_for_L156
        let aggregate%slot_contents%33#0: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_len%37#0: uint64 = (len aggregate%slot_contents%33#0)
        let aggregate%array_len%37#0: uint64 = (/ aggregate%bytes_len%37#0 8u)
        let reverse_index_internal%2#1: uint64 = aggregate%array_len%37#0
        goto block@45
    block@45: // for_header_L160
        goto reverse_index_internal%2#1 ? block@46 : block@47
    block@46: // for_body_L161
        let reverse_index_internal%2#1: uint64 = (- reverse_index_internal%2#1 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(local.4)
        let aggregate%bytes_offset%37#0: uint64 = (* reverse_index_internal%2#1 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%3#0 aggregate%bytes_offset%37#0)
        let tmp%6#2: bool = (<= value#0 last#0)
        (assert tmp%6#2) // array is not sorted
        let last#0: uint64 = value#0
        goto block@45
    block@47: // after_for_L160
        let arc4_arr#0: Encoded(len+uint64[]) = 0x0000
        store(local.5, 0x)
        let i#0: uint64 = 0u
        goto block@48
    block@48: // for_header_L166
        let continue_looping%4#0: bool = (< i#0 5u)
        goto continue_looping%4#0 ? block@49 : block@50
    block@49: // for_body_L167
        let aggregate%val_as_bytes%20#0: bytes[8] = (itob i#0)
        let aggregate%concat%22#0: Encoded(len+uint64[]) = (concat arc4_arr#0 aggregate%val_as_bytes%20#0) // on error: max array length exceeded
        let aggregate%extract_uint16%0#0: uint64 = (extract_uint16 aggregate%concat%22#0 0u)
        let aggregate%add%1#0: uint64 = (+ aggregate%extract_uint16%0#0 1u)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%add%1#0)
        let aggregate%as_u16_bytes%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let arc4_arr#0: Encoded(len+uint64[]) = ((replace2 0) aggregate%concat%22#0 aggregate%as_u16_bytes%0#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(local.5)
        let aggregate%concat%23#0: Encoded(uint64[]) = (concat slot_contents%4#0 aggregate%val_as_bytes%20#0) // on error: max array length exceeded
        store(local.5, aggregate%concat%23#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@48
    block@50: // after_for_L166
        let slot_contents%5#0: Encoded(uint64[]) = load(local.5)
        let aggregate%bytes_len%38#0: uint64 = (len slot_contents%5#0)
        let aggregate%array_len%38#0: uint64 = (/ aggregate%bytes_len%38#0 8u)
        let aggregate%concat%24#0: Encoded(len+uint64[]) = (concat arc4_arr#0 slot_contents%5#0) // on error: max array length exceeded
        let aggregate%extract_uint16%1#0: uint64 = (extract_uint16 aggregate%concat%24#0 0u)
        let aggregate%add%2#0: uint64 = (+ aggregate%extract_uint16%1#0 aggregate%array_len%38#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%add%2#0)
        let aggregate%as_u16_bytes%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let combined_arr#0: Encoded(len+uint64[]) = ((replace2 0) aggregate%concat%24#0 aggregate%as_u16_bytes%1#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 combined_arr#0 0u)
        let tmp%16#0: bool = (== aggregate%array_length%0#0 10u)
        (assert tmp%16#0)
        let aggregate%encoded_element%38#0: bytes = ((extract 2 8) combined_arr#0)
        let tmp%17#1: bool = (b== aggregate%encoded_element%38#0 0x0000000000000000)
        (assert tmp%17#1)
        let aggregate%encoded_element%39#0: bytes = ((extract 34 8) combined_arr#0)
        let tmp%18#1: bool = (b== aggregate%encoded_element%39#0 0x0000000000000004)
        (assert tmp%18#1)
        let aggregate%encoded_element%40#0: bytes = ((extract 42 8) combined_arr#0)
        let tmp%19#1: bool = (b== aggregate%encoded_element%40#0 0x0000000000000000)
        (assert tmp%19#1)
        let aggregate%encoded_element%41#0: bytes = ((extract 74 8) combined_arr#0)
        let tmp%20#0: bool = (b== aggregate%encoded_element%41#0 0x0000000000000004)
        (assert tmp%20#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@13: // test_quicksort_route_L176
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let rnd#0: Encoded(uint64[])* = new()
        store(rnd#0, 0x)
        let tmp%0#2: account = (txn Sender)
        let item_index_internal%0#0: uint64 = 0u
        goto block@28
    block@28: // for_header_L180
        let continue_looping%0#0: bool = (< item_index_internal%0#0 32u)
        goto continue_looping%0#0 ? block@29 : block@30
    block@29: // for_body_L181
        let tmp%1#2: uint64 = (getbyte tmp%0#2 item_index_internal%0#0)
        let slot_contents%0#1: Encoded(uint64[]) = load(rnd#0)
        let aggregate%val_as_bytes%21#0: bytes[8] = (itob tmp%1#2)
        let aggregate%concat%25#0: Encoded(uint64[]) = (concat slot_contents%0#1 aggregate%val_as_bytes%21#0) // on error: max array length exceeded
        store(rnd#0, aggregate%concat%25#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@28
    block@30: // after_for_L180
        let aggregate%slot_contents%34#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%bytes_len%39#0: uint64 = (len aggregate%slot_contents%34#0)
        let aggregate%array_len%39#0: uint64 = (/ aggregate%bytes_len%39#0 8u)
        let tmp%5#1: bool = (== aggregate%array_len%39#0 32u)
        (assert tmp%5#1) // expected array of length 32
        let tmp%7#0: uint64 = (- aggregate%array_len%39#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%7#0)
        let last#0: uint64 = 0u
        let aggregate%slot_contents%36#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%bytes_len%41#0: uint64 = (len aggregate%slot_contents%36#0)
        let aggregate%array_len%41#0: uint64 = (/ aggregate%bytes_len%41#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@31
    block@31: // for_header_L189
        let continue_looping%1#0: bool = (< item_index_internal%1#0 aggregate%array_len%41#0)
        goto continue_looping%1#0 ? block@32 : block@55
    block@32: // for_body_L190
        let slot_contents%1#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%bytes_offset%42#0: uint64 = (* item_index_internal%1#0 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%42#0)
        let tmp%8#0: bool = (>= value#0 last#0)
        (assert tmp%8#0) // array is not sorted
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        let last#0: uint64 = value#0
        goto block@31
    block@14: // test_unobserved_write_route_L193
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let arr#0: Encoded(uint64[])* = test_cases.array.uint64.create_array()
        let aggregate%slot_contents%37#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%42#0: uint64 = (len aggregate%slot_contents%37#0)
        let aggregate%array_len%42#0: uint64 = (/ aggregate%bytes_len%42#0 8u)
        let last#0: uint64 = (- aggregate%array_len%42#0 1u)
        let aggregate%val_as_bytes%22#0: bytes[8] = (itob 0u)
        let aggregate%write_offset%3#0: uint64 = (* last#0 8u)
        let aggregate%updated_array%3#0: bytes = (replace3 aggregate%slot_contents%37#0 aggregate%write_offset%3#0 aggregate%val_as_bytes%22#0)
        store(arr#0, aggregate%updated_array%3#0)
        test_cases.array.uint64.assert_last_is_zero(arr#0)
        let aggregate%val_as_bytes%23#0: bytes[8] = (itob 1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%updated_array%4#0: bytes = (replace3 slot_contents%1#0 aggregate%write_offset%3#0 aggregate%val_as_bytes%23#0)
        store(arr#0, aggregate%updated_array%4#0)
        let values%0#0: uint64 = (extract_uint64 aggregate%updated_array%4#0 aggregate%write_offset%3#0)
        let tmp%3#1: bool = (== values%0#0 1u)
        (assert tmp%3#1)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@17: // bare_routing_L13
        let tmp%52#0: uint64 = (txn OnCompletion)
        goto tmp%52#0 ? block@21 : block@18
    block@18: // __algopy_default_create_L1
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // can only call when creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@21: // after_if_else_L13
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__%0#0
        goto block@22
    block@22: // after_inlined_test_cases.array.uint64.Contract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.array.uint64.quicksort_window(arr: Encoded(uint64[])*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L203
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%1#0 8u)
        let pivot#0: uint64 = (extract_uint64 slot_contents%0#0 aggregate%bytes_offset%0#0)
        let right#1: uint64 = window_right#0
        let left#1: uint64 = window_left#0
        goto block@3
    block@3: // while_top_L214
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#0: uint64 = (* left#1 8u)
        let values%1#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%1#0)
        let tmp%2#0: bool = (< values%1#0 pivot#0)
        goto tmp%2#0 ? block@4 : block@6
    block@4: // while_body_L215
        let left#1: uint64 = (+ left#1 1u)
        goto block@3
    block@6: // while_top_L217
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#0: uint64 = (* right#1 8u)
        let values%2#0: uint64 = (extract_uint64 slot_contents%2#0 aggregate%bytes_offset%2#0)
        let tmp%4#0: bool = (< pivot#0 values%2#0)
        goto tmp%4#0 ? block@7 : block@10
    block@7: // while_body_L219
        goto right#1 ? block@9 : block@22
    block@9: // after_if_else_L219
        let right#1: uint64 = (- right#1 1u)
        goto block@6
    block@10: // after_while_L217
        let tmp%7#0: bool = (< left#1 right#1)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L225
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%encoded_element%3#0: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%2#0 8u) // on error: index access is out of bounds
        let aggregate%encoded_element%4#0: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%1#0 8u) // on error: index access is out of bounds
        let aggregate%updated_array%0#0: bytes = (replace3 slot_contents%3#0 aggregate%bytes_offset%1#0 aggregate%encoded_element%3#0)
        let aggregate%updated_array%1#0: bytes = (replace3 aggregate%updated_array%0#0 aggregate%bytes_offset%2#0 aggregate%encoded_element%4#0)
        store(arr#0, aggregate%updated_array%1#0)
        let left#1: uint64 = (+ left#1 1u)
        goto right#1 ? block@13 : block@22
    block@13: // after_if_else_L228
        let right#1: uint64 = (- right#1 1u)
        let tmp%11#0: bool = (<= left#1 right#1)
        goto tmp%11#0 ? block@3 : block@22
    block@16: // after_if_else_L224
        let tmp%12#0: bool = (== left#1 right#1)
        goto tmp%12#0 ? block@17 : block@22
    block@17: // if_body_L239
        let left#1: uint64 = (+ left#1 1u)
        let right#16: uint64 = right#1
        goto right#1 ? block@18 : block@19
    block@18: // if_body_L242
        let right#1: uint64 = (- right#1 1u)
        let right#16: uint64 = right#1
        goto block@19
    block@19: // after_if_else_L241
        let right#1: uint64 = right#16
        goto block@22
    block@22: // after_while_L212
        let tmp%16#0: bool = (< window_left#0 right#1)
        goto tmp%16#0 ? block@23 : block@24
    block@23: // if_body_L251
        test_cases.array.uint64.quicksort_window(arr#0, window_left#0, right#1)
        goto block@24
    block@24: // after_if_else_L250
        let tmp%17#0: bool = (< left#1 window_right#0)
        goto tmp%17#0 ? block@25 : block@26
    block@25: // if_body_L254
        test_cases.array.uint64.quicksort_window(arr#0, left#1, window_right#0)
        goto block@26
    block@26: // after_if_else_L253
        return 

subroutine test_cases.array.uint64.create_array() -> Encoded(uint64[])*:
    block@0: // L257
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L260
        let continue_looping%0#0: bool = (< i#0 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L261
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        store(arr#0, aggregate%concat%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L260
        return arr#0

subroutine test_cases.array.uint64.assert_last_is_zero(arr: Encoded(uint64[])*) -> void:
    block@0: // L265
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let tmp%1#0: uint64 = (- aggregate%array_len%0#0 1u)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%1#0 8u)
        let values%0#0: uint64 = (extract_uint64 aggregate%slot_contents%0#0 aggregate%bytes_offset%0#0)
        let tmp%2#0: bool = (! values%0#0)
        (assert tmp%2#0)
        return 

subroutine test_cases.array.uint64.add_x(arr: Encoded(uint64[])*, x: uint64) -> void:
    block@0: // L279
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L281
        let continue_looping%0#0: bool = (< i#0 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L282
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        store(arr#0, aggregate%concat%0#0)
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L281
        return 

subroutine test_cases.array.uint64.append_length_and_return(arr: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L293
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob aggregate%array_len%0#0)
        let aggregate%concat%0#0: Encoded(uint64[]) = (concat aggregate%slot_contents%0#0 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        store(arr#0, aggregate%concat%0#0)
        return arr#0