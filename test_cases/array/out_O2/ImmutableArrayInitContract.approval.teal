#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 3 1 0
    bytecblock 0x000000000000000100000000000000020000000000000003
    txn NumAppArgs
    bz main___algopy_default_create@11
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x8434ba2a 0x63aabba0 0xdbaf034e 0xa9d14554 // method "test_immutable_array_init()void", method "test_immutable_array_init_without_type_generic()void", method "test_reference_array_init()void", method "test_reference_array_init_without_type_generic()void"
    txna ApplicationArgs 0
    match main_test_immutable_array_init_route@4 main_test_immutable_array_init_without_type_generic_route@5 main_test_reference_array_init_route@6 main_test_reference_array_init_without_type_generic_route@7
    err

main_test_reference_array_init_without_type_generic_route@7:
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    dup
    pop
    dupn 2
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dupn 2
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dup
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    return

main_test_reference_array_init_route@6:
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    dup
    pop
    dupn 2
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dupn 2
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    assert
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    dup
    len
    intc_0 // 8
    /
    intc_1 // 3
    ==
    assert
    dup
    intc_3 // 0
    extract_uint64
    intc_2 // 1
    ==
    assert
    dup
    intc_0 // 8
    extract_uint64
    pushint 2 // 2
    ==
    assert
    pushint 16 // 16
    extract_uint64
    intc_1 // 3
    ==
    return

main_test_immutable_array_init_without_type_generic_route@5:
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    intc_2 // 1
    return

main_test_immutable_array_init_route@4:
    bytec_0 // 0x000000000000000100000000000000020000000000000003
    pop
    intc_2 // 1
    return

main___algopy_default_create@11:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_2 // 1
    return
