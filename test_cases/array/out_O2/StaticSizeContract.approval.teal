#pragma version 10
#pragma typetrack false

// test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 16 144
    bytecblock 0x151f7c75 "count" 0x 0x00 0x0000
    intc_0 // 0
    dupn 5
    bytec_2 // ""
    dupn 14
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_1 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@34
    pushbytess 0x28d7c1b8 0xfa9cb973 0x6039a240 0xf8fd68a7 0x1f028db1 0x096b3a59 0x8d6e3a25 // method "test_array(uint64,uint64,uint64,uint64)uint64", method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_bool_array(uint64)uint64", method "test_arc4_conversion(uint64)uint64[]", method "sum_array(uint64[])uint64", method "test_arc4_bool()bool[]"
    txna ApplicationArgs 0
    match main_test_array_route@5 main_test_extend_from_tuple_route@9 main_test_extend_from_arc4_tuple_route@10 main_test_bool_array_route@11 main_test_arc4_conversion_route@20 main_sum_array_route@29 main_test_arc4_bool_route@33

main_after_if_else@36:
    intc_0 // 0
    return

main_test_arc4_bool_route@33:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn Sender
    txn Receiver
    ==
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    txn Sender
    txn Receiver
    !=
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    concat // on error: max array length exceeded
    dupn 2
    len
    bytec 4 // 0x0000
    cover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 2 // 2
    ==
    assert // expected correct length
    dig 1
    len
    pushint 3 // 3
    ==
    assert // expected 3 bytes
    swap
    extract 2 0
    dig 1
    assert // Index access is out of bounds
    dup
    intc_0 // 0
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 0
    intc_1 // 1
    uncover 2
    <
    assert // Index access is out of bounds
    intc_1 // 1
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 1
    dup
    len
    bytec 4 // 0x0000
    cover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_sum_array_route@29:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    extract 2 0
    dup
    bury 17
    intc_0 // 0
    bury 2
    len
    intc_2 // 8
    /
    bury 14
    intc_0 // 0
    bury 8

main_for_header@30:
    dig 7
    dig 14
    <
    bz main_after_for@32
    dig 15
    dig 8
    dup
    cover 2
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    intc_0 // 0
    extract_uint64
    dig 2
    +
    bury 2
    intc_1 // 1
    +
    bury 8
    b main_for_header@30

main_after_for@32:
    dup
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_arc4_conversion_route@20:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 6
    bytec_2 // 0x
    bury 18
    intc_1 // 1
    +
    bury 2
    intc_1 // 1
    bury 9

main_for_header@21:
    dig 8
    dig 2
    <
    bz main_after_for@23
    dig 8
    dup
    itob
    dig 18
    swap
    concat // on error: max array length exceeded
    bury 18
    intc_1 // 1
    +
    bury 9
    b main_for_header@21

main_after_for@23:
    dig 16
    len
    intc_2 // 8
    /
    dup
    bury 16
    dig 5
    ==
    assert // expected correct length
    intc_0 // 0
    bury 12
    intc_0 // 0
    bury 8

main_for_header@24:
    dig 7
    dig 15
    <
    bz main_after_for@28
    dig 16
    dig 8
    intc_2 // 8
    *
    intc_2 // 8
    extract3
    extract 0 8
    bytec_2 // 0x
    b!=
    dig 12
    bury 12
    bz main_after_if_else@27
    dig 11
    intc_1 // 1
    +
    bury 11

main_after_if_else@27:
    dig 10
    bury 12
    dig 7
    intc_1 // 1
    +
    bury 8
    b main_for_header@24

main_after_for@28:
    dig 16
    dup
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_bool_array_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    dup
    bury 6
    bytec_2 // 0x
    bury 19
    intc_1 // 1
    +
    bury 2
    intc_1 // 1
    bury 9

main_for_header@12:
    dig 8
    dig 2
    <
    bz main_after_for@14
    dig 8
    dup
    pushint 2 // 2
    %
    !
    bytec_3 // 0x00
    pushbytes 0x80
    uncover 2
    select
    dig 19
    swap
    concat // on error: max array length exceeded
    bury 19
    intc_1 // 1
    +
    bury 9
    b main_for_header@12

main_after_for@14:
    dig 17
    len
    dup
    bury 14
    dig 5
    ==
    assert // expected correct length
    intc_0 // 0
    bury 12
    intc_0 // 0
    bury 8

main_for_header@15:
    dig 7
    dig 13
    <
    bz main_after_for@19
    dig 17
    dig 8
    intc_1 // 1
    extract3
    intc_0 // 0
    getbit
    dig 12
    bury 12
    bz main_after_if_else@18
    dig 11
    intc_1 // 1
    +
    bury 11

main_after_if_else@18:
    dig 10
    bury 12
    dig 7
    intc_1 // 1
    +
    bury 8
    b main_for_header@15

main_after_for@19:
    dig 11
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_extend_from_arc4_tuple_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    pop
    pushbytes 0x0002
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_extend_from_tuple_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    extract 0 16 // on error: Index access is out of bounds
    swap
    extract 16 16 // on error: Index access is out of bounds
    swap
    dig 1
    concat
    dup
    len
    intc_3 // 16
    /
    dup
    intc_1 // 1
    -
    intc_3 // 16
    *
    dig 2
    swap
    intc_3 // 16
    extract3
    extract 0 16
    dup
    uncover 4
    ==
    assert
    swap
    itob
    extract 6 2
    uncover 2
    concat
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: Index access is out of bounds
    uncover 2
    ==
    assert
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_array_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    bytec_1 // "count"
    intc_0 // 0
    app_global_put
    callsub xtra
    callsub xtra
    callsub xtra
    uncover 14
    itob
    pushbytes 0x00000000000000000000000000000000
    swap
    concat
    uncover 14
    itob
    concat
    uncover 13
    concat
    uncover 12
    concat
    dig 11
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    pushint 64 // 64
    bzero
    uncover 12
    dig 1
    b|
    uncover 2
    swap
    concat
    uncover 14
    itob
    uncover 15
    swap
    concat
    uncover 12
    itob
    concat
    uncover 11
    itob
    concat
    uncover 10
    concat
    uncover 9
    concat
    dig 8
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    uncover 8
    dig 3
    b|
    concat
    concat
    uncover 7
    itob
    uncover 8
    swap
    concat
    uncover 7
    itob
    concat
    uncover 6
    itob
    concat
    uncover 5
    concat
    uncover 4
    concat
    dig 3
    len
    pushint 64 // 64
    <=
    assert // value is bigger than 64 bytes
    uncover 3
    uncover 3
    b|
    concat
    concat
    bury 19
    intc_0 // 0
    bury 9

main_for_header@6:
    dig 8
    pushint 3 // 3
    <
    bz main_after_for@8
    dig 18
    dig 9
    dup
    cover 2
    intc 4 // 144
    *
    intc 4 // 144
    extract3
    dup
    pushint 24 // 24
    extract_uint64
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    ==
    assert
    swap
    extract 64 16
    dup
    extract 0 8 // on error: Index access is out of bounds
    uncover 3
    pushint 2 // 2
    +
    itob
    b==
    assert
    extract 8 8 // on error: Index access is out of bounds
    dig 1
    dig 2
    *
    itob
    b==
    assert
    bury 9
    b main_for_header@6

main_after_for@8:
    dig 18
    dup
    len
    intc 4 // 144
    /
    dup
    bury 8
    itob
    extract 6 2
    dig 1
    concat
    pushbytes "a"
    box_del
    pop
    pushbytes "a"
    swap
    box_put
    extract 0 144
    dup
    bury 22
    dup
    extract 0 8
    bury 21
    intc_2 // 8
    extract_uint64
    bury 7
    intc_0 // 0
    bury 5
    intc_1 // 1
    bury 3

main_for_header@39:
    dig 2
    dig 6
    <
    bz main_after_for@47
    dig 18
    dig 3
    intc 4 // 144
    *
    intc 4 // 144
    extract3
    dupn 2
    extract 0 8
    swap
    intc_2 // 8
    extract_uint64
    bury 6
    dig 21
    b<
    bz main_else_body@42
    dig 21
    intc_0 // 0
    extract_uint64
    swap
    intc_0 // 0
    extract_uint64
    -
    bury 10

main_after_if_else@43:
    dig 3
    dig 7
    <
    bz main_else_body@45
    dig 6
    dig 4
    -

main_after_if_else@46:
    dig 10
    dup
    *
    swap
    dup
    *
    +
    sqrt
    dig 5
    +
    bury 5
    dig 2
    intc_1 // 1
    +
    bury 3
    b main_for_header@39

main_else_body@45:
    dig 3
    dig 7
    -
    b main_after_if_else@46

main_else_body@42:
    intc_0 // 0
    extract_uint64
    dig 21
    intc_0 // 0
    extract_uint64
    -
    bury 10
    b main_after_if_else@43

main_after_for@47:
    dig 4
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@34:
    txn OnCompletion
    bnz main_after_if_else@36
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_2 // ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    intc_3 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.xtra() -> uint64, uint64, bytes, bytes, bytes:
xtra:
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_1 // "count"
    dig 1
    app_global_put
    txn NumAppArgs
    txn Sender
    callsub more
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    itob
    uncover 3
    cover 4
    retsub


// test_cases.array.static_size.StaticSizeContract.more() -> bytes:
more:
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    dup
    intc_1 // 1
    +
    itob
    dig 1
    uncover 2
    *
    itob
    concat
    retsub
