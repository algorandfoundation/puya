#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 2 6 8
    intc_0 // 0
    dup
    pushbytes ""
    dup
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0x06598bc6 // method "test_implicit_conversion_abi_call(uint64[],uint64)void"
    txna ApplicationArgs 0
    match main_test_implicit_conversion_abi_call_route@3
    err

main_test_implicit_conversion_abi_call_route@3:
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_3 // 8
    *
    intc_1 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<uint64>
    txna ApplicationArgs 2
    dup
    len
    intc_3 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    dup
    bury 4
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x75b694f3 // method "dont_call(uint64[])uint64"
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    pushbytes 0x0002
    swap
    concat
    bury 3
    pushbytes 0x
    bury 4
    intc_0 // 0
    bury 1

main_for_header@7:
    dup
    intc_0 // 0
    <
    bz main_after_for@9
    pushbytes 0x
    dig 1
    dup
    cover 2
    extract_uint16
    intc_1 // 2
    +
    itob
    extract 6 2
    dig 5
    swap
    concat
    bury 5
    intc_1 // 2
    +
    bury 1
    b main_for_header@7

main_after_for@9:
    intc_0 // 0
    bury 1

main_for_header@10:
    dup
    intc_1 // 2
    <
    bz main_after_for@12
    dig 2
    dig 1
    dup
    cover 2
    extract_uint16
    itob
    extract 6 2
    dig 5
    swap
    concat
    bury 5
    intc_1 // 2
    +
    bury 1
    b main_for_header@10

main_after_for@12:
    pushbytes 0x0001
    dig 4
    concat
    dig 3
    extract 2 0
    concat
    itxn_begin
    dig 2
    dup
    cover 2
    itxn_field ApplicationID
    pushbytes 0xe92b1d53 // method "dont_call(uint64[][])uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x165312d8 // method "dont_call((uint64[],uint64)[])uint64"
    itxn_field ApplicationArgs
    pushbytes 0x0000
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    pushint 1 // 1
    return

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    pushint 1 // 1
    return
