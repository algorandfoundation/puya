main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@34
    block@4: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@5, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@9, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@10, method "test_bool_array(uint64)uint64" => block@11, method "test_arc4_conversion(uint64)uint64[]" => block@20, method "sum_array(uint64[])uint64" => block@29, method "test_arc4_bool()bool[]" => block@33, * => block@36}
    block@5: // test_array_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let x1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let y1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let x2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let y2#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        (app_global_put "count" 0u)
        let (tmp%0#2: uint64, tmp%1#4: uint64, tmp%2#0: bytes, tmp%3#1: bytes[32], tmp%4#5: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#0: uint64, tmp%6#1: uint64, tmp%7#2: bytes[32], tmp%8#2: Encoded((uint64,uint64)), tmp%9#2: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#2: uint64, tmp%12#2: bytes[32], tmp%13#2: Encoded((uint64,uint64)), tmp%14#2: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let val_as_bytes%1#0: bytes[8] = (itob tmp%0#2)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%1#4)
        let encoded%3#3: Encoded((uint64,uint64)) = (concat val_as_bytes%1#0 val_as_bytes%2#0)
        let length%0#0: uint64 = (len tmp%2#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let encoded%4#3: Encoded((uint64,uint64,uint8[32])) = (concat encoded%3#3 tmp%2#0)
        let encoded%5#2: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%4#3 tmp%3#1)
        let value_len%0#0: uint64 = (len tmp%4#5)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| tmp%4#5 bzero%0#0)
        let encoded%6#1: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%5#2 arc4_encoded%0#0)
        let encoded%8#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat 0x00000000000000000000000000000000 encoded%6#1)
        let val_as_bytes%3#0: bytes[8] = (itob y1#0)
        let encoded%12#0: Encoded((uint64,uint64)) = (concat x1#0 val_as_bytes%3#0)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%5#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%6#1)
        let encoded%14#0: Encoded((uint64,uint64)) = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let length%1#0: uint64 = (len tmp%7#2)
        let lengths_equal%1#0: bool = (== length%1#0 32u)
        (assert lengths_equal%1#0) // invalid size
        let encoded%15#0: Encoded((uint64,uint64,uint8[32])) = (concat encoded%14#0 tmp%7#2)
        let encoded%16#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%15#0 tmp%8#2)
        let value_len%1#0: uint64 = (len tmp%9#2)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let arc4_encoded%1#0: bytes[64] = (b| tmp%9#2 bzero%0#0)
        let encoded%17#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%16#0 arc4_encoded%1#0)
        let encoded%19#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat encoded%12#0 encoded%17#0)
        let encoded%21#0: Encoded(((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)))) = (concat encoded%8#1 encoded%19#0)
        let val_as_bytes%6#0: bytes[8] = (itob y2#0)
        let encoded%23#0: Encoded((uint64,uint64)) = (concat x2#0 val_as_bytes%6#0)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%10#0)
        let val_as_bytes%8#0: bytes[8] = (itob tmp%11#2)
        let encoded%25#0: Encoded((uint64,uint64)) = (concat val_as_bytes%7#0 val_as_bytes%8#0)
        let length%2#0: uint64 = (len tmp%12#2)
        let lengths_equal%2#0: bool = (== length%2#0 32u)
        (assert lengths_equal%2#0) // invalid size
        let encoded%26#0: Encoded((uint64,uint64,uint8[32])) = (concat encoded%25#0 tmp%12#2)
        let encoded%27#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%26#0 tmp%13#2)
        let value_len%2#0: uint64 = (len tmp%14#2)
        let len_ok%2#0: bool = (<= value_len%2#0 64u)
        (assert len_ok%2#0) // overflow
        let arc4_encoded%2#0: bytes[64] = (b| tmp%14#2 bzero%0#0)
        let encoded%28#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%27#0 arc4_encoded%2#0)
        let encoded%30#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat encoded%23#0 encoded%28#0)
        let encoded%32#0: Encoded(((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)))) = (concat encoded%21#0 encoded%30#0)
        write(local.0, encoded%32#0)
        let i#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L49
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@7 : block@8
    block@7: // for_body_L50
        let slot_contents%0#6: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = read(local.0)
        let bytes_offset%0#0: uint64 = (* i#0 144u)
        let encoded_element%0#2: bytes = (extract3 slot_contents%0#6 bytes_offset%0#0 144u) // on error: index access is out of bounds
        let array%encoded_item2%0#1: bytes = ((extract 16 128) encoded_element%0#2) // on error: Index access is out of bounds
        let array%item1%1#1: uint64 = (extract_uint64 array%encoded_item2%0#1 8u)
        let i#8: uint64 = (+ i#0 1u)
        let tmp%23#0: bool = (== array%item1%1#1 i#8)
        (assert tmp%23#0)
        let array%item3%1#1: bytes = ((extract 48 16) array%encoded_item2%0#1) // on error: Index access is out of bounds
        let reinterpret_biguint%0#1: biguint = ((extract 0 8) array%item3%1#1) // on error: Index access is out of bounds
        let tmp%31#1: uint64 = (+ i#0 2u)
        let tmp%32#1: biguint = (itob tmp%31#1)
        let tmp%33#1: bool = (b== reinterpret_biguint%0#1 tmp%32#1)
        (assert tmp%33#1)
        let reinterpret_biguint%1#0: biguint = ((extract 8 8) array%item3%1#1) // on error: Index access is out of bounds
        let tmp%43#1: uint64 = (* i#8 i#8)
        let tmp%44#1: biguint = (itob tmp%43#1)
        let tmp%45#1: bool = (b== reinterpret_biguint%1#0 tmp%44#1)
        (assert tmp%45#1)
        let i#0: uint64 = i#8
        goto block@6
    block@8: // after_for_L49
        let slot_contents%3#0: Encoded(bool8[]) = read(local.0)
        let byte_len%0#0: uint64 = (len slot_contents%3#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 144u)
        let as_bytes%1#1: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#1)
        let concat_result%0#2: bytes = (concat len_16_bit%0#0 slot_contents%3#0)
        (box_del "a")
        (box_put "a" concat_result%0#2)
        let encoded_element%0#2: bytes = ((extract 0 144) slot_contents%3#0) // on error: index access is out of bounds
        let last_point.x#0: Encoded(uint64) = ((extract 0 8) encoded_element%0#2) // on error: Index access is out of bounds
        let last_point.y#0: uint64 = (extract_uint64 encoded_element%0#2 8u)
        let length#0: uint64 = 0u
        let point_idx#0: uint64 = 1u
        goto block@39
    block@39: // for_header_L152
        let continue_looping%0#0: bool = (< point_idx#0 len_%0#0)
        goto continue_looping%0#0 ? block@40 : block@47
    block@40: // for_body_L153
        let slot_contents%2#1: Encoded(uint64[]) = read(local.0)
        let bytes_offset%1#0: uint64 = (* point_idx#0 144u)
        let encoded_element%1#0: bytes = (extract3 slot_contents%2#1 bytes_offset%1#0 144u) // on error: index access is out of bounds
        let point.x#0: Encoded(uint64) = ((extract 0 8) encoded_element%1#0) // on error: Index access is out of bounds
        let point.y#0: uint64 = (extract_uint64 encoded_element%1#0 8u)
        let tmp%1#6: bool = (b< point.x#0 last_point.x#0)
        goto tmp%1#6 ? block@41 : block@42
    block@41: // if_body_L155
        let tmp%2#2: uint64 = (extract_uint64 encoded_element%0#2 0u)
        let tmp%3#0: uint64 = (extract_uint64 encoded_element%1#0 0u)
        let dx#0: uint64 = (- tmp%2#2 tmp%3#0)
        goto block@43
    block@42: // else_body_L157
        let tmp%4#4: uint64 = (extract_uint64 encoded_element%1#0 0u)
        let tmp%5#0: uint64 = (extract_uint64 encoded_element%0#2 0u)
        let dx#0: uint64 = (- tmp%4#4 tmp%5#0)
        goto block@43
    block@43: // after_if_else_L154
        let tmp%6#2: bool = (< point.y#0 last_point.y#0)
        goto tmp%6#2 ? block@44 : block@45
    block@44: // if_body_L159
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@46
    block@45: // else_body_L161
        let dy#0: uint64 = (- point.y#0 last_point.y#0)
        goto block@46
    block@46: // after_if_else_L158
        let tmp%7#3: uint64 = (* dx#0 dx#0)
        let tmp%8#3: uint64 = (* dy#0 dy#0)
        let tmp%9#3: uint64 = (+ tmp%7#3 tmp%8#3)
        let tmp%10#0: uint64 = (sqrt tmp%9#3)
        let length#0: uint64 = (+ length#0 tmp%10#0)
        let point_idx#0: uint64 = (+ point_idx#0 1u)
        goto block@39
    block@47: // after_for_L152
        let val_as_bytes%0#0: bytes[8] = (itob length#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%9#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@9: // test_extend_from_tuple_route_L57
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0: Encoded(((uint64,uint64),(uint64,uint64))) = (txna ApplicationArgs 1)
        let some_more.0#0: Encoded((uint64,uint64)) = ((extract 0 16) reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0) // on error: Index access is out of bounds
        let some_more.1#0: Encoded((uint64,uint64)) = ((extract 16 16) reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0) // on error: Index access is out of bounds
        let encoded%2#4: Encoded(((uint64,uint64),(uint64,uint64))) = (concat some_more.0#0 some_more.1#0)
        write(local.1, encoded%2#4)
        let array%bytes_len%1#1: uint64 = (len encoded%2#4)
        let array%array_len%1#1: uint64 = (/ array%bytes_len%1#1 16u)
        let tmp%1#4: uint64 = (- array%array_len%1#1 1u)
        let bytes_offset%0#0: uint64 = (* tmp%1#4 16u)
        let last#0: Encoded((uint64,uint64)) = (extract3 encoded%2#4 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%2#4: bool = (== last#0 some_more.1#0)
        (assert tmp%2#4)
        let as_bytes%1#1: bytes[8] = (itob array%array_len%1#1)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#1)
        let result#0: Encoded(len+(uint64,uint64)[]) = (concat len_16_bit%0#0 encoded%2#4)
        let array%array_length%0#1: uint64 = (extract_uint16 result#0 0u)
        let tmp%4#4: uint64 = (- array%array_length%0#1 1u)
        let array_trimmed%0#0: bytes = ((extract 2 0) result#0)
        let bytes_offset%1#0: uint64 = (* tmp%4#4 16u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%5#1: bool = (== encoded_element%1#0 last#0)
        (assert tmp%5#1)
        let tmp%15#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%15#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@10: // test_extend_from_arc4_tuple_route_L67
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let some_more#0: Encoded(((uint64,uint64),(uint64,uint64))) = (txna ApplicationArgs 1)
        write(local.2, some_more#0)
        let byte_len%0#0: uint64 = (len some_more#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%1#1: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#1)
        let concat_result%0#2: bytes = (concat len_16_bit%0#0 some_more#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 concat_result%0#2)
        (log tmp%21#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@11: // test_bool_array_route_L75
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        write(local.3, 0x)
        let tmp%2#2: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@12
    block@12: // for_header_L80
        let continue_looping%0#0: bool = (< i#0 tmp%2#2)
        goto continue_looping%0#0 ? block@13 : block@14
    block@13: // for_body_L81
        let tmp%3#0: uint64 = (% i#0 2u)
        let tmp%4#0: bool = (! tmp%3#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let slot_contents%1#2: Encoded(uint64[]) = read(local.3)
        let array%array_contents%2#1: bytes = (concat slot_contents%1#2 encoded_bool%0#0) // on error: max array length exceeded
        write(local.3, array%array_contents%2#1)
        let i#0: uint64 = (+ i#0 1u)
        goto block@12
    block@14: // after_for_L80
        let slot_contents%2#1: Encoded(uint64[]) = read(local.3)
        let array%bytes_len%3#1: uint64 = (len slot_contents%2#1)
        let tmp%6#2: bool = (== array%bytes_len%3#1 length#0)
        (assert tmp%6#2) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@15
    block@15: // for_header_L84
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array%bytes_len%3#1)
        goto continue_looping%1#0 ? block@16 : block@19
    block@16: // for_body_L85
        let slot_contents%4#0: Encoded(uint64[]) = read(local.3)
        let encoded_element%0#2: bytes = (extract3 slot_contents%4#0 item_index_internal%0#0 1u) // on error: index access is out of bounds
        let val#1: bool = (getbit encoded_element%0#2 0u)
        let count#13: uint64 = count#0
        goto val#1 ? block@17 : block@18
    block@17: // if_body_L86
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@18
    block@18: // after_if_else_L85
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@15
    block@19: // after_for_L84
        let val_as_bytes%1#0: bytes[8] = (itob count#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%27#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@20: // test_arc4_conversion_route_L89
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        write(local.4, 0x)
        let tmp%2#2: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@21
    block@21: // for_header_L94
        let continue_looping%0#0: bool = (< i#0 tmp%2#2)
        goto continue_looping%0#0 ? block@22 : block@23
    block@22: // for_body_L95
        let val_as_bytes%0#0: bytes[8] = (itob i#0)
        let slot_contents%1#2: Encoded(uint64[]) = read(local.4)
        let array%array_contents%3#1: bytes = (concat slot_contents%1#2 val_as_bytes%0#0) // on error: max array length exceeded
        write(local.4, array%array_contents%3#1)
        let i#0: uint64 = (+ i#0 1u)
        goto block@21
    block@23: // after_for_L94
        let slot_contents%2#1: Encoded(uint64[]) = read(local.4)
        let array%bytes_len%6#1: uint64 = (len slot_contents%2#1)
        let array%array_len%6#1: uint64 = (/ array%bytes_len%6#1 8u)
        let tmp%4#0: bool = (== array%array_len%6#1 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@24
    block@24: // for_header_L98
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array%array_len%6#1)
        goto continue_looping%1#0 ? block@25 : block@28
    block@25: // for_body_L99
        let slot_contents%4#0: Encoded(uint64[]) = read(local.4)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let val#0: Encoded(uint64) = (extract3 slot_contents%4#0 bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%5#1: bool = (b!= val#0 0b)
        let count#13: uint64 = count#0
        goto tmp%5#1 ? block@26 : block@27
    block@26: // if_body_L100
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@27
    block@27: // after_if_else_L99
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@24
    block@28: // after_for_L98
        let slot_contents%5#0: Encoded(uint64[]) = read(local.4)
        let byte_len%0#0: uint64 = (len slot_contents%5#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%1#1: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%1#1)
        let arc4_arr#0: Encoded(len+uint64[]) = (concat len_16_bit%0#0 slot_contents%5#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 arc4_arr#0)
        (log tmp%34#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@29: // sum_array_route_L107
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let arc4_arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let array_trimmed%0#0: bytes = ((extract 2 0) arc4_arr#0)
        write(local.5, array_trimmed%0#0)
        let total#0: uint64 = 0u
        let array%bytes_len%8#1: uint64 = (len array_trimmed%0#0)
        let array%array_len%8#1: uint64 = (/ array%bytes_len%8#1 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@30
    block@30: // for_header_L113
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array%array_len%8#1)
        goto continue_looping%0#0 ? block@31 : block@32
    block@31: // for_body_L114
        let slot_contents%2#1: Encoded(uint64[]) = read(local.5)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let tmp%0#2: uint64 = (extract_uint64 slot_contents%2#1 bytes_offset%0#0)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@30
    block@32: // after_for_L113
        let val_as_bytes%2#0: bytes[8] = (itob total#0)
        let tmp%39#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%39#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@33: // test_arc4_bool_route_L133
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let tmp%0#3: bytes[32] = (txn Sender)
        let tmp%1#1: bytes[32] = (txn Receiver)
        let to_encode%0#1: bool = (== tmp%0#3 tmp%1#1)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#1)
        let tmp%2#0: bytes = (txn Sender)
        let tmp%3#1: bytes[32] = (txn Receiver)
        let to_encode%1#1: bool = (!= tmp%2#0 tmp%3#1)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u to_encode%1#1)
        let array%array_contents%6#1: bytes = (concat encoded_bool%0#0 encoded_bool%1#0) // on error: max array length exceeded
        write(local.6, array%array_contents%6#1)
        let array%bytes_len%9#1: uint64 = (len array%array_contents%6#1)
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, array%array_contents%6#1, array%bytes_len%9#1, 8u)
        let array%array_length%1#1: uint64 = (extract_uint16 dyn_arr#1 0u)
        let tmp%5#1: bool = (== array%array_length%1#1 2u)
        (assert tmp%5#1) // expected correct length
        let tmp%6#1: uint64 = (len dyn_arr#1)
        let tmp%7#1: bool = (== tmp%6#1 3u)
        (assert tmp%7#1) // expected 3 bytes
        (assert array%array_length%1#1) // index access is out of bounds
        let array_trimmed%0#0: bytes = ((extract 2 0) dyn_arr#1)
        let is_true%0#0: bool = (getbit array_trimmed%0#0 0u)
        let array%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%9#1: bool = (getbit array%encoded_bool%0#1 0u)
        let tmp%10#1: bytes[32] = (txn Sender)
        let tmp%11#1: bytes[32] = (txn Receiver)
        let tmp%12#1: bool = (== tmp%10#1 tmp%11#1)
        let tmp%13#1: bool = (== tmp%9#1 tmp%12#1)
        (assert tmp%13#1) // expected correct value at 0
        let lt%1#0: bool = (< 1u array%array_length%1#1)
        (assert lt%1#0) // index access is out of bounds
        let is_true%1#0: bool = (getbit array_trimmed%0#0 1u)
        let array%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tmp%15#1: bool = (getbit array%encoded_bool%1#1 0u)
        let tmp%16#1: bytes[32] = (txn Sender)
        let tmp%17#1: bytes[32] = (txn Receiver)
        let tmp%18#1: bool = (!= tmp%16#1 tmp%17#1)
        let tmp%19#1: bool = (== tmp%15#1 tmp%18#1)
        (assert tmp%19#1) // expected correct value at 1
        let slot_contents%3#0: Encoded(bool8[]) = read(local.6)
        let array%bytes_len%10#1: uint64 = (len slot_contents%3#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%3#0, array%bytes_len%10#1, 8u)
        let tmp%45#0: bytes = (concat 0x151f7c75 concat_result%1#0)
        (log tmp%45#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@34: // bare_routing_L37
        let tmp%46#0: uint64 = (txn OnCompletion)
        goto tmp%46#0 ? block@36 : block@35
    block@35: // __algopy_default_create_L1
        let tmp%47#0: uint64 = (txn ApplicationID)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // can only call when creating
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@36: // after_if_else_L37
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@37
    block@37: // after_inlined_test_cases.array.static_size.StaticSizeContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#0: bytes = (concat result#0 tmp%5#0)
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%6#0: bool = (< write_offset#0 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%7#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, bytes[32], Encoded((uint64,uint64)), biguint>:
    block@0: // L118
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let materialized_values%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" materialized_values%0#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bytes[32] = (txn Sender)
        let tmp%2#0: Encoded((uint64,uint64)) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%3#0: biguint = (itob maybe_value%2#0)
        return tmp%0#0 materialized_values%0#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded((uint64,uint64)):
    block@0: // L129
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let to_encode%0#0: uint64 = (+ maybe_value%0#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let to_encode%1#0: uint64 = (* maybe_value%0#0 maybe_value%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        return encoded%1#0