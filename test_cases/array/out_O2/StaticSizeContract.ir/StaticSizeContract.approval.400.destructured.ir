main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@15
    block@4: // abi_routing_L37
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@6, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@7, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@8, method "test_bool_array(uint64)uint64" => block@9, method "test_arc4_conversion(uint64)uint64[]" => block@10, method "sum_array(uint64[])uint64" => block@11, method "test_arc4_bool()bool[]" => block@12, * => block@13}
    block@6: // test_array_route_L41
        let x1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let y1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let x2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let y2#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        (app_global_put "count" 0u)
        let (tmp%0#2: uint64, tmp%1#12: uint64, tmp%2#10: account, tmp%3#1: bytes, tmp%4#6: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#4: uint64, tmp%6#4: uint64, tmp%7#5: account, tmp%8#2: Encoded(uint64,uint64), tmp%9#3: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#2: uint64, tmp%12#1: account, tmp%13#1: Encoded(uint64,uint64), tmp%14#1: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#2)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#12)
        let aggregate%head%3#0: bytes = (concat aggregate%val_as_bytes%1#0 aggregate%val_as_bytes%2#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 tmp%2#10)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%3#1)
        let aggregate%value_len%0#0: uint64 = (len tmp%4#6)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%4#6 aggregate%bzero%0#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%arc4_encoded%0#0)
        let aggregate%head%7#0: bytes = (concat 0x00000000000000000000000000000000 aggregate%head%6#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob y1#0)
        let aggregate%head%10#0: bytes = (concat x1#0 aggregate%val_as_bytes%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%5#4)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%6#4)
        let aggregate%head%12#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 tmp%7#5)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 tmp%8#2)
        let aggregate%value_len%1#0: uint64 = (len tmp%9#3)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%9#3 aggregate%bzero%0#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%arc4_encoded%1#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%10#0 aggregate%head%15#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%7#0 aggregate%head%16#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob y2#0)
        let aggregate%head%19#0: bytes = (concat x2#0 aggregate%val_as_bytes%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%11#2)
        let aggregate%head%21#0: bytes = (concat aggregate%val_as_bytes%7#0 aggregate%val_as_bytes%8#0)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 tmp%12#1)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 tmp%13#1)
        let aggregate%value_len%2#0: uint64 = (len tmp%14#1)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| tmp%14#1 aggregate%bzero%0#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%arc4_encoded%2#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%19#0 aggregate%head%24#0)
        let aggregate%head%26#0: bytes = (concat aggregate%head%17#0 aggregate%head%25#0)
        store(local.0, aggregate%head%26#0)
        let i#0: uint64 = 0u
        goto block@51
    block@51: // for_header_L49
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@52 : block@53
    block@52: // for_body_L50
        let slot_contents%0#2: bytes = load(local.0)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 144u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%0#2 aggregate%bytes_offset%0#0 144u) // on error: index access is out of bounds
        let aggregate%extract%2#0: bytes = ((extract 16 128) aggregate%encoded_element%0#0)
        let aggregate%item1%1#0: uint64 = (extract_uint64 aggregate%extract%2#0 8u)
        let i#8: uint64 = (+ i#0 1u)
        let tmp%16#1: bool = (== aggregate%item1%1#0 i#8)
        (assert tmp%16#1)
        let aggregate%extract%14#0: bytes = ((extract 48 16) aggregate%extract%2#0)
        let aggregate%extract%16#0: bytes = ((extract 0 8) aggregate%extract%14#0)
        let tmp%17#1: uint64 = (+ i#0 2u)
        let tmp%18#1: biguint = (itob tmp%17#1)
        let tmp%19#0: bool = (b== aggregate%extract%16#0 tmp%18#1)
        (assert tmp%19#0)
        let aggregate%extract%25#0: bytes = ((extract 8 8) aggregate%extract%14#0)
        let tmp%22#1: uint64 = (* i#8 i#8)
        let tmp%23#1: biguint = (itob tmp%22#1)
        let tmp%24#0: bool = (b== aggregate%extract%25#0 tmp%23#1)
        (assert tmp%24#0)
        let i#0: uint64 = i#8
        goto block@51
    block@53: // after_for_L49
        let slot_contents%3#0: bytes = load(local.0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 144u)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: bytes = (concat as_u16_bytes%0#0 slot_contents%3#0)
        (box_del "a")
        (box_put "a" converted_array%0#0)
        let aggregate%encoded_element%3#0: bytes = ((extract 0 144) slot_contents%3#0) // on error: index access is out of bounds
        let last_point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%3#0)
        let last_point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%3#0 8u)
        let length#0: uint64 = 0u
        let point_idx#0: uint64 = 1u
        goto block@54
    block@54: // for_header_L169
        let continue_looping%0#0: bool = (< point_idx#0 aggregate%array_len%0#0)
        goto continue_looping%0#0 ? block@55 : block@62
    block@55: // for_body_L170
        let slot_contents%1#1: bytes = load(local.0)
        let aggregate%bytes_offset%4#0: uint64 = (* point_idx#0 144u)
        let aggregate%encoded_element%4#0: bytes = (extract3 slot_contents%1#1 aggregate%bytes_offset%4#0 144u) // on error: index access is out of bounds
        let point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%4#0)
        let point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%4#0 8u)
        let tmp%1#13: bool = (b< point.x#0 last_point.x#0)
        goto tmp%1#13 ? block@56 : block@57
    block@56: // if_body_L172
        let tmp%2#7: uint64 = (extract_uint64 aggregate%encoded_element%3#0 0u)
        let tmp%3#0: uint64 = (extract_uint64 aggregate%encoded_element%4#0 0u)
        let dx#0: uint64 = (- tmp%2#7 tmp%3#0)
        goto block@58
    block@57: // else_body_L174
        let tmp%5#4: uint64 = (extract_uint64 aggregate%encoded_element%4#0 0u)
        let tmp%6#4: uint64 = (extract_uint64 aggregate%encoded_element%3#0 0u)
        let dx#0: uint64 = (- tmp%5#4 tmp%6#4)
        goto block@58
    block@58: // after_if_else_L171
        let tmp%8#3: bool = (< point.y#0 last_point.y#0)
        goto tmp%8#3 ? block@59 : block@60
    block@59: // if_body_L176
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@61
    block@60: // else_body_L178
        let dy#0: uint64 = (- point.y#0 last_point.y#0)
        goto block@61
    block@61: // after_if_else_L175
        let tmp%11#2: uint64 = (* dx#0 dx#0)
        let tmp%12#2: uint64 = (* dy#0 dy#0)
        let tmp%13#0: uint64 = (+ tmp%11#2 tmp%12#2)
        let tmp%14#2: uint64 = (sqrt tmp%13#0)
        let length#0: uint64 = (+ length#0 tmp%14#2)
        let point_idx#0: uint64 = (+ point_idx#0 1u)
        goto block@54
    block@62: // after_for_L169
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob length#0)
        let tmp%4#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#0)
        (log tmp%4#1)
        exit lifted%return#0
    block@7: // test_extend_from_tuple_route_L57
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#1: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let some_more.0#0: Encoded(uint64,uint64) = ((extract 0 16) reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#1)
        let some_more.1#0: Encoded(uint64,uint64) = ((extract 16 16) reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#1)
        let aggregate%head%28#0: bytes = (concat some_more.0#0 some_more.1#0)
        store(local.1, aggregate%head%28#0)
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%head%28#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 16u)
        let tmp%2#7: uint64 = (- aggregate%array_len%2#0 1u)
        let aggregate%bytes_offset%5#0: uint64 = (* tmp%2#7 16u)
        let last#0: Encoded(uint64,uint64) = (extract3 aggregate%head%28#0 aggregate%bytes_offset%5#0 16u) // on error: index access is out of bounds
        let tmp%3#7: bool = (== last#0 some_more.1#0)
        (assert tmp%3#7)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%2#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 aggregate%head%28#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%6#4: uint64 = (- aggregate%array_length%0#0 1u)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) result#0)
        let aggregate%bytes_offset%6#0: uint64 = (* tmp%6#4 16u)
        let aggregate%encoded_element%6#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%6#0 16u) // on error: index access is out of bounds
        let tmp%7#1: bool = (== aggregate%encoded_element%6#0 last#0)
        (assert tmp%7#1)
        let tmp%3#1: bytes = (concat 0x151f7c75 result#0)
        (log tmp%3#1)
        exit lifted%return#0
    block@8: // test_extend_from_arc4_tuple_route_L67
        let some_more#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        store(local.2, some_more#0)
        let aggregate%bytes_len%4#0: uint64 = (len some_more#0)
        let aggregate%array_len%4#0: uint64 = (/ aggregate%bytes_len%4#0 16u)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%4#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: bytes = (concat as_u16_bytes%0#0 some_more#0)
        let tmp%1#1: bytes = (concat 0x151f7c75 converted_array%0#0)
        (log tmp%1#1)
        exit lifted%return#0
    block@9: // test_bool_array_route_L75
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        store(local.3, 0x)
        let tmp%2#7: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@37
    block@37: // for_header_L80
        let continue_looping%0#0: bool = (< i#0 tmp%2#7)
        goto continue_looping%0#0 ? block@38 : block@39
    block@38: // for_body_L81
        let tmp%3#0: uint64 = (% i#0 2u)
        let tmp%4#0: bool = (! tmp%3#0)
        let slot_contents%0#2: bytes = load(local.3)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let concat%0#2: bytes = (concat slot_contents%0#2 aggregate%encoded_bool%0#0) // on error: max array length exceeded
        store(local.3, concat%0#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@37
    block@39: // after_for_L80
        let aggregate%slot_contents%3#0: Encoded(bool8[]) = load(local.3)
        let aggregate%bytes_len%6#0: uint64 = (len aggregate%slot_contents%3#0)
        let tmp%7#1: bool = (== aggregate%bytes_len%6#0 length#0)
        (assert tmp%7#1) // expected correct length
        store(local.4, aggregate%slot_contents%3#0)
        let slot_contents%2#1: bytes = load(local.3)
        let concat%1#0: bytes = (concat aggregate%slot_contents%3#0 slot_contents%2#1) // on error: max array length exceeded
        store(local.4, concat%1#0)
        let aggregate%bytes_len%7#0: uint64 = (len concat%1#0)
        let tmp%9#0: uint64 = (* length#0 2u)
        let tmp%10#2: bool = (== aggregate%bytes_len%7#0 tmp%9#0)
        (assert tmp%10#2) // expected correct length
        let count#0: uint64 = 0u
        let aggregate%slot_contents%5#0: Encoded(bool8[]) = load(local.3)
        let aggregate%bytes_len%8#0: uint64 = (len aggregate%slot_contents%5#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@40
    block@40: // for_header_L89
        let continue_looping%1#0: bool = (< item_index_internal%0#0 aggregate%bytes_len%8#0)
        goto continue_looping%1#0 ? block@41 : block@44
    block@41: // for_body_L90
        let slot_contents%4#0: Encoded(bool8[]) = load(local.3)
        let aggregate%encoded_element%7#0: bytes = (extract3 slot_contents%4#0 item_index_internal%0#0 1u) // on error: index access is out of bounds
        let val#1: bool = (getbit aggregate%encoded_element%7#0 0u)
        let count#13: uint64 = count#0
        goto val#1 ? block@42 : block@43
    block@42: // if_body_L91
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@43
    block@43: // after_if_else_L90
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@40
    block@44: // after_for_L89
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob count#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#0)
        (log tmp%3#1)
        exit lifted%return#0
    block@10: // test_arc4_conversion_route_L94
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        store(local.5, 0x)
        let tmp%2#7: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@27
    block@27: // for_header_L99
        let continue_looping%0#0: bool = (< i#0 tmp%2#7)
        goto continue_looping%0#0 ? block@28 : block@29
    block@28: // for_body_L100
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob i#0)
        let slot_contents%0#2: bytes = load(local.5)
        let concat%0#2: bytes = (concat slot_contents%0#2 aggregate%val_as_bytes%11#0) // on error: max array length exceeded
        store(local.5, concat%0#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@27
    block@29: // after_for_L99
        let aggregate%slot_contents%7#0: Encoded(uint64[]) = load(local.5)
        let aggregate%bytes_len%10#0: uint64 = (len aggregate%slot_contents%7#0)
        let aggregate%array_len%10#0: uint64 = (/ aggregate%bytes_len%10#0 8u)
        let tmp%6#0: bool = (== aggregate%array_len%10#0 length#0)
        (assert tmp%6#0) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@30
    block@30: // for_header_L103
        let continue_looping%1#0: bool = (< item_index_internal%0#0 aggregate%array_len%10#0)
        goto continue_looping%1#0 ? block@31 : block@34
    block@31: // for_body_L104
        let slot_contents%1#1: bytes = load(local.5)
        let aggregate%bytes_offset%8#0: uint64 = (* item_index_internal%0#0 8u)
        let val#0: Encoded(uint64) = (extract3 slot_contents%1#1 aggregate%bytes_offset%8#0 8u) // on error: index access is out of bounds
        let tmp%7#1: bool = (b!= val#0 0b)
        let count#13: uint64 = count#0
        goto tmp%7#1 ? block@32 : block@33
    block@32: // if_body_L105
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@33
    block@33: // after_if_else_L104
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@30
    block@34: // after_for_L103
        let slot_contents%2#1: bytes = load(local.5)
        let concat%1#0: bytes = (concat 0x0000 slot_contents%2#1) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#0: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let tmp%2#1: bytes = (concat 0x151f7c75 arc4_arr#0)
        (log tmp%2#1)
        exit lifted%return#0
    block@11: // sum_array_route_L112
        let arc4_arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let extract_to_end%0#0: bytes = ((extract 2 0) arc4_arr#0)
        store(local.6, extract_to_end%0#0)
        let total#0: uint64 = 0u
        let aggregate%bytes_len%12#0: uint64 = (len extract_to_end%0#0)
        let aggregate%array_len%12#0: uint64 = (/ aggregate%bytes_len%12#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@22
    block@22: // for_header_L118
        let continue_looping%0#0: bool = (< item_index_internal%0#0 aggregate%array_len%12#0)
        goto continue_looping%0#0 ? block@23 : block@24
    block@23: // for_body_L119
        let slot_contents%1#1: bytes = load(local.6)
        let aggregate%bytes_offset%9#0: uint64 = (* item_index_internal%0#0 8u)
        let tmp%0#2: uint64 = (extract_uint64 slot_contents%1#1 aggregate%bytes_offset%9#0)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@22
    block@24: // after_for_L118
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob total#0)
        let tmp%2#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%12#0)
        (log tmp%2#1)
        exit lifted%return#0
    block@12: // test_arc4_bool_route_L138
        let tmp%0#10: account = (txn Sender)
        let tmp%1#8: account = (txn Receiver)
        let tmp%2#6: bool = (== tmp%0#10 tmp%1#8)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%2#6)
        let tmp%5#0: account = (txn Sender)
        let tmp%6#1: account = (txn Receiver)
        let tmp%7#1: bool = (!= tmp%5#0 tmp%6#1)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u tmp%7#1)
        let concat%1#0: bytes = (concat aggregate%encoded_bool%1#0 aggregate%encoded_bool%2#0) // on error: max array length exceeded
        store(local.7, concat%1#0)
        let aggregate%bytes_len%13#0: uint64 = (len concat%1#0)
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, concat%1#0, aggregate%bytes_len%13#0, 8u)
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let tmp%12#0: bool = (== aggregate%array_length%1#0 2u)
        (assert tmp%12#0) // expected correct length
        let tmp%13#0: uint64 = (len dyn_arr#1)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // expected 3 bytes
        (assert aggregate%array_length%1#0) // index access is out of bounds
        let aggregate%get_bit%1#0: bool = (getbit dyn_arr#1 16u)
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%1#0)
        let aggregate%get_bit%2#0: bool = (getbit aggregate%encoded_bool%3#0 0u)
        let tmp%16#0: account = (txn Sender)
        let tmp%17#0: account = (txn Receiver)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        let tmp%19#0: bool = (== aggregate%get_bit%2#0 tmp%18#0)
        (assert tmp%19#0) // expected correct value at 0
        let aggregate%lt%1#0: bool = (< 1u aggregate%array_length%1#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%get_bit%3#0: bool = (getbit dyn_arr#1 17u)
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%3#0)
        let aggregate%get_bit%4#0: bool = (getbit aggregate%encoded_bool%4#0 0u)
        let tmp%21#0: account = (txn Sender)
        let tmp%22#0: account = (txn Receiver)
        let tmp%23#0: bool = (!= tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== aggregate%get_bit%4#0 tmp%23#0)
        (assert tmp%24#0) // expected correct value at 1
        let slot_contents%3#0: bytes = load(local.7)
        store(local.8, slot_contents%3#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L154
        let continue_looping%0#0: bool = (< item_index_internal%0#0 aggregate%array_length%1#0)
        goto continue_looping%0#0 ? block@18 : block@19
    block@18: // for_body_L155
        let aggregate%add%2#0: uint64 = (+ item_index_internal%0#0 16u)
        let aggregate%get_bit%5#0: bool = (getbit dyn_arr#1 aggregate%add%2#0)
        let b#0: Encoded(bool8) = (setbit 0x00 0u aggregate%get_bit%5#0)
        let slot_contents%4#0: Encoded(bool8[]) = load(local.8)
        let concat%2#0: Encoded(bool8[]) = (concat slot_contents%4#0 b#0) // on error: max array length exceeded
        store(local.8, concat%2#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@17
    block@19: // after_for_L154
        let aggregate%slot_contents%10#0: Encoded(bool8[]) = load(local.8)
        let aggregate%bytes_len%14#0: uint64 = (len aggregate%slot_contents%10#0)
        let tmp%27#0: bool = (== aggregate%bytes_len%14#0 4u)
        (assert tmp%27#0) // expected correct length
        let aggregate%encoded_element%10#0: bytes = ((extract 0 1) aggregate%slot_contents%10#0) // on error: index access is out of bounds
        let aggregate%get_bit%6#0: bool = (getbit aggregate%encoded_element%10#0 0u)
        let tmp%29#0: account = (txn Sender)
        let tmp%30#0: account = (txn Receiver)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        let tmp%32#0: bool = (== aggregate%get_bit%6#0 tmp%31#0)
        (assert tmp%32#0) // expected correct value at 0
        let aggregate%encoded_element%11#0: bytes = ((extract 1 1) aggregate%slot_contents%10#0) // on error: index access is out of bounds
        let aggregate%get_bit%7#0: bool = (getbit aggregate%encoded_element%11#0 0u)
        let tmp%34#0: account = (txn Sender)
        let tmp%35#0: account = (txn Receiver)
        let tmp%36#0: bool = (!= tmp%34#0 tmp%35#0)
        let tmp%37#0: bool = (== aggregate%get_bit%7#0 tmp%36#0)
        (assert tmp%37#0) // expected correct value at 1
        let aggregate%encoded_element%12#0: bytes = ((extract 2 1) aggregate%slot_contents%10#0) // on error: index access is out of bounds
        let aggregate%get_bit%8#0: bool = (getbit aggregate%encoded_element%12#0 0u)
        let tmp%39#0: account = (txn Sender)
        let tmp%40#0: account = (txn Receiver)
        let tmp%41#0: bool = (== tmp%39#0 tmp%40#0)
        let tmp%42#0: bool = (== aggregate%get_bit%8#0 tmp%41#0)
        (assert tmp%42#0) // expected correct value at 2
        let aggregate%encoded_element%13#0: bytes = ((extract 3 1) aggregate%slot_contents%10#0) // on error: index access is out of bounds
        let aggregate%get_bit%9#0: bool = (getbit aggregate%encoded_element%13#0 0u)
        let tmp%44#0: account = (txn Sender)
        let tmp%45#0: account = (txn Receiver)
        let tmp%46#0: bool = (!= tmp%44#0 tmp%45#0)
        let tmp%47#0: bool = (== aggregate%get_bit%9#0 tmp%46#0)
        (assert tmp%47#0) // expected correct value at 3
        let slot_contents%9#0: Encoded(bool8[]) = load(local.7)
        let aggregate%bytes_len%15#0: uint64 = (len slot_contents%9#0)
        let bit_packed_source%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%9#0, aggregate%bytes_len%15#0, 8u)
        let tmp%1#1: bytes = (concat 0x151f7c75 bit_packed_source%0#0)
        (log tmp%1#1)
        exit lifted%return#0
    block@13: // switch_case_default_L37
        fail
    block@15: // bare_routing_L37
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#0: bytes = (concat result#0 tmp%11#0)
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: bool = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, account, Encoded(uint64,uint64), biguint>:
    block@0: // L123
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: account = (txn Sender)
        let tmp%3#0: Encoded(uint64,uint64) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%4#0: biguint = (itob maybe_value%2#0)
        return tmp%1#0 tmp%0#0 tmp%2#0 tmp%3#0 tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded(uint64,uint64):
    block@0: // L134
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let tmp%2#0: uint64 = (* maybe_value%0#0 maybe_value%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        return aggregate%head%1#0