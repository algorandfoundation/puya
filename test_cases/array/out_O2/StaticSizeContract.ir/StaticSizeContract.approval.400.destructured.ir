main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@37
    block@4: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@5, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@9, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@10, method "test_bool_array(uint64)uint64" => block@11, method "test_arc4_conversion(uint64)uint64[]" => block@20, method "sum_array(uint64[])uint64" => block@29, method "test_arc4_bool()bool[]" => block@33, * => block@39}
    block@5: // test_array_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let x1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let y1#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let x2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let y2#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        (app_global_put "count" 0u)
        let (tmp%0#2: uint64, tmp%1#3: uint64, tmp%2#5: account, tmp%3#5: Encoded(uint64,uint64), tmp%4#5: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#0: uint64, tmp%6#3: uint64, tmp%7#3: account, tmp%8#3: Encoded(uint64,uint64), tmp%9#2: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#2: uint64, tmp%11#1: uint64, tmp%12#2: account, tmp%13#2: Encoded(uint64,uint64), tmp%14#2: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%0#2)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%1#3)
        let aggregate%encoded%3#1: bytes = (concat aggregate%val_as_bytes%1#1 aggregate%val_as_bytes%2#1)
        let aggregate%encoded%4#1: bytes = (concat aggregate%encoded%3#1 tmp%2#5)
        let aggregate%encoded%5#1: bytes = (concat aggregate%encoded%4#1 tmp%3#5)
        let aggregate%value_len%0#1: uint64 = (len tmp%4#5)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| tmp%4#5 aggregate%bzero%0#1)
        let aggregate%encoded%6#1: bytes = (concat aggregate%encoded%5#1 aggregate%arc4_encoded%0#1)
        let aggregate%encoded%8#1: bytes = (concat 0x00000000000000000000000000000000 aggregate%encoded%6#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob y1#0)
        let aggregate%encoded%12#1: bytes = (concat x1#0 aggregate%val_as_bytes%3#1)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob tmp%5#0)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%6#3)
        let aggregate%encoded%14#1: bytes = (concat aggregate%val_as_bytes%4#1 aggregate%val_as_bytes%5#1)
        let aggregate%encoded%15#1: bytes = (concat aggregate%encoded%14#1 tmp%7#3)
        let aggregate%encoded%16#1: bytes = (concat aggregate%encoded%15#1 tmp%8#3)
        let aggregate%value_len%1#1: uint64 = (len tmp%9#2)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| tmp%9#2 aggregate%bzero%0#1)
        let aggregate%encoded%17#1: bytes = (concat aggregate%encoded%16#1 aggregate%arc4_encoded%1#1)
        let aggregate%encoded%19#1: bytes = (concat aggregate%encoded%12#1 aggregate%encoded%17#1)
        let aggregate%encoded%21#1: bytes = (concat aggregate%encoded%8#1 aggregate%encoded%19#1)
        let aggregate%val_as_bytes%6#1: bytes[8] = (itob y2#0)
        let aggregate%encoded%23#1: bytes = (concat x2#0 aggregate%val_as_bytes%6#1)
        let aggregate%val_as_bytes%7#1: bytes[8] = (itob tmp%10#2)
        let aggregate%val_as_bytes%8#1: bytes[8] = (itob tmp%11#1)
        let aggregate%encoded%25#1: bytes = (concat aggregate%val_as_bytes%7#1 aggregate%val_as_bytes%8#1)
        let aggregate%encoded%26#1: bytes = (concat aggregate%encoded%25#1 tmp%12#2)
        let aggregate%encoded%27#1: bytes = (concat aggregate%encoded%26#1 tmp%13#2)
        let aggregate%value_len%2#1: uint64 = (len tmp%14#2)
        let aggregate%len_ok%2#1: bool = (<= aggregate%value_len%2#1 64u)
        (assert aggregate%len_ok%2#1) // overflow
        let aggregate%arc4_encoded%2#1: bytes[64] = (b| tmp%14#2 aggregate%bzero%0#1)
        let aggregate%encoded%28#1: bytes = (concat aggregate%encoded%27#1 aggregate%arc4_encoded%2#1)
        let aggregate%encoded%30#1: bytes = (concat aggregate%encoded%23#1 aggregate%encoded%28#1)
        let aggregate%encoded%32#1: bytes = (concat aggregate%encoded%21#1 aggregate%encoded%30#1)
        store(local.0, aggregate%encoded%32#1)
        let i#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L49
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@7 : block@8
    block@7: // for_body_L50
        let slot_contents%0#6: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(local.0)
        let aggregate%bytes_offset%0#1: uint64 = (* i#0 144u)
        let aggregate%encoded_element%0#1: bytes = (extract3 slot_contents%0#6 aggregate%bytes_offset%0#1 144u) // on error: index access is out of bounds
        let aggregate%extract%2#1: bytes = ((extract 16 128) aggregate%encoded_element%0#1)
        let aggregate%item1%1#1: uint64 = (extract_uint64 aggregate%extract%2#1 8u)
        let aggregate%extract%6#1: bytes = ((extract 48 16) aggregate%extract%2#1)
        let i#8: uint64 = (+ i#0 1u)
        let tmp%16#1: bool = (== aggregate%item1%1#1 i#8)
        (assert tmp%16#1)
        let aggregate%extract%8#1: bytes = ((extract 0 8) aggregate%extract%6#1)
        let tmp%17#2: uint64 = (+ i#0 2u)
        let tmp%18#2: biguint = (itob tmp%17#2)
        let tmp%19#2: bool = (b== aggregate%extract%8#1 tmp%18#2)
        (assert tmp%19#2)
        let aggregate%extract%9#1: bytes = ((extract 8 8) aggregate%extract%6#1)
        let tmp%22#0: uint64 = (* i#8 i#8)
        let tmp%23#2: biguint = (itob tmp%22#0)
        let tmp%24#1: bool = (b== aggregate%extract%9#1 tmp%23#2)
        (assert tmp%24#1)
        let i#0: uint64 = i#8
        goto block@6
    block@8: // after_for_L49
        let slot_contents%3#0: Encoded(bool8[]) = load(local.0)
        let bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let array_len%0#1: uint64 = (/ bytes_len%0#0 144u)
        let as_bytes%0#0: bytes[8] = (itob array_len%0#1)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%3#0)
        (box_del "a")
        (box_put "a" converted_array%0#0)
        let aggregate%encoded_element%1#1: bytes = ((extract 0 144) slot_contents%3#0) // on error: index access is out of bounds
        let last_point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%1#1)
        let last_point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%1#1 8u)
        let length#0: uint64 = 0u
        let point_idx#0: uint64 = 1u
        goto block@42
    block@42: // for_header_L169
        let continue_looping%0#0: bool = (< point_idx#0 array_len%0#1)
        goto continue_looping%0#0 ? block@43 : block@50
    block@43: // for_body_L170
        let slot_contents%2#1: Encoded(uint64[]) = load(local.0)
        let aggregate%bytes_offset%2#1: uint64 = (* point_idx#0 144u)
        let aggregate%encoded_element%2#1: bytes = (extract3 slot_contents%2#1 aggregate%bytes_offset%2#1 144u) // on error: index access is out of bounds
        let point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%2#1)
        let point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%2#1 8u)
        let tmp%0#0: bool = (b< point.x#0 last_point.x#0)
        goto tmp%0#0 ? block@44 : block@45
    block@44: // if_body_L172
        let tmp%1#3: uint64 = (extract_uint64 aggregate%encoded_element%1#1 0u)
        let tmp%2#3: uint64 = (extract_uint64 aggregate%encoded_element%2#1 0u)
        let dx#0: uint64 = (- tmp%1#3 tmp%2#3)
        goto block@46
    block@45: // else_body_L174
        let tmp%4#6: uint64 = (extract_uint64 aggregate%encoded_element%2#1 0u)
        let tmp%5#0: uint64 = (extract_uint64 aggregate%encoded_element%1#1 0u)
        let dx#0: uint64 = (- tmp%4#6 tmp%5#0)
        goto block@46
    block@46: // after_if_else_L171
        let tmp%7#1: bool = (< point.y#0 last_point.y#0)
        goto tmp%7#1 ? block@47 : block@48
    block@47: // if_body_L176
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@49
    block@48: // else_body_L178
        let dy#0: uint64 = (- point.y#0 last_point.y#0)
        goto block@49
    block@49: // after_if_else_L175
        let tmp%10#2: uint64 = (* dx#0 dx#0)
        let tmp%11#1: uint64 = (* dy#0 dy#0)
        let tmp%12#0: uint64 = (+ tmp%10#2 tmp%11#1)
        let tmp%13#3: uint64 = (sqrt tmp%12#0)
        let length#0: uint64 = (+ length#0 tmp%13#3)
        let point_idx#0: uint64 = (+ point_idx#0 1u)
        goto block@42
    block@50: // after_for_L169
        let aggregate%val_as_bytes%9#1: bytes[8] = (itob length#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#1)
        (log tmp%11#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@9: // test_extend_from_tuple_route_L57
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let some_more.0#0: Encoded(uint64,uint64) = ((extract 0 16) reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0)
        let some_more.1#0: Encoded(uint64,uint64) = ((extract 16 16) reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0)
        let aggregate%encoded%36#1: bytes = (concat some_more.0#0 some_more.1#0)
        store(local.1, aggregate%encoded%36#1)
        let bytes_len%0#0: uint64 = (len aggregate%encoded%36#1)
        let array_len%0#1: uint64 = (/ bytes_len%0#0 16u)
        let tmp%1#3: uint64 = (- array_len%0#1 1u)
        let aggregate%bytes_offset%3#1: uint64 = (* tmp%1#3 16u)
        let last#0: Encoded(uint64,uint64) = (extract3 aggregate%encoded%36#1 aggregate%bytes_offset%3#1 16u) // on error: index access is out of bounds
        let tmp%2#1: bool = (== last#0 some_more.1#0)
        (assert tmp%2#1)
        let as_bytes%0#0: bytes[8] = (itob array_len%0#1)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 aggregate%encoded%36#1)
        let array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%3#0: uint64 = (- array_length%0#0 1u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) result#0)
        let aggregate%bytes_offset%4#1: uint64 = (* tmp%3#0 16u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%4#1 16u) // on error: index access is out of bounds
        let tmp%4#0: bool = (== aggregate%encoded_element%4#1 last#0)
        (assert tmp%4#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%19#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@10: // test_extend_from_arc4_tuple_route_L67
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let some_more#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        store(local.2, some_more#0)
        let bytes_len%0#0: uint64 = (len some_more#0)
        let array_len%0#1: uint64 = (/ bytes_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob array_len%0#1)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 some_more#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 converted_array%0#0)
        (log tmp%25#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@11: // test_bool_array_route_L75
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        store(local.3, 0x)
        let tmp%1#3: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@12
    block@12: // for_header_L80
        let continue_looping%0#0: bool = (< i#0 tmp%1#3)
        goto continue_looping%0#0 ? block@13 : block@14
    block@13: // for_body_L81
        let tmp%2#3: uint64 = (% i#0 2u)
        let tmp%3#3: bool = (! tmp%2#3)
        let slot_contents%1#2: Encoded(uint64[]) = load(local.3)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%3#3)
        let concat%0#2: Encoded(uint64[]) = (concat slot_contents%1#2 aggregate%encoded_bool%0#1) // on error: max array length exceeded
        store(local.3, concat%0#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@12
    block@14: // after_for_L80
        let slot_contents%2#1: Encoded(uint64[]) = load(local.3)
        let bytes_len%1#0: uint64 = (len slot_contents%2#1)
        let tmp%5#2: bool = (== bytes_len%1#0 length#0)
        (assert tmp%5#2) // expected correct length
        store(local.4, slot_contents%2#1)
        let slot_contents%4#0: Encoded(bool8[]) = load(local.3)
        let concat%1#0: Encoded(bool8[]) = (concat slot_contents%2#1 slot_contents%4#0) // on error: max array length exceeded
        store(local.4, concat%1#0)
        let bytes_len%3#1: uint64 = (len concat%1#0)
        let tmp%6#3: uint64 = (* length#0 2u)
        let tmp%7#1: bool = (== bytes_len%3#1 tmp%6#3)
        (assert tmp%7#1) // expected correct length
        let count#0: uint64 = 0u
        let slot_contents%7#1: Encoded(bool8[]) = load(local.3)
        let bytes_len%4#0: uint64 = (len slot_contents%7#1)
        let item_index_internal%0#0: uint64 = 0u
        goto block@15
    block@15: // for_header_L89
        let continue_looping%1#0: bool = (< item_index_internal%0#0 bytes_len%4#0)
        goto continue_looping%1#0 ? block@16 : block@19
    block@16: // for_body_L90
        let slot_contents%8#1: Encoded(bool8[]) = load(local.3)
        let aggregate%encoded_element%5#1: bytes = (extract3 slot_contents%8#1 item_index_internal%0#0 1u) // on error: index access is out of bounds
        let val#1: bool = (getbit aggregate%encoded_element%5#1 0u)
        let count#13: uint64 = count#0
        goto val#1 ? block@17 : block@18
    block@17: // if_body_L91
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@18
    block@18: // after_if_else_L90
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@15
    block@19: // after_for_L89
        let aggregate%val_as_bytes%10#1: bytes[8] = (itob count#0)
        let tmp%33#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#1)
        (log tmp%33#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@20: // test_arc4_conversion_route_L94
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        store(local.5, 0x)
        let tmp%1#3: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@21
    block@21: // for_header_L99
        let continue_looping%0#0: bool = (< i#0 tmp%1#3)
        goto continue_looping%0#0 ? block@22 : block@23
    block@22: // for_body_L100
        let aggregate%val_as_bytes%11#1: bytes[8] = (itob i#0)
        let slot_contents%1#2: Encoded(uint64[]) = load(local.5)
        let concat%0#2: Encoded(uint64[]) = (concat slot_contents%1#2 aggregate%val_as_bytes%11#1) // on error: max array length exceeded
        store(local.5, concat%0#2)
        let i#0: uint64 = (+ i#0 1u)
        goto block@21
    block@23: // after_for_L99
        let slot_contents%2#1: Encoded(uint64[]) = load(local.5)
        let bytes_len%1#0: uint64 = (len slot_contents%2#1)
        let array_len%1#1: uint64 = (/ bytes_len%1#0 8u)
        let tmp%4#0: bool = (== array_len%1#1 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@24
    block@24: // for_header_L103
        let continue_looping%1#0: bool = (< item_index_internal%0#0 array_len%1#1)
        goto continue_looping%1#0 ? block@25 : block@28
    block@25: // for_body_L104
        let slot_contents%4#0: Encoded(bool8[]) = load(local.5)
        let aggregate%bytes_offset%6#1: uint64 = (* item_index_internal%0#0 8u)
        let val#0: Encoded(uint64) = (extract3 slot_contents%4#0 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let tmp%5#2: bool = (b!= val#0 0b)
        let count#13: uint64 = count#0
        goto tmp%5#2 ? block@26 : block@27
    block@26: // if_body_L105
        let count#0: uint64 = (+ count#0 1u)
        let count#13: uint64 = count#0
        goto block@27
    block@27: // after_if_else_L104
        let count#0: uint64 = count#13
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@24
    block@28: // after_for_L103
        let slot_contents%5#0: Encoded(bool8[]) = load(local.5)
        let concat%1#0: Encoded(bool8[]) = (concat 0x0000 slot_contents%5#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#0: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 arc4_arr#0)
        (log tmp%40#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@29: // sum_array_route_L112
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let arc4_arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let extract_to_end%0#0: bytes = ((extract 2 0) arc4_arr#0)
        store(local.6, extract_to_end%0#0)
        let total#0: uint64 = 0u
        let bytes_len%0#0: uint64 = (len extract_to_end%0#0)
        let array_len%0#1: uint64 = (/ bytes_len%0#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@30
    block@30: // for_header_L118
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_len%0#1)
        goto continue_looping%0#0 ? block@31 : block@32
    block@31: // for_body_L119
        let slot_contents%2#1: Encoded(uint64[]) = load(local.6)
        let aggregate%bytes_offset%7#1: uint64 = (* item_index_internal%0#0 8u)
        let tmp%0#2: uint64 = (extract_uint64 slot_contents%2#1 aggregate%bytes_offset%7#1)
        let total#0: uint64 = (+ total#0 tmp%0#2)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@30
    block@32: // after_for_L118
        let aggregate%val_as_bytes%12#1: bytes[8] = (itob total#0)
        let tmp%47#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%12#1)
        (log tmp%47#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@33: // test_arc4_bool_route_L138
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let tmp%0#3: account = (txn Sender)
        let tmp%1#1: account = (txn Receiver)
        let tmp%2#1: bool = (== tmp%0#3 tmp%1#1)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u tmp%2#1)
        let tmp%5#1: account = (txn Sender)
        let tmp%6#1: account = (txn Receiver)
        let tmp%7#1: bool = (!= tmp%5#1 tmp%6#1)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u tmp%7#1)
        let concat%1#0: Encoded(bool8[]) = (concat aggregate%encoded_bool%1#1 aggregate%encoded_bool%2#1) // on error: max array length exceeded
        store(local.7, concat%1#0)
        let bytes_len%0#0: uint64 = (len concat%1#0)
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, concat%1#0, bytes_len%0#0, 8u)
        let array_length%0#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let tmp%10#1: bool = (== array_length%0#0 2u)
        (assert tmp%10#1) // expected correct length
        let tmp%11#1: uint64 = (len dyn_arr#1)
        let tmp%12#1: bool = (== tmp%11#1 3u)
        (assert tmp%12#1) // expected 3 bytes
        (assert array_length%0#0) // index access is out of bounds
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) dyn_arr#1)
        let aggregate%get_bit%1#1: uint64 = (getbit aggregate%array_trimmed%1#1 0u)
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%1#1)
        let aggregate%get_bit%2#1: bool = (getbit aggregate%encoded_bool%3#1 0u)
        let tmp%14#1: account = (txn Sender)
        let tmp%15#1: account = (txn Receiver)
        let tmp%16#1: bool = (== tmp%14#1 tmp%15#1)
        let tmp%17#1: bool = (== aggregate%get_bit%2#1 tmp%16#1)
        (assert tmp%17#1) // expected correct value at 0
        let aggregate%lt%1#1: bool = (< 1u array_length%0#0)
        (assert aggregate%lt%1#1) // index access is out of bounds
        let aggregate%get_bit%3#1: uint64 = (getbit aggregate%array_trimmed%1#1 1u)
        let aggregate%encoded_bool%4#1: bytes[1] = (setbit 0x00 0u aggregate%get_bit%3#1)
        let aggregate%get_bit%4#1: bool = (getbit aggregate%encoded_bool%4#1 0u)
        let tmp%19#1: account = (txn Sender)
        let tmp%20#1: account = (txn Receiver)
        let tmp%21#0: bool = (!= tmp%19#1 tmp%20#1)
        let tmp%22#1: bool = (== aggregate%get_bit%4#1 tmp%21#0)
        (assert tmp%22#1) // expected correct value at 1
        let slot_contents%3#0: Encoded(bool8[]) = load(local.7)
        store(local.8, slot_contents%3#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@34
    block@34: // for_header_L154
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@35 : block@36
    block@35: // for_body_L155
        let aggregate%get_bit%5#1: uint64 = (getbit aggregate%array_trimmed%1#1 item_index_internal%0#0)
        let b#0: Encoded(bool8) = (setbit 0x00 0u aggregate%get_bit%5#1)
        let slot_contents%4#0: Encoded(bool8[]) = load(local.8)
        let concat%2#0: Encoded(bool8[]) = (concat slot_contents%4#0 b#0) // on error: max array length exceeded
        store(local.8, concat%2#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@34
    block@36: // after_for_L154
        let slot_contents%5#0: Encoded(bool8[]) = load(local.8)
        let bytes_len%1#0: uint64 = (len slot_contents%5#0)
        let tmp%24#1: bool = (== bytes_len%1#0 4u)
        (assert tmp%24#1) // expected correct length
        let aggregate%encoded_element%8#1: bytes = ((extract 0 1) slot_contents%5#0) // on error: index access is out of bounds
        let aggregate%get_bit%6#1: bool = (getbit aggregate%encoded_element%8#1 0u)
        let tmp%26#1: account = (txn Sender)
        let tmp%27#1: account = (txn Receiver)
        let tmp%28#1: bool = (== tmp%26#1 tmp%27#1)
        let tmp%29#1: bool = (== aggregate%get_bit%6#1 tmp%28#1)
        (assert tmp%29#1) // expected correct value at 0
        let aggregate%encoded_element%9#1: bytes = ((extract 1 1) slot_contents%5#0) // on error: index access is out of bounds
        let aggregate%get_bit%7#1: bool = (getbit aggregate%encoded_element%9#1 0u)
        let tmp%31#1: account = (txn Sender)
        let tmp%32#1: account = (txn Receiver)
        let tmp%33#1: bool = (!= tmp%31#1 tmp%32#1)
        let tmp%34#1: bool = (== aggregate%get_bit%7#1 tmp%33#1)
        (assert tmp%34#1) // expected correct value at 1
        let aggregate%encoded_element%10#1: bytes = ((extract 2 1) slot_contents%5#0) // on error: index access is out of bounds
        let aggregate%get_bit%8#1: bool = (getbit aggregate%encoded_element%10#1 0u)
        let tmp%36#1: account = (txn Sender)
        let tmp%37#1: account = (txn Receiver)
        let tmp%38#1: bool = (== tmp%36#1 tmp%37#1)
        let tmp%39#1: bool = (== aggregate%get_bit%8#1 tmp%38#1)
        (assert tmp%39#1) // expected correct value at 2
        let aggregate%encoded_element%11#1: bytes = ((extract 3 1) slot_contents%5#0) // on error: index access is out of bounds
        let aggregate%get_bit%9#1: bool = (getbit aggregate%encoded_element%11#1 0u)
        let tmp%41#1: account = (txn Sender)
        let tmp%42#1: account = (txn Receiver)
        let tmp%43#1: bool = (!= tmp%41#1 tmp%42#1)
        let tmp%44#1: bool = (== aggregate%get_bit%9#1 tmp%43#1)
        (assert tmp%44#1) // expected correct value at 3
        let slot_contents%10#0: Encoded(bool8[]) = load(local.7)
        let bytes_len%2#0: uint64 = (len slot_contents%10#0)
        let bit_packed_source%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%10#0, bytes_len%2#0, 8u)
        let tmp%53#0: bytes = (concat 0x151f7c75 bit_packed_source%0#0)
        (log tmp%53#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@37: // bare_routing_L37
        let tmp%54#0: uint64 = (txn OnCompletion)
        goto tmp%54#0 ? block@39 : block@38
    block@38: // __algopy_default_create_L1
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // can only call when creating
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@39: // after_if_else_L37
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0
        goto block@40
    block@40: // after_inlined_test_cases.array.static_size.StaticSizeContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        let result#7: bytes = result#0
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#0: bytes = (concat result#0 tmp%11#0)
        let result#7: bytes = result#0
        goto block@2
    block@2: // after_if_else_L147
        let result#0: bytes = result#7
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let tmp%15#0: bool = (< write_offset#0 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#0)
        let result#0: bytes = (setbit result#0 write_offset#0 tmp%16#0)
        let write_offset#0: uint64 = (+ write_offset#0 1u)
        let read_offset#0: uint64 = (+ read_offset#0 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, account, Encoded(uint64,uint64), biguint>:
    block@0: // L123
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: account = (txn Sender)
        let tmp%3#0: Encoded(uint64,uint64) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%4#0: biguint = (itob maybe_value%2#0)
        return tmp%1#0 tmp%0#0 tmp%2#0 tmp%3#0 tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded(uint64,uint64):
    block@0: // L134
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%0#0)
        let tmp%2#0: uint64 = (* maybe_value%0#0 maybe_value%0#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%2#0)
        let aggregate%encoded%1#1: bytes = (concat aggregate%val_as_bytes%0#1 aggregate%val_as_bytes%1#1)
        return aggregate%encoded%1#1