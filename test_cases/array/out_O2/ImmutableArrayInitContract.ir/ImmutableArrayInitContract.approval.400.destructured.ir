main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L10
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_immutable_array_init()void" => block@4, method "test_immutable_array_init_without_type_generic()void" => block@5, method "test_reference_array_init()void" => block@6, method "test_reference_array_init_without_type_generic()void" => block@7, * => block@10}
    block@4: // test_immutable_array_init_route_L11
        store(local.0, 0x000000000000000100000000000000020000000000000003)
        exit 1u
    block@5: // test_immutable_array_init_without_type_generic_route_L33
        store(local.1, 0x000000000000000100000000000000020000000000000003)
        exit 1u
    block@6: // test_reference_array_init_route_L55
        store(local.2, 0x000000000000000100000000000000020000000000000003)
        store(local.3, 0x000000000000000100000000000000020000000000000003)
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(local.2)
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 8u)
        let tmp%3#0: bool = (== aggregate%array_len%2#0 3u)
        (assert tmp%3#0)
        let values%0#0: uint64 = (extract_uint64 aggregate%slot_contents%0#0 0u)
        let tmp%4#1: bool = (== values%0#0 1u)
        (assert tmp%4#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%slot_contents%0#0 8u)
        let tmp%5#1: bool = (== values%2#0 2u)
        (assert tmp%5#1)
        let values%4#0: uint64 = (extract_uint64 aggregate%slot_contents%0#0 16u)
        let tmp%6#1: bool = (== values%4#0 3u)
        (assert tmp%6#1)
        store(local.4, 0x000000000000000100000000000000020000000000000003)
        let slot_contents%6#0: Encoded(uint64[]) = load(local.2)
        let values%6#0: uint64 = (extract_uint64 slot_contents%6#0 0u)
        let tmp%10#0: bool = (== values%6#0 1u)
        (assert tmp%10#0)
        let values%8#0: uint64 = (extract_uint64 slot_contents%6#0 8u)
        let tmp%11#0: bool = (== values%8#0 2u)
        (assert tmp%11#0)
        let values%10#0: uint64 = (extract_uint64 slot_contents%6#0 16u)
        let tmp%12#0: bool = (== values%10#0 3u)
        (assert tmp%12#0)
        store(local.5, 0x000000000000000100000000000000020000000000000003)
        store(local.6, 0x000000000000000100000000000000020000000000000003)
        let aggregate%slot_contents%3#0: Encoded(uint64[]) = load(local.2)
        let aggregate%bytes_len%5#0: uint64 = (len aggregate%slot_contents%3#0)
        let aggregate%array_len%5#0: uint64 = (/ aggregate%bytes_len%5#0 8u)
        let tmp%15#0: bool = (== aggregate%array_len%5#0 3u)
        (assert tmp%15#0)
        let values%12#0: uint64 = (extract_uint64 aggregate%slot_contents%3#0 0u)
        let tmp%16#0: bool = (== values%12#0 1u)
        (assert tmp%16#0)
        let values%14#0: uint64 = (extract_uint64 aggregate%slot_contents%3#0 8u)
        let tmp%17#0: bool = (== values%14#0 2u)
        (assert tmp%17#0)
        let values%16#0: uint64 = (extract_uint64 aggregate%slot_contents%3#0 16u)
        let tmp%18#0: bool = (== values%16#0 3u)
        (assert tmp%18#0)
        exit 1u
    block@7: // test_reference_array_init_without_type_generic_route_L77
        store(local.7, 0x000000000000000100000000000000020000000000000003)
        store(local.8, 0x000000000000000100000000000000020000000000000003)
        let aggregate%slot_contents%5#0: Encoded(uint64[]) = load(local.7)
        let aggregate%bytes_len%7#0: uint64 = (len aggregate%slot_contents%5#0)
        let aggregate%array_len%7#0: uint64 = (/ aggregate%bytes_len%7#0 8u)
        let tmp%3#0: bool = (== aggregate%array_len%7#0 3u)
        (assert tmp%3#0)
        let values%0#0: uint64 = (extract_uint64 aggregate%slot_contents%5#0 0u)
        let tmp%4#1: bool = (== values%0#0 1u)
        (assert tmp%4#1)
        let values%2#0: uint64 = (extract_uint64 aggregate%slot_contents%5#0 8u)
        let tmp%5#1: bool = (== values%2#0 2u)
        (assert tmp%5#1)
        let values%4#0: uint64 = (extract_uint64 aggregate%slot_contents%5#0 16u)
        let tmp%6#1: bool = (== values%4#0 3u)
        (assert tmp%6#1)
        store(local.9, 0x000000000000000100000000000000020000000000000003)
        let slot_contents%6#0: Encoded(uint64[]) = load(local.7)
        let values%6#0: uint64 = (extract_uint64 slot_contents%6#0 0u)
        let tmp%10#0: bool = (== values%6#0 1u)
        (assert tmp%10#0)
        let values%8#0: uint64 = (extract_uint64 slot_contents%6#0 8u)
        let tmp%11#0: bool = (== values%8#0 2u)
        (assert tmp%11#0)
        let values%10#0: uint64 = (extract_uint64 slot_contents%6#0 16u)
        let tmp%12#0: bool = (== values%10#0 3u)
        (assert tmp%12#0)
        store(local.10, 0x000000000000000100000000000000020000000000000003)
        store(local.11, 0x000000000000000100000000000000020000000000000003)
        let aggregate%slot_contents%8#0: Encoded(uint64[]) = load(local.7)
        let aggregate%bytes_len%10#0: uint64 = (len aggregate%slot_contents%8#0)
        let aggregate%array_len%10#0: uint64 = (/ aggregate%bytes_len%10#0 8u)
        let tmp%15#0: bool = (== aggregate%array_len%10#0 3u)
        (assert tmp%15#0)
        let values%12#0: uint64 = (extract_uint64 aggregate%slot_contents%8#0 0u)
        let tmp%16#0: bool = (== values%12#0 1u)
        (assert tmp%16#0)
        let values%14#0: uint64 = (extract_uint64 aggregate%slot_contents%8#0 8u)
        let tmp%17#0: bool = (== values%14#0 2u)
        (assert tmp%17#0)
        let values%16#0: uint64 = (extract_uint64 aggregate%slot_contents%8#0 16u)
        let tmp%18#0: bool = (== values%16#0 3u)
        (assert tmp%18#0)
        exit 1u
    block@10: // after_if_else_L10
        fail
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u