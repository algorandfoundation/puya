#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8
    bytecblock 0x00 0x 0x0000 0x151f7c75 0x80 0x000a 0x0002
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0x44d42f99 0x743d70ed 0x1c7e0494 0xa2d5860b 0xe05fc564 0x1e092b83 0x6cb7c991 0x9898bf02 0xf6b61ee8 0x60b86a7b 0x73ad283f 0x529dfae9 // method "test_uint64_array()void", method "test_bool_array(uint64)void", method "test_fixed_size_tuple_array()void", method "test_fixed_size_named_tuple_array()void", method "test_dynamic_sized_tuple_array()void", method "test_dynamic_sized_named_tuple_array()void", method "test_bit_packed_tuples()void", method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)", method "test_uint64_return(uint64)uint64[]", method "test_bool_return(uint64)bool[]", method "test_tuple_return(uint64)(uint64,bool,bool)[]", method "test_dynamic_tuple_return(uint64)(uint64,string)[]"
    txna ApplicationArgs 0
    match main_test_uint64_array_route@3 main_test_bool_array_route@4 main_test_fixed_size_tuple_array_route@5 main_test_fixed_size_named_tuple_array_route@6 main_test_dynamic_sized_tuple_array_route@7 main_test_dynamic_sized_named_tuple_array_route@8 main_test_bit_packed_tuples_route@9 main_sum_uints_and_lengths_and_trues_route@10 main_test_uint64_return_route@11 main_test_bool_return_route@12 main_test_tuple_return_route@13 main_test_dynamic_tuple_return_route@14

main_after_if_else@21:
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    intc_0 // 0
    return

main_test_dynamic_tuple_return_route@14:
    // array/immutable.py:317
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:317
    // @arc4.abimethod()
    callsub test_dynamic_tuple_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_tuple_return_route@13:
    // array/immutable.py:310
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:310
    // @arc4.abimethod()
    callsub test_tuple_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_bool_return_route@12:
    // array/immutable.py:303
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:303
    // @arc4.abimethod()
    callsub test_bool_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_uint64_return_route@11:
    // array/immutable.py:296
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:296
    // @arc4.abimethod()
    callsub test_uint64_return
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_sum_uints_and_lengths_and_trues_route@10:
    // array/immutable.py:269
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    // array/immutable.py:269
    // @arc4.abimethod()
    callsub sum_uints_and_lengths_and_trues
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_bit_packed_tuples_route@9:
    // array/immutable.py:204
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_bit_packed_tuples
    intc_1 // 1
    return

main_test_dynamic_sized_named_tuple_array_route@8:
    // array/immutable.py:185
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_dynamic_sized_named_tuple_array
    intc_1 // 1
    return

main_test_dynamic_sized_tuple_array_route@7:
    // array/immutable.py:166
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_dynamic_sized_tuple_array
    intc_1 // 1
    return

main_test_fixed_size_named_tuple_array_route@6:
    // array/immutable.py:151
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_fixed_size_named_tuple_array
    intc_1 // 1
    return

main_test_fixed_size_tuple_array_route@5:
    // array/immutable.py:133
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_fixed_size_tuple_array
    intc_1 // 1
    return

main_test_bool_array_route@4:
    // array/immutable.py:109
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/immutable.py:109
    // @arc4.abimethod()
    callsub test_bool_array
    intc_1 // 1
    return

main_test_uint64_array_route@3:
    // array/immutable.py:73
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_uint64_array
    intc_1 // 1
    return

main_bare_routing@17:
    // array/immutable.py:72
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:
    proto 2 2
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    itob
    extract 6 0
    frame_dig -2
    swap
    replace2 0
    dup
    len
    frame_dig -1
    -
    dup2
    frame_dig -1
    extract3
    uncover 2
    intc_0 // 0
    uncover 3
    substring3
    retsub


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:
    proto 1 2
    frame_dig -1
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dup
    intc_2 // 2
    *
    dup
    frame_dig -1
    extract 2 0
    dup
    cover 2
    dup
    uncover 2
    extract_uint16
    dup
    uncover 2
    dup
    len
    swap
    cover 2
    substring3
    bytec_1 // 0x
    intc_0 // 0

dynamic_array_pop_dynamic_element_for_header@1:
    frame_dig 6
    frame_dig 1
    <
    bz dynamic_array_pop_dynamic_element_after_for@4
    frame_dig 2
    frame_dig 6
    dup
    cover 2
    extract_uint16
    intc_2 // 2
    -
    itob
    extract 6 2
    frame_dig 5
    swap
    concat
    frame_bury 5
    intc_2 // 2
    +
    frame_bury 6
    b dynamic_array_pop_dynamic_element_for_header@1

dynamic_array_pop_dynamic_element_after_for@4:
    frame_dig 0
    itob
    extract 6 2
    frame_dig 5
    concat
    frame_dig 1
    intc_2 // 2
    +
    frame_dig 2
    swap
    frame_dig 3
    substring3
    concat
    frame_dig 4
    frame_bury 0
    frame_bury 1
    retsub


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_1 // ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    pushint 16 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:
    proto 4 1
    bytec_1 // ""
    dup
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    intc_2 // 2
    *
    intc_0 // 0

dynamic_array_concat_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz dynamic_array_concat_dynamic_element_after_for@4
    frame_dig -3
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 2
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@1

dynamic_array_concat_dynamic_element_after_for@4:
    frame_dig -3
    len
    frame_bury 0
    intc_0 // 0
    frame_bury 4

dynamic_array_concat_dynamic_element_for_header@5:
    frame_dig 4
    frame_dig 2
    <
    bz dynamic_array_concat_dynamic_element_after_for@8
    frame_dig -1
    frame_dig 4
    dup
    cover 2
    extract_uint16
    frame_dig 0
    +
    itob
    extract 6 2
    frame_dig 1
    swap
    concat
    frame_bury 1
    intc_2 // 2
    +
    frame_bury 4
    b dynamic_array_concat_dynamic_element_for_header@5

dynamic_array_concat_dynamic_element_after_for@8:
    frame_dig -4
    frame_dig -2
    +
    itob
    extract 6 2
    frame_dig 1
    concat
    frame_dig -3
    frame_dig 3
    frame_dig 0
    substring3
    concat
    frame_dig -1
    len
    frame_dig -1
    frame_dig 2
    uncover 2
    substring3
    concat
    frame_bury 0
    retsub


// test_cases.array.immutable.times(n: uint64) -> bytes:
times:
    // array/immutable.py:327-328
    // @subroutine
    // def times(n: UInt64) -> String:
    proto 1 1
    // array/immutable.py:329
    // result = String()
    bytec_1 // ""
    // array/immutable.py:330
    // for _i in urange(n):
    intc_0 // 0

times_for_header@1:
    // array/immutable.py:330
    // for _i in urange(n):
    frame_dig 1
    frame_dig -1
    <
    bz times_after_for@4
    // array/immutable.py:331
    // result += String(" ")
    frame_dig 0
    pushbytes " "
    concat
    frame_bury 0
    // array/immutable.py:330
    // for _i in urange(n):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b times_for_header@1

times_after_for@4:
    // array/immutable.py:332
    // return result
    retsub


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
add_x:
    // array/immutable.py:335-336
    // @subroutine
    // def add_x(arr: ImmutableArray[UInt64], x: UInt64) -> ImmutableArray[UInt64]:
    proto 2 1
    // array/immutable.py:337
    // for i in urange(x):
    intc_0 // 0

add_x_for_header@1:
    // array/immutable.py:337
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_x_after_for@4
    // array/immutable.py:338
    // arr = arr.append(i)
    frame_dig -2
    extract 2 0
    frame_dig 0
    dup
    cover 2
    itob
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury -2
    // array/immutable.py:337
    // for i in urange(x):
    intc_1 // 1
    +
    frame_bury 0
    b add_x_for_header@1

add_x_after_for@4:
    // array/immutable.py:339
    // return arr
    frame_dig -2
    swap
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
test_uint64_array:
    // array/immutable.py:73-74
    // @arc4.abimethod()
    // def test_uint64_array(self) -> None:
    proto 0 0
    // array/immutable.py:78
    // arr = arr.append(UInt64(42))
    pushbytes 0x0001000000000000002a
    // array/immutable.py:82
    // arr = add_x(arr, UInt64(5))
    pushint 5 // 5
    callsub add_x
    // array/immutable.py:83
    // assert arr.length == 6
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 6 // 6
    ==
    assert
    // array/immutable.py:84
    // assert arr[-1] == 4
    intc_1 // 1
    -
    swap
    extract 2 0
    swap
    intc_3 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:86
    // arr = arr.append(UInt64(43))
    pushint 43 // 43
    itob
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    dupn 2
    // array/immutable.py:87
    // assert arr.length == 7
    intc_0 // 0
    extract_uint16
    dup
    pushint 7 // 7
    ==
    assert
    // array/immutable.py:88
    // assert arr[-1] == 43
    intc_1 // 1
    -
    swap
    extract 2 0
    swap
    intc_3 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 43 // 43
    ==
    assert
    // array/immutable.py:89
    // assert arr[0] == 42
    intc_0 // 0
    extract_uint64
    pushint 42 // 42
    ==
    assert
    // array/immutable.py:344
    // for _i in urange(x):
    intc_0 // 0

test_uint64_array_for_header@2:
    // array/immutable.py:344
    // for _i in urange(x):
    frame_dig 1
    // array/immutable.py:91
    // arr = pop_x(arr, UInt64(3))
    pushint 3 // 3
    // array/immutable.py:344
    // for _i in urange(x):
    <
    bz test_uint64_array_after_for@4
    // array/immutable.py:345
    // arr = arr.pop()
    frame_dig 0
    intc_3 // 8
    callsub dynamic_array_pop_fixed_size
    frame_bury 0
    pop
    // array/immutable.py:344
    // for _i in urange(x):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b test_uint64_array_for_header@2

test_uint64_array_after_for@4:
    // array/immutable.py:92
    // assert arr.length == 4
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:93
    // assert arr[-1] == 2
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 8
    *
    extract_uint64
    intc_2 // 2
    ==
    assert
    // array/immutable.py:95
    // arr = add_x(arr, UInt64(10))
    pushint 10 // 10
    callsub add_x
    // array/immutable.py:96
    // assert arr.length == 14
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 14 // 14
    ==
    assert
    // array/immutable.py:97
    // assert arr[-1] == 9
    intc_1 // 1
    -
    swap
    extract 2 0
    swap
    intc_3 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 9 // 9
    ==
    assert
    // array/immutable.py:99
    // arr = arr.append(UInt64(44))
    pushint 44 // 44
    itob
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    // array/immutable.py:100
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:101
    // assert arr[-1] == 44
    dup
    intc_1 // 1
    -
    dig 2
    extract 2 0
    swap
    intc_3 // 8
    *
    extract_uint64
    pushint 44 // 44
    ==
    assert
    // array/immutable.py:103
    // arr = arr.replace(2, UInt64(23))
    pushint 23 // 23
    itob
    intc_2 // 2
    uncover 2
    <
    assert // Index access is out of bounds
    replace2 18
    // array/immutable.py:104
    // assert arr.length == 15
    dup
    intc_0 // 0
    extract_uint16
    pushint 15 // 15
    ==
    assert
    // array/immutable.py:105
    // assert arr[2] == 23
    dup
    extract 2 0
    pushint 16 // 16
    extract_uint64
    pushint 23 // 23
    ==
    assert
    // array/immutable.py:107
    // self.a = arr
    pushbytes "a"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
test_bool_array:
    // array/immutable.py:109-110
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> None:
    proto 1 0
    bytec_1 // ""
    // array/immutable.py:111
    // arr = ImmutableArray[bool]()
    bytec_2 // 0x0000
    // array/immutable.py:114
    // for i in urange(length):
    intc_0 // 0

test_bool_array_for_header@1:
    // array/immutable.py:114
    // for i in urange(length):
    frame_dig 2
    frame_dig -1
    <
    bz test_bool_array_after_for@4
    // array/immutable.py:115
    // arr = arr.append(i == Txn.num_app_args)
    txn NumAppArgs
    frame_dig 2
    dup
    uncover 2
    ==
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig 1
    swap
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 1
    // array/immutable.py:114
    // for i in urange(length):
    intc_1 // 1
    +
    frame_bury 2
    b test_bool_array_for_header@1

test_bool_array_after_for@4:
    // array/immutable.py:117
    // assert arr.length == length
    frame_dig 1
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 0
    frame_dig -1
    ==
    assert
    // array/immutable.py:119
    // if length > 0:
    frame_dig -1
    bz test_bool_array_after_if_else@6
    // array/immutable.py:120
    // assert not arr[0], "expected element 0 to be False"
    frame_dig 1
    extract 2 0
    frame_dig 0
    assert // Index access is out of bounds
    intc_0 // 0
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 0 to be False

test_bool_array_after_if_else@6:
    // array/immutable.py:121
    // if length > 1:
    frame_dig -1
    intc_1 // 1
    >
    bz test_bool_array_after_if_else@8
    // array/immutable.py:122
    // assert not arr[1], "expected element 1 to be False"
    frame_dig 1
    extract 2 0
    intc_1 // 1
    frame_dig 0
    <
    assert // Index access is out of bounds
    intc_1 // 1
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected element 1 to be False

test_bool_array_after_if_else@8:
    // array/immutable.py:123
    // if length > 2:
    frame_dig -1
    intc_2 // 2
    >
    bz test_bool_array_after_if_else@10
    // array/immutable.py:124
    // assert arr[2], "expected element 2 to be True"
    frame_dig 1
    extract 2 0
    intc_2 // 2
    frame_dig 0
    <
    assert // Index access is out of bounds
    intc_2 // 2
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    assert // expected element 2 to be True

test_bool_array_after_if_else@10:
    // array/immutable.py:125
    // if length > 3:
    frame_dig -1
    pushint 3 // 3
    >
    bz test_bool_array_after_if_else@12
    // array/immutable.py:126
    // assert not arr[length - 1], "expected last element to be False"
    frame_dig -1
    intc_1 // 1
    -
    frame_dig 1
    extract 2 0
    dig 1
    frame_dig 0
    <
    assert // Index access is out of bounds
    swap
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    !
    assert // expected last element to be False

test_bool_array_after_if_else@12:
    // array/immutable.py:128
    // self.g = arr
    pushbytes "g"
    frame_dig 1
    app_global_put
    // array/immutable.py:129
    // if length:
    frame_dig -1
    bz test_bool_array_after_if_else@14
    frame_dig 0
    intc_1 // 1
    -
    dup
    itob
    extract 6 0
    frame_dig 1
    swap
    replace2 0
    dig 1
    pushint 16 // 16
    +
    intc_0 // 0
    setbit
    swap
    pushint 7 // 7
    +
    intc_3 // 8
    /
    intc_2 // 2
    +
    intc_0 // 0
    swap
    substring3
    // array/immutable.py:131
    // assert arr.length == length - 1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    intc_1 // 1
    -
    ==
    assert

test_bool_array_after_if_else@14:
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
test_fixed_size_tuple_array:
    // array/immutable.py:133-134
    // @arc4.abimethod()
    // def test_fixed_size_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:135
    // arr = ImmutableArray[tuple[UInt64, UInt64]]()
    bytec_2 // 0x0000
    // array/immutable.py:138
    // for i in urange(5):
    intc_0 // 0

test_fixed_size_tuple_array_for_header@1:
    // array/immutable.py:138
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_tuple_array_after_for@4
    // array/immutable.py:139
    // arr = arr.append((i + 1, i + 2))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_1 // 1
    +
    swap
    intc_2 // 2
    +
    dig 1
    itob
    swap
    itob
    concat
    uncover 2
    swap
    concat
    dup
    len
    pushint 16 // 16
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    frame_bury 1
    b test_fixed_size_tuple_array_for_header@1

test_fixed_size_tuple_array_after_for@4:
    // array/immutable.py:141
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:142
    // assert arr[0] == (UInt64(1), UInt64(2))
    dig 1
    extract 2 0
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint64
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:143
    // assert arr[-1] == (UInt64(5), UInt64(6))
    swap
    intc_1 // 1
    -
    pushint 16 // 16
    *
    dup2
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    cover 2
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    swap
    pushint 5 // 5
    ==
    swap
    pushint 6 // 6
    ==
    &&
    assert
    // array/immutable.py:145
    // arr = arr.pop()
    pushint 16 // 16
    callsub dynamic_array_pop_fixed_size
    bury 1
    // array/immutable.py:146
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:147
    // assert arr[0] == (UInt64(1), UInt64(2))
    dig 1
    extract 2 0
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint64
    swap
    intc_1 // 1
    ==
    swap
    intc_2 // 2
    ==
    &&
    assert
    // array/immutable.py:148
    // assert arr[-1] == (UInt64(4), UInt64(5))
    swap
    intc_1 // 1
    -
    pushint 16 // 16
    *
    dup2
    pushint 16 // 16
    extract3 // on error: Index access is out of bounds
    cover 2
    extract_uint64
    swap
    intc_3 // 8
    extract_uint64
    swap
    pushint 4 // 4
    ==
    swap
    pushint 5 // 5
    ==
    &&
    assert
    // array/immutable.py:149
    // self.c = arr
    pushbytes "c"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
test_fixed_size_named_tuple_array:
    // array/immutable.py:151-152
    // @arc4.abimethod()
    // def test_fixed_size_named_tuple_array(self) -> None:
    proto 0 0
    // array/immutable.py:153
    // arr = ImmutableArray[MyTuple]()
    bytec_2 // 0x0000
    // array/immutable.py:156
    // for i in urange(5):
    intc_0 // 0

test_fixed_size_named_tuple_array_for_header@1:
    // array/immutable.py:156
    // for i in urange(5):
    frame_dig 1
    pushint 5 // 5
    <
    bz test_fixed_size_named_tuple_array_after_for@4
    // array/immutable.py:157
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_2 // 2
    %
    !
    dig 1
    pushint 3 // 3
    *
    intc_2 // 2
    %
    !
    dig 2
    itob
    bytec_0 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    uncover 2
    swap
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:156
    // for i in urange(5):
    intc_1 // 1
    +
    frame_bury 1
    b test_fixed_size_named_tuple_array_for_header@1

test_fixed_size_named_tuple_array_after_for@4:
    // array/immutable.py:159
    // assert arr.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:160
    // foo, bar, baz = arr[0]
    dup
    extract 2 0
    dup
    extract 0 9 // on error: Index access is out of bounds
    swap
    intc_0 // 0
    extract_uint64
    dig 1
    pushint 64 // 64
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    uncover 2
    pushint 65 // 65
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    // array/immutable.py:161
    // assert foo == 0
    uncover 2
    !
    assert
    // array/immutable.py:162
    // assert bar
    swap
    assert
    // array/immutable.py:163
    // assert baz
    assert
    // array/immutable.py:164
    // self.d = arr
    pushbytes "d"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
test_dynamic_sized_tuple_array:
    // array/immutable.py:166-167
    // @arc4.abimethod()
    // def test_dynamic_sized_tuple_array(self) -> None:
    proto 0 0
    bytec_1 // ""
    // array/immutable.py:168
    // arr = ImmutableArray[tuple[UInt64, Bytes]]()
    bytec_2 // 0x0000
    // array/immutable.py:171
    // for i in urange(5):
    intc_0 // 0

test_dynamic_sized_tuple_array_for_header@1:
    // array/immutable.py:171
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@4
    // array/immutable.py:172
    // arr = arr.append((i + 1, op.bzero(i)))
    frame_dig 2
    dup
    intc_1 // 1
    +
    swap
    bzero
    dig 1
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec 5 // 0x000a
    concat
    swap
    concat
    bytec 6 // 0x0002
    swap
    concat
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 1
    frame_bury 2
    b test_dynamic_sized_tuple_array_for_header@1

test_dynamic_sized_tuple_array_after_for@4:
    // array/immutable.py:174
    // assert arr.length == 5
    frame_dig 1
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 0
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:175
    // for i in urange(5):
    intc_0 // 0
    frame_bury 2

test_dynamic_sized_tuple_array_for_header@5:
    // array/immutable.py:175
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_dynamic_sized_tuple_array_after_for@8
    // array/immutable.py:176
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 1
    extract 2 0
    frame_dig 2
    dup
    cover 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dig 2
    intc_1 // 1
    +
    frame_dig 0
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    swap
    dig 2
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:177
    // assert arr[i][1].length == i, "expected 2nd element to be correct"
    extract 2 0
    len
    uncover 2
    ==
    assert // expected 2nd element to be correct
    frame_bury 2
    b test_dynamic_sized_tuple_array_for_header@5

test_dynamic_sized_tuple_array_after_for@8:
    // array/immutable.py:179
    // arr = arr.pop()
    frame_dig 1
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:180
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:181
    // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
    dig 1
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    dig 1
    swap
    dig 3
    select
    dig 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    intc_0 // 0
    bzero
    uncover 2
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:182
    // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
    dig 1
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    intc_1 // 1
    +
    uncover 4
    dig 1
    - // on error: Index access is out of bounds
    swap
    intc_2 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 3
    swap
    uncover 2
    select
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    pushint 3 // 3
    bzero
    uncover 2
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:183
    // self.e = arr
    pushbytes "e"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
test_dynamic_sized_named_tuple_array:
    // array/immutable.py:185-186
    // @arc4.abimethod()
    // def test_dynamic_sized_named_tuple_array(self) -> None:
    proto 0 0
    bytec_1 // ""
    // array/immutable.py:187
    // arr = ImmutableArray[MyDynamicSizedTuple]()
    bytec_2 // 0x0000
    // array/immutable.py:190
    // for i in urange(5):
    intc_0 // 0

test_dynamic_sized_named_tuple_array_for_header@1:
    // array/immutable.py:190
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@4
    // array/immutable.py:191
    // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
    frame_dig 2
    dup
    intc_1 // 1
    +
    swap
    callsub times
    dig 1
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec 5 // 0x000a
    concat
    swap
    concat
    bytec 6 // 0x0002
    swap
    concat
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 1
    frame_bury 2
    b test_dynamic_sized_named_tuple_array_for_header@1

test_dynamic_sized_named_tuple_array_after_for@4:
    // array/immutable.py:193
    // assert arr.length == 5
    frame_dig 1
    intc_0 // 0
    extract_uint16
    dup
    frame_bury 0
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:194
    // for i in urange(5):
    intc_0 // 0
    frame_bury 2

test_dynamic_sized_named_tuple_array_for_header@5:
    // array/immutable.py:194
    // for i in urange(5):
    frame_dig 2
    pushint 5 // 5
    <
    bz test_dynamic_sized_named_tuple_array_after_for@8
    // array/immutable.py:195
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    frame_dig 1
    extract 2 0
    frame_dig 2
    dup
    cover 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dig 2
    intc_1 // 1
    +
    frame_dig 0
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    swap
    dig 2
    ==
    assert // expected 1st element to be correct
    // array/immutable.py:196
    // assert arr[i][1] == times(i), "expected 2nd element to be correct"
    extract 2 0
    uncover 2
    callsub times
    ==
    assert // expected 2nd element to be correct
    frame_bury 2
    b test_dynamic_sized_named_tuple_array_for_header@5

test_dynamic_sized_named_tuple_array_after_for@8:
    // array/immutable.py:198
    // arr = arr.pop()
    frame_dig 1
    callsub dynamic_array_pop_dynamic_element
    bury 1
    // array/immutable.py:199
    // assert arr.length == 4
    dup
    intc_0 // 0
    extract_uint16
    dup
    pushint 4 // 4
    ==
    assert
    // array/immutable.py:200
    // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
    dig 1
    extract 2 0
    dup
    intc_0 // 0
    extract_uint16
    dig 2
    intc_1 // 1
    - // on error: Index access is out of bounds
    dig 2
    len
    dig 3
    intc_2 // 2
    extract_uint16
    dig 1
    swap
    dig 3
    select
    dig 4
    uncover 4
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    swap
    intc_1 // 1
    ==
    swap
    bytec_1 // ""
    ==
    &&
    assert // expected 1, 0
    // array/immutable.py:201
    // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
    dig 1
    intc_2 // 2
    *
    dig 3
    swap
    extract_uint16
    uncover 2
    intc_1 // 1
    +
    uncover 4
    dig 1
    - // on error: Index access is out of bounds
    swap
    intc_2 // 2
    *
    dig 4
    swap
    extract_uint16
    uncover 3
    swap
    uncover 2
    select
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    swap
    pushint 4 // 4
    ==
    swap
    pushbytes "   "
    ==
    &&
    assert // expected 4, 3
    // array/immutable.py:202
    // self.f = arr
    pushbytes "f"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
test_bit_packed_tuples:
    // array/immutable.py:204-205
    // @arc4.abimethod()
    // def test_bit_packed_tuples(self) -> None:
    proto 0 0
    // array/immutable.py:206
    // arr2 = ImmutableArray[TwoBoolTuple]()
    bytec_2 // 0x0000
    // array/immutable.py:207-209
    // arr7 = ImmutableArray[SevenBoolTuple]()
    // arr8 = ImmutableArray[EightBoolTuple]()
    // arr9 = ImmutableArray[NineBoolTuple]()
    dupn 3
    // array/immutable.py:215
    // for i in urange(5):
    intc_0 // 0

test_bit_packed_tuples_for_header@1:
    // array/immutable.py:215
    // for i in urange(5):
    frame_dig 4
    pushint 5 // 5
    <
    bz test_bit_packed_tuples_after_for@4
    // array/immutable.py:216
    // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
    frame_dig 0
    extract 2 0
    frame_dig 4
    dup
    !
    dig 1
    intc_1 // 1
    ==
    bytec_0 // 0x00
    bytec 4 // 0x80
    uncover 3
    select
    dup
    intc_1 // 1
    dig 3
    setbit
    uncover 4
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:217-229
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    frame_dig 1
    extract 2 0
    // array/immutable.py:223
    // c=i == 2,
    dig 3
    intc_2 // 2
    ==
    // array/immutable.py:224
    // d=i == 3,
    dig 4
    pushint 3 // 3
    ==
    // array/immutable.py:225
    // e=i == 4,
    dig 5
    pushint 4 // 4
    ==
    // array/immutable.py:226
    // f=i == 5,
    dig 6
    pushint 5 // 5
    ==
    // array/immutable.py:227
    // g=i == 6,
    dig 7
    pushint 6 // 6
    ==
    // array/immutable.py:220
    // bar=i + 1,
    dig 8
    intc_1 // 1
    +
    // array/immutable.py:219
    // foo=i,
    dig 9
    itob
    uncover 8
    concat
    pushint 65 // 65
    uncover 9
    setbit
    pushint 66 // 66
    uncover 7
    setbit
    pushint 67 // 67
    uncover 6
    setbit
    pushint 68 // 68
    uncover 5
    setbit
    pushint 69 // 69
    uncover 4
    setbit
    pushint 70 // 70
    uncover 3
    setbit
    dig 1
    itob
    dup2
    concat
    // array/immutable.py:217-229
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    uncover 4
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 1
    // array/immutable.py:230-243
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    frame_dig 2
    extract 2 0
    // array/immutable.py:241
    // h=i == 7,
    dig 4
    pushint 7 // 7
    ==
    // array/immutable.py:232
    // foo=i,
    uncover 3
    pushint 71 // 71
    uncover 2
    setbit
    dup
    dig 3
    concat
    // array/immutable.py:230-243
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    uncover 2
    swap
    concat
    dup
    len
    pushint 17 // 17
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 2
    // array/immutable.py:244-258
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    frame_dig 3
    extract 2 0
    // array/immutable.py:256
    // i=i == 8,
    uncover 4
    intc_3 // 8
    ==
    // array/immutable.py:246
    // foo=i,
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    uncover 2
    swap
    concat
    uncover 2
    concat
    // array/immutable.py:244-258
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    concat
    dup
    len
    pushint 18 // 18
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 3
    frame_bury 4
    b test_bit_packed_tuples_for_header@1

test_bit_packed_tuples_after_for@4:
    // array/immutable.py:260
    // assert arr2.length == 5
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:261
    // assert arr7.length == 5
    frame_dig 1
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:262
    // assert arr8.length == 5
    frame_dig 2
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:263
    // assert arr9.length == 5
    frame_dig 3
    dup
    intc_0 // 0
    extract_uint16
    pushint 5 // 5
    ==
    assert
    // array/immutable.py:264
    // self.bool2 = arr2
    pushbytes "bool2"
    uncover 4
    app_global_put
    // array/immutable.py:265
    // self.bool7 = arr7
    pushbytes "bool7"
    uncover 3
    app_global_put
    // array/immutable.py:266
    // self.bool8 = arr8
    pushbytes "bool8"
    uncover 2
    app_global_put
    // array/immutable.py:267
    // self.bool9 = arr9
    pushbytes "bool9"
    swap
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: bytes, arr2: bytes, arr3: bytes, arr4: bytes) -> uint64, uint64, uint64, uint64:
sum_uints_and_lengths_and_trues:
    // array/immutable.py:269-276
    // @arc4.abimethod()
    // def sum_uints_and_lengths_and_trues(
    //     self,
    //     arr1: ImmutableArray[UInt64],
    //     arr2: ImmutableArray[bool],
    //     arr3: ImmutableArray[MyTuple],
    //     arr4: ImmutableArray[MyDynamicSizedTuple],
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 4 4
    bytec_1 // ""
    dupn 8
    // array/immutable.py:277
    // sum1 = sum2 = sum3 = sum4 = UInt64()
    intc_0 // 0
    dupn 3
    // array/immutable.py:278
    // for i in arr1:
    frame_dig -4
    intc_0 // 0
    extract_uint16
    intc_0 // 0

sum_uints_and_lengths_and_trues_for_header@1:
    // array/immutable.py:278
    // for i in arr1:
    frame_dig 14
    frame_dig 13
    <
    bz sum_uints_and_lengths_and_trues_after_for@4
    frame_dig -4
    extract 2 0
    frame_dig 14
    dup
    cover 2
    intc_3 // 8
    *
    extract_uint64
    // array/immutable.py:279
    // sum1 += i
    frame_dig 12
    +
    frame_bury 12
    intc_1 // 1
    +
    frame_bury 14
    b sum_uints_and_lengths_and_trues_for_header@1

sum_uints_and_lengths_and_trues_after_for@4:
    // array/immutable.py:280
    // for b in arr2:
    frame_dig -3
    intc_0 // 0
    extract_uint16
    frame_bury 0
    intc_0 // 0
    frame_bury 4

sum_uints_and_lengths_and_trues_for_header@5:
    // array/immutable.py:280
    // for b in arr2:
    frame_dig 4
    frame_dig 0
    <
    bz sum_uints_and_lengths_and_trues_after_for@10
    frame_dig -3
    extract 2 0
    frame_dig 4
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    frame_dig 11
    frame_bury 6
    // array/immutable.py:281
    // if b:
    bz sum_uints_and_lengths_and_trues_after_if_else@8
    // array/immutable.py:282
    // sum2 += 1
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 6

sum_uints_and_lengths_and_trues_after_if_else@8:
    frame_dig 6
    frame_bury 11
    frame_dig 4
    intc_1 // 1
    +
    frame_bury 4
    b sum_uints_and_lengths_and_trues_for_header@5

sum_uints_and_lengths_and_trues_after_for@10:
    // array/immutable.py:283
    // for tup in arr3:
    frame_dig -2
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 5

sum_uints_and_lengths_and_trues_for_header@11:
    // array/immutable.py:283
    // for tup in arr3:
    frame_dig 5
    frame_dig 1
    <
    bz sum_uints_and_lengths_and_trues_after_for@18
    frame_dig -2
    extract 2 0
    frame_dig 5
    pushint 9 // 9
    *
    dup2
    pushint 9 // 9
    extract3 // on error: Index access is out of bounds
    cover 2
    extract_uint64
    dig 1
    pushint 64 // 64
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    uncover 2
    pushint 65 // 65
    getbit
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    frame_bury 8
    // array/immutable.py:284
    // sum3 += tup.foo
    frame_dig 10
    uncover 2
    +
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:285
    // if tup.bar:
    bz sum_uints_and_lengths_and_trues_after_if_else@14
    // array/immutable.py:286
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7

sum_uints_and_lengths_and_trues_after_if_else@14:
    frame_dig 7
    dup
    frame_bury 10
    frame_bury 7
    // array/immutable.py:287
    // if tup.baz:
    frame_dig 8
    bz sum_uints_and_lengths_and_trues_after_if_else@16
    // array/immutable.py:288
    // sum3 += 1
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 7

sum_uints_and_lengths_and_trues_after_if_else@16:
    frame_dig 7
    frame_bury 10
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b sum_uints_and_lengths_and_trues_for_header@11

sum_uints_and_lengths_and_trues_after_for@18:
    // array/immutable.py:289
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_bury 2
    intc_0 // 0
    frame_bury 3

sum_uints_and_lengths_and_trues_for_header@19:
    // array/immutable.py:289
    // for idx, dyn_tup in uenumerate(arr4):
    frame_dig 3
    frame_dig 2
    <
    bz sum_uints_and_lengths_and_trues_after_for@22
    frame_dig -1
    extract 2 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dig 2
    intc_1 // 1
    +
    frame_dig 2
    dig 1
    - // on error: Index access is out of bounds
    dig 3
    len
    dig 2
    intc_2 // 2
    *
    dig 5
    swap
    extract_uint16
    uncover 2
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint64
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    len
    uncover 3
    cover 2
    substring3
    extract 2 0
    // array/immutable.py:290
    // sum4 += dyn_tup.foo
    frame_dig 9
    uncover 2
    +
    // array/immutable.py:291
    // sum4 += dyn_tup.bar.bytes.length
    swap
    len
    swap
    dig 1
    +
    frame_bury 9
    // array/immutable.py:292
    // assert dyn_tup.bar.bytes.length == idx, "expected string length to match index"
    uncover 2
    ==
    assert // expected string length to match index
    frame_bury 3
    b sum_uints_and_lengths_and_trues_for_header@19

sum_uints_and_lengths_and_trues_after_for@22:
    // array/immutable.py:294
    // return sum1, sum2, sum3, sum4
    frame_dig 12
    frame_dig 11
    frame_dig 10
    frame_dig 9
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> bytes:
test_uint64_return:
    // array/immutable.py:296-297
    // @arc4.abimethod()
    // def test_uint64_return(self, append: UInt64) -> ImmutableArray[UInt64]:
    proto 1 1
    // array/immutable.py:298
    // arr = ImmutableArray(UInt64(1), UInt64(2), UInt64(3))
    pushbytes 0x0003000000000000000100000000000000020000000000000003
    // array/immutable.py:299
    // for i in urange(append):
    intc_0 // 0

test_uint64_return_for_header@1:
    // array/immutable.py:299
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_uint64_return_after_for@4
    // array/immutable.py:300
    // arr = arr.append(i)
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    cover 2
    itob
    concat
    dup
    len
    intc_3 // 8
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:299
    // for i in urange(append):
    intc_1 // 1
    +
    frame_bury 1
    b test_uint64_return_for_header@1

test_uint64_return_after_for@4:
    // array/immutable.py:301
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bytes:
test_bool_return:
    // array/immutable.py:303-304
    // @arc4.abimethod()
    // def test_bool_return(self, append: UInt64) -> ImmutableArray[bool]:
    proto 1 1
    // array/immutable.py:305
    // arr = ImmutableArray(True, False, True, False, True)
    bytec_2 // 0x0000
    pushbytes 0x8000800080
    pushint 5 // 5
    intc_3 // 8
    callsub dynamic_array_concat_bits
    // array/immutable.py:306
    // for i in urange(append):
    intc_0 // 0

test_bool_return_for_header@1:
    // array/immutable.py:306
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_bool_return_after_for@4
    // array/immutable.py:307
    // arr = arr.append(i % 2 == 0)
    frame_dig 1
    dup
    intc_2 // 2
    %
    !
    bytec_0 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig 0
    swap
    intc_1 // 1
    intc_3 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0
    // array/immutable.py:306
    // for i in urange(append):
    intc_1 // 1
    +
    frame_bury 1
    b test_bool_return_for_header@1

test_bool_return_after_for@4:
    // array/immutable.py:308
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> bytes:
test_tuple_return:
    // array/immutable.py:310-311
    // @arc4.abimethod()
    // def test_tuple_return(self, append: UInt64) -> ImmutableArray[MyTuple]:
    proto 1 1
    // array/immutable.py:312
    // arr = ImmutableArray(MyTuple(UInt64(), True, False))
    pushbytes 0x0001000000000000000080
    // array/immutable.py:313
    // for i in urange(append):
    intc_0 // 0

test_tuple_return_for_header@1:
    // array/immutable.py:313
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_tuple_return_after_for@4
    // array/immutable.py:314
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
    frame_dig 0
    extract 2 0
    frame_dig 1
    dup
    intc_2 // 2
    %
    !
    dig 1
    pushint 3 // 3
    %
    !
    dig 2
    itob
    bytec_0 // 0x00
    bytec 4 // 0x80
    uncover 4
    select
    concat
    pushint 65 // 65
    uncover 2
    setbit
    uncover 2
    swap
    concat
    dup
    len
    pushint 9 // 9
    /
    itob
    extract 6 2
    swap
    concat
    frame_bury 0
    // array/immutable.py:313
    // for i in urange(append):
    intc_1 // 1
    +
    frame_bury 1
    b test_tuple_return_for_header@1

test_tuple_return_after_for@4:
    // array/immutable.py:315
    // return arr
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> bytes:
test_dynamic_tuple_return:
    // array/immutable.py:317-318
    // @arc4.abimethod()
    // def test_dynamic_tuple_return(self, append: UInt64) -> ImmutableArray[MyDynamicSizedTuple]:
    proto 1 1
    // array/immutable.py:319
    // arr = ImmutableArray(MyDynamicSizedTuple(UInt64(), String("Hello")))
    intc_0 // 0
    bytec_1 // 0x
    intc_1 // 1
    pushbytes 0x00020000000000000000000a000548656c6c6f
    callsub dynamic_array_concat_dynamic_element
    // array/immutable.py:320
    // for i in urange(append):
    intc_0 // 0

test_dynamic_tuple_return_for_header@1:
    // array/immutable.py:320
    // for i in urange(append):
    frame_dig 1
    frame_dig -1
    <
    bz test_dynamic_tuple_return_after_for@4
    // array/immutable.py:321
    // arr = arr.append(MyDynamicSizedTuple(i, times(i)))
    frame_dig 1
    dup
    callsub times
    dig 1
    itob
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec 5 // 0x000a
    concat
    swap
    concat
    bytec 6 // 0x0002
    swap
    concat
    frame_dig 0
    dup
    intc_0 // 0
    extract_uint16
    swap
    extract 2 0
    intc_1 // 1
    uncover 3
    callsub dynamic_array_concat_dynamic_element
    frame_bury 0
    // array/immutable.py:320
    // for i in urange(append):
    intc_1 // 1
    +
    frame_bury 1
    b test_dynamic_tuple_return_for_header@1

test_dynamic_tuple_return_after_for@4:
    // array/immutable.py:322
    // return arr
    retsub
