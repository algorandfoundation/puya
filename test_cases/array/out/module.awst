contract AbiCallContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(arr: stack_array<uint64>, app: application): void
  {
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("dont_call(uint64[])uint64"), arc4_encode(arr, arc4.dynamic_array<arc4.uint64>)), ApplicationID=app))
    nested_arr: stack_array<stack_array<uint64>> = new stack_array<stack_array<uint64>>()
    nested_arr: stack_array<stack_array<uint64>> = nested_arr + (arr)
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("dont_call(uint64[][])uint64"), arc4_encode(nested_arr, arc4.dynamic_array<arc4.dynamic_array<arc4.uint64>>)), ApplicationID=app))
    indirect_nested_arr: stack_array<test_cases.array.unused_opt_allowed.MyTuple> = new stack_array<test_cases.array.unused_opt_allowed.MyTuple>()
    indirect_nested_arr: stack_array<test_cases.array.unused_opt_allowed.MyTuple> = indirect_nested_arr + ((arr, arr.length))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("dont_call((uint64[],uint64)[])uint64"), arc4_encode(indirect_nested_arr, arc4.dynamic_array<arc4.tuple<arc4.dynamic_array<arc4.uint64>,arc4.uint64>>)), ApplicationID=app))
    address_arr: stack_array<arc4.static_array<arc4.uint8, 32>> = new stack_array<arc4.static_array<arc4.uint8, 32>>()
    address_arr: stack_array<arc4.static_array<arc4.uint8, 32>> = address_arr + (reinterpret_cast<arc4.static_array<arc4.uint8, 32>>(txn<Sender>()))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("dont_call(address[])void"), arc4_encode(address_arr, arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>)), ApplicationID=app))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(reinterpret_cast<bytes>(arc4_encode(address_arr, arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>))), ApplicationID=app))
  }
  
  baremethod test_cases.array.unused_opt_allowed.AbiCallContract.__algopy_default_create(): void
  {
  }
}

contract Contract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.array.uint64.Contract.test_array(): void
  {
    arr: ref_array<uint64> = new ref_array<uint64>()
    assert(arr.length == 0u)
    arr.extend((42u))
    assert(arr.length == 1u)
    assert(arr[arr.length - 1u] == 42u)
    test_cases.array.uint64.add_x(arr, 5u)
    assert(arr.length == 6u)
    assert(arr[arr.length - 1u] == 4u)
    test_cases.array.uint64.pop_x(arr, x=3u, expected=4u)
    assert(arr.length == 3u)
    assert(arr[arr.length - 1u] == 1u)
    arr.extend((43u))
    assert(arr.length == 4u)
    assert(arr[arr.length - 1u] == 43u)
    assert(arr[0u] == 42u)
    test_cases.array.uint64.add_x(arr, 10u)
    assert(arr.length == 14u)
    assert(arr[arr.length - 1u] == 9u)
    arr.extend((44u))
    assert(arr.length == 15u)
    assert(arr[arr.length - 1u] == 44u)
    test_cases.array.uint64.return_ref(arr, arr)[0u] += 2u
    assert(arr.length == 17u)
    assert(arr[0u] == 44u)
    assert(arr[arr.length - 2u] == 99u)
    assert(arr[arr.length - 1u] == 100u)
  }
  
  abimethod test_cases.array.uint64.Contract.test_array_extend(): void
  {
    arr: ref_array<uint64> = new ref_array<uint64>()
    test_cases.array.uint64.add_x(arr, 1u)
    arr2: ref_array<uint64> = new ref_array<uint64>()
    arr2.extend((1u))
    arr2.extend((2u))
    arr2.extend((3u))
    arr.extend(arr2)
    assert(arr.length == 4u)
  }
  
  abimethod test_cases.array.uint64.Contract.test_array_multiple_append(): void
  {
    arr: ref_array<uint64> = new ref_array<uint64>()
    test_cases.array.uint64.add_x(arr, 1u)
    arr.extend((1u))
    arr.extend((2u))
    arr.extend((3u))
    assert(arr.length == 4u)
  }
  
  abimethod test_cases.array.uint64.Contract.overhead(): void
  {
  }
  
  abimethod test_cases.array.uint64.Contract.test_array_too_long(): void
  {
    array: ref_array<uint64> = new ref_array<uint64>()
    for i in range(0u, 512u, 1u) {
      array.extend((i))
    }
    assert(array.length == 512u, comment="array is expected length")
    array.extend((512u))
  }
  
  abimethod test_cases.array.uint64.Contract.test_array_copy_and_extend(): void
  {
    array: ref_array<uint64> = new ref_array<uint64>()
    for i in range(0u, 5u, 1u) {
      array.extend((i))
    }
    array2: ref_array<uint64> = array.copy()
    array.extend((5u))
    assert(array.length == 6u)
    assert(array[array.length - 1u] == 5u, comment="expected 5")
    assert(array2.length == 5u)
    assert(array2[array2.length - 1u] == 4u, comment="expected 4")
    array.extend(array2)
    assert(array.length == 11u)
    assert(array2.length == 5u)
    assert(array[array.length - 1u] == 4u, comment="expected 4")
    assert(array[4u] == 4u, comment="expected 4")
    assert(array[5u] == 5u, comment="expected 4")
    assert(array[6u] == 0u, comment="expected 4")
  }
  
  abimethod test_cases.array.uint64.Contract.test_array_evaluation_order(): void
  {
    arr: ref_array<uint64> = new ref_array<uint64>()
    arr.extend((3u))
    test_cases.array.uint64.append_length_and_return(arr).extend(test_cases.array.uint64.append_length_and_return(arr))
    assert(arr.length == 6u)
    assert(arr[0u] == 3u)
    assert(arr[1u] == 1u)
    assert(arr[2u] == 2u)
    assert(arr[3u] == 3u)
    assert(arr[4u] == 1u)
    assert(arr[5u] == 2u)
    arr[test_cases.array.uint64.append_length_and_return(arr)[0u]]: uint64 = test_cases.array.uint64.append_length_and_return(arr)[test_cases.array.uint64.append_length_and_return(arr).length - 1u]
    assert(arr.length == 8u)
    assert(arr[6u] == 6u)
    assert(arr[7u] == 7u)
    assert(arr[3u] == 6u)
  }
  
  abimethod test_cases.array.uint64.Contract.test_allocations(num: uint64): void
  {
    for _i in range(0u, num, 1u) {
      alloc_test: ref_array<uint64> = new ref_array<uint64>()
      test_cases.array.uint64.add_x(alloc_test, 1u)
    }
  }
  
  abimethod test_cases.array.uint64.Contract.test_iteration(): void
  {
    arr: ref_array<uint64> = new ref_array<uint64>()
    for val in range(0u, 5u, 1u) {
      arr.extend((val))
    }
    assert(arr.length == 5u, comment="expected array of length 5")
    last: uint64 = 0u
    for value in arr {
      assert(value >= last, comment="array is not sorted")
      last: uint64 = value
    }
    for (idx, value) in enumerate(arr) {
      assert(value == idx, comment="incorrect array value")
    }
    for value in reversed(arr) {
      assert(value <= last, comment="array is not sorted")
      last: uint64 = value
    }
    arc4_arr: arc4.dynamic_array<arc4.uint64> = new arc4.dynamic_array<arc4.uint64>()
    native_arr: ref_array<arc4.uint64> = new ref_array<arc4.uint64>()
    for i in range(0u, 5u, 1u) {
      arc4_arr.extend((arc4_encode(i, arc4.uint64)))
      native_arr.extend((arc4_encode(i, arc4.uint64)))
    }
    combined_arr: arc4.dynamic_array<arc4.uint64> = arc4_arr + native_arr
    assert(combined_arr.length == 10u)
    assert(reinterpret_cast<biguint>(combined_arr[0u]) == reinterpret_cast<biguint>(0_arc4u64))
    assert(reinterpret_cast<biguint>(combined_arr[4u]) == reinterpret_cast<biguint>(4_arc4u64))
    assert(reinterpret_cast<biguint>(combined_arr[5u]) == reinterpret_cast<biguint>(0_arc4u64))
    assert(reinterpret_cast<biguint>(combined_arr[9u]) == reinterpret_cast<biguint>(4_arc4u64))
  }
  
  abimethod test_cases.array.uint64.Contract.test_quicksort(): void
  {
    rnd: ref_array<uint64> = new ref_array<uint64>()
    for b in reinterpret_cast<bytes>(txn<Sender>()) {
      rnd.extend((btoi(b)))
    }
    assert(rnd.length == 32u, comment="expected array of length 32")
    test_cases.array.uint64.quicksort_window(rnd, 0u, rnd.length - 1u)
    last: uint64 = 0u
    for value in rnd {
      assert(value >= last, comment="array is not sorted")
      last: uint64 = value
    }
  }
  
  baremethod test_cases.array.uint64.Contract.__algopy_default_create(): void
  {
  }
}

subroutine quicksort_window(arr: ref_array<uint64>, window_left: uint64, window_right: uint64): void
{
  left: uint64 = window_left
  right: uint64 = window_right
  pivot: uint64 = arr[window_left + window_right // 2u]
  while (true) {
    while (arr[left] < pivot) {
      left += 1u
    }
    while (pivot < arr[right]) {
      if (right == 0u) {
        goto after_loop_L186
      }
      right -= 1u
    }
    if (left < right) {
      (arr[left], arr[right]): tuple<uint64,uint64> = (arr[right], arr[left])
      left += 1u
      if (right == 0u) {
        break
      }
      right -= 1u
      if (left <= right) {
        continue
      }
      break
    }
    if (left == right) {
      left += 1u
      if (right != 0u) {
        right -= 1u
      }
      break
    }
    after_loop_L186:
    break
  }
  if (window_left < right) {
    test_cases.array.uint64.quicksort_window(arr, window_left, right)
  }
  if (left < window_right) {
    test_cases.array.uint64.quicksort_window(arr, left, window_right)
  }
}

subroutine return_ref(arr: ref_array<uint64>, arr2: ref_array<uint64>): ref_array<uint64>
{
  arr.extend((99u))
  arr2.extend((100u))
  return arr
}

subroutine add_x(arr: ref_array<uint64>, x: uint64): void
{
  for i in range(0u, x, 1u) {
    arr.extend((i))
  }
}

subroutine pop_x(arr: ref_array<uint64>, x: uint64, expected: uint64): void
{
  for _i in range(0u, x, 1u) {
    popped: uint64 = arr.pop()
    assert(popped == expected)
    expected -= 1u
  }
}

subroutine append_length_and_return(arr: ref_array<uint64>): ref_array<uint64>
{
  arr.extend((arr.length))
  return arr
}

subroutine do_something_with_array(arr: ref_array<uint64>): void
{
  arr.extend((1u))
}

contract StaticSizeContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  globals {
    ['count']: uint64
  }
  
  subroutine test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.array.static_size.StaticSizeContract.__init__(): void
  {
    GlobalState['count']: uint64 = 0u
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_array(x1: arc4.uint64, y1: uint64, x2: arc4.uint64, y2: uint64): uint64
  {
    GlobalState['count']: uint64 = 0u
    path: ref_array<test_cases.array.static_size.Point> = new ref_array<test_cases.array.static_size.Point>((0_arc4u64, 0u, this::xtra()), (x1, y1, this::xtra()), (x2, y2, this::xtra()))
    for i in range(0u, 3u, 1u) {
      assert(path[i].other.b == i + 1u)
      assert(reinterpret_cast<biguint>(path[i].other.d.foo) == itob(i + 2u))
      assert(reinterpret_cast<biguint>(path[i].other.d.bar) == itob(i + 1u * i + 1u))
    }
    Box['a']: stack_array<test_cases.array.static_size.Point> = new stack_array<test_cases.array.static_size.Point>() + path
    return test_cases.array.static_size.path_length(path)
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(some_more: tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>): stack_array<test_cases.array.static_size.More>
  {
    arr: ref_array<test_cases.array.static_size.More> = new ref_array<test_cases.array.static_size.More>()
    arr.extend(some_more)
    last: test_cases.array.static_size.More = arr[arr.length - 1u]
    assert(last == some_more[1])
    result: stack_array<test_cases.array.static_size.More> = new stack_array<test_cases.array.static_size.More>() + arr
    assert(result[result.length - 1u] == last)
    return result
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(some_more: arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>): stack_array<test_cases.array.static_size.More>
  {
    arr: ref_array<test_cases.array.static_size.More> = new ref_array<test_cases.array.static_size.More>()
    arr.extend(some_more)
    return new stack_array<test_cases.array.static_size.More>() + arr
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_bool_array(length: uint64): uint64
  {
    arr: ref_array<bool> = new ref_array<bool>()
    assert(arr.length == 0u)
    for i in range(1u, length + 1u, 1u) {
      arr.extend((i % 2u == 0u))
    }
    assert(arr.length == length, comment="expected correct length")
    count: uint64 = 0u
    for val in arr {
      if (val) {
        count += 1u
      }
    }
    return count
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(length: uint64): arc4.dynamic_array<arc4.uint64>
  {
    arr: ref_array<arc4.uint64> = new ref_array<arc4.uint64>()
    assert(arr.length == 0u)
    for i in range(1u, length + 1u, 1u) {
      arr.extend((arc4_encode(i, arc4.uint64)))
    }
    assert(arr.length == length, comment="expected correct length")
    count: uint64 = 0u
    for val in arr {
      if (val != hex<"0000000000000000">) {
        count += 1u
      }
    }
    arc4_arr: arc4.dynamic_array<arc4.uint64> = new arc4.dynamic_array<arc4.uint64>()
    arc4_arr.extend(arr)
    return arc4_arr
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.sum_array(arc4_arr: arc4.dynamic_array<arc4.uint64>): uint64
  {
    arr: ref_array<arc4.uint64> = new ref_array<arc4.uint64>()
    arr.extend(arc4_arr)
    total: uint64 = 0u
    for item in arr {
      total += arc4_decode(item, uint64)
    }
    return total
  }
  
  subroutine test_cases.array.static_size.StaticSizeContract.xtra(): test_cases.array.static_size.Xtra
  {
    GlobalState['count'] += 1u
    return (txn<NumAppArgs>(), GlobalState['count'], txn<Sender>(), this::more(), itob(GlobalState['count']))
  }
  
  subroutine test_cases.array.static_size.StaticSizeContract.more(): test_cases.array.static_size.More
  {
    return new test_cases.array.static_size.More(foo=arc4_encode(GlobalState['count'] + 1u, arc4.uint64), bar=arc4_encode(GlobalState['count'] * GlobalState['count'], arc4.uint64))
  }
  
  abimethod test_cases.array.static_size.StaticSizeContract.test_arc4_bool(): stack_array<arc4.bool>
  {
    arr: ref_array<arc4.bool> = new ref_array<arc4.bool>()
    arr.extend((arc4_encode(txn<Sender>() == txn<Receiver>(), arc4.bool)))
    arr.extend((arc4_encode(txn<Sender>() != txn<Receiver>(), arc4.bool)))
    dyn_arr: arc4.dynamic_array<arc4.bool> = new arc4.dynamic_array<arc4.bool>()
    dyn_arr.extend(arr)
    assert(dyn_arr.length == 2u, comment="expected correct length")
    assert(len(reinterpret_cast<bytes>(dyn_arr)) == 3u, comment="expected 3 bytes")
    assert(arc4_decode(dyn_arr[0u], bool) == txn<Sender>() == txn<Receiver>(), comment="expected correct value at 0")
    assert(arc4_decode(dyn_arr[1u], bool) == txn<Sender>() != txn<Receiver>(), comment="expected correct value at 1")
    return new stack_array<arc4.bool>() + arr
  }
  
  baremethod test_cases.array.static_size.StaticSizeContract.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
}

subroutine path_length(path: ref_array<test_cases.array.static_size.Point>): uint64
{
  last_point: test_cases.array.static_size.Point = path[0u]
  length: uint64 = 0u
  for point_idx in range(1u, path.length, 1u) {
    point: test_cases.array.static_size.Point = path[point_idx]
    if (reinterpret_cast<biguint>(point.x) < reinterpret_cast<biguint>(last_point.x)) {
      dx: uint64 = arc4_decode(last_point.x, uint64) - arc4_decode(point.x, uint64)
    } else {
      dx: uint64 = arc4_decode(point.x, uint64) - arc4_decode(last_point.x, uint64)
    }
    if (point.y < last_point.y) {
      dy: uint64 = last_point.y - point.y
    } else {
      dy: uint64 = point.y - last_point.y
    }
    length += sqrt(dx * dx + dy * dy)
  }
  return length
}

contract ImmutableArrayContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  globals {
    ['a']: stack_array<uint64>
    ['g']: stack_array<bool>
    ['c']: stack_array<tuple<uint64,uint64>>
    ['d']: stack_array<test_cases.array.immutable.MyTuple>
    ['e']: stack_array<tuple<uint64,bytes>>
    ['f']: stack_array<test_cases.array.immutable.MyDynamicSizedTuple>
    ['bool2']: stack_array<test_cases.array.immutable.TwoBoolTuple>
    ['bool7']: stack_array<test_cases.array.immutable.SevenBoolTuple>
    ['bool8']: stack_array<test_cases.array.immutable.EightBoolTuple>
    ['bool9']: stack_array<test_cases.array.immutable.NineBoolTuple>
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_uint64_array(): void
  {
    arr: stack_array<uint64> = new stack_array<uint64>()
    assert(arr.length == 0u)
    arr: stack_array<uint64> = arr + (42u)
    assert(arr.length == 1u)
    assert(arr[arr.length - 1u] == 42u)
    arr: stack_array<uint64> = test_cases.array.immutable.add_x(arr, 5u)
    assert(arr.length == 6u)
    assert(arr[arr.length - 1u] == 4u)
    arr: stack_array<uint64> = arr + (43u)
    assert(arr.length == 7u)
    assert(arr[arr.length - 1u] == 43u)
    assert(arr[0u] == 42u)
    arr: stack_array<uint64> = test_cases.array.immutable.pop_x(arr, 3u)
    assert(arr.length == 4u)
    assert(arr[arr.length - 1u] == 2u)
    arr: stack_array<uint64> = test_cases.array.immutable.add_x(arr, 10u)
    assert(arr.length == 14u)
    assert(arr[arr.length - 1u] == 9u)
    arr: stack_array<uint64> = arr + (44u)
    assert(arr.length == 15u)
    assert(arr[arr.length - 1u] == 44u)
    arr: stack_array<uint64> = arr.replace(2u, 23u)
    assert(arr.length == 15u)
    assert(arr[2u] == 23u)
    GlobalState['a']: stack_array<uint64> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_biguint_array(): void
  {
    arr: stack_array<biguint> = new stack_array<biguint>()
    assert(arr.length == 0u)
    arr: stack_array<biguint> = arr + (itob(txn<NumAppArgs>() - 1u))
    assert(arr.length == 1u)
    assert(arr[arr.length - 1u] == 0n)
    arr: stack_array<biguint> = test_cases.array.immutable.add_xb(arr, 5u)
    assert(arr.length == 6u)
    assert(arr[arr.length - 1u] == 4n)
    arr: stack_array<biguint> = arr + (13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095n b- itob(txn<NumAppArgs>()))
    assert(arr.length == 7u)
    assert(arr[arr.length - 1u] == 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084094n)
    assert(arr[0u] == 0n)
    arr: stack_array<biguint> = arr + (13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095n)
    assert(arr.length == 8u)
    assert(arr[arr.length - 1u] == 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095n)
    assert(arr[0u] == 0n)
    Box[hex<"62696775696E74">]: stack_array<biguint> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64): void
  {
    arr: stack_array<bool> = new stack_array<bool>()
    assert(arr.length == 0u)
    for i in range(0u, length, 1u) {
      arr: stack_array<bool> = arr + (i == txn<NumAppArgs>())
    }
    assert(arr.length == length)
    if (length > 0u) {
      assert(!(arr[0u]), comment="expected element 0 to be False")
    }
    if (length > 1u) {
      assert(!(arr[1u]), comment="expected element 1 to be False")
    }
    if (length > 2u) {
      assert(arr[2u], comment="expected element 2 to be True")
    }
    if (length > 3u) {
      assert(!(arr[length - 1u]), comment="expected last element to be False")
    }
    GlobalState['g']: stack_array<bool> = arr
    if (length != 0u) {
      arr: stack_array<bool> = arr[:-1]
      assert(arr.length == length - 1u)
    }
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array(): void
  {
    arr: stack_array<tuple<uint64,uint64>> = new stack_array<tuple<uint64,uint64>>()
    assert(arr.length == 0u)
    for i in range(0u, 5u, 1u) {
      arr: stack_array<tuple<uint64,uint64>> = arr + ((i + 1u, i + 2u))
    }
    assert(arr.length == 5u)
    assert(&&(SINGLE_EVAL(id=0, source=arr[0u])[0] == 1u, SINGLE_EVAL(id=0)[1] == 2u))
    assert(&&(SINGLE_EVAL(id=1, source=arr[arr.length - 1u])[0] == 5u, SINGLE_EVAL(id=1)[1] == 6u))
    arr: stack_array<tuple<uint64,uint64>> = arr[:-1]
    assert(arr.length == 4u)
    assert(&&(SINGLE_EVAL(id=2, source=arr[0u])[0] == 1u, SINGLE_EVAL(id=2)[1] == 2u))
    assert(&&(SINGLE_EVAL(id=3, source=arr[arr.length - 1u])[0] == 4u, SINGLE_EVAL(id=3)[1] == 5u))
    GlobalState['c']: stack_array<tuple<uint64,uint64>> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array(): void
  {
    arr: stack_array<test_cases.array.immutable.MyTuple> = new stack_array<test_cases.array.immutable.MyTuple>()
    assert(arr.length == 0u)
    for i in range(0u, 5u, 1u) {
      arr: stack_array<test_cases.array.immutable.MyTuple> = arr + ((i, i % 2u == 0u, i * 3u % 2u == 0u))
    }
    assert(arr.length == 5u)
    (foo, bar, baz): tuple<uint64,bool,bool> = arr[0u]
    assert(foo == 0u)
    assert(bar)
    assert(baz)
    GlobalState['d']: stack_array<test_cases.array.immutable.MyTuple> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array(): void
  {
    arr: stack_array<tuple<uint64,bytes>> = new stack_array<tuple<uint64,bytes>>()
    assert(arr.length == 0u)
    for i in range(0u, 5u, 1u) {
      arr: stack_array<tuple<uint64,bytes>> = arr + ((i + 1u, bzero(i)))
    }
    assert(arr.length == 5u)
    for i in range(0u, 5u, 1u) {
      assert(arr[i][0] == i + 1u, comment="expected 1st element to be correct")
      assert(len(arr[i][1]) == i, comment="expected 2nd element to be correct")
    }
    arr: stack_array<tuple<uint64,bytes>> = arr[:-1]
    assert(arr.length == 4u)
    assert(&&(SINGLE_EVAL(id=4, source=arr[0u])[0] == 1u, SINGLE_EVAL(id=4)[1] == bzero(0u)), comment="expected 1, 0")
    assert(&&(SINGLE_EVAL(id=5, source=arr[arr.length - 1u])[0] == 4u, SINGLE_EVAL(id=5)[1] == bzero(3u)), comment="expected 4, 3")
    GlobalState['e']: stack_array<tuple<uint64,bytes>> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array(): void
  {
    arr: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = new stack_array<test_cases.array.immutable.MyDynamicSizedTuple>()
    assert(arr.length == 0u)
    for i in range(0u, 5u, 1u) {
      arr: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = arr + ((i + 1u, test_cases.array.immutable.times(i)))
    }
    assert(arr.length == 5u)
    for i in range(0u, 5u, 1u) {
      assert(arr[i][0] == i + 1u, comment="expected 1st element to be correct")
      assert(arr[i][1] == test_cases.array.immutable.times(i), comment="expected 2nd element to be correct")
    }
    arr: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = arr[:-1]
    assert(arr.length == 4u)
    assert(&&(SINGLE_EVAL(id=6, source=arr[0u])[0] == SINGLE_EVAL(id=7, source=(1u, ''))[0], SINGLE_EVAL(id=6)[1] == SINGLE_EVAL(id=7)[1]), comment="expected 1, 0")
    assert(&&(SINGLE_EVAL(id=8, source=arr[arr.length - 1u])[0] == SINGLE_EVAL(id=9, source=(4u, '   '))[0], SINGLE_EVAL(id=8)[1] == SINGLE_EVAL(id=9)[1]), comment="expected 4, 3")
    GlobalState['f']: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: stack_array<uint64>): void
  {
    log(reinterpret_cast<bytes>(arc4_encode(arr, arc4.dynamic_array<arc4.uint64>)))
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: stack_array<uint64>): void
  {
    emit('emit_test(uint64[])', new emit_test(field1=arc4_encode(arr, arc4.dynamic_array<arc4.uint64>)))
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: stack_array<stack_array<uint64>>): stack_array<uint64>
  {
    for i in range(0u, arr_to_add, 1u) {
      extra_arr: stack_array<uint64> = new stack_array<uint64>()
      for j in range(0u, i, 1u) {
        extra_arr: stack_array<uint64> = extra_arr + (j)
      }
      arr: stack_array<stack_array<uint64>> = arr + (extra_arr)
    }
    totals: stack_array<uint64> = new stack_array<uint64>()
    for inner_arr in arr {
      totals: stack_array<uint64> = totals + (test_cases.array.immutable.sum_arr(inner_arr))
    }
    return totals
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples(): void
  {
    arr2: stack_array<test_cases.array.immutable.TwoBoolTuple> = new stack_array<test_cases.array.immutable.TwoBoolTuple>()
    arr7: stack_array<test_cases.array.immutable.SevenBoolTuple> = new stack_array<test_cases.array.immutable.SevenBoolTuple>()
    arr8: stack_array<test_cases.array.immutable.EightBoolTuple> = new stack_array<test_cases.array.immutable.EightBoolTuple>()
    arr9: stack_array<test_cases.array.immutable.NineBoolTuple> = new stack_array<test_cases.array.immutable.NineBoolTuple>()
    assert(arr2.length == 0u)
    assert(arr7.length == 0u)
    assert(arr8.length == 0u)
    assert(arr9.length == 0u)
    for i in range(0u, 5u, 1u) {
      arr2: stack_array<test_cases.array.immutable.TwoBoolTuple> = arr2 + ((i == 0u, i == 1u))
      arr7: stack_array<test_cases.array.immutable.SevenBoolTuple> = arr7 + ((i, i == 0u, i == 1u, i == 2u, i == 3u, i == 4u, i == 5u, i == 6u, i + 1u))
      arr8: stack_array<test_cases.array.immutable.EightBoolTuple> = arr8 + ((i, i == 0u, i == 1u, i == 2u, i == 3u, i == 4u, i == 5u, i == 6u, i == 7u, i + 1u))
      arr9: stack_array<test_cases.array.immutable.NineBoolTuple> = arr9 + ((i, i == 0u, i == 1u, i == 2u, i == 3u, i == 4u, i == 5u, i == 6u, i == 7u, i == 8u, i + 1u))
    }
    assert(arr2.length == 5u)
    assert(arr7.length == 5u)
    assert(arr8.length == 5u)
    assert(arr9.length == 5u)
    GlobalState['bool2']: stack_array<test_cases.array.immutable.TwoBoolTuple> = arr2
    GlobalState['bool7']: stack_array<test_cases.array.immutable.SevenBoolTuple> = arr7
    GlobalState['bool8']: stack_array<test_cases.array.immutable.EightBoolTuple> = arr8
    GlobalState['bool9']: stack_array<test_cases.array.immutable.NineBoolTuple> = arr9
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: stack_array<uint64>, arr2: stack_array<bool>, arr3: stack_array<test_cases.array.immutable.MyTuple>, arr4: stack_array<test_cases.array.immutable.MyDynamicSizedTuple>): tuple<uint64,uint64,uint64,uint64>
  {
    sum4: uint64 = 0u
    sum3: uint64 = 0u
    sum2: uint64 = 0u
    sum1: uint64 = 0u
    for i in arr1 {
      sum1 += i
    }
    for b in arr2 {
      if (b) {
        sum2 += 1u
      }
    }
    for tup in arr3 {
      sum3 += tup.foo
      if (tup.bar) {
        sum3 += 1u
      }
      if (tup.baz) {
        sum3 += 1u
      }
    }
    for (idx, dyn_tup) in enumerate(arr4) {
      sum4 += dyn_tup.foo
      sum4 += len(reinterpret_cast<bytes>(dyn_tup.bar))
      assert(len(reinterpret_cast<bytes>(dyn_tup.bar)) == idx, comment="expected string length to match index")
    }
    return (sum1, sum2, sum3, sum4)
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64): stack_array<uint64>
  {
    arr: stack_array<uint64> = new stack_array<uint64>(1u, 2u, 3u)
    for i in range(0u, append, 1u) {
      arr: stack_array<uint64> = arr + (i)
    }
    return arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64): stack_array<bool>
  {
    arr: stack_array<bool> = new stack_array<bool>(true, false, true, false, true)
    for i in range(0u, append, 1u) {
      arr: stack_array<bool> = arr + (i % 2u == 0u)
    }
    return arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64): stack_array<test_cases.array.immutable.MyTuple>
  {
    arr: stack_array<test_cases.array.immutable.MyTuple> = new stack_array<test_cases.array.immutable.MyTuple>((0u, true, false))
    for i in range(0u, append, 1u) {
      arr: stack_array<test_cases.array.immutable.MyTuple> = arr + ((i, i % 2u == 0u, i % 3u == 0u))
    }
    return arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64): stack_array<test_cases.array.immutable.MyDynamicSizedTuple>
  {
    arr: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = new stack_array<test_cases.array.immutable.MyDynamicSizedTuple>((0u, 'Hello'))
    for i in range(0u, append, 1u) {
      arr: stack_array<test_cases.array.immutable.MyDynamicSizedTuple> = arr + ((i, test_cases.array.immutable.times(i)))
    }
    return arr
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: stack_array<test_cases.array.immutable.MyTuple>, append: uint64): stack_array<test_cases.array.immutable.MyTuple>
  {
    mutable: ref_array<test_cases.array.immutable.MyTuple> = new ref_array<test_cases.array.immutable.MyTuple>()
    mutable.extend(arr)
    for i in range(0u, append, 1u) {
      mutable.extend(((i, i % 2u == 0u, i % 3u == 0u)))
    }
    return new stack_array<test_cases.array.immutable.MyTuple>() + mutable
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: arc4.tuple<arc4.uint64,arc4.uint64>): stack_array<arc4.uint64>
  {
    prefix: stack_array<arc4.uint64> = new stack_array<arc4.uint64>(1_arc4u64, 2_arc4u64)
    result: stack_array<arc4.uint64> = prefix + arg
    return result
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg: tuple<arc4.uint64,arc4.uint64>): stack_array<arc4.uint64>
  {
    prefix: stack_array<arc4.uint64> = new stack_array<arc4.uint64>(1_arc4u64, 2_arc4u64)
    result: stack_array<arc4.uint64> = prefix + arg
    return result
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>): stack_array<arc4.dynamic_array<arc4.uint8>>
  {
    prefix: stack_array<arc4.dynamic_array<arc4.uint8>> = new stack_array<arc4.dynamic_array<arc4.uint8>>('a', 'b')
    result: stack_array<arc4.dynamic_array<arc4.uint8>> = prefix + arg
    return result
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg: tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>): stack_array<arc4.dynamic_array<arc4.uint8>>
  {
    prefix: stack_array<arc4.dynamic_array<arc4.uint8>> = new stack_array<arc4.dynamic_array<arc4.uint8>>('a', 'b')
    result: stack_array<arc4.dynamic_array<arc4.uint8>> = prefix + arg
    return result
  }
  
  abimethod test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: stack_array<test_cases.array.immutable.MyDynamicSizedTuple>, imm2: stack_array<test_cases.array.immutable.MyDynamicSizedTuple>): stack_array<test_cases.array.immutable.MyDynamicSizedTuple>
  {
    return imm1 + imm2
  }
  
  baremethod test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create(): void
  {
  }
}

subroutine times(n: uint64): string
{
  result: string = ''
  for _i in range(0u, n, 1u) {
    result += ' '
  }
  return result
}

subroutine add_x(arr: stack_array<uint64>, x: uint64): stack_array<uint64>
{
  for i in range(0u, x, 1u) {
    arr: stack_array<uint64> = arr + (i)
  }
  return arr
}

subroutine pop_x(arr: stack_array<uint64>, x: uint64): stack_array<uint64>
{
  for _i in range(0u, x, 1u) {
    arr: stack_array<uint64> = arr[:-1]
  }
  return arr
}

subroutine add_xb(arr: stack_array<biguint>, x: uint64): stack_array<biguint>
{
  for i in range(0u, x, 1u) {
    arr: stack_array<biguint> = arr + (itob(i))
  }
  return arr
}

subroutine sum_arr(arr: stack_array<uint64>): uint64
{
  total: uint64 = 0u
  for i in arr {
    total += i
  }
  return total
}