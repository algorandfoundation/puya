{
  "version": 3,
  "sources": [
    "../immutable.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2NK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAjEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AArCL;;;AAAA;AAqCK;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AADL;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkOA;;;AAEa;AACC;AAAA;;AAAA;;AAAA;AAAd;;;AACQ;;AAAU;;;AAAV;AAAA;;AADM;;AAAA;AAAA;AAAA;;;;;AAEV;AAGJ;;;AAEa;AAAA;;AAAA;;AAAA;AAAb;;;AACc;;AAAA;;;AAAW;;AAAA;AAAA;;AAAA;AAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AADD;AAAA;AAAA;;;;;AAET;;AAAA;AAAA;AA7OJ;;;AAKc;;;;;;;;;;;;AAIW;;AAAX;;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAW;;AAAX;AAAP;AAEiB;;AAAA;AAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AACC;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAW;;AAAX;AAAP;AACO;AAAA;AAAU;;AAAV;AAAP;AAkOM;AAAA;;AAhOW;;AAgOX;AAAd;;;AACc;;AAAA;AAAA;;;AAAA;;AAAA;AADA;;AAAA;AAAA;AAAA;;;;;AA/NC;;AAAA;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAW;AAAX;AAAP;AAEiB;;AAAX;;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAW;;AAAX;AAAP;AAEiB;;AAAA;AAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAW;;AAAX;AAAP;AAEqB;;AAAf;AAAY;AAAZ;;AAAA;AAAA;AAAA;;AACC;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;;;AAAA;;AAAA;AAAU;;AAAV;AAAP;AAEA;;;AAAA;AAAA;;AAER;;;;AAEc;AAGG;AAAA;;AAAA;;AAAA;AAAjB;;;AACkC;;AAAL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAX;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AADD;AAAA;AAAA;;;;;AAGF;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AAER;;AAAA;;;AACuB;;AAAA;;;AAAA;;AAAA;AAAI;AAAJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACD;;AAAS;AAAT;AAAX;;;AACuB;;AAAA;;;AAAI;AAAJ;;AAAA;AAAA;AAAI;AAAJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AACD;;AAAS;AAAT;AAAX;;;AACmB;;AAAA;;;AAAI;AAAJ;;AAAA;AAAA;AAAI;AAAJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAP;AACD;;AAAS;;AAAT;AAAX;;;AAC2B;;AAAS;AAAT;AAAJ;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAJ;AAAP;AAEJ;;;AAAA;;AAAA;AACR;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEmB;AAAA;AAAc;;AAAS;AAAT;AAAd;AAAP;;AAEZ;;;AAEc;AAGG;AAAA;;AAAO;;AAAP;AAAjB;;;AACkB;;AAAA;;;AAAY;;AAAA;AAAI;AAAJ;AAAO;AAAI;AAAJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;AAEH;;AAAA;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAW;AAAX;AAAA;AAAsB;AAAtB;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAY;;AAAZ;AAAA;AAAuB;;AAAvB;AAAA;AAAP;AAEM;;AAAA;;;AAAA;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAW;AAAX;AAAA;AAAsB;AAAtB;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAY;;AAAZ;AAAA;AAAuB;;AAAvB;AAAA;AAAP;AACA;;;AAAA;AAAA;;AAER;;;AAEc;AAGG;AAAA;;AAAO;;AAAP;AAAjB;;;AACkB;;AAAA;;;AAA8B;;AAAA;AAAI;AAAJ;AAAA;AAAgB;;AAAI;;AAAJ;AAAQ;AAAR;AAAA;AAAvB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAvB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AADD;AAAA;AAAA;;;;;AAGF;;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACgB;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACT;;AAAA;AAAP;AACA;AAAA;AACA;AACA;;;AAAA;AAAA;;AAER;;;;AAEc;AAGG;AAAA;;AAAO;;AAAP;AAAjB;;;AAC8B;;AAAA;AAAI;AAAJ;AAAO;AAAA;AAAP;;AAAA;AAAO;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAR;AAAA;;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;AAEH;;AAAA;AAAA;AAAA;AAAA;;AAAc;;AAAd;AAAP;AACS;AAAL;;AAAK;;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAA;AAAA;;AAAA;AAAP;;;;;;AAEE;;AAAA;;;AAAA;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAW;AAAX;AAA+B;AAAT;AAAtB;;AAAA;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAAY;;AAAZ;AAAgC;;AAAT;AAAvB;;AAAA;AAAA;AAAP;AACA;;;AAAA;AAAA;;AAER;;;;AAEc;AAGG;AAAA;;AAAO;;AAAP;AAAjB;;;AACqD;;AAAA;AAAI;AAAJ;AAAW;AAAA;;;AAAX;;AAAA;AAAW;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAnC;AAAA;;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;AAEH;;AAAA;AAAA;AAAA;AAAA;;AAAc;;AAAd;AAAP;AACS;AAAL;;AAAK;;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;;AAAa;;AAAA;;;AAAb;AAAP;;;;;;AAEE;;AAAA;;;AAAA;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAP;AACO;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAA8B;AAA9B;AAAA;AAAyC;AAAzC;AAAA;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;AAA+B;;AAA/B;AAAA;AAA0C;;;;;AAA1C;AAAA;AAAP;AACA;;;AAAA;AAAA;;AAER;;;AAEe;AACA;;AAQE;AAAA;;AAAO;;AAAP;AAAjB;;;AACmB;;AAAA;;;AAA2B;;AAAA;AAAA;AAAU;;AAAK;AAAL;AAAV;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AACA;;AAAA;;;AAMG;;AAAK;AAAL;AACA;;AAAK;;AAAL;AACA;;AAAK;;AAAL;AACA;;AAAK;;AAAL;AACA;;AAAK;;AAAL;AAPE;;AAAI;AAAJ;AADA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAaA;;AAAA;;;AAWG;;AAAK;;AAAL;AATE;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAcA;;AAAA;;;AAYG;;AAAK;AAAL;AAVE;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAFL;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;AAgBJ;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AACO;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AACO;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AACO;;AAAA;AAAA;AAAA;AAAe;;AAAf;AAAP;AACA;;;;;;;AAAA;;AAAA;AACA;;;;;;;AAAA;;AAAA;AACA;;;;;;;AAAA;;AAAA;AACA;;;;;;;AAAA;AAAA;;AAkBO;AAAA;;;;;;;AAAA;;AAAA;AAAA;;;AAAP;AAQO;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock 0x00 0x 0x0000 0x151f7c75 0x000a 0x0002"
    },
    "26": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "28": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "31": {
      "op": "pushbytess 0x44d42f99 0x743d70ed 0x1c7e0494 0xa2d5860b 0xe05fc564 0x1e092b83 0x6cb7c991 0x2608af8b 0x98f7dac6 0x54a93077 0xcf4dde74 0xa32a85fa // method \"test_uint64_array()void\", method \"test_bool_array(uint64)void\", method \"test_fixed_size_tuple_array()void\", method \"test_fixed_size_named_tuple_array()void\", method \"test_dynamic_sized_tuple_array()void\", method \"test_dynamic_sized_named_tuple_array()void\", method \"test_bit_packed_tuples()void\", method \"test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void\", method \"test_uint64_return()uint64[]\", method \"test_bool_return()bool[]\", method \"test_tuple_return()(uint64,bool,bool)[]\", method \"test_dynamic_tuple_return()(uint64,string)[]\""
    },
    "93": {
      "op": "txna ApplicationArgs 0"
    },
    "96": {
      "op": "match main_test_uint64_array_route@3 main_test_bool_array_route@4 main_test_fixed_size_tuple_array_route@5 main_test_fixed_size_named_tuple_array_route@6 main_test_dynamic_sized_tuple_array_route@7 main_test_dynamic_sized_named_tuple_array_route@8 main_test_bit_packed_tuples_route@9 main_test_args_route@10 main_test_uint64_return_route@11 main_test_bool_return_route@12 main_test_tuple_return_route@13 main_test_dynamic_tuple_return_route@14"
    },
    "122": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return"
    },
    "124": {
      "block": "main_test_dynamic_tuple_return_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "130": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "131": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return",
      "op": "callsub test_dynamic_tuple_return",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "134": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%62#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return"
    },
    "140": {
      "block": "main_test_tuple_return_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "pushbytes 0x151f7c750001000000000000000080",
      "defined_out": [
        "0x151f7c750001000000000000000080"
      ],
      "stack_out": [
        "0x151f7c750001000000000000000080"
      ]
    },
    "164": {
      "op": "log",
      "stack_out": []
    },
    "165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "return"
    },
    "167": {
      "block": "main_test_bool_return_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "169": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "174": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_bool_return",
      "op": "callsub test_bool_return",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "177": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "179": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "180": {
      "op": "log",
      "stack_out": []
    },
    "181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "return"
    },
    "183": {
      "block": "main_test_uint64_return_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "185": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "190": {
      "op": "pushbytes 0x151f7c750003000000000000000100000000000000020000000000000003",
      "defined_out": [
        "0x151f7c750003000000000000000100000000000000020000000000000003"
      ],
      "stack_out": [
        "0x151f7c750003000000000000000100000000000000020000000000000003"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return"
    },
    "225": {
      "block": "main_test_args_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "return"
    },
    "234": {
      "block": "main_test_bit_packed_tuples_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples",
      "op": "callsub test_bit_packed_tuples"
    },
    "244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "return"
    },
    "246": {
      "block": "main_test_dynamic_sized_named_tuple_array_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "253": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array",
      "op": "callsub test_dynamic_sized_named_tuple_array"
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "return"
    },
    "258": {
      "block": "main_test_dynamic_sized_tuple_array_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array",
      "op": "callsub test_dynamic_sized_tuple_array"
    },
    "268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "return"
    },
    "270": {
      "block": "main_test_fixed_size_named_tuple_array_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array",
      "op": "callsub test_fixed_size_named_tuple_array"
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "281": {
      "op": "return"
    },
    "282": {
      "block": "main_test_fixed_size_tuple_array_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "284": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "285": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "286": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "288": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "289": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array",
      "op": "callsub test_fixed_size_tuple_array"
    },
    "292": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "return"
    },
    "294": {
      "block": "main_test_bool_array_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "296": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "297": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "298": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "300": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "301": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "304": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "305": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_bool_array",
      "op": "callsub test_bool_array",
      "stack_out": []
    },
    "308": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "309": {
      "op": "return"
    },
    "310": {
      "block": "main_test_uint64_array_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "312": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "313": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "314": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "316": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "317": {
      "callsub": "test_cases.array.immutable.ImmutableArrayContract.test_uint64_array",
      "op": "callsub test_uint64_array"
    },
    "320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "321": {
      "op": "return"
    },
    "322": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "324": {
      "op": "bnz main_after_if_else@21",
      "stack_out": []
    },
    "327": {
      "op": "txn ApplicationID"
    },
    "329": {
      "op": "!"
    },
    "330": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "331": {
      "op": "intc_1 // 1"
    },
    "332": {
      "op": "return"
    },
    "333": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "params": {
        "array#0": "bytes",
        "fixed_byte_size#0": "uint64"
      },
      "block": "dynamic_array_pop_fixed_size",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "339": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "341": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "342": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "extract 6 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "346": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "array#0 (copy)"
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "array#0 (copy)",
        "tmp%1#0"
      ]
    },
    "349": {
      "op": "replace2 0",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "351": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "352": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "353": {
      "op": "frame_dig -1",
      "defined_out": [
        "fixed_byte_size#0 (copy)",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "355": {
      "op": "-",
      "defined_out": [
        "item_location#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0"
      ]
    },
    "356": {
      "op": "dup2",
      "defined_out": [
        "item_location#0",
        "item_location#0 (copy)",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)"
      ]
    },
    "357": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "item_location#0",
        "result#0 (copy)",
        "item_location#0 (copy)",
        "fixed_byte_size#0 (copy)"
      ]
    },
    "359": {
      "op": "extract3",
      "defined_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "item_location#0",
        "popped#0"
      ]
    },
    "360": {
      "op": "uncover 2",
      "stack_out": [
        "item_location#0",
        "popped#0",
        "result#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "item_location#0",
        "popped#0",
        "result#0",
        "0"
      ]
    },
    "363": {
      "op": "uncover 3",
      "stack_out": [
        "popped#0",
        "result#0",
        "0",
        "item_location#0"
      ]
    },
    "365": {
      "op": "substring3",
      "stack_out": [
        "popped#0",
        "result#0"
      ]
    },
    "366": {
      "retsub": true,
      "op": "retsub"
    },
    "367": {
      "subroutine": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "params": {
        "array#0": "bytes"
      },
      "block": "dynamic_array_pop_dynamic_element",
      "stack_in": [],
      "op": "proto 1 2"
    },
    "370": {
      "op": "frame_dig -1",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "372": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "373": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "374": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "1"
      ]
    },
    "375": {
      "op": "-",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0"
      ]
    },
    "376": {
      "op": "dup",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0"
      ]
    },
    "377": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "length_minus_1#0",
        "2"
      ]
    },
    "378": {
      "op": "*",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0"
      ]
    },
    "380": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0",
        "array#0 (copy)"
      ]
    },
    "382": {
      "op": "extract 2 0",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "385": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0"
      ]
    },
    "386": {
      "op": "cover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_header_offset#0",
        "head_and_tail#0"
      ]
    },
    "388": {
      "op": "dup",
      "defined_out": [
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "length_minus_1#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "389": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)",
        "popped_header_offset#0"
      ]
    },
    "391": {
      "op": "extract_uint16",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0",
        "popped_offset#0"
      ]
    },
    "392": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0 (copy)"
      ]
    },
    "393": {
      "op": "uncover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0",
        "head_and_tail#0"
      ]
    },
    "395": {
      "op": "dup",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0",
        "head_and_tail#0",
        "head_and_tail#0 (copy)"
      ]
    },
    "396": {
      "op": "len",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0",
        "head_and_tail#0",
        "tmp%0#0"
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped_offset#0",
        "tmp%0#0",
        "head_and_tail#0"
      ]
    },
    "398": {
      "op": "cover 2",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "tmp%0#0"
      ]
    },
    "400": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0"
      ]
    },
    "401": {
      "op": "bytec_1 // 0x"
    },
    "402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_and_tail#0",
        "head_offset#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "403": {
      "block": "dynamic_array_pop_dynamic_element_for_header@1",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "405": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "popped_header_offset#0"
      ]
    },
    "407": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "popped_header_offset#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "408": {
      "op": "bz dynamic_array_pop_dynamic_element_after_for@4",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "411": {
      "op": "frame_dig 2"
    },
    "413": {
      "op": "frame_dig 6"
    },
    "415": {
      "op": "dup"
    },
    "416": {
      "op": "cover 2"
    },
    "418": {
      "op": "extract_uint16"
    },
    "419": {
      "op": "intc_2 // 2"
    },
    "420": {
      "op": "-"
    },
    "421": {
      "op": "itob"
    },
    "422": {
      "op": "extract 6 2"
    },
    "425": {
      "op": "frame_dig 5"
    },
    "427": {
      "op": "swap"
    },
    "428": {
      "op": "concat"
    },
    "429": {
      "op": "frame_bury 5"
    },
    "431": {
      "op": "intc_2 // 2"
    },
    "432": {
      "op": "+"
    },
    "433": {
      "op": "frame_bury 6"
    },
    "435": {
      "op": "b dynamic_array_pop_dynamic_element_for_header@1"
    },
    "438": {
      "block": "dynamic_array_pop_dynamic_element_after_for@4",
      "stack_in": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "length_minus_1#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "length_minus_1#0"
      ]
    },
    "440": {
      "op": "itob",
      "defined_out": [
        "length_minus_1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "441": {
      "op": "extract 6 2",
      "defined_out": [
        "length_minus_1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "444": {
      "op": "frame_dig 5",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%5#0",
        "new_head#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0"
      ]
    },
    "447": {
      "op": "frame_dig 1",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "popped_header_offset#0"
      ]
    },
    "449": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "popped_header_offset#0",
        "2"
      ]
    },
    "450": {
      "op": "+",
      "defined_out": [
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "451": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%7#0",
        "head_and_tail#0"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "head_and_tail#0",
        "tmp%7#0"
      ]
    },
    "454": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "head_and_tail#0",
        "tmp%7#0",
        "popped_offset#0"
      ]
    },
    "456": {
      "op": "substring3",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "457": {
      "op": "concat",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "updated#0"
      ]
    },
    "458": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_and_tail#0",
        "length_minus_1#0",
        "new_head#0",
        "popped#0",
        "popped_header_offset#0",
        "popped_offset#0",
        "updated#0"
      ],
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "updated#0",
        "popped#0"
      ]
    },
    "460": {
      "op": "frame_bury 0"
    },
    "462": {
      "op": "frame_bury 1",
      "stack_out": [
        "length_minus_1#0",
        "popped_header_offset#0",
        "head_and_tail#0",
        "popped_offset#0",
        "popped#0",
        "new_head#0",
        "head_offset#0",
        "popped#0",
        "updated#0"
      ]
    },
    "464": {
      "retsub": true,
      "op": "retsub"
    },
    "465": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_bits",
      "params": {
        "array#0": "bytes",
        "new_items_bytes#0": "bytes",
        "new_items_count#0": "uint64",
        "read_step#0": "uint64"
      },
      "block": "dynamic_array_concat_bits",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "468": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "read_offset#0"
      ]
    },
    "469": {
      "op": "dupn 2",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0"
      ]
    },
    "471": {
      "op": "frame_dig -4",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array#0 (copy)"
      ]
    },
    "473": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array#0 (copy)",
        "0"
      ]
    },
    "474": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0"
      ]
    },
    "475": {
      "op": "dupn 2",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "array_length#0 (copy)"
      ]
    },
    "477": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "479": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "new_array_length#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0"
      ]
    },
    "480": {
      "op": "dup",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "new_array_length#0 (copy)"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "new_array_length#0 (copy)"
      ]
    },
    "481": {
      "op": "itob",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "extract 6 0",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "new_array_length_b#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "new_array_length_b#0"
      ]
    },
    "485": {
      "op": "frame_dig -4",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "new_array_length_b#0",
        "array#0 (copy)"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "array#0 (copy)",
        "new_array_length_b#0"
      ]
    },
    "488": {
      "op": "replace2 0",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "result#0"
      ]
    },
    "490": {
      "op": "dup",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "array_length#0",
        "new_array_length#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "491": {
      "op": "uncover 2"
    },
    "493": {
      "op": "uncover 3",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "array_length#0"
      ]
    },
    "495": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "array_length#0",
        "new_array_length#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "array_length#0",
        "7"
      ]
    },
    "497": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "new_array_length#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "tmp%1#0"
      ]
    },
    "498": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array_length#0",
        "new_array_length#0",
        "result#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "tmp%1#0",
        "8"
      ]
    },
    "499": {
      "op": "/",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "new_array_length#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "current_bytes#0"
      ]
    },
    "500": {
      "op": "dup",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "result#0",
        "new_array_length#0",
        "current_bytes#0",
        "current_bytes#0"
      ]
    },
    "501": {
      "op": "cover 3",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "new_array_length#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "new_array_length#0",
        "current_bytes#0"
      ]
    },
    "503": {
      "op": "swap",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "new_array_length#0"
      ]
    },
    "504": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "new_array_length#0",
        "7"
      ]
    },
    "506": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "tmp%2#0"
      ]
    },
    "507": {
      "op": "intc_3 // 8",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "tmp%2#0",
        "8"
      ]
    },
    "508": {
      "op": "/",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0"
      ]
    },
    "509": {
      "op": "dup",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "required_bytes#0"
      ]
    },
    "510": {
      "op": "cover 3",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0"
      ]
    },
    "512": {
      "op": "<",
      "defined_out": [
        "array_length#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#0",
        "result#7",
        "tmp%3#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "tmp%3#0"
      ]
    },
    "513": {
      "op": "bz dynamic_array_concat_bits_after_if_else@2",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ]
    },
    "516": {
      "op": "frame_dig 6"
    },
    "518": {
      "op": "frame_dig 5"
    },
    "520": {
      "op": "-"
    },
    "521": {
      "op": "bzero"
    },
    "522": {
      "op": "frame_dig 4"
    },
    "524": {
      "op": "swap"
    },
    "525": {
      "op": "concat"
    },
    "526": {
      "op": "frame_bury 7"
    },
    "528": {
      "block": "dynamic_array_concat_bits_after_if_else@2",
      "stack_in": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "result#0"
      ]
    },
    "530": {
      "op": "frame_bury 4",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ]
    },
    "532": {
      "op": "intc_0 // 0",
      "defined_out": [
        "read_offset#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "read_offset#0"
      ]
    },
    "533": {
      "op": "frame_bury 0",
      "defined_out": [
        "read_offset#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ]
    },
    "535": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_length#0",
        "read_offset#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "array_length#0"
      ]
    },
    "537": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "array_length#0",
        "read_offset#0",
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "array_length#0",
        "16"
      ]
    },
    "539": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "read_offset#0",
        "result#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0"
      ]
    },
    "540": {
      "op": "dup",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0",
        "write_offset#0"
      ]
    },
    "541": {
      "op": "frame_bury 2",
      "defined_out": [
        "array_length#0",
        "read_offset#0",
        "result#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0"
      ]
    },
    "543": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_length#0",
        "new_items_count#0 (copy)",
        "read_offset#0",
        "result#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0",
        "new_items_count#0 (copy)"
      ]
    },
    "545": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "read_offset#0",
        "result#0",
        "write_end#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_end#0"
      ]
    },
    "546": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length#0",
        "read_offset#0",
        "result#0",
        "write_end#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ]
    },
    "548": {
      "block": "dynamic_array_concat_bits_while_top@3",
      "stack_in": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0"
      ]
    },
    "550": {
      "op": "frame_dig 1",
      "defined_out": [
        "write_end#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "write_offset#0",
        "write_end#0"
      ]
    },
    "552": {
      "op": "<",
      "defined_out": [
        "tmp%6#0",
        "write_end#0",
        "write_offset#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "tmp%6#0"
      ]
    },
    "553": {
      "op": "bz dynamic_array_concat_bits_after_while@5",
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ]
    },
    "556": {
      "op": "frame_dig -3"
    },
    "558": {
      "op": "frame_dig 0"
    },
    "560": {
      "op": "dup"
    },
    "561": {
      "op": "cover 2"
    },
    "563": {
      "op": "getbit"
    },
    "564": {
      "op": "frame_dig 4"
    },
    "566": {
      "op": "frame_dig 2"
    },
    "568": {
      "op": "dup"
    },
    "569": {
      "op": "cover 3"
    },
    "571": {
      "op": "uncover 2"
    },
    "573": {
      "op": "setbit"
    },
    "574": {
      "op": "frame_bury 4"
    },
    "576": {
      "op": "intc_1 // 1"
    },
    "577": {
      "op": "+"
    },
    "578": {
      "op": "frame_bury 2"
    },
    "580": {
      "op": "frame_dig -1"
    },
    "582": {
      "op": "+"
    },
    "583": {
      "op": "frame_bury 0"
    },
    "585": {
      "op": "b dynamic_array_concat_bits_while_top@3"
    },
    "588": {
      "block": "dynamic_array_concat_bits_after_while@5",
      "stack_in": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "read_offset#0",
        "write_end#0",
        "write_offset#0",
        "array_length#0",
        "result#0",
        "current_bytes#0",
        "required_bytes#0",
        "result#7",
        "result#0"
      ]
    },
    "590": {
      "op": "frame_bury 0"
    },
    "592": {
      "retsub": true,
      "op": "retsub"
    },
    "593": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "params": {
        "array_items_count#0": "uint64",
        "array_head_and_tail#0": "bytes",
        "new_items_count#0": "uint64",
        "new_head_and_tail#0": "bytes"
      },
      "block": "dynamic_array_concat_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "596": {
      "op": "bytec_1 // \"\""
    },
    "597": {
      "op": "dup"
    },
    "598": {
      "op": "frame_dig -2"
    },
    "600": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "601": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0"
      ]
    },
    "602": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)"
      ]
    },
    "604": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "605": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "607": {
      "block": "dynamic_array_concat_dynamic_element_for_header@1",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "609": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%0#0"
      ]
    },
    "611": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "612": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@4",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "615": {
      "op": "frame_dig -3"
    },
    "617": {
      "op": "frame_dig 4"
    },
    "619": {
      "op": "dup"
    },
    "620": {
      "op": "cover 2"
    },
    "622": {
      "op": "extract_uint16"
    },
    "623": {
      "op": "frame_dig 2"
    },
    "625": {
      "op": "+"
    },
    "626": {
      "op": "itob"
    },
    "627": {
      "op": "extract 6 2"
    },
    "630": {
      "op": "frame_dig 1"
    },
    "632": {
      "op": "swap"
    },
    "633": {
      "op": "concat"
    },
    "634": {
      "op": "frame_bury 1"
    },
    "636": {
      "op": "intc_2 // 2"
    },
    "637": {
      "op": "+"
    },
    "638": {
      "op": "frame_bury 4"
    },
    "640": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@1"
    },
    "643": {
      "block": "dynamic_array_concat_dynamic_element_after_for@4",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "645": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset_adjustment#2"
      ]
    },
    "646": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "648": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "649": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "651": {
      "block": "dynamic_array_concat_dynamic_element_for_header@5",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "653": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "655": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "656": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@8",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "659": {
      "op": "frame_dig -1"
    },
    "661": {
      "op": "frame_dig 4"
    },
    "663": {
      "op": "dup"
    },
    "664": {
      "op": "cover 2"
    },
    "666": {
      "op": "extract_uint16"
    },
    "667": {
      "op": "frame_dig 0"
    },
    "669": {
      "op": "+"
    },
    "670": {
      "op": "itob"
    },
    "671": {
      "op": "extract 6 2"
    },
    "674": {
      "op": "frame_dig 1"
    },
    "676": {
      "op": "swap"
    },
    "677": {
      "op": "concat"
    },
    "678": {
      "op": "frame_bury 1"
    },
    "680": {
      "op": "intc_2 // 2"
    },
    "681": {
      "op": "+"
    },
    "682": {
      "op": "frame_bury 4"
    },
    "684": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@5"
    },
    "687": {
      "block": "dynamic_array_concat_dynamic_element_after_for@8",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)"
      ]
    },
    "689": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "691": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "692": {
      "op": "itob",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%9#0"
      ]
    },
    "693": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "696": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_head#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0",
        "new_head#0"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "699": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "701": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ]
    },
    "703": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0",
        "item_offset_adjustment#2"
      ]
    },
    "705": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "707": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "709": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "712": {
      "op": "frame_dig 2",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0"
      ]
    },
    "714": {
      "op": "uncover 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0",
        "tmp%17#0"
      ]
    },
    "716": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "717": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%19#0"
      ]
    },
    "718": {
      "op": "frame_bury 0"
    },
    "720": {
      "retsub": true,
      "op": "retsub"
    },
    "721": {
      "subroutine": "test_cases.array.immutable.times",
      "params": {
        "n#0": "uint64"
      },
      "block": "times",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "724": {
      "op": "bytec_1 // \"\""
    },
    "725": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "_i#0"
      ]
    },
    "726": {
      "block": "times_for_header@1",
      "stack_in": [
        "result#0",
        "_i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "result#0",
        "_i#0",
        "_i#0"
      ]
    },
    "728": {
      "op": "frame_dig -1",
      "defined_out": [
        "_i#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "_i#0",
        "_i#0",
        "n#0 (copy)"
      ]
    },
    "730": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "result#0",
        "_i#0",
        "continue_looping%0#0"
      ]
    },
    "731": {
      "op": "bz times_after_for@4",
      "stack_out": [
        "result#0",
        "_i#0"
      ]
    },
    "734": {
      "op": "frame_dig 0"
    },
    "736": {
      "op": "pushbytes \" \""
    },
    "739": {
      "op": "concat"
    },
    "740": {
      "op": "frame_bury 0"
    },
    "742": {
      "op": "frame_dig 1"
    },
    "744": {
      "op": "intc_1 // 1"
    },
    "745": {
      "op": "+"
    },
    "746": {
      "op": "frame_bury 1"
    },
    "748": {
      "op": "b times_for_header@1"
    },
    "751": {
      "block": "times_after_for@4",
      "stack_in": [
        "result#0",
        "_i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "_i#0",
        "result#0"
      ]
    },
    "752": {
      "subroutine": "test_cases.array.immutable.add_x",
      "params": {
        "arr#0": "bytes",
        "x#0": "uint64"
      },
      "block": "add_x",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "755": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "756": {
      "block": "add_x_for_header@1",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "758": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "x#0 (copy)"
      ]
    },
    "760": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "761": {
      "op": "bz add_x_after_for@4",
      "stack_out": [
        "i#0"
      ]
    },
    "764": {
      "op": "frame_dig -2"
    },
    "766": {
      "op": "extract 2 0"
    },
    "769": {
      "op": "frame_dig 0"
    },
    "771": {
      "op": "dup"
    },
    "772": {
      "op": "cover 2"
    },
    "774": {
      "op": "itob"
    },
    "775": {
      "op": "concat"
    },
    "776": {
      "op": "dup"
    },
    "777": {
      "op": "len"
    },
    "778": {
      "op": "intc_3 // 8"
    },
    "779": {
      "op": "/"
    },
    "780": {
      "op": "itob"
    },
    "781": {
      "op": "extract 6 2"
    },
    "784": {
      "op": "swap"
    },
    "785": {
      "op": "concat"
    },
    "786": {
      "op": "frame_bury -2"
    },
    "788": {
      "op": "intc_1 // 1"
    },
    "789": {
      "op": "+"
    },
    "790": {
      "op": "frame_bury 0"
    },
    "792": {
      "op": "b add_x_for_header@1"
    },
    "795": {
      "block": "add_x_after_for@4",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "arr#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr#0 (copy)"
      ]
    },
    "797": {
      "op": "swap"
    },
    "798": {
      "retsub": true,
      "op": "retsub"
    },
    "799": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_uint64_array",
      "params": {},
      "block": "test_uint64_array",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "802": {
      "op": "pushbytes 0x0001000000000000002a",
      "defined_out": [
        "0x0001000000000000002a"
      ],
      "stack_out": [
        "0x0001000000000000002a"
      ]
    },
    "814": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0x0001000000000000002a",
        "5"
      ],
      "stack_out": [
        "0x0001000000000000002a",
        "5"
      ]
    },
    "816": {
      "callsub": "test_cases.array.immutable.add_x",
      "op": "callsub add_x",
      "defined_out": [
        "arr#2"
      ],
      "stack_out": [
        "arr#2"
      ]
    },
    "819": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "arr#2 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "820": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#2",
        "arr#2 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "821": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%8#0"
      ]
    },
    "822": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "823": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "arr#2",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "tmp%8#0",
        "tmp%8#0 (copy)",
        "6"
      ]
    },
    "825": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "826": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "tmp%8#0"
      ]
    },
    "827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr#2",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%8#0",
        "1"
      ]
    },
    "828": {
      "op": "-",
      "defined_out": [
        "arr#2",
        "tmp%11#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%11#0"
      ]
    },
    "829": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "arr#2"
      ]
    },
    "830": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "array_head_and_tail%1#0"
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%1#0",
        "tmp%11#0"
      ]
    },
    "834": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "tmp%11#0",
        "8"
      ]
    },
    "835": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "836": {
      "op": "dig 1",
      "defined_out": [
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "array_head_and_tail%1#0 (copy)"
      ]
    },
    "838": {
      "op": "swap",
      "stack_out": [
        "array_head_and_tail%1#0",
        "array_head_and_tail%1#0 (copy)",
        "item_offset%1#0"
      ]
    },
    "839": {
      "op": "extract_uint64",
      "defined_out": [
        "array_head_and_tail%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "tmp%12#0"
      ]
    },
    "840": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "array_head_and_tail%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "tmp%12#0",
        "4"
      ]
    },
    "842": {
      "op": "==",
      "defined_out": [
        "array_head_and_tail%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "tmp%13#0"
      ]
    },
    "843": {
      "op": "assert",
      "stack_out": [
        "array_head_and_tail%1#0"
      ]
    },
    "844": {
      "op": "pushint 43 // 43",
      "defined_out": [
        "43",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "43"
      ]
    },
    "846": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%1#1",
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "array%sub_item%1#1"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0"
      ]
    },
    "848": {
      "op": "dup",
      "defined_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ],
      "stack_out": [
        "concatenated%1#0",
        "concatenated%1#0 (copy)"
      ]
    },
    "849": {
      "op": "len",
      "defined_out": [
        "byte_len%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "byte_len%1#0"
      ]
    },
    "850": {
      "op": "intc_3 // 8",
      "stack_out": [
        "concatenated%1#0",
        "byte_len%1#0",
        "8"
      ]
    },
    "851": {
      "op": "/",
      "defined_out": [
        "concatenated%1#0",
        "len_%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "len_%1#0"
      ]
    },
    "852": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "concatenated%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "as_bytes%1#0"
      ]
    },
    "853": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%1#0",
        "len_16_bit%1#0"
      ],
      "stack_out": [
        "concatenated%1#0",
        "len_16_bit%1#0"
      ]
    },
    "856": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%1#0",
        "concatenated%1#0"
      ]
    },
    "857": {
      "op": "concat",
      "stack_out": [
        "arr#2"
      ]
    },
    "858": {
      "op": "dupn 2",
      "defined_out": [
        "arr#2",
        "arr#2 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "860": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#2",
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "861": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0"
      ]
    },
    "862": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "863": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "arr#2",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "7"
      ]
    },
    "865": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "866": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0"
      ]
    },
    "867": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%14#0",
        "1"
      ]
    },
    "868": {
      "op": "-",
      "defined_out": [
        "arr#2",
        "tmp%17#0"
      ],
      "stack_out": [
        "arr#2",
        "arr#2",
        "tmp%17#0"
      ]
    },
    "869": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "tmp%17#0",
        "arr#2"
      ]
    },
    "870": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%17#0",
        "array_head_and_tail%2#0"
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%17#0"
      ]
    },
    "874": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%17#0",
        "8"
      ]
    },
    "875": {
      "op": "*",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ],
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "876": {
      "op": "dig 1",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0"
      ],
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0"
      ]
    },
    "879": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%18#0"
      ]
    },
    "880": {
      "op": "pushint 43 // 43",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%18#0",
        "43"
      ]
    },
    "882": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "tmp%19#0"
      ]
    },
    "883": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0"
      ]
    },
    "884": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#2",
        "array_head_and_tail%2#0",
        "0"
      ]
    },
    "885": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "tmp%20#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%20#0"
      ]
    },
    "886": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "arr#2",
        "tmp%20#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%20#0",
        "42"
      ]
    },
    "888": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%21#0"
      ],
      "stack_out": [
        "arr#2",
        "tmp%21#0"
      ]
    },
    "889": {
      "op": "assert",
      "stack_out": [
        "arr#2"
      ]
    },
    "890": {
      "op": "intc_0 // 0",
      "defined_out": [
        "_i#0",
        "arr#2"
      ],
      "stack_out": [
        "arr#2",
        "_i#0"
      ]
    },
    "891": {
      "block": "test_uint64_array_for_header@2",
      "stack_in": [
        "arr#2",
        "_i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "_i#0"
      ]
    },
    "893": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "_i#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "_i#0",
        "3"
      ]
    },
    "895": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "continue_looping%0#0"
      ]
    },
    "896": {
      "op": "bz test_uint64_array_after_for@4",
      "stack_out": [
        "arr#2",
        "_i#0"
      ]
    },
    "899": {
      "op": "frame_dig 0"
    },
    "901": {
      "op": "intc_3 // 8"
    },
    "902": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size"
    },
    "905": {
      "op": "frame_bury 0"
    },
    "907": {
      "op": "pop"
    },
    "908": {
      "op": "frame_dig 1"
    },
    "910": {
      "op": "intc_1 // 1"
    },
    "911": {
      "op": "+"
    },
    "912": {
      "op": "frame_bury 1"
    },
    "914": {
      "op": "b test_uint64_array_for_header@2"
    },
    "917": {
      "block": "test_uint64_array_after_for@4",
      "stack_in": [
        "arr#2",
        "_i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#2"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "919": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "arr#2 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "920": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#2",
        "arr#2 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "921": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0"
      ]
    },
    "922": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "923": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "arr#2",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0",
        "tmp%22#0 (copy)",
        "4"
      ]
    },
    "925": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "926": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0"
      ]
    },
    "927": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr#2",
        "tmp%22#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%22#0",
        "1"
      ]
    },
    "928": {
      "op": "-",
      "defined_out": [
        "arr#2",
        "tmp%25#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%25#0"
      ]
    },
    "929": {
      "op": "dig 1",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%25#0",
        "arr#2 (copy)"
      ]
    },
    "931": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%4#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%25#0",
        "array_head_and_tail%4#0"
      ]
    },
    "934": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "array_head_and_tail%4#0",
        "tmp%25#0"
      ]
    },
    "935": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr#2",
        "array_head_and_tail%4#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "array_head_and_tail%4#0",
        "tmp%25#0",
        "8"
      ]
    },
    "936": {
      "op": "*",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "array_head_and_tail%4#0",
        "item_offset%4#0"
      ]
    },
    "937": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "tmp%26#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%26#0"
      ]
    },
    "938": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arr#2",
        "tmp%26#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%26#0",
        "2"
      ]
    },
    "939": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%27#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%27#0"
      ]
    },
    "940": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "941": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr#2"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "10"
      ]
    },
    "943": {
      "callsub": "test_cases.array.immutable.add_x",
      "op": "callsub add_x",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "946": {
      "op": "dup",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "948": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%28#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0"
      ]
    },
    "949": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ]
    },
    "950": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "arr#2",
        "tmp%28#0",
        "tmp%28#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0",
        "tmp%28#0 (copy)",
        "14"
      ]
    },
    "952": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "953": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0"
      ]
    },
    "954": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%28#0",
        "1"
      ]
    },
    "955": {
      "op": "-",
      "defined_out": [
        "arr#2",
        "tmp%31#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%31#0"
      ]
    },
    "956": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "tmp%31#0",
        "arr#2"
      ]
    },
    "957": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "tmp%31#0",
        "array_head_and_tail%5#0"
      ]
    },
    "960": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "tmp%31#0"
      ]
    },
    "961": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "tmp%31#0",
        "8"
      ]
    },
    "962": {
      "op": "*",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0"
      ]
    },
    "963": {
      "op": "dig 1",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%5#0",
        "array_head_and_tail%5#0 (copy)",
        "item_offset%5#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "item_offset%5#0",
        "array_head_and_tail%5#0 (copy)"
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "array_head_and_tail%5#0 (copy)",
        "item_offset%5#0"
      ]
    },
    "966": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%5#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "tmp%32#0"
      ]
    },
    "967": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "arr#2",
        "array_head_and_tail%5#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "tmp%32#0",
        "9"
      ]
    },
    "969": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%5#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "tmp%33#0"
      ]
    },
    "970": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0"
      ]
    },
    "971": {
      "op": "pushint 44 // 44",
      "defined_out": [
        "44",
        "arr#2",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "44"
      ]
    },
    "973": {
      "op": "itob",
      "defined_out": [
        "arr#2",
        "array%sub_item%2#1",
        "array_head_and_tail%5#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "array_head_and_tail%5#0",
        "array%sub_item%2#1"
      ]
    },
    "974": {
      "op": "concat",
      "defined_out": [
        "arr#2",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0"
      ]
    },
    "975": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "976": {
      "op": "len",
      "defined_out": [
        "arr#2",
        "byte_len%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "977": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "byte_len%2#0",
        "8"
      ]
    },
    "978": {
      "op": "/",
      "defined_out": [
        "arr#2",
        "concatenated%2#0",
        "len_%2#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "979": {
      "op": "itob",
      "defined_out": [
        "arr#2",
        "as_bytes%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "980": {
      "op": "extract 6 2",
      "defined_out": [
        "arr#2",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "984": {
      "op": "concat",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "985": {
      "op": "dup",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "987": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%34#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0"
      ]
    },
    "988": {
      "op": "dup",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ]
    },
    "989": {
      "op": "pushint 15 // 15",
      "defined_out": [
        "15",
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)",
        "15"
      ]
    },
    "991": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "992": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0"
      ]
    },
    "993": {
      "op": "dup",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ]
    },
    "994": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%34#0 (copy)",
        "1"
      ]
    },
    "995": {
      "op": "-",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%37#0"
      ]
    },
    "996": {
      "op": "dig 2",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%37#0",
        "arr#2 (copy)"
      ]
    },
    "998": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%6#0",
        "tmp%34#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%37#0",
        "array_head_and_tail%6#0"
      ]
    },
    "1001": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "array_head_and_tail%6#0",
        "tmp%37#0"
      ]
    },
    "1002": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "array_head_and_tail%6#0",
        "tmp%37#0",
        "8"
      ]
    },
    "1003": {
      "op": "*",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "array_head_and_tail%6#0",
        "item_offset%6#0"
      ]
    },
    "1004": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%38#0"
      ]
    },
    "1005": {
      "op": "pushint 44 // 44",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%38#0",
        "44"
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "tmp%39#0"
      ]
    },
    "1008": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0"
      ]
    },
    "1009": {
      "op": "pushint 23 // 23",
      "defined_out": [
        "23",
        "arr#2",
        "tmp%34#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "23"
      ]
    },
    "1011": {
      "op": "itob",
      "defined_out": [
        "arr#2",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "val_as_bytes%0#0"
      ]
    },
    "1012": {
      "op": "intc_2 // 2",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%34#0",
        "val_as_bytes%0#0",
        "2"
      ]
    },
    "1013": {
      "op": "uncover 2",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "val_as_bytes%0#0",
        "2",
        "tmp%34#0"
      ]
    },
    "1015": {
      "op": "<",
      "defined_out": [
        "arr#2",
        "index_is_in_bounds%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "val_as_bytes%0#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "1016": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "val_as_bytes%0#0"
      ]
    },
    "1017": {
      "op": "replace2 18",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "1019": {
      "op": "dup",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "1020": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)",
        "0"
      ]
    },
    "1021": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#2",
        "tmp%40#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%40#0"
      ]
    },
    "1022": {
      "op": "pushint 15 // 15",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%40#0",
        "15"
      ]
    },
    "1024": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%41#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%41#0"
      ]
    },
    "1025": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "1026": {
      "op": "dup",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "arr#2 (copy)"
      ]
    },
    "1027": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#2",
        "array_head_and_tail%7#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "array_head_and_tail%7#0"
      ]
    },
    "1030": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "arr#2",
        "array_head_and_tail%7#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "array_head_and_tail%7#0",
        "16"
      ]
    },
    "1032": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#2",
        "tmp%42#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%42#0"
      ]
    },
    "1033": {
      "op": "pushint 23 // 23",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%42#0",
        "23"
      ]
    },
    "1035": {
      "op": "==",
      "defined_out": [
        "arr#2",
        "tmp%43#0"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "tmp%43#0"
      ]
    },
    "1036": {
      "op": "assert",
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2"
      ]
    },
    "1037": {
      "op": "pushbytes \"a\"",
      "defined_out": [
        "\"a\"",
        "arr#2"
      ],
      "stack_out": [
        "arr#2",
        "_i#0",
        "arr#2",
        "\"a\""
      ]
    },
    "1040": {
      "op": "swap",
      "stack_out": [
        "arr#2",
        "_i#0",
        "\"a\"",
        "arr#2"
      ]
    },
    "1041": {
      "op": "app_global_put",
      "stack_out": [
        "arr#2",
        "_i#0"
      ]
    },
    "1042": {
      "retsub": true,
      "op": "retsub"
    },
    "1043": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_bool_array",
      "params": {
        "length#0": "uint64"
      },
      "block": "test_bool_array",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1046": {
      "op": "bytec_1 // \"\""
    },
    "1047": {
      "op": "bytec_2 // 0x0000"
    },
    "1048": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1049": {
      "block": "test_bool_array_for_header@1",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1051": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1053": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1054": {
      "op": "bz test_bool_array_after_for@4",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1057": {
      "op": "txn NumAppArgs"
    },
    "1059": {
      "op": "frame_dig 2"
    },
    "1061": {
      "op": "dup"
    },
    "1062": {
      "op": "uncover 2"
    },
    "1064": {
      "op": "=="
    },
    "1065": {
      "op": "bytec_0 // 0x00"
    },
    "1066": {
      "op": "intc_0 // 0"
    },
    "1067": {
      "op": "uncover 2"
    },
    "1069": {
      "op": "setbit"
    },
    "1070": {
      "op": "frame_dig 1"
    },
    "1072": {
      "op": "swap"
    },
    "1073": {
      "op": "intc_1 // 1"
    },
    "1074": {
      "op": "intc_3 // 8"
    },
    "1075": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_bits",
      "op": "callsub dynamic_array_concat_bits"
    },
    "1078": {
      "op": "frame_bury 1"
    },
    "1080": {
      "op": "intc_1 // 1"
    },
    "1081": {
      "op": "+"
    },
    "1082": {
      "op": "frame_bury 2"
    },
    "1084": {
      "op": "b test_bool_array_for_header@1"
    },
    "1087": {
      "block": "test_bool_array_after_for@4",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1089": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "arr#0",
        "0"
      ]
    },
    "1090": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "array_length#0"
      ]
    },
    "1091": {
      "op": "dup",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "array_length#0",
        "array_length#0"
      ]
    },
    "1092": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0",
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "array_length#0"
      ]
    },
    "1094": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0",
        "array_length#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "array_length#0",
        "length#0 (copy)"
      ]
    },
    "1096": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_length#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1097": {
      "op": "assert",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1098": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1100": {
      "op": "bz test_bool_array_after_if_else@6",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1103": {
      "op": "frame_dig 1"
    },
    "1105": {
      "op": "extract 2 0"
    },
    "1108": {
      "op": "frame_dig 0"
    },
    "1110": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "1111": {
      "op": "intc_0 // 0"
    },
    "1112": {
      "op": "getbit"
    },
    "1113": {
      "op": "bytec_0 // 0x00"
    },
    "1114": {
      "op": "intc_0 // 0"
    },
    "1115": {
      "op": "uncover 2"
    },
    "1117": {
      "op": "setbit"
    },
    "1118": {
      "op": "intc_0 // 0"
    },
    "1119": {
      "op": "getbit"
    },
    "1120": {
      "op": "!"
    },
    "1121": {
      "error": "expected element 0 to be False",
      "op": "assert // expected element 0 to be False"
    },
    "1122": {
      "block": "test_bool_array_after_if_else@6",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1124": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)",
        "1"
      ]
    },
    "1125": {
      "op": ">",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "tmp%8#0"
      ]
    },
    "1126": {
      "op": "bz test_bool_array_after_if_else@8",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1129": {
      "op": "frame_dig 1"
    },
    "1131": {
      "op": "extract 2 0"
    },
    "1134": {
      "op": "intc_1 // 1"
    },
    "1135": {
      "op": "frame_dig 0"
    },
    "1137": {
      "op": "<"
    },
    "1138": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "1139": {
      "op": "intc_1 // 1"
    },
    "1140": {
      "op": "getbit"
    },
    "1141": {
      "op": "bytec_0 // 0x00"
    },
    "1142": {
      "op": "intc_0 // 0"
    },
    "1143": {
      "op": "uncover 2"
    },
    "1145": {
      "op": "setbit"
    },
    "1146": {
      "op": "intc_0 // 0"
    },
    "1147": {
      "op": "getbit"
    },
    "1148": {
      "op": "!"
    },
    "1149": {
      "error": "expected element 1 to be False",
      "op": "assert // expected element 1 to be False"
    },
    "1150": {
      "block": "test_bool_array_after_if_else@8",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1152": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)",
        "2"
      ]
    },
    "1153": {
      "op": ">",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "tmp%11#0"
      ]
    },
    "1154": {
      "op": "bz test_bool_array_after_if_else@10",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1157": {
      "op": "frame_dig 1"
    },
    "1159": {
      "op": "extract 2 0"
    },
    "1162": {
      "op": "intc_2 // 2"
    },
    "1163": {
      "op": "frame_dig 0"
    },
    "1165": {
      "op": "<"
    },
    "1166": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "1167": {
      "op": "intc_2 // 2"
    },
    "1168": {
      "op": "getbit"
    },
    "1169": {
      "op": "bytec_0 // 0x00"
    },
    "1170": {
      "op": "intc_0 // 0"
    },
    "1171": {
      "op": "uncover 2"
    },
    "1173": {
      "op": "setbit"
    },
    "1174": {
      "op": "intc_0 // 0"
    },
    "1175": {
      "op": "getbit"
    },
    "1176": {
      "error": "expected element 2 to be True",
      "op": "assert // expected element 2 to be True"
    },
    "1177": {
      "block": "test_bool_array_after_if_else@10",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1179": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)",
        "3"
      ]
    },
    "1181": {
      "op": ">",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "1182": {
      "op": "bz test_bool_array_after_if_else@12",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1185": {
      "op": "frame_dig -1"
    },
    "1187": {
      "op": "intc_1 // 1"
    },
    "1188": {
      "op": "-"
    },
    "1189": {
      "op": "frame_dig 1"
    },
    "1191": {
      "op": "extract 2 0"
    },
    "1194": {
      "op": "dig 1"
    },
    "1196": {
      "op": "frame_dig 0"
    },
    "1198": {
      "op": "<"
    },
    "1199": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds"
    },
    "1200": {
      "op": "swap"
    },
    "1201": {
      "op": "getbit"
    },
    "1202": {
      "op": "bytec_0 // 0x00"
    },
    "1203": {
      "op": "intc_0 // 0"
    },
    "1204": {
      "op": "uncover 2"
    },
    "1206": {
      "op": "setbit"
    },
    "1207": {
      "op": "intc_0 // 0"
    },
    "1208": {
      "op": "getbit"
    },
    "1209": {
      "op": "!"
    },
    "1210": {
      "error": "expected last element to be False",
      "op": "assert // expected last element to be False"
    },
    "1211": {
      "block": "test_bool_array_after_if_else@12",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "op": "pushbytes \"g\"",
      "defined_out": [
        "\"g\""
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "\"g\""
      ]
    },
    "1214": {
      "op": "frame_dig 1",
      "defined_out": [
        "\"g\"",
        "arr#0"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "\"g\"",
        "arr#0"
      ]
    },
    "1216": {
      "op": "app_global_put",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1217": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr#0",
        "length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0",
        "length#0 (copy)"
      ]
    },
    "1219": {
      "op": "bz test_bool_array_after_if_else@14",
      "stack_out": [
        "array_length#0",
        "arr#0",
        "i#0"
      ]
    },
    "1222": {
      "op": "frame_dig 0"
    },
    "1224": {
      "op": "intc_1 // 1"
    },
    "1225": {
      "op": "-"
    },
    "1226": {
      "op": "dup"
    },
    "1227": {
      "op": "itob"
    },
    "1228": {
      "op": "extract 6 0"
    },
    "1231": {
      "op": "frame_dig 1"
    },
    "1233": {
      "op": "swap"
    },
    "1234": {
      "op": "replace2 0"
    },
    "1236": {
      "op": "dig 1"
    },
    "1238": {
      "op": "pushint 16 // 16"
    },
    "1240": {
      "op": "+"
    },
    "1241": {
      "op": "intc_0 // 0"
    },
    "1242": {
      "op": "setbit"
    },
    "1243": {
      "op": "swap"
    },
    "1244": {
      "op": "pushint 7 // 7"
    },
    "1246": {
      "op": "+"
    },
    "1247": {
      "op": "intc_3 // 8"
    },
    "1248": {
      "op": "/"
    },
    "1249": {
      "op": "intc_2 // 2"
    },
    "1250": {
      "op": "+"
    },
    "1251": {
      "op": "intc_0 // 0"
    },
    "1252": {
      "op": "swap"
    },
    "1253": {
      "op": "substring3"
    },
    "1254": {
      "op": "intc_0 // 0"
    },
    "1255": {
      "op": "extract_uint16"
    },
    "1256": {
      "op": "frame_dig -1"
    },
    "1258": {
      "op": "intc_1 // 1"
    },
    "1259": {
      "op": "-"
    },
    "1260": {
      "op": "=="
    },
    "1261": {
      "op": "assert"
    },
    "1262": {
      "block": "test_bool_array_after_if_else@14",
      "stack_in": [
        "array_length#0",
        "arr#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1263": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array",
      "params": {},
      "block": "test_fixed_size_tuple_array",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1266": {
      "op": "bytec_2 // 0x0000"
    },
    "1267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1268": {
      "block": "test_fixed_size_tuple_array_for_header@1",
      "stack_in": [
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1270": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1272": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1273": {
      "op": "bz test_fixed_size_tuple_array_after_for@4",
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1276": {
      "op": "frame_dig 0"
    },
    "1278": {
      "op": "extract 2 0"
    },
    "1281": {
      "op": "frame_dig 1"
    },
    "1283": {
      "op": "dup"
    },
    "1284": {
      "op": "intc_1 // 1"
    },
    "1285": {
      "op": "+"
    },
    "1286": {
      "op": "swap"
    },
    "1287": {
      "op": "intc_2 // 2"
    },
    "1288": {
      "op": "+"
    },
    "1289": {
      "op": "dig 1"
    },
    "1291": {
      "op": "itob"
    },
    "1292": {
      "op": "swap"
    },
    "1293": {
      "op": "itob"
    },
    "1294": {
      "op": "concat"
    },
    "1295": {
      "op": "uncover 2"
    },
    "1297": {
      "op": "swap"
    },
    "1298": {
      "op": "concat"
    },
    "1299": {
      "op": "dup"
    },
    "1300": {
      "op": "len"
    },
    "1301": {
      "op": "pushint 16 // 16"
    },
    "1303": {
      "op": "/"
    },
    "1304": {
      "op": "itob"
    },
    "1305": {
      "op": "extract 6 2"
    },
    "1308": {
      "op": "swap"
    },
    "1309": {
      "op": "concat"
    },
    "1310": {
      "op": "frame_bury 0"
    },
    "1312": {
      "op": "frame_bury 1"
    },
    "1314": {
      "op": "b test_fixed_size_tuple_array_for_header@1"
    },
    "1317": {
      "block": "test_fixed_size_tuple_array_after_for@4",
      "stack_in": [
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1319": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "1320": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1321": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0"
      ]
    },
    "1322": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "1323": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "5"
      ]
    },
    "1325": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1326": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0"
      ]
    },
    "1327": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "arr#0 (copy)"
      ]
    },
    "1329": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1332": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1333": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "0"
      ]
    },
    "1334": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0"
      ]
    },
    "1335": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1337": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item0%0%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "array_head_and_tail%0#0 (copy)",
        "8"
      ]
    },
    "1338": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "1339": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item1%0%0#0",
        "item0%0%0#0"
      ]
    },
    "1340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%0#0",
        "item0%0%0#0",
        "item1%0%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item1%0%0#0",
        "item0%0%0#0",
        "1"
      ]
    },
    "1341": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item1%0%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "item1%0%0#0",
        "tmp%6#0"
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "tmp%6#0",
        "item1%0%0#0"
      ]
    },
    "1343": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%0#0",
        "item1%0%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "tmp%6#0",
        "item1%0%0#0",
        "2"
      ]
    },
    "1344": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1345": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0",
        "tmp%8#0"
      ]
    },
    "1346": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%4#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1347": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%4#0"
      ]
    },
    "1348": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%4#0",
        "1"
      ]
    },
    "1349": {
      "op": "-",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%10#0"
      ]
    },
    "1350": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "tmp%10#0",
        "16"
      ]
    },
    "1352": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "1353": {
      "op": "dup2",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0",
        "item_offset%1#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0 (copy)"
      ]
    },
    "1354": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%1#0 (copy)",
        "16"
      ]
    },
    "1356": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%1#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0",
        "arc4_item%1#0"
      ]
    },
    "1357": {
      "op": "cover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%1#0",
        "array_head_and_tail%0#0",
        "item_offset%1#0"
      ]
    },
    "1359": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%1#0",
        "arr#0",
        "item0%1%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%1#0",
        "item0%1%0#0"
      ]
    },
    "1360": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%1%0#0",
        "arc4_item%1#0"
      ]
    },
    "1361": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%1%0#0",
        "arc4_item%1#0",
        "8"
      ]
    },
    "1362": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "item0%1%0#0",
        "item1%1%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%1%0#0",
        "item1%1%0#0"
      ]
    },
    "1363": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%1%0#0",
        "item0%1%0#0"
      ]
    },
    "1364": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%1%0#0",
        "item0%1%0#0",
        "5"
      ]
    },
    "1366": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "item1%1%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%1%0#0",
        "tmp%11#0"
      ]
    },
    "1367": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%11#0",
        "item1%1%0#0"
      ]
    },
    "1368": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "arr#0",
        "item1%1%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%11#0",
        "item1%1%0#0",
        "6"
      ]
    },
    "1370": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1371": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%13#0"
      ]
    },
    "1372": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1373": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "16"
      ]
    },
    "1375": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_fixed_size",
      "op": "callsub dynamic_array_pop_fixed_size",
      "defined_out": [
        "arr#0",
        "popped%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "popped%0#0",
        "arr#0"
      ]
    },
    "1378": {
      "op": "bury 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1380": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "1381": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1382": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0"
      ]
    },
    "1383": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ]
    },
    "1384": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%14#0",
        "tmp%14#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "tmp%14#0 (copy)",
        "4"
      ]
    },
    "1386": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1387": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0"
      ]
    },
    "1388": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "arr#0 (copy)"
      ]
    },
    "1390": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1393": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1394": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "0"
      ]
    },
    "1395": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0"
      ]
    },
    "1396": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1398": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0",
        "array_head_and_tail%2#0 (copy)",
        "8"
      ]
    },
    "1399": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item0%2%0#0",
        "item1%2%0#0"
      ]
    },
    "1400": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item1%2%0#0",
        "item0%2%0#0"
      ]
    },
    "1401": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item1%2%0#0",
        "item0%2%0#0",
        "1"
      ]
    },
    "1402": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item1%2%0#0",
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "item1%2%0#0",
        "tmp%16#0"
      ]
    },
    "1403": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "tmp%16#0",
        "item1%2%0#0"
      ]
    },
    "1404": {
      "op": "intc_2 // 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "tmp%16#0",
        "item1%2%0#0",
        "2"
      ]
    },
    "1405": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%14#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1406": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%14#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0",
        "tmp%18#0"
      ]
    },
    "1407": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%14#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1408": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%14#0"
      ]
    },
    "1409": {
      "op": "intc_1 // 1",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%14#0",
        "1"
      ]
    },
    "1410": {
      "op": "-",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%20#0"
      ]
    },
    "1411": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%20#0",
        "16"
      ]
    },
    "1413": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0"
      ]
    },
    "1414": {
      "op": "dup2",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%3#0",
        "item_offset%3#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%3#0 (copy)"
      ]
    },
    "1415": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%3#0 (copy)",
        "16"
      ]
    },
    "1417": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "arc4_item%3#0"
      ]
    },
    "1418": {
      "op": "cover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0"
      ]
    },
    "1420": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0"
      ]
    },
    "1421": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "arc4_item%3#0"
      ]
    },
    "1422": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "arc4_item%3#0",
        "8"
      ]
    },
    "1423": {
      "op": "extract_uint64",
      "defined_out": [
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ]
    },
    "1424": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0"
      ]
    },
    "1425": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0",
        "4"
      ]
    },
    "1427": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "item1%3%0#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "tmp%21#0"
      ]
    },
    "1428": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%21#0",
        "item1%3%0#0"
      ]
    },
    "1429": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%21#0",
        "item1%3%0#0",
        "5"
      ]
    },
    "1431": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1432": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%23#0"
      ]
    },
    "1433": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1434": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "\"c\""
      ]
    },
    "1437": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "\"c\"",
        "arr#0"
      ]
    },
    "1438": {
      "op": "app_global_put",
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1439": {
      "retsub": true,
      "op": "retsub"
    },
    "1440": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array",
      "params": {},
      "block": "test_fixed_size_named_tuple_array",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1443": {
      "op": "bytec_2 // 0x0000"
    },
    "1444": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1445": {
      "block": "test_fixed_size_named_tuple_array_for_header@1",
      "stack_in": [
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1447": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1449": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1450": {
      "op": "bz test_fixed_size_named_tuple_array_after_for@4",
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1453": {
      "op": "frame_dig 0"
    },
    "1455": {
      "op": "extract 2 0"
    },
    "1458": {
      "op": "frame_dig 1"
    },
    "1460": {
      "op": "dup"
    },
    "1461": {
      "op": "intc_2 // 2"
    },
    "1462": {
      "op": "%"
    },
    "1463": {
      "op": "!"
    },
    "1464": {
      "op": "dig 1"
    },
    "1466": {
      "op": "pushint 3 // 3"
    },
    "1468": {
      "op": "*"
    },
    "1469": {
      "op": "intc_2 // 2"
    },
    "1470": {
      "op": "%"
    },
    "1471": {
      "op": "!"
    },
    "1472": {
      "op": "dig 2"
    },
    "1474": {
      "op": "itob"
    },
    "1475": {
      "op": "bytec_0 // 0x00"
    },
    "1476": {
      "op": "pushbytes 0x80"
    },
    "1479": {
      "op": "uncover 4"
    },
    "1481": {
      "op": "select"
    },
    "1482": {
      "op": "concat"
    },
    "1483": {
      "op": "pushint 65 // 65"
    },
    "1485": {
      "op": "uncover 2"
    },
    "1487": {
      "op": "setbit"
    },
    "1488": {
      "op": "uncover 2"
    },
    "1490": {
      "op": "swap"
    },
    "1491": {
      "op": "concat"
    },
    "1492": {
      "op": "dup"
    },
    "1493": {
      "op": "len"
    },
    "1494": {
      "op": "pushint 9 // 9"
    },
    "1496": {
      "op": "/"
    },
    "1497": {
      "op": "itob"
    },
    "1498": {
      "op": "extract 6 2"
    },
    "1501": {
      "op": "swap"
    },
    "1502": {
      "op": "concat"
    },
    "1503": {
      "op": "frame_bury 0"
    },
    "1505": {
      "op": "intc_1 // 1"
    },
    "1506": {
      "op": "+"
    },
    "1507": {
      "op": "frame_bury 1"
    },
    "1509": {
      "op": "b test_fixed_size_named_tuple_array_for_header@1"
    },
    "1512": {
      "block": "test_fixed_size_named_tuple_array_after_for@4",
      "stack_in": [
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1514": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "1515": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1516": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%7#0"
      ]
    },
    "1517": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%7#0",
        "5"
      ]
    },
    "1519": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%8#0"
      ]
    },
    "1520": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1521": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "1522": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1525": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1526": {
      "error": "Index access is out of bounds",
      "op": "extract 0 9 // on error: Index access is out of bounds",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%0#0",
        "arc4_item%0#0"
      ]
    },
    "1529": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "1531": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0"
      ]
    },
    "1532": {
      "op": "dig 1",
      "defined_out": [
        "arc4_item%0#0",
        "arc4_item%0#0 (copy)",
        "arr#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "arc4_item%0#0 (copy)"
      ]
    },
    "1534": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "arc4_item%0#0",
        "arc4_item%0#0 (copy)",
        "arr#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "arc4_item%0#0 (copy)",
        "64"
      ]
    },
    "1536": {
      "op": "getbit",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0",
        "foo#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "is_true%0#0"
      ]
    },
    "1537": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "arc4_item%0#0",
        "arr#0",
        "foo#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1539": {
      "op": "uncover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1541": {
      "op": "setbit",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0",
        "encoded_bool%0#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "encoded_bool%0#0"
      ]
    },
    "1542": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1543": {
      "op": "getbit",
      "defined_out": [
        "arc4_item%0#0",
        "arr#0",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%0#0",
        "foo#0",
        "bar#0"
      ]
    },
    "1544": {
      "op": "uncover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "arc4_item%0#0"
      ]
    },
    "1546": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "arc4_item%0#0",
        "arr#0",
        "bar#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "arc4_item%0#0",
        "65"
      ]
    },
    "1548": {
      "op": "getbit",
      "defined_out": [
        "arr#0",
        "bar#0",
        "foo#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "is_true%1#0"
      ]
    },
    "1549": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "1550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "1551": {
      "op": "uncover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "1553": {
      "op": "setbit",
      "defined_out": [
        "arr#0",
        "bar#0",
        "encoded_bool%1#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "encoded_bool%1#0"
      ]
    },
    "1554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1555": {
      "op": "getbit",
      "defined_out": [
        "arr#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "foo#0",
        "bar#0",
        "baz#0"
      ]
    },
    "1556": {
      "op": "uncover 2",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "bar#0",
        "baz#0",
        "foo#0"
      ]
    },
    "1558": {
      "op": "!",
      "defined_out": [
        "arr#0",
        "bar#0",
        "baz#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "bar#0",
        "baz#0",
        "tmp%9#0"
      ]
    },
    "1559": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "bar#0",
        "baz#0"
      ]
    },
    "1560": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "baz#0",
        "bar#0"
      ]
    },
    "1561": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "baz#0"
      ]
    },
    "1562": {
      "op": "assert",
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1563": {
      "op": "pushbytes \"d\"",
      "defined_out": [
        "\"d\"",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "i#0",
        "arr#0",
        "\"d\""
      ]
    },
    "1566": {
      "op": "swap",
      "stack_out": [
        "arr#0",
        "i#0",
        "\"d\"",
        "arr#0"
      ]
    },
    "1567": {
      "op": "app_global_put",
      "stack_out": [
        "arr#0",
        "i#0"
      ]
    },
    "1568": {
      "retsub": true,
      "op": "retsub"
    },
    "1569": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array",
      "params": {},
      "block": "test_dynamic_sized_tuple_array",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1572": {
      "op": "bytec_1 // \"\""
    },
    "1573": {
      "op": "bytec_2 // 0x0000"
    },
    "1574": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1575": {
      "block": "test_dynamic_sized_tuple_array_for_header@1",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1577": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1579": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1580": {
      "op": "bz test_dynamic_sized_tuple_array_after_for@4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1583": {
      "op": "frame_dig 2"
    },
    "1585": {
      "op": "dup"
    },
    "1586": {
      "op": "intc_1 // 1"
    },
    "1587": {
      "op": "+"
    },
    "1588": {
      "op": "swap"
    },
    "1589": {
      "op": "bzero"
    },
    "1590": {
      "op": "dig 1"
    },
    "1592": {
      "op": "itob"
    },
    "1593": {
      "op": "dig 1"
    },
    "1595": {
      "op": "len"
    },
    "1596": {
      "op": "itob"
    },
    "1597": {
      "op": "extract 6 2"
    },
    "1600": {
      "op": "uncover 2"
    },
    "1602": {
      "op": "concat"
    },
    "1603": {
      "op": "swap"
    },
    "1604": {
      "op": "bytec 4 // 0x000a"
    },
    "1606": {
      "op": "concat"
    },
    "1607": {
      "op": "swap"
    },
    "1608": {
      "op": "concat"
    },
    "1609": {
      "op": "bytec 5 // 0x0002"
    },
    "1611": {
      "op": "swap"
    },
    "1612": {
      "op": "concat"
    },
    "1613": {
      "op": "frame_dig 1"
    },
    "1615": {
      "op": "dup"
    },
    "1616": {
      "op": "intc_0 // 0"
    },
    "1617": {
      "op": "extract_uint16"
    },
    "1618": {
      "op": "swap"
    },
    "1619": {
      "op": "extract 2 0"
    },
    "1622": {
      "op": "intc_1 // 1"
    },
    "1623": {
      "op": "uncover 3"
    },
    "1625": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element"
    },
    "1628": {
      "op": "frame_bury 1"
    },
    "1630": {
      "op": "frame_bury 2"
    },
    "1632": {
      "op": "b test_dynamic_sized_tuple_array_for_header@1"
    },
    "1635": {
      "block": "test_dynamic_sized_tuple_array_after_for@4",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1637": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "0"
      ]
    },
    "1638": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1639": {
      "op": "dup",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1640": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1642": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0",
        "5"
      ]
    },
    "1644": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1645": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1646": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1647": {
      "op": "frame_bury 2",
      "defined_out": [
        "arr#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1649": {
      "block": "test_dynamic_sized_tuple_array_for_header@5",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1651": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1653": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "continue_looping%1#0"
      ]
    },
    "1654": {
      "op": "bz test_dynamic_sized_tuple_array_after_for@8",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1657": {
      "op": "frame_dig 1"
    },
    "1659": {
      "op": "extract 2 0"
    },
    "1662": {
      "op": "frame_dig 2"
    },
    "1664": {
      "op": "dup"
    },
    "1665": {
      "op": "cover 2"
    },
    "1667": {
      "op": "intc_2 // 2"
    },
    "1668": {
      "op": "*"
    },
    "1669": {
      "op": "dig 1"
    },
    "1671": {
      "op": "swap"
    },
    "1672": {
      "op": "extract_uint16"
    },
    "1673": {
      "op": "dig 2"
    },
    "1675": {
      "op": "intc_1 // 1"
    },
    "1676": {
      "op": "+"
    },
    "1677": {
      "op": "frame_dig 0"
    },
    "1679": {
      "op": "dig 1"
    },
    "1681": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds"
    },
    "1682": {
      "op": "dig 3"
    },
    "1684": {
      "op": "len"
    },
    "1685": {
      "op": "dig 2"
    },
    "1687": {
      "op": "intc_2 // 2"
    },
    "1688": {
      "op": "*"
    },
    "1689": {
      "op": "dig 5"
    },
    "1691": {
      "op": "swap"
    },
    "1692": {
      "op": "extract_uint16"
    },
    "1693": {
      "op": "uncover 2"
    },
    "1695": {
      "op": "select"
    },
    "1696": {
      "op": "uncover 3"
    },
    "1698": {
      "op": "uncover 3"
    },
    "1700": {
      "op": "uncover 2"
    },
    "1702": {
      "op": "substring3"
    },
    "1703": {
      "op": "dup"
    },
    "1704": {
      "op": "intc_0 // 0"
    },
    "1705": {
      "op": "extract_uint64"
    },
    "1706": {
      "op": "dig 1"
    },
    "1708": {
      "op": "intc_3 // 8"
    },
    "1709": {
      "op": "extract_uint16"
    },
    "1710": {
      "op": "dig 2"
    },
    "1712": {
      "op": "len"
    },
    "1713": {
      "op": "uncover 3"
    },
    "1715": {
      "op": "cover 2"
    },
    "1717": {
      "op": "substring3"
    },
    "1718": {
      "op": "swap"
    },
    "1719": {
      "op": "dig 2"
    },
    "1721": {
      "op": "=="
    },
    "1722": {
      "error": "expected 1st element to be correct",
      "op": "assert // expected 1st element to be correct"
    },
    "1723": {
      "op": "extract 2 0"
    },
    "1726": {
      "op": "len"
    },
    "1727": {
      "op": "uncover 2"
    },
    "1729": {
      "op": "=="
    },
    "1730": {
      "error": "expected 2nd element to be correct",
      "op": "assert // expected 2nd element to be correct"
    },
    "1731": {
      "op": "frame_bury 2"
    },
    "1733": {
      "op": "b test_dynamic_sized_tuple_array_for_header@5"
    },
    "1736": {
      "block": "test_dynamic_sized_tuple_array_after_for@8",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1738": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "arr#0",
        "popped%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "popped%0#0",
        "arr#0"
      ]
    },
    "1741": {
      "op": "bury 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1743": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "1744": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "1745": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0"
      ]
    },
    "1746": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1747": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "4"
      ]
    },
    "1749": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1750": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0"
      ]
    },
    "1751": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "arr#0 (copy)"
      ]
    },
    "1753": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0"
      ]
    },
    "1756": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1757": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "0"
      ]
    },
    "1758": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "1759": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1761": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0 (copy)",
        "1"
      ]
    },
    "1762": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0"
      ]
    },
    "1763": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1765": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0"
      ]
    },
    "1766": {
      "op": "dig 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1768": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "2"
      ]
    },
    "1769": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0"
      ]
    },
    "1770": {
      "op": "dig 1",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0",
        "end_of_array%2#0 (copy)"
      ]
    },
    "1772": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "next_item_offset%2#0"
      ]
    },
    "1773": {
      "op": "dig 3",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "has_next%2#0",
        "has_next%2#0 (copy)",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "next_item_offset%2#0",
        "has_next%2#0 (copy)"
      ]
    },
    "1775": {
      "op": "select",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0"
      ]
    },
    "1776": {
      "op": "dig 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1778": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0"
      ]
    },
    "1780": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0",
        "end_offset%2#0"
      ]
    },
    "1782": {
      "op": "substring3",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0"
      ]
    },
    "1783": {
      "op": "dup",
      "defined_out": [
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "1784": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "0"
      ]
    },
    "1785": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0"
      ]
    },
    "1786": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "1788": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "arc4_item%2#0 (copy)",
        "8"
      ]
    },
    "1789": {
      "op": "extract_uint16",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "1790": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "1792": {
      "op": "len",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "1793": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "arc4_item%2#0"
      ]
    },
    "1795": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "arc4_item%2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "1797": {
      "op": "substring3",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item1%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item1%2#0"
      ]
    },
    "1798": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item1%2%0#0"
      ]
    },
    "1801": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "item0%2%0#0"
      ]
    },
    "1802": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "item0%2%0#0",
        "1"
      ]
    },
    "1803": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item1%2%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "tmp%12#0"
      ]
    },
    "1804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "tmp%12#0",
        "0"
      ]
    },
    "1805": {
      "op": "bzero",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item1%2%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1806": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%12#0",
        "tmp%13#0",
        "item1%2%0#0"
      ]
    },
    "1808": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1809": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%15#0"
      ]
    },
    "1810": {
      "error": "expected 1, 0",
      "op": "assert // expected 1, 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0"
      ]
    },
    "1811": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "has_next%2#0 (copy)"
      ]
    },
    "1813": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "has_next%2#0 (copy)",
        "2"
      ]
    },
    "1814": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset_offset%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset_offset%3#0"
      ]
    },
    "1815": {
      "op": "dig 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset_offset%3#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1817": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset_offset%3#0"
      ]
    },
    "1818": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset%3#0"
      ]
    },
    "1819": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%2#0"
      ]
    },
    "1821": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%2#0",
        "1"
      ]
    },
    "1822": {
      "op": "+",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0"
      ]
    },
    "1823": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0"
      ]
    },
    "1825": {
      "op": "dig 1",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "next_index%3#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0",
        "next_index%3#0 (copy)"
      ]
    },
    "1827": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_index%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "has_next%3#0"
      ]
    },
    "1828": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_index%3#0"
      ]
    },
    "1829": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_index%3#0",
        "2"
      ]
    },
    "1830": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_item_offset_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset_offset%3#0"
      ]
    },
    "1831": {
      "op": "dig 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset_offset%3#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "1833": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "array_head_and_tail%2#0 (copy)",
        "next_item_offset_offset%3#0"
      ]
    },
    "1834": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_item_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset%3#0"
      ]
    },
    "1835": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset%3#0",
        "end_of_array%2#0"
      ]
    },
    "1837": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "end_of_array%2#0",
        "next_item_offset%3#0"
      ]
    },
    "1838": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "end_of_array%2#0",
        "next_item_offset%3#0",
        "has_next%3#0"
      ]
    },
    "1840": {
      "op": "select",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_offset%3#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "end_offset%3#0"
      ]
    },
    "1841": {
      "op": "substring3",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0"
      ]
    },
    "1842": {
      "op": "dup",
      "defined_out": [
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "1843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)",
        "0"
      ]
    },
    "1844": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0"
      ]
    },
    "1845": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "1847": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "arc4_item%3#0 (copy)",
        "8"
      ]
    },
    "1848": {
      "op": "extract_uint16",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0",
        "item_start_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0"
      ]
    },
    "1849": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "1851": {
      "op": "len",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "1852": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "arc4_item%3#0"
      ]
    },
    "1854": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "arc4_item%3#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "1856": {
      "op": "substring3",
      "defined_out": [
        "arr#0",
        "item0%3%0#0",
        "item1%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item1%3#0"
      ]
    },
    "1857": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ]
    },
    "1860": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0"
      ]
    },
    "1861": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0",
        "4"
      ]
    },
    "1863": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0"
      ]
    },
    "1864": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0",
        "3"
      ]
    },
    "1866": {
      "op": "bzero",
      "defined_out": [
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1867": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%18#0",
        "tmp%19#0",
        "item1%3%0#0"
      ]
    },
    "1869": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "1870": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%21#0"
      ]
    },
    "1871": {
      "error": "expected 4, 3",
      "op": "assert // expected 4, 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1872": {
      "op": "pushbytes \"e\"",
      "defined_out": [
        "\"e\"",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "\"e\""
      ]
    },
    "1875": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "\"e\"",
        "arr#0"
      ]
    },
    "1876": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1877": {
      "retsub": true,
      "op": "retsub"
    },
    "1878": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array",
      "params": {},
      "block": "test_dynamic_sized_named_tuple_array",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1881": {
      "op": "bytec_1 // \"\""
    },
    "1882": {
      "op": "bytec_2 // 0x0000"
    },
    "1883": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1884": {
      "block": "test_dynamic_sized_named_tuple_array_for_header@1",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1886": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1888": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1889": {
      "op": "bz test_dynamic_sized_named_tuple_array_after_for@4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1892": {
      "op": "frame_dig 2"
    },
    "1894": {
      "op": "dup"
    },
    "1895": {
      "op": "intc_1 // 1"
    },
    "1896": {
      "op": "+"
    },
    "1897": {
      "op": "swap"
    },
    "1898": {
      "callsub": "test_cases.array.immutable.times",
      "op": "callsub times"
    },
    "1901": {
      "op": "dig 1"
    },
    "1903": {
      "op": "itob"
    },
    "1904": {
      "op": "dig 1"
    },
    "1906": {
      "op": "len"
    },
    "1907": {
      "op": "itob"
    },
    "1908": {
      "op": "extract 6 2"
    },
    "1911": {
      "op": "uncover 2"
    },
    "1913": {
      "op": "concat"
    },
    "1914": {
      "op": "swap"
    },
    "1915": {
      "op": "bytec 4 // 0x000a"
    },
    "1917": {
      "op": "concat"
    },
    "1918": {
      "op": "swap"
    },
    "1919": {
      "op": "concat"
    },
    "1920": {
      "op": "bytec 5 // 0x0002"
    },
    "1922": {
      "op": "swap"
    },
    "1923": {
      "op": "concat"
    },
    "1924": {
      "op": "frame_dig 1"
    },
    "1926": {
      "op": "dup"
    },
    "1927": {
      "op": "intc_0 // 0"
    },
    "1928": {
      "op": "extract_uint16"
    },
    "1929": {
      "op": "swap"
    },
    "1930": {
      "op": "extract 2 0"
    },
    "1933": {
      "op": "intc_1 // 1"
    },
    "1934": {
      "op": "uncover 3"
    },
    "1936": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element"
    },
    "1939": {
      "op": "frame_bury 1"
    },
    "1941": {
      "op": "frame_bury 2"
    },
    "1943": {
      "op": "b test_dynamic_sized_named_tuple_array_for_header@1"
    },
    "1946": {
      "block": "test_dynamic_sized_named_tuple_array_after_for@4",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "1948": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "0"
      ]
    },
    "1949": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1950": {
      "op": "dup",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1951": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1953": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%4#0",
        "5"
      ]
    },
    "1955": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1956": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1957": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1958": {
      "op": "frame_bury 2",
      "defined_out": [
        "arr#0",
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1960": {
      "block": "test_dynamic_sized_named_tuple_array_for_header@5",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0"
      ]
    },
    "1962": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "1964": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "i#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "continue_looping%1#0"
      ]
    },
    "1965": {
      "op": "bz test_dynamic_sized_named_tuple_array_after_for@8",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "1968": {
      "op": "frame_dig 1"
    },
    "1970": {
      "op": "extract 2 0"
    },
    "1973": {
      "op": "frame_dig 2"
    },
    "1975": {
      "op": "dup"
    },
    "1976": {
      "op": "cover 2"
    },
    "1978": {
      "op": "intc_2 // 2"
    },
    "1979": {
      "op": "*"
    },
    "1980": {
      "op": "dig 1"
    },
    "1982": {
      "op": "swap"
    },
    "1983": {
      "op": "extract_uint16"
    },
    "1984": {
      "op": "dig 2"
    },
    "1986": {
      "op": "intc_1 // 1"
    },
    "1987": {
      "op": "+"
    },
    "1988": {
      "op": "frame_dig 0"
    },
    "1990": {
      "op": "dig 1"
    },
    "1992": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds"
    },
    "1993": {
      "op": "dig 3"
    },
    "1995": {
      "op": "len"
    },
    "1996": {
      "op": "dig 2"
    },
    "1998": {
      "op": "intc_2 // 2"
    },
    "1999": {
      "op": "*"
    },
    "2000": {
      "op": "dig 5"
    },
    "2002": {
      "op": "swap"
    },
    "2003": {
      "op": "extract_uint16"
    },
    "2004": {
      "op": "uncover 2"
    },
    "2006": {
      "op": "select"
    },
    "2007": {
      "op": "uncover 3"
    },
    "2009": {
      "op": "uncover 3"
    },
    "2011": {
      "op": "uncover 2"
    },
    "2013": {
      "op": "substring3"
    },
    "2014": {
      "op": "dup"
    },
    "2015": {
      "op": "intc_0 // 0"
    },
    "2016": {
      "op": "extract_uint64"
    },
    "2017": {
      "op": "dig 1"
    },
    "2019": {
      "op": "intc_3 // 8"
    },
    "2020": {
      "op": "extract_uint16"
    },
    "2021": {
      "op": "dig 2"
    },
    "2023": {
      "op": "len"
    },
    "2024": {
      "op": "uncover 3"
    },
    "2026": {
      "op": "cover 2"
    },
    "2028": {
      "op": "substring3"
    },
    "2029": {
      "op": "swap"
    },
    "2030": {
      "op": "dig 2"
    },
    "2032": {
      "op": "=="
    },
    "2033": {
      "error": "expected 1st element to be correct",
      "op": "assert // expected 1st element to be correct"
    },
    "2034": {
      "op": "extract 2 0"
    },
    "2037": {
      "op": "uncover 2"
    },
    "2039": {
      "callsub": "test_cases.array.immutable.times",
      "op": "callsub times"
    },
    "2042": {
      "op": "=="
    },
    "2043": {
      "error": "expected 2nd element to be correct",
      "op": "assert // expected 2nd element to be correct"
    },
    "2044": {
      "op": "frame_bury 2"
    },
    "2046": {
      "op": "b test_dynamic_sized_named_tuple_array_for_header@5"
    },
    "2049": {
      "block": "test_dynamic_sized_named_tuple_array_after_for@8",
      "stack_in": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "2051": {
      "callsub": "_puya_lib.arc4.dynamic_array_pop_dynamic_element",
      "op": "callsub dynamic_array_pop_dynamic_element",
      "defined_out": [
        "arr#0",
        "popped%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "popped%0#0",
        "arr#0"
      ]
    },
    "2054": {
      "op": "bury 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "2056": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "2057": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "2058": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0"
      ]
    },
    "2059": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2060": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "4"
      ]
    },
    "2062": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2063": {
      "op": "assert",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0"
      ]
    },
    "2064": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "arr#0 (copy)"
      ]
    },
    "2066": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0"
      ]
    },
    "2069": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2070": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "0"
      ]
    },
    "2071": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "2072": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "tmp%10#0 (copy)",
        "1"
      ]
    },
    "2075": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0"
      ]
    },
    "2076": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2078": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0"
      ]
    },
    "2079": {
      "op": "dig 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2081": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "array_head_and_tail%2#0",
        "array_head_and_tail%2#0 (copy)",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "2"
      ]
    },
    "2082": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0"
      ]
    },
    "2083": {
      "op": "dig 1",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "has_next%2#0",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "next_item_offset%2#0",
        "end_of_array%2#0 (copy)"
      ]
    },
    "2085": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "next_item_offset%2#0"
      ]
    },
    "2086": {
      "op": "dig 3",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "has_next%2#0",
        "has_next%2#0 (copy)",
        "item_offset%2#0",
        "next_item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_of_array%2#0 (copy)",
        "next_item_offset%2#0",
        "has_next%2#0 (copy)"
      ]
    },
    "2088": {
      "op": "select",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "has_next%2#0",
        "item_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0"
      ]
    },
    "2089": {
      "op": "dig 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2091": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "end_offset%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0"
      ]
    },
    "2093": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset%2#0",
        "end_offset%2#0"
      ]
    },
    "2095": {
      "op": "substring3",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0"
      ]
    },
    "2096": {
      "op": "dup",
      "defined_out": [
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "2097": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "0"
      ]
    },
    "2098": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0"
      ]
    },
    "2099": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "2101": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arc4_item%2#0",
        "arc4_item%2#0 (copy)",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "arc4_item%2#0 (copy)",
        "8"
      ]
    },
    "2102": {
      "op": "extract_uint16",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0"
      ]
    },
    "2103": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "arc4_item%2#0 (copy)"
      ]
    },
    "2105": {
      "op": "len",
      "defined_out": [
        "arc4_item%2#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item_end_offset%2#0",
        "item_start_offset%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "arc4_item%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2106": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0",
        "arc4_item%2#0"
      ]
    },
    "2108": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "arc4_item%2#0",
        "item_start_offset%2#0",
        "item_end_offset%2#0"
      ]
    },
    "2110": {
      "op": "substring3",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item1%2#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item1%2#0"
      ]
    },
    "2111": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item0%2%0#0",
        "item1%2%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item0%2%0#0",
        "item1%2%0#0"
      ]
    },
    "2114": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "item0%2%0#0"
      ]
    },
    "2115": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "item0%2%0#0",
        "1"
      ]
    },
    "2116": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item1%2%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item1%2%0#0",
        "tmp%12#0"
      ]
    },
    "2117": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%12#0",
        "item1%2%0#0"
      ]
    },
    "2118": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item1%2%0#0",
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%12#0",
        "item1%2%0#0",
        "\"\""
      ]
    },
    "2119": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "2120": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "tmp%10#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "tmp%14#0"
      ]
    },
    "2121": {
      "error": "expected 1, 0",
      "op": "assert // expected 1, 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0"
      ]
    },
    "2122": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "has_next%2#0 (copy)"
      ]
    },
    "2124": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "has_next%2#0 (copy)",
        "2"
      ]
    },
    "2125": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset_offset%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset_offset%3#0"
      ]
    },
    "2126": {
      "op": "dig 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset_offset%3#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2128": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "array_head_and_tail%2#0 (copy)",
        "item_offset_offset%3#0"
      ]
    },
    "2129": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%2#0",
        "item_offset%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "has_next%2#0",
        "end_of_array%2#0",
        "item_offset%3#0"
      ]
    },
    "2130": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%2#0"
      ]
    },
    "2132": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%2#0",
        "1"
      ]
    },
    "2133": {
      "op": "+",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%10#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0"
      ]
    },
    "2134": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0"
      ]
    },
    "2136": {
      "op": "dig 1",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "next_index%3#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "tmp%10#0",
        "next_index%3#0 (copy)"
      ]
    },
    "2138": {
      "error": "Index access is out of bounds",
      "op": "- // on error: Index access is out of bounds",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_index%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "next_index%3#0",
        "has_next%3#0"
      ]
    },
    "2139": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_index%3#0"
      ]
    },
    "2140": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_index%3#0",
        "2"
      ]
    },
    "2141": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_item_offset_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset_offset%3#0"
      ]
    },
    "2142": {
      "op": "dig 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset_offset%3#0",
        "array_head_and_tail%2#0 (copy)"
      ]
    },
    "2144": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "array_head_and_tail%2#0 (copy)",
        "next_item_offset_offset%3#0"
      ]
    },
    "2145": {
      "op": "extract_uint16",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "has_next%3#0",
        "item_offset%3#0",
        "next_item_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "end_of_array%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset%3#0"
      ]
    },
    "2146": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "next_item_offset%3#0",
        "end_of_array%2#0"
      ]
    },
    "2148": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "has_next%3#0",
        "end_of_array%2#0",
        "next_item_offset%3#0"
      ]
    },
    "2149": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "end_of_array%2#0",
        "next_item_offset%3#0",
        "has_next%3#0"
      ]
    },
    "2151": {
      "op": "select",
      "defined_out": [
        "arr#0",
        "array_head_and_tail%2#0",
        "end_offset%3#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "array_head_and_tail%2#0",
        "item_offset%3#0",
        "end_offset%3#0"
      ]
    },
    "2152": {
      "op": "substring3",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0"
      ]
    },
    "2153": {
      "op": "dup",
      "defined_out": [
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "2154": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "arc4_item%3#0 (copy)",
        "0"
      ]
    },
    "2155": {
      "op": "extract_uint64",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0"
      ]
    },
    "2156": {
      "op": "dig 1",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "2158": {
      "op": "intc_3 // 8",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "arc4_item%3#0 (copy)",
        "8"
      ]
    },
    "2159": {
      "op": "extract_uint16",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0",
        "item_start_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0"
      ]
    },
    "2160": {
      "op": "dig 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "arc4_item%3#0 (copy)"
      ]
    },
    "2162": {
      "op": "len",
      "defined_out": [
        "arc4_item%3#0",
        "arr#0",
        "item0%3%0#0",
        "item_end_offset%3#0",
        "item_start_offset%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "arc4_item%3#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "2163": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0",
        "arc4_item%3#0"
      ]
    },
    "2165": {
      "op": "cover 2",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "arc4_item%3#0",
        "item_start_offset%3#0",
        "item_end_offset%3#0"
      ]
    },
    "2167": {
      "op": "substring3",
      "defined_out": [
        "arr#0",
        "item0%3%0#0",
        "item1%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item1%3#0"
      ]
    },
    "2168": {
      "op": "extract 2 0",
      "defined_out": [
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item0%3%0#0",
        "item1%3%0#0"
      ]
    },
    "2171": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0"
      ]
    },
    "2172": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "item0%3%0#0",
        "4"
      ]
    },
    "2174": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "item1%3%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "item1%3%0#0",
        "tmp%17#0"
      ]
    },
    "2175": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%17#0",
        "item1%3%0#0"
      ]
    },
    "2176": {
      "op": "pushbytes \"   \"",
      "defined_out": [
        "\"   \"",
        "arr#0",
        "item1%3%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%17#0",
        "item1%3%0#0",
        "\"   \""
      ]
    },
    "2181": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "2182": {
      "op": "&&",
      "defined_out": [
        "arr#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "tmp%19#0"
      ]
    },
    "2183": {
      "error": "expected 4, 3",
      "op": "assert // expected 4, 3",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0"
      ]
    },
    "2184": {
      "op": "pushbytes \"f\"",
      "defined_out": [
        "\"f\"",
        "arr#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "arr#0",
        "\"f\""
      ]
    },
    "2187": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0",
        "\"f\"",
        "arr#0"
      ]
    },
    "2188": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%4#0",
        "arr#0",
        "i#0"
      ]
    },
    "2189": {
      "retsub": true,
      "op": "retsub"
    },
    "2190": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples",
      "params": {},
      "block": "test_bit_packed_tuples",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "2193": {
      "op": "bytec_2 // 0x0000"
    },
    "2194": {
      "op": "dupn 3"
    },
    "2196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ]
    },
    "2197": {
      "block": "test_bit_packed_tuples_for_header@1",
      "stack_in": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "i#0"
      ]
    },
    "2199": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "i#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "i#0",
        "5"
      ]
    },
    "2201": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "2202": {
      "op": "bz test_bit_packed_tuples_after_for@4",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ]
    },
    "2205": {
      "op": "frame_dig 0"
    },
    "2207": {
      "op": "extract 2 0"
    },
    "2210": {
      "op": "frame_dig 4"
    },
    "2212": {
      "op": "dup"
    },
    "2213": {
      "op": "!"
    },
    "2214": {
      "op": "dig 1"
    },
    "2216": {
      "op": "intc_1 // 1"
    },
    "2217": {
      "op": "=="
    },
    "2218": {
      "op": "bytec_0 // 0x00"
    },
    "2219": {
      "op": "pushbytes 0x80"
    },
    "2222": {
      "op": "uncover 3"
    },
    "2224": {
      "op": "select"
    },
    "2225": {
      "op": "dup"
    },
    "2226": {
      "op": "intc_1 // 1"
    },
    "2227": {
      "op": "dig 3"
    },
    "2229": {
      "op": "setbit"
    },
    "2230": {
      "op": "uncover 4"
    },
    "2232": {
      "op": "swap"
    },
    "2233": {
      "op": "concat"
    },
    "2234": {
      "op": "dup"
    },
    "2235": {
      "op": "len"
    },
    "2236": {
      "op": "itob"
    },
    "2237": {
      "op": "extract 6 2"
    },
    "2240": {
      "op": "swap"
    },
    "2241": {
      "op": "concat"
    },
    "2242": {
      "op": "frame_bury 0"
    },
    "2244": {
      "op": "frame_dig 1"
    },
    "2246": {
      "op": "extract 2 0"
    },
    "2249": {
      "op": "dig 3"
    },
    "2251": {
      "op": "intc_2 // 2"
    },
    "2252": {
      "op": "=="
    },
    "2253": {
      "op": "dig 4"
    },
    "2255": {
      "op": "pushint 3 // 3"
    },
    "2257": {
      "op": "=="
    },
    "2258": {
      "op": "dig 5"
    },
    "2260": {
      "op": "pushint 4 // 4"
    },
    "2262": {
      "op": "=="
    },
    "2263": {
      "op": "dig 6"
    },
    "2265": {
      "op": "pushint 5 // 5"
    },
    "2267": {
      "op": "=="
    },
    "2268": {
      "op": "dig 7"
    },
    "2270": {
      "op": "pushint 6 // 6"
    },
    "2272": {
      "op": "=="
    },
    "2273": {
      "op": "dig 8"
    },
    "2275": {
      "op": "intc_1 // 1"
    },
    "2276": {
      "op": "+"
    },
    "2277": {
      "op": "dig 9"
    },
    "2279": {
      "op": "itob"
    },
    "2280": {
      "op": "uncover 8"
    },
    "2282": {
      "op": "concat"
    },
    "2283": {
      "op": "pushint 65 // 65"
    },
    "2285": {
      "op": "uncover 9"
    },
    "2287": {
      "op": "setbit"
    },
    "2288": {
      "op": "pushint 66 // 66"
    },
    "2290": {
      "op": "uncover 7"
    },
    "2292": {
      "op": "setbit"
    },
    "2293": {
      "op": "pushint 67 // 67"
    },
    "2295": {
      "op": "uncover 6"
    },
    "2297": {
      "op": "setbit"
    },
    "2298": {
      "op": "pushint 68 // 68"
    },
    "2300": {
      "op": "uncover 5"
    },
    "2302": {
      "op": "setbit"
    },
    "2303": {
      "op": "pushint 69 // 69"
    },
    "2305": {
      "op": "uncover 4"
    },
    "2307": {
      "op": "setbit"
    },
    "2308": {
      "op": "pushint 70 // 70"
    },
    "2310": {
      "op": "uncover 3"
    },
    "2312": {
      "op": "setbit"
    },
    "2313": {
      "op": "dig 1"
    },
    "2315": {
      "op": "itob"
    },
    "2316": {
      "op": "dup2"
    },
    "2317": {
      "op": "concat"
    },
    "2318": {
      "op": "uncover 4"
    },
    "2320": {
      "op": "swap"
    },
    "2321": {
      "op": "concat"
    },
    "2322": {
      "op": "dup"
    },
    "2323": {
      "op": "len"
    },
    "2324": {
      "op": "pushint 17 // 17"
    },
    "2326": {
      "op": "/"
    },
    "2327": {
      "op": "itob"
    },
    "2328": {
      "op": "extract 6 2"
    },
    "2331": {
      "op": "swap"
    },
    "2332": {
      "op": "concat"
    },
    "2333": {
      "op": "frame_bury 1"
    },
    "2335": {
      "op": "frame_dig 2"
    },
    "2337": {
      "op": "extract 2 0"
    },
    "2340": {
      "op": "dig 4"
    },
    "2342": {
      "op": "pushint 7 // 7"
    },
    "2344": {
      "op": "=="
    },
    "2345": {
      "op": "uncover 3"
    },
    "2347": {
      "op": "pushint 71 // 71"
    },
    "2349": {
      "op": "uncover 2"
    },
    "2351": {
      "op": "setbit"
    },
    "2352": {
      "op": "dup"
    },
    "2353": {
      "op": "dig 3"
    },
    "2355": {
      "op": "concat"
    },
    "2356": {
      "op": "uncover 2"
    },
    "2358": {
      "op": "swap"
    },
    "2359": {
      "op": "concat"
    },
    "2360": {
      "op": "dup"
    },
    "2361": {
      "op": "len"
    },
    "2362": {
      "op": "pushint 17 // 17"
    },
    "2364": {
      "op": "/"
    },
    "2365": {
      "op": "itob"
    },
    "2366": {
      "op": "extract 6 2"
    },
    "2369": {
      "op": "swap"
    },
    "2370": {
      "op": "concat"
    },
    "2371": {
      "op": "frame_bury 2"
    },
    "2373": {
      "op": "frame_dig 3"
    },
    "2375": {
      "op": "extract 2 0"
    },
    "2378": {
      "op": "uncover 4"
    },
    "2380": {
      "op": "intc_3 // 8"
    },
    "2381": {
      "op": "=="
    },
    "2382": {
      "op": "bytec_0 // 0x00"
    },
    "2383": {
      "op": "intc_0 // 0"
    },
    "2384": {
      "op": "uncover 2"
    },
    "2386": {
      "op": "setbit"
    },
    "2387": {
      "op": "uncover 2"
    },
    "2389": {
      "op": "swap"
    },
    "2390": {
      "op": "concat"
    },
    "2391": {
      "op": "uncover 2"
    },
    "2393": {
      "op": "concat"
    },
    "2394": {
      "op": "concat"
    },
    "2395": {
      "op": "dup"
    },
    "2396": {
      "op": "len"
    },
    "2397": {
      "op": "pushint 18 // 18"
    },
    "2399": {
      "op": "/"
    },
    "2400": {
      "op": "itob"
    },
    "2401": {
      "op": "extract 6 2"
    },
    "2404": {
      "op": "swap"
    },
    "2405": {
      "op": "concat"
    },
    "2406": {
      "op": "frame_bury 3"
    },
    "2408": {
      "op": "frame_bury 4"
    },
    "2410": {
      "op": "b test_bit_packed_tuples_for_header@1"
    },
    "2413": {
      "block": "test_bit_packed_tuples_after_for@4",
      "stack_in": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr2#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0"
      ]
    },
    "2415": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr2#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr2#0 (copy)"
      ]
    },
    "2416": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr2#0",
        "arr2#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr2#0 (copy)",
        "0"
      ]
    },
    "2417": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "tmp%37#0"
      ]
    },
    "2418": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "arr2#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "tmp%37#0",
        "5"
      ]
    },
    "2420": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "tmp%38#0"
      ]
    },
    "2421": {
      "op": "assert",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0"
      ]
    },
    "2422": {
      "op": "frame_dig 1",
      "defined_out": [
        "arr2#0",
        "arr7#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0"
      ]
    },
    "2424": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr7#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr7#0 (copy)"
      ]
    },
    "2425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr7#0 (copy)",
        "0"
      ]
    },
    "2426": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "tmp%39#0"
      ]
    },
    "2427": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "tmp%39#0",
        "5"
      ]
    },
    "2429": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "tmp%40#0"
      ]
    },
    "2430": {
      "op": "assert",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0"
      ]
    },
    "2431": {
      "op": "frame_dig 2",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0"
      ]
    },
    "2433": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr8#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr8#0 (copy)"
      ]
    },
    "2434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr8#0 (copy)",
        "0"
      ]
    },
    "2435": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "tmp%41#0"
      ]
    },
    "2436": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "tmp%41#0",
        "5"
      ]
    },
    "2438": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "tmp%42#0"
      ]
    },
    "2439": {
      "op": "assert",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0"
      ]
    },
    "2440": {
      "op": "frame_dig 3",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ]
    },
    "2442": {
      "op": "dup",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "arr9#0 (copy)"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "arr9#0 (copy)"
      ]
    },
    "2443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "arr9#0 (copy)",
        "0"
      ]
    },
    "2444": {
      "op": "extract_uint16",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "tmp%43#0"
      ]
    },
    "2445": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "tmp%43#0",
        "5"
      ]
    },
    "2447": {
      "op": "==",
      "defined_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "tmp%44#0"
      ]
    },
    "2448": {
      "op": "assert",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ]
    },
    "2449": {
      "op": "pushbytes \"bool2\"",
      "defined_out": [
        "\"bool2\"",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "\"bool2\""
      ]
    },
    "2456": {
      "op": "uncover 4",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "\"bool2\"",
        "arr2#0"
      ]
    },
    "2458": {
      "op": "app_global_put",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ]
    },
    "2459": {
      "op": "pushbytes \"bool7\"",
      "defined_out": [
        "\"bool7\"",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "\"bool7\""
      ]
    },
    "2466": {
      "op": "uncover 3",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr8#0",
        "arr9#0",
        "\"bool7\"",
        "arr7#0"
      ]
    },
    "2468": {
      "op": "app_global_put",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr8#0",
        "arr9#0"
      ]
    },
    "2469": {
      "op": "pushbytes \"bool8\"",
      "defined_out": [
        "\"bool8\"",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr8#0",
        "arr9#0",
        "\"bool8\""
      ]
    },
    "2476": {
      "op": "uncover 2",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr9#0",
        "\"bool8\"",
        "arr8#0"
      ]
    },
    "2478": {
      "op": "app_global_put",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr9#0"
      ]
    },
    "2479": {
      "op": "pushbytes \"bool9\"",
      "defined_out": [
        "\"bool9\"",
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0"
      ],
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "arr9#0",
        "\"bool9\""
      ]
    },
    "2486": {
      "op": "swap",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0",
        "\"bool9\"",
        "arr9#0"
      ]
    },
    "2487": {
      "op": "app_global_put",
      "stack_out": [
        "arr2#0",
        "arr7#0",
        "arr8#0",
        "arr9#0",
        "i#0"
      ]
    },
    "2488": {
      "retsub": true,
      "op": "retsub"
    },
    "2489": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_bool_return",
      "params": {},
      "block": "test_bool_return",
      "stack_in": [],
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000"
      ],
      "stack_out": [
        "0x0000"
      ]
    },
    "2490": {
      "op": "pushbytes 0x8000800080",
      "defined_out": [
        "0x0000",
        "0x8000800080"
      ],
      "stack_out": [
        "0x0000",
        "0x8000800080"
      ]
    },
    "2497": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0x0000",
        "0x8000800080",
        "5"
      ],
      "stack_out": [
        "0x0000",
        "0x8000800080",
        "5"
      ]
    },
    "2499": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0x0000",
        "0x8000800080",
        "5",
        "8"
      ],
      "stack_out": [
        "0x0000",
        "0x8000800080",
        "5",
        "8"
      ]
    },
    "2500": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_bits",
      "op": "callsub dynamic_array_concat_bits",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "2503": {
      "retsub": true,
      "op": "retsub"
    },
    "2504": {
      "subroutine": "test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return",
      "params": {},
      "block": "test_dynamic_tuple_return",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2505": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0",
        "0x"
      ],
      "stack_out": [
        "0",
        "0x"
      ]
    },
    "2506": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x",
        "1"
      ],
      "stack_out": [
        "0",
        "0x",
        "1"
      ]
    },
    "2507": {
      "op": "pushbytes 0x00020000000000000000000a000548656c6c6f",
      "defined_out": [
        "0",
        "0x",
        "0x00020000000000000000000a000548656c6c6f",
        "1"
      ],
      "stack_out": [
        "0",
        "0x",
        "1",
        "0x00020000000000000000000a000548656c6c6f"
      ]
    },
    "2528": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "2531": {
      "retsub": true,
      "op": "retsub"
    }
  }
}