{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_biguint_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_log",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_emit",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "emit_test",
                    "args": [
                        {
                            "type": "uint64[]",
                            "name": "field1"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_native_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_native_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_immutable_dynamic",
            "args": [
                {
                    "type": "(uint64,string)[]",
                    "name": "imm1"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "imm2"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_immutable_arc4",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "imm"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_imm_fixed_arr",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 11
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "bool[]",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool)[]",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])[]",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "(bool,bool)[]",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDk="
                },
                "imm_fixed_arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[3]",
                    "key": "aW1tX2ZpeGVkX2Fycg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        330,
                        346,
                        365,
                        387,
                        430,
                        449,
                        476,
                        495,
                        518,
                        538,
                        558,
                        578,
                        598,
                        640,
                        652,
                        675,
                        690,
                        705,
                        717,
                        729,
                        741,
                        753,
                        769,
                        781
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        798
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        333,
                        349,
                        368,
                        390,
                        433,
                        452,
                        479,
                        498,
                        521,
                        541,
                        561,
                        581,
                        601,
                        643,
                        655,
                        678,
                        693,
                        708,
                        720,
                        732,
                        744,
                        756,
                        772,
                        784
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        4543
                    ],
                    "errorMessage": "check self.imm_fixed_arr exists"
                },
                {
                    "pc": [
                        2667,
                        2980
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        2582,
                        2895
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        2587,
                        2902
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        2728,
                        3042
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        4425
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        4461
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        2023
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        2042
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        2060
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        4488
                    ],
                    "errorMessage": "expected items on iteration to be the same"
                },
                {
                    "pc": [
                        2086
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        4367
                    ],
                    "errorMessage": "expected non empty array"
                },
                {
                    "pc": [
                        3870
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        4538
                    ],
                    "errorMessage": "expected sum to be 10"
                },
                {
                    "pc": [
                        4511
                    ],
                    "errorMessage": "expected sum to be 15"
                },
                {
                    "pc": [
                        1320,
                        1696,
                        1766,
                        1823,
                        1933,
                        2016,
                        2035,
                        2054,
                        2077,
                        2232,
                        2296,
                        2538,
                        2619,
                        2684,
                        2851,
                        2934,
                        2997,
                        3707,
                        3814,
                        4484
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1391,
                        1467,
                        1593,
                        1669,
                        1721,
                        1791,
                        1903,
                        2171,
                        2364,
                        3113,
                        3261,
                        3328,
                        3414,
                        3453,
                        3484,
                        3942,
                        4065,
                        4227,
                        4260,
                        4286
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1784
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECCCYLBBUffHUAAgAAAQACAAJA/////////////////////////////////////////////////////////////////////////////////////wIACgdiaWd1aW50EgACAAAAAAAAAAEAAAAAAAAAAgwAAgAEAAcAAWEAAWINaW1tX2ZpeGVkX2FycjEbQQKAghgERNQvmQS36qYLBHQ9cO0EHH4ElASi1YYLBOBfxWQEHgkrgwQBMQJiBMhlSpgEidGW+ARst8mRBJiYvwIE9rYe6ARguGp7BHOtKD8EUp366QQgbVFPBOBkZeIE7AMAogTs3xSvBFEaymQEKYUuTwRtSqNYBLfLlr02GgCOGAHFAbkBqQGdAZEBhQF5AWoBWwFEATgBDgD6AOYA0gC+AKcAlAB5AGYAOwAlABIAAiJDMRkURDEYRIgP1ihMULAjQzEZFEQxGEQ2GgGID6MoTFCwI0MxGRREMRhENhoBNhoCiA9sKExQsCNDMRkURDEYRDYaAUkiWUsBJFlLAk8CSwJSSwIVTwNPA08CUogPMShMULAjQzEZFEQxGEQ2GgGIDw4oTFCwI0MxGRREMRhENhoBSVcACExXCAiIDuAoTFCwI0MxGRREMRhENhoBiA63KExQsCNDMRkURDEYRDYaATYaAheIDlUoTFCwI0MxGRREMRhENhoBF4gN5ihMULAjQzEZFEQxGEQ2GgEXiA2FKExQsCNDMRkURDEYRDYaAReIDUMoTFCwI0MxGRREMRhENhoBF4gM6ChMULAjQzEZFEQxGEQ2GgE2GgI2GgM2GgSIC5JPAxZPAxZQTwIWUEwWUChMULAjQzEZFEQxGESIClIjQzEZFEQxGEQ2GgEXNhoCiAlmKExQsCNDMRkURDEYRDYaAYgJQyNDMRkURDEYRDYaAYgJLSNDMRkURDEYRIgH5yNDMRkURDEYRIgGpCNDMRkURDEYRIgGLyNDMRkURDEYRIgFbyNDMRkURDEYRDYaAReIBKYjQzEZFEQxGESIA2wjQzEZFEQxGESIAnUjQzEZQP4qMRgURCNDigICi/4iWSMJFlcGAIv+TFwASRWL/wlKi/9YTwIiTwNSiYoBAov/IlkjCUkkC0mL/1cCAElOAklPAllJTwJJFUxOAlIpIosGiwEMQQAbiwKLBklOAlkkCRZXBgKLBUxQjAUkCIwGQv/diwAWVwYCiwVQiwEkCIsCTIsDUlCLBIwAjAGJigQBKUcCi/wiWUcCi/4ISRZXBgCL/ExcAElPAk8DgQcIJQpJTgNMgQcIJQpJTgMMQQAMiwaLBQmviwRMUIwHiweMBCKMAIsDgRAISYwCi/4IjAGLAosBDEEAIIv9iwBJTgJTiwSLAklOA08CVIwEIwiMAov/CIwAQv/YiwSMAImKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiYoEASlJi/4kC4v8JAsiiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEkCIwEQv/ci/0VjAAijASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASQIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigEBIkmLAYEDDEEAH4sBSYEQC4v/TIEQWEkiW4sACEwlWwiMACMIjAFC/9mJigEBKSKLAYv/DEEAEYsAgAEgUIwAiwEjCIwBQv/niYoCASKLAIv/DEEAHYsASRaL/kxQi/4iWSMIFlcGAlwAjP4jCIwAQv/bi/5MiYoAAIAKAAEAAAAAAAAAKoEFiP+/SSJZSYEGEkRJIwlLAlcCAEwlC1uBBBJEgSsWTwJMUEwjCBZXBgJcAEcCIllJgQcSRCMJSwFXAgBMJQtbgSsSRCRbgSoSRCKLAYEDDEEAEosAJYj9L4wASIsBIwiMAUL/5osASSJZSYEEEkQjCUsBVwIATCULWyQSRIEKiP9BSSJZSYEOEkRJIwlLAlcCAEwlC1uBCRJEgSwWTwJMUEwjCBZXBgJcAEkiWUmBDxJEIwlLAVcCAEwlC1uBLBJEgRcWXBJJIlmBDxJESYESW4EXEkSAAWFMZ4mKAAAxGyMJFoFAr0lOAqsqTFCAAgABXABHAiJZSSMSRCMJTFcCAEyBQAuBQFgpqEQiiwKBBQxBACGLAkkWiwCriwFJTwJQTCJZIwgWVwYCXACMASMIjAJC/9eLAUkiWUmBBhJESSMJSwJXAgBMgUALgUBYgAEEqEQxGxYnBUyhSRWBQA5EiwCrTwJMUEwjCBZXBgJcAEkiWUmBBxJESSMJSwJXAgBMgUALgUBYgED////////////////////////////////////////////////////////////////////////////////////+qERLAVcCQCmoREwnBVBMIwgWVwYCXABJIllJJRJEIwlLAVcCAEyBQAuBQFgnBahESVcCQCmoRCcHvEgnB0y/iYoBACkqIosCi/8MQQAeMRuLAklPAhIrIk8CVIsBTCMliPvgjAEjCIwCQv/aiwEiWUmMAIv/EkSL/0EACosARIsBgRBTFESL/yMNQQAMI4sADESLAYERUxREi/8kDUEACySLAAxEiwGBElNEi/+BAw1BABKL/yMJSYsADESBEAiLAUxTFESAAWeLAWeL/0EAKIsAIwlJFlcGAIsBTFwASwGBEAgiVEyBBwglCiQIIkxSIlmL/yMJEkSJigAAKiKLAYEFDEEAJosBSSMITCQISwEWTBZQiwBJTwJQTCJZIwgWVwYCXACMAIwBQv/SiwBJIllJgQUSREsBVwIASwJXAhBJIltMJVtMIxJMJBIQREwjCYEQC4EQWEkiW0wlW0yBBRJMgQYSEESBEIj6U0UBSSJZSYEEEkRLAVcCAEsCVwIQSSJbTCVbTCMSTCQSEERMIwmBEAuBEFhJIltMJVtMgQQSTIEFEhBEgAFjTGeJigAAKiKLAYEFDEEANYsBSSQYFEsBgQMLJBgUSwIWKyJPBFQjTwNUUIsASU8CUEwiWSMIFlcGAlwAjAAjCIwBQv/DiwBJIlmBBRJESVcCCUkiW0sBgUBTTwKBQVNPAhRETEREgAFkTGeJigAAKSoiiwKBBQxBADaLAkkjCEyviwFJIllMVwIASwMWSwMVFlcGAk8EUEwnBlBMUCcETFBOAiNPA4j624wBjAJC/8KLASJZSYwAgQUSRCKMAosCgQUMQQBPiwFXAgCLAklOAiQLSwFMWUsCIwiLAEsBCUsDFUsCJAtLBUxZTwJNTwNPA08CUkkiW0sBJVlLAhVPA04CUlcCAExLAhJEFU8CEkSMAkL/qYsBiPkdRQFJIllJgQQSREsBVwIASSJZSwIjCUsCFUsDJFlLAUxLA01LBE8ETwJSSSJbSwElWUsCFU8DTgJSVwIATCMSIq9PAhIQREsBJAtLA0xZTwIjCE8ESwEJTCQLSwRMWU8DTE8CTVJJIltLASVZSwIVTwNOAlJXAgBMgQQSgQOvTwISEESAAWVMZ4mKAAApKiKLAoEFDEEAOIsCSSMITIj6d4sBSSJZTFcCAEsDFksDFRZXBgJPBFBMJwZQTFAnBExQTgIjTwOI+aKMAYwCQv/AiwEiWUmMAIEFEkQijAKLAoEFDEEAUYsBVwIAiwJJTgIkC0sBTFlLAiMIiwBLAQlLAxVLAiQLSwVMWU8CTU8DTwNPAlJJIltLASVZSwIVTwNOAlJXAgBMSwISRE8CiPnoEkSMAkL/p4sBiPfiRQFJIllJgQQSREsBVwIASSJZSwIjCUsCFUsDJFlLAUxLA01LBE8ETwJSSSJbSwElWUsCFU8DTgJSVwIATCMSTCkSEERLASQLSwNMWU8CIwhPBEsBCUwkC0sETFlPA0xPAk1SSSJbSwElWUsCFU8DTgJSVwIATIEEEkyAAyAgIBIQRIABZkxniYoBAIv/sImKAQCABvpAwFMAAov/ULCJigIBIkcCKUcFIosJi/4MQQBNKowAIowHiweLCQxBAB6LB0kWiwBJTwJQTCJZIwgWVwYCXACMACMIjAdC/9qL/yJZi/9XAgAnBIsAUE4CI08DiPg8jP+LCSMIjAlC/6sqjAKL/yJZjAMijAWLBYsDDEEAYYv/VwIAiwUkC0sBTFlKWSULJAhYSYwBIowIIlmMBCKMBosGiwQMQQAZiwFXAgCLBklOAiULW4sICIwIIwiMBkL/34sIFosCSU8CUEwiWSMIFlcGAlwAjAKLBSMIjAVC/5eLAowAiYoAACpHAyKLBIEFDEEAx4sESRRLASMSKyJPA1QjTwJUiwBJTgJLAVBPAiJZIwgWVwYCXACMAEsBJBJLAoEDEksDgQQSSwSBBRJLBYEGEksGIwhLBxZPByRPCFSBA08HVIEETwZUgQVPBVSBBk8EVEpQSwMWTEsBUIsBSU8CUEwiWSMIFlcGAlwAjAFLBIEHEk8CgQdPAlRPAkxQSUsCUIsCSU8CUEwiWSMIFlcGAlwAjAJPAyUSKyJPAlRQTFCLA0lPAlBMIlkjCBZXBgJcAIwDjARC/zGLAEkiWYEFEkSLAUkiWYEFEkSLAkkiWYEFEkSLA0kiWYEFEkSABWJvb2wyTwRngAVib29sN08DZ4AFYm9vbDhPAmeABWJvb2w5TGeJigQEKUcIIkcDi/wiWSKLDosNDEEAGYv8VwIAiw5JTgIlC1uLDAiMDCMIjA5C/9+L/SJZjAAijASLBIsADEEAI4sEgRAIi/1MU4sLjAZBAAaLCyMIjAaLBowLiwQjCIwEQv/Vi/4iWYwBIowFiwWLAQxBAE6L/lcCAIsFgQkLgQlYSSJbSwGBQFNPAoFBU4wIiwpPAghJjAqMB0EABosKIwiMB4sHSYwKjAeLCEEABosKIwiMB4sHjAqLBSMIjAVC/6qL/yJZjAIijAOLA4sCDEEAVov/VwIAiwNJTgIkC0sBTFlLAiMIiwJLAQlLAxVLAiQLSwVMWU8CTU8DTwNPAlJJIltLASVZSwIVTwNOAlJXAgCLCU8CCEwVTEsBCIwJTwISRIwDQv+iiwyLC4sKiwmMA4wCjAGMAImKAQGAGgADAAAAAAAAAAEAAAAAAAAAAgAAAAAAAAADIosBi/8MQQAeiwFJFosASU8CUEwiWSMIFlcGAlwAjAAjCIwBQv/aiYoBAYADAAWoIosBi/8MQQAciwFJJBgUKyJPAlSLAEwjJYj0BYwAIwiMAUL/3ImKAQGACwABAAAAAAAAAACAIosBi/8MQQAziwFJJBgUSwGBAxgUSwIWKyJPBFQjTwNUUIsASU8CUEwiWSMIFlcGAlwAjAAjCIwBQv/FiYoBAYAVAAEAAgAAAAAAAAAAAAoABUhlbGxvIosBi/8MQQA3iwFJiPUdiwBJIllMVwIASwMWSwMVFlcGAk8EUEwnBlBMUCcETFBOAiNPA4j0SIwAIwiMAUL/wYmKAgGL/lcCACKLAYv/DEEAKosBSSQYFEsBgQMYFIsATgNLAhYrIk8EVCNPA1RQTwJMUIwAIwiMAUL/zosASRWBCQoWVwYCTFCMAImKAQEnCIv/UElXAgAVJQoWVwYCXACJigIBi/6L/1AnCExQgAIABFwAiYoBAYv/VwQAJwlMJIjzUImKAgGL/ov/UCcJTCSI80CJigIBi/4iWYv+VwIAi/9XAgCL/yJZTwNPA08CTwOI84qJigEBi/8iWUlEIwmL/1cCEEyBEAskCIv/TE8CXUmM/4mKAAEpgTCvSTEbIwgxGyQITBZMFlBJTgJJSwFQTFBJTgITRCKLBIEDDEEAFYsESYEQC4sBTIsCXYwBIwiMBEL/44sBiwMSRCKMAIsAgQMMQQAXiwBJgRALiwFMgRBYiwISRCMIjABC/+EnCosBSU4CZ0mI83SBDxJEgBAAAAAAAAAAAAAAAAAAAAAAXACI81mBChJEIicKZUSMAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [
        {
            "name": "emit_test",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "field1"
                }
            ]
        }
    ],
    "templateVariables": {}
}