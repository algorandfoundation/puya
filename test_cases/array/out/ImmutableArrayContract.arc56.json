{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 10
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym9vbDk="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1098,
                        1192,
                        1220,
                        1248,
                        1281,
                        1438,
                        1499,
                        1607,
                        1762,
                        1843,
                        1908,
                        2073,
                        2156,
                        2219,
                        2924,
                        3045
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        143,
                        166,
                        186,
                        206,
                        226,
                        246,
                        296,
                        308,
                        331,
                        343,
                        355,
                        367,
                        379,
                        395
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        412
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        146,
                        169,
                        189,
                        209,
                        229,
                        249,
                        299,
                        311,
                        334,
                        346,
                        358,
                        370,
                        382,
                        398
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1891,
                        2202
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        1803,
                        2114
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        1811,
                        2124
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        1952,
                        2264
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        1203
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        1231
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        1258
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        1292
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        3101
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        3473
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}