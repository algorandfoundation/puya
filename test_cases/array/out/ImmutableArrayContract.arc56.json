{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_biguint_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_log",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_emit",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "emit_test",
                    "args": [
                        {
                            "type": "uint64[]",
                            "name": "field1"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_native_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_native_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_immutable_dynamic",
            "args": [
                {
                    "type": "(uint64,string)[]",
                    "name": "imm1"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "imm2"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_immutable_arc4",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "imm"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_imm_fixed_arr",
            "args": [],
            "returns": {
                "type": "(uint64,uint64)[3]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 11
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "bool[]",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool)[]",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])[]",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "(bool,bool)[]",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDk="
                },
                "imm_fixed_arr": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[3]",
                    "key": "aW1tX2ZpeGVkX2Fycg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        340
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        4701
                    ],
                    "errorMessage": "check self.imm_fixed_arr exists"
                },
                {
                    "pc": [
                        2186,
                        2494
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        2101,
                        2409
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        2106,
                        2416
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        2247,
                        2556
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        4585
                    ],
                    "errorMessage": "expected arrays to be different"
                },
                {
                    "pc": [
                        4619
                    ],
                    "errorMessage": "expected arrays to be the same"
                },
                {
                    "pc": [
                        1555
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        1574
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        1592
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        4646
                    ],
                    "errorMessage": "expected items on iteration to be the same"
                },
                {
                    "pc": [
                        1618
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        4532
                    ],
                    "errorMessage": "expected non empty array"
                },
                {
                    "pc": [
                        3617
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        4696
                    ],
                    "errorMessage": "expected sum to be 10"
                },
                {
                    "pc": [
                        4669
                    ],
                    "errorMessage": "expected sum to be 15"
                },
                {
                    "pc": [
                        854,
                        1158,
                        1223,
                        1291,
                        1348,
                        1458,
                        1548,
                        1567,
                        1586,
                        1609,
                        1760,
                        1824,
                        2057,
                        2138,
                        2203,
                        2365,
                        2448,
                        2511,
                        3312,
                        3478,
                        3561,
                        4323,
                        4440,
                        4547,
                        4604,
                        4642,
                        4688
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        2661,
                        3296,
                        4307,
                        4424
                    ],
                    "errorMessage": "invalid array encoding"
                },
                {
                    "pc": [
                        970,
                        1011,
                        1067,
                        1094,
                        1134,
                        1162,
                        1206,
                        1271,
                        1328,
                        1440,
                        1532,
                        1663,
                        1722,
                        1786,
                        1913,
                        2015,
                        2121,
                        2323,
                        2431,
                        2569,
                        2587,
                        2631,
                        2678,
                        2795,
                        2836,
                        3126,
                        3135,
                        3144,
                        3153,
                        3208,
                        3226,
                        3247,
                        3265,
                        3347,
                        3974,
                        4155,
                        4173,
                        4221,
                        4243,
                        4276,
                        4358,
                        4385,
                        4475,
                        4519
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        2700
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.dynamic_array<uint64>>"
                },
                {
                    "pc": [
                        3240
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<bool>"
                },
                {
                    "pc": [
                        3368,
                        4379,
                        4496
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.array.immutable.MyDynamicSizedTuple>"
                },
                {
                    "pc": [
                        4530
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.array.immutable.MyStruct>"
                },
                {
                    "pc": [
                        3259,
                        3984
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<test_cases.array.immutable.MyTuple>"
                },
                {
                    "pc": [
                        2578,
                        2596,
                        3219
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<uint64>"
                },
                {
                    "pc": [
                        4180,
                        4252
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.dynamic_array<arc4.uint8>,arc4.dynamic_array<arc4.uint8>>"
                },
                {
                    "pc": [
                        4074,
                        4106
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>"
                },
                {
                    "pc": [
                        1488,
                        2623,
                        3651,
                        3732,
                        3788,
                        3875,
                        3992
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        4142,
                        4207
                    ],
                    "errorMessage": "invalid tail pointer at index 0 of ((len+utf8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        4161,
                        4230
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of ((len+utf8[]),(len+utf8[]))"
                },
                {
                    "pc": [
                        3341,
                        4352,
                        4469
                    ],
                    "errorMessage": "invalid tail pointer at index 1 of (uint64,(len+utf8[]))"
                },
                {
                    "pc": [
                        2669
                    ],
                    "errorMessage": "invalid tail pointer for (len+(len+uint64[])[])"
                },
                {
                    "pc": [
                        3304,
                        4315,
                        4432
                    ],
                    "errorMessage": "invalid tail pointer for (len+(uint64,(len+utf8[]))[])"
                },
                {
                    "pc": [
                        3336,
                        4137,
                        4202,
                        4347,
                        4464
                    ],
                    "errorMessage": "invalid tuple encoding"
                },
                {
                    "pc": [
                        925,
                        998,
                        1122,
                        1196,
                        1246,
                        1316,
                        1428,
                        1699,
                        1888,
                        2735,
                        2883,
                        2947,
                        3033,
                        3072,
                        3103,
                        3697,
                        3840,
                        4037,
                        4078,
                        4119
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1309
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYLAAQVH3x1AgAAAQACAAJA/////////////////////////////////////////////////////////////////////////////////////wIACgdiaWd1aW50EgACAAAAAAAAAAEAAAAAAAAAAgwAAgAEAAcAAWEAAWINaW1tX2ZpeGVkX2FycjEbQQC3MRkURDEYRIIYBETUL5kEt+qmCwR0PXDtBBx+BJQEotWGCwTgX8VkBB4JK4MEATECYgTIZUqYBInRlvgEbLfJkQSYmL8CBPa2HugEYLhqewRzrSg/BFKd+ukEIG1RTwTgZGXiBOwDAKIE7N8UrwRRGspkBCmFLk8EbUqjWAS3y5a9NhoAjhgCawNSBHwFPAXsBlEHgwi4CMoI5goVCzMM8A1BDXkN0A41DpYOtg7YDxkPXxBWEH4AMRkUMRgUEEQjQ4oCAov+IlkjCRZXBgCL/kxcAEkVi/8JSov/WE8CIk8DUomKAQKL/yJZIwlJJAtJi/9XAgBJTgJJTwJZSU8CSRVMTgJSKCKLBosBDEEAG4sCiwZJTgJZJAkWVwYCiwVMUIwFJAiMBkL/3YsAFlcGAosFUIsBJAiLAkyLA1JQiwSMAIwBiYoEAShHAov8IllHAov+CEkWVwYAi/xMXABOAkyBBwglCklPAoEHCCUKSU4CDEEADIsGiwUJr4sETFCMBCKMAIsDgRAISYwCi/4IjAGLAosBDEEAIIv9iwBJTgJTiwSLAklOA08CVIwEIwiMAov/CIwAQv/YiwSMAImKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiiwSLAgxBACOLA0kWVwYCiwGLBElOBE8CXUmMAUsBWSQICIwDJAiMBEL/1YsAiwFQjACJigQBKEmL/iQLi/wkCyKLBIsDDEEAHIv9iwRJTgJZiwIIFlcGAosBTFCMASQIjARC/9yL/RWMACKMBIsEiwIMQQAci/+LBElOAlmLAAgWVwYCiwFMUIwBJAiMBEL/3Iv8i/4IFlcGAosBUIv9iwOLAFJQi/8Vi/+LAk8CUlCMAImKAQEiSYsBgQMMQQAfiwFJgRALi/9MgRBYSSJbiwAITCVbCIwAIwiMAUL/2YmKAQEoIosBi/8MQQARiwCAASBQjACLASMIjAFC/+eJigIBIosAi/8MQQAdiwBJFov+TFCL/iJZIwgWVwYCXACM/iMIjABC/9uL/kyJgAoAAQAAAAAAAAAqgQWI/8JJIllJgQYSREkjCUsCVwIATCULW4EEEkSBKxZPAkxQTCMIFlcGAlwARwIiWUmBBxJEIwlLAVcCAEwlC1uBKxJEJFuBKhJEIkmBAwxBABFLASWI/TtFA0hJIwhFAUL/6EsBSSJZSYEEEkQjCUsBVwIATCULWyQSRIEKiP9GSSJZSYEOEkRJIwlLAlcCAEwlC1uBCRJEgSwWTwJMUEwjCBZXBgJcAEkiWUmBDxJEIwlLAVcCAEwlC1uBLBJEgRcWXBJJIlmBDxJESYESW4EXEkSAAWFMZyNDMRsjCRaBQK9JTgKrKkxQgAIAAVwARwIiWUkjEkQjCUxXAgBMgUALgUBYKKhEIkmBBQxBACBHAhZLBKtLA0lPAlBMIlkjCBZXBgJcAEUDIwhFAUL/2UsBSSJZSYEGEkRJIwlLAlcCAEyBQAuBQFiAAQSoRDEbFicFTKFJFYFADkRLBatPAkxQTCMIFlcGAlwASSJZSYEHEkRJIwlLAlcCAEyBQAuBQFiAQP////////////////////////////////////////////////////////////////////////////////////6oREsBVwJAKKhETCcFUEwjCBZXBgJcAEkiWUklEkQjCUsBVwIATIFAC4FAWCcFqERJVwJAKKhEJwe8SCcHTL8jQyg2GgFJFSUSRBcqIklLAwxBAB4xG0sBSU8CEisiTwJUSwNMIyWI++tFAyMIRQFC/9tLASJZSUUFSwNJTgISREEACksDREsBgRBTFERLAiMNQQAMI0sEDERLAYERUxRESwIkDUEACyRLBAxESwGBElNESwKBAw1BABJLAiMJSUsFDESBEAhLAkxTFESAAWdLAmdLAkEAKEsDIwlJFlcGAEsDTFwASwGBEAgiVEyBBwglCiQIIkxSIllLAyMJEkQjQyoiSYEFDEEAJUcCIwhMJAhLARZMFlBLA0lPAlBMIlkjCBZXBgJcAEUDRQFC/9RLAUkiWUmBBRJESwFXAgBLAlcCEEkiW0wlW0wjEkwkEhBETCMJgRALgRBYSSJbTCVbTIEFEkyBBhIQRIEQiPphRQFJIllJgQQSREsBVwIASwJX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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [
        {
            "name": "emit_test",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "field1"
                }
            ]
        }
    ],
    "templateVariables": {}
}