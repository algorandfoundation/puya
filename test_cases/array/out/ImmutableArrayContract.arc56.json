{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_biguint_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_log",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_emit",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "emit_test",
                    "args": [
                        {
                            "type": "uint64[]",
                            "name": "field1"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_native_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_native_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_immutable_dynamic",
            "args": [
                {
                    "type": "(uint64,string)[]",
                    "name": "imm1"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "imm2"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_immutable_arc4",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "imm"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 10
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "bool[]",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool)[]",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])[]",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "(bool,bool)[]",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDk="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        309,
                        328,
                        350,
                        393,
                        412,
                        439,
                        458,
                        481,
                        501,
                        521,
                        541,
                        561,
                        603,
                        615,
                        638,
                        653,
                        668,
                        680,
                        692,
                        704,
                        716,
                        732,
                        744
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        761
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        312,
                        331,
                        353,
                        396,
                        415,
                        442,
                        461,
                        484,
                        504,
                        524,
                        544,
                        564,
                        606,
                        618,
                        641,
                        656,
                        671,
                        683,
                        695,
                        707,
                        719,
                        735,
                        747
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2601,
                        2914
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        2516,
                        2829
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        2521,
                        2836
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        2662,
                        2976
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        1953
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        1974
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        1994
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        2020
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        4299
                    ],
                    "errorMessage": "expected non empty array"
                },
                {
                    "pc": [
                        3805
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        1624,
                        1694,
                        1751,
                        1861,
                        1944,
                        1965,
                        1986,
                        2011,
                        2166,
                        2230,
                        2472,
                        2553,
                        2618,
                        2785,
                        2868,
                        2931,
                        3642,
                        3749
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1309,
                        1390,
                        1521,
                        1597,
                        1649,
                        1719,
                        1831,
                        2105,
                        2298,
                        3049,
                        3197,
                        3264,
                        3350,
                        3389,
                        3420,
                        3877,
                        4000,
                        4162,
                        4195,
                        4221
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1712
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECCCYKBBUffHUAAgAAAQACAAJA/////////////////////////////////////////////////////////////////////////////////////wIACgdiaWd1aW50EgACAAAAAAAAAAEAAAAAAAAAAgwAAgAEAAcAAWEAAWIxG0ECaYIXBETUL5kEt+qmCwR0PXDtBBx+BJQEotWGCwTgX8VkBB4JK4MEATECYgTIZUqYBInRlvgEbLfJkQSYmL8CBPa2HugEYLhqewRzrSg/BFKd+ukEIG1RTwTgZGXiBOwDAKIE7N8UrwRRGspkBCmFLk8EbUqjWDYaAI4XAbUBqQGZAY0BgQF1AWkBWgFLATQBKAD+AOoA1gDCAK4AlwCEAGkAVgArABUAAiJDMRkURDEYRDYaAYgPhChMULAjQzEZFEQxGEQ2GgE2GgKID1UoTFCwI0MxGRREMRhENhoBSSJZSwEkWUsCTwJLAlJLAhVPA08DTwJSiA8aKExQsCNDMRkURDEYRDYaAYgO8ihMULAjQzEZFEQxGEQ2GgFJVwAITFcICIgOxChMULAjQzEZFEQxGEQ2GgGIDpsoTFCwI0MxGRREMRhENhoBNhoCF4gOOShMULAjQzEZFEQxGEQ2GgEXiA3KKExQsCNDMRkURDEYRDYaAReIDWkoTFCwI0MxGRREMRhENhoBF4gNJyhMULAjQzEZFEQxGEQ2GgEXiAzMKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgLd08DFk8DFlBPAhZQTBZQKExQsCNDMRkURDEYRIgKNyNDMRkURDEYRDYaARc2GgKICUsoTFCwI0MxGRREMRhENhoBiAkmI0MxGRREMRhENhoBiAkQI0MxGRREMRhEiAfKI0MxGRREMRhEiAaHI0MxGRREMRhEiAYSI0MxGRREMRhEiAVSI0MxGRREMRhENhoBF4gEgyNDMRkURDEYRIgDSSNDMRkURDEYRIgCSCNDMRlA/joxGBREI0OKAgKL/iJZIwkWVwYAi/5MXABJFYv/CUqL/1hPAiJPA1KJigECi/8iWSMJSSQLSYv/VwIASU4CSU8CWUlPAkkVTE4CUikiiwaLAQxBABuLAosGSU4CWSQJFlcGAosFTFCMBSQIjAZC/92LABZXBgKLBVCLASQIiwJMiwNSUIsEjACMAYmKBAEpRwKL/CJZRwKL/ghJFlcGAIv8TFwASU8CTwOBBwglCklOA0yBBwglCklOAwxBAAyLBosFCa+LBExQjAeLB4wEIowAiwOBEAhJjAKL/giMAYsCiwEMQQAgi/2LAElOAlOLBIsCSU4DTwJUjAQjCIwCi/8IjABC/9iLBIwAiYoDAYv9IllJi/8ITCQLJAhLARZXBgJOAov9JEsCUov/JAuvUIv9FYv9TwNPAlJQi/5QTCQLSSJMiwOLAgxBACOLBEkWVwYCiwGLA0lOBE8CXUmMAUsBWSQICIwEJAiMA0L/1YsAiwFQjACJigQBKUmL/iQLi/wkCyKLBIsDDEEAHIv9iwRJTgJZiwIIFlcGAosBTFCMASQIjARC/9yL/RWMACKMBIsEiwIMQQAci/+LBElOAlmLAAgWVwYCiwFMUIwBJAiMBEL/3Iv8i/4IFlcGAosBUIv9iwOLAFJQi/8Vi/+LAk8CUlCMAImKAQEpIosBi/8MQQARiwCAASBQjACLASMIjAFC/+eJigIBIosAi/8MQQAdiwBJFov+TFCL/iJZIwgWVwYCXACM/iMIjABC/9uL/kyJigAAgAoAAQAAAAAAAAAqgQWI/79JIllJgQYSREkjCUsCVwIATCULW4EEEkRMgAgAAAAAAAAAK1BMIwgWVwYCXABHAiJZSYEHEkQjCUsBVwIATCULW4ErEkQkW4EqEkQiiwGBAwxBABKLACWI/VeMAEiLASMIjAFC/+aLAEkiWUmBBBJEIwlLAVcCAEwlC1skEkSBCoj/PEkiWUmBDhJESSMJSwJXAgBMJQtbgQkSREyACAAAAAAAAAAsUEwjCBZXBgJcAEkiWUmBDxJEIwlLAVcCAEwlC1uBLBJEgRcWXBJJIlmBDxJESYESW4EXEkSAAWFMZ4mKAAAxGyMJFoFAr0lOAqsqTFCAAgABXABHAiJZSSMSRCMJTFcCAEyBQAuBQFgpqEQiiwKBBQxBACGLAkkWiwCriwFJTwJQTCJZIwgWVwYCXACMASMIjAJC/9eLAUkiWUmBBhJESSMJSwJXAgBMgUALgUBYgAEEqEQxGxYnBUyhSRWBQA5EiwCrTwJMUEwjCBZXBgJcAEkiWUmBBxJESSMJSwJXAgBMgUALgUBYgED////////////////////////////////////////////////////////////////////////////////////+qERLAVcCQCmoREwnBVBMIwgWVwYCXABJIllJJRJEIwlLAVcCAEyBQAuBQFgnBahESVcCQCmoRCcHvEgnB0y/iYoBACkqIosCi/8MQQAeMRuLAklPAhIrIk8CVIsBTCMliPwDjAEjCIwCQv/aiwEiWUmMAIv/EkSL/0EADIsARIsBVwIAIlMURIv/Iw1BAA4jiwAMRIsBVwIAI1MURIv/JA1BAA0kiwAMRIsBVwIAJFNEi/+BAw1BABKL/yMJSYsADESLAVcCAExTFESAAWeLAWeL/0EAKIsAIwlJFlcGAIsBTFwASwGBEAgiVEyBBwglCiQIIkxSIlmL/yMJEkSJigAAKiKLAYEFDEEAJosBSSMITCQISwEWTBZQiwBJTwJQTCJZIwgWVwYCXACMAIwBQv/SiwBJIllJgQUSREsBVwIASwJXAhBJIltMJVtMIxJMJBIQREwjCYEQC4EQWEkiW0wlW0yBBRJMgQYSEESBEIj6cEUBSSJZSYEEEkRLAVcCAEsCVwIQSSJbTCVbTCMSTCQSEERMIwmBEAuBEFhJIltMJVtMgQQSTIEFEhBEgAFjTGeJigAAKiKLAYEFDEEANYsBSSQYFEsBgQMLJBgUSwIWKyJPBFQjTwNUUIsASU8CUEwiWSMIFlcGAlwAjAAjCIwBQv/DiwBJIlmBBRJESVcCCUkiW0sBgUBTTwKBQVNPAhRETEREgAFkTGeJigAAKSoiiwKBBQxBADaLAkkjCEyviwFJIllMVwIASwMWSwMVFlcGAk8EUEwnBlBMUCcETFBOAiNPA4j6+IwBjAJC/8KLASJZSYwAgQUSRCKMAosCgQUMQQBPiwFXAgCLAklOAiQLSwFMWUsCIwiLAEsBCUsDFUsCJAtLBUxZTwJNTwNPA08CUkkiW0sBJVlLAhVPA04CUlcCAExLAhJEFU8CEkSMAkL/qYsBiPk6RQFJIllJgQQSREsBVwIASSJZSwIjCUsCFUsDJFlLAUxLA01LBE8ETwJSSSJbSwElWUsCFU8DTgJSVwIATCMSIq9PAhIQREsBJAtLA0xZTwIjCE8ESwEJTCQLSwRMWU8DTE8CTVJJIltLASVZSwIVTwNOAlJXAgBMgQQSgQOvTwISEESAAWVMZ4mKAAApKiKLAoEFDEEAOIsCSSMITIj6Z4sBSSJZTFcCAEsDFksDFRZXBgJPBFBMJwZQTFAnBExQTgIjTwOI+b+MAYwCQv/AiwEiWUmMAIEFEkQijAKLAoEFDEEAUYsBVwIAiwJJTgIkC0sBTFlLAiMIiwBLAQlLAxVLAiQLSwVMWU8CTU8DTwNPAlJJIltLASVZSwIVTwNOAlJXAgBMSwISRE8CiPnYEkSMAkL/p4sBiPf/RQFJIllJgQQSREsBVwIASSJZSwIjCUsCFUsDJFlLAUxLA01LBE8ETwJSSSJbSwElWUsCFU8DTgJSVwIATCMSTCkSEERLASQLSwNMWU8CIwhPBEsBCUwkC0sETFlPA0xPAk1SSSJbSwElWUsCFU8DTgJSVwIATIEEEkyAAyAgIBIQRIABZkxniYoBAIv/sImKAQAnBIv/UIAE+kDAU0xQsImKAgEiRwIpRwUiiwmL/gxBAE0qjAAijAeLB4sJDEEAHosHSRaLAElPAlBMIlkjCBZXBgJcAIwAIwiMB0L/2ov/IlmL/1cCACcEiwBQTgIjTwOI+FeM/4sJIwiMCUL/qyqMAov/IlmMAyKMBYsFiwMMQQBhi/9XAgCLBSQLSwFMWUpZJQskCFhJjAEijAgiWYwEIowGiwaLBAxBABmLAVcCAIsGSU4CJQtbiwgIjAgjCIwGQv/fiwgWiwJJTwJQTCJZIwgWVwYCXACMAosFIwiMBUL/l4sCjACJigAAKkcDIosEgQUMQQDHiwRJFEsBIxIrIk8DVCNPAlSLAElOAksBUE8CIlkjCBZXBgJcAIwASwEkEksCgQMSSwOBBBJLBIEFEksFgQYSSwYjCEsHFk8HJE8IVIEDTwdUgQRPBlSBBU8FVIEGTwRUSlBLAxZMSwFQiwFJTwJQTCJZIwgWVwYCXACMAUsEgQcSTwKBB08CVE8CTFBJSwJQiwJJTwJQTCJZIwgWVwYCXACMAk8DJRIrIk8CVFBMUIsDSU8CUEwiWSMIFlcGAlwAjAOMBEL/MYsASSJZgQUSRIsBSSJZgQUSRIsCSSJZgQUSRIsDSSJZgQUSRIAFYm9vbDJPBGeABWJvb2w3TwNngAVib29sOE8CZ4AFYm9vbDlMZ4mKBAQpRwgiRwOL/CJZIosOiw0MQQAZi/xXAgCLDklOAiULW4sMCIwMIwiMDkL/34v9IlmMACKMBIsEiwAMQQAii/1XAgCLBFOLC4wGQQAGiwsjCIwGiwaMC4sEIwiMBEL/1ov+IlmMASKMBYsFiwEMQQBOi/5XAgCLBYEJC4EJWEkiW0sBgUBTTwKBQVOMCIsKTwIISYwKjAdBAAaLCiMIjAeLB0mMCowHiwhBAAaLCiMIjAeLB4wKiwUjCIwFQv+qi/8iWYwCIowDiwOLAgxBAFaL/1cCAIsDSU4CJAtLAUxZSwIjCIsCSwEJSwMVSwIkC0sFTFlPAk1PA08DTwJSSSJbSwElWUsCFU8DTgJSVwIAiwlPAghMFUxLAQiMCU8CEkSMA0L/oosMiwuLCosJjAOMAowBjACJigEBgBoAAwAAAAAAAAABAAAAAAAAAAIAAAAAAAAAAyKLAYv/DEEAHosBSRaLAElPAlBMIlkjCBZXBgJcAIwAIwiMAUL/2omKAQGAAwAFqCKLAYv/DEEAHIsBSSQYFCsiTwJUiwBMIyWI9CGMACMIjAFC/9yJigEBgAsAAQAAAAAAAAAAgCKLAYv/DEEAM4sBSSQYFEsBgQMYFEsCFisiTwRUI08DVFCLAElPAlBMIlkjCBZXBgJcAIwAIwiMAUL/xYmKAQGAFQABAAIAAAAAAAAAAAAKAAVIZWxsbyKLAYv/DEEAN4sBSYj1DIsASSJZTFcCAEsDFksDFRZXBgJPBFBMJwZQTFAnBExQTgIjTwOI9GSMACMIjAFC/8GJigIBi/5XAgAiiwGL/wxBACqLAUkkGBRLAYEDGBSLAE4DSwIWKyJPBFQjTwNUUE8CTFCMACMIjAFC/86LAEkVgQkKFlcGAkxQjACJigEBJwiL/1BJVwIAFSUKFlcGAlwAiYoCAYv+i/9QJwhMUIACAARcAImKAQGL/xWL/4EETwJSJwlMJIjzZ4mKAgGL/ov/UCcJTCSI81eJigIBi/4iWYv+VwIAi/8iWYv/VwIAiPOpiYoBAYv/IllJRCMJi/9XAhBMgRALJAiL/0xPAl1JjP+J",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [
        {
            "name": "emit_test",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "field1"
                }
            ]
        }
    ],
    "templateVariables": {}
}