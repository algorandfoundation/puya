{
    "name": "ImmutableArrayContract",
    "structs": {},
    "methods": [
        {
            "name": "test_uint64_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_biguint_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_fixed_size_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_sized_named_tuple_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_log",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_implicit_conversion_emit",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [
                {
                    "name": "emit_test",
                    "args": [
                        {
                            "type": "uint64[]",
                            "name": "field1"
                        }
                    ]
                }
            ],
            "recommendations": {}
        },
        {
            "name": "test_nested_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "arr_to_add"
                },
                {
                    "type": "uint64[][]",
                    "name": "arr"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bit_packed_tuples",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_uints_and_lengths_and_trues",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arr1"
                },
                {
                    "type": "bool[]",
                    "name": "arr2"
                },
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr3"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "arr4"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_uint64_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_tuple_return",
            "args": [
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_convert_to_array_and_back",
            "args": [
                {
                    "type": "(uint64,bool,bool)[]",
                    "name": "arr"
                },
                {
                    "type": "uint64",
                    "name": "append"
                }
            ],
            "returns": {
                "type": "(uint64,bool,bool)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_with_native_tuple",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_arc4_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_dynamic_concat_with_native_tuple",
            "args": [
                {
                    "type": "(string,string)",
                    "name": "arg"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_concat_immutable_dynamic",
            "args": [
                {
                    "type": "(uint64,string)[]",
                    "name": "imm1"
                },
                {
                    "type": "(uint64,string)[]",
                    "name": "imm2"
                }
            ],
            "returns": {
                "type": "(uint64,string)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_immutable_arc4",
            "args": [
                {
                    "type": "(uint64,uint64)[]",
                    "name": "imm"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 10
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "a": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "YQ=="
                },
                "g": {
                    "keyType": "AVMString",
                    "valueType": "bool[]",
                    "key": "Zw=="
                },
                "c": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,uint64)[]",
                    "key": "Yw=="
                },
                "d": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool)[]",
                    "key": "ZA=="
                },
                "e": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,byte[])[]",
                    "key": "ZQ=="
                },
                "f": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,string)[]",
                    "key": "Zg=="
                },
                "bool2": {
                    "keyType": "AVMString",
                    "valueType": "(bool,bool)[]",
                    "key": "Ym9vbDI="
                },
                "bool7": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDc="
                },
                "bool8": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDg="
                },
                "bool9": {
                    "keyType": "AVMString",
                    "valueType": "(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[]",
                    "key": "Ym9vbDk="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        420,
                        424
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        309,
                        328,
                        350,
                        393,
                        412,
                        439,
                        458,
                        481,
                        501,
                        521,
                        541,
                        561,
                        603,
                        615,
                        638,
                        653,
                        668,
                        680,
                        692,
                        704,
                        716,
                        732,
                        744
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        761
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        312,
                        331,
                        353,
                        396,
                        415,
                        442,
                        461,
                        484,
                        504,
                        524,
                        544,
                        564,
                        606,
                        618,
                        641,
                        656,
                        671,
                        683,
                        695,
                        707,
                        719,
                        735,
                        747
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2629,
                        2936
                    ],
                    "errorMessage": "expected 1, 0"
                },
                {
                    "pc": [
                        2534,
                        2841
                    ],
                    "errorMessage": "expected 1st element to be correct"
                },
                {
                    "pc": [
                        2549,
                        2858
                    ],
                    "errorMessage": "expected 2nd element to be correct"
                },
                {
                    "pc": [
                        2690,
                        2998
                    ],
                    "errorMessage": "expected 4, 3"
                },
                {
                    "pc": [
                        1970
                    ],
                    "errorMessage": "expected element 0 to be False"
                },
                {
                    "pc": [
                        1991
                    ],
                    "errorMessage": "expected element 1 to be False"
                },
                {
                    "pc": [
                        2011
                    ],
                    "errorMessage": "expected element 2 to be True"
                },
                {
                    "pc": [
                        2037
                    ],
                    "errorMessage": "expected last element to be False"
                },
                {
                    "pc": [
                        4381
                    ],
                    "errorMessage": "expected non empty array"
                },
                {
                    "pc": [
                        3839
                    ],
                    "errorMessage": "expected string length to match index"
                },
                {
                    "pc": [
                        1637,
                        1707,
                        1765,
                        1878,
                        1961,
                        1982,
                        2003,
                        2028,
                        2184,
                        2248,
                        2506,
                        2581,
                        2646,
                        2813,
                        2890,
                        2953,
                        3662,
                        3783
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1309,
                        1389,
                        1522,
                        1602,
                        1660,
                        1729,
                        1843,
                        2120,
                        2315,
                        3069,
                        3217,
                        3283,
                        3369,
                        3405,
                        3437,
                        3909,
                        4033,
                        4199,
                        4212,
                        4237,
                        4263
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1725
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAECCCYKBBUffHUAAQACAAACAAJA/////////////////////////////////////////////////////////////////////////////////////wIACgdiaWd1aW50EgACAAAAAAAAAAEAAAAAAAAAAgwAAgAEAAcAAWEAAWIxG0ECaYIXBETUL5kEt+qmCwR0PXDtBBx+BJQEotWGCwTgX8VkBB4JK4MEATECYgTIZUqYBInRlvgEbLfJkQSYmL8CBPa2HugEYLhqewRzrSg/BFKd+ukEIG1RTwTgZGXiBOwDAKIE7N8UrwRRGspkBCmFLk8EbUqjWDYaAI4XAbUBqQGZAY0BgQF1AWkBWgFLATQBKAD+AOoA1gDCAK4AlwCEAGkAVgArABUAAiJDMRkURDEYRDYaAYgP1ihMULAjQzEZFEQxGEQ2GgE2GgKID58oTFCwI0MxGRREMRhENhoBSSJZSwEkWUsCTwJLAlJLAhVPA08DTwJSiA9LKExQsCNDMRkURDEYRDYaAYgPIyhMULAjQzEZFEQxGEQ2GgFJVwAITFcICIgO7ihMULAjQzEZFEQxGEQ2GgGIDsUoTFCwI0MxGRREMRhENhoBNhoCF4gOXShMULAjQzEZFEQxGEQ2GgEXiA3uKExQsCNDMRkURDEYRDYaAReIDYsoTFCwI0MxGRREMRhENhoBF4gNSShMULAjQzEZFEQxGEQ2GgEXiAzuKExQsCNDMRkURDEYRDYaATYaAjYaAzYaBIgLi08DFk8DFlBPAhZQTBZQKExQsCNDMRkURDEYRIgKTSNDMRkURDEYRDYaARc2GgKICWEoTFCwI0MxGRREMRhENhoBiAk8I0MxGRREMRhENhoBiAkmI0MxGRREMRhEiAfmI0MxGRREMRhEiAapI0MxGRREMRhEiAYkI0MxGRREMRhEiAVjI0MxGRREMRhENhoBF4gElCNDMRkURDEYRIgDTiNDMRkURDEYRIgCSSNDMRlA/joxGBREI0OKAgKL/iJZIwkWVwYAi/5MXABJFYv/CUqL/1hPAiJPA1KJigECi/8iWSMJSSQLSYv/VwIASU4CSU8CWUlPAkkVTE4CUikiiwaLAQxBABuLAosGSU4CWSQJFlcGAosFTFCMBSQIjAZC/92LABZXBgKLBVCLASQIiwJMiwNSUIsEjACMAYmKBAEp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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [
        {
            "name": "emit_test",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "field1"
                }
            ]
        }
    ],
    "templateVariables": {}
}