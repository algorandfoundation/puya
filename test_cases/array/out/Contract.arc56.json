{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        185,
                        197,
                        209,
                        221,
                        237,
                        249,
                        261,
                        273,
                        282,
                        294,
                        306
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1084
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1513,
                        1598,
                        1824
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        323
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        188,
                        200,
                        212,
                        224,
                        240,
                        252,
                        264,
                        276,
                        285,
                        297,
                        309
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1173,
                        1206,
                        1216,
                        1225,
                        1232
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        1148
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1775
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1481
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1558
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        593,
                        644,
                        668,
                        808,
                        879,
                        907,
                        911,
                        994,
                        1024,
                        1028,
                        1032,
                        1065,
                        1088,
                        1110,
                        1125,
                        1174,
                        1258,
                        1461,
                        1653,
                        1755
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1902
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}