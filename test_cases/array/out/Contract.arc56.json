{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        178,
                        190,
                        202,
                        218,
                        230,
                        242,
                        254,
                        263,
                        275,
                        287
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1003
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1437,
                        1522,
                        1750
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        304
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        181,
                        193,
                        205,
                        221,
                        233,
                        245,
                        257,
                        266,
                        278,
                        290
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1092,
                        1125,
                        1135,
                        1144,
                        1151
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        1067
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1701
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1405
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1482
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        566,
                        590,
                        727,
                        798,
                        826,
                        830,
                        913,
                        943,
                        947,
                        951,
                        984,
                        1007,
                        1029,
                        1044,
                        1093,
                        1177,
                        1385,
                        1577,
                        1681
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1774
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}