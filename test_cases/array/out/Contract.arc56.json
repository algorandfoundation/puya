{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_assignment_maximum_cursage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        192,
                        204,
                        216,
                        228,
                        244,
                        256,
                        268,
                        280,
                        292,
                        301,
                        313,
                        325
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1043
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1476,
                        1555,
                        1777
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        342
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        195,
                        207,
                        219,
                        231,
                        247,
                        259,
                        271,
                        283,
                        295,
                        304,
                        316,
                        328
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1127,
                        1157,
                        1165,
                        1172,
                        1177
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        1105
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1731
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1447
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1518
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        480,
                        489,
                        1272
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        589,
                        638,
                        662,
                        792,
                        854,
                        879,
                        883,
                        954,
                        982,
                        986,
                        990,
                        1024,
                        1047,
                        1070,
                        1085,
                        1128,
                        1203,
                        1427,
                        1591,
                        1609,
                        1623,
                        1711
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1854
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}