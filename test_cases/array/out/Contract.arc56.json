{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1418,
                        1425,
                        1432,
                        1438
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        178,
                        190,
                        202,
                        218,
                        230,
                        242,
                        254,
                        263,
                        275,
                        287
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        932
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1245,
                        1324,
                        1552
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        304
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        181,
                        193,
                        205,
                        221,
                        233,
                        245,
                        257,
                        266,
                        278,
                        290
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1015,
                        1045,
                        1053,
                        1060,
                        1065
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        993
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1506
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1216
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1287
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        551,
                        573,
                        626,
                        742,
                        767,
                        771,
                        842,
                        872,
                        876,
                        880,
                        913,
                        936,
                        958,
                        973,
                        1016,
                        1090,
                        1196,
                        1379,
                        1486
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1576
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}