{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_assignment_maximum_cursage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        99
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        882
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1306,
                        1385,
                        1599
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        960,
                        990,
                        998,
                        1005,
                        1010
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        938
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1553
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1277
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1348
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        341,
                        350,
                        353,
                        356,
                        740,
                        1106,
                        1123,
                        1179,
                        1634,
                        1653
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1210
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        443,
                        492,
                        516,
                        641,
                        703,
                        728,
                        732,
                        802,
                        829,
                        833,
                        837,
                        863,
                        886,
                        903,
                        918,
                        961,
                        1037,
                        1257,
                        1421,
                        1439,
                        1453,
                        1533
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1676
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}