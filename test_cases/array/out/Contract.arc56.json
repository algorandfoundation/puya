{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_assignment_maximum_cursage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        99
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        204
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        888
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1305,
                        1384,
                        1598
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        966,
                        996,
                        1004,
                        1011,
                        1016
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        944
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1552
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1276
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1347
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        340,
                        349,
                        352,
                        355,
                        746,
                        1110,
                        1127,
                        1183,
                        1633,
                        1652
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        449,
                        498,
                        522,
                        647,
                        709,
                        734,
                        738,
                        808,
                        835,
                        839,
                        843,
                        869,
                        892,
                        909,
                        924,
                        967,
                        1041,
                        1256,
                        1420,
                        1438,
                        1452,
                        1532
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1675
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}