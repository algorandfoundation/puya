{
    "name": "Contract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_multiple_append",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "overhead",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_too_long",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_copy_and_extend",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_array_evaluation_order",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_allocations",
            "args": [
                {
                    "type": "uint64",
                    "name": "num"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_iteration",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_quicksort",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_unobserved_write",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        192,
                        204,
                        216,
                        228,
                        244,
                        256,
                        268,
                        280,
                        289,
                        301,
                        313
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1087
                    ],
                    "errorMessage": "array is expected length"
                },
                {
                    "pc": [
                        1487,
                        1566,
                        1788
                    ],
                    "errorMessage": "array is not sorted"
                },
                {
                    "pc": [
                        330
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        195,
                        207,
                        219,
                        231,
                        247,
                        259,
                        271,
                        283,
                        292,
                        304,
                        316
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1186,
                        1216,
                        1224,
                        1231,
                        1236
                    ],
                    "errorMessage": "expected 4"
                },
                {
                    "pc": [
                        1164
                    ],
                    "errorMessage": "expected 5"
                },
                {
                    "pc": [
                        1742
                    ],
                    "errorMessage": "expected array of length 32"
                },
                {
                    "pc": [
                        1458
                    ],
                    "errorMessage": "expected array of length 5"
                },
                {
                    "pc": [
                        1529
                    ],
                    "errorMessage": "incorrect array value"
                },
                {
                    "pc": [
                        584,
                        633,
                        657,
                        800,
                        869,
                        901,
                        912,
                        983,
                        1019,
                        1030,
                        1032,
                        1067,
                        1098,
                        1121,
                        1144,
                        1187,
                        1258,
                        1438,
                        1599,
                        1618,
                        1632,
                        1722
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        1864
                    ],
                    "errorMessage": "no available slots"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQgABSYFABgAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAMIAAAAAAAAAAMIAAAAAAAAAAAIAAAAAAAAAASAIH//////////////////////////////////////////NQAxG0EA24ILBKM76HME4MN46QQ2b1CdBFg1GlAE+pnphASiDkQPBBeaw/kE8X9vCgSEXhtOBHYhz9EEVmGmfDYaAI4LAHsAbwBjAFoATgBCADYAJgAaAA4AAiRDMRkURDEYRIgGQSJDMRkURDEYRIgFwCJDMRkURDEYRIgEpyJDMRkURDEYRDYaAReIBHciQzEZFEQxGESIA9siQzEZFEQxGESIA0YiQzEZFEQxGESIAwIiQzEZFEQxGEQiQzEZFEQxGESIArwiQzEZFEQxGESIApMiQzEZFEQxGESIAVkiQzEZQP90MRgURCJDigMAKEcCi/6L/wiBAgqL/T5MIwtbi/+L/ov9PosFIwtJjABbiwMMQQAJiwUiCIwFQv/mi/0+iwQjC0mMAVuLAw1BADGLBEEACYsEIgmMBEL/4Yv+iwQMQQAJi/2L/osEiP+diwWL/wxBAAmL/YsFi/+I/4yJiwWLBAxBAECL/T5JiwFJTgNbSwGLAElOBFtMFk8CTwNPAl1MFkxOAl2L/Uw/iwUiCIwFiwRB/6WLBCIJSYwEiwUPQP9fQv+ViwWLBBJB/42LBSIIjAWLBEmMAkEABosEIgmMAosCjARC/3KKAAGIBQlJKD8kiwElDEEAE4sAST6LAUlOAxZQPyIIjAFC/+aJigEAi/8+SRUjCiIJIwtbFESJigIAJIsAi/8MQQAVi/4+iwBJTgIWUIv+TD8iCIwAQv/jiYoBAYv/PkkVIwoWUIv/TD+L/4mKAACIBJ1HAoAIAAAAAAAAACo/SSWI/7M+SRUjCkmBBhJEIgkjC1uBBBJEgQQkiwKBAwxBAC+LAEk+SRVJIwlLAksBTwNSTwIkTwNYTwJMPxeLAUlOAhJEIgmMAYsCIgiMAkL/yYsAST5JFSMKSYEDEkQiCSMLSwFMWyISRIAIAAAAAAAAACtQSj9JFSMKSYEEEkQiCSMLSwFMW4ErEkQkW4EqEkRJgQqI/yBJPkkVIwpJgQ4SRCIJIwtLAUxbgQkSRIAIAAAAAAAAACxQSRUjCkmBDxJEIgkjC0sBTFuBLBJEgAgAAAAAAAAAY1CACAAAAAAAAABkUEkkW4ECCBZcAExLAT9JFSMKSYEREkRLASRbgSwSREmBAgkjC0sCTFuBYxJEIgkjC1uBZBJEiYgDckkoP0kiiP6SKUhJPilQTEsBPxUjCoEEEkSJiANVSSg/SSKI/nVJPoAIAAAAAAAAAAFQgAgAAAAAAAAAAlAqUExLAT8VIwqBBBJEiYoAACgkiwGBgAQMQQASiwCLAUlOAhZQjAAiCIwBQv/liwBJFSMKgYAEEkSACAAAAAAAAAIAUEiJigAAKCSLASUMQQASiwCLAUlOAhZQjAAiCIwBQv/niwBJgAgAAAAAAAAABVBJFSMKSYEGEkQiCSMLSwFMWyUSREsBSRUjCkklEkQiCSMLSwFMW4EEEkRQSRUjCkmBCxJETwIVIwolEkQiCSMLSwFMW4EEEkRJgSBbgQQSREmBKFslEkSBMFsURImIAmNJKj9JiP2mSwGI/aE+SwE+TFA/ST5JFSMKgQYSREkkW4EDEkRJI1siEkRJgRBbgQISREmBGFuBAxJESYEgWyISRIEoW4ECEkRJiP1hPkkVIwoiCSMLW0sBiP1SPiRbSwI+TwIWTwIjC0xdTEsBP0kVIwojEkRJgTBbgQYSREmBOFuBBxJEgRhbgQYSRImKAQAkiwCL/wxBABOIAcdJKD8iiPzoiwAiCIwAQv/liYoAACRJKEcHJIsKJQxBABKLCYsKSU4CFlCMCSIIjApC/+eLCRUjCkmMAiUSRCSMBySMBosGiwIMQQAZiwmLBklOAiMLW0mLBw9ETCIIjAaMB0L/34sJFSMKjAMkjAWLBYsDDEEAFYsJiwVJTgIjC1tLARJEIgiMBUL/44sJFSMKjAiLCEEAF4sIIglJjAiLCUwjC1tJiwcORIwHQv/kgAIAAIwAKIwBJIwEiwQlDEEAJYsESRaLAEsBUElXAgAVIwoWVwYCXACMAIsBTFCMASIIjARC/9SLAIsBUElXAgAVIwoWVwYCXABJJFmBChJESVcCCCuoRElXIggnBKhESVcqCCuoRFdKCCcEqESJigAAKEcCiACgSSg/MQAkiwWBIAxBABmLBIsFSU4CVYsDSU4CPkwWUD8iCIwFQv/fiwNJPhUjCkmBIBJEIglLASRPAoj6dCSMAj4VIwqMACSMAYsBiwAMQQAaiwM+iwFJTgIjC1tJiwIPREwiCIwBjAJC/96JiPsiST5JFSMKIgkkFkwjC08CSwFPA11LAkw/SwGI+ypLAT4iFksCTF1PAksBP0xbIhJEiTQAkzQAgYACSwIJJFQ1AIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}