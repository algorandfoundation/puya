{
    "hints": {
        "test_array(uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_bool_array(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_arc4_conversion(uint64)uint64[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_array(uint64[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_arc4_bool()bool[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "count": {
                    "type": "uint64",
                    "key": "count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StaticSizeContract",
        "methods": [
            {
                "name": "test_array",
                "args": [
                    {
                        "type": "uint64",
                        "name": "x1"
                    },
                    {
                        "type": "uint64",
                        "name": "y1"
                    },
                    {
                        "type": "uint64",
                        "name": "x2"
                    },
                    {
                        "type": "uint64",
                        "name": "y2"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_extend_from_tuple",
                "args": [
                    {
                        "type": "((uint64,uint64),(uint64,uint64))",
                        "name": "some_more"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "test_extend_from_arc4_tuple",
                "args": [
                    {
                        "type": "((uint64,uint64),(uint64,uint64))",
                        "name": "some_more"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64)[]"
                }
            },
            {
                "name": "test_bool_array",
                "args": [
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_arc4_conversion",
                "args": [
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "sum_array",
                "args": [
                    {
                        "type": "uint64[]",
                        "name": "arc4_arr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "test_arc4_bool",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}