{
    "hints": {
        "test_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_extend()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_multiple_append()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "overhead()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_too_long()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_copy_and_extend()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_evaluation_order()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_assignment_maximum_cursage()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_allocations(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_iteration()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_quicksort()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_unobserved_write()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxIDggMCA1IDUxMgogICAgYnl0ZWNibG9jayAweCAweDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMyAweDAwMDAwMDAwMDAwMDAwMDAgMHgwMDAwMDAwMDAwMDAwMDA0CiAgICBwdXNoYnl0ZXMgMHg3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmCiAgICBzdG9yZSAwCiAgICAvLyBhcnJheS91aW50NjQucHk6MTMKICAgIC8vIGNsYXNzIENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNwogICAgcHVzaGJ5dGVzcyAweGEzM2JlODczIDB4ZTBjMzc4ZTkgMHgzNjZmNTA5ZCAweDU4MzUxYTUwIDB4ZmE5OWU5ODQgMHhhMjBlNDQwZiAweDE3OWFjM2Y5IDB4NDVkY2M4MzYgMHhmMTdmNmYwYSAweDg0NWUxYjRlIDB4NzYyMWNmZDEgMHg1NjYxYTY3YyAvLyBtZXRob2QgInRlc3RfYXJyYXkoKXZvaWQiLCBtZXRob2QgInRlc3RfYXJyYXlfZXh0ZW5kKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2FycmF5X211bHRpcGxlX2FwcGVuZCgpdm9pZCIsIG1ldGhvZCAib3ZlcmhlYWQoKXZvaWQiLCBtZXRob2QgInRlc3RfYXJyYXlfdG9vX2xvbmcoKXZvaWQiLCBtZXRob2QgInRlc3RfYXJyYXlfY29weV9hbmRfZXh0ZW5kKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X2FycmF5X2V2YWx1YXRpb25fb3JkZXIoKXZvaWQiLCBtZXRob2QgInRlc3RfYXJyYXlfYXNzaWdubWVudF9tYXhpbXVtX2N1cnNhZ2UoKXZvaWQiLCBtZXRob2QgInRlc3RfYWxsb2NhdGlvbnModWludDY0KXZvaWQiLCBtZXRob2QgInRlc3RfaXRlcmF0aW9uKCl2b2lkIiwgbWV0aG9kICJ0ZXN0X3F1aWNrc29ydCgpdm9pZCIsIG1ldGhvZCAidGVzdF91bm9ic2VydmVkX3dyaXRlKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl90ZXN0X2FycmF5X3JvdXRlQDMgbWFpbl90ZXN0X2FycmF5X2V4dGVuZF9yb3V0ZUA0IG1haW5fdGVzdF9hcnJheV9tdWx0aXBsZV9hcHBlbmRfcm91dGVANSBtYWluX292ZXJoZWFkX3JvdXRlQDYgbWFpbl90ZXN0X2FycmF5X3Rvb19sb25nX3JvdXRlQDcgbWFpbl90ZXN0X2FycmF5X2NvcHlfYW5kX2V4dGVuZF9yb3V0ZUA4IG1haW5fdGVzdF9hcnJheV9ldmFsdWF0aW9uX29yZGVyX3JvdXRlQDkgbWFpbl90ZXN0X2FycmF5X2Fzc2lnbm1lbnRfbWF4aW11bV9jdXJzYWdlX3JvdXRlQDEwIG1haW5fdGVzdF9hbGxvY2F0aW9uc19yb3V0ZUAxMSBtYWluX3Rlc3RfaXRlcmF0aW9uX3JvdXRlQDEyIG1haW5fdGVzdF9xdWlja3NvcnRfcm91dGVAMTMgbWFpbl90ZXN0X3Vub2JzZXJ2ZWRfd3JpdGVfcm91dGVAMTQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyMToKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMwogICAgLy8gY2xhc3MgQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50Y18yIC8vIDAKICAgIHJldHVybgoKbWFpbl90ZXN0X3Vub2JzZXJ2ZWRfd3JpdGVfcm91dGVAMTQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTkxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfdW5vYnNlcnZlZF93cml0ZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0X3F1aWNrc29ydF9yb3V0ZUAxMzoKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNzQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9xdWlja3NvcnQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9pdGVyYXRpb25fcm91dGVAMTI6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTQwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfaXRlcmF0aW9uCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfYWxsb2NhdGlvbnNfcm91dGVAMTE6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTM0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBhcnJheS91aW50NjQucHk6MTMKICAgIC8vIGNsYXNzIENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMzQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHRlc3RfYWxsb2NhdGlvbnMKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9hcnJheV9hc3NpZ25tZW50X21heGltdW1fY3Vyc2FnZV9yb3V0ZUAxMDoKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9hcnJheV9hc3NpZ25tZW50X21heGltdW1fY3Vyc2FnZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0X2FycmF5X2V2YWx1YXRpb25fb3JkZXJfcm91dGVAOToKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9hcnJheV9ldmFsdWF0aW9uX29yZGVyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfYXJyYXlfY29weV9hbmRfZXh0ZW5kX3JvdXRlQDg6CiAgICAvLyBhcnJheS91aW50NjQucHk6ODQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9hcnJheV9jb3B5X2FuZF9leHRlbmQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9hcnJheV90b29fbG9uZ19yb3V0ZUA3OgogICAgLy8gYXJyYXkvdWludDY0LnB5Ojc1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfYXJyYXlfdG9vX2xvbmcKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fb3ZlcmhlYWRfcm91dGVANjoKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo3MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl90ZXN0X2FycmF5X211bHRpcGxlX2FwcGVuZF9yb3V0ZUA1OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjYyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfYXJyYXlfbXVsdGlwbGVfYXBwZW5kCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3Rlc3RfYXJyYXlfZXh0ZW5kX3JvdXRlQDQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6NTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVzdF9hcnJheV9leHRlbmQKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fdGVzdF9hcnJheV9yb3V0ZUAzOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHRlc3RfYXJyYXkKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDE3OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjEzCiAgICAvLyBjbGFzcyBDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIxCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LnF1aWNrc29ydF93aW5kb3coYXJyOiB1aW50NjQsIHdpbmRvd19sZWZ0OiB1aW50NjQsIHdpbmRvd19yaWdodDogdWludDY0KSAtPiB2b2lkOgpxdWlja3NvcnRfd2luZG93OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIwMS0yMDQKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcXVpY2tzb3J0X3dpbmRvdygKICAgIC8vICAgICBhcnI6IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0sIHdpbmRvd19sZWZ0OiBVSW50NjQsIHdpbmRvd19yaWdodDogVUludDY0CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIGJ5dGVjXzAgLy8gIiIKICAgIGR1cG4gMgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIwNwogICAgLy8gcGl2b3QgPSBhcnJbKHdpbmRvd19sZWZ0ICsgd2luZG93X3JpZ2h0KSAvLyAyXQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgICsKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAvCiAgICBmcmFtZV9kaWcgLTMKICAgIGxvYWRzCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIC0yCgpxdWlja3NvcnRfd2luZG93X3doaWxlX3RvcEAzOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIxMS0yMTIKICAgIC8vICMgbW92ZSBsZWZ0IG9mIHdpbmRvdyB0b3dhcmRzIHBpdm90CiAgICAvLyB3aGlsZSBhcnJbbGVmdF0gPCBwaXZvdDoKICAgIGZyYW1lX2RpZyAtMwogICAgbG9hZHMKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMwogICAgPAogICAgYnogcXVpY2tzb3J0X3dpbmRvd193aGlsZV90b3BANgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIxMwogICAgLy8gbGVmdCArPSAxCiAgICBmcmFtZV9kaWcgNQogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiBxdWlja3NvcnRfd2luZG93X3doaWxlX3RvcEAzCgpxdWlja3NvcnRfd2luZG93X3doaWxlX3RvcEA2OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIxNC0yMTUKICAgIC8vICMgbW92ZSByaWdodCBvZiB3aW5kb3cgdG93YXJkcyBwaXZvdAogICAgLy8gd2hpbGUgcGl2b3QgPCBhcnJbcmlnaHRdOgogICAgZnJhbWVfZGlnIC0zCiAgICBsb2FkcwogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMSAvLyA4CiAgICAqCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAzCiAgICA+CiAgICBieiBxdWlja3NvcnRfd2luZG93X2FmdGVyX3doaWxlQDEwCiAgICAvLyBhcnJheS91aW50NjQucHk6MjE2LTIxNwogICAgLy8gIyBicmVhayBvdXQgb2YgbG9vcCBpZiByaWdodCB3b3VsZCBnbyBuZWdhdGl2ZQogICAgLy8gaWYgbm90IHJpZ2h0OgogICAgZnJhbWVfZGlnIDQKICAgIGJ6IHF1aWNrc29ydF93aW5kb3dfYWZ0ZXJfd2hpbGVAMjIKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyMTkKICAgIC8vIHJpZ2h0IC09IDEKICAgIGZyYW1lX2RpZyA0CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZnJhbWVfYnVyeSA0CiAgICBiIHF1aWNrc29ydF93aW5kb3dfd2hpbGVfdG9wQDYKCnF1aWNrc29ydF93aW5kb3dfYWZ0ZXJfd2hpbGVAMjI6CiAgICAvLyBhcnJheS91aW50NjQucHk6MjQ3LTI0OAogICAgLy8gIyBzb3J0IGxlZnQgaGFsZiBvZiB3aW5kb3cKICAgIC8vIGlmIHdpbmRvd19sZWZ0IDwgcmlnaHQ6CiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyA0CiAgICA8CiAgICBieiBxdWlja3NvcnRfd2luZG93X2FmdGVyX2lmX2Vsc2VAMjQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNDkKICAgIC8vIHF1aWNrc29ydF93aW5kb3coYXJyLCB3aW5kb3dfbGVmdCwgcmlnaHQpCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIDQKICAgIGNhbGxzdWIgcXVpY2tzb3J0X3dpbmRvdwoKcXVpY2tzb3J0X3dpbmRvd19hZnRlcl9pZl9lbHNlQDI0OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjI1MC0yNTEKICAgIC8vICMgc29ydCByaWdodCBoYWxmIG9mIHdpbmRvdwogICAgLy8gaWYgbGVmdCA8IHdpbmRvd19yaWdodDoKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IHF1aWNrc29ydF93aW5kb3dfYWZ0ZXJfaWZfZWxzZUAyNgogICAgLy8gYXJyYXkvdWludDY0LnB5OjI1MgogICAgLy8gcXVpY2tzb3J0X3dpbmRvdyhhcnIsIGxlZnQsIHdpbmRvd19yaWdodCkKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBxdWlja3NvcnRfd2luZG93CgpxdWlja3NvcnRfd2luZG93X2FmdGVyX2lmX2Vsc2VAMjY6CiAgICByZXRzdWIKCnF1aWNrc29ydF93aW5kb3dfYWZ0ZXJfd2hpbGVAMTA6CiAgICAvLyBhcnJheS91aW50NjQucHk6MjIxLTIyMgogICAgLy8gIyBpZiB3aW5kb3cgaXNuJ3QgZW1wdHkgdGhlbiBzd2FwIHZhbHVlcyBhbmQgbW92ZSB3aW5kb3cgaW4KICAgIC8vIGlmIGxlZnQgPCByaWdodDoKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgNAogICAgPAogICAgYnogcXVpY2tzb3J0X3dpbmRvd19hZnRlcl9pZl9lbHNlQDE2CiAgICAvLyBhcnJheS91aW50NjQucHk6MjIzCiAgICAvLyBhcnJbbGVmdF0sIGFycltyaWdodF0gPSBhcnJbcmlnaHRdLCBhcnJbbGVmdF0KICAgIGZyYW1lX2RpZyAtMwogICAgbG9hZHMKICAgIGR1cAogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgY292ZXIgMwogICAgaW50Y18xIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGNvdmVyIDMKICAgIHJlcGxhY2UzCiAgICBjb3ZlciAyCiAgICByZXBsYWNlMwogICAgZnJhbWVfZGlnIC0zCiAgICBzd2FwCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyMjQKICAgIC8vIGxlZnQgKz0gMQogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyMjUtMjI2CiAgICAvLyAjIGJyZWFrIG91dCBvZiBsb29wIGlmIHJpZ2h0IHdvdWxkIGdvIG5lZ2F0aXZlCiAgICAvLyBpZiBub3QgcmlnaHQ6CiAgICBmcmFtZV9kaWcgNAogICAgYnogcXVpY2tzb3J0X3dpbmRvd19hZnRlcl93aGlsZUAyMgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIyOAogICAgLy8gcmlnaHQgLT0gMQogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gYXJyYXkvdWludDY0LnB5OjIyOS0yMzAKICAgIC8vICMgZXhwbGljaXQgY29udGludWUgdG8gYXZvaWQgaGl0dGluZyBvdXRlciBicmVhawogICAgLy8gaWYgbGVmdCA8PSByaWdodDoKICAgIGZyYW1lX2RpZyA1CiAgICA+PQogICAgYm56IHF1aWNrc29ydF93aW5kb3dfd2hpbGVfdG9wQDMKICAgIGIgcXVpY2tzb3J0X3dpbmRvd19hZnRlcl93aGlsZUAyMgoKcXVpY2tzb3J0X3dpbmRvd19hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjIzNS0yMzYKICAgIC8vICMgaWYgd2luZG93IGlzIGp1c3Qgb25lIGl0ZW0sIGRvbid0IGJvdGhlciBzd2FwcGluZywgYnV0IHN0aWxsIGFkanVzdCB3aW5kb3cKICAgIC8vIGlmIGxlZnQgPT0gcmlnaHQ6CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfZGlnIDQKICAgID09CiAgICBieiBxdWlja3NvcnRfd2luZG93X2FmdGVyX3doaWxlQDIyCiAgICAvLyBhcnJheS91aW50NjQucHk6MjM3CiAgICAvLyBsZWZ0ICs9IDEKICAgIGZyYW1lX2RpZyA1CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA1CiAgICBmcmFtZV9kaWcgNAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyMzgtMjM5CiAgICAvLyAjIGRvbid0IGRlY3JlbWVudCByaWdodCBpZiBpdCB3b3VsZCBnbyBuZWdhdGl2ZQogICAgLy8gaWYgcmlnaHQ6CiAgICBieiBxdWlja3NvcnRfd2luZG93X2FmdGVyX2lmX2Vsc2VAMTkKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNDAKICAgIC8vIHJpZ2h0IC09IDEKICAgIGZyYW1lX2RpZyA0CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZnJhbWVfYnVyeSAyCgpxdWlja3NvcnRfd2luZG93X2FmdGVyX2lmX2Vsc2VAMTk6CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBhcnJheS91aW50NjQucHk6MjQxLTI0MwogICAgLy8gIyBsb29wIGFsd2F5cyBlbmRzIGluIHRoaXMgc2NlbmFyaW8KICAgIC8vICMgYW5kIGFuIGV4cGxpY3QgYnJlYWsgY29uc3VtZXMgZmV3ZXIgb3BzCiAgICAvLyBicmVhawogICAgYiBxdWlja3NvcnRfd2luZG93X2FmdGVyX3doaWxlQDIyCgoKLy8gdGVzdF9jYXNlcy5hcnJheS51aW50NjQuY3JlYXRlX2FycmF5KCkgLT4gdWludDY0OgpjcmVhdGVfYXJyYXk6CiAgICAvLyBhcnJheS91aW50NjQucHk6MjU1LTI1NgogICAgLy8gQHN1YnJvdXRpbmUoaW5saW5lPUZhbHNlKQogICAgLy8gZGVmIGNyZWF0ZV9hcnJheSgpIC0+IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF06CiAgICBwcm90byAwIDEKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNTcKICAgIC8vIGFyciA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgY2FsbHN1YiBfcHV5YV9saWIubWVtLm5ld19zbG90CiAgICBkdXAKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjI1OAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDUpOgogICAgaW50Y18yIC8vIDAKCmNyZWF0ZV9hcnJheV9mb3JfaGVhZGVyQDE6CiAgICAvLyBhcnJheS91aW50NjQucHk6MjU4CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNSk6CiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18zIC8vIDUKICAgIDwKICAgIGJ6IGNyZWF0ZV9hcnJheV9hZnRlcl9mb3JANAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI1OQogICAgLy8gYXJyLmFwcGVuZChpKQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgbG9hZHMKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6MjU4CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNSk6CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxCiAgICBiIGNyZWF0ZV9hcnJheV9mb3JfaGVhZGVyQDEKCmNyZWF0ZV9hcnJheV9hZnRlcl9mb3JANDoKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNjAKICAgIC8vIHJldHVybiBhcnIKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LmFzc2VydF9sYXN0X2lzX3plcm8oYXJyOiB1aW50NjQpIC0+IHZvaWQ6CmFzc2VydF9sYXN0X2lzX3plcm86CiAgICAvLyBhcnJheS91aW50NjQucHk6MjYzLTI2NAogICAgLy8gQHN1YnJvdXRpbmUoaW5saW5lPUZhbHNlKQogICAgLy8gZGVmIGFzc2VydF9sYXN0X2lzX3plcm8oYXJyOiBSZWZlcmVuY2VBcnJheVtVSW50NjRdKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBhcnJheS91aW50NjQucHk6MjY1CiAgICAvLyBhc3NlcnQgYXJyW2Fyci5sZW5ndGggLSAxXSA9PSAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGxvYWRzCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgICEKICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5hcnJheS51aW50NjQuYWRkX3goYXJyOiB1aW50NjQsIHg6IHVpbnQ2NCkgLT4gdm9pZDoKYWRkX3g6CiAgICAvLyBhcnJheS91aW50NjQucHk6Mjc3LTI3OAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBhZGRfeChhcnI6IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0sIHg6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI3OQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHgpOgogICAgaW50Y18yIC8vIDAKCmFkZF94X2Zvcl9oZWFkZXJAMToKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNzkKICAgIC8vIGZvciBpIGluIHVyYW5nZSh4KToKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IGFkZF94X2FmdGVyX2ZvckA0CiAgICAvLyBhcnJheS91aW50NjQucHk6MjgwCiAgICAvLyBhcnIuYXBwZW5kKGkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGxvYWRzCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6Mjc5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoeCk6CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIGFkZF94X2Zvcl9oZWFkZXJAMQoKYWRkX3hfYWZ0ZXJfZm9yQDQ6CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFycmF5LnVpbnQ2NC5hcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4oYXJyOiB1aW50NjQpIC0+IHVpbnQ2NDoKYXBwZW5kX2xlbmd0aF9hbmRfcmV0dXJuOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjI5MS0yOTIKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYXBwZW5kX2xlbmd0aF9hbmRfcmV0dXJuKGFycjogUmVmZXJlbmNlQXJyYXlbVUludDY0XSkgLT4gUmVmZXJlbmNlQXJyYXlbVUludDY0XToKICAgIHByb3RvIDEgMQogICAgLy8gYXJyYXkvdWludDY0LnB5OjI5MwogICAgLy8gYXJyLmFwcGVuZChhcnIubGVuZ3RoKQogICAgZnJhbWVfZGlnIC0xCiAgICBsb2FkcwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGZyYW1lX2RpZyAtMQogICAgc3dhcAogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6Mjk0CiAgICAvLyByZXR1cm4gYXJyCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYXJyYXkoKSAtPiB2b2lkOgp0ZXN0X2FycmF5OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0LTE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHRlc3RfYXJyYXkoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjE2CiAgICAvLyBhcnIgPSBSZWZlcmVuY2VBcnJheVtVSW50NjRdKCkKICAgIGNhbGxzdWIgX3B1eWFfbGliLm1lbS5uZXdfc2xvdAogICAgZHVwCiAgICAvLyBhcnJheS91aW50NjQucHk6MTkKICAgIC8vIGFyci5hcHBlbmQoVUludDY0KDQyKSkKICAgIHB1c2hpbnQgNDIgLy8gNDIKICAgIGl0b2IKICAgIGR1cDIKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjIxCiAgICAvLyBhc3NlcnQgYXJyWy0xXSA9PSA0MgogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MjMKICAgIC8vIGFkZF94KGFyciwgVUludDY0KDUpKQogICAgZHVwCiAgICBpbnRjXzMgLy8gNQogICAgY2FsbHN1YiBhZGRfeAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI0CiAgICAvLyBhc3NlcnQgYXJyLmxlbmd0aCA9PSA2CiAgICBsb2FkcwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBkdXAKICAgIHB1c2hpbnQgNiAvLyA2CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MjUKICAgIC8vIGFzc2VydCBhcnJbLTFdID09IDQKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MjcKICAgIC8vIHBvcF94KGFyciwgeD1VSW50NjQoMyksIGV4cGVjdGVkPVVJbnQ2NCg0KSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICAvLyBhcnJheS91aW50NjQucHk6Mjg1CiAgICAvLyBmb3IgX2kgaW4gdXJhbmdlKHgpOgogICAgaW50Y18yIC8vIDAKCnRlc3RfYXJyYXlfZm9yX2hlYWRlckAyOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjI4NQogICAgLy8gZm9yIF9pIGluIHVyYW5nZSh4KToKICAgIGZyYW1lX2RpZyAyCiAgICAvLyBhcnJheS91aW50NjQucHk6MjcKICAgIC8vIHBvcF94KGFyciwgeD1VSW50NjQoMyksIGV4cGVjdGVkPVVJbnQ2NCg0KSkKICAgIHB1c2hpbnQgMyAvLyAzCiAgICAvLyBhcnJheS91aW50NjQucHk6Mjg1CiAgICAvLyBmb3IgX2kgaW4gdXJhbmdlKHgpOgogICAgPAogICAgYnogdGVzdF9hcnJheV9hZnRlcl9mb3JANAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI4NgogICAgLy8gcG9wcGVkID0gYXJyLnBvcCgpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBsb2FkcwogICAgZHVwCiAgICBsZW4KICAgIGR1cAogICAgaW50Y18xIC8vIDgKICAgIC0KICAgIGRpZyAyCiAgICBpbnRjXzIgLy8gMAogICAgZGlnIDIKICAgIGV4dHJhY3QzCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAzCiAgICBzdWJzdHJpbmczCiAgICBidG9pCiAgICBjb3ZlciAyCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyODcKICAgIC8vIGFzc2VydCBwb3BwZWQgPT0gZXhwZWN0ZWQKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyODgKICAgIC8vIGV4cGVjdGVkIC09IDEKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyODUKICAgIC8vIGZvciBfaSBpbiB1cmFuZ2UoeCk6CiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMgogICAgYiB0ZXN0X2FycmF5X2Zvcl9oZWFkZXJAMgoKdGVzdF9hcnJheV9hZnRlcl9mb3JANDoKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyOAogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gMwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgbG9hZHMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgZHVwCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI5CiAgICAvLyBhc3NlcnQgYXJyWy0xXSA9PSAxCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaW50Y18xIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTozMQogICAgLy8gYXJyLmFwcGVuZChVSW50NjQoNDMpKQogICAgcHVzaGludCA0MyAvLyA0MwogICAgaXRvYgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAyCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weTozMgogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gNAogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBkdXAKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MzMKICAgIC8vIGFzc2VydCBhcnJbLTFdID09IDQzCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaW50Y18xIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCA0MyAvLyA0MwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjM0CiAgICAvLyBhc3NlcnQgYXJyWzBdID09IDQyCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNDIgLy8gNDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTozNgogICAgLy8gYWRkX3goYXJyLCBVSW50NjQoMTApKQogICAgZHVwCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBjYWxsc3ViIGFkZF94CiAgICAvLyBhcnJheS91aW50NjQucHk6MzcKICAgIC8vIGFzc2VydCBhcnIubGVuZ3RoID09IDE0CiAgICBkdXAKICAgIGxvYWRzCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGR1cAogICAgcHVzaGludCAxNCAvLyAxNAogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjM4CiAgICAvLyBhc3NlcnQgYXJyWy0xXSA9PSA5CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaW50Y18xIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCA5IC8vIDkKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo0MAogICAgLy8gYXJyLmFwcGVuZChVSW50NjQoNDQpKQogICAgcHVzaGludCA0NCAvLyA0NAogICAgaXRvYgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICAvLyBhcnJheS91aW50NjQucHk6NDEKICAgIC8vIGFzc2VydCBhcnIubGVuZ3RoID09IDE1CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGR1cAogICAgcHVzaGludCAxNSAvLyAxNQogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjQyCiAgICAvLyBhc3NlcnQgYXJyWy0xXSA9PSA0NAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGludGNfMSAvLyA4CiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNDQgLy8gNDQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToyNzIKICAgIC8vIGFyci5hcHBlbmQoVUludDY0KDk5KSkKICAgIHB1c2hpbnQgOTkgLy8gOTkKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgLy8gYXJyYXkvdWludDY0LnB5OjI3MwogICAgLy8gYXJyMi5hcHBlbmQoVUludDY0KDEwMCkpCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgLy8gYXJyYXkvdWludDY0LnB5OjQ0CiAgICAvLyByZXR1cm5fcmVmKGFyciwgYXJyKVswXSArPSAyCiAgICBkdXAKICAgIGludGNfMiAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGl0b2IKICAgIHJlcGxhY2UyIDAKICAgIHN3YXAKICAgIGRpZyAxCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo0NQogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gMTcKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgZHVwCiAgICBwdXNoaW50IDE3IC8vIDE3CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6NDYKICAgIC8vIGFzc2VydCBhcnJbMF0gPT0gNDQKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNDQgLy8gNDQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo0NwogICAgLy8gYXNzZXJ0IGFyclstMl0gPT0gOTkKICAgIGR1cAogICAgcHVzaGludCAyIC8vIDIKICAgIC0KICAgIGludGNfMSAvLyA4CiAgICAqCiAgICBkaWcgMgogICAgc3dhcAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgOTkgLy8gOTkKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo0OAogICAgLy8gYXNzZXJ0IGFyclstMV0gPT0gMTAwCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaW50Y18xIC8vIDgKICAgICoKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYXJyYXlfZXh0ZW5kKCkgLT4gdm9pZDoKdGVzdF9hcnJheV9leHRlbmQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6NTIKICAgIC8vIGFyciA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgY2FsbHN1YiBfcHV5YV9saWIubWVtLm5ld19zbG90CiAgICBkdXAKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjUzCiAgICAvLyBhZGRfeChhcnIsIFVJbnQ2NCgxKSkKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgIGNhbGxzdWIgYWRkX3gKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo1NwogICAgLy8gYXJyMi5hcHBlbmQoVUludDY0KDMpKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMwogICAgcG9wCiAgICAvLyBhcnJheS91aW50NjQucHk6NTkKICAgIC8vIGFyci5leHRlbmQoYXJyMikKICAgIGR1cAogICAgbG9hZHMKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo1NwogICAgLy8gYXJyMi5hcHBlbmQoVUludDY0KDMpKQogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwMwogICAgLy8gYXJyYXkvdWludDY0LnB5OjU5CiAgICAvLyBhcnIuZXh0ZW5kKGFycjIpCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIHN3YXAKICAgIGRpZyAxCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo2MAogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gNAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYXJyYXlfbXVsdGlwbGVfYXBwZW5kKCkgLT4gdm9pZDoKdGVzdF9hcnJheV9tdWx0aXBsZV9hcHBlbmQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6NjQKICAgIC8vIGFyciA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgY2FsbHN1YiBfcHV5YV9saWIubWVtLm5ld19zbG90CiAgICBkdXAKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjY1CiAgICAvLyBhZGRfeChhcnIsIFVJbnQ2NCgxKSkKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgIGNhbGxzdWIgYWRkX3gKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo2NgogICAgLy8gYXJyLmFwcGVuZChVSW50NjQoMSkpCiAgICBkdXAKICAgIGxvYWRzCiAgICBpbnRjXzAgLy8gMQogICAgaXRvYgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICAvLyBhcnJheS91aW50NjQucHk6NjcKICAgIC8vIGFyci5hcHBlbmQoVUludDY0KDIpKQogICAgcHVzaGludCAyIC8vIDIKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgLy8gYXJyYXkvdWludDY0LnB5OjY4CiAgICAvLyBhcnIuYXBwZW5kKFVJbnQ2NCgzKSkKICAgIHB1c2hpbnQgMyAvLyAzCiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIHN3YXAKICAgIGRpZyAxCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo2OQogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gNAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYXJyYXlfdG9vX2xvbmcoKSAtPiB2b2lkOgp0ZXN0X2FycmF5X3Rvb19sb25nOgogICAgLy8gYXJyYXkvdWludDY0LnB5Ojc1LTc2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHRlc3RfYXJyYXlfdG9vX2xvbmcoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojc3CiAgICAvLyBhcnJheSA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgYnl0ZWNfMCAvLyAweAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojc4CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNTEyKToKICAgIGludGNfMiAvLyAwCgp0ZXN0X2FycmF5X3Rvb19sb25nX2Zvcl9oZWFkZXJAMToKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo3OAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDUxMik6CiAgICBmcmFtZV9kaWcgMQogICAgaW50YyA0IC8vIDUxMgogICAgPAogICAgYnogdGVzdF9hcnJheV90b29fbG9uZ19hZnRlcl9mb3JANAogICAgZnJhbWVfZGlnIDAKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo3OQogICAgLy8gYXJyYXkuYXBwZW5kKGkpCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojc4CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNTEyKToKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgdGVzdF9hcnJheV90b29fbG9uZ19mb3JfaGVhZGVyQDEKCnRlc3RfYXJyYXlfdG9vX2xvbmdfYWZ0ZXJfZm9yQDQ6CiAgICBmcmFtZV9kaWcgMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjgwCiAgICAvLyBhc3NlcnQgYXJyYXkubGVuZ3RoID09IDUxMiwgImFycmF5IGlzIGV4cGVjdGVkIGxlbmd0aCIKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgaW50YyA0IC8vIDUxMgogICAgPT0KICAgIGFzc2VydCAvLyBhcnJheSBpcyBleHBlY3RlZCBsZW5ndGgKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo4MgogICAgLy8gYXJyYXkuYXBwZW5kKFVJbnQ2NCg1MTIpKSAgIyB0aGlzIHdpbGwgZmFpbAogICAgaW50YyA0IC8vIDUxMgogICAgaXRvYgogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYXJyYXlfY29weV9hbmRfZXh0ZW5kKCkgLT4gdm9pZDoKdGVzdF9hcnJheV9jb3B5X2FuZF9leHRlbmQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6ODQtODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdGVzdF9hcnJheV9jb3B5X2FuZF9leHRlbmQoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojg2CiAgICAvLyBhcnJheSA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgYnl0ZWNfMCAvLyAweAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojg3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNSk6CiAgICBpbnRjXzIgLy8gMAoKdGVzdF9hcnJheV9jb3B5X2FuZF9leHRlbmRfZm9yX2hlYWRlckAxOgogICAgLy8gYXJyYXkvdWludDY0LnB5Ojg3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNSk6CiAgICBmcmFtZV9kaWcgMQogICAgaW50Y18zIC8vIDUKICAgIDwKICAgIGJ6IHRlc3RfYXJyYXlfY29weV9hbmRfZXh0ZW5kX2FmdGVyX2ZvckA0CiAgICBmcmFtZV9kaWcgMAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojg4CiAgICAvLyBhcnJheS5hcHBlbmQoaSkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBhcnJheS91aW50NjQucHk6ODcKICAgIC8vIGZvciBpIGluIHVyYW5nZSg1KToKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgdGVzdF9hcnJheV9jb3B5X2FuZF9leHRlbmRfZm9yX2hlYWRlckAxCgp0ZXN0X2FycmF5X2NvcHlfYW5kX2V4dGVuZF9hZnRlcl9mb3JANDoKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo5MQogICAgLy8gYXJyYXkuYXBwZW5kKFVJbnQ2NCg1KSkKICAgIGludGNfMyAvLyA1CiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo5MgogICAgLy8gYXNzZXJ0IGFycmF5Lmxlbmd0aCA9PSA2CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGR1cAogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo5MwogICAgLy8gYXNzZXJ0IGFycmF5Wy0xXSA9PSA1LCAiZXhwZWN0ZWQgNSIKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZGlnIDEKICAgIHN3YXAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzMgLy8gNQogICAgPT0KICAgIGFzc2VydCAvLyBleHBlY3RlZCA1CiAgICBkaWcgMQogICAgLy8gYXJyYXkvdWludDY0LnB5Ojk1CiAgICAvLyBhc3NlcnQgYXJyYXkyLmxlbmd0aCA9PSA1CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGR1cAogICAgaW50Y18zIC8vIDUKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weTo5NgogICAgLy8gYXNzZXJ0IGFycmF5MlstMV0gPT0gNCwgImV4cGVjdGVkIDQiCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgaW50Y18xIC8vIDgKICAgICoKICAgIGRpZyAxCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCA0IC8vIDQKICAgID09CiAgICBhc3NlcnQgLy8gZXhwZWN0ZWQgNAogICAgLy8gYXJyYXkvdWludDY0LnB5Ojk4CiAgICAvLyBhcnJheS5leHRlbmQoYXJyYXkyKQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICAvLyBhcnJheS91aW50NjQucHk6OTkKICAgIC8vIGFzc2VydCBhcnJheS5sZW5ndGggPT0gMTEKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgZHVwCiAgICBwdXNoaW50IDExIC8vIDExCiAgICA9PQogICAgYXNzZXJ0CiAgICB1bmNvdmVyIDIKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDAKICAgIC8vIGFzc2VydCBhcnJheTIubGVuZ3RoID09IDUKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGludGNfMyAvLyA1CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTAxCiAgICAvLyBhc3NlcnQgYXJyYXlbLTFdID09IDQsICJleHBlY3RlZCA0IgogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGludGNfMSAvLyA4CiAgICAqCiAgICBkaWcgMQogICAgc3dhcAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIDQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDIKICAgIC8vIGFzc2VydCBhcnJheVs0XSA9PSA0LCAiZXhwZWN0ZWQgNCIKICAgIGR1cAogICAgcHVzaGludCAzMiAvLyAzMgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIDQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDMKICAgIC8vIGFzc2VydCBhcnJheVs1XSA9PSA1LCAiZXhwZWN0ZWQgNCIKICAgIGR1cAogICAgcHVzaGludCA0MCAvLyA0MAogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMyAvLyA1CiAgICA9PQogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIDQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDQKICAgIC8vIGFzc2VydCBhcnJheVs2XSA9PSAwLCAiZXhwZWN0ZWQgNCIKICAgIHB1c2hpbnQgNDggLy8gNDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAhCiAgICBhc3NlcnQgLy8gZXhwZWN0ZWQgNAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5hcnJheS51aW50NjQuQ29udHJhY3QudGVzdF9hcnJheV9ldmFsdWF0aW9uX29yZGVyKCkgLT4gdm9pZDoKdGVzdF9hcnJheV9ldmFsdWF0aW9uX29yZGVyOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjEwOAogICAgLy8gYXJyID0gUmVmZXJlbmNlQXJyYXlbVUludDY0XSgpCiAgICBjYWxsc3ViIF9wdXlhX2xpYi5tZW0ubmV3X3Nsb3QKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMDkKICAgIC8vIGFyci5hcHBlbmQoVUludDY0KDMpKQogICAgcHVzaGludCAzIC8vIDMKICAgIGl0b2IKICAgIGRpZyAxCiAgICBzd2FwCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMTAKICAgIC8vIGFwcGVuZF9sZW5ndGhfYW5kX3JldHVybihhcnIpLmV4dGVuZChhcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4oYXJyKSkKICAgIGR1cAogICAgY2FsbHN1YiBhcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4KICAgIGRpZyAxCiAgICBjYWxsc3ViIGFwcGVuZF9sZW5ndGhfYW5kX3JldHVybgogICAgbG9hZHMKICAgIGRpZyAxCiAgICBsb2FkcwogICAgc3dhcAogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMTEKICAgIC8vIGFzc2VydCBhcnIubGVuZ3RoID09IDYKICAgIGR1cAogICAgbG9hZHMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMTIKICAgIC8vIGFzc2VydCBhcnJbMF0gPT0gMwogICAgZHVwCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTEzCiAgICAvLyBhc3NlcnQgYXJyWzFdID09IDEKICAgIGR1cAogICAgaW50Y18xIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjExNAogICAgLy8gYXNzZXJ0IGFyclsyXSA9PSAyCiAgICBkdXAKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDIgLy8gMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjExNQogICAgLy8gYXNzZXJ0IGFyclszXSA9PSAzCiAgICBkdXAKICAgIHB1c2hpbnQgMjQgLy8gMjQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjExNgogICAgLy8gYXNzZXJ0IGFycls0XSA9PSAxCiAgICBkdXAKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjExNwogICAgLy8gYXNzZXJ0IGFycls1XSA9PSAyCiAgICBwdXNoaW50IDQwIC8vIDQwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMTkKICAgIC8vIGFyclthcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4oYXJyKVswXV0gPSBhcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4oYXJyKVstMV0KICAgIGR1cAogICAgY2FsbHN1YiBhcHBlbmRfbGVuZ3RoX2FuZF9yZXR1cm4KICAgIGxvYWRzCiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgaW50Y18xIC8vIDgKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGNhbGxzdWIgYXBwZW5kX2xlbmd0aF9hbmRfcmV0dXJuCiAgICBsb2FkcwogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMgogICAgbG9hZHMKICAgIHN3YXAKICAgIGludGNfMSAvLyA4CiAgICAqCiAgICB1bmNvdmVyIDIKICAgIHJlcGxhY2UzCiAgICBzd2FwCiAgICBkaWcgMQogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6MTIwCiAgICAvLyBhc3NlcnQgYXJyLmxlbmd0aCA9PSA4CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGludGNfMSAvLyA4CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTIxCiAgICAvLyBhc3NlcnQgYXJyWzZdID09IDYKICAgIGR1cAogICAgcHVzaGludCA0OCAvLyA0OAogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNiAvLyA2CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTIyCiAgICAvLyBhc3NlcnQgYXJyWzddID09IDcKICAgIGR1cAogICAgcHVzaGludCA1NiAvLyA1NgogICAgZXh0cmFjdF91aW50NjQKICAgIHB1c2hpbnQgNyAvLyA3CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTIzCiAgICAvLyBhc3NlcnQgYXJyWzNdID09IDYKICAgIHB1c2hpbnQgMjQgLy8gMjQKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDYgLy8gNgogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy5hcnJheS51aW50NjQuQ29udHJhY3QudGVzdF9hcnJheV9hc3NpZ25tZW50X21heGltdW1fY3Vyc2FnZSgpIC0+IHZvaWQ6CnRlc3RfYXJyYXlfYXNzaWdubWVudF9tYXhpbXVtX2N1cnNhZ2U6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTI3CiAgICAvLyBhcnIgPSBSZWZlcmVuY2VBcnJheVtVSW50NjRdKCkKICAgIGNhbGxzdWIgX3B1eWFfbGliLm1lbS5uZXdfc2xvdAogICAgLy8gYXJyYXkvdWludDY0LnB5OjEyOAogICAgLy8gYXJyLmFwcGVuZChVSW50NjQoMykpCiAgICBwdXNoaW50IDMgLy8gMwogICAgaXRvYgogICAgZGlnIDEKICAgIHN3YXAKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjEyOQogICAgLy8gYXBwZW5kX2xlbmd0aF9hbmRfcmV0dXJuKGFycilbMF0gPSBVSW50NjQoNDIpCiAgICBkdXAKICAgIGNhbGxzdWIgYXBwZW5kX2xlbmd0aF9hbmRfcmV0dXJuCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBpdG9iCiAgICBkaWcgMQogICAgbG9hZHMKICAgIHN3YXAKICAgIHJlcGxhY2UyIDAKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjEzMAogICAgLy8gYXNzZXJ0IGFyci5sZW5ndGggPT0gMgogICAgbG9hZHMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxMzEKICAgIC8vIGFzc2VydCBhcnJbMF0gPT0gNDIKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTMyCiAgICAvLyBhc3NlcnQgYXJyWzFdID09IDEKICAgIGludGNfMSAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfYWxsb2NhdGlvbnMobnVtOiB1aW50NjQpIC0+IHZvaWQ6CnRlc3RfYWxsb2NhdGlvbnM6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTM0LTEzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB0ZXN0X2FsbG9jYXRpb25zKHNlbGYsIG51bTogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBhcnJheS91aW50NjQucHk6MTM2CiAgICAvLyBmb3IgX2kgaW4gdXJhbmdlKG51bSk6CiAgICBpbnRjXzIgLy8gMAoKdGVzdF9hbGxvY2F0aW9uc19mb3JfaGVhZGVyQDE6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTM2CiAgICAvLyBmb3IgX2kgaW4gdXJhbmdlKG51bSk6CiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICBieiB0ZXN0X2FsbG9jYXRpb25zX2FmdGVyX2ZvckA0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTM3CiAgICAvLyBhbGxvY190ZXN0ID0gUmVmZXJlbmNlQXJyYXlbVUludDY0XSgpCiAgICBjYWxsc3ViIF9wdXlhX2xpYi5tZW0ubmV3X3Nsb3QKICAgIGR1cAogICAgYnl0ZWNfMCAvLyAweAogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6MTM4CiAgICAvLyBhZGRfeChhbGxvY190ZXN0LCBVSW50NjQoMSkpCiAgICBpbnRjXzAgLy8gMQogICAgY2FsbHN1YiBhZGRfeAogICAgLy8gYXJyYXkvdWludDY0LnB5OjEzNgogICAgLy8gZm9yIF9pIGluIHVyYW5nZShudW0pOgogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgdGVzdF9hbGxvY2F0aW9uc19mb3JfaGVhZGVyQDEKCnRlc3RfYWxsb2NhdGlvbnNfYWZ0ZXJfZm9yQDQ6CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFycmF5LnVpbnQ2NC5Db250cmFjdC50ZXN0X2l0ZXJhdGlvbigpIC0+IHZvaWQ6CnRlc3RfaXRlcmF0aW9uOgogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0MC0xNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdGVzdF9pdGVyYXRpb24oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgaW50Y18yIC8vIDAKICAgIGR1cAogICAgYnl0ZWNfMCAvLyAiIgogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0MgogICAgLy8gYXJyID0gUmVmZXJlbmNlQXJyYXlbVUludDY0XSgpCiAgICBkdXBuIDcKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNDMKICAgIC8vIGZvciB2YWwgaW4gdXJhbmdlKDUpOgogICAgaW50Y18yIC8vIDAKCnRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJAMToKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNDMKICAgIC8vIGZvciB2YWwgaW4gdXJhbmdlKDUpOgogICAgZnJhbWVfZGlnIDEwCiAgICBpbnRjXzMgLy8gNQogICAgPAogICAgYnogdGVzdF9pdGVyYXRpb25fYWZ0ZXJfZm9yQDQKICAgIGZyYW1lX2RpZyA5CiAgICAvLyBhcnJheS91aW50NjQucHk6MTQ0CiAgICAvLyBhcnIuYXBwZW5kKHZhbCkKICAgIGZyYW1lX2RpZyAxMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGZyYW1lX2J1cnkgOQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0MwogICAgLy8gZm9yIHZhbCBpbiB1cmFuZ2UoNSk6CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxMAogICAgYiB0ZXN0X2l0ZXJhdGlvbl9mb3JfaGVhZGVyQDEKCnRlc3RfaXRlcmF0aW9uX2FmdGVyX2ZvckA0OgogICAgZnJhbWVfZGlnIDkKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNDUKICAgIC8vIGFzc2VydCBhcnIubGVuZ3RoID09IDUsICJleHBlY3RlZCBhcnJheSBvZiBsZW5ndGggNSIKICAgIGxlbgogICAgaW50Y18xIC8vIDgKICAgIC8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICBpbnRjXzMgLy8gNQogICAgPT0KICAgIGFzc2VydCAvLyBleHBlY3RlZCBhcnJheSBvZiBsZW5ndGggNQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0Ny0xNDgKICAgIC8vICMgaXRlcmF0ZQogICAgLy8gbGFzdCA9IFVJbnQ2NCgwKQogICAgaW50Y18yIC8vIDAKICAgIGZyYW1lX2J1cnkgNwogICAgaW50Y18yIC8vIDAKICAgIGZyYW1lX2J1cnkgNgoKdGVzdF9pdGVyYXRpb25fZm9yX2hlYWRlckA1OgogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0OQogICAgLy8gZm9yIHZhbHVlIGluIGFycjoKICAgIGZyYW1lX2RpZyA2CiAgICBmcmFtZV9kaWcgMgogICAgPAogICAgYnogdGVzdF9pdGVyYXRpb25fYWZ0ZXJfZm9yQDgKICAgIGZyYW1lX2RpZyA5CiAgICBmcmFtZV9kaWcgNgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNTAKICAgIC8vIGFzc2VydCB2YWx1ZSA+PSBsYXN0LCAiYXJyYXkgaXMgbm90IHNvcnRlZCIKICAgIGR1cAogICAgZnJhbWVfZGlnIDcKICAgID49CiAgICBhc3NlcnQgLy8gYXJyYXkgaXMgbm90IHNvcnRlZAogICAgc3dhcAogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfYnVyeSA3CiAgICBiIHRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJANQoKdGVzdF9pdGVyYXRpb25fYWZ0ZXJfZm9yQDg6CiAgICBmcmFtZV9kaWcgOQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE1My0xNTQKICAgIC8vICMgZW51bWVyYXRlCiAgICAvLyBmb3IgaWR4LCB2YWx1ZSBpbiB1ZW51bWVyYXRlKGFycik6CiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBmcmFtZV9idXJ5IDMKICAgIGludGNfMiAvLyAwCiAgICBmcmFtZV9idXJ5IDUKCnRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJAOToKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNTMtMTU0CiAgICAvLyAjIGVudW1lcmF0ZQogICAgLy8gZm9yIGlkeCwgdmFsdWUgaW4gdWVudW1lcmF0ZShhcnIpOgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyAzCiAgICA8CiAgICBieiB0ZXN0X2l0ZXJhdGlvbl9hZnRlcl9mb3JAMTIKICAgIGZyYW1lX2RpZyA5CiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNTUKICAgIC8vIGFzc2VydCB2YWx1ZSA9PSBpZHgsICJpbmNvcnJlY3QgYXJyYXkgdmFsdWUiCiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBpbmNvcnJlY3QgYXJyYXkgdmFsdWUKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDUKICAgIGIgdGVzdF9pdGVyYXRpb25fZm9yX2hlYWRlckA5Cgp0ZXN0X2l0ZXJhdGlvbl9hZnRlcl9mb3JAMTI6CiAgICBmcmFtZV9kaWcgOQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE1Ny0xNTgKICAgIC8vICMgcmV2ZXJzZQogICAgLy8gZm9yIHZhbHVlIGluIHJldmVyc2VkKGFycik6CiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBmcmFtZV9idXJ5IDgKCnRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJAMTM6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTU3LTE1OAogICAgLy8gIyByZXZlcnNlCiAgICAvLyBmb3IgdmFsdWUgaW4gcmV2ZXJzZWQoYXJyKToKICAgIGZyYW1lX2RpZyA4CiAgICBieiB0ZXN0X2l0ZXJhdGlvbl9hZnRlcl9mb3JAMTYKICAgIGZyYW1lX2RpZyA4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDgKICAgIGZyYW1lX2RpZyA5CiAgICBzd2FwCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNTkKICAgIC8vIGFzc2VydCB2YWx1ZSA8PSBsYXN0LCAiYXJyYXkgaXMgbm90IHNvcnRlZCIKICAgIGR1cAogICAgZnJhbWVfZGlnIDcKICAgIDw9CiAgICBhc3NlcnQgLy8gYXJyYXkgaXMgbm90IHNvcnRlZAogICAgZnJhbWVfYnVyeSA3CiAgICBiIHRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJAMTMKCnRlc3RfaXRlcmF0aW9uX2FmdGVyX2ZvckAxNjoKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNjIKICAgIC8vIGFyYzRfYXJyID0gYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5VSW50NjRdKCkKICAgIHB1c2hieXRlcyAweDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjE0MgogICAgLy8gYXJyID0gUmVmZXJlbmNlQXJyYXlbVUludDY0XSgpCiAgICBieXRlY18wIC8vIDB4CiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNjQKICAgIC8vIGZvciBpIGluIHVyYW5nZSg1KToKICAgIGludGNfMiAvLyAwCiAgICBmcmFtZV9idXJ5IDQKCnRlc3RfaXRlcmF0aW9uX2Zvcl9oZWFkZXJAMTc6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTY0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoNSk6CiAgICBmcmFtZV9kaWcgNAogICAgaW50Y18zIC8vIDUKICAgIDwKICAgIGJ6IHRlc3RfaXRlcmF0aW9uX2FmdGVyX2ZvckAyMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjE2NQogICAgLy8gYXJjNF9hcnIuYXBwZW5kKGFyYzQuVUludDY0KGkpKQogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY292ZXIgMgogICAgZGlnIDEKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgdW5jb3ZlciAyCiAgICBpbnRjXzIgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9kaWcgMQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE2NgogICAgLy8gbmF0aXZlX2Fyci5hcHBlbmQoYXJjNC5VSW50NjQoaSkpCiAgICBzd2FwCiAgICBjb25jYXQgLy8gb24gZXJyb3I6IG1heCBhcnJheSBsZW5ndGggZXhjZWVkZWQKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE2NAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKDUpOgogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNAogICAgYiB0ZXN0X2l0ZXJhdGlvbl9mb3JfaGVhZGVyQDE3Cgp0ZXN0X2l0ZXJhdGlvbl9hZnRlcl9mb3JAMjA6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTY3CiAgICAvLyBjb21iaW5lZF9hcnIgPSBhcmM0X2FyciArIG5hdGl2ZV9hcnIKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMQogICAgY29uY2F0IC8vIG9uIGVycm9yOiBtYXggYXJyYXkgbGVuZ3RoIGV4Y2VlZGVkCiAgICBkdXAKICAgIGV4dHJhY3QgMiAwCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcmVwbGFjZTIgMAogICAgLy8gYXJyYXkvdWludDY0LnB5OjE2OAogICAgLy8gYXNzZXJ0IGNvbWJpbmVkX2Fyci5sZW5ndGggPT0gMTAKICAgIGR1cAogICAgaW50Y18yIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTY5CiAgICAvLyBhc3NlcnQgY29tYmluZWRfYXJyWzBdID09IDAKICAgIGR1cAogICAgZXh0cmFjdCAyIDgKICAgIGJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBiPT0KICAgIGFzc2VydAogICAgLy8gYXJyYXkvdWludDY0LnB5OjE3MAogICAgLy8gYXNzZXJ0IGNvbWJpbmVkX2Fycls0XSA9PSA0CiAgICBkdXAKICAgIGV4dHJhY3QgMzQgOAogICAgYnl0ZWNfMyAvLyAweDAwMDAwMDAwMDAwMDAwMDQKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTcxCiAgICAvLyBhc3NlcnQgY29tYmluZWRfYXJyWzVdID09IDAKICAgIGR1cAogICAgZXh0cmFjdCA0MiA4CiAgICBieXRlY18yIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNzIKICAgIC8vIGFzc2VydCBjb21iaW5lZF9hcnJbOV0gPT0gNAogICAgZXh0cmFjdCA3NCA4CiAgICBieXRlY18zIC8vIDB4MDAwMDAwMDAwMDAwMDAwNAogICAgYj09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMuYXJyYXkudWludDY0LkNvbnRyYWN0LnRlc3RfcXVpY2tzb3J0KCkgLT4gdm9pZDoKdGVzdF9xdWlja3NvcnQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTc0LTE3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB0ZXN0X3F1aWNrc29ydChzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBieXRlY18wIC8vICIiCiAgICBkdXBuIDIKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxNzYtMTc3CiAgICAvLyAjIGNyZWF0ZSBwc2V1ZG8gcmFuZG9tIGFycmF5IGZyb20gc2VuZGVyIGFkZHJlc3MKICAgIC8vIHJuZCA9IFJlZmVyZW5jZUFycmF5W1VJbnQ2NF0oKQogICAgY2FsbHN1YiBfcHV5YV9saWIubWVtLm5ld19zbG90CiAgICBkdXAKICAgIGJ5dGVjXzAgLy8gMHgKICAgIHN0b3JlcwogICAgLy8gYXJyYXkvdWludDY0LnB5OjE3OAogICAgLy8gZm9yIGIgaW4gVHhuLnNlbmRlci5ieXRlczoKICAgIHR4biBTZW5kZXIKICAgIGludGNfMiAvLyAwCgp0ZXN0X3F1aWNrc29ydF9mb3JfaGVhZGVyQDE6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTc4CiAgICAvLyBmb3IgYiBpbiBUeG4uc2VuZGVyLmJ5dGVzOgogICAgZnJhbWVfZGlnIDUKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIDwKICAgIGJ6IHRlc3RfcXVpY2tzb3J0X2FmdGVyX2ZvckA0CiAgICAvLyBhcnJheS91aW50NjQucHk6MTc5CiAgICAvLyBybmQuYXBwZW5kKG9wLmJ0b2koYikpCiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgZ2V0Ynl0ZQogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgY292ZXIgMgogICAgbG9hZHMKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdCAvLyBvbiBlcnJvcjogbWF4IGFycmF5IGxlbmd0aCBleGNlZWRlZAogICAgc3RvcmVzCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA1CiAgICBiIHRlc3RfcXVpY2tzb3J0X2Zvcl9oZWFkZXJAMQoKdGVzdF9xdWlja3NvcnRfYWZ0ZXJfZm9yQDQ6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTgwCiAgICAvLyBhc3NlcnQgcm5kLmxlbmd0aCA9PSAzMiwgImV4cGVjdGVkIGFycmF5IG9mIGxlbmd0aCAzMiIKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIGxvYWRzCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBkdXAKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgID09CiAgICBhc3NlcnQgLy8gZXhwZWN0ZWQgYXJyYXkgb2YgbGVuZ3RoIDMyCiAgICAvLyBhcnJheS91aW50NjQucHk6MTgyLTE4MwogICAgLy8gIyBzb3J0IHRoZSBhcnJheQogICAgLy8gcXVpY2tzb3J0X3dpbmRvdyhybmQsIFVJbnQ2NCgwKSwgcm5kLmxlbmd0aCAtIDEpCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZGlnIDEKICAgIGludGNfMiAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgcXVpY2tzb3J0X3dpbmRvdwogICAgLy8gYXJyYXkvdWludDY0LnB5OjE4NS0xODYKICAgIC8vICMgYXJyYXkgc2hvdWxkIG5vdyBiZSBpbiBhc2NlbmRpbmcgb3JkZXIKICAgIC8vIGxhc3QgPSBVSW50NjQoMCkKICAgIGludGNfMiAvLyAwCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxODcKICAgIC8vIGZvciB2YWx1ZSBpbiBybmQ6CiAgICBsb2FkcwogICAgbGVuCiAgICBpbnRjXzEgLy8gOAogICAgLwogICAgZnJhbWVfYnVyeSAwCiAgICBpbnRjXzIgLy8gMAogICAgZnJhbWVfYnVyeSAxCgp0ZXN0X3F1aWNrc29ydF9mb3JfaGVhZGVyQDU6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTg3CiAgICAvLyBmb3IgdmFsdWUgaW4gcm5kOgogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICA8CiAgICBieiB0ZXN0X3F1aWNrc29ydF9hZnRlcl9mb3JAOAogICAgZnJhbWVfZGlnIDMKICAgIGxvYWRzCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzEgLy8gOAogICAgKgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxODgKICAgIC8vIGFzc2VydCB2YWx1ZSA+PSBsYXN0LCAiYXJyYXkgaXMgbm90IHNvcnRlZCIKICAgIGR1cAogICAgZnJhbWVfZGlnIDIKICAgID49CiAgICBhc3NlcnQgLy8gYXJyYXkgaXMgbm90IHNvcnRlZAogICAgc3dhcAogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAyCiAgICBiIHRlc3RfcXVpY2tzb3J0X2Zvcl9oZWFkZXJANQoKdGVzdF9xdWlja3NvcnRfYWZ0ZXJfZm9yQDg6CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLmFycmF5LnVpbnQ2NC5Db250cmFjdC50ZXN0X3Vub2JzZXJ2ZWRfd3JpdGUoKSAtPiB2b2lkOgp0ZXN0X3Vub2JzZXJ2ZWRfd3JpdGU6CiAgICAvLyBhcnJheS91aW50NjQucHk6MTkzCiAgICAvLyBhcnIgPSBjcmVhdGVfYXJyYXkoKQogICAgY2FsbHN1YiBjcmVhdGVfYXJyYXkKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxOTQKICAgIC8vIGxhc3QgPSBhcnIubGVuZ3RoIC0gMQogICAgZHVwCiAgICBsb2FkcwogICAgZHVwCiAgICBsZW4KICAgIGludGNfMSAvLyA4CiAgICAvCiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgLy8gYXJyYXkvdWludDY0LnB5OjE5NQogICAgLy8gYXJyW2xhc3RdID0gVUludDY0KDApICAjIHdyaXRlCiAgICBpbnRjXzIgLy8gMAogICAgaXRvYgogICAgc3dhcAogICAgaW50Y18xIC8vIDgKICAgICoKICAgIHVuY292ZXIgMgogICAgZGlnIDEKICAgIHVuY292ZXIgMwogICAgcmVwbGFjZTMKICAgIGRpZyAyCiAgICBzd2FwCiAgICBzdG9yZXMKICAgIC8vIGFycmF5L3VpbnQ2NC5weToxOTYKICAgIC8vIGFzc2VydF9sYXN0X2lzX3plcm8oYXJyKQogICAgZGlnIDEKICAgIGNhbGxzdWIgYXNzZXJ0X2xhc3RfaXNfemVybwogICAgLy8gYXJyYXkvdWludDY0LnB5OjE5NwogICAgLy8gYXJyW2xhc3RdID0gVUludDY0KDEpICAjIHdyaXRlCiAgICBpbnRjXzAgLy8gMQogICAgaXRvYgogICAgZGlnIDIKICAgIGxvYWRzCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgdW5jb3ZlciAyCiAgICBkaWcgMQogICAgc3RvcmVzCiAgICAvLyBhcnJheS91aW50NjQucHk6MTk4CiAgICAvLyBhc3NlcnQgYXJyW2xhc3RdID09IDEKICAgIHN3YXAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnRjXzAgLy8gMQogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gX3B1eWFfbGliLm1lbS5uZXdfc2xvdCgpIC0+IHVpbnQ2NDoKX3B1eWFfbGliLm1lbS5uZXdfc2xvdDoKICAgIGxvYWQgMAogICAgYml0bGVuCiAgICBsb2FkIDAKICAgIHB1c2hpbnQgMjU2IC8vIDI1NgogICAgZGlnIDIKICAgIC0KICAgIGludGNfMiAvLyAwCiAgICBzZXRiaXQgLy8gb24gZXJyb3I6IG5vIGF2YWlsYWJsZSBzbG90cwogICAgc3RvcmUgMAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "methods": [
            {
                "name": "test_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_extend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_multiple_append",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "overhead",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_too_long",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_copy_and_extend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_evaluation_order",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_assignment_maximum_cursage",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_allocations",
                "args": [
                    {
                        "type": "uint64",
                        "name": "num"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_iteration",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_quicksort",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_unobserved_write",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}