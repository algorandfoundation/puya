{
    "hints": {
        "test_array()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_extend()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_multiple_append()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "overhead()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_too_long()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_copy_and_extend()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_array_evaluation_order()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_allocations(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_iteration()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_quicksort()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Contract",
        "methods": [
            {
                "name": "test_array",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_extend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_multiple_append",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "overhead",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_too_long",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_copy_and_extend",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_array_evaluation_order",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_allocations",
                "args": [
                    {
                        "type": "uint64",
                        "name": "num"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_iteration",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_quicksort",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}