main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array()void" => block@3, method "test_array_extend()void" => block@4, method "test_array_multiple_append()void" => block@5, method "overhead()void" => block@6, method "test_array_too_long()void" => block@7, method "test_array_copy_and_extend()void" => block@8, method "test_array_evaluation_order()void" => block@9, method "test_array_assignment_maximum_cursage()void" => block@10, method "test_allocations(uint64)void" => block@11, method "test_iteration()void" => block@12, method "test_quicksort()void" => block@13, method "test_unobserved_write()void" => block@14, * => block@21}
    block@3: // test_array_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@22
    block@4: // test_array_extend_route_L50
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@22
    block@5: // test_array_multiple_append_route_L62
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_multiple_append()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@22
    block@6: // overhead_route_L71
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@22
    block@7: // test_array_too_long_route_L75
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_too_long()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@22
    block@8: // test_array_copy_and_extend_route_L84
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_copy_and_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@22
    block@9: // test_array_evaluation_order_route_L106
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_evaluation_order()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@22
    block@10: // test_array_assignment_maximum_cursage_route_L125
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@22
    block@11: // test_allocations_route_L134
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (! tmp%35#0)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        (assert tmp%37#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.uint64.Contract.test_allocations(tmp%39#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@22
    block@12: // test_iteration_route_L140
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_iteration()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@22
    block@13: // test_quicksort_route_L174
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_quicksort()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#10: bool = 1u
        goto block@22
    block@14: // test_unobserved_write_route_L191
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_unobserved_write()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#11: bool = 1u
        goto block@22
    block@17: // bare_routing_L13
        let tmp%52#0: uint64 = (txn OnCompletion)
        goto tmp%52#0 ? block@21 : block@18
    block@18: // __algopy_default_create_L1
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // can only call when creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#12: bool = 1u
        goto block@22
    block@21: // after_if_else_L13
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#13: bool = 0u
        goto block@22
    block@22: // after_inlined_test_cases.array.uint64.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.uint64.Contract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.uint64.Contract.__puya_arc4_router__%0#1 <- block@4, test_cases.array.uint64.Contract.__puya_arc4_router__%0#2 <- block@5, test_cases.array.uint64.Contract.__puya_arc4_router__%0#3 <- block@6, test_cases.array.uint64.Contract.__puya_arc4_router__%0#4 <- block@7, test_cases.array.uint64.Contract.__puya_arc4_router__%0#5 <- block@8, test_cases.array.uint64.Contract.__puya_arc4_router__%0#6 <- block@9, test_cases.array.uint64.Contract.__puya_arc4_router__%0#7 <- block@10, test_cases.array.uint64.Contract.__puya_arc4_router__%0#8 <- block@11, test_cases.array.uint64.Contract.__puya_arc4_router__%0#9 <- block@12, test_cases.array.uint64.Contract.__puya_arc4_router__%0#10 <- block@13, test_cases.array.uint64.Contract.__puya_arc4_router__%0#11 <- block@14, test_cases.array.uint64.Contract.__puya_arc4_router__%0#12 <- block@18, test_cases.array.uint64.Contract.__puya_arc4_router__%0#13 <- block@21)
        return tmp%0#0

subroutine test_cases.array.uint64.quicksort_window(arr: Encoded(uint64[])*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L201
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%1#0 8u)
        let pivot#0: uint64 = (extract_uint64 slot_contents%0#0 aggregate%bytes_offset%0#1)
        goto block@1
    block@1: // while_top_L208
        let arr#2: Encoded(uint64[])* = φ(arr#0 <- block@0, arr#2 <- block@14)
        let left#3: uint64 = φ(window_left#0 <- block@0, left#5 <- block@14)
        let right#4: uint64 = φ(window_right#0 <- block@0, right#5 <- block@14)
        goto block@3
    block@3: // while_top_L210
        let left#1: uint64 = φ(left#3 <- block@1, left#2 <- block@4)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#2)
        let aggregate%bytes_offset%1#1: uint64 = (* left#1 8u)
        let values%1#0: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%1#1)
        let tmp%2#0: bool = (< values%1#0 pivot#0)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // while_body_L211
        let left#2: uint64 = (+ left#1 1u)
        goto block@3
    block@5: // after_while_L210
        goto block@6
    block@6: // while_top_L213
        let right#1: uint64 = φ(right#4 <- block@5, right#2 <- block@9)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#2)
        let aggregate%bytes_offset%2#1: uint64 = (* right#1 8u)
        let values%2#0: uint64 = (extract_uint64 slot_contents%2#0 aggregate%bytes_offset%2#1)
        let tmp%4#0: bool = (< pivot#0 values%2#0)
        goto tmp%4#0 ? block@7 : block@10
    block@7: // while_body_L215
        goto right#1 ? block@9 : block@21
    block@9: // after_if_else_L215
        let right#2: uint64 = (- right#1 1u)
        goto block@6
    block@10: // after_while_L213
        let tmp%7#0: bool = (< left#1 right#1)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L221
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#2)
        let aggregate%encoded_element%3#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let aggregate%encoded_element%4#1: bytes = (extract3 slot_contents%3#0 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%3#0 aggregate%bytes_offset%1#1 aggregate%encoded_element%3#1)
        let aggregate%updated_array%1#1: bytes = (replace3 aggregate%updated_array%0#1 aggregate%bytes_offset%2#1 aggregate%encoded_element%4#1)
        store(arr#2, aggregate%updated_array%1#1)
        let left#5: uint64 = (+ left#1 1u)
        goto right#1 ? block@13 : block@12
    block@12: // if_body_L225
        goto block@22
    block@13: // after_if_else_L224
        let right#5: uint64 = (- right#1 1u)
        let tmp%11#0: bool = (<= left#5 right#5)
        goto tmp%11#0 ? block@14 : block@15
    block@14: // if_body_L229
        goto block@1
    block@15: // after_if_else_L228
        goto block@22
    block@16: // after_if_else_L220
        let tmp%12#0: bool = (== left#1 right#1)
        goto tmp%12#0 ? block@17 : block@21
    block@17: // if_body_L235
        let left#6: uint64 = (+ left#1 1u)
        goto right#1 ? block@18 : block@19
    block@18: // if_body_L238
        let right#6: uint64 = (- right#1 1u)
        goto block@19
    block@19: // after_if_else_L237
        let right#8: uint64 = φ(right#1 <- block@17, right#6 <- block@18)
        goto block@22
    block@21: // L213
        goto block@22
    block@22: // after_while_L208
        let right#7: uint64 = φ(right#1 <- block@12, right#5 <- block@15, right#8 <- block@19, right#1 <- block@21)
        let left#8: uint64 = φ(left#5 <- block@12, left#5 <- block@15, left#6 <- block@19, left#1 <- block@21)
        let tmp%16#0: bool = (< window_left#0 right#7)
        goto tmp%16#0 ? block@23 : block@24
    block@23: // if_body_L247
        test_cases.array.uint64.quicksort_window(arr#2, window_left#0, right#7)
        goto block@24
    block@24: // after_if_else_L246
        let tmp%17#0: bool = (< left#8 window_right#0)
        goto tmp%17#0 ? block@25 : block@26
    block@25: // if_body_L250
        test_cases.array.uint64.quicksort_window(arr#2, left#8, window_right#0)
        goto block@26
    block@26: // after_if_else_L249
        return 

subroutine test_cases.array.uint64.create_array() -> Encoded(uint64[])*:
    block@0: // L253
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L256
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L257
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L256
        return arr#0

subroutine test_cases.array.uint64.assert_last_is_zero(arr: Encoded(uint64[])*) -> void:
    block@0: // L261
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%0#0: uint64 = (- array_len%0#0 1u)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%0#0 8u)
        let values%0#0: uint64 = (extract_uint64 slot_contents%0#0 aggregate%bytes_offset%0#1)
        let tmp%1#0: bool = (! values%0#0)
        (assert tmp%1#0)
        return 

subroutine test_cases.array.uint64.add_x(arr: Encoded(uint64[])*, x: uint64) -> void:
    block@0: // L273
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L275
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L276
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L275
        return 

subroutine test_cases.array.uint64.append_length_and_return(arr: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L287
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob array_len%0#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        return arr#0

subroutine test_cases.array.uint64.Contract.test_array() -> void:
    block@0: // L14
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x000000000000002a)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%3#0: uint64 = (len slot_contents%5#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let tmp%5#0: bool = (== array_len%3#0 6u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (- array_len%3#0 1u)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%6#0 8u)
        let values%1#0: uint64 = (extract_uint64 slot_contents%5#0 aggregate%bytes_offset%1#1)
        let tmp%7#0: bool = (== values%1#0 4u)
        (assert tmp%7#0)
        let expected#0: uint64 = 4u
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L281
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let expected#1: uint64 = φ(expected#0 <- block@0, expected#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L282
        let slot_contents%0#1: Encoded(uint64[]) = load(arr#0)
        let len%0#0: uint64 = (len slot_contents%0#1)
        let sub%0#0: uint64 = (- len%0#0 8u)
        let data%0#0: bytes = (substring3 slot_contents%0#1 sub%0#0 len%0#0)
        let extract%0#0: bytes = (extract3 slot_contents%0#1 0u sub%0#0)
        let popped#0: uint64 = (btoi data%0#0)
        store(arr#0, extract%0#0)
        let tmp%1#1: bool = (== popped#0 expected#1)
        (assert tmp%1#1)
        let expected#2: uint64 = (- expected#1 1u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@4: // after_for_L281
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%5#0: uint64 = (len slot_contents%8#0)
        let array_len%5#0: uint64 = (/ bytes_len%5#0 8u)
        let tmp%8#0: bool = (== array_len%5#0 3u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (- array_len%5#0 1u)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%9#0 8u)
        let values%2#0: uint64 = (extract_uint64 slot_contents%8#0 aggregate%bytes_offset%2#1)
        let tmp%10#0: bool = (== values%2#0 1u)
        (assert tmp%10#0)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%8#0 0x000000000000002b) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let bytes_len%7#0: uint64 = (len concat%1#0)
        let array_len%7#0: uint64 = (/ bytes_len%7#0 8u)
        let tmp%12#0: bool = (== array_len%7#0 4u)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = (- array_len%7#0 1u)
        let aggregate%bytes_offset%3#1: uint64 = (* tmp%13#0 8u)
        let values%3#0: uint64 = (extract_uint64 concat%1#0 aggregate%bytes_offset%3#1)
        let tmp%14#0: bool = (== values%3#0 43u)
        (assert tmp%14#0)
        let values%4#0: uint64 = (extract_uint64 concat%1#0 0u)
        let tmp%15#0: bool = (== values%4#0 42u)
        (assert tmp%15#0)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let slot_contents%16#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%9#0: uint64 = (len slot_contents%16#0)
        let array_len%9#0: uint64 = (/ bytes_len%9#0 8u)
        let tmp%16#0: bool = (== array_len%9#0 14u)
        (assert tmp%16#0)
        let tmp%17#0: uint64 = (- array_len%9#0 1u)
        let aggregate%bytes_offset%5#1: uint64 = (* tmp%17#0 8u)
        let values%5#0: uint64 = (extract_uint64 slot_contents%16#0 aggregate%bytes_offset%5#1)
        let tmp%18#0: bool = (== values%5#0 9u)
        (assert tmp%18#0)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%16#0 0x000000000000002c) // on error: max array length exceeded
        let bytes_len%11#0: uint64 = (len concat%2#0)
        let array_len%11#0: uint64 = (/ bytes_len%11#0 8u)
        let tmp%20#0: bool = (== array_len%11#0 15u)
        (assert tmp%20#0)
        let tmp%21#0: uint64 = (- array_len%11#0 1u)
        let aggregate%bytes_offset%6#1: uint64 = (* tmp%21#0 8u)
        let values%6#0: uint64 = (extract_uint64 concat%2#0 aggregate%bytes_offset%6#1)
        let tmp%22#0: bool = (== values%6#0 44u)
        (assert tmp%22#0)
        let concat%0#1: Encoded(uint64[]) = (concat concat%2#0 0x0000000000000063) // on error: max array length exceeded
        let concat%1#1: Encoded(uint64[]) = (concat concat%0#1 0x0000000000000064) // on error: max array length exceeded
        let values%7#0: uint64 = (extract_uint64 concat%1#1 0u)
        let tmp%24#0: uint64 = (+ values%7#0 2u)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob tmp%24#0)
        let aggregate%updated_array%0#1: bytes = ((replace2 0) concat%1#1 aggregate%val_as_bytes%5#1)
        store(arr#0, aggregate%updated_array%0#1)
        let bytes_len%13#0: uint64 = (len aggregate%updated_array%0#1)
        let array_len%13#0: uint64 = (/ bytes_len%13#0 8u)
        let tmp%25#0: bool = (== array_len%13#0 17u)
        (assert tmp%25#0)
        let values%8#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 0u)
        let tmp%26#0: bool = (== values%8#0 44u)
        (assert tmp%26#0)
        let tmp%27#0: uint64 = (- array_len%13#0 2u)
        let aggregate%bytes_offset%10#1: uint64 = (* tmp%27#0 8u)
        let values%9#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 aggregate%bytes_offset%10#1)
        let tmp%28#0: bool = (== values%9#0 99u)
        (assert tmp%28#0)
        let tmp%29#0: uint64 = (- array_len%13#0 1u)
        let aggregate%bytes_offset%11#1: uint64 = (* tmp%29#0 8u)
        let values%10#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 aggregate%bytes_offset%11#1)
        let tmp%30#0: bool = (== values%10#0 100u)
        (assert tmp%30#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_extend() -> void:
    block@0: // L50
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let arr2#0: Encoded(uint64[])* = new()
        store(arr2#0, 0x000000000000000100000000000000020000000000000003)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let concat%3#0: Encoded(uint64[]) = (concat slot_contents%4#0 0x000000000000000100000000000000020000000000000003) // on error: max array length exceeded
        store(arr#0, concat%3#0)
        let bytes_len%1#0: uint64 = (len concat%3#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%3#0: bool = (== array_len%1#0 4u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_multiple_append() -> void:
    block@0: // L62
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 0x0000000000000001) // on error: max array length exceeded
        let concat%1#0: Encoded(uint64[]) = (concat concat%0#0 0x0000000000000002) // on error: max array length exceeded
        let concat%2#0: Encoded(uint64[]) = (concat concat%1#0 0x0000000000000003) // on error: max array length exceeded
        store(arr#0, concat%2#0)
        let bytes_len%0#0: uint64 = (len concat%2#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%3#0: bool = (== array_len%0#0 4u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_too_long() -> void:
    block@0: // L75
        let array#0: Encoded(uint64[])* = new()
        store(array#0, 0x)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L78
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 512u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L79
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(array#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L78
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 512u)
        (assert tmp%1#0) // array is expected length
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 0x0000000000000200) // on error: max array length exceeded
        store(array#0, concat%1#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_copy_and_extend() -> void:
    block@0: // L84
        let array#0: Encoded(uint64[])* = new()
        store(array#0, 0x)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L87
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L88
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(array#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L87
        let array2#0: Encoded(uint64[])* = new()
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        store(array2#0, slot_contents%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(array#0)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 0x0000000000000005) // on error: max array length exceeded
        store(array#0, concat%1#0)
        let bytes_len%0#0: uint64 = (len concat%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%2#0: bool = (== array_len%0#0 6u)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (- array_len%0#0 1u)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%3#0 8u)
        let values%0#0: uint64 = (extract_uint64 concat%1#0 aggregate%bytes_offset%0#1)
        let tmp%4#0: bool = (== values%0#0 5u)
        (assert tmp%4#0) // expected 5
        let slot_contents%6#0: Encoded(uint64[]) = load(array2#0)
        let bytes_len%2#0: uint64 = (len slot_contents%6#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let tmp%5#0: bool = (== array_len%2#0 5u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (- array_len%2#0 1u)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%6#0 8u)
        let values%1#0: uint64 = (extract_uint64 slot_contents%6#0 aggregate%bytes_offset%1#1)
        let tmp%7#0: bool = (== values%1#0 4u)
        (assert tmp%7#0) // expected 4
        let concat%2#0: Encoded(uint64[]) = (concat concat%1#0 slot_contents%6#0) // on error: max array length exceeded
        store(array#0, concat%2#0)
        let bytes_len%5#0: uint64 = (len concat%2#0)
        let array_len%5#0: uint64 = (/ bytes_len%5#0 8u)
        let tmp%8#0: bool = (== array_len%5#0 11u)
        (assert tmp%8#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(array2#0)
        let bytes_len%6#0: uint64 = (len slot_contents%12#0)
        let array_len%6#0: uint64 = (/ bytes_len%6#0 8u)
        let tmp%9#0: bool = (== array_len%6#0 5u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (- array_len%5#0 1u)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%10#0 8u)
        let values%2#0: uint64 = (extract_uint64 concat%2#0 aggregate%bytes_offset%2#1)
        let tmp%11#0: bool = (== values%2#0 4u)
        (assert tmp%11#0) // expected 4
        let values%3#0: uint64 = (extract_uint64 concat%2#0 32u)
        let tmp%12#0: bool = (== values%3#0 4u)
        (assert tmp%12#0) // expected 4
        let values%4#0: uint64 = (extract_uint64 concat%2#0 40u)
        let tmp%13#0: bool = (== values%4#0 5u)
        (assert tmp%13#0) // expected 4
        let values%5#0: uint64 = (extract_uint64 concat%2#0 48u)
        let tmp%14#0: bool = (! values%5#0)
        (assert tmp%14#0) // expected 4
        return 

subroutine test_cases.array.uint64.Contract.test_array_evaluation_order() -> void:
    block@0: // L106
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x0000000000000003)
        let tmp%1#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%2#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(tmp%2#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(tmp%1#0)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 slot_contents%1#0) // on error: max array length exceeded
        store(tmp%1#0, concat%1#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%1#0: uint64 = (len slot_contents%3#0)
        let array_len%1#0: uint64 = (/ bytes_len%1#0 8u)
        let tmp%3#0: bool = (== array_len%1#0 6u)
        (assert tmp%3#0)
        let values%0#0: uint64 = (extract_uint64 slot_contents%3#0 0u)
        let tmp%4#0: bool = (== values%0#0 3u)
        (assert tmp%4#0)
        let values%1#0: uint64 = (extract_uint64 slot_contents%3#0 8u)
        let tmp%5#0: bool = (== values%1#0 1u)
        (assert tmp%5#0)
        let values%2#0: uint64 = (extract_uint64 slot_contents%3#0 16u)
        let tmp%6#0: bool = (== values%2#0 2u)
        (assert tmp%6#0)
        let values%3#0: uint64 = (extract_uint64 slot_contents%3#0 24u)
        let tmp%7#0: bool = (== values%3#0 3u)
        (assert tmp%7#0)
        let values%4#0: uint64 = (extract_uint64 slot_contents%3#0 32u)
        let tmp%8#0: bool = (== values%4#0 1u)
        (assert tmp%8#0)
        let values%5#0: uint64 = (extract_uint64 slot_contents%3#0 40u)
        let tmp%9#0: bool = (== values%5#0 2u)
        (assert tmp%9#0)
        let tmp%10#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%10#0)
        let bytes_len%2#0: uint64 = (len slot_contents%10#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let tmp%11#0: uint64 = (- array_len%2#0 1u)
        let aggregate%bytes_offset%6#1: uint64 = (* tmp%11#0 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 slot_contents%10#0 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let tmp%12#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(tmp%12#0)
        let values%7#0: uint64 = (extract_uint64 slot_contents%12#0 0u)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%write_offset%0#1: uint64 = (* values%7#0 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%13#0 aggregate%write_offset%0#1 aggregate%encoded_element%6#1)
        store(arr#0, aggregate%updated_array%0#1)
        let bytes_len%3#0: uint64 = (len aggregate%updated_array%0#1)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        let tmp%13#0: bool = (== array_len%3#0 8u)
        (assert tmp%13#0)
        let values%8#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 48u)
        let tmp%14#0: bool = (== values%8#0 6u)
        (assert tmp%14#0)
        let values%9#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 56u)
        let tmp%15#0: bool = (== values%9#0 7u)
        (assert tmp%15#0)
        let values%10#0: uint64 = (extract_uint64 aggregate%updated_array%0#1 24u)
        let tmp%16#0: bool = (== values%10#0 6u)
        (assert tmp%16#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage() -> void:
    block@0: // L125
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x0000000000000003)
        let update_assignment_current_base_value%0#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 42u)
        let slot_contents%1#0: Encoded(uint64[]) = load(update_assignment_current_base_value%0#0)
        let aggregate%updated_array%0#1: bytes = ((replace2 0) slot_contents%1#0 aggregate%val_as_bytes%1#1)
        store(update_assignment_current_base_value%0#0, aggregate%updated_array%0#1)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 2u)
        (assert tmp%1#0)
        let values%0#0: uint64 = (extract_uint64 slot_contents%2#0 0u)
        let tmp%2#0: bool = (== values%0#0 42u)
        (assert tmp%2#0)
        let values%1#0: uint64 = (extract_uint64 slot_contents%2#0 8u)
        let tmp%3#0: bool = (== values%1#0 1u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.test_allocations(num: uint64) -> void:
    block@0: // L134
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L136
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 num#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L137
        let alloc_test#0: Encoded(uint64[])* = new()
        store(alloc_test#0, 0x)
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L136
        return 

subroutine test_cases.array.uint64.Contract.test_iteration() -> void:
    block@0: // L140
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        let val#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L143
        let val#1: uint64 = φ(val#0 <- block@0, val#2 <- block@2)
        let continue_looping%0#0: bool = (< val#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L144
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob val#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let val#2: uint64 = (+ val#1 1u)
        goto block@1
    block@4: // after_for_L143
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%1#0: bool = (== array_len%0#0 5u)
        (assert tmp%1#0) // expected array of length 5
        let last#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L149
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@6)
        let last#1: uint64 = φ(last#0 <- block@4, value#0 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_len%0#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L150
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%3#0 aggregate%bytes_offset%0#1)
        let tmp%2#0: bool = (>= value#0 last#1)
        (assert tmp%2#0) // array is not sorted
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@8: // after_for_L149
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%2#0: uint64 = (len slot_contents%4#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L154
        let idx#0: uint64 = φ(item_index_internal%1#0 <- block@8, item_index_internal%1#2 <- block@10)
        let continue_looping%2#0: bool = (< idx#0 array_len%2#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L155
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%1#1: uint64 = (* idx#0 8u)
        let value#1: uint64 = (extract_uint64 slot_contents%5#0 aggregate%bytes_offset%1#1)
        let tmp%3#0: bool = (== value#1 idx#0)
        (assert tmp%3#0) // incorrect array value
        let item_index_internal%1#2: uint64 = (+ idx#0 1u)
        goto block@9
    block@12: // after_for_L154
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%3#0: uint64 = (len slot_contents%6#0)
        let array_len%3#0: uint64 = (/ bytes_len%3#0 8u)
        goto block@13
    block@13: // for_header_L158
        let reverse_index_internal%2#1: uint64 = φ(array_len%3#0 <- block@12, reverse_index_internal%2#2 <- block@14)
        let last#3: uint64 = φ(last#1 <- block@12, value#2 <- block@14)
        goto reverse_index_internal%2#1 ? block@14 : block@16
    block@14: // for_body_L159
        let reverse_index_internal%2#2: uint64 = (- reverse_index_internal%2#1 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%2#1: uint64 = (* reverse_index_internal%2#2 8u)
        let value#2: uint64 = (extract_uint64 slot_contents%7#0 aggregate%bytes_offset%2#1)
        let tmp%4#0: bool = (<= value#2 last#3)
        (assert tmp%4#0) // array is not sorted
        goto block@13
    block@16: // after_for_L158
        let arc4_arr#0: Encoded(len+uint64[]) = 0x0000
        let native_arr#0: Encoded(uint64[])* = new()
        store(native_arr#0, 0x)
        let i#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L164
        let i#1: uint64 = φ(i#0 <- block@16, i#2 <- block@18)
        let arc4_arr#1: Encoded(len+uint64[]) = φ(arc4_arr#0 <- block@16, arc4_arr#2 <- block@18)
        let continue_looping%4#0: bool = (< i#1 5u)
        goto continue_looping%4#0 ? block@18 : block@20
    block@18: // for_body_L165
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob i#1)
        let concat%1#0: Encoded(len+uint64[]) = (concat arc4_arr#1 aggregate%val_as_bytes%1#1) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arc4_arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(native_arr#0)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%8#0 aggregate%val_as_bytes%1#1) // on error: max array length exceeded
        store(native_arr#0, concat%2#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@17
    block@20: // after_for_L164
        let slot_contents%9#0: Encoded(uint64[]) = load(native_arr#0)
        let concat%3#0: Encoded(len+uint64[]) = (concat arc4_arr#1 slot_contents%9#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%3#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let combined_arr#0: Encoded(len+uint64[]) = ((replace2 0) concat%3#0 as_u16_bytes%1#0)
        let array_length%0#0: uint64 = (extract_uint16 combined_arr#0 0u)
        let tmp%9#0: bool = (== array_length%0#0 10u)
        (assert tmp%9#0)
        let aggregate%encoded_element%3#1: bytes = ((extract 2 8) combined_arr#0)
        let tmp%10#0: bool = (b== aggregate%encoded_element%3#1 0x0000000000000000)
        (assert tmp%10#0)
        let aggregate%encoded_element%4#1: bytes = ((extract 34 8) combined_arr#0)
        let tmp%11#0: bool = (b== aggregate%encoded_element%4#1 0x0000000000000004)
        (assert tmp%11#0)
        let aggregate%encoded_element%5#1: bytes = ((extract 42 8) combined_arr#0)
        let tmp%12#0: bool = (b== aggregate%encoded_element%5#1 0x0000000000000000)
        (assert tmp%12#0)
        let aggregate%encoded_element%6#1: bytes = ((extract 74 8) combined_arr#0)
        let tmp%13#0: bool = (b== aggregate%encoded_element%6#1 0x0000000000000004)
        (assert tmp%13#0)
        return 

subroutine test_cases.array.uint64.Contract.test_quicksort() -> void:
    block@0: // L174
        let rnd#0: Encoded(uint64[])* = new()
        store(rnd#0, 0x)
        let tmp%0#0: account = (txn Sender)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L178
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 32u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L179
        let tmp%1#0: uint64 = (getbyte tmp%0#0 item_index_internal%0#1)
        let slot_contents%0#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%1#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#1) // on error: max array length exceeded
        store(rnd#0, concat%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L178
        let slot_contents%1#0: Encoded(uint64[]) = load(rnd#0)
        let bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let tmp%3#0: bool = (== array_len%0#0 32u)
        (assert tmp%3#0) // expected array of length 32
        let tmp%4#0: uint64 = (- array_len%0#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%4#0)
        let last#0: uint64 = 0u
        let slot_contents%3#0: Encoded(uint64[]) = load(rnd#0)
        let bytes_len%2#0: uint64 = (len slot_contents%3#0)
        let array_len%2#0: uint64 = (/ bytes_len%2#0 8u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L187
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let last#1: uint64 = φ(last#0 <- block@4, value#0 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_len%2#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L188
        let slot_contents%4#0: Encoded(uint64[]) = load(rnd#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%1#1 8u)
        let value#0: uint64 = (extract_uint64 slot_contents%4#0 aggregate%bytes_offset%0#1)
        let tmp%5#0: bool = (>= value#0 last#1)
        (assert tmp%5#0) // array is not sorted
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L187
        return 

subroutine test_cases.array.uint64.Contract.test_unobserved_write() -> void:
    block@0: // L191
        let arr#0: Encoded(uint64[])* = test_cases.array.uint64.create_array()
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let bytes_len%0#0: uint64 = (len slot_contents%0#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 8u)
        let last#0: uint64 = (- array_len%0#0 1u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%write_offset%0#1: uint64 = (* last#0 8u)
        let aggregate%updated_array%0#1: bytes = (replace3 slot_contents%0#0 aggregate%write_offset%0#1 aggregate%val_as_bytes%0#1)
        store(arr#0, aggregate%updated_array%0#1)
        test_cases.array.uint64.assert_last_is_zero(arr#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 1u)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%updated_array%1#1: bytes = (replace3 slot_contents%2#0 aggregate%write_offset%0#1 aggregate%val_as_bytes%1#1)
        store(arr#0, aggregate%updated_array%1#1)
        let values%0#0: uint64 = (extract_uint64 aggregate%updated_array%1#1 aggregate%write_offset%0#1)
        let tmp%2#0: bool = (== values%0#0 1u)
        (assert tmp%2#0)
        return 