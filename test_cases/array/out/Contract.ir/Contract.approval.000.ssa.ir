main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.array.uint64.Contract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.r_trim(b: bytes, n: uint64) -> bytes:
    block@0: // L44
        let tmp%0#0: uint64 = (len b#0)
        let tmp%1#0: uint64 = (- tmp%0#0 n#0)
        let tmp%2#0: bytes = (substring3 b#0 0u tmp%1#0)
        return tmp%2#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes:
    block@0: // L50
        let tmp%0#0: bytes = _puya_lib.arc4.r_trim(array#0, fixed_byte_size#0)
        let result#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (extract_uint16 result#0 0u)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (- array_length#0 1u)
        let length_minus_1#0: uint64 = tmp%2#0
        let tmp%3#0: bytes = (itob length_minus_1#0)
        let tmp%4#0: bytes = ((extract 6 0) tmp%3#0)
        let tmp%5#0: bytes = ((replace2 0) result#0 tmp%4#0)
        return tmp%5#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L224
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L247
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L259
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L276
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L277
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L276
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L276
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L285
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L313
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L334
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L334
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L334
        return array_head_and_tail#1

subroutine test_cases.array.uint64.quicksort_window(arr: Encoded(uint64[])*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L203
        let left#0: uint64 = window_left#0
        let right#0: uint64 = window_right#0
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, tmp%1#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let pivot#0: uint64 = values%0#0
        goto block@1
    block@1: // while_top_L212
        let arr#2: Encoded(uint64[])* = φ(arr#0 <- block@0, arr#5 <- block@14)
        let left#3: uint64 = φ(left#0 <- block@0, left#5 <- block@14)
        let right#4: uint64 = φ(right#0 <- block@0, right#5 <- block@14)
        goto 1u ? block@2 : block@22
    block@2: // while_body_L214
        goto block@3
    block@3: // while_top_L214
        let left#1: uint64 = φ(left#3 <- block@2, left#2 <- block@4)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#2)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%1#0, left#1)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%2#0: bool = (< values%1#0 pivot#0)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // while_body_L215
        let tmp%3#0: uint64 = (+ left#1 1u)
        let left#2: uint64 = tmp%3#0
        goto block@3
    block@5: // after_while_L214
        goto block@6
    block@6: // while_top_L217
        let right#1: uint64 = φ(right#4 <- block@5, right#2 <- block@9)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#2)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%2#0, right#1)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%4#0: bool = (< pivot#0 values%2#0)
        goto tmp%4#0 ? block@7 : block@10
    block@7: // while_body_L219
        let tmp%5#0: bool = (== right#1 0u)
        goto tmp%5#0 ? block@8 : block@9
    block@8: // if_body_L220
        goto block@21
    block@9: // after_if_else_L219
        let tmp%6#0: uint64 = (- right#1 1u)
        let right#2: uint64 = tmp%6#0
        goto block@6
    block@10: // after_while_L217
        let tmp%7#0: bool = (< left#1 right#1)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L225
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#2)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%3#0, right#1)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#2)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%4#0, left#1)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(values%3#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#2)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%5#0, left#1, encoded_value%0#0)
        store(arr#2, updated_array%0#0)
        let arr#4: Encoded(uint64[])* = arr#2
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(values%4#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#4)
        let updated_array%1#0: Encoded(uint64[]) = replace_value(slot_contents%6#0, right#1, encoded_value%1#0)
        store(arr#4, updated_array%1#0)
        let arr#5: Encoded(uint64[])* = arr#4
        let tmp%8#0: uint64 = (+ left#1 1u)
        let left#5: uint64 = tmp%8#0
        let tmp%9#0: bool = (== right#1 0u)
        goto tmp%9#0 ? block@12 : block@13
    block@12: // if_body_L229
        goto block@22
    block@13: // after_if_else_L228
        let tmp%10#0: uint64 = (- right#1 1u)
        let right#5: uint64 = tmp%10#0
        let tmp%11#0: bool = (<= left#5 right#5)
        goto tmp%11#0 ? block@14 : block@15
    block@14: // if_body_L233
        goto block@1
    block@15: // after_if_else_L232
        goto block@22
    block@16: // after_if_else_L224
        let tmp%12#0: bool = (== left#1 right#1)
        goto tmp%12#0 ? block@17 : block@20
    block@17: // if_body_L239
        let tmp%13#0: uint64 = (+ left#1 1u)
        let left#6: uint64 = tmp%13#0
        let tmp%14#0: bool = (!= right#1 0u)
        goto tmp%14#0 ? block@18 : block@19
    block@18: // if_body_L242
        let tmp%15#0: uint64 = (- right#1 1u)
        let right#6: uint64 = tmp%15#0
        goto block@19
    block@19: // after_if_else_L241
        let right#8: uint64 = φ(right#1 <- block@17, right#6 <- block@18)
        goto block@22
    block@20: // after_if_else_L238
        goto block@21
    block@21: // L217
        goto block@22
    block@22: // after_while_L212
        let right#7: uint64 = φ(right#4 <- block@1, right#1 <- block@12, right#5 <- block@15, right#8 <- block@19, right#1 <- block@21)
        let arr#6: Encoded(uint64[])* = φ(arr#2 <- block@1, arr#5 <- block@12, arr#5 <- block@15, arr#2 <- block@19, arr#2 <- block@21)
        let left#8: uint64 = φ(left#3 <- block@1, left#5 <- block@12, left#5 <- block@15, left#6 <- block@19, left#1 <- block@21)
        let tmp%16#0: bool = (< window_left#0 right#7)
        goto tmp%16#0 ? block@23 : block@24
    block@23: // if_body_L251
        test_cases.array.uint64.quicksort_window(arr#6, window_left#0, right#7)
        goto block@24
    block@24: // after_if_else_L250
        let tmp%17#0: bool = (< left#8 window_right#0)
        goto tmp%17#0 ? block@25 : block@26
    block@25: // if_body_L254
        test_cases.array.uint64.quicksort_window(arr#6, left#8, window_right#0)
        goto block@26
    block@26: // after_if_else_L253
        return 

subroutine test_cases.array.uint64.create_array() -> Encoded(uint64[])*:
    block@0: // L257
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L260
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L261
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        goto block@3
    block@3: // for_footer_L260
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L260
        return arr#0

subroutine test_cases.array.uint64.assert_last_is_zero(arr: Encoded(uint64[])*) -> void:
    block@0: // L265
        let tmp%0#0: uint64 = array_len(arr#0)
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, tmp%1#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%2#0: bool = (== values%0#0 0u)
        (assert tmp%2#0)
        return 

subroutine test_cases.array.uint64.return_ref(arr: Encoded(uint64[])*, arr2: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L270
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(99u)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(100u)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%1#0, tmp%2#0, 1u)
        store(arr2#0, tmp%3#0)
        return arr#0

subroutine test_cases.array.uint64.add_x(arr: Encoded(uint64[])*, x: uint64) -> void:
    block@0: // L279
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L281
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L282
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        goto block@3
    block@3: // for_footer_L281
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L281
        return 

subroutine test_cases.array.uint64.pop_x(arr: Encoded(uint64[])*, x: uint64, expected: uint64) -> void:
    block@0: // L285
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L287
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let expected#1: uint64 = φ(expected#0 <- block@0, expected#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L288
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: uint64 = array_len(slot_contents%0#0)
        let sub%0#0: uint64 = (- tmp%0#0 1u)
        let tmp%1#0: Encoded(uint64) = extract_value(slot_contents%0#0, sub%0#0)
        let tmp%2#0: uint64 = decode_bytes<uint64>(tmp%1#0)
        let tmp%3#0: Encoded(uint64[]) = array_pop(slot_contents%0#0)
        store(arr#0, tmp%3#0)
        let popped#0: uint64 = tmp%2#0
        let tmp%4#0: bool = (== popped#0 expected#1)
        (assert tmp%4#0)
        let tmp%5#0: uint64 = (- expected#1 1u)
        let expected#2: uint64 = tmp%5#0
        goto block@3
    block@3: // for_footer_L287
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L287
        return 

subroutine test_cases.array.uint64.append_length_and_return(arr: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L293
        let tmp%0#0: uint64 = array_len(arr#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%0#0)
        let tmp%2#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%1#0, 1u)
        store(arr#0, tmp%2#0)
        return arr#0

subroutine test_cases.array.uint64.Contract.__puya_arc4_router__() -> bool:
    block@0: // L13
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@16
    block@1: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array()void" => block@2, method "test_array_extend()void" => block@3, method "test_array_multiple_append()void" => block@4, method "overhead()void" => block@5, method "test_array_too_long()void" => block@6, method "test_array_copy_and_extend()void" => block@7, method "test_array_evaluation_order()void" => block@8, method "test_array_assignment_maximum_cursage()void" => block@9, method "test_allocations(uint64)void" => block@10, method "test_iteration()void" => block@11, method "test_quicksort()void" => block@12, method "test_unobserved_write()void" => block@13, * => block@14}
    block@2: // test_array_route_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array()
        return 1u
    block@3: // test_array_extend_route_L52
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_extend()
        return 1u
    block@4: // test_array_multiple_append_route_L64
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (== tmp%11#0 NoOp)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        let tmp%14#0: bool = (!= tmp%13#0 0u)
        (assert tmp%14#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_multiple_append()
        return 1u
    block@5: // overhead_route_L73
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (== tmp%15#0 NoOp)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // can only call when not creating
        test_cases.array.uint64.Contract.overhead()
        return 1u
    block@6: // test_array_too_long_route_L77
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_too_long()
        return 1u
    block@7: // test_array_copy_and_extend_route_L86
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_copy_and_extend()
        return 1u
    block@8: // test_array_evaluation_order_route_L108
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_evaluation_order()
        return 1u
    block@9: // test_array_assignment_maximum_cursage_route_L127
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (== tmp%31#0 NoOp)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        let tmp%34#0: bool = (!= tmp%33#0 0u)
        (assert tmp%34#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage()
        return 1u
    block@10: // test_allocations_route_L136
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%39#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        test_cases.array.uint64.Contract.test_allocations(tmp%39#0)
        return 1u
    block@11: // test_iteration_route_L142
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (== tmp%40#0 NoOp)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        let tmp%43#0: bool = (!= tmp%42#0 0u)
        (assert tmp%43#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_iteration()
        return 1u
    block@12: // test_quicksort_route_L176
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_quicksort()
        return 1u
    block@13: // test_unobserved_write_route_L193
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (== tmp%48#0 NoOp)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (!= tmp%50#0 0u)
        (assert tmp%51#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_unobserved_write()
        return 1u
    block@14: // switch_case_default_L13
        goto block@15
    block@15: // switch_case_next_L13
        goto block@20
    block@16: // bare_routing_L13
        let tmp%52#0: uint64 = (txn OnCompletion)
        switch tmp%52#0 {0u => block@17, * => block@18}
    block@17: // __algopy_default_create_L1
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (== tmp%53#0 0u)
        (assert tmp%54#0) // can only call when creating
        test_cases.array.uint64.Contract.__algopy_default_create()
        return 1u
    block@18: // switch_case_default_L13
        goto block@19
    block@19: // switch_case_next_L13
        goto block@20
    block@20: // after_if_else_L13
        return 0u

subroutine test_cases.array.uint64.Contract.test_array() -> void:
    block@0: // L14
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let tmp%0#0: uint64 = array_len(arr#0)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(42u)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%2#0, 1u)
        store(arr#0, tmp%3#0)
        let tmp%4#0: uint64 = array_len(arr#0)
        let tmp%5#0: bool = (== tmp%4#0 1u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = array_len(arr#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, tmp%7#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%8#0: bool = (== values%0#0 42u)
        (assert tmp%8#0)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let tmp%9#0: uint64 = array_len(arr#0)
        let tmp%10#0: bool = (== tmp%9#0 6u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = array_len(arr#0)
        let tmp%12#0: uint64 = (- tmp%11#0 1u)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%2#0, tmp%12#0)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%13#0: bool = (== values%1#0 4u)
        (assert tmp%13#0)
        test_cases.array.uint64.pop_x(arr#0, 3u, 4u)
        let tmp%14#0: uint64 = array_len(arr#0)
        let tmp%15#0: bool = (== tmp%14#0 3u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = array_len(arr#0)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%3#0, tmp%17#0)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%18#0: bool = (== values%2#0 1u)
        (assert tmp%18#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let tmp%19#0: Encoded(uint64[]) = bytes_encode<uint64[]>(43u)
        let tmp%20#0: Encoded(uint64[]) = array_concat(slot_contents%4#0, tmp%19#0, 1u)
        store(arr#0, tmp%20#0)
        let tmp%21#0: uint64 = array_len(arr#0)
        let tmp%22#0: bool = (== tmp%21#0 4u)
        (assert tmp%22#0)
        let tmp%23#0: uint64 = array_len(arr#0)
        let tmp%24#0: uint64 = (- tmp%23#0 1u)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%5#0, tmp%24#0)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%25#0: bool = (== values%3#0 43u)
        (assert tmp%25#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%6#0, 0u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%26#0: bool = (== values%4#0 42u)
        (assert tmp%26#0)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let tmp%27#0: uint64 = array_len(arr#0)
        let tmp%28#0: bool = (== tmp%27#0 14u)
        (assert tmp%28#0)
        let tmp%29#0: uint64 = array_len(arr#0)
        let tmp%30#0: uint64 = (- tmp%29#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%7#0, tmp%30#0)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%31#0: bool = (== values%5#0 9u)
        (assert tmp%31#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let tmp%32#0: Encoded(uint64[]) = bytes_encode<uint64[]>(44u)
        let tmp%33#0: Encoded(uint64[]) = array_concat(slot_contents%8#0, tmp%32#0, 1u)
        store(arr#0, tmp%33#0)
        let tmp%34#0: uint64 = array_len(arr#0)
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let tmp%36#0: uint64 = array_len(arr#0)
        let tmp%37#0: uint64 = (- tmp%36#0 1u)
        let slot_contents%9#0: Encoded(uint64[]) = load(arr#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%9#0, tmp%37#0)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%38#0: bool = (== values%6#0 44u)
        (assert tmp%38#0)
        let tmp%39#0: Encoded(uint64[])* = test_cases.array.uint64.return_ref(arr#0, arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%39#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%10#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%40#0: uint64 = (+ values%7#0 2u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%40#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(tmp%39#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%11#0, 0u, encoded_value%0#0)
        store(tmp%39#0, updated_array%0#0)
        let tmp%41#0: uint64 = array_len(arr#0)
        let tmp%42#0: bool = (== tmp%41#0 17u)
        (assert tmp%42#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(arr#0)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%12#0, 0u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let tmp%43#0: bool = (== values%8#0 44u)
        (assert tmp%43#0)
        let tmp%44#0: uint64 = array_len(arr#0)
        let tmp%45#0: uint64 = (- tmp%44#0 2u)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%13#0, tmp%45#0)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%46#0: bool = (== values%9#0 99u)
        (assert tmp%46#0)
        let tmp%47#0: uint64 = array_len(arr#0)
        let tmp%48#0: uint64 = (- tmp%47#0 1u)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#0)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%14#0, tmp%48#0)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let tmp%49#0: bool = (== values%10#0 100u)
        (assert tmp%49#0)
        let slot_contents%15#0: Encoded(uint64[]) = load(arr#0)
        let tmp%50#0: uint64 = array_len(slot_contents%15#0)
        let tmp%51#0: Encoded(uint64) = extract_value(slot_contents%15#0, 0u)
        let tmp%52#0: uint64 = decode_bytes<uint64>(tmp%51#0)
        let tmp%53#0: Encoded(uint64[]) = array_pop(slot_contents%15#0, 0u)
        store(arr#0, tmp%53#0)
        let tmp%54#0: bool = (== tmp%52#0 44u)
        (assert tmp%54#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_extend() -> void:
    block@0: // L52
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(arr#0, 1u)
        let encoded_array%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%1#0: Encoded(uint64[])* = new()
        store(slot%1#0, encoded_array%1#0)
        let arr2#0: Encoded(uint64[])* = slot%1#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr2#0, tmp%1#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(2u)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%1#0, tmp%2#0, 1u)
        store(arr2#0, tmp%3#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%4#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let tmp%5#0: Encoded(uint64[]) = array_concat(slot_contents%2#0, tmp%4#0, 1u)
        store(arr2#0, tmp%5#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr2#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let tmp%6#0: uint64 = array_len(slot_contents%3#0)
        let tmp%7#0: Encoded(uint64[]) = array_concat(slot_contents%4#0, slot_contents%3#0, tmp%6#0)
        store(arr#0, tmp%7#0)
        let tmp%8#0: uint64 = array_len(arr#0)
        let tmp%9#0: bool = (== tmp%8#0 4u)
        (assert tmp%9#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_multiple_append() -> void:
    block@0: // L64
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(2u)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%1#0, tmp%2#0, 1u)
        store(arr#0, tmp%3#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let tmp%4#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let tmp%5#0: Encoded(uint64[]) = array_concat(slot_contents%2#0, tmp%4#0, 1u)
        store(arr#0, tmp%5#0)
        let tmp%6#0: uint64 = array_len(arr#0)
        let tmp%7#0: bool = (== tmp%6#0 4u)
        (assert tmp%7#0)
        return 

subroutine test_cases.array.uint64.Contract.overhead() -> void:
    block@0: // L73
        return 

subroutine test_cases.array.uint64.Contract.test_array_too_long() -> void:
    block@0: // L77
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let array#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L80
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 512u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L81
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(array#0, tmp%1#0)
        goto block@3
    block@3: // for_footer_L80
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L80
        let tmp%2#0: uint64 = array_len(array#0)
        let tmp%3#0: bool = (== tmp%2#0 512u)
        (assert tmp%3#0) // array is expected length
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        let tmp%4#0: Encoded(uint64[]) = bytes_encode<uint64[]>(512u)
        let tmp%5#0: Encoded(uint64[]) = array_concat(slot_contents%1#0, tmp%4#0, 1u)
        store(array#0, tmp%5#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_copy_and_extend() -> void:
    block@0: // L86
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let array#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L89
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L90
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(array#0, tmp%1#0)
        goto block@3
    block@3: // for_footer_L89
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L89
        let slot%1#0: Encoded(uint64[])* = new()
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        store(slot%1#0, slot_contents%1#0)
        let array2#0: Encoded(uint64[])* = slot%1#0
        let slot_contents%2#0: Encoded(uint64[]) = load(array#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(5u)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%2#0, tmp%2#0, 1u)
        store(array#0, tmp%3#0)
        let tmp%4#0: uint64 = array_len(array#0)
        let tmp%5#0: bool = (== tmp%4#0 6u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = array_len(array#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(array#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%3#0, tmp%7#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%8#0: bool = (== values%0#0 5u)
        (assert tmp%8#0) // expected 5
        let tmp%9#0: uint64 = array_len(array2#0)
        let tmp%10#0: bool = (== tmp%9#0 5u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = array_len(array2#0)
        let tmp%12#0: uint64 = (- tmp%11#0 1u)
        let slot_contents%4#0: Encoded(uint64[]) = load(array2#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%4#0, tmp%12#0)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%13#0: bool = (== values%1#0 4u)
        (assert tmp%13#0) // expected 4
        let slot_contents%5#0: Encoded(uint64[]) = load(array2#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(array#0)
        let tmp%14#0: uint64 = array_len(slot_contents%5#0)
        let tmp%15#0: Encoded(uint64[]) = array_concat(slot_contents%6#0, slot_contents%5#0, tmp%14#0)
        store(array#0, tmp%15#0)
        let tmp%16#0: uint64 = array_len(array#0)
        let tmp%17#0: bool = (== tmp%16#0 11u)
        (assert tmp%17#0)
        let tmp%18#0: uint64 = array_len(array2#0)
        let tmp%19#0: bool = (== tmp%18#0 5u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = array_len(array#0)
        let tmp%21#0: uint64 = (- tmp%20#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(array#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%7#0, tmp%21#0)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%22#0: bool = (== values%2#0 4u)
        (assert tmp%22#0) // expected 4
        let slot_contents%8#0: Encoded(uint64[]) = load(array#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%8#0, 4u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%23#0: bool = (== values%3#0 4u)
        (assert tmp%23#0) // expected 4
        let slot_contents%9#0: Encoded(uint64[]) = load(array#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%9#0, 5u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%24#0: bool = (== values%4#0 5u)
        (assert tmp%24#0) // expected 4
        let slot_contents%10#0: Encoded(uint64[]) = load(array#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%10#0, 6u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%25#0: bool = (== values%5#0 0u)
        (assert tmp%25#0) // expected 4
        return 

subroutine test_cases.array.uint64.Contract.test_array_evaluation_order() -> void:
    block@0: // L108
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        let tmp%2#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%3#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(tmp%3#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(tmp%2#0)
        let tmp%4#0: uint64 = array_len(slot_contents%1#0)
        let tmp%5#0: Encoded(uint64[]) = array_concat(slot_contents%2#0, slot_contents%1#0, tmp%4#0)
        store(tmp%2#0, tmp%5#0)
        let tmp%6#0: uint64 = array_len(arr#0)
        let tmp%7#0: bool = (== tmp%6#0 6u)
        (assert tmp%7#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%3#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%8#0: bool = (== values%0#0 3u)
        (assert tmp%8#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%4#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%9#0: bool = (== values%1#0 1u)
        (assert tmp%9#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%5#0, 2u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%10#0: bool = (== values%2#0 2u)
        (assert tmp%10#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%6#0, 3u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%11#0: bool = (== values%3#0 3u)
        (assert tmp%11#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%7#0, 4u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%12#0: bool = (== values%4#0 1u)
        (assert tmp%12#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%8#0, 5u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%13#0: bool = (== values%5#0 2u)
        (assert tmp%13#0)
        let tmp%14#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%15#0: uint64 = array_len(tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 1u)
        let slot_contents%9#0: Encoded(uint64[]) = load(tmp%14#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%9#0, tmp%16#0)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%17#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%17#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%10#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(values%6#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(arr#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%11#0, values%7#0, encoded_value%0#0)
        store(arr#0, updated_array%0#0)
        let arr#1: Encoded(uint64[])* = arr#0
        let tmp%18#0: uint64 = array_len(arr#1)
        let tmp%19#0: bool = (== tmp%18#0 8u)
        (assert tmp%19#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(arr#1)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%12#0, 6u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let tmp%20#0: bool = (== values%8#0 6u)
        (assert tmp%20#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#1)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%13#0, 7u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%21#0: bool = (== values%9#0 7u)
        (assert tmp%21#0)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#1)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%14#0, 3u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let tmp%22#0: bool = (== values%10#0 6u)
        (assert tmp%22#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage() -> void:
    block@0: // L127
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        let update_assignment_current_base_value%0#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let slot_contents%1#0: Encoded(uint64[]) = load(update_assignment_current_base_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%1#0, 0u, encoded_value%0#0)
        store(update_assignment_current_base_value%0#0, updated_array%0#0)
        let tmp%2#0: uint64 = array_len(arr#0)
        let tmp%3#0: bool = (== tmp%2#0 2u)
        (assert tmp%3#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%2#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%4#0: bool = (== values%0#0 42u)
        (assert tmp%4#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%3#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%5#0: bool = (== values%1#0 1u)
        (assert tmp%5#0)
        return 

subroutine test_cases.array.uint64.Contract.test_allocations(num: uint64) -> void:
    block@0: // L136
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L138
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 num#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L139
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let alloc_test#0: Encoded(uint64[])* = slot%0#0
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        goto block@3
    block@3: // for_footer_L138
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L138
        return 

subroutine test_cases.array.uint64.Contract.test_iteration() -> void:
    block@0: // L142
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let arr#0: Encoded(uint64[])* = slot%0#0
        (assert 1u) // Step cannot be zero
        let val#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L145
        let val#1: uint64 = φ(val#0 <- block@0, val#2 <- block@3)
        let continue_looping%0#0: bool = (< val#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L146
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#1)
        let tmp%1#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%0#0, 1u)
        store(arr#0, tmp%1#0)
        goto block@3
    block@3: // for_footer_L145
        let val#2: uint64 = (+ val#1 1u)
        goto block@1
    block@4: // after_for_L145
        let tmp%2#0: uint64 = array_len(arr#0)
        let tmp%3#0: bool = (== tmp%2#0 5u)
        (assert tmp%3#0) // expected array of length 5
        let last#0: uint64 = 0u
        let array_length%0#0: uint64 = array_len(arr#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@5
    block@5: // for_header_L151
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@7)
        let last#1: uint64 = φ(last#0 <- block@4, last#2 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L152
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, item_index_internal%0#1)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let value#0: uint64 = values%0#0
        let tmp%4#0: bool = (>= value#0 last#1)
        (assert tmp%4#0) // array is not sorted
        let last#2: uint64 = value#0
        goto block@7
    block@7: // for_footer_L151
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@8: // after_for_L151
        let array_length%1#0: uint64 = array_len(arr#0)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%1#0
        goto block@9
    block@9: // for_header_L156
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@8, item_index_internal%1#2 <- block@11)
        let continue_looping%2#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L157
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%2#0, item_index_internal%1#1)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let value#1: uint64 = values%1#0
        let idx#0: uint64 = item_index_internal%1#1
        let tmp%5#0: bool = (== value#1 idx#0)
        (assert tmp%5#0) // incorrect array value
        goto block@11
    block@11: // for_footer_L156
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@9
    block@12: // after_for_L156
        let array_length%2#0: uint64 = array_len(arr#0)
        let item_index_internal%2#0: uint64 = 0u
        let reverse_index_internal%2#0: uint64 = array_length%2#0
        goto block@13
    block@13: // for_header_L160
        let reverse_index_internal%2#1: uint64 = φ(reverse_index_internal%2#0 <- block@12, reverse_index_internal%2#2 <- block@15)
        let last#3: uint64 = φ(last#1 <- block@12, last#4 <- block@15)
        let continue_looping%3#0: bool = (> reverse_index_internal%2#1 0u)
        goto continue_looping%3#0 ? block@14 : block@16
    block@14: // for_body_L161
        let reverse_index_internal%2#2: uint64 = (- reverse_index_internal%2#1 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%3#0, reverse_index_internal%2#2)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let value#2: uint64 = values%2#0
        let tmp%6#0: bool = (<= value#2 last#3)
        (assert tmp%6#0) // array is not sorted
        let last#4: uint64 = value#2
        goto block@15
    block@15: // for_footer_L160
        goto block@13
    block@16: // after_for_L160
        let encoded_array%1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let arc4_arr#0: Encoded(len+uint64[]) = encoded_array%1#0
        let encoded_array%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%1#0: Encoded(uint64[])* = new()
        store(slot%1#0, encoded_array%2#0)
        let native_arr#0: Encoded(uint64[])* = slot%1#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L166
        let i#1: uint64 = φ(i#0 <- block@16, i#2 <- block@19)
        let arc4_arr#1: Encoded(len+uint64[]) = φ(arc4_arr#0 <- block@16, arc4_arr#2 <- block@19)
        let continue_looping%4#0: bool = (< i#1 5u)
        goto continue_looping%4#0 ? block@18 : block@20
    block@18: // for_body_L167
        let tmp%7#0: Encoded(uint64) = bytes_encode<uint64>(i#1)
        let tmp%8#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%7#0)
        let tmp%9#0: Encoded(len+uint64[]) = array_concat(arc4_arr#1, tmp%8#0, 1u)
        let arc4_arr#2: Encoded(len+uint64[]) = tmp%9#0
        let tmp%10#0: Encoded(uint64) = bytes_encode<uint64>(i#1)
        let slot_contents%4#0: Encoded(uint64[]) = load(native_arr#0)
        let tmp%11#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%10#0)
        let tmp%12#0: Encoded(uint64[]) = array_concat(slot_contents%4#0, tmp%11#0, 1u)
        store(native_arr#0, tmp%12#0)
        goto block@19
    block@19: // for_footer_L166
        let i#2: uint64 = (+ i#1 1u)
        goto block@17
    block@20: // after_for_L166
        let slot_contents%5#0: Encoded(uint64[]) = load(native_arr#0)
        let tmp%13#0: uint64 = array_len(slot_contents%5#0)
        let tmp%14#0: Encoded(len+uint64[]) = array_concat(arc4_arr#1, slot_contents%5#0, tmp%13#0)
        let combined_arr#0: Encoded(len+uint64[]) = tmp%14#0
        let tmp%15#0: uint64 = array_len(combined_arr#0)
        let tmp%16#0: bool = (== tmp%15#0 10u)
        (assert tmp%16#0)
        let array_item%3#0: Encoded(uint64) = extract_value(combined_arr#0, 0u)
        let reinterpret_biguint%0#0: biguint = array_item%3#0
        let reinterpret_biguint%1#0: biguint = 0x0000000000000000
        let tmp%17#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%17#0)
        let array_item%4#0: Encoded(uint64) = extract_value(combined_arr#0, 4u)
        let reinterpret_biguint%2#0: biguint = array_item%4#0
        let reinterpret_biguint%3#0: biguint = 0x0000000000000004
        let tmp%18#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%18#0)
        let array_item%5#0: Encoded(uint64) = extract_value(combined_arr#0, 5u)
        let reinterpret_biguint%4#0: biguint = array_item%5#0
        let reinterpret_biguint%5#0: biguint = 0x0000000000000000
        let tmp%19#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%19#0)
        let array_item%6#0: Encoded(uint64) = extract_value(combined_arr#0, 9u)
        let reinterpret_biguint%6#0: biguint = array_item%6#0
        let reinterpret_biguint%7#0: biguint = 0x0000000000000004
        let tmp%20#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        (assert tmp%20#0)
        return 

subroutine test_cases.array.uint64.Contract.test_quicksort() -> void:
    block@0: // L176
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%0#0)
        let rnd#0: Encoded(uint64[])* = slot%0#0
        let tmp%0#0: account = (txn Sender)
        let bytes_length%0#0: uint64 = (len tmp%0#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = bytes_length%0#0
        goto block@1
    block@1: // for_header_L180
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L181
        let b#0: bytes = (extract3 tmp%0#0 item_index_internal%0#1 1u)
        let tmp%1#0: uint64 = (btoi b#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(rnd#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%1#0)
        let tmp%3#0: Encoded(uint64[]) = array_concat(slot_contents%0#0, tmp%2#0, 1u)
        store(rnd#0, tmp%3#0)
        goto block@3
    block@3: // for_footer_L180
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L180
        let tmp%4#0: uint64 = array_len(rnd#0)
        let tmp%5#0: bool = (== tmp%4#0 32u)
        (assert tmp%5#0) // expected array of length 32
        let tmp%6#0: uint64 = array_len(rnd#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%7#0)
        let last#0: uint64 = 0u
        let array_length%0#0: uint64 = array_len(rnd#0)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%0#0
        goto block@5
    block@5: // for_header_L189
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7)
        let last#1: uint64 = φ(last#0 <- block@4, last#2 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L190
        let slot_contents%1#0: Encoded(uint64[]) = load(rnd#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, item_index_internal%1#1)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let value#0: uint64 = values%0#0
        let tmp%8#0: bool = (>= value#0 last#1)
        (assert tmp%8#0) // array is not sorted
        let last#2: uint64 = value#0
        goto block@7
    block@7: // for_footer_L189
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L189
        return 

subroutine test_cases.array.uint64.Contract.test_unobserved_write() -> void:
    block@0: // L193
        let tmp%0#0: Encoded(uint64[])* = test_cases.array.uint64.create_array()
        let arr#0: Encoded(uint64[])* = tmp%0#0
        let tmp%1#0: uint64 = array_len(arr#0)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let last#0: uint64 = tmp%2#0
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(0u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%0#0, last#0, encoded_value%0#0)
        store(arr#0, updated_array%0#0)
        let arr#1: Encoded(uint64[])* = arr#0
        test_cases.array.uint64.assert_last_is_zero(arr#1)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#1)
        let updated_array%1#0: Encoded(uint64[]) = replace_value(slot_contents%1#0, last#0, encoded_value%1#0)
        store(arr#1, updated_array%1#0)
        let arr#2: Encoded(uint64[])* = arr#1
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#2)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%2#0, last#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%3#0: bool = (== values%0#0 1u)
        (assert tmp%3#0)
        return 

subroutine test_cases.array.uint64.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 