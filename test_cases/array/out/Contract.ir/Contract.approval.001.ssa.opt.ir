main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@26
    block@2: // abi_routing_L13
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@20
    block@5: // call_NoOp_L13
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_array()void" => block@6, method "test_array_extend()void" => block@7, method "test_array_multiple_append()void" => block@8, method "overhead()void" => block@9, method "test_array_too_long()void" => block@10, method "test_array_copy_and_extend()void" => block@11, method "test_array_evaluation_order()void" => block@12, method "test_array_assignment_maximum_cursage()void" => block@13, method "test_allocations(uint64)void" => block@14, method "test_iteration()void" => block@15, method "test_quicksort()void" => block@16, method "test_unobserved_write()void" => block@17, * => block@30}
    block@6: // test_array_route_L14
        test_cases.array.uint64.Contract.test_array[routing]()
        goto block@30
    block@7: // test_array_extend_route_L50
        test_cases.array.uint64.Contract.test_array_extend[routing]()
        goto block@30
    block@8: // test_array_multiple_append_route_L62
        test_cases.array.uint64.Contract.test_array_multiple_append[routing]()
        goto block@30
    block@9: // overhead_route_L71
        test_cases.array.uint64.Contract.overhead[routing]()
        goto block@30
    block@10: // test_array_too_long_route_L75
        test_cases.array.uint64.Contract.test_array_too_long[routing]()
        goto block@30
    block@11: // test_array_copy_and_extend_route_L84
        test_cases.array.uint64.Contract.test_array_copy_and_extend[routing]()
        goto block@30
    block@12: // test_array_evaluation_order_route_L106
        test_cases.array.uint64.Contract.test_array_evaluation_order[routing]()
        goto block@30
    block@13: // test_array_assignment_maximum_cursage_route_L125
        test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage[routing]()
        goto block@30
    block@14: // test_allocations_route_L134
        test_cases.array.uint64.Contract.test_allocations[routing]()
        goto block@30
    block@15: // test_iteration_route_L140
        test_cases.array.uint64.Contract.test_iteration[routing]()
        goto block@30
    block@16: // test_quicksort_route_L174
        test_cases.array.uint64.Contract.test_quicksort[routing]()
        goto block@30
    block@17: // test_unobserved_write_route_L191
        test_cases.array.uint64.Contract.test_unobserved_write[routing]()
        goto block@30
    block@20: // create_NoOp_L13
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        goto block@30
    block@26: // bare_routing_L13
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@30 : block@27
    block@27: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        test_cases.array.uint64.Contract.__algopy_default_create()
        exit 1u
    block@30: // after_if_else_L13
        fail

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.array.uint64.quicksort_window(arr: Encoded(uint64[])*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L201
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, tmp%1#0)
        let pivot#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        goto block@1
    block@1: // while_top_L210
        let arr#2: Encoded(uint64[])* = φ(arr#0 <- block@0, arr#2 <- block@14)
        let left#3: uint64 = φ(window_left#0 <- block@0, left#5 <- block@14)
        let right#4: uint64 = φ(window_right#0 <- block@0, right#5 <- block@14)
        goto block@3
    block@3: // while_top_L212
        let left#1: uint64 = φ(left#3 <- block@1, left#2 <- block@4)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#2)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%1#0, left#1)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%2#0: bool = (< values%1#0 pivot#0)
        goto tmp%2#0 ? block@4 : block@5
    block@4: // while_body_L213
        let left#2: uint64 = (+ left#1 1u)
        goto block@3
    block@5: // after_while_L212
        goto block@6
    block@6: // while_top_L215
        let right#1: uint64 = φ(right#4 <- block@5, right#2 <- block@9)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#2)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%2#0, right#1)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%4#0: bool = (< pivot#0 values%2#0)
        goto tmp%4#0 ? block@7 : block@10
    block@7: // while_body_L217
        let tmp%5#0: bool = (! right#1)
        goto right#1 ? block@9 : block@21
    block@9: // after_if_else_L217
        let right#2: uint64 = (- right#1 1u)
        goto block@6
    block@10: // after_while_L215
        let tmp%7#0: bool = (< left#1 right#1)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L223
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#2)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%3#0, right#1)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#2)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%4#0, left#1)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let encoded_value%0#0: Encoded(uint64) = array_item%3#0
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#2)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%5#0, left#1, encoded_value%0#0)
        store(arr#2, updated_array%0#0)
        let encoded_value%1#0: Encoded(uint64) = array_item%4#0
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#2)
        let updated_array%1#0: Encoded(uint64[]) = replace_value(slot_contents%6#0, right#1, encoded_value%1#0)
        store(arr#2, updated_array%1#0)
        let left#5: uint64 = (+ left#1 1u)
        let tmp%9#0: bool = (! right#1)
        goto right#1 ? block@13 : block@12
    block@12: // if_body_L227
        goto block@22
    block@13: // after_if_else_L226
        let right#5: uint64 = (- right#1 1u)
        let tmp%11#0: bool = (<= left#5 right#5)
        goto tmp%11#0 ? block@14 : block@15
    block@14: // if_body_L231
        goto block@1
    block@15: // after_if_else_L230
        goto block@22
    block@16: // after_if_else_L222
        let tmp%12#0: bool = (== left#1 right#1)
        goto tmp%12#0 ? block@17 : block@21
    block@17: // if_body_L237
        let left#6: uint64 = (+ left#1 1u)
        let tmp%14#0: bool = (!= right#1 0u)
        goto right#1 ? block@18 : block@19
    block@18: // if_body_L240
        let right#6: uint64 = (- right#1 1u)
        goto block@19
    block@19: // after_if_else_L239
        let right#8: uint64 = φ(right#1 <- block@17, right#6 <- block@18)
        goto block@22
    block@21: // L215
        goto block@22
    block@22: // after_while_L210
        let right#7: uint64 = φ(right#1 <- block@12, right#5 <- block@15, right#8 <- block@19, right#1 <- block@21)
        let left#8: uint64 = φ(left#5 <- block@12, left#5 <- block@15, left#6 <- block@19, left#1 <- block@21)
        let tmp%16#0: bool = (< window_left#0 right#7)
        goto tmp%16#0 ? block@23 : block@24
    block@23: // if_body_L249
        test_cases.array.uint64.quicksort_window(arr#2, window_left#0, right#7)
        goto block@24
    block@24: // after_if_else_L248
        let tmp%17#0: bool = (< left#8 window_right#0)
        goto tmp%17#0 ? block@25 : block@26
    block@25: // if_body_L252
        test_cases.array.uint64.quicksort_window(arr#2, left#8, window_right#0)
        goto block@26
    block@26: // after_if_else_L251
        return 

subroutine test_cases.array.uint64.create_array() -> Encoded(uint64[])*:
    block@0: // L255
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L258
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L259
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L258
        return arr#0

subroutine test_cases.array.uint64.assert_last_is_zero(arr: Encoded(uint64[])*) -> void:
    block@0: // L263
        let tmp%0#0: uint64 = array_len(arr#0)
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, tmp%1#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%2#0: bool = (! values%0#0)
        (assert tmp%2#0)
        return 

subroutine test_cases.array.uint64.return_ref(arr: Encoded(uint64[])*, arr2: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L268
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(99u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(100u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        return arr#0

subroutine test_cases.array.uint64.add_x(arr: Encoded(uint64[])*, x: uint64) -> void:
    block@0: // L277
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L279
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L280
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L279
        return 

subroutine test_cases.array.uint64.pop_x(arr: Encoded(uint64[])*, x: uint64, expected: uint64) -> void:
    block@0: // L283
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L285
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let expected#1: uint64 = φ(expected#0 <- block@0, expected#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L286
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let len%0#0: uint64 = (len slot_contents%0#0)
        let sub%0#0: uint64 = (- len%0#0 8u)
        let extract%0#0: bytes = (extract3 slot_contents%0#0 0u sub%0#0)
        let extract_to_end%0#0: bytes = (substring3 slot_contents%0#0 sub%0#0 len%0#0)
        let popped#0: uint64 = decode_bytes<uint64>(extract_to_end%0#0)
        store(arr#0, extract%0#0)
        let tmp%1#0: bool = (== popped#0 expected#1)
        (assert tmp%1#0)
        let expected#2: uint64 = (- expected#1 1u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L285
        return 

subroutine test_cases.array.uint64.append_length_and_return(arr: Encoded(uint64[])*) -> Encoded(uint64[])*:
    block@0: // L291
        let tmp%0#0: uint64 = array_len(arr#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%0#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%1#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        return arr#0

subroutine test_cases.array.uint64.Contract.test_array[routing]() -> void:
    block@0: // L14
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let tmp%0#0: uint64 = array_len(arr#0)
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(42u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%2#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let tmp%3#0: uint64 = array_len(arr#0)
        let tmp%4#0: bool = (== tmp%3#0 1u)
        (assert tmp%4#0)
        let tmp%5#0: uint64 = array_len(arr#0)
        let tmp%6#0: uint64 = (- tmp%5#0 1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, tmp%6#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%7#0: bool = (== values%0#0 42u)
        (assert tmp%7#0)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let tmp%8#0: uint64 = array_len(arr#0)
        let tmp%9#0: bool = (== tmp%8#0 6u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = array_len(arr#0)
        let tmp%11#0: uint64 = (- tmp%10#0 1u)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%2#0, tmp%11#0)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%12#0: bool = (== values%1#0 4u)
        (assert tmp%12#0)
        test_cases.array.uint64.pop_x(arr#0, 3u, 4u)
        let tmp%13#0: uint64 = array_len(arr#0)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = array_len(arr#0)
        let tmp%16#0: uint64 = (- tmp%15#0 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%3#0, tmp%16#0)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%17#0: bool = (== values%2#0 1u)
        (assert tmp%17#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let tmp%18#0: Encoded(uint64[]) = bytes_encode<uint64[]>(43u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%4#0 tmp%18#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let tmp%19#0: uint64 = array_len(arr#0)
        let tmp%20#0: bool = (== tmp%19#0 4u)
        (assert tmp%20#0)
        let tmp%21#0: uint64 = array_len(arr#0)
        let tmp%22#0: uint64 = (- tmp%21#0 1u)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%5#0, tmp%22#0)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%23#0: bool = (== values%3#0 43u)
        (assert tmp%23#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%6#0, 0u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%24#0: bool = (== values%4#0 42u)
        (assert tmp%24#0)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let tmp%25#0: uint64 = array_len(arr#0)
        let tmp%26#0: bool = (== tmp%25#0 14u)
        (assert tmp%26#0)
        let tmp%27#0: uint64 = array_len(arr#0)
        let tmp%28#0: uint64 = (- tmp%27#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%7#0, tmp%28#0)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%29#0: bool = (== values%5#0 9u)
        (assert tmp%29#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let tmp%30#0: Encoded(uint64[]) = bytes_encode<uint64[]>(44u)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%8#0 tmp%30#0) // on error: max array length exceeded
        store(arr#0, concat%2#0)
        let tmp%31#0: uint64 = array_len(arr#0)
        let tmp%32#0: bool = (== tmp%31#0 15u)
        (assert tmp%32#0)
        let tmp%33#0: uint64 = array_len(arr#0)
        let tmp%34#0: uint64 = (- tmp%33#0 1u)
        let slot_contents%9#0: Encoded(uint64[]) = load(arr#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%9#0, tmp%34#0)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%35#0: bool = (== values%6#0 44u)
        (assert tmp%35#0)
        let tmp%36#0: Encoded(uint64[])* = test_cases.array.uint64.return_ref(arr#0, arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%36#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%10#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%37#0: uint64 = (+ values%7#0 2u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%37#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(tmp%36#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%11#0, 0u, encoded_value%0#0)
        store(tmp%36#0, updated_array%0#0)
        let tmp%38#0: uint64 = array_len(arr#0)
        let tmp%39#0: bool = (== tmp%38#0 17u)
        (assert tmp%39#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(arr#0)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%12#0, 0u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let tmp%40#0: bool = (== values%8#0 44u)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = array_len(arr#0)
        let tmp%42#0: uint64 = (- tmp%41#0 2u)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%13#0, tmp%42#0)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%43#0: bool = (== values%9#0 99u)
        (assert tmp%43#0)
        let tmp%44#0: uint64 = array_len(arr#0)
        let tmp%45#0: uint64 = (- tmp%44#0 1u)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#0)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%14#0, tmp%45#0)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let tmp%46#0: bool = (== values%10#0 100u)
        (assert tmp%46#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_extend[routing]() -> void:
    block@0: // L50
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let arr2#0: Encoded(uint64[])* = new()
        store(arr2#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr2#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(2u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr2#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%2#0) // on error: max array length exceeded
        store(arr2#0, concat%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr2#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let concat%3#0: Encoded(uint64[]) = (concat slot_contents%4#0 slot_contents%3#0) // on error: max array length exceeded
        store(arr#0, concat%3#0)
        let tmp%3#0: uint64 = array_len(arr#0)
        let tmp%4#0: bool = (== tmp%3#0 4u)
        (assert tmp%4#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_multiple_append[routing]() -> void:
    block@0: // L62
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(2u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%1#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%2#0) // on error: max array length exceeded
        store(arr#0, concat%2#0)
        let tmp%3#0: uint64 = array_len(arr#0)
        let tmp%4#0: bool = (== tmp%3#0 4u)
        (assert tmp%4#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.overhead[routing]() -> void:
    block@0: // L71
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_too_long[routing]() -> void:
    block@0: // L75
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let array#0: Encoded(uint64[])* = new()
        store(array#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L78
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 512u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L79
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(array#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L78
        let tmp%1#0: uint64 = array_len(array#0)
        let tmp%2#0: bool = (== tmp%1#0 512u)
        (assert tmp%2#0) // array is expected length
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        let tmp%3#0: Encoded(uint64[]) = bytes_encode<uint64[]>(512u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%1#0 tmp%3#0) // on error: max array length exceeded
        store(array#0, concat%1#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_copy_and_extend[routing]() -> void:
    block@0: // L84
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let array#0: Encoded(uint64[])* = new()
        store(array#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L87
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L88
        let slot_contents%0#0: Encoded(uint64[]) = load(array#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(i#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(array#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@5: // after_for_L87
        let array2#0: Encoded(uint64[])* = new()
        let slot_contents%1#0: Encoded(uint64[]) = load(array#0)
        store(array2#0, slot_contents%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(array#0)
        let tmp%1#0: Encoded(uint64[]) = bytes_encode<uint64[]>(5u)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 tmp%1#0) // on error: max array length exceeded
        store(array#0, concat%1#0)
        let tmp%2#0: uint64 = array_len(array#0)
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = array_len(array#0)
        let tmp%5#0: uint64 = (- tmp%4#0 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(array#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%3#0, tmp%5#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%6#0: bool = (== values%0#0 5u)
        (assert tmp%6#0) // expected 5
        let tmp%7#0: uint64 = array_len(array2#0)
        let tmp%8#0: bool = (== tmp%7#0 5u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = array_len(array2#0)
        let tmp%10#0: uint64 = (- tmp%9#0 1u)
        let slot_contents%4#0: Encoded(uint64[]) = load(array2#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%4#0, tmp%10#0)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%11#0: bool = (== values%1#0 4u)
        (assert tmp%11#0) // expected 4
        let slot_contents%5#0: Encoded(uint64[]) = load(array2#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(array#0)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%6#0 slot_contents%5#0) // on error: max array length exceeded
        store(array#0, concat%2#0)
        let tmp%12#0: uint64 = array_len(array#0)
        let tmp%13#0: bool = (== tmp%12#0 11u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = array_len(array2#0)
        let tmp%15#0: bool = (== tmp%14#0 5u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = array_len(array#0)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let slot_contents%7#0: Encoded(uint64[]) = load(array#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%7#0, tmp%17#0)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%18#0: bool = (== values%2#0 4u)
        (assert tmp%18#0) // expected 4
        let slot_contents%8#0: Encoded(uint64[]) = load(array#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%8#0, 4u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%19#0: bool = (== values%3#0 4u)
        (assert tmp%19#0) // expected 4
        let slot_contents%9#0: Encoded(uint64[]) = load(array#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%9#0, 5u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%20#0: bool = (== values%4#0 5u)
        (assert tmp%20#0) // expected 4
        let slot_contents%10#0: Encoded(uint64[]) = load(array#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%10#0, 6u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%21#0: bool = (! values%5#0)
        (assert tmp%21#0) // expected 4
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_evaluation_order[routing]() -> void:
    block@0: // L106
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let tmp%1#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%2#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(tmp%2#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(tmp%1#0)
        let concat%1#0: Encoded(uint64[]) = (concat slot_contents%2#0 slot_contents%1#0) // on error: max array length exceeded
        store(tmp%1#0, concat%1#0)
        let tmp%3#0: uint64 = array_len(arr#0)
        let tmp%4#0: bool = (== tmp%3#0 6u)
        (assert tmp%4#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%3#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%5#0: bool = (== values%0#0 3u)
        (assert tmp%5#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%4#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%6#0: bool = (== values%1#0 1u)
        (assert tmp%6#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%5#0, 2u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%7#0: bool = (== values%2#0 2u)
        (assert tmp%7#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(arr#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%6#0, 3u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%8#0: bool = (== values%3#0 3u)
        (assert tmp%8#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(arr#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%7#0, 4u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%9#0: bool = (== values%4#0 1u)
        (assert tmp%9#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(arr#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%8#0, 5u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%10#0: bool = (== values%5#0 2u)
        (assert tmp%10#0)
        let tmp%11#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let tmp%12#0: uint64 = array_len(tmp%11#0)
        let tmp%13#0: uint64 = (- tmp%12#0 1u)
        let slot_contents%9#0: Encoded(uint64[]) = load(tmp%11#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%9#0, tmp%13#0)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let tmp%14#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(tmp%14#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%10#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let encoded_value%0#0: Encoded(uint64) = array_item%6#0
        let slot_contents%11#0: Encoded(uint64[]) = load(arr#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%11#0, values%7#0, encoded_value%0#0)
        store(arr#0, updated_array%0#0)
        let tmp%15#0: uint64 = array_len(arr#0)
        let tmp%16#0: bool = (== tmp%15#0 8u)
        (assert tmp%16#0)
        let slot_contents%12#0: Encoded(uint64[]) = load(arr#0)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%12#0, 6u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let tmp%17#0: bool = (== values%8#0 6u)
        (assert tmp%17#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(arr#0)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%13#0, 7u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%18#0: bool = (== values%9#0 7u)
        (assert tmp%18#0)
        let slot_contents%14#0: Encoded(uint64[]) = load(arr#0)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%14#0, 3u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let tmp%19#0: bool = (== values%10#0 6u)
        (assert tmp%19#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage[routing]() -> void:
    block@0: // L125
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(3u)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let update_assignment_current_base_value%0#0: Encoded(uint64[])* = test_cases.array.uint64.append_length_and_return(arr#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let slot_contents%1#0: Encoded(uint64[]) = load(update_assignment_current_base_value%0#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%1#0, 0u, encoded_value%0#0)
        store(update_assignment_current_base_value%0#0, updated_array%0#0)
        let tmp%1#0: uint64 = array_len(arr#0)
        let tmp%2#0: bool = (== tmp%1#0 2u)
        (assert tmp%2#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%2#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%3#0: bool = (== values%0#0 42u)
        (assert tmp%3#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%3#0, 1u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== values%1#0 1u)
        (assert tmp%4#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_allocations[routing]() -> void:
    block@0: // L134
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let num#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L136
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 num#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L137
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let alloc_test#0: Encoded(uint64[])* = new()
        store(alloc_test#0, encoded_array%0#0)
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@5: // after_for_L136
        exit 1u

subroutine test_cases.array.uint64.Contract.test_iteration[routing]() -> void:
    block@0: // L140
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let val#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L143
        let val#1: uint64 = φ(val#0 <- block@0, val#2 <- block@3)
        let continue_looping%0#0: bool = (< val#1 5u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L144
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let tmp%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(val#1)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let val#2: uint64 = (+ val#1 1u)
        goto block@2
    block@5: // after_for_L143
        let tmp%1#0: uint64 = array_len(arr#0)
        let tmp%2#0: bool = (== tmp%1#0 5u)
        (assert tmp%2#0) // expected array of length 5
        let last#0: uint64 = 0u
        let array_length%0#0: uint64 = array_len(arr#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L149
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@5, item_index_internal%0#2 <- block@7)
        let last#1: uint64 = φ(last#0 <- block@5, value#0 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L150
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, item_index_internal%0#1)
        let value#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%3#0: bool = (>= value#0 last#1)
        (assert tmp%3#0) // array is not sorted
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@6
    block@9: // after_for_L149
        let array_length%1#0: uint64 = array_len(arr#0)
        let item_index_internal%1#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L154
        let idx#0: uint64 = φ(item_index_internal%1#0 <- block@9, item_index_internal%1#2 <- block@11)
        let continue_looping%2#0: bool = (< idx#0 array_length%1#0)
        goto continue_looping%2#0 ? block@11 : block@13
    block@11: // for_body_L155
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%2#0, idx#0)
        let value#1: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== value#1 idx#0)
        (assert tmp%4#0) // incorrect array value
        let item_index_internal%1#2: uint64 = (+ idx#0 1u)
        goto block@10
    block@13: // after_for_L154
        let array_length%2#0: uint64 = array_len(arr#0)
        goto block@14
    block@14: // for_header_L158
        let reverse_index_internal%2#1: uint64 = φ(array_length%2#0 <- block@13, reverse_index_internal%2#2 <- block@15)
        let last#3: uint64 = φ(last#1 <- block@13, value#2 <- block@15)
        let continue_looping%3#0: bool = (> reverse_index_internal%2#1 0u)
        goto reverse_index_internal%2#1 ? block@15 : block@17
    block@15: // for_body_L159
        let reverse_index_internal%2#2: uint64 = (- reverse_index_internal%2#1 1u)
        let slot_contents%3#0: Encoded(uint64[]) = load(arr#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%3#0, reverse_index_internal%2#2)
        let value#2: uint64 = decode_bytes<uint64>(array_item%2#0)
        let tmp%5#0: bool = (<= value#2 last#3)
        (assert tmp%5#0) // array is not sorted
        goto block@14
    block@17: // after_for_L158
        let arc4_arr#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let native_arr#0: Encoded(uint64[])* = new()
        store(native_arr#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@18
    block@18: // for_header_L164
        let i#1: uint64 = φ(i#0 <- block@17, i#2 <- block@19)
        let arc4_arr#1: Encoded(len+uint64[]) = φ(arc4_arr#0 <- block@17, arc4_arr#2 <- block@19)
        let continue_looping%4#0: bool = (< i#1 5u)
        goto continue_looping%4#0 ? block@19 : block@21
    block@19: // for_body_L165
        let tmp%6#0: Encoded(uint64) = bytes_encode<uint64>(i#1)
        let tmp%7#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%6#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arc4_arr#1 tmp%7#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arc4_arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(native_arr#0)
        let concat%2#0: Encoded(uint64[]) = (concat slot_contents%4#0 tmp%7#0) // on error: max array length exceeded
        store(native_arr#0, concat%2#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@18
    block@21: // after_for_L164
        let slot_contents%5#0: Encoded(uint64[]) = load(native_arr#0)
        let concat%3#0: Encoded(len+uint64[]) = (concat arc4_arr#1 slot_contents%5#0) // on error: max array length exceeded
        let total_length%0#0: uint64 = (len concat%3#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%3#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let combined_arr#0: Encoded(len+uint64[]) = ((replace2 0) concat%3#0 as_u16_bytes%1#0)
        let tmp%10#0: uint64 = array_len(combined_arr#0)
        let tmp%11#0: bool = (== tmp%10#0 10u)
        (assert tmp%11#0)
        let array_item%3#0: Encoded(uint64) = extract_value(combined_arr#0, 0u)
        let tmp%12#0: bool = (b== array_item%3#0 0x0000000000000000)
        (assert tmp%12#0)
        let array_item%4#0: Encoded(uint64) = extract_value(combined_arr#0, 4u)
        let tmp%13#0: bool = (b== array_item%4#0 0x0000000000000004)
        (assert tmp%13#0)
        let array_item%5#0: Encoded(uint64) = extract_value(combined_arr#0, 5u)
        let tmp%14#0: bool = (b== array_item%5#0 0x0000000000000000)
        (assert tmp%14#0)
        let array_item%6#0: Encoded(uint64) = extract_value(combined_arr#0, 9u)
        let tmp%15#0: bool = (b== array_item%6#0 0x0000000000000004)
        (assert tmp%15#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.test_quicksort[routing]() -> void:
    block@0: // L174
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>()
        let rnd#0: Encoded(uint64[])* = new()
        store(rnd#0, encoded_array%0#0)
        let tmp%0#0: account = (txn Sender)
        let bytes_length%0#0: uint64 = 32u
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L178
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 32u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L179
        let b#0: bytes = (extract3 tmp%0#0 item_index_internal%0#1 1u)
        let tmp%1#0: uint64 = (getbyte tmp%0#0 item_index_internal%0#1)
        let slot_contents%0#0: Encoded(uint64[]) = load(rnd#0)
        let tmp%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(tmp%1#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%2#0) // on error: max array length exceeded
        store(rnd#0, concat%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L178
        let tmp%3#0: uint64 = array_len(rnd#0)
        let tmp%4#0: bool = (== tmp%3#0 32u)
        (assert tmp%4#0) // expected array of length 32
        let tmp%5#0: uint64 = array_len(rnd#0)
        let tmp%6#0: uint64 = (- tmp%5#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%6#0)
        let last#0: uint64 = 0u
        let array_length%0#0: uint64 = array_len(rnd#0)
        let item_index_internal%1#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L187
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@5, item_index_internal%1#2 <- block@7)
        let last#1: uint64 = φ(last#0 <- block@5, value#0 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%0#0)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L188
        let slot_contents%1#0: Encoded(uint64[]) = load(rnd#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%1#0, item_index_internal%1#1)
        let value#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%7#0: bool = (>= value#0 last#1)
        (assert tmp%7#0) // array is not sorted
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@6
    block@9: // after_for_L187
        exit 1u

subroutine test_cases.array.uint64.Contract.test_unobserved_write[routing]() -> void:
    block@0: // L191
        let arr#0: Encoded(uint64[])* = test_cases.array.uint64.create_array()
        let tmp%1#0: uint64 = array_len(arr#0)
        let last#0: uint64 = (- tmp%1#0 1u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(0u)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let updated_array%0#0: Encoded(uint64[]) = replace_value(slot_contents%0#0, last#0, encoded_value%0#0)
        store(arr#0, updated_array%0#0)
        test_cases.array.uint64.assert_last_is_zero(arr#0)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(1u)
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let updated_array%1#0: Encoded(uint64[]) = replace_value(slot_contents%1#0, last#0, encoded_value%1#0)
        store(arr#0, updated_array%1#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%2#0, last#0)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let tmp%3#0: bool = (== values%0#0 1u)
        (assert tmp%3#0)
        exit 1u

subroutine test_cases.array.uint64.Contract.__algopy_default_create() -> void:
    block@0: // L1
        return 