main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@15
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array()void" => block@3, method "test_array_extend()void" => block@4, method "test_array_multiple_append()void" => block@5, method "overhead()void" => block@6, method "test_array_too_long()void" => block@7, method "test_array_copy_and_extend()void" => block@8, method "test_array_evaluation_order()void" => block@9, method "test_allocations(uint64)void" => block@10, method "test_iteration()void" => block@11, method "test_quicksort()void" => block@12, * => block@19}
    block@3: // test_array_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#0: bool = 1u
        goto block@20
    block@4: // test_array_extend_route_L41
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#1: bool = 1u
        goto block@20
    block@5: // test_array_multiple_append_route_L53
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_multiple_append()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#2: bool = 1u
        goto block@20
    block@6: // overhead_route_L62
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#3: bool = 1u
        goto block@20
    block@7: // test_array_too_long_route_L66
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_too_long()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#4: bool = 1u
        goto block@20
    block@8: // test_array_copy_and_extend_route_L75
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_copy_and_extend()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#5: bool = 1u
        goto block@20
    block@9: // test_array_evaluation_order_route_L97
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_array_evaluation_order()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#6: bool = 1u
        goto block@20
    block@10: // test_allocations_route_L110
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%35#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        test_cases.array.uint64.Contract.test_allocations(tmp%35#0)
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#7: bool = 1u
        goto block@20
    block@11: // test_iteration_route_L116
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_iteration()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#8: bool = 1u
        goto block@20
    block@12: // test_quicksort_route_L150
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        test_cases.array.uint64.Contract.test_quicksort()
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#9: bool = 1u
        goto block@20
    block@15: // bare_routing_L4
        let tmp%44#0: uint64 = (txn OnCompletion)
        goto tmp%44#0 ? block@19 : block@16
    block@16: // __algopy_default_create_L1
        let tmp%45#0: uint64 = (txn ApplicationID)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // can only call when creating
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#10: bool = 1u
        goto block@20
    block@19: // after_if_else_L4
        let test_cases.array.uint64.Contract.__puya_arc4_router__%0#11: bool = 0u
        goto block@20
    block@20: // after_inlined_test_cases.array.uint64.Contract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.uint64.Contract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.uint64.Contract.__puya_arc4_router__%0#1 <- block@4, test_cases.array.uint64.Contract.__puya_arc4_router__%0#2 <- block@5, test_cases.array.uint64.Contract.__puya_arc4_router__%0#3 <- block@6, test_cases.array.uint64.Contract.__puya_arc4_router__%0#4 <- block@7, test_cases.array.uint64.Contract.__puya_arc4_router__%0#5 <- block@8, test_cases.array.uint64.Contract.__puya_arc4_router__%0#6 <- block@9, test_cases.array.uint64.Contract.__puya_arc4_router__%0#7 <- block@10, test_cases.array.uint64.Contract.__puya_arc4_router__%0#8 <- block@11, test_cases.array.uint64.Contract.__puya_arc4_router__%0#9 <- block@12, test_cases.array.uint64.Contract.__puya_arc4_router__%0#10 <- block@16, test_cases.array.uint64.Contract.__puya_arc4_router__%0#11 <- block@19)
        return tmp%0#0

subroutine test_cases.array.uint64.quicksort_window(arr: uint64[]*, window_left: uint64, window_right: uint64) -> void:
    block@0: // L168
        let tmp%0#0: uint64 = (+ window_left#0 window_right#0)
        let tmp%1#0: uint64 = (/ tmp%0#0 2u)
        let slot_contents%0#0: uint64[] = read(arr#0)
        let pivot#0: uint64 = slot_contents%0#0[tmp%1#0]
        goto block@1
    block@1: // while_top_L175
        let left#3: uint64 = φ(window_left#0 <- block@0, left#5 <- block@14)
        let right#4: uint64 = φ(window_right#0 <- block@0, right#5 <- block@14)
        goto block@3
    block@3: // while_top_L177
        let left#1: uint64 = φ(left#3 <- block@1, left#2 <- block@4)
        let slot_contents%1#0: uint64[] = read(arr#0)
        let tmp%2#0: uint64 = slot_contents%1#0[left#1]
        let tmp%3#0: bool = (< tmp%2#0 pivot#0)
        goto tmp%3#0 ? block@4 : block@5
    block@4: // while_body_L178
        let left#2: uint64 = (+ left#1 1u)
        goto block@3
    block@5: // after_while_L177
        goto block@6
    block@6: // while_top_L180
        let right#1: uint64 = φ(right#4 <- block@5, right#2 <- block@9)
        let slot_contents%2#0: uint64[] = read(arr#0)
        let tmp%4#0: uint64 = slot_contents%2#0[right#1]
        let tmp%5#0: bool = (< pivot#0 tmp%4#0)
        goto tmp%5#0 ? block@7 : block@10
    block@7: // while_body_L182
        goto right#1 ? block@9 : block@21
    block@9: // after_if_else_L182
        let right#2: uint64 = (- right#1 1u)
        goto block@6
    block@10: // after_while_L180
        let tmp%7#0: bool = (< left#1 right#1)
        goto tmp%7#0 ? block@11 : block@16
    block@11: // if_body_L188
        let slot_contents%3#0: uint64[] = read(arr#0)
        let tmp%8#0: uint64 = slot_contents%3#0[right#1]
        let tmp%9#0: uint64 = slot_contents%3#0[left#1]
        let updated_array%0#0: uint64[] = slot_contents%3#0[left#1] = tmp%8#0
        let updated_array%1#0: uint64[] = updated_array%0#0[right#1] = tmp%9#0
        write(arr#0, updated_array%1#0)
        let left#5: uint64 = (+ left#1 1u)
        goto right#1 ? block@13 : block@12
    block@12: // if_body_L192
        goto block@22
    block@13: // after_if_else_L191
        let right#5: uint64 = (- right#1 1u)
        let tmp%11#0: bool = (<= left#5 right#5)
        goto tmp%11#0 ? block@14 : block@15
    block@14: // if_body_L196
        goto block@1
    block@15: // after_if_else_L195
        goto block@22
    block@16: // after_if_else_L187
        let tmp%12#0: bool = (== left#1 right#1)
        goto tmp%12#0 ? block@17 : block@21
    block@17: // if_body_L202
        let left#6: uint64 = (+ left#1 1u)
        goto right#1 ? block@18 : block@19
    block@18: // if_body_L205
        let right#6: uint64 = (- right#1 1u)
        goto block@19
    block@19: // after_if_else_L204
        let right#8: uint64 = φ(right#1 <- block@17, right#6 <- block@18)
        goto block@22
    block@21: // L180
        goto block@22
    block@22: // after_while_L175
        let right#7: uint64 = φ(right#1 <- block@12, right#5 <- block@15, right#8 <- block@19, right#1 <- block@21)
        let left#8: uint64 = φ(left#5 <- block@12, left#5 <- block@15, left#6 <- block@19, left#1 <- block@21)
        let tmp%14#0: bool = (< window_left#0 right#7)
        goto tmp%14#0 ? block@23 : block@24
    block@23: // if_body_L214
        test_cases.array.uint64.quicksort_window(arr#0, window_left#0, right#7)
        goto block@24
    block@24: // after_if_else_L213
        let tmp%15#0: bool = (< left#8 window_right#0)
        goto tmp%15#0 ? block@25 : block@26
    block@25: // if_body_L217
        test_cases.array.uint64.quicksort_window(arr#0, left#8, window_right#0)
        goto block@26
    block@26: // after_if_else_L216
        return 

subroutine test_cases.array.uint64.add_x(arr: uint64[]*, x: uint64) -> void:
    block@0: // L227
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L229
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L230
        let encoded%0#0: uint64[] = encode<uint64>(i#1)
        let slot_contents%0#0: uint64[] = read(arr#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%0#0)
        write(arr#0, extended%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L229
        return 

subroutine test_cases.array.uint64.append_5_and_return(arr: uint64[]*) -> uint64[]*:
    block@0: // L239
        let encoded%0#0: uint64[] = encode<uint64>(5u)
        let slot_contents%0#0: uint64[] = read(arr#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%0#0)
        write(arr#0, extended%0#0)
        return arr#0

subroutine test_cases.array.uint64.Contract.test_array() -> void:
    block@0: // L5
        let encoded%0#0: uint64[] = encode<uint64>()
        let arr#0: uint64[]* = new()
        let tmp%0#0: uint64 = encoded%0#0.length
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0)
        let encoded%1#0: uint64[] = encode<uint64>(42u)
        let extended%0#0: uint64[] = encoded%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let tmp%2#0: uint64 = extended%0#0.length
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = extended%0#0.length
        let tmp%5#0: uint64 = (- tmp%4#0 1u)
        let tmp%6#0: uint64 = extended%0#0[tmp%5#0]
        let tmp%7#0: bool = (== tmp%6#0 42u)
        (assert tmp%7#0)
        test_cases.array.uint64.add_x(arr#0, 5u)
        let slot_contents%5#0: uint64[] = read(arr#0)
        let tmp%8#0: uint64 = slot_contents%5#0.length
        let tmp%9#0: bool = (== tmp%8#0 6u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = slot_contents%5#0.length
        let tmp%11#0: uint64 = (- tmp%10#0 1u)
        let tmp%12#0: uint64 = slot_contents%5#0[tmp%11#0]
        let tmp%13#0: bool = (== tmp%12#0 4u)
        (assert tmp%13#0)
        let encoded%2#0: uint64[] = encode<uint64>(43u)
        let extended%1#0: uint64[] = slot_contents%5#0.concat(encoded%2#0)
        write(arr#0, extended%1#0)
        let tmp%14#0: uint64 = extended%1#0.length
        let tmp%15#0: bool = (== tmp%14#0 7u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = extended%1#0.length
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let tmp%18#0: uint64 = extended%1#0[tmp%17#0]
        let tmp%19#0: bool = (== tmp%18#0 43u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = extended%1#0[0u]
        let tmp%21#0: bool = (== tmp%20#0 42u)
        (assert tmp%21#0)
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L235
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L236
        let slot_contents%0#1: uint64[] = read(arr#0)
        let (new_contents%0#0: uint64[], popped_item.0%0#0: uint64) = slot_contents%0#1.pop()
        write(arr#0, new_contents%0#0)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@4: // after_for_L235
        let slot_contents%13#0: uint64[] = read(arr#0)
        let tmp%22#0: uint64 = slot_contents%13#0.length
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = slot_contents%13#0.length
        let tmp%25#0: uint64 = (- tmp%24#0 1u)
        let tmp%26#0: uint64 = slot_contents%13#0[tmp%25#0]
        let tmp%27#0: bool = (== tmp%26#0 2u)
        (assert tmp%27#0)
        test_cases.array.uint64.add_x(arr#0, 10u)
        let slot_contents%16#0: uint64[] = read(arr#0)
        let tmp%28#0: uint64 = slot_contents%16#0.length
        let tmp%29#0: bool = (== tmp%28#0 14u)
        (assert tmp%29#0)
        let tmp%30#0: uint64 = slot_contents%16#0.length
        let tmp%31#0: uint64 = (- tmp%30#0 1u)
        let tmp%32#0: uint64 = slot_contents%16#0[tmp%31#0]
        let tmp%33#0: bool = (== tmp%32#0 9u)
        (assert tmp%33#0)
        let encoded%3#0: uint64[] = encode<uint64>(44u)
        let extended%2#0: uint64[] = slot_contents%16#0.concat(encoded%3#0)
        let tmp%34#0: uint64 = extended%2#0.length
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let tmp%36#0: uint64 = extended%2#0.length
        let tmp%37#0: uint64 = (- tmp%36#0 1u)
        let tmp%38#0: uint64 = extended%2#0[tmp%37#0]
        let tmp%39#0: bool = (== tmp%38#0 44u)
        (assert tmp%39#0)
        let encoded%0#1: uint64[] = encode<uint64>(99u)
        let extended%0#1: uint64[] = extended%2#0.concat(encoded%0#1)
        let encoded%1#1: uint64[] = encode<uint64>(100u)
        let extended%1#1: uint64[] = extended%0#1.concat(encoded%1#1)
        let tmp%41#0: uint64 = extended%1#1[0u]
        let new_box_value%0#0: uint64 = (+ tmp%41#0 2u)
        let updated_array%0#0: uint64[] = extended%1#1[0u] = new_box_value%0#0
        write(arr#0, updated_array%0#0)
        let tmp%42#0: uint64 = updated_array%0#0.length
        let tmp%43#0: bool = (== tmp%42#0 17u)
        (assert tmp%43#0)
        let tmp%44#0: uint64 = updated_array%0#0[0u]
        let tmp%45#0: bool = (== tmp%44#0 44u)
        (assert tmp%45#0)
        let tmp%46#0: uint64 = updated_array%0#0.length
        let tmp%47#0: uint64 = (- tmp%46#0 2u)
        let tmp%48#0: uint64 = updated_array%0#0[tmp%47#0]
        let tmp%49#0: bool = (== tmp%48#0 99u)
        (assert tmp%49#0)
        let tmp%50#0: uint64 = updated_array%0#0.length
        let tmp%51#0: uint64 = (- tmp%50#0 1u)
        let tmp%52#0: uint64 = updated_array%0#0[tmp%51#0]
        let tmp%53#0: bool = (== tmp%52#0 100u)
        (assert tmp%53#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_extend() -> void:
    block@0: // L41
        let encoded%0#0: uint64[] = encode<uint64>()
        let arr#0: uint64[]* = new()
        write(arr#0, encoded%0#0)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let encoded%1#0: uint64[] = encode<uint64>()
        let arr2#0: uint64[]* = new()
        let encoded%2#0: uint64[] = encode<uint64>(1u)
        let extended%0#0: uint64[] = encoded%1#0.concat(encoded%2#0)
        let encoded%3#0: uint64[] = encode<uint64>(2u)
        let extended%1#0: uint64[] = extended%0#0.concat(encoded%3#0)
        let encoded%4#0: uint64[] = encode<uint64>(3u)
        let extended%2#0: uint64[] = extended%1#0.concat(encoded%4#0)
        write(arr2#0, extended%2#0)
        let slot_contents%4#0: uint64[] = read(arr#0)
        let extended%3#0: uint64[] = slot_contents%4#0.concat(extended%2#0)
        write(arr#0, extended%3#0)
        let tmp%0#0: uint64 = extended%3#0.length
        let tmp%1#0: bool = (== tmp%0#0 4u)
        (assert tmp%1#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_multiple_append() -> void:
    block@0: // L53
        let encoded%0#0: uint64[] = encode<uint64>()
        let arr#0: uint64[]* = new()
        write(arr#0, encoded%0#0)
        test_cases.array.uint64.add_x(arr#0, 1u)
        let encoded%1#0: uint64[] = encode<uint64>(1u)
        let slot_contents%0#0: uint64[] = read(arr#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%1#0)
        let encoded%2#0: uint64[] = encode<uint64>(2u)
        let extended%1#0: uint64[] = extended%0#0.concat(encoded%2#0)
        let encoded%3#0: uint64[] = encode<uint64>(3u)
        let extended%2#0: uint64[] = extended%1#0.concat(encoded%3#0)
        write(arr#0, extended%2#0)
        let tmp%0#0: uint64 = extended%2#0.length
        let tmp%1#0: bool = (== tmp%0#0 4u)
        (assert tmp%1#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_too_long() -> void:
    block@0: // L66
        let encoded%0#0: uint64[] = encode<uint64>()
        let array#0: uint64[]* = new()
        write(array#0, encoded%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L69
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 512u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L70
        let encoded%1#0: uint64[] = encode<uint64>(i#1)
        let slot_contents%0#0: uint64[] = read(array#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%1#0)
        write(array#0, extended%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L69
        let slot_contents%1#0: uint64[] = read(array#0)
        let tmp%0#0: uint64 = slot_contents%1#0.length
        let tmp%1#0: bool = (== tmp%0#0 512u)
        (assert tmp%1#0) // array is expected length
        let encoded%2#0: uint64[] = encode<uint64>(512u)
        let extended%1#0: uint64[] = slot_contents%1#0.concat(encoded%2#0)
        write(array#0, extended%1#0)
        return 

subroutine test_cases.array.uint64.Contract.test_array_copy_and_extend() -> void:
    block@0: // L75
        let encoded%0#0: uint64[] = encode<uint64>()
        let array#0: uint64[]* = new()
        write(array#0, encoded%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L78
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L79
        let encoded%1#0: uint64[] = encode<uint64>(i#1)
        let slot_contents%0#0: uint64[] = read(array#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%1#0)
        write(array#0, extended%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L78
        let array2#0: uint64[]* = new()
        let slot_contents%1#0: uint64[] = read(array#0)
        write(array2#0, slot_contents%1#0)
        let encoded%2#0: uint64[] = encode<uint64>(5u)
        let slot_contents%2#0: uint64[] = read(array#0)
        let extended%1#0: uint64[] = slot_contents%2#0.concat(encoded%2#0)
        write(array#0, extended%1#0)
        let tmp%0#0: uint64 = extended%1#0.length
        let tmp%1#0: bool = (== tmp%0#0 6u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = extended%1#0.length
        let tmp%3#0: uint64 = (- tmp%2#0 1u)
        let tmp%4#0: uint64 = extended%1#0[tmp%3#0]
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0) // expected 5
        let slot_contents%6#0: uint64[] = read(array2#0)
        let tmp%6#0: uint64 = slot_contents%6#0.length
        let tmp%7#0: bool = (== tmp%6#0 5u)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = slot_contents%6#0.length
        let tmp%9#0: uint64 = (- tmp%8#0 1u)
        let tmp%10#0: uint64 = slot_contents%6#0[tmp%9#0]
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0) // expected 4
        let extended%2#0: uint64[] = extended%1#0.concat(slot_contents%6#0)
        write(array#0, extended%2#0)
        let tmp%12#0: uint64 = extended%2#0.length
        let tmp%13#0: bool = (== tmp%12#0 11u)
        (assert tmp%13#0)
        let slot_contents%12#0: uint64[] = read(array2#0)
        let tmp%14#0: uint64 = slot_contents%12#0.length
        let tmp%15#0: bool = (== tmp%14#0 5u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = extended%2#0.length
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let tmp%18#0: uint64 = extended%2#0[tmp%17#0]
        let tmp%19#0: bool = (== tmp%18#0 4u)
        (assert tmp%19#0) // expected 4
        let tmp%20#0: uint64 = extended%2#0[4u]
        let tmp%21#0: bool = (== tmp%20#0 4u)
        (assert tmp%21#0) // expected 4
        let tmp%22#0: uint64 = extended%2#0[5u]
        let tmp%23#0: bool = (== tmp%22#0 5u)
        (assert tmp%23#0) // expected 4
        let tmp%24#0: uint64 = extended%2#0[6u]
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // expected 4
        return 

subroutine test_cases.array.uint64.Contract.test_array_evaluation_order() -> void:
    block@0: // L97
        let encoded%0#0: uint64[] = encode<uint64>()
        let arr#0: uint64[]* = new()
        let encoded%1#0: uint64[] = encode<uint64>(1u)
        let extended%0#0: uint64[] = encoded%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let tmp%0#0: uint64[]* = test_cases.array.uint64.append_5_and_return(arr#0)
        let tmp%1#0: uint64[]* = test_cases.array.uint64.append_5_and_return(arr#0)
        let slot_contents%1#0: uint64[] = read(tmp%1#0)
        let slot_contents%2#0: uint64[] = read(tmp%0#0)
        let extended%1#0: uint64[] = slot_contents%2#0.concat(slot_contents%1#0)
        write(tmp%0#0, extended%1#0)
        let slot_contents%3#0: uint64[] = read(arr#0)
        let tmp%2#0: uint64 = slot_contents%3#0.length
        let tmp%3#0: bool = (== tmp%2#0 6u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = slot_contents%3#0[0u]
        let tmp%5#0: bool = (== tmp%4#0 1u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = slot_contents%3#0[1u]
        let tmp%7#0: bool = (== tmp%6#0 5u)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = slot_contents%3#0[2u]
        let tmp%9#0: bool = (== tmp%8#0 5u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = slot_contents%3#0[3u]
        let tmp%11#0: bool = (== tmp%10#0 1u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = slot_contents%3#0[4u]
        let tmp%13#0: bool = (== tmp%12#0 5u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = slot_contents%3#0[5u]
        let tmp%15#0: bool = (== tmp%14#0 5u)
        (assert tmp%15#0)
        return 

subroutine test_cases.array.uint64.Contract.test_allocations(num: uint64) -> void:
    block@0: // L110
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L112
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 num#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L113
        let encoded%0#0: uint64[] = encode<uint64>()
        let alloc_test#0: uint64[]* = new()
        write(alloc_test#0, encoded%0#0)
        test_cases.array.uint64.add_x(alloc_test#0, 1u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L112
        return 

subroutine test_cases.array.uint64.Contract.test_iteration() -> void:
    block@0: // L116
        let encoded%0#0: uint64[] = encode<uint64>()
        let arr#0: uint64[]* = new()
        write(arr#0, encoded%0#0)
        let val#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L119
        let val#1: uint64 = φ(val#0 <- block@0, val#2 <- block@2)
        let continue_looping%0#0: bool = (< val#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L120
        let encoded%1#0: uint64[] = encode<uint64>(val#1)
        let slot_contents%0#0: uint64[] = read(arr#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let val#2: uint64 = (+ val#1 1u)
        goto block@1
    block@4: // after_for_L119
        let slot_contents%1#0: uint64[] = read(arr#0)
        let tmp%0#0: uint64 = slot_contents%1#0.length
        let tmp%1#0: bool = (== tmp%0#0 5u)
        (assert tmp%1#0) // expected array of length 5
        let last#0: uint64 = 0u
        let array_length%0#0: uint64 = slot_contents%1#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L125
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@6)
        let last#1: uint64 = φ(last#0 <- block@4, value#0 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L126
        let slot_contents%3#0: uint64[] = read(arr#0)
        let value#0: uint64 = slot_contents%3#0[item_index_internal%0#1]
        let tmp%2#0: bool = (>= value#0 last#1)
        (assert tmp%2#0) // array is not sorted
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@8: // after_for_L125
        let slot_contents%4#0: uint64[] = read(arr#0)
        let array_length%1#0: uint64 = slot_contents%4#0.length
        let item_index_internal%1#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L130
        let idx#0: uint64 = φ(item_index_internal%1#0 <- block@8, item_index_internal%1#2 <- block@10)
        let continue_looping%2#0: bool = (< idx#0 array_length%1#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L131
        let slot_contents%5#0: uint64[] = read(arr#0)
        let value#1: uint64 = slot_contents%5#0[idx#0]
        let tmp%3#0: bool = (== value#1 idx#0)
        (assert tmp%3#0) // incorrect array value
        let item_index_internal%1#2: uint64 = (+ idx#0 1u)
        goto block@9
    block@12: // after_for_L130
        let slot_contents%6#0: uint64[] = read(arr#0)
        let array_length%2#0: uint64 = slot_contents%6#0.length
        goto block@13
    block@13: // for_header_L134
        let reverse_index_internal%2#1: uint64 = φ(array_length%2#0 <- block@12, reverse_index_internal%2#2 <- block@14)
        let last#3: uint64 = φ(last#1 <- block@12, value#2 <- block@14)
        goto reverse_index_internal%2#1 ? block@14 : block@16
    block@14: // for_body_L135
        let reverse_index_internal%2#2: uint64 = (- reverse_index_internal%2#1 1u)
        let slot_contents%7#0: uint64[] = read(arr#0)
        let value#2: uint64 = slot_contents%7#0[reverse_index_internal%2#2]
        let tmp%4#0: bool = (<= value#2 last#3)
        (assert tmp%4#0) // array is not sorted
        goto block@13
    block@16: // after_for_L134
        let arc4_arr#0: bytes = 0x0000
        let encoded%2#0: bytes[8][] = encode<bytes[8]>()
        let native_arr#0: bytes[8][]* = new()
        write(native_arr#0, encoded%2#0)
        let i#0: uint64 = 0u
        goto block@17
    block@17: // for_header_L140
        let i#1: uint64 = φ(i#0 <- block@16, i#2 <- block@18)
        let arc4_arr#1: bytes = φ(arc4_arr#0 <- block@16, arc4_arr#2 <- block@18)
        let continue_looping%4#0: bool = (< i#1 5u)
        goto continue_looping%4#0 ? block@18 : block@20
    block@18: // for_body_L141
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arc4_arr#1)
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 val_as_bytes%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#2: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let encoded%3#0: bytes[8][] = encode<bytes[8]>(val_as_bytes%0#0)
        let slot_contents%8#0: bytes[8][] = read(native_arr#0)
        let extended%1#0: bytes[8][] = slot_contents%8#0.concat(encoded%3#0)
        write(native_arr#0, extended%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@17
    block@20: // after_for_L140
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arc4_arr#1)
        let slot_contents%9#0: bytes[8][] = read(native_arr#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 slot_contents%9#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let combined_arr#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let tmp%5#0: uint64 = (extract_uint16 combined_arr#0 0u)
        let tmp%6#0: bool = (== tmp%5#0 10u)
        (assert tmp%6#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) combined_arr#0)
        let reinterpret_biguint%0#0: biguint = ((extract 0 8) array_head_and_tail%0#0) // on error: Index access is out of bounds
        let tmp%7#0: bool = (b== reinterpret_biguint%0#0 0x0000000000000000)
        (assert tmp%7#0)
        let reinterpret_biguint%2#0: biguint = ((extract 32 8) array_head_and_tail%0#0) // on error: Index access is out of bounds
        let tmp%8#0: bool = (b== reinterpret_biguint%2#0 0x0000000000000004)
        (assert tmp%8#0)
        let reinterpret_biguint%4#0: biguint = ((extract 40 8) array_head_and_tail%0#0) // on error: Index access is out of bounds
        let tmp%9#0: bool = (b== reinterpret_biguint%4#0 0x0000000000000000)
        (assert tmp%9#0)
        let reinterpret_biguint%6#0: biguint = ((extract 72 8) array_head_and_tail%0#0) // on error: Index access is out of bounds
        let tmp%10#0: bool = (b== reinterpret_biguint%6#0 0x0000000000000004)
        (assert tmp%10#0)
        return 

subroutine test_cases.array.uint64.Contract.test_quicksort() -> void:
    block@0: // L150
        let encoded%0#0: uint64[] = encode<uint64>()
        let rnd#0: uint64[]* = new()
        write(rnd#0, encoded%0#0)
        let tmp%0#0: bytes[32] = (txn Sender)
        let bytes_length%0#0: uint64 = (len tmp%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L154
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 bytes_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L155
        let tmp%1#0: uint64 = (getbyte tmp%0#0 item_index_internal%0#1)
        let encoded%1#0: uint64[] = encode<uint64>(tmp%1#0)
        let slot_contents%0#0: uint64[] = read(rnd#0)
        let extended%0#0: uint64[] = slot_contents%0#0.concat(encoded%1#0)
        write(rnd#0, extended%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L154
        let slot_contents%1#0: uint64[] = read(rnd#0)
        let tmp%2#0: uint64 = slot_contents%1#0.length
        let tmp%3#0: bool = (== tmp%2#0 32u)
        (assert tmp%3#0) // expected array of length 32
        let tmp%4#0: uint64 = slot_contents%1#0.length
        let tmp%5#0: uint64 = (- tmp%4#0 1u)
        test_cases.array.uint64.quicksort_window(rnd#0, 0u, tmp%5#0)
        let last#0: uint64 = 0u
        let slot_contents%3#0: uint64[] = read(rnd#0)
        let array_length%0#0: uint64 = slot_contents%3#0.length
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L163
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let last#1: uint64 = φ(last#0 <- block@4, value#0 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L164
        let slot_contents%4#0: uint64[] = read(rnd#0)
        let value#0: uint64 = slot_contents%4#0[item_index_internal%1#1]
        let tmp%6#0: bool = (>= value#0 last#1)
        (assert tmp%6#0) // array is not sorted
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L163
        return 