main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_implicit_conversion_abi_call(uint64[],uint64)void" => block@3, * => block@4}
    block@3: // test_implicit_conversion_abi_call_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]()
        goto block@4
    block@4: // switch_case_next_L12
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]() -> void:
    block@0: // L13
        let arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len arr#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint64[])
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let app#0: uint64 = (btoi tmp%1#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[])uint64")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let nested_arr#0: Encoded(len+(len+uint64[])[]) = 0x0000
        let array_items_count#0: uint64 = 0u
        let array_head_and_tail#0: bytes = 0x
        let aggregate%as_bytes%1#0: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#0: bytes = 0x0002
        let aggregate%head%0#0: bytes = 0x0002
        let new_head_and_tail#0: bytes = (concat 0x0002 arr#0)
        let new_head#0: bytes = 0x
        let tmp%1#1: uint64 = 0u
        let value_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L211
        let head_offset#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 0u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L212
        let item_offset#0: uint64 = (extract_uint16 0x head_offset#0)
        let tmp%3#0: uint64 = (+ 2u item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#2: bytes = (concat new_head#1 tmp%5#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@4: // after_for_L211
        let head_and_tail_length#0: uint64 = 0u
        let value_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L216
        let head_offset#1: uint64 = φ(value_internal%1#0 <- block@4, value_internal%1#2 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#1 2u)
        goto continue_looping%1#0 ? block@6 : block@7
    block@6: // for_body_L217
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#1)
        let tmp%11#0: bytes = (itob item_offset#1)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#4: bytes = (concat new_head#3 tmp%12#0)
        let value_internal%1#2: uint64 = (+ head_offset#1 2u)
        goto block@5
    block@7: // after_for_L216
        let tmp%14#0: uint64 = 1u
        let tmp%15#0: bytes = (itob 1u)
        let tmp%16#0: bytes = 0x0001
        let tmp%17#0: bytes = (concat 0x0001 new_head#3)
        let tmp%19#0: bytes = 0x
        let tmp%23#0: bytes = ((extract 2 0) new_head_and_tail#0)
        let nested_arr#1: Encoded(len+(len+uint64[])[]) = (concat tmp%17#0 tmp%23#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[][])uint64")
        ((itxn_field ApplicationArgs) nested_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let indirect_nested_arr#0: Encoded(len+((len+uint64[]),uint64)[]) = 0x0000
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call((uint64[],uint64)[])uint64")
        ((itxn_field ApplicationArgs) 0x0000)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u