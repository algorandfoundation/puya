main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L12
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_implicit_conversion_abi_call(uint64[],application)void" => block@3, * => block@10}
    block@3: // test_implicit_conversion_abi_call_route_L13
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_uint64[]%0#0: uint64[] = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%8#0: uint64 = ((txnas Applications) tmp%7#0)
        test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(reinterpret_uint64[]%0#0, tmp%8#0)
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@11
    block@6: // bare_routing_L12
        let tmp%9#0: uint64 = (txn OnCompletion)
        goto tmp%9#0 ? block@10 : block@7
    block@7: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@11
    block@10: // after_if_else_L12
        let test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#2: bool = 0u
        goto block@11
    block@11: // after_inlined_test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#1 <- block@7, test_cases.array.unused_opt_allowed.AbiCallContract.__puya_arc4_router__%0#2 <- block@10)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#4: bytes = (concat new_head#3 tmp%7#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%0#0 item_offset_adjustment#2)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call(arr: uint64[], app: uint64) -> void:
    block@0: // L13
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[])uint64")
        ((itxn_field ApplicationArgs) arr#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let result%1#0: bytes = (concat 0x0002 arr#0)
        let nested_arr#1: uint64[][] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, result%1#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(uint64[][])uint64")
        ((itxn_field ApplicationArgs) nested_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat 0x000a val_as_bytes%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 arr#0)
        let result%3#0: bytes = (concat 0x0002 encoded_tuple_buffer%3#0)
        let indirect_nested_arr#1: (uint64[],uint64)[] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, result%3#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call((uint64[],uint64)[])uint64")
        ((itxn_field ApplicationArgs) indirect_nested_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%1#0: bytes[32] = (txn Sender)
        let array%encoded%0#1: bytes[32][] = tmp%1#0
        let array%data%0#1: bytes[32][] = tmp%1#0
        let byte_len%0#0: uint64 = (len tmp%1#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 32u)
        let as_bytes%3#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%3#0)
        let address_arr#1: bytes[32][] = (concat len_16_bit%0#0 tmp%1#0)
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "dont_call(address[])void")
        ((itxn_field ApplicationArgs) address_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        itxn_begin
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) address_arr#1)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 