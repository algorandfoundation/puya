{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_bool",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        102,
                        118,
                        138,
                        158,
                        179,
                        198,
                        225
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        105,
                        121,
                        141,
                        161,
                        182,
                        201,
                        228
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1125,
                        1142,
                        1152
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        1220
                    ],
                    "errorMessage": "expected 3 bytes"
                },
                {
                    "pc": [
                        885,
                        896,
                        1000,
                        1213,
                        1310
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        1246,
                        1323
                    ],
                    "errorMessage": "expected correct value at 0"
                },
                {
                    "pc": [
                        1267,
                        1336
                    ],
                    "errorMessage": "expected correct value at 1"
                },
                {
                    "pc": [
                        1349
                    ],
                    "errorMessage": "expected correct value at 2"
                },
                {
                    "pc": [
                        1361
                    ],
                    "errorMessage": "expected correct value at 3"
                },
                {
                    "pc": [
                        554,
                        632,
                        671,
                        780,
                        808,
                        919,
                        1022,
                        1222,
                        1251,
                        1312,
                        1325,
                        1338,
                        1350
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        867,
                        888,
                        979,
                        1055,
                        1188,
                        1293
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        430,
                        489,
                        524
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEIEJABJgUEFR98dQVjb3VudAEAAAIAADEYQAADKSJnMRtBANSCBwQo18G4BPqcuXMEYDmiQAT4/WinBB8CjbEECWs6WQSNbjolNhoAjgcAfQBiAE8AOgAmABIAAiJDMRkURDEYRIgEIChMULAjQzEZFEQxGEQ2GgGIA7AWKExQsCNDMRkURDEYRDYaAReIAyQoTFCwI0MxGRREMRhENhoBF4gCmBYoTFCwI0MxGRREMRhENhoBiAJxKExQsCNDMRkURDEYRDYaAUlXABBMVxAQiAIfKExQsCNDMRkURDEYRDYaATYaAhc2GgM2GgQXiACRFihMULAjQzEZQP9fMRgURCNDigQBK0cCi/wiWUcCi/4ISRZXBgCL/ExcAElPAk8DgQcIJApJTgNMgQcIJApJTgMMQQAMiwaLBQmviwRMUIwHiweMBCKMAIsDJQhJjAKL/giMAYsCiwEMQQAgi/2LAElOAlOLBIsCSU4DTwJUjAQjCIwCi/8IjABC/9iLBIwAiYoEASJJK0cFKSJniALNiALKiALHTw4WTw4WUE8NUE8MUEsLFYFADkSBQK9PDEsBq08CTFCAEAAAAAAAAAAAAAAAAAAAAABMUIv9Fov8TFBPDBZPDBZQTwtQTwpQSwkVgUAORE8JSwSrUFBQi/8Wi/5MUE8HFk8HFlBPBlBPBVBLBBWBQA5ETwRPBKtQUFAiiwmBAwxBAD+LCIsJSU4CIQQLIQRYVxCASSRbTFcwEEsCIwhPAksBEkRLAVcACE8DgQIIFqhETFcICEsBSwILFqhEjAlC/7mLCEkVIQQKSYwCFlcGAksBUIABYbxIgAFhTL9XAJBJjABJVwAIjAEkW4wEIowFI4wHiweLAgxBAFyLCIsHIQQLIQRYRwJXAAhMJFuMBosBpEEANosAIltMIlsJjAOLBosEDEEAHIsEiwYJiwNJC0xJCwiSiwUIjAWLByMIjAdC/7CLBosECUL/4SJbiwAiWwmMA0L/yIsFjACJigIBi/6L/1BJFSUKSSMJJQtLAkwlWEmL/xJETBZXBgJPAlBJIlkjCUsBVwIATCULJVhPAhJEiYoBAYv/SIv/FSUKFlcGAov/UImKAQErRwSL/yMII4sGiwUMQQAZiwZJgQIYFIsETCoiTwJUUIwEIwiMBkL/34sERwIVi/8SREsBUBWL/4ECCxJEIowBFYwAIowDiwOLAAxBACKLBIsDI1giU4sBjAJBAAaLASMIjAKLAowBiwMjCIwDQv/WiwGMAImKAQErRwSL/yMII4sGiwUMQQARiwZJFosETFCMBCMIjAZC/+eLBBUkCkmMAIv/EkQijAEijAOLA4sADEEAJIsEiwMkCyRYK6mLAYwCQQAGiwEjCIwCiwKMAYsDIwiMA0L/1CcEiwRQSVcCABUkChZXBgJcAIwAiYoBAYv/VwIASSJMFSQKIosDiwIMQQAWiwCLA0lOAiQLW4sBCIwBIwiMA0L/4osBjACJIillRCMIKUsBZzEbMQCIAAoiKWVEFk8DTgSJIillREkjCBZLAU8CCxZQiYoAATEAMQcSKiJPAlQxADEHEyoiTwJUUEcCTwJJFScETgIkiPxVSSJZSU4DSYECEkRLARWBAxJESURMVwIASU4DSSJTKiJPAlQiUzEAMQcSEkQjTwIMRCNTKiJPAlQiUzEAMQcTEkQiiwSLAQxBABqLAosESU4CUyoiTwJUiwNMUIwDIwiMBEL/3osDSRWBBBJESVcAASJTMQAxBxISRElXAQEiUzEAMQcTEkRJVwIBIlMxADEHEhJEVwMBIlMxADEHExJEiwBJFScETgIkiPuqjACJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}