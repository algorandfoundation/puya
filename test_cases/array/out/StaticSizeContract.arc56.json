{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        178,
                        182,
                        373,
                        384,
                        602
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        90,
                        110,
                        130,
                        151,
                        170,
                        197
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        233
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        93,
                        113,
                        133,
                        154,
                        173,
                        200
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        921,
                        932,
                        942,
                        949,
                        953
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        686,
                        787
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        665,
                        766
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAIECYEBWNvdW50BBUffHUAAWExGEAAAygjZzEbQQC9ggYEKNfBuAT6nLlzBGA5okAE+P1opwQfAo2xBAlrOlk2GgCOBgBtAFIAPwAqABYAAiNDMRkURDEYRDYaAYgC/RYpTFCwIkMxGRREMRhENhoBF4gCaylMULAiQzEZFEQxGEQ2GgEXiAHmFilMULAiQzEZFEQxGEQ2GgGIAb8pTFCwIkMxGRREMRhENhoBSVcAEExXEBCIAWopTFCwIkMxGRREMRhENhoBNhoCFzYaAzYaBBeIABIWKUxQsCJDMRlA/28xGBREIkOKBAEjSSpHBSgjZ4gCnIgCmYgClk8LFoAQAAAAAAAAAAAAAAAAAAAAAExQTwsWUE8KUE8JUIv9Fov8TFBPCRZQTwgWUE8HUE8GUFCL/xaL/kxQTwUWUE8EFlBPA1BPAlBQI4sJgQMMQQA6iwiLCUlOAoFQC4FQWEmBGFtLAiIITEsBEkRMV0AQSVcACE8DgQIIFqhEVwgISwFLAgsWqESMCUL/vosISRWBUApJjAQWVwYCSwFQK7xIK0y/VwBQSYwASVcACIwBJFuMAyOMBSKMB4sHiwQMQQBciwiLB4FQC4FQWEcCVwAITCRbjAaLAaRBADaLACNbTCNbCYwCiwaLAwxBAByLA4sGCYsCSQtMSQsIkosFCIwFiwciCIwHQv+wiwaLAwlC/+EjW4sAI1sJjAJC/8iLBYwAiYoCAYv+i/9QSRUlCkkiCSULSwJMJVhXABBJi/8SREwWVwYCTwJQSSNZIglLAVcCAEwlCyVYTwISRImKAQGL/0iL/xUlChZXBgKL/1CJigEBKkcEi/8iCCKLBosFDEEAHYsGSYECGBSCAgEAAYBPAk2LBExQjAQiCIwGQv/biwQVIgpJjACL/xJEI4wBI4wDiwOLAAxBACKLBIsDIlgjVYsBjAJBAAaLASIIjAKLAowBiwMiCIwDQv/WiwGMAImKAQEqRwSL/yIIIosGiwUMQQARiwZJFosETFCMBCIIjAZC/+eLBBUkCkmMAIv/EkQjjAEjjAOLA4sADEEAMIsEiwMkCyRYVwAIgAgAAAAAAAAAABOLAYwCQQAGiwEiCIwCiwKMAYsDIgiMA0L/yIsESRUkChZXBgJMUIwAiYoBAYv/VwIASSNMFSQKI4sDiwIMQQAZiwCLA0lOAiQLJFgjW4sBCIwBIgiMA0L/34sBjACJIyhlRCIIKExnMRsjKGVEMQCIAAGJIyhlRCIIFiMoZUQjKGVECxZQiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}