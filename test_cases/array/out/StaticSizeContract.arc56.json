{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_bool",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        44
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        112
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        1247,
                        1264,
                        1274
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        1092
                    ],
                    "errorMessage": "expected 3 bytes"
                },
                {
                    "pc": [
                        791,
                        802,
                        907,
                        1085,
                        1174
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        1112,
                        1187
                    ],
                    "errorMessage": "expected correct value at 0"
                },
                {
                    "pc": [
                        1132,
                        1200
                    ],
                    "errorMessage": "expected correct value at 1"
                },
                {
                    "pc": [
                        1213
                    ],
                    "errorMessage": "expected correct value at 2"
                },
                {
                    "pc": [
                        1225
                    ],
                    "errorMessage": "expected correct value at 3"
                },
                {
                    "pc": [
                        425,
                        500,
                        539,
                        665,
                        693,
                        825,
                        929,
                        1094,
                        1115,
                        1176,
                        1189,
                        1202,
                        1214
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        681,
                        979,
                        1077
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        989
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint64>"
                },
                {
                    "pc": [
                        639,
                        713
                    ],
                    "errorMessage": "invalid number of bytes for arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>"
                },
                {
                    "pc": [
                        247,
                        255,
                        264,
                        272,
                        741,
                        865
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        770,
                        794,
                        886,
                        954,
                        1058,
                        1157
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        305,
                        364,
                        399
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAAEIEJABJgUABBUffHUFY291bnQBAAIAADEYQAADKiJnMRtBAEAxGRREMRhEggcEKNfBuAT6nLlzBGA5okAE+P1opwQfAo2xBAlrOlkEjW46JTYaAI4HAIMCDwJYAnMC7wNmA6YAMRkUMRgUEEQjQ4oEAShHAov8IllHAov+CEkWVwYAi/xMXABOAkyBBwgkCklPAoEHCCQKSU4CDEEADIsGiwUJr4sETFCMBCKMAIsDJQhJjAKL/giMAYsCiwEMQQAgi/2LAElOAlOLBIsCSU4DTwJUjAQjCIwCi/8IjABC/9iLBIwAiSJJKEcFNhoBSRUkEkQ2GgJJFSQSRBc2GgNJFSQSRDYaBEkVJBJEFyoiZ4gDxIgDwYgDvk8OFk8OFlBPDVBPDFBLCxWBQA5EgUCvTwxLAatPAkxQgBAAAAAAAAAAAAAAAAAAAAAATFBPDhZPD0xQTwwWTwwWUE8LUE8KUEsJFYFADkRPCUsEq1BQUE8HFk8ITFBPBxZPBxZQTwZQTwVQSwQVgUAORE8ETwSrUFBQIkmBAwxBADlKSU4CIQQLIQRYVxCASSRbSwIjCExLARJETFcwEElXAAhPA4ECCBaoRFcICEsBSwILFqhERQFC/8BLAUkVIQQKSUUKFlcGAksBUIABYbxIgAFhTL9XAJBJRQtJVwAIRQokW0UGIkUFI0UDSwJLCAxBAFxLAUsDIQQLIQRYRwJXAAhMJFtFBksKpEEANksKIltMIlsJRQdLA0sGDEEAHEsFSwQJSwdJC0xJCwiSSwUIRQVLAiMIRQNC/7BLA0sGCUL/4SJbSwoiWwlFB0L/yEsEFilMULAjQzYaAUkVgSASRElXABBMVxAQTEsBUEkVJQpJIwklC0sCTCVYSU8EEkRMFlcGAk8CUEkiWSMJSwFXAgBMJQslWE8CEkQpTFCwI0M2GgFJFUmBIBJESwFIJQoWVwYCTFApTFCwI0MoRwI2GgFJFSQSRBdJKEwjCCNJSwIMQQAYRwKBAhgUSwRMKyJPAlRQRQQjCEUBQv/hSwJHAhVLBklOBBJESwFQFU8CgQILEkQiRQcVRQciRQVLBEsHDEEAGksCSwUjWCJTQQAGSwUjCEUGSwQjCEUFQv/eSwUWKUxQsCNDKEcCNhoBSRUkEkQXSShMIwgjSUsCDEEAEEcCFksETFBFBCMIRQFC/+lLAhUkCklFCEsEEkQiRQYiRQVLBEsHDEEAHEsCSwUkCyRYKKlBAAZLBSMIRQZLBCMIRQVC/9wnBEsDUElXAgAVJAoWVwYCXAApTFCwI0M2GgFJIlkkC4ECCEsBFRJEVwIASSJMFSQKIklLAgxBABZLA0sBSU4CJAtbSwQIRQQjCEUBQv/jSwIWKUxQsCNDMQAxBxIrIk8CVDEAMQcTKyJPAlRQRwIVJwRLAk8CJIj8Q0lOAkkiWUlOA0mBAhJESwEVgQMSRElESwElUysiTwJUIlMxADEHEhJEIw1EgRFTKyJPAlQiUzEAMQcTEkQiSUsDDEEAGkcCJQhLBUxTKyJPAlRLA0xQRQMjCEUBQv/fSwFJFYEEEkRJVwABIlMxADEHEhJESVcBASJTMQAxBxMSRElXAgEiUzEAMQcSEkRXAwEiUzEAMQcTEkRLBEkVJwROAiSI+50pTFCwI0MiKmVEIwgqSwFnMRsxAIgACiIqZUQWTwNOBIkiKmVESSMIFksBTwILFlCJ",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}