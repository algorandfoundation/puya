{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        311,
                        322
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        76,
                        96,
                        116,
                        137
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        173
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        79,
                        99,
                        119,
                        140
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        779,
                        790,
                        796,
                        803,
                        807
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        544,
                        645
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        523,
                        624
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEIUCYEBWNvdW50BBUffHUAAWExGEAAAygiZzEbQQCBggQEKNfBuAT4/WinBB8CjbEECWs6WTYaAI4EAD8AKgAWAAIiQzEZFEQxGEQ2GgGIAn0WKUxQsCNDMRkURDEYRDYaAReIAespTFCwI0MxGRREMRhENhoBF4gBZhYpTFCwI0MxGRREMRhENhoBNhoCFzYaAzYaBBeIABIWKUxQsCNDMRlA/50xGBREI0OKBAEiSSpHBSgiZ4gCSogCR4gCRE8LFoAQAAAAAAAAAAAAAAAAAAAAAExQTwsWUE8KUE8JUIv9Fov8TFBPCRZQTwgWUE8HUE8GUFCL/xaL/kxQTwUWUE8EFlBPA1BPAlBQIosJgQMMQQA4iwiLCUlOAiULJVhJgRhbSwIjCExLARJETFdAEElXAAhPA4ECCBaoRFcICEsBSwILFqhEjAlC/8CLCEkVJQpJjAQWVwYCSwFQK7xIK0y/VwBQSYwASVcACIwBJFuMAyKMBSOMB4sHiwQMQQBaiwiLByULJVhHAlcACEwkW4wGiwGkQQA2iwAiW0wiWwmMAosGiwMMQQAciwOLBgmLAkkLTEkLCJKLBQiMBYsHIwiMB0L/sosGiwMJQv/hIluLACJbCYwCQv/IiwWMAImKAQEqRwSL/yMII4sGiwUMQQAdiwZJgQIYFIICAQABgE8CTYsETFCMBCMIjAZC/9uLBBUjCkmMAIv/EkQijAEijAOLA4sADEEAIosEiwMjWCJViwGMAkEABosBIwiMAosCjAGLAyMIjANC/9aLAYwAiYoBASpHBIv/IwgjiwaLBQxBABGLBkkWiwRMUIwEIwiMBkL/54sEFSQKSYwAi/8SRCKMASKMA4sDiwAMQQAwiwSLAyQLJFhXAAiACAAAAAAAAAAAE4sBjAJBAAaLASMIjAKLAowBiwMjCIwDQv/IiwRJFSQKFlcGAkxQjACJigEBi/9XAgBJIkwVJAoiiwOLAgxBABmLAIsDSU4CJAskWCJbiwEIjAEjCIwDQv/fiwGMAIkiKGVEIwgoTGcxGyIoZUQxACIoZUQjCBYiKGVEIihlRAsWUIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}