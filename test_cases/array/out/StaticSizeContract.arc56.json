{
    "name": "StaticSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_extend_from_arc4_tuple",
            "args": [
                {
                    "type": "((uint64,uint64),(uint64,uint64))",
                    "name": "some_more"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_bool",
            "args": [],
            "returns": {
                "type": "bool[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        206,
                        210,
                        576,
                        592,
                        596,
                        607,
                        661,
                        702
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        102,
                        118,
                        138,
                        158,
                        179,
                        198,
                        225
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        105,
                        121,
                        141,
                        161,
                        182,
                        201,
                        228
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1153,
                        1170,
                        1180
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        1240
                    ],
                    "errorMessage": "expected 3 bytes"
                },
                {
                    "pc": [
                        928,
                        1029,
                        1233
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        1264
                    ],
                    "errorMessage": "expected correct value at 0"
                },
                {
                    "pc": [
                        1286
                    ],
                    "errorMessage": "expected correct value at 1"
                },
                {
                    "pc": [
                        575,
                        654,
                        699,
                        807,
                        844,
                        948,
                        1051,
                        1242,
                        1269
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        424,
                        490,
                        532
                    ],
                    "errorMessage": "invalid size"
                },
                {
                    "pc": [
                        628,
                        816,
                        859,
                        909,
                        1008,
                        1083,
                        1215
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        437,
                        503,
                        545
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAEIEJABJgUEFR98dQVjb3VudAIAAAABADEYQAADKSJnMRtBANSCBwQo18G4BPqcuXMEYDmiQAT4/WinBB8CjbEECWs6WQSNbjolNhoAjgcAfQBiAE8AOgAmABIAAiJDMRkURDEYRIgEPChMULAjQzEZFEQxGEQ2GgGIA8wWKExQsCNDMRkURDEYRDYaAReIA0EoTFCwI0MxGRREMRhENhoBF4gCwRYoTFCwI0MxGRREMRhENhoBiAKVKExQsCNDMRkURDEYRDYaAUlXABBMVxAQiAI7KExQsCNDMRkURDEYRDYaATYaAhc2GgM2GgQXiACRFihMULAjQzEZQP9fMRgURCNDigQBK0cCi/wiWUcCi/4ISRZXBgCL/ExcAElPAk8DgQcIJApJTgNMgQcIJApJTgMMQQAMiwaLBQmviwRMUIwHiweMBCKMAIsDJQhJjAKL/giMAYsCiwEMQQAgi/2LAElOAlOLBIsCSU4DTwJUjAQjCIwCi/8IjABC/9iLBIwAiYoEASJJK0cFKSJniALpiALmiALjTw4WTw4WUEsNFYEgEkRPDVBPDFBLCxWBQA5EgUCvTwxLAatPAkxQgBAAAAAAAAAAAAAAAAAAAAAATFCL/RaL/ExQTwwWTwwWUEsLFYEgEkRPC1BPClBLCRWBQA5ETwlLBKtQUFCL/xaL/kxQTwcWTwcWUEsGFYEgEkRPBlBPBVBLBBWBQA5ETwRPBKtQUFAiiwmBAwxBADyLCIsJSU4CIQQLIQRYVxCASSRbSwIjCExLARJETFcwEElXAAhPA4ECCBaoRFcICEsBSwILFqhEjAlC/7yLCCpLAVBJVwIAFSEEChZXBgJcAIABYbxIgAFhTL9JVwCQSYwASVcACIwBJFuMBCKMBRUhBAqMAiOMB4sHiwIMQQBciwiLByEECyEEWEcCVwAITCRbjAaLAaRBADaLACJbTCJbCYwDiwaLBAxBAByLBIsGCYsDSQtMSQsIkosFCIwFiwcjCIwHQv+wiwaLBAlC/+EiW4sAIlsJjANC/8iLBYwAiYoCAYv+i/9QSRUlCiMJJQtLAUwlWEmL/xJEKk8CUElXAgAVJQoWVwYCXABJIlkjCUsBVwIATCULJVhPAhJEiYoBAYv/SCqL/1BJVwIAFSUKFlcGAlwAiYoBAStHBIv/IwgjiwaLBQxBABqLBkmBAhgUiwRMJwQiTwJUUIwEIwiMBkL/3osEFUmMAIv/EkQijAEijAOLA4sADEEAIosEiwMjWCJTiwGMAkEABosBIwiMAosCjAGLAyMIjANC/9aLAYwAiYoBAStHBIv/IwgjiwaLBQxBABGLBkkWiwRMUIwEIwiMBkL/54sEFSQKSYwAi/8SRCKMASKMA4sDiwAMQQAkiwSLAyQLJFgrqYsBjAJBAAaLASMIjAKLAowBiwMjCIwDQv/UKosEUElXAgAVJAoWVwYCXACMAImKAQGL/1cCAEkiTBUkCiKLA4sCDEEAFosAiwNJTgIkC1uLAQiMASMIjANC/+KLAYwAiSIpZUQjCClLAWcxGzEAiAAKIillRBZPA04EiSIpZURJIwgWSwFPAgsWUIkxADEHEicEIk8CVDEAMQcTJwQiTwJUUEcCFSpOAiSI/D5JIllJgQISREsBFYEDEkRJRExXAgBJIlMnBCJPAlQiUzEAMQcSEkQjTwIMRCNTJwQiTwJUIlMxADEHExJESRUqTgIkiPv4iQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}