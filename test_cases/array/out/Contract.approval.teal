#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8 0 5 512
    bytecblock 0x 0x000000000000000100000000000000020000000000000003 0x0000000000000000 0x0000000000000004
    pushbytes 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
    store 0
    // array/uint64.py:13
    // class Contract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0xa33be873 0xe0c378e9 0x366f509d 0x58351a50 0xfa99e984 0xa20e440f 0x179ac3f9 0x45dcc836 0xf17f6f0a 0x845e1b4e 0x7621cfd1 0x5661a67c // method "test_array()void", method "test_array_extend()void", method "test_array_multiple_append()void", method "overhead()void", method "test_array_too_long()void", method "test_array_copy_and_extend()void", method "test_array_evaluation_order()void", method "test_array_assignment_maximum_cursage()void", method "test_allocations(uint64)void", method "test_iteration()void", method "test_quicksort()void", method "test_unobserved_write()void"
    txna ApplicationArgs 0
    match main_test_array_route@3 main_test_array_extend_route@4 main_test_array_multiple_append_route@5 main_overhead_route@6 main_test_array_too_long_route@7 main_test_array_copy_and_extend_route@8 main_test_array_evaluation_order_route@9 main_test_array_assignment_maximum_cursage_route@10 main_test_allocations_route@11 main_test_iteration_route@12 main_test_quicksort_route@13 main_test_unobserved_write_route@14

main_after_if_else@21:
    // array/uint64.py:13
    // class Contract(arc4.ARC4Contract):
    intc_2 // 0
    return

main_test_unobserved_write_route@14:
    // array/uint64.py:193
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_unobserved_write
    intc_0 // 1
    return

main_test_quicksort_route@13:
    // array/uint64.py:176
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_quicksort
    intc_0 // 1
    return

main_test_iteration_route@12:
    // array/uint64.py:142
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_iteration
    intc_0 // 1
    return

main_test_allocations_route@11:
    // array/uint64.py:136
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/uint64.py:13
    // class Contract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/uint64.py:136
    // @arc4.abimethod()
    callsub test_allocations
    intc_0 // 1
    return

main_test_array_assignment_maximum_cursage_route@10:
    // array/uint64.py:127
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_assignment_maximum_cursage
    intc_0 // 1
    return

main_test_array_evaluation_order_route@9:
    // array/uint64.py:108
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_evaluation_order
    intc_0 // 1
    return

main_test_array_copy_and_extend_route@8:
    // array/uint64.py:86
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_copy_and_extend
    intc_0 // 1
    return

main_test_array_too_long_route@7:
    // array/uint64.py:77
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_too_long
    intc_0 // 1
    return

main_overhead_route@6:
    // array/uint64.py:73
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_test_array_multiple_append_route@5:
    // array/uint64.py:64
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_multiple_append
    intc_0 // 1
    return

main_test_array_extend_route@4:
    // array/uint64.py:52
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array_extend
    intc_0 // 1
    return

main_test_array_route@3:
    // array/uint64.py:14
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_array
    intc_0 // 1
    return

main_bare_routing@17:
    // array/uint64.py:13
    // class Contract(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.array.uint64.quicksort_window(arr: uint64, window_left: uint64, window_right: uint64) -> void:
quicksort_window:
    // array/uint64.py:203-206
    // @subroutine
    // def quicksort_window(
    //     arr: ReferenceArray[UInt64], window_left: UInt64, window_right: UInt64
    // ) -> None:
    proto 3 0
    bytec_0 // ""
    dupn 2
    // array/uint64.py:209
    // pivot = arr[(window_left + window_right) // 2]
    frame_dig -2
    frame_dig -1
    +
    pushint 2 // 2
    /
    frame_dig -3
    loads
    swap
    intc_1 // 8
    *
    extract_uint64
    frame_dig -1
    frame_dig -2

quicksort_window_while_top@3:
    // array/uint64.py:213-214
    // # move left of window towards pivot
    // while arr[left] < pivot:
    frame_dig -3
    loads
    frame_dig 5
    intc_1 // 8
    *
    dup
    frame_bury 0
    extract_uint64
    frame_dig 3
    <
    bz quicksort_window_while_top@6
    // array/uint64.py:215
    // left += 1
    frame_dig 5
    intc_0 // 1
    +
    frame_bury 5
    b quicksort_window_while_top@3

quicksort_window_while_top@6:
    // array/uint64.py:216-217
    // # move right of window towards pivot
    // while pivot < arr[right]:
    frame_dig -3
    loads
    frame_dig 4
    intc_1 // 8
    *
    dup
    frame_bury 1
    extract_uint64
    frame_dig 3
    >
    bz quicksort_window_after_while@10
    // array/uint64.py:218-219
    // # break out of loop if right would go negative
    // if not right:
    frame_dig 4
    bz quicksort_window_after_while@22
    // array/uint64.py:221
    // right -= 1
    frame_dig 4
    intc_0 // 1
    -
    frame_bury 4
    b quicksort_window_while_top@6

quicksort_window_after_while@22:
    // array/uint64.py:249-250
    // # sort left half of window
    // if window_left < right:
    frame_dig -2
    frame_dig 4
    <
    bz quicksort_window_after_if_else@24
    // array/uint64.py:251
    // quicksort_window(arr, window_left, right)
    frame_dig -3
    frame_dig -2
    frame_dig 4
    callsub quicksort_window

quicksort_window_after_if_else@24:
    // array/uint64.py:252-253
    // # sort right half of window
    // if left < window_right:
    frame_dig 5
    frame_dig -1
    <
    bz quicksort_window_after_if_else@26
    // array/uint64.py:254
    // quicksort_window(arr, left, window_right)
    frame_dig -3
    frame_dig 5
    frame_dig -1
    callsub quicksort_window

quicksort_window_after_if_else@26:
    retsub

quicksort_window_after_while@10:
    // array/uint64.py:223-224
    // # if window isn't empty then swap values and move window in
    // if left < right:
    frame_dig 5
    frame_dig 4
    <
    bz quicksort_window_after_if_else@16
    // array/uint64.py:225
    // arr[left], arr[right] = arr[right], arr[left]
    frame_dig -3
    loads
    dup
    frame_dig 1
    dup
    cover 3
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    dig 1
    frame_dig 0
    dup
    cover 3
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    cover 3
    replace3
    cover 2
    replace3
    frame_dig -3
    swap
    stores
    // array/uint64.py:226
    // left += 1
    frame_dig 5
    intc_0 // 1
    +
    frame_bury 5
    // array/uint64.py:227-228
    // # break out of loop if right would go negative
    // if not right:
    frame_dig 4
    bz quicksort_window_after_while@22
    // array/uint64.py:230
    // right -= 1
    frame_dig 4
    intc_0 // 1
    -
    dup
    frame_bury 4
    // array/uint64.py:231-232
    // # explicit continue to avoid hitting outer break
    // if left <= right:
    frame_dig 5
    >=
    bnz quicksort_window_while_top@3
    b quicksort_window_after_while@22

quicksort_window_after_if_else@16:
    // array/uint64.py:237-238
    // # if window is just one item, don't bother swapping, but still adjust window
    // if left == right:
    frame_dig 5
    frame_dig 4
    ==
    bz quicksort_window_after_while@22
    // array/uint64.py:239
    // left += 1
    frame_dig 5
    intc_0 // 1
    +
    frame_bury 5
    frame_dig 4
    dup
    frame_bury 2
    // array/uint64.py:240-241
    // # don't decrement right if it would go negative
    // if right:
    bz quicksort_window_after_if_else@19
    // array/uint64.py:242
    // right -= 1
    frame_dig 4
    intc_0 // 1
    -
    frame_bury 2

quicksort_window_after_if_else@19:
    frame_dig 2
    frame_bury 4
    // array/uint64.py:243-245
    // # loop always ends in this scenario
    // # and an explict break consumes fewer ops
    // break
    b quicksort_window_after_while@22


// test_cases.array.uint64.create_array() -> uint64:
create_array:
    // array/uint64.py:257-258
    // @subroutine(inline=False)
    // def create_array() -> ReferenceArray[UInt64]:
    proto 0 1
    // array/uint64.py:259
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // array/uint64.py:260
    // for i in urange(5):
    intc_2 // 0

create_array_for_header@1:
    // array/uint64.py:260
    // for i in urange(5):
    frame_dig 1
    intc_3 // 5
    <
    bz create_array_after_for@4
    // array/uint64.py:261
    // arr.append(i)
    frame_dig 0
    dup
    loads
    frame_dig 1
    dup
    cover 3
    itob
    concat // on error: max array length exceeded
    stores
    // array/uint64.py:260
    // for i in urange(5):
    intc_0 // 1
    +
    frame_bury 1
    b create_array_for_header@1

create_array_after_for@4:
    // array/uint64.py:262
    // return arr
    retsub


// test_cases.array.uint64.assert_last_is_zero(arr: uint64) -> void:
assert_last_is_zero:
    // array/uint64.py:265-266
    // @subroutine(inline=False)
    // def assert_last_is_zero(arr: ReferenceArray[UInt64]) -> None:
    proto 1 0
    // array/uint64.py:267
    // assert arr[arr.length - 1] == 0
    frame_dig -1
    loads
    dup
    len
    intc_1 // 8
    /
    intc_0 // 1
    -
    intc_1 // 8
    *
    extract_uint64
    !
    assert
    retsub


// test_cases.array.uint64.add_x(arr: uint64, x: uint64) -> void:
add_x:
    // array/uint64.py:279-280
    // @subroutine
    // def add_x(arr: ReferenceArray[UInt64], x: UInt64) -> None:
    proto 2 0
    // array/uint64.py:281
    // for i in urange(x):
    intc_2 // 0

add_x_for_header@1:
    // array/uint64.py:281
    // for i in urange(x):
    frame_dig 0
    frame_dig -1
    <
    bz add_x_after_for@4
    // array/uint64.py:282
    // arr.append(i)
    frame_dig -2
    loads
    frame_dig 0
    dup
    cover 2
    itob
    concat // on error: max array length exceeded
    frame_dig -2
    swap
    stores
    // array/uint64.py:281
    // for i in urange(x):
    intc_0 // 1
    +
    frame_bury 0
    b add_x_for_header@1

add_x_after_for@4:
    retsub


// test_cases.array.uint64.append_length_and_return(arr: uint64) -> uint64:
append_length_and_return:
    // array/uint64.py:293-294
    // @subroutine
    // def append_length_and_return(arr: ReferenceArray[UInt64]) -> ReferenceArray[UInt64]:
    proto 1 1
    // array/uint64.py:295
    // arr.append(arr.length)
    frame_dig -1
    loads
    dup
    len
    intc_1 // 8
    /
    itob
    concat // on error: max array length exceeded
    frame_dig -1
    swap
    stores
    // array/uint64.py:296
    // return arr
    frame_dig -1
    retsub


// test_cases.array.uint64.Contract.test_array() -> void:
test_array:
    // array/uint64.py:14-15
    // @arc4.abimethod()
    // def test_array(self) -> None:
    proto 0 0
    // array/uint64.py:16
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    // array/uint64.py:19
    // arr.append(UInt64(42))
    pushint 42 // 42
    itob
    dig 1
    swap
    stores
    // array/uint64.py:23
    // add_x(arr, UInt64(5))
    dup
    intc_3 // 5
    callsub add_x
    // array/uint64.py:24
    // assert arr.length == 6
    loads
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 6 // 6
    ==
    assert
    // array/uint64.py:25
    // assert arr[-1] == 4
    intc_0 // 1
    -
    intc_1 // 8
    *
    extract_uint64
    pushint 4 // 4
    ==
    assert
    // array/uint64.py:27
    // pop_x(arr, x=UInt64(3), expected=UInt64(4))
    pushint 4 // 4
    // array/uint64.py:287
    // for _i in urange(x):
    intc_2 // 0

test_array_for_header@2:
    // array/uint64.py:287
    // for _i in urange(x):
    frame_dig 2
    // array/uint64.py:27
    // pop_x(arr, x=UInt64(3), expected=UInt64(4))
    pushint 3 // 3
    // array/uint64.py:287
    // for _i in urange(x):
    <
    bz test_array_after_for@4
    // array/uint64.py:288
    // popped = arr.pop()
    frame_dig 0
    dup
    loads
    dup
    len
    dup
    intc_1 // 8
    /
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 2
    swap
    extract_uint64
    swap
    // array/uint64.py:288
    // popped = arr.pop()
    intc_1 // 8
    -
    uncover 2
    intc_2 // 0
    uncover 2
    substring3
    // array/uint64.py:288
    // popped = arr.pop()
    uncover 2
    swap
    stores
    // array/uint64.py:289
    // assert popped == expected
    frame_dig 1
    dup
    cover 2
    ==
    assert
    // array/uint64.py:290
    // expected -= 1
    intc_0 // 1
    -
    frame_bury 1
    // array/uint64.py:287
    // for _i in urange(x):
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b test_array_for_header@2

test_array_after_for@4:
    // array/uint64.py:28
    // assert arr.length == 3
    frame_dig 0
    dup
    loads
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 3 // 3
    ==
    assert
    // array/uint64.py:29
    // assert arr[-1] == 1
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    intc_0 // 1
    ==
    assert
    // array/uint64.py:31
    // arr.append(UInt64(43))
    pushint 43 // 43
    itob
    concat // on error: max array length exceeded
    dup2
    stores
    // array/uint64.py:32
    // assert arr.length == 4
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 4 // 4
    ==
    assert
    // array/uint64.py:33
    // assert arr[-1] == 43
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 43 // 43
    ==
    assert
    // array/uint64.py:34
    // assert arr[0] == 42
    intc_2 // 0
    extract_uint64
    pushint 42 // 42
    ==
    assert
    // array/uint64.py:36
    // add_x(arr, UInt64(10))
    dup
    pushint 10 // 10
    callsub add_x
    // array/uint64.py:37
    // assert arr.length == 14
    dup
    loads
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 14 // 14
    ==
    assert
    // array/uint64.py:38
    // assert arr[-1] == 9
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 9 // 9
    ==
    assert
    // array/uint64.py:40
    // arr.append(UInt64(44))
    pushint 44 // 44
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:41
    // assert arr.length == 15
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 15 // 15
    ==
    assert
    // array/uint64.py:42
    // assert arr[-1] == 44
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 44 // 44
    ==
    assert
    // array/uint64.py:274
    // arr.append(UInt64(99))
    pushint 99 // 99
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:275
    // arr2.append(UInt64(100))
    pushint 100 // 100
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:44
    // return_ref(arr, arr)[0] += 2
    dup
    intc_2 // 0
    extract_uint64
    pushint 2 // 2
    +
    itob
    replace2 0
    // array/uint64.py:45
    // assert arr.length == 17
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 17 // 17
    ==
    assert
    // array/uint64.py:46
    // assert arr[0] == 44
    dig 1
    intc_2 // 0
    extract_uint64
    pushint 44 // 44
    ==
    assert
    // array/uint64.py:47
    // assert arr[-2] == 99
    dup
    pushint 2 // 2
    -
    intc_1 // 8
    *
    dig 2
    swap
    extract_uint64
    pushint 99 // 99
    ==
    assert
    // array/uint64.py:48
    // assert arr[-1] == 100
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 100 // 100
    ==
    assert
    // array/uint64.py:50
    // assert arr.pop(0) == 44
    extract 8 0
    stores
    retsub


// test_cases.array.uint64.Contract.test_array_extend() -> void:
test_array_extend:
    // array/uint64.py:54
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // array/uint64.py:55
    // add_x(arr, UInt64(1))
    dup
    intc_0 // 1
    callsub add_x
    // array/uint64.py:59
    // arr2.append(UInt64(3))
    bytec_1 // 0x000000000000000100000000000000020000000000000003
    pop
    // array/uint64.py:61
    // arr.extend(arr2)
    dup
    loads
    // array/uint64.py:59
    // arr2.append(UInt64(3))
    bytec_1 // 0x000000000000000100000000000000020000000000000003
    // array/uint64.py:61
    // arr.extend(arr2)
    concat // on error: max array length exceeded
    swap
    dig 1
    stores
    // array/uint64.py:62
    // assert arr.length == 4
    len
    intc_1 // 8
    /
    pushint 4 // 4
    ==
    assert
    retsub


// test_cases.array.uint64.Contract.test_array_multiple_append() -> void:
test_array_multiple_append:
    // array/uint64.py:66
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // array/uint64.py:67
    // add_x(arr, UInt64(1))
    dup
    intc_0 // 1
    callsub add_x
    // array/uint64.py:68
    // arr.append(UInt64(1))
    dup
    loads
    intc_0 // 1
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:69
    // arr.append(UInt64(2))
    pushint 2 // 2
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:70
    // arr.append(UInt64(3))
    pushint 3 // 3
    itob
    concat // on error: max array length exceeded
    swap
    dig 1
    stores
    // array/uint64.py:71
    // assert arr.length == 4
    len
    intc_1 // 8
    /
    pushint 4 // 4
    ==
    assert
    retsub


// test_cases.array.uint64.Contract.test_array_too_long() -> void:
test_array_too_long:
    // array/uint64.py:77-78
    // @arc4.abimethod()
    // def test_array_too_long(self) -> None:
    proto 0 0
    // array/uint64.py:79
    // array = ReferenceArray[UInt64]()
    bytec_0 // 0x
    // array/uint64.py:80
    // for i in urange(512):
    intc_2 // 0

test_array_too_long_for_header@1:
    // array/uint64.py:80
    // for i in urange(512):
    frame_dig 1
    intc 4 // 512
    <
    bz test_array_too_long_after_for@4
    frame_dig 0
    // array/uint64.py:81
    // array.append(i)
    frame_dig 1
    dup
    cover 2
    itob
    concat // on error: max array length exceeded
    frame_bury 0
    // array/uint64.py:80
    // for i in urange(512):
    intc_0 // 1
    +
    frame_bury 1
    b test_array_too_long_for_header@1

test_array_too_long_after_for@4:
    frame_dig 0
    // array/uint64.py:82
    // assert array.length == 512, "array is expected length"
    dup
    len
    intc_1 // 8
    /
    intc 4 // 512
    ==
    assert // array is expected length
    // array/uint64.py:84
    // array.append(UInt64(512))  # this will fail
    intc 4 // 512
    itob
    concat // on error: max array length exceeded
    pop
    retsub


// test_cases.array.uint64.Contract.test_array_copy_and_extend() -> void:
test_array_copy_and_extend:
    // array/uint64.py:86-87
    // @arc4.abimethod()
    // def test_array_copy_and_extend(self) -> None:
    proto 0 0
    // array/uint64.py:88
    // array = ReferenceArray[UInt64]()
    bytec_0 // 0x
    // array/uint64.py:89
    // for i in urange(5):
    intc_2 // 0

test_array_copy_and_extend_for_header@1:
    // array/uint64.py:89
    // for i in urange(5):
    frame_dig 1
    intc_3 // 5
    <
    bz test_array_copy_and_extend_after_for@4
    frame_dig 0
    // array/uint64.py:90
    // array.append(i)
    frame_dig 1
    dup
    cover 2
    itob
    concat // on error: max array length exceeded
    frame_bury 0
    // array/uint64.py:89
    // for i in urange(5):
    intc_0 // 1
    +
    frame_bury 1
    b test_array_copy_and_extend_for_header@1

test_array_copy_and_extend_after_for@4:
    frame_dig 0
    dup
    // array/uint64.py:93
    // array.append(UInt64(5))
    intc_3 // 5
    itob
    concat // on error: max array length exceeded
    // array/uint64.py:94
    // assert array.length == 6
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 6 // 6
    ==
    assert
    // array/uint64.py:95
    // assert array[-1] == 5, "expected 5"
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    intc_3 // 5
    ==
    assert // expected 5
    dig 1
    // array/uint64.py:97
    // assert array2.length == 5
    dup
    len
    intc_1 // 8
    /
    dup
    intc_3 // 5
    ==
    assert
    // array/uint64.py:98
    // assert array2[-1] == 4, "expected 4"
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 4 // 4
    ==
    assert // expected 4
    // array/uint64.py:100
    // array.extend(array2)
    concat // on error: max array length exceeded
    // array/uint64.py:101
    // assert array.length == 11
    dup
    len
    intc_1 // 8
    /
    dup
    pushint 11 // 11
    ==
    assert
    uncover 2
    // array/uint64.py:102
    // assert array2.length == 5
    len
    intc_1 // 8
    /
    intc_3 // 5
    ==
    assert
    // array/uint64.py:103
    // assert array[-1] == 4, "expected 4"
    intc_0 // 1
    -
    intc_1 // 8
    *
    dig 1
    swap
    extract_uint64
    pushint 4 // 4
    ==
    assert // expected 4
    // array/uint64.py:104
    // assert array[4] == 4, "expected 4"
    dup
    pushint 32 // 32
    extract_uint64
    pushint 4 // 4
    ==
    assert // expected 4
    // array/uint64.py:105
    // assert array[5] == 5, "expected 4"
    dup
    pushint 40 // 40
    extract_uint64
    intc_3 // 5
    ==
    assert // expected 4
    // array/uint64.py:106
    // assert array[6] == 0, "expected 4"
    pushint 48 // 48
    extract_uint64
    !
    assert // expected 4
    retsub


// test_cases.array.uint64.Contract.test_array_evaluation_order() -> void:
test_array_evaluation_order:
    // array/uint64.py:110
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    // array/uint64.py:111
    // arr.append(UInt64(3))
    pushint 3 // 3
    itob
    dig 1
    swap
    stores
    // array/uint64.py:112
    // append_length_and_return(arr).extend(append_length_and_return(arr))
    dup
    callsub append_length_and_return
    dig 1
    callsub append_length_and_return
    loads
    dig 1
    loads
    swap
    concat // on error: max array length exceeded
    stores
    // array/uint64.py:113
    // assert arr.length == 6
    dup
    loads
    dup
    len
    intc_1 // 8
    /
    pushint 6 // 6
    ==
    assert
    // array/uint64.py:114
    // assert arr[0] == 3
    dup
    intc_2 // 0
    extract_uint64
    pushint 3 // 3
    ==
    assert
    // array/uint64.py:115
    // assert arr[1] == 1
    dup
    intc_1 // 8
    extract_uint64
    intc_0 // 1
    ==
    assert
    // array/uint64.py:116
    // assert arr[2] == 2
    dup
    pushint 16 // 16
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // array/uint64.py:117
    // assert arr[3] == 3
    dup
    pushint 24 // 24
    extract_uint64
    pushint 3 // 3
    ==
    assert
    // array/uint64.py:118
    // assert arr[4] == 1
    dup
    pushint 32 // 32
    extract_uint64
    intc_0 // 1
    ==
    assert
    // array/uint64.py:119
    // assert arr[5] == 2
    pushint 40 // 40
    extract_uint64
    pushint 2 // 2
    ==
    assert
    // array/uint64.py:121
    // arr[append_length_and_return(arr)[0]] = append_length_and_return(arr)[-1]
    dup
    callsub append_length_and_return
    loads
    dup
    len
    intc_1 // 8
    /
    intc_0 // 1
    -
    intc_1 // 8
    *
    intc_1 // 8
    extract3 // on error: index access is out of bounds
    dig 1
    callsub append_length_and_return
    loads
    intc_2 // 0
    extract_uint64
    dig 2
    loads
    swap
    intc_1 // 8
    *
    uncover 2
    replace3
    swap
    dig 1
    stores
    // array/uint64.py:122
    // assert arr.length == 8
    dup
    len
    intc_1 // 8
    /
    intc_1 // 8
    ==
    assert
    // array/uint64.py:123
    // assert arr[6] == 6
    dup
    pushint 48 // 48
    extract_uint64
    pushint 6 // 6
    ==
    assert
    // array/uint64.py:124
    // assert arr[7] == 7
    dup
    pushint 56 // 56
    extract_uint64
    pushint 7 // 7
    ==
    assert
    // array/uint64.py:125
    // assert arr[3] == 6
    pushint 24 // 24
    extract_uint64
    pushint 6 // 6
    ==
    assert
    retsub


// test_cases.array.uint64.Contract.test_array_assignment_maximum_cursage() -> void:
test_array_assignment_maximum_cursage:
    // array/uint64.py:129
    // arr = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    // array/uint64.py:130
    // arr.append(UInt64(3))
    pushint 3 // 3
    itob
    dig 1
    swap
    stores
    // array/uint64.py:131
    // append_length_and_return(arr)[0] = UInt64(42)
    dup
    callsub append_length_and_return
    pushint 42 // 42
    itob
    dig 1
    loads
    swap
    replace2 0
    stores
    // array/uint64.py:132
    // assert arr.length == 2
    loads
    dup
    len
    intc_1 // 8
    /
    pushint 2 // 2
    ==
    assert
    // array/uint64.py:133
    // assert arr[0] == 42
    dup
    intc_2 // 0
    extract_uint64
    pushint 42 // 42
    ==
    assert
    // array/uint64.py:134
    // assert arr[1] == 1
    intc_1 // 8
    extract_uint64
    intc_0 // 1
    ==
    assert
    retsub


// test_cases.array.uint64.Contract.test_allocations(num: uint64) -> void:
test_allocations:
    // array/uint64.py:136-137
    // @arc4.abimethod()
    // def test_allocations(self, num: UInt64) -> None:
    proto 1 0
    // array/uint64.py:138
    // for _i in urange(num):
    intc_2 // 0

test_allocations_for_header@1:
    // array/uint64.py:138
    // for _i in urange(num):
    frame_dig 0
    frame_dig -1
    <
    bz test_allocations_after_for@4
    // array/uint64.py:139
    // alloc_test = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // array/uint64.py:140
    // add_x(alloc_test, UInt64(1))
    intc_0 // 1
    callsub add_x
    // array/uint64.py:138
    // for _i in urange(num):
    frame_dig 0
    intc_0 // 1
    +
    frame_bury 0
    b test_allocations_for_header@1

test_allocations_after_for@4:
    retsub


// test_cases.array.uint64.Contract.test_iteration() -> void:
test_iteration:
    // array/uint64.py:142-143
    // @arc4.abimethod()
    // def test_iteration(self) -> None:
    proto 0 0
    intc_2 // 0
    dup
    bytec_0 // ""
    // array/uint64.py:144
    // arr = ReferenceArray[UInt64]()
    dupn 7
    // array/uint64.py:145
    // for val in urange(5):
    intc_2 // 0

test_iteration_for_header@1:
    // array/uint64.py:145
    // for val in urange(5):
    frame_dig 10
    intc_3 // 5
    <
    bz test_iteration_after_for@4
    frame_dig 9
    // array/uint64.py:146
    // arr.append(val)
    frame_dig 10
    dup
    cover 2
    itob
    concat // on error: max array length exceeded
    frame_bury 9
    // array/uint64.py:145
    // for val in urange(5):
    intc_0 // 1
    +
    frame_bury 10
    b test_iteration_for_header@1

test_iteration_after_for@4:
    frame_dig 9
    // array/uint64.py:147
    // assert arr.length == 5, "expected array of length 5"
    len
    intc_1 // 8
    /
    dup
    frame_bury 2
    intc_3 // 5
    ==
    assert // expected array of length 5
    // array/uint64.py:149-150
    // # iterate
    // last = UInt64(0)
    intc_2 // 0
    frame_bury 7
    intc_2 // 0
    frame_bury 6

test_iteration_for_header@5:
    // array/uint64.py:151
    // for value in arr:
    frame_dig 6
    frame_dig 2
    <
    bz test_iteration_after_for@8
    frame_dig 9
    frame_dig 6
    dup
    cover 2
    intc_1 // 8
    *
    extract_uint64
    // array/uint64.py:152
    // assert value >= last, "array is not sorted"
    dup
    frame_dig 7
    >=
    assert // array is not sorted
    swap
    intc_0 // 1
    +
    frame_bury 6
    frame_bury 7
    b test_iteration_for_header@5

test_iteration_after_for@8:
    frame_dig 9
    // array/uint64.py:155-156
    // # enumerate
    // for idx, value in uenumerate(arr):
    len
    intc_1 // 8
    /
    frame_bury 3
    intc_2 // 0
    frame_bury 5

test_iteration_for_header@9:
    // array/uint64.py:155-156
    // # enumerate
    // for idx, value in uenumerate(arr):
    frame_dig 5
    frame_dig 3
    <
    bz test_iteration_after_for@12
    frame_dig 9
    frame_dig 5
    dup
    cover 2
    intc_1 // 8
    *
    extract_uint64
    // array/uint64.py:157
    // assert value == idx, "incorrect array value"
    dig 1
    ==
    assert // incorrect array value
    intc_0 // 1
    +
    frame_bury 5
    b test_iteration_for_header@9

test_iteration_after_for@12:
    frame_dig 9
    // array/uint64.py:159-160
    // # reverse
    // for value in reversed(arr):
    len
    intc_1 // 8
    /
    frame_bury 8

test_iteration_for_header@13:
    // array/uint64.py:159-160
    // # reverse
    // for value in reversed(arr):
    frame_dig 8
    bz test_iteration_after_for@16
    frame_dig 8
    intc_0 // 1
    -
    dup
    frame_bury 8
    frame_dig 9
    swap
    intc_1 // 8
    *
    extract_uint64
    // array/uint64.py:161
    // assert value <= last, "array is not sorted"
    dup
    frame_dig 7
    <=
    assert // array is not sorted
    frame_bury 7
    b test_iteration_for_header@13

test_iteration_after_for@16:
    // array/uint64.py:164
    // arc4_arr = arc4.DynamicArray[arc4.UInt64]()
    pushbytes 0x0000
    frame_bury 0
    // array/uint64.py:144
    // arr = ReferenceArray[UInt64]()
    bytec_0 // 0x
    frame_bury 1
    // array/uint64.py:166
    // for i in urange(5):
    intc_2 // 0
    frame_bury 4

test_iteration_for_header@17:
    // array/uint64.py:166
    // for i in urange(5):
    frame_dig 4
    intc_3 // 5
    <
    bz test_iteration_after_for@20
    // array/uint64.py:167
    // arc4_arr.append(arc4.UInt64(i))
    frame_dig 4
    dup
    itob
    frame_dig 0
    dig 1
    concat // on error: max array length exceeded
    dup
    intc_2 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    frame_bury 0
    frame_dig 1
    // array/uint64.py:168
    // native_arr.append(arc4.UInt64(i))
    swap
    concat // on error: max array length exceeded
    frame_bury 1
    // array/uint64.py:166
    // for i in urange(5):
    intc_0 // 1
    +
    frame_bury 4
    b test_iteration_for_header@17

test_iteration_after_for@20:
    frame_dig 1
    // array/uint64.py:169
    // combined_arr = arc4_arr + native_arr
    dup
    len
    intc_1 // 8
    /
    frame_dig 0
    uncover 2
    concat // on error: max array length exceeded
    dup
    intc_2 // 0
    extract_uint16
    uncover 2
    +
    itob
    extract 6 2
    replace2 0
    // array/uint64.py:170
    // assert combined_arr.length == 10
    dup
    intc_2 // 0
    extract_uint16
    pushint 10 // 10
    ==
    assert
    // array/uint64.py:171
    // assert combined_arr[0] == 0
    dup
    extract 2 8
    bytec_2 // 0x0000000000000000
    b==
    assert
    // array/uint64.py:172
    // assert combined_arr[4] == 4
    dup
    extract 34 8
    bytec_3 // 0x0000000000000004
    b==
    assert
    // array/uint64.py:173
    // assert combined_arr[5] == 0
    dup
    extract 42 8
    bytec_2 // 0x0000000000000000
    b==
    assert
    // array/uint64.py:174
    // assert combined_arr[9] == 4
    extract 74 8
    bytec_3 // 0x0000000000000004
    b==
    assert
    retsub


// test_cases.array.uint64.Contract.test_quicksort() -> void:
test_quicksort:
    // array/uint64.py:176-177
    // @arc4.abimethod()
    // def test_quicksort(self) -> None:
    proto 0 0
    bytec_0 // ""
    dupn 2
    // array/uint64.py:178-179
    // # create pseudo random array from sender address
    // rnd = ReferenceArray[UInt64]()
    callsub _puya_lib.mem.new_slot
    dup
    bytec_0 // 0x
    stores
    // array/uint64.py:180
    // for b in Txn.sender.bytes:
    txn Sender
    intc_2 // 0

test_quicksort_for_header@1:
    // array/uint64.py:180
    // for b in Txn.sender.bytes:
    frame_dig 5
    pushint 32 // 32
    <
    bz test_quicksort_after_for@4
    // array/uint64.py:181
    // rnd.append(op.btoi(b))
    frame_dig 4
    frame_dig 5
    dup
    cover 2
    getbyte
    frame_dig 3
    dup
    cover 2
    loads
    swap
    itob
    concat // on error: max array length exceeded
    stores
    intc_0 // 1
    +
    frame_bury 5
    b test_quicksort_for_header@1

test_quicksort_after_for@4:
    // array/uint64.py:182
    // assert rnd.length == 32, "expected array of length 32"
    frame_dig 3
    dup
    loads
    len
    intc_1 // 8
    /
    dup
    pushint 32 // 32
    ==
    assert // expected array of length 32
    // array/uint64.py:184-185
    // # sort the array
    // quicksort_window(rnd, UInt64(0), rnd.length - 1)
    intc_0 // 1
    -
    dig 1
    intc_2 // 0
    uncover 2
    callsub quicksort_window
    // array/uint64.py:187-188
    // # array should now be in ascending order
    // last = UInt64(0)
    intc_2 // 0
    frame_bury 2
    // array/uint64.py:189
    // for value in rnd:
    loads
    len
    intc_1 // 8
    /
    frame_bury 0
    intc_2 // 0
    frame_bury 1

test_quicksort_for_header@5:
    // array/uint64.py:189
    // for value in rnd:
    frame_dig 1
    frame_dig 0
    <
    bz test_quicksort_after_for@8
    frame_dig 3
    loads
    frame_dig 1
    dup
    cover 2
    intc_1 // 8
    *
    extract_uint64
    // array/uint64.py:190
    // assert value >= last, "array is not sorted"
    dup
    frame_dig 2
    >=
    assert // array is not sorted
    swap
    intc_0 // 1
    +
    frame_bury 1
    frame_bury 2
    b test_quicksort_for_header@5

test_quicksort_after_for@8:
    retsub


// test_cases.array.uint64.Contract.test_unobserved_write() -> void:
test_unobserved_write:
    // array/uint64.py:195
    // arr = create_array()
    callsub create_array
    // array/uint64.py:196
    // last = arr.length - 1
    dup
    loads
    dup
    len
    intc_1 // 8
    /
    intc_0 // 1
    -
    // array/uint64.py:197
    // arr[last] = UInt64(0)  # write
    intc_2 // 0
    itob
    swap
    intc_1 // 8
    *
    uncover 2
    dig 1
    uncover 3
    replace3
    dig 2
    swap
    stores
    // array/uint64.py:198
    // assert_last_is_zero(arr)
    dig 1
    callsub assert_last_is_zero
    // array/uint64.py:199
    // arr[last] = UInt64(1)  # write
    intc_0 // 1
    itob
    dig 2
    loads
    dig 2
    uncover 2
    replace3
    uncover 2
    dig 1
    stores
    // array/uint64.py:200
    // assert arr[last] == 1
    swap
    extract_uint64
    intc_0 // 1
    ==
    assert
    retsub


// _puya_lib.mem.new_slot() -> uint64:
_puya_lib.mem.new_slot:
    load 0
    bitlen
    load 0
    pushint 256 // 256
    dig 2
    -
    intc_2 // 0
    setbit // on error: no available slots
    store 0
    retsub
