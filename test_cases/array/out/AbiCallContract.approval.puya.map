{
  "version": 3,
  "sources": [
    "../unused_opt_allowed.py"
  ],
  "mappings": ";;;;;;;AAWA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKG;;;AAAA;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAGa;;;;AAAA;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACb;;;;;;;;AAAA;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAIA;;;AAAA;;;;;;;;AAFsB;;;;;;AAEtB;;;AAAA;;;AAAA;AAbH;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 2 6 8"
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "bz main___algopy_default_create@5",
      "stack_out": []
    },
    "12": {
      "op": "pushbytes 0x06598bc6 // method \"test_implicit_conversion_abi_call(uint64[],uint64)void\"",
      "defined_out": [
        "Method(test_implicit_conversion_abi_call(uint64[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_implicit_conversion_abi_call(uint64[],uint64)void)"
      ]
    },
    "18": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_implicit_conversion_abi_call(uint64[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_implicit_conversion_abi_call(uint64[],uint64)void)",
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "match main_test_implicit_conversion_abi_call_route@3",
      "stack_out": []
    },
    "25": {
      "op": "err"
    },
    "26": {
      "block": "main_test_implicit_conversion_abi_call_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "28": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "29": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "31": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "32": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "33": {
      "op": "b test_implicit_conversion_abi_call"
    },
    "36": {
      "block": "main___algopy_default_create@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "38": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "42": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "43": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "44": {
      "subroutine": "test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]",
      "params": {},
      "block": "test_implicit_conversion_abi_call",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "arr#0"
      ],
      "stack_out": [
        "arr#0"
      ]
    },
    "47": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "48": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr#0",
        "arr#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "arr#0 (copy)",
        "0"
      ]
    },
    "49": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0"
      ]
    },
    "50": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%array_length%0#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "aggregate%array_length%0#0",
        "8"
      ]
    },
    "51": {
      "op": "*",
      "defined_out": [
        "arr#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arr#0",
        "mul%0#0"
      ]
    },
    "52": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "arr#0",
        "mul%0#0"
      ],
      "stack_out": [
        "arr#0",
        "mul%0#0",
        "2"
      ]
    },
    "53": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "add%0#0"
      ]
    },
    "54": {
      "op": "dig 1",
      "stack_out": [
        "arr#0",
        "add%0#0",
        "arr#0 (copy)"
      ]
    },
    "56": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "arr#0",
        "len%0#0"
      ],
      "stack_out": [
        "arr#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "57": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "eq%0#0"
      ],
      "stack_out": [
        "arr#0",
        "eq%0#0"
      ]
    },
    "58": {
      "error": "invalid number of bytes for (len+uint64[])",
      "op": "assert // invalid number of bytes for (len+uint64[])",
      "stack_out": [
        "arr#0"
      ]
    },
    "59": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "arr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%1#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "arr#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "arr#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "63": {
      "op": "len",
      "defined_out": [
        "arr#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%1#0",
        "len%1#0"
      ]
    },
    "64": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr#0",
        "tmp%1#0",
        "len%1#0",
        "8"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "arr#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "66": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "arr#0",
        "tmp%1#0"
      ]
    },
    "67": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "arr#0"
      ],
      "stack_out": [
        "arr#0",
        "app#0"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "arr#0",
        "app#0",
        "app#0"
      ]
    },
    "69": {
      "op": "cover 2",
      "defined_out": [
        "app#0",
        "arr#0"
      ],
      "stack_out": [
        "app#0",
        "arr#0",
        "app#0"
      ]
    },
    "71": {
      "op": "itxn_begin"
    },
    "72": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "arr#0"
      ]
    },
    "74": {
      "op": "pushbytes 0x75b694f3 // method \"dont_call(uint64[])uint64\"",
      "defined_out": [
        "Method(dont_call(uint64[])uint64)",
        "app#0",
        "arr#0"
      ],
      "stack_out": [
        "app#0",
        "arr#0",
        "Method(dont_call(uint64[])uint64)"
      ]
    },
    "80": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "arr#0"
      ]
    },
    "82": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "arr#0",
        "arr#0 (copy)"
      ]
    },
    "83": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "arr#0"
      ]
    },
    "85": {
      "op": "intc_2 // appl",
      "defined_out": [
        "app#0",
        "appl",
        "arr#0"
      ],
      "stack_out": [
        "app#0",
        "arr#0",
        "appl"
      ]
    },
    "86": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "arr#0"
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "arr#0",
        "0"
      ]
    },
    "89": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "arr#0"
      ]
    },
    "91": {
      "op": "itxn_submit"
    },
    "92": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "app#0",
        "arr#0"
      ],
      "stack_out": [
        "app#0",
        "arr#0",
        "0x0002"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "0x0002",
        "arr#0"
      ]
    },
    "97": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0"
      ]
    },
    "98": {
      "op": "pushbytes 0x"
    },
    "100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "app#0",
        "head_offset#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "101": {
      "block": "test_implicit_conversion_abi_call_for_header@2",
      "stack_in": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "dup",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "0"
      ]
    },
    "103": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "104": {
      "op": "bz test_implicit_conversion_abi_call_after_for@4",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "107": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x"
      ]
    },
    "109": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x",
        "head_offset#0"
      ]
    },
    "111": {
      "op": "dup",
      "defined_out": [
        "0x",
        "head_offset#0",
        "head_offset#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "112": {
      "op": "cover 2",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "0x",
        "head_offset#0 (copy)"
      ]
    },
    "114": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "115": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0",
        "item_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0",
        "2"
      ]
    },
    "116": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%3#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%4#0"
      ]
    },
    "118": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "121": {
      "op": "dig 3",
      "defined_out": [
        "head_offset#0",
        "new_head#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%5#0",
        "new_head#0"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0",
        "tmp%5#0"
      ]
    },
    "124": {
      "op": "concat",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "125": {
      "op": "bury 3",
      "defined_out": [
        "head_offset#0",
        "new_head#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "127": {
      "op": "intc_1 // 2",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "128": {
      "op": "+",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "129": {
      "op": "bury 1",
      "defined_out": [
        "head_offset#0",
        "new_head#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "131": {
      "op": "b test_implicit_conversion_abi_call_for_header@2"
    },
    "134": {
      "block": "test_implicit_conversion_abi_call_after_for@4",
      "stack_in": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "135": {
      "op": "bury 1",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "137": {
      "block": "test_implicit_conversion_abi_call_for_header@5",
      "stack_in": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "dup",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "138": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "139": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "140": {
      "op": "bz test_implicit_conversion_abi_call_after_for@7",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "143": {
      "op": "dig 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "new_head_and_tail#0"
      ]
    },
    "145": {
      "op": "dig 1",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "head_offset#0 (copy)",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "148": {
      "op": "cover 2",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0",
        "head_offset#0 (copy)"
      ]
    },
    "150": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "152": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "new_head_and_tail#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%12#0"
      ]
    },
    "155": {
      "op": "dig 3",
      "defined_out": [
        "head_offset#0",
        "new_head#0",
        "new_head_and_tail#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%12#0",
        "new_head#0"
      ]
    },
    "157": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0",
        "tmp%12#0"
      ]
    },
    "158": {
      "op": "concat",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "159": {
      "op": "bury 3",
      "defined_out": [
        "head_offset#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "161": {
      "op": "intc_1 // 2",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "162": {
      "op": "+",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "163": {
      "op": "bury 1",
      "defined_out": [
        "head_offset#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "165": {
      "op": "b test_implicit_conversion_abi_call_for_header@5"
    },
    "168": {
      "block": "test_implicit_conversion_abi_call_after_for@7",
      "stack_in": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ],
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x0001"
      ]
    },
    "172": {
      "op": "dig 2",
      "defined_out": [
        "0x0001",
        "new_head#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x0001",
        "new_head#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "tmp%17#0"
      ]
    },
    "175": {
      "op": "dig 3",
      "defined_out": [
        "new_head#0",
        "new_head_and_tail#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "tmp%17#0",
        "new_head_and_tail#0"
      ]
    },
    "177": {
      "op": "extract 2 0",
      "defined_out": [
        "new_head#0",
        "new_head_and_tail#0",
        "tmp%17#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "tmp%17#0",
        "tmp%23#0"
      ]
    },
    "180": {
      "op": "concat",
      "defined_out": [
        "nested_arr#1",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "nested_arr#1"
      ]
    },
    "181": {
      "op": "itxn_begin"
    },
    "182": {
      "op": "dig 4",
      "defined_out": [
        "app#0",
        "nested_arr#1",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "nested_arr#1",
        "app#0"
      ]
    },
    "184": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "nested_arr#1",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "nested_arr#1",
        "app#0 (copy)",
        "app#0 (copy)"
      ]
    },
    "185": {
      "op": "cover 2",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "nested_arr#1",
        "app#0 (copy)"
      ]
    },
    "187": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "nested_arr#1"
      ]
    },
    "189": {
      "op": "pushbytes 0xe92b1d53 // method \"dont_call(uint64[][])uint64\"",
      "defined_out": [
        "Method(dont_call(uint64[][])uint64)",
        "app#0",
        "nested_arr#1",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "nested_arr#1",
        "Method(dont_call(uint64[][])uint64)"
      ]
    },
    "195": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "nested_arr#1"
      ]
    },
    "197": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0"
      ]
    },
    "199": {
      "op": "intc_2 // appl",
      "defined_out": [
        "app#0",
        "appl",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "appl"
      ]
    },
    "200": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0"
      ]
    },
    "202": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0",
        "0"
      ]
    },
    "203": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "app#0"
      ]
    },
    "205": {
      "op": "itxn_submit"
    },
    "206": {
      "op": "itxn_begin"
    },
    "207": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "209": {
      "op": "pushbytes 0x165312d8 // method \"dont_call((uint64[],uint64)[])uint64\"",
      "defined_out": [
        "Method(dont_call((uint64[],uint64)[])uint64)",
        "app#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "Method(dont_call((uint64[],uint64)[])uint64)"
      ]
    },
    "215": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "217": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "0x0000",
        "app#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0x0000"
      ]
    },
    "221": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "223": {
      "op": "intc_2 // appl",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "appl"
      ]
    },
    "224": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "0"
      ]
    },
    "227": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    },
    "229": {
      "op": "itxn_submit"
    },
    "230": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "new_head#0",
        "new_head_and_tail#0"
      ],
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0",
        "1"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": [
        "app#0",
        "new_head_and_tail#0",
        "new_head#0",
        "head_offset#0"
      ]
    }
  }
}