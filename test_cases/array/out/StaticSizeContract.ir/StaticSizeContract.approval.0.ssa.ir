main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        test_cases.array.static_size.StaticSizeContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%6#0: bool = (< write_offset#1 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine test_cases.array.static_size.path_length(path: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[]*) -> uint64:
    block@0: // L165
        let slot_contents%0#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let (last_point.x#0: bytes[8], last_point.y#0: uint64, last_point.other.a#0: uint64, last_point.other.b#0: uint64, last_point.other.c#0: bytes[32], last_point.other.d#0: bytes[16], last_point.other.e#0: biguint) = slot_contents%0#0[0u]
        let length#0: uint64 = 0u
        let slot_contents%1#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let tmp%0#0: uint64 = slot_contents%1#0.length
        (assert 1u) // Step cannot be zero
        let point_idx#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L169
        let point_idx#1: uint64 = φ(point_idx#0 <- block@0, point_idx#2 <- block@9)
        let length#3: uint64 = φ(length#0 <- block@0, length#4 <- block@9)
        let continue_looping%0#0: bool = (< point_idx#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@10
    block@2: // for_body_L170
        let slot_contents%2#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let (point.x#0: bytes[8], point.y#0: uint64, point.other.a#0: uint64, point.other.b#0: uint64, point.other.c#0: bytes[32], point.other.d#0: bytes[16], point.other.e#0: biguint) = slot_contents%2#0[point_idx#1]
        let reinterpret_biguint%0#0: biguint = point.x#0
        let reinterpret_biguint%1#0: biguint = last_point.x#0
        let tmp%1#0: bool = (b< reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L172
        let tmp%2#0: uint64 = (btoi last_point.x#0)
        let tmp%3#0: uint64 = (btoi point.x#0)
        let dx#0: uint64 = (- tmp%2#0 tmp%3#0)
        goto block@5
    block@4: // else_body_L174
        let tmp%4#0: uint64 = (btoi point.x#0)
        let tmp%5#0: uint64 = (btoi last_point.x#0)
        let dx#1: uint64 = (- tmp%4#0 tmp%5#0)
        goto block@5
    block@5: // after_if_else_L171
        let dx#3: uint64 = φ(dx#0 <- block@3, dx#1 <- block@4)
        let tmp%6#0: bool = (< point.y#0 last_point.y#0)
        goto tmp%6#0 ? block@6 : block@7
    block@6: // if_body_L176
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@8
    block@7: // else_body_L178
        let dy#1: uint64 = (- point.y#0 last_point.y#0)
        goto block@8
    block@8: // after_if_else_L175
        let dy#2: uint64 = φ(dy#0 <- block@6, dy#1 <- block@7)
        let tmp%7#0: uint64 = (* dx#3 dx#3)
        let tmp%8#0: uint64 = (* dy#2 dy#2)
        let tmp%9#0: uint64 = (+ tmp%7#0 tmp%8#0)
        let tmp%10#0: uint64 = (sqrt tmp%9#0)
        let length#4: uint64 = (+ length#3 tmp%10#0)
        goto block@9
    block@9: // for_footer_L169
        let point_idx#2: uint64 = (+ point_idx#1 1u)
        goto block@1
    block@10: // after_for_L169
        return length#3

subroutine test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__() -> bool:
    block@0: // L37
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@11
    block@1: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@2, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@3, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@4, method "test_bool_array(uint64)uint64" => block@5, method "test_arc4_conversion(uint64)uint64[]" => block@6, method "sum_array(uint64[])uint64" => block@7, method "test_arc4_bool()bool[]" => block@8, * => block@9}
    block@2: // test_array_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 4)
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let to_encode%0#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_array(reinterpret_bytes[8]%0#0, tmp%7#0, reinterpret_bytes[8]%2#0, tmp%8#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%9#0)
        return 1u
    block@3: // test_extend_from_tuple_route_L57
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (== tmp%10#0 NoOp)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[32]%0#0 0u 16u) // on error: Index access is out of bounds
        let item1%0#0: bytes = (extract3 reinterpret_bytes[32]%0#0 16u 16u) // on error: Index access is out of bounds
        let tmp%14#0: bytes[16][] = test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(item0%0#0, item1%0#0)
        let tmp%15#0: bytes = (concat 0x151f7c75 tmp%14#0)
        (log tmp%15#0)
        return 1u
    block@4: // test_extend_from_arc4_tuple_route_L67
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_bytes[32]%1#0: bytes[32] = (txna ApplicationArgs 1)
        let tmp%20#0: bytes[16][] = test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(reinterpret_bytes[32]%1#0)
        let tmp%21#0: bytes = (concat 0x151f7c75 tmp%20#0)
        (log tmp%21#0)
        return 1u
    block@5: // test_bool_array_route_L75
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%26#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let to_encode%1#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_bool_array(tmp%26#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%27#0)
        return 1u
    block@6: // test_arc4_conversion_route_L94
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let tmp%33#0: bytes = test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(tmp%32#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 tmp%33#0)
        (log tmp%34#0)
        return 1u
    block@7: // sum_array_route_L112
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        let tmp%39#0: bytes = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = test_cases.array.static_size.StaticSizeContract.sum_array(tmp%39#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%40#0)
        return 1u
    block@8: // test_arc4_bool_route_L138
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (== tmp%41#0 NoOp)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // can only call when not creating
        let tmp%45#0: bytes[1][] = test_cases.array.static_size.StaticSizeContract.test_arc4_bool()
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        return 1u
    block@9: // switch_case_default_L37
        goto block@10
    block@10: // switch_case_next_L37
        goto block@15
    block@11: // bare_routing_L37
        let tmp%47#0: uint64 = (txn OnCompletion)
        switch tmp%47#0 {0u => block@12, * => block@13}
    block@12: // __algopy_default_create_L1
        let tmp%48#0: uint64 = (txn ApplicationID)
        let tmp%49#0: bool = (== tmp%48#0 0u)
        (assert tmp%49#0) // can only call when creating
        test_cases.array.static_size.StaticSizeContract.__algopy_default_create()
        return 1u
    block@13: // switch_case_default_L37
        goto block@14
    block@14: // switch_case_next_L37
        goto block@15
    block@15: // after_if_else_L37
        return 0u

subroutine test_cases.array.static_size.StaticSizeContract.__init__() -> void:
    block@0: // L38
        (app_global_put "count" 0u)
        return 

subroutine test_cases.array.static_size.StaticSizeContract.test_array(x1: bytes[8], y1: uint64, x2: bytes[8], y2: uint64) -> uint64:
    block@0: // L41
        (app_global_put "count" 0u)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: bytes[32], tmp%3#0: bytes[16], tmp%4#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: bytes[32], tmp%8#0: bytes[16], tmp%9#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: bytes[32], tmp%13#0: bytes[16], tmp%14#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let encoded%0#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = encode<(bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))>(0x0000000000000000, 0u, tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%4#0, x1#0, y1#0, tmp%5#0, tmp%6#0, tmp%7#0, tmp%8#0, tmp%9#0, x2#0, y2#0, tmp%10#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0)
        let slot%0#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[]* = new()
        write(slot%0#0, encoded%0#0)
        let path#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[]* = slot%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L49
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L50
        let slot_contents%0#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let (tmp%15#0: bytes[8], tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: bytes[32], tmp%20#0: bytes[16], tmp%21#0: bytes[64]) = slot_contents%0#0[i#1]
        let tmp%22#0: uint64 = (+ i#1 1u)
        let tmp%23#0: bool = (== tmp%18#0 tmp%22#0)
        (assert tmp%23#0)
        let slot_contents%1#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let (tmp%24#0: bytes[8], tmp%25#0: uint64, tmp%26#0: uint64, tmp%27#0: uint64, tmp%28#0: bytes[32], tmp%29#0: bytes[16], tmp%30#0: bytes[64]) = slot_contents%1#0[i#1]
        let reinterpret_biguint%0#0: biguint = (extract3 tmp%29#0 0u 8u) // on error: Index access is out of bounds
        let tmp%31#0: uint64 = (+ i#1 2u)
        let tmp%32#0: biguint = (itob tmp%31#0)
        let tmp%33#0: bool = (b== reinterpret_biguint%0#0 tmp%32#0)
        (assert tmp%33#0)
        let slot_contents%2#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let (tmp%34#0: bytes[8], tmp%35#0: uint64, tmp%36#0: uint64, tmp%37#0: uint64, tmp%38#0: bytes[32], tmp%39#0: bytes[16], tmp%40#0: bytes[64]) = slot_contents%2#0[i#1]
        let reinterpret_biguint%1#0: biguint = (extract3 tmp%39#0 8u 8u) // on error: Index access is out of bounds
        let tmp%41#0: uint64 = (+ i#1 1u)
        let tmp%42#0: uint64 = (+ i#1 1u)
        let tmp%43#0: uint64 = (* tmp%41#0 tmp%42#0)
        let tmp%44#0: biguint = (itob tmp%43#0)
        let tmp%45#0: bool = (b== reinterpret_biguint%1#0 tmp%44#0)
        (assert tmp%45#0)
        goto block@3
    block@3: // for_footer_L49
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L49
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let slot_contents%3#0: (bytes[8],encoded_uint64,(encoded_uint64,encoded_uint64,bytes[32],bytes[16],bytes[64]))[] = read(path#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%3#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 144u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        (box_del "a")
        (box_put "a" concat_result%0#0)
        let tmp%46#0: uint64 = test_cases.array.static_size.path_length(path#0)
        return tmp%46#0

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(some_more.0: bytes[16], some_more.1: bytes[16]) -> bytes[16][]:
    block@0: // L57
        let encoded%0#0: bytes[16][] = encode<bytes[16]>()
        let slot%0#0: bytes[16][]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: bytes[16][]* = slot%0#0
        let encoded%1#0: bytes[16][] = encode<bytes[16]>(some_more.0#0, some_more.1#0)
        let slot_contents%0#0: bytes[16][] = read(arr#0)
        let extended%0#0: bytes[16][] = slot_contents%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let slot_contents%1#0: bytes[16][] = read(arr#0)
        let tmp%0#0: uint64 = slot_contents%1#0.length
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let slot_contents%2#0: bytes[16][] = read(arr#0)
        let last#0: bytes[16] = slot_contents%2#0[tmp%1#0]
        let tmp%2#0: bool = (== last#0 some_more.1#0)
        (assert tmp%2#0)
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let slot_contents%3#0: bytes[16][] = read(arr#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%3#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let result#0: bytes[16][] = concat_result%0#0
        let tmp%3#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%4#0: uint64 = (- tmp%3#0 1u)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) result#0)
        let item_offset%0#0: uint64 = (* tmp%4#0 16u)
        let tmp%5#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let tmp%6#0: bool = (== tmp%5#0 last#0)
        (assert tmp%6#0)
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(some_more: bytes[32]) -> bytes[16][]:
    block@0: // L67
        let encoded%0#0: bytes[16][] = encode<bytes[16]>()
        let slot%0#0: bytes[16][]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: bytes[16][]* = slot%0#0
        let encoded%1#0: bytes[16][] = encode<bytes[16]>(some_more#0)
        let slot_contents%0#0: bytes[16][] = read(arr#0)
        let extended%0#0: bytes[16][] = slot_contents%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let slot_contents%1#0: bytes[16][] = read(arr#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%1#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine test_cases.array.static_size.StaticSizeContract.test_bool_array(length: uint64) -> uint64:
    block@0: // L75
        let encoded%0#0: encoded_uint8[] = encode<encoded_uint8>()
        let slot%0#0: encoded_uint8[]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: encoded_uint8[]* = slot%0#0
        let slot_contents%0#0: encoded_uint8[] = read(arr#0)
        let tmp%0#0: uint64 = slot_contents%0#0.length
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L80
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L81
        let tmp%3#0: uint64 = (% i#1 2u)
        let tmp%4#0: bool = (== tmp%3#0 0u)
        let encoded%1#0: encoded_uint8[] = encode<encoded_uint8>(tmp%4#0)
        let slot_contents%1#0: encoded_uint8[] = read(arr#0)
        let extended%0#0: encoded_uint8[] = slot_contents%1#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        goto block@3
    block@3: // for_footer_L80
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L80
        let slot_contents%2#0: encoded_uint8[] = read(arr#0)
        let tmp%5#0: uint64 = slot_contents%2#0.length
        let tmp%6#0: bool = (== tmp%5#0 length#0)
        (assert tmp%6#0) // expected correct length
        let slot%1#0: encoded_uint8[]* = new()
        let slot_contents%3#0: encoded_uint8[] = read(arr#0)
        write(slot%1#0, slot_contents%3#0)
        let arr2#0: encoded_uint8[]* = slot%1#0
        let slot_contents%4#0: encoded_uint8[] = read(arr#0)
        let slot_contents%5#0: encoded_uint8[] = read(arr2#0)
        let extended%1#0: encoded_uint8[] = slot_contents%5#0.concat(slot_contents%4#0)
        write(arr2#0, extended%1#0)
        let slot_contents%6#0: encoded_uint8[] = read(arr2#0)
        let tmp%7#0: uint64 = slot_contents%6#0.length
        let tmp%8#0: uint64 = (* length#0 2u)
        let tmp%9#0: bool = (== tmp%7#0 tmp%8#0)
        (assert tmp%9#0) // expected correct length
        let count#0: uint64 = 0u
        let slot_contents%7#0: encoded_uint8[] = read(arr#0)
        let array_length%0#0: uint64 = slot_contents%7#0.length
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@5
    block@5: // for_header_L89
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@9)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@9)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L90
        let slot_contents%8#0: encoded_uint8[] = read(arr#0)
        let val#0: bool = slot_contents%8#0[item_index_internal%0#1]
        goto val#0 ? block@7 : block@8
    block@7: // if_body_L91
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L90
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        goto block@9
    block@9: // for_footer_L89
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L89
        return count#1

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(length: uint64) -> bytes:
    block@0: // L94
        let encoded%0#0: bytes[8][] = encode<bytes[8]>()
        let slot%0#0: bytes[8][]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: bytes[8][]* = slot%0#0
        let slot_contents%0#0: bytes[8][] = read(arr#0)
        let tmp%0#0: uint64 = slot_contents%0#0.length
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L99
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L100
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let encoded%1#0: bytes[8][] = encode<bytes[8]>(val_as_bytes%0#0)
        let slot_contents%1#0: bytes[8][] = read(arr#0)
        let extended%0#0: bytes[8][] = slot_contents%1#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        goto block@3
    block@3: // for_footer_L99
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L99
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let tmp%3#0: uint64 = slot_contents%2#0.length
        let tmp%4#0: bool = (== tmp%3#0 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let slot_contents%3#0: bytes[8][] = read(arr#0)
        let array_length%0#0: uint64 = slot_contents%3#0.length
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@5
    block@5: // for_header_L103
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@9)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@9)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L104
        let slot_contents%4#0: bytes[8][] = read(arr#0)
        let val#0: bytes[8] = slot_contents%4#0[item_index_internal%0#1]
        let reinterpret_biguint%0#0: biguint = val#0
        let tmp%5#0: bool = (b!= reinterpret_biguint%0#0 0b)
        goto tmp%5#0 ? block@7 : block@8
    block@7: // if_body_L105
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L104
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        goto block@9
    block@9: // for_footer_L103
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L103
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arc4_arr#0: bytes = array_data%0#0
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arc4_arr#0)
        let slot_contents%5#0: bytes[8][] = read(arr#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 slot_contents%5#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arc4_arr#1: bytes = concat_result%0#0
        return arc4_arr#1

subroutine test_cases.array.static_size.StaticSizeContract.sum_array(arc4_arr: bytes) -> uint64:
    block@0: // L112
        let encoded%0#0: bytes[8][] = encode<bytes[8]>()
        let slot%0#0: bytes[8][]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: bytes[8][]* = slot%0#0
        let expr_value_trimmed%0#0: bytes[8][] = ((extract 2 0) arc4_arr#0)
        let slot_contents%0#0: bytes[8][] = read(arr#0)
        let extended%0#0: bytes[8][] = slot_contents%0#0.concat(expr_value_trimmed%0#0)
        write(arr#0, extended%0#0)
        let total#0: uint64 = 0u
        let slot_contents%1#0: bytes[8][] = read(arr#0)
        let array_length%0#0: uint64 = slot_contents%1#0.length
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L118
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L119
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let item#0: bytes[8] = slot_contents%2#0[item_index_internal%0#1]
        let tmp%0#0: uint64 = (btoi item#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        goto block@3
    block@3: // for_footer_L118
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L118
        return total#1

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, bytes[32], bytes[16], biguint>:
    block@0: // L123
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let materialized_values%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" materialized_values%0#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%1#0) // check self.count exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let tmp%2#0: bytes[16] = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%3#0: biguint = (itob maybe_value%2#0)
        return tmp%0#0 maybe_value%1#0 tmp%1#0 tmp%2#0 tmp%3#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> bytes[16]:
    block@0: // L134
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let to_encode%0#0: uint64 = (+ maybe_value%0#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%1#0) // check self.count exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let to_encode%1#0: uint64 = (* maybe_value%1#0 maybe_value%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let current_tail_offset%0#0: uint64 = 16u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        return encoded_tuple_buffer%2#0

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_bool() -> bytes[1][]:
    block@0: // L138
        let encoded%0#0: bytes[1][] = encode<bytes[1]>()
        let slot%0#0: bytes[1][]* = new()
        write(slot%0#0, encoded%0#0)
        let arr#0: bytes[1][]* = slot%0#0
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (txn Receiver)
        let to_encode%0#0: bool = (== tmp%0#0 tmp%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let encoded%1#0: bytes[1][] = encode<bytes[1]>(encoded_bool%0#0)
        let slot_contents%0#0: bytes[1][] = read(arr#0)
        let extended%0#0: bytes[1][] = slot_contents%0#0.concat(encoded%1#0)
        write(arr#0, extended%0#0)
        let tmp%2#0: bytes[32] = (txn Sender)
        let tmp%3#0: bytes[32] = (txn Receiver)
        let to_encode%1#0: bool = (!= tmp%2#0 tmp%3#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u to_encode%1#0)
        let encoded%2#0: bytes[1][] = encode<bytes[1]>(encoded_bool%1#0)
        let slot_contents%1#0: bytes[1][] = read(arr#0)
        let extended%1#0: bytes[1][] = slot_contents%1#0.concat(encoded%2#0)
        write(arr#0, extended%1#0)
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let dyn_arr#0: bytes = array_data%0#0
        let slot_contents%2#0: bytes[1][] = read(arr#0)
        let array_length%0#0: uint64 = slot_contents%2#0.length
        let slot_contents%3#0: bytes[1][] = read(arr#0)
        let array_head_and_tail%0#0: bytes[1][] = slot_contents%3#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(dyn_arr#0, array_head_and_tail%0#0, array_length%0#0, 8u)
        let dyn_arr#1: bytes = concat_result%0#0
        let tmp%4#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 2u)
        (assert tmp%5#0) // expected correct length
        let tmp%6#0: uint64 = (len dyn_arr#1)
        let tmp%7#0: bool = (== tmp%6#0 3u)
        (assert tmp%7#0) // expected 3 bytes
        let array_head_and_tail%1#0: bytes = ((extract 2 0) dyn_arr#1)
        let array_length%1#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let index_is_in_bounds%0#0: bool = (< 0u array_length%1#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%1#0 0u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%8#0: bool = (getbit encoded_bool%2#0 0u)
        let tmp%9#0: bytes[32] = (txn Sender)
        let tmp%10#0: bytes[32] = (txn Receiver)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        let tmp%12#0: bool = (== tmp%8#0 tmp%11#0)
        (assert tmp%12#0) // expected correct value at 0
        let array_head_and_tail%2#0: bytes = ((extract 2 0) dyn_arr#1)
        let array_length%2#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let index_is_in_bounds%1#0: bool = (< 1u array_length%2#0)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let is_true%1#0: uint64 = (getbit array_head_and_tail%2#0 1u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tmp%13#0: bool = (getbit encoded_bool%3#0 0u)
        let tmp%14#0: bytes[32] = (txn Sender)
        let tmp%15#0: bytes[32] = (txn Receiver)
        let tmp%16#0: bool = (!= tmp%14#0 tmp%15#0)
        let tmp%17#0: bool = (== tmp%13#0 tmp%16#0)
        (assert tmp%17#0) // expected correct value at 1
        let slot%1#0: bytes[1][]* = new()
        let slot_contents%4#0: bytes[1][] = read(arr#0)
        write(slot%1#0, slot_contents%4#0)
        let arr2#0: bytes[1][]* = slot%1#0
        let array_length%3#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%3#0
        goto block@1
    block@1: // for_header_L154
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%3#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L155
        let array_head_and_tail%3#0: bytes = ((extract 2 0) dyn_arr#1)
        let is_true%2#0: uint64 = (getbit array_head_and_tail%3#0 item_index_internal%0#1)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let b#0: bytes[1] = encoded_bool%4#0
        let encoded%3#0: bytes[1][] = encode<bytes[1]>(b#0)
        let slot_contents%5#0: bytes[1][] = read(arr2#0)
        let extended%2#0: bytes[1][] = slot_contents%5#0.concat(encoded%3#0)
        write(arr2#0, extended%2#0)
        goto block@3
    block@3: // for_footer_L154
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L154
        let slot_contents%6#0: bytes[1][] = read(arr2#0)
        let tmp%18#0: uint64 = slot_contents%6#0.length
        let tmp%19#0: bool = (== tmp%18#0 4u)
        (assert tmp%19#0) // expected correct length
        let slot_contents%7#0: bytes[1][] = read(arr2#0)
        let tmp%20#0: bytes[1] = slot_contents%7#0[0u]
        let tmp%21#0: bool = (getbit tmp%20#0 0u)
        let tmp%22#0: bytes[32] = (txn Sender)
        let tmp%23#0: bytes[32] = (txn Receiver)
        let tmp%24#0: bool = (== tmp%22#0 tmp%23#0)
        let tmp%25#0: bool = (== tmp%21#0 tmp%24#0)
        (assert tmp%25#0) // expected correct value at 0
        let slot_contents%8#0: bytes[1][] = read(arr2#0)
        let tmp%26#0: bytes[1] = slot_contents%8#0[1u]
        let tmp%27#0: bool = (getbit tmp%26#0 0u)
        let tmp%28#0: bytes[32] = (txn Sender)
        let tmp%29#0: bytes[32] = (txn Receiver)
        let tmp%30#0: bool = (!= tmp%28#0 tmp%29#0)
        let tmp%31#0: bool = (== tmp%27#0 tmp%30#0)
        (assert tmp%31#0) // expected correct value at 1
        let slot_contents%9#0: bytes[1][] = read(arr2#0)
        let tmp%32#0: bytes[1] = slot_contents%9#0[2u]
        let tmp%33#0: bool = (getbit tmp%32#0 0u)
        let tmp%34#0: bytes[32] = (txn Sender)
        let tmp%35#0: bytes[32] = (txn Receiver)
        let tmp%36#0: bool = (== tmp%34#0 tmp%35#0)
        let tmp%37#0: bool = (== tmp%33#0 tmp%36#0)
        (assert tmp%37#0) // expected correct value at 2
        let slot_contents%10#0: bytes[1][] = read(arr2#0)
        let tmp%38#0: bytes[1] = slot_contents%10#0[3u]
        let tmp%39#0: bool = (getbit tmp%38#0 0u)
        let tmp%40#0: bytes[32] = (txn Sender)
        let tmp%41#0: bytes[32] = (txn Receiver)
        let tmp%42#0: bool = (!= tmp%40#0 tmp%41#0)
        let tmp%43#0: bool = (== tmp%39#0 tmp%42#0)
        (assert tmp%43#0) // expected correct value at 3
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let slot_contents%11#0: bytes[1][] = read(arr#0)
        let array_length%4#0: uint64 = slot_contents%11#0.length
        let slot_contents%12#0: bytes[1][] = read(arr#0)
        let array_head_and_tail%4#0: bytes[1][] = slot_contents%12#0
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(array_data%1#0, array_head_and_tail%4#0, array_length%4#0, 8u)
        return concat_result%1#0

subroutine test_cases.array.static_size.StaticSizeContract.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__()
        return tmp%0#0