main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@12
    block@4: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@5, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@6, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@7, method "test_bool_array(uint64)uint64" => block@8, method "test_arc4_conversion(uint64)uint64[]" => block@9, method "sum_array(uint64[])uint64" => block@10, method "test_arc4_bool()bool[]" => block@11, * => block@14}
    block@5: // test_array_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%9#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_array(reinterpret_Encoded(uint64)%0#0, tmp%7#0, reinterpret_Encoded(uint64)%2#0, tmp%8#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%9#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%10#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%11#0: bytes = (concat 0x151f7c75 tmp%10#0)
        (log tmp%11#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@6: // test_extend_from_tuple_route_L57
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0 0u 16u)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0 16u 16u)
        let (tmp%16#0: Encoded(uint64,uint64), tmp%17#0: Encoded(uint64,uint64)) = (aggregate%extract%0#0, aggregate%extract%1#0)
        let tmp%18#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(tmp%16#0, tmp%17#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 tmp%18#0)
        (log tmp%19#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@7: // test_extend_from_arc4_tuple_route_L67
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64),(uint64,uint64))%1#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let tmp%24#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(reinterpret_Encoded((uint64,uint64),(uint64,uint64))%1#0)
        let tmp%25#0: bytes = (concat 0x151f7c75 tmp%24#0)
        (log tmp%25#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@8: // test_bool_array_route_L75
        let tmp%26#0: uint64 = (txn OnCompletion)
        let tmp%27#0: bool = (! tmp%26#0)
        (assert tmp%27#0) // OnCompletion is not NoOp
        let tmp%28#0: uint64 = (txn ApplicationID)
        (assert tmp%28#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%30#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%31#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_bool_array(tmp%30#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%31#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%32#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let tmp%33#0: bytes = (concat 0x151f7c75 tmp%32#0)
        (log tmp%33#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@9: // test_arc4_conversion_route_L94
        let tmp%34#0: uint64 = (txn OnCompletion)
        let tmp%35#0: bool = (! tmp%34#0)
        (assert tmp%35#0) // OnCompletion is not NoOp
        let tmp%36#0: uint64 = (txn ApplicationID)
        (assert tmp%36#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%38#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%39#0: Encoded(len+uint64[]) = test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(tmp%38#0)
        let tmp%40#0: bytes = (concat 0x151f7c75 tmp%39#0)
        (log tmp%40#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // sum_array_route_L112
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%45#0: uint64 = test_cases.array.static_size.StaticSizeContract.sum_array(reinterpret_Encoded(len+uint64[])%0#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%45#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let tmp%46#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#0
        let tmp%47#0: bytes = (concat 0x151f7c75 tmp%46#0)
        (log tmp%47#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@11: // test_arc4_bool_route_L138
        let tmp%48#0: uint64 = (txn OnCompletion)
        let tmp%49#0: bool = (! tmp%48#0)
        (assert tmp%49#0) // OnCompletion is not NoOp
        let tmp%50#0: uint64 = (txn ApplicationID)
        (assert tmp%50#0) // can only call when not creating
        let tmp%52#0: Encoded(len+bool1[]) = test_cases.array.static_size.StaticSizeContract.test_arc4_bool()
        let tmp%53#0: bytes = (concat 0x151f7c75 tmp%52#0)
        (log tmp%53#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@15
    block@12: // bare_routing_L37
        let tmp%54#0: uint64 = (txn OnCompletion)
        goto tmp%54#0 ? block@14 : block@13
    block@13: // __algopy_default_create_L1
        let tmp%55#0: uint64 = (txn ApplicationID)
        let tmp%56#0: bool = (! tmp%55#0)
        (assert tmp%56#0) // can only call when creating
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@15
    block@14: // after_if_else_L37
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#8: bool = 0u
        goto block@15
    block@15: // after_inlined_test_cases.array.static_size.StaticSizeContract.__puya_arc4_router___L1
        let tmp%0#1: bool = Ï†(test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0 <- block@5, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#1 <- block@6, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#2 <- block@7, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#3 <- block@8, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#4 <- block@9, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#5 <- block@10, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#6 <- block@11, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#7 <- block@13, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#8 <- block@14)
        return tmp%0#1

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = Ï†(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = Ï†(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = Ï†(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = Ï†(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine test_cases.array.static_size.StaticSizeContract.test_array(x1: Encoded(uint64), y1: uint64, x2: Encoded(uint64), y2: uint64) -> uint64:
    block@0: // L41
        (app_global_put "count" 0u)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: account, tmp%3#0: Encoded(uint64,uint64), tmp%4#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: account, tmp%8#0: Encoded(uint64,uint64), tmp%9#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: account, tmp%13#0: Encoded(uint64,uint64), tmp%14#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let aggregate%head%0#0: bytes = (concat 0x 0x0000000000000000)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%as_Encoded(uint64)%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%2#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%2#0
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(uint8[32])%0#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%3#0)
        let aggregate%value_len%0#0: uint64 = (len tmp%4#0)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%4#0 aggregate%bzero%0#0)
        let aggregate%as_Encoded(uint512)%0#0: Encoded(uint512) = aggregate%arc4_encoded%0#0
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%as_Encoded(uint512)%0#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%0#0: Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512) = aggregate%head%6#0
        let aggregate%head%7#0: bytes = (concat aggregate%head%1#0 aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%0#0)
        let aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%0#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%head%7#0
        let aggregate%head%8#0: bytes = (concat 0x aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%0#0)
        let aggregate%head%9#0: bytes = (concat 0x x1#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob y1#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let aggregate%head%10#0: bytes = (concat aggregate%head%9#0 aggregate%as_Encoded(uint64)%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%5#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let aggregate%head%11#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%4#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let aggregate%head%12#0: bytes = (concat aggregate%head%11#0 aggregate%as_Encoded(uint64)%5#0)
        let aggregate%as_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = tmp%7#0
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 aggregate%as_Encoded(uint8[32])%1#0)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 tmp%8#0)
        let aggregate%value_len%1#0: uint64 = (len tmp%9#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%bzero%1#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%9#0 aggregate%bzero%1#0)
        let aggregate%as_Encoded(uint512)%1#0: Encoded(uint512) = aggregate%arc4_encoded%1#0
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%as_Encoded(uint512)%1#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%1#0: Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512) = aggregate%head%15#0
        let aggregate%head%16#0: bytes = (concat aggregate%head%10#0 aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%1#0)
        let aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%1#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%head%16#0
        let aggregate%head%17#0: bytes = (concat aggregate%head%8#0 aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%1#0)
        let aggregate%head%18#0: bytes = (concat 0x x2#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob y2#0)
        let aggregate%as_Encoded(uint64)%6#0: Encoded(uint64) = aggregate%val_as_bytes%6#0
        let aggregate%head%19#0: bytes = (concat aggregate%head%18#0 aggregate%as_Encoded(uint64)%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%10#0)
        let aggregate%as_Encoded(uint64)%7#0: Encoded(uint64) = aggregate%val_as_bytes%7#0
        let aggregate%head%20#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%7#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%11#0)
        let aggregate%as_Encoded(uint64)%8#0: Encoded(uint64) = aggregate%val_as_bytes%8#0
        let aggregate%head%21#0: bytes = (concat aggregate%head%20#0 aggregate%as_Encoded(uint64)%8#0)
        let aggregate%as_Encoded(uint8[32])%2#0: Encoded(uint8[32]) = tmp%12#0
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 aggregate%as_Encoded(uint8[32])%2#0)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 tmp%13#0)
        let aggregate%value_len%2#0: uint64 = (len tmp%14#0)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%bzero%2#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| tmp%14#0 aggregate%bzero%2#0)
        let aggregate%as_Encoded(uint512)%2#0: Encoded(uint512) = aggregate%arc4_encoded%2#0
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%as_Encoded(uint512)%2#0)
        let aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%2#0: Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512) = aggregate%head%24#0
        let aggregate%head%25#0: bytes = (concat aggregate%head%19#0 aggregate%as_Encoded(uint64,uint64,uint8[32],(uint64,uint64),uint512)%2#0)
        let aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%2#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%head%25#0
        let aggregate%head%26#0: bytes = (concat aggregate%head%17#0 aggregate%as_Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))%2#0)
        let aggregate%as_Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[])%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = aggregate%head%26#0
        let encoded_array%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = aggregate%as_Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[])%0#0
        let path#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[])* = new()
        store(path#0, encoded_array%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L49
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L50
        let slot_contents%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%0#0: uint64 = (* i#1 144u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%0#0 aggregate%bytes_offset%0#0 144u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%encoded_element%0#0
        let aggregate%extract%0#0: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%extract%1#0: bytes = (extract3 array_item%0#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let aggregate%extract%2#0: bytes = (extract3 array_item%0#0 16u 128u)
        let aggregate%extract%3#0: bytes = (extract3 aggregate%extract%2#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%3#0)
        let aggregate%extract%4#0: bytes = (extract3 aggregate%extract%2#0 8u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%4#0)
        let aggregate%extract%5#0: bytes = (extract3 aggregate%extract%2#0 16u 32u)
        let aggregate%extract%6#0: bytes = (extract3 aggregate%extract%2#0 48u 16u)
        let aggregate%extract%7#0: bytes = (extract3 aggregate%extract%2#0 64u 64u)
        let (values%0#0: Encoded(uint64), values%1#0: uint64, values%2#0: uint64, values%3#0: uint64, values%4#0: account, values%5#0: Encoded(uint64,uint64), values%6#0: biguint) = (aggregate%extract%0#0, aggregate%item1%0#0, aggregate%item0%0#0, aggregate%item1%1#0, aggregate%extract%5#0, aggregate%extract%6#0, aggregate%extract%7#0)
        let i#2: uint64 = (+ i#1 1u)
        let tmp%16#0: bool = (== values%3#0 i#2)
        (assert tmp%16#0)
        let slot_contents%1#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%1#0: uint64 = (* i#1 144u)
        let aggregate%encoded_element%1#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%1#0 144u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%encoded_element%1#0
        let aggregate%extract%8#0: bytes = (extract3 array_item%1#0 0u 8u)
        let aggregate%extract%9#0: bytes = (extract3 array_item%1#0 8u 8u)
        let aggregate%item1%2#0: uint64 = (btoi aggregate%extract%9#0)
        let aggregate%extract%10#0: bytes = (extract3 array_item%1#0 16u 128u)
        let aggregate%extract%11#0: bytes = (extract3 aggregate%extract%10#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%11#0)
        let aggregate%extract%12#0: bytes = (extract3 aggregate%extract%10#0 8u 8u)
        let aggregate%item1%3#0: uint64 = (btoi aggregate%extract%12#0)
        let aggregate%extract%13#0: bytes = (extract3 aggregate%extract%10#0 16u 32u)
        let aggregate%extract%14#0: bytes = (extract3 aggregate%extract%10#0 48u 16u)
        let aggregate%extract%15#0: bytes = (extract3 aggregate%extract%10#0 64u 64u)
        let (values%7#0: Encoded(uint64), values%8#0: uint64, values%9#0: uint64, values%10#0: uint64, values%11#0: account, values%12#0: Encoded(uint64,uint64), values%13#0: biguint) = (aggregate%extract%8#0, aggregate%item1%2#0, aggregate%item0%1#0, aggregate%item1%3#0, aggregate%extract%13#0, aggregate%extract%14#0, aggregate%extract%15#0)
        let aggregate%extract%16#0: bytes = (extract3 values%12#0 0u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%16#0
        let values%14#0: Encoded(uint64) = tuple_item%0#0
        let tmp%17#0: uint64 = (+ i#1 2u)
        let tmp%18#0: biguint = (itob tmp%17#0)
        let tmp%19#0: bool = (b== values%14#0 tmp%18#0)
        (assert tmp%19#0)
        let slot_contents%2#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%2#0: uint64 = (* i#1 144u)
        let aggregate%encoded_element%2#0: bytes = (extract3 slot_contents%2#0 aggregate%bytes_offset%2#0 144u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%encoded_element%2#0
        let aggregate%extract%17#0: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%extract%18#0: bytes = (extract3 array_item%2#0 8u 8u)
        let aggregate%item1%4#0: uint64 = (btoi aggregate%extract%18#0)
        let aggregate%extract%19#0: bytes = (extract3 array_item%2#0 16u 128u)
        let aggregate%extract%20#0: bytes = (extract3 aggregate%extract%19#0 0u 8u)
        let aggregate%item0%2#0: uint64 = (btoi aggregate%extract%20#0)
        let aggregate%extract%21#0: bytes = (extract3 aggregate%extract%19#0 8u 8u)
        let aggregate%item1%5#0: uint64 = (btoi aggregate%extract%21#0)
        let aggregate%extract%22#0: bytes = (extract3 aggregate%extract%19#0 16u 32u)
        let aggregate%extract%23#0: bytes = (extract3 aggregate%extract%19#0 48u 16u)
        let aggregate%extract%24#0: bytes = (extract3 aggregate%extract%19#0 64u 64u)
        let (values%15#0: Encoded(uint64), values%16#0: uint64, values%17#0: uint64, values%18#0: uint64, values%19#0: account, values%20#0: Encoded(uint64,uint64), values%21#0: biguint) = (aggregate%extract%17#0, aggregate%item1%4#0, aggregate%item0%2#0, aggregate%item1%5#0, aggregate%extract%22#0, aggregate%extract%23#0, aggregate%extract%24#0)
        let aggregate%extract%25#0: bytes = (extract3 values%20#0 8u 8u)
        let tuple_item%1#0: Encoded(uint64) = aggregate%extract%25#0
        let values%22#0: Encoded(uint64) = tuple_item%1#0
        let tmp%22#0: uint64 = (* i#2 i#2)
        let tmp%23#0: biguint = (itob tmp%22#0)
        let tmp%24#0: bool = (b== values%22#0 tmp%23#0)
        (assert tmp%24#0)
        goto block@1
    block@4: // after_for_L49
        let slot_contents%3#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 144u)
        let tmp%25#0: uint64 = aggregate%array_len%0#0
        let as_bytes%0#0: bytes[8] = (itob tmp%25#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = (concat as_u16_bytes%0#0 slot_contents%3#0)
        (box_del "a")
        (box_put "a" converted_array%0#0)
        let slot_contents%0#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 0u 144u)
        let aggregate%encoded_element%3#0: bytes = (extract3 slot_contents%0#1 aggregate%bytes_offset%3#0 144u) // on error: index access is out of bounds
        let array_item%0#1: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%encoded_element%3#0
        let aggregate%extract%26#0: bytes = (extract3 array_item%0#1 0u 8u)
        let aggregate%extract%27#0: bytes = (extract3 array_item%0#1 8u 8u)
        let aggregate%item1%6#0: uint64 = (btoi aggregate%extract%27#0)
        let aggregate%extract%28#0: bytes = (extract3 array_item%0#1 16u 128u)
        let aggregate%extract%29#0: bytes = (extract3 aggregate%extract%28#0 0u 8u)
        let aggregate%item0%3#0: uint64 = (btoi aggregate%extract%29#0)
        let aggregate%extract%30#0: bytes = (extract3 aggregate%extract%28#0 8u 8u)
        let aggregate%item1%7#0: uint64 = (btoi aggregate%extract%30#0)
        let aggregate%extract%31#0: bytes = (extract3 aggregate%extract%28#0 16u 32u)
        let aggregate%extract%32#0: bytes = (extract3 aggregate%extract%28#0 48u 16u)
        let aggregate%extract%33#0: bytes = (extract3 aggregate%extract%28#0 64u 64u)
        let (last_point.x#0: Encoded(uint64), last_point.y#0: uint64, last_point.other.a#0: uint64, last_point.other.b#0: uint64, last_point.other.c#0: account, last_point.other.d#0: Encoded(uint64,uint64), last_point.other.e#0: biguint) = (aggregate%extract%26#0, aggregate%item1%6#0, aggregate%item0%3#0, aggregate%item1%7#0, aggregate%extract%31#0, aggregate%extract%32#0, aggregate%extract%33#0)
        let length#0: uint64 = 0u
        let aggregate%slot_contents%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 144u)
        let tmp%0#1: uint64 = aggregate%array_len%1#0
        let point_idx#0: uint64 = 1u
        goto block@6
    block@6: // for_header_L169
        let point_idx#1: uint64 = Ï†(point_idx#0 <- block@4, point_idx#2 <- block@13)
        let length#3: uint64 = Ï†(length#0 <- block@4, length#4 <- block@13)
        let continue_looping%0#1: bool = (< point_idx#1 tmp%0#1)
        goto continue_looping%0#1 ? block@7 : block@14
    block@7: // for_body_L170
        let slot_contents%1#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%4#0: uint64 = (* point_idx#1 144u)
        let aggregate%encoded_element%4#0: bytes = (extract3 slot_contents%1#1 aggregate%bytes_offset%4#0 144u) // on error: index access is out of bounds
        let array_item%1#1: Encoded(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)) = aggregate%encoded_element%4#0
        let aggregate%extract%34#0: bytes = (extract3 array_item%1#1 0u 8u)
        let aggregate%extract%35#0: bytes = (extract3 array_item%1#1 8u 8u)
        let aggregate%item1%8#0: uint64 = (btoi aggregate%extract%35#0)
        let aggregate%extract%36#0: bytes = (extract3 array_item%1#1 16u 128u)
        let aggregate%extract%37#0: bytes = (extract3 aggregate%extract%36#0 0u 8u)
        let aggregate%item0%4#0: uint64 = (btoi aggregate%extract%37#0)
        let aggregate%extract%38#0: bytes = (extract3 aggregate%extract%36#0 8u 8u)
        let aggregate%item1%9#0: uint64 = (btoi aggregate%extract%38#0)
        let aggregate%extract%39#0: bytes = (extract3 aggregate%extract%36#0 16u 32u)
        let aggregate%extract%40#0: bytes = (extract3 aggregate%extract%36#0 48u 16u)
        let aggregate%extract%41#0: bytes = (extract3 aggregate%extract%36#0 64u 64u)
        let (point.x#0: Encoded(uint64), point.y#0: uint64, point.other.a#0: uint64, point.other.b#0: uint64, point.other.c#0: account, point.other.d#0: Encoded(uint64,uint64), point.other.e#0: biguint) = (aggregate%extract%34#0, aggregate%item1%8#0, aggregate%item0%4#0, aggregate%item1%9#0, aggregate%extract%39#0, aggregate%extract%40#0, aggregate%extract%41#0)
        let tmp%1#1: bool = (b< point.x#0 last_point.x#0)
        goto tmp%1#1 ? block@8 : block@9
    block@8: // if_body_L172
        let tmp%2#1: uint64 = (btoi last_point.x#0)
        let tmp%3#1: uint64 = (btoi point.x#0)
        let dx#0: uint64 = (- tmp%2#1 tmp%3#1)
        goto block@10
    block@9: // else_body_L174
        let tmp%5#1: uint64 = (btoi point.x#0)
        let tmp%6#1: uint64 = (btoi last_point.x#0)
        let dx#1: uint64 = (- tmp%5#1 tmp%6#1)
        goto block@10
    block@10: // after_if_else_L171
        let dx#3: uint64 = Ï†(dx#0 <- block@8, dx#1 <- block@9)
        let tmp%8#1: bool = (< point.y#0 last_point.y#0)
        goto tmp%8#1 ? block@11 : block@12
    block@11: // if_body_L176
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@13
    block@12: // else_body_L178
        let dy#1: uint64 = (- point.y#0 last_point.y#0)
        goto block@13
    block@13: // after_if_else_L175
        let dy#2: uint64 = Ï†(dy#0 <- block@11, dy#1 <- block@12)
        let tmp%11#1: uint64 = (* dx#3 dx#3)
        let tmp%12#1: uint64 = (* dy#2 dy#2)
        let tmp%13#1: uint64 = (+ tmp%11#1 tmp%12#1)
        let tmp%14#1: uint64 = (sqrt tmp%13#1)
        let length#4: uint64 = (+ length#3 tmp%14#1)
        let point_idx#2: uint64 = (+ point_idx#1 1u)
        goto block@6
    block@14: // after_for_L169
        return length#3

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(some_more.0: Encoded(uint64,uint64), some_more.1: Encoded(uint64,uint64)) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L57
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = 0x
        let encoded_array%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let arr#0: Encoded((uint64,uint64)[])* = new()
        store(arr#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let aggregate%head%0#0: bytes = (concat 0x some_more.0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 some_more.1#0)
        let aggregate%as_Encoded((uint64,uint64)[])%1#0: Encoded((uint64,uint64)[]) = aggregate%head%1#0
        let tmp%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%1#0
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat slot_contents%0#0 tmp%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let aggregate%slot_contents%0#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 16u)
        let tmp%1#0: uint64 = aggregate%array_len%0#0
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let slot_contents%1#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%2#0 16u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#0
        let last#0: Encoded(uint64,uint64) = array_item%0#0
        let tmp%3#0: bool = (== last#0 some_more.1#0)
        (assert tmp%3#0)
        let slot_contents%2#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let aggregate%bytes_len%1#0: uint64 = (len slot_contents%2#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 16u)
        let tmp%4#0: uint64 = aggregate%array_len%1#0
        let as_bytes%0#0: bytes[8] = (itob tmp%4#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%2#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 result#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%0#0
        let tmp%6#0: uint64 = (- tmp%5#0 1u)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) result#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%6#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#0
        let values%1#0: Encoded(uint64,uint64) = array_item%1#0
        let tmp%7#0: bool = (== values%1#0 last#0)
        (assert tmp%7#0)
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(some_more: Encoded((uint64,uint64),(uint64,uint64))) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L67
        let aggregate%as_Encoded((uint64,uint64)[])%0#0: Encoded((uint64,uint64)[]) = 0x
        let encoded_array%0#0: Encoded((uint64,uint64)[]) = aggregate%as_Encoded((uint64,uint64)[])%0#0
        let arr#0: Encoded((uint64,uint64)[])* = new()
        store(arr#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat slot_contents%0#0 some_more#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded((uint64,uint64)[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 16u)
        let tmp%0#0: uint64 = aggregate%array_len%0#0
        let as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%1#0)
        return converted_array%0#0

subroutine test_cases.array.static_size.StaticSizeContract.test_bool_array(length: uint64) -> uint64:
    block@0: // L75
        let aggregate%as_Encoded(bool8[])%0#0: Encoded(bool8[]) = 0x
        let encoded_array%0#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#0
        let arr#0: Encoded(bool8[])* = new()
        store(arr#0, encoded_array%0#0)
        let aggregate%slot_contents%0#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 1u)
        let tmp%0#0: uint64 = aggregate%array_len%0#0
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L80
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L81
        let tmp%3#0: uint64 = (% i#1 2u)
        let tmp%4#0: bool = (! tmp%3#0)
        let slot_contents%0#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(bool8)%0#0)
        let aggregate%as_Encoded(bool8[])%1#0: Encoded(bool8[]) = aggregate%head%0#0
        let tmp%5#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%1#0
        let concat%0#0: Encoded(bool8[]) = (concat slot_contents%0#0 tmp%5#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L80
        let aggregate%slot_contents%1#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 1u)
        let tmp%6#0: uint64 = aggregate%array_len%1#0
        let tmp%7#0: bool = (== tmp%6#0 length#0)
        (assert tmp%7#0) // expected correct length
        let arr2#0: Encoded(bool8[])* = new()
        let slot_contents%1#0: Encoded(bool8[]) = load(arr#0)
        store(arr2#0, slot_contents%1#0)
        let slot_contents%2#0: Encoded(bool8[]) = load(arr#0)
        let slot_contents%3#0: Encoded(bool8[]) = load(arr2#0)
        let concat%1#0: Encoded(bool8[]) = (concat slot_contents%3#0 slot_contents%2#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        let aggregate%slot_contents%2#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%2#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 1u)
        let tmp%8#0: uint64 = aggregate%array_len%2#0
        let tmp%9#0: uint64 = (* length#0 2u)
        let tmp%10#0: bool = (== tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // expected correct length
        let count#0: uint64 = 0u
        let aggregate%slot_contents%3#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%3#0: uint64 = (len aggregate%slot_contents%3#0)
        let aggregate%array_len%3#0: uint64 = (/ aggregate%bytes_len%3#0 1u)
        let array_length%0#0: uint64 = aggregate%array_len%3#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L89
        let item_index_internal%0#1: uint64 = Ï†(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = Ï†(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L90
        let slot_contents%4#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%4#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(bool8) = aggregate%encoded_element%0#0
        let aggregate%get_bit%0#0: bool = (getbit array_item%0#0 0u)
        let val#0: bool = aggregate%get_bit%0#0
        goto val#0 ? block@7 : block@8
    block@7: // if_body_L91
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L90
        let count#3: uint64 = Ï†(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L89
        return count#1

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(length: uint64) -> Encoded(len+uint64[]):
    block@0: // L94
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = 0x
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let tmp%0#0: uint64 = aggregate%array_len%0#0
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L99
        let i#1: uint64 = Ï†(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L100
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%head%0#0: bytes = (concat 0x tmp%3#0)
        let aggregate%as_Encoded(uint64[])%1#0: Encoded(uint64[]) = aggregate%head%0#0
        let tmp%4#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%1#0
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 tmp%4#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L99
        let aggregate%slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 8u)
        let tmp%5#0: uint64 = aggregate%array_len%1#0
        let tmp%6#0: bool = (== tmp%5#0 length#0)
        (assert tmp%6#0) // expected correct length
        let count#0: uint64 = 0u
        let aggregate%slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%2#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 8u)
        let array_length%0#0: uint64 = aggregate%array_len%2#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L103
        let item_index_internal%0#1: uint64 = Ï†(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = Ï†(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L104
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let val#0: Encoded(uint64) = array_item%0#0
        let tmp%7#0: bool = (b!= val#0 0b)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // if_body_L105
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L104
        let count#3: uint64 = Ï†(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L103
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let arc4_arr#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arc4_arr#0 slot_contents%2#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        return arc4_arr#1

subroutine test_cases.array.static_size.StaticSizeContract.sum_array(arc4_arr: Encoded(len+uint64[])) -> uint64:
    block@0: // L112
        let aggregate%as_Encoded(uint64[])%0#0: Encoded(uint64[]) = 0x
        let encoded_array%0#0: Encoded(uint64[]) = aggregate%as_Encoded(uint64[])%0#0
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, encoded_array%0#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let extract_to_end%0#0: bytes = ((extract 2 0) arc4_arr#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 extract_to_end%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let total#0: uint64 = 0u
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let array_length%0#0: uint64 = aggregate%array_len%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L118
        let item_index_internal%0#1: uint64 = Ï†(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = Ï†(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L119
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let item#0: Encoded(uint64) = array_item%0#0
        let tmp%0#0: uint64 = (btoi item#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L118
        return total#1

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, account, Encoded(uint64,uint64), biguint>:
    block@0: // L123
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: account = (txn Sender)
        let tmp%3#0: Encoded(uint64,uint64) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%4#0: biguint = (itob maybe_value%2#0)
        return tmp%1#0 tmp%0#0 tmp%2#0 tmp%3#0 tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded(uint64,uint64):
    block@0: // L134
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%1#0) // check self.count exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%2#0: uint64 = (* maybe_value%1#0 maybe_value%2#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#0
        let aggregate%head%0#0: bytes = (concat 0x tmp%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 tmp%3#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%4#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        return tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_bool() -> Encoded(len+bool1[]):
    block@0: // L138
        let aggregate%as_Encoded(bool8[])%0#0: Encoded(bool8[]) = 0x
        let encoded_array%0#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%0#0
        let arr#0: Encoded(bool8[])* = new()
        store(arr#0, encoded_array%0#0)
        let tmp%0#0: account = (txn Sender)
        let tmp%1#0: account = (txn Receiver)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%0#0
        let tmp%3#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let slot_contents%0#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%head%0#0: bytes = (concat 0x tmp%3#0)
        let aggregate%as_Encoded(bool8[])%1#0: Encoded(bool8[]) = aggregate%head%0#0
        let tmp%4#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%1#0
        let concat%0#0: Encoded(bool8[]) = (concat slot_contents%0#0 tmp%4#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: account = (txn Receiver)
        let tmp%7#0: bool = (!= tmp%5#0 tmp%6#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%7#0)
        let aggregate%as_Encoded(bool8)%1#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%8#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%1#0
        let slot_contents%1#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%head%1#0: bytes = (concat 0x tmp%8#0)
        let aggregate%as_Encoded(bool8[])%2#0: Encoded(bool8[]) = aggregate%head%1#0
        let tmp%9#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%2#0
        let concat%1#0: Encoded(bool8[]) = (concat slot_contents%1#0 tmp%9#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = aggregate%len_u16%0#0
        let dyn_arr#0: Encoded(len+bool1[]) = aggregate%as_Encoded(len+bool1[])%0#0
        let slot_contents%2#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 1u)
        let tmp%10#0: uint64 = aggregate%array_len%0#0
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(dyn_arr#0, slot_contents%2#0, tmp%10#0, 8u)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let tmp%11#0: uint64 = aggregate%array_length%0#0
        let tmp%12#0: bool = (== tmp%11#0 2u)
        (assert tmp%12#0) // expected correct length
        let tmp%13#0: uint64 = (len dyn_arr#1)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // expected 3 bytes
        let aggregate%array_length%1#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%1#0)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%add%0#0: uint64 = (+ 0u 16u)
        let aggregate%get_bit%0#0: uint64 = (getbit dyn_arr#1 aggregate%add%0#0)
        let array_item%0#0: bool = aggregate%get_bit%0#0
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u array_item%0#0)
        let values%0#0: Encoded(bool8) = aggregate%encoded_bool%2#0
        let aggregate%get_bit%1#0: bool = (getbit values%0#0 0u)
        let tmp%15#0: bool = aggregate%get_bit%1#0
        let tmp%16#0: account = (txn Sender)
        let tmp%17#0: account = (txn Receiver)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        let tmp%19#0: bool = (== tmp%15#0 tmp%18#0)
        (assert tmp%19#0) // expected correct value at 0
        let aggregate%array_length%2#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let aggregate%lt%1#0: bool = (< 1u aggregate%array_length%2#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%add%1#0: uint64 = (+ 1u 16u)
        let aggregate%get_bit%2#0: uint64 = (getbit dyn_arr#1 aggregate%add%1#0)
        let array_item%1#0: bool = aggregate%get_bit%2#0
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u array_item%1#0)
        let values%1#0: Encoded(bool8) = aggregate%encoded_bool%3#0
        let aggregate%get_bit%3#0: bool = (getbit values%1#0 0u)
        let tmp%20#0: bool = aggregate%get_bit%3#0
        let tmp%21#0: account = (txn Sender)
        let tmp%22#0: account = (txn Receiver)
        let tmp%23#0: bool = (!= tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== tmp%20#0 tmp%23#0)
        (assert tmp%24#0) // expected correct value at 1
        let arr2#0: Encoded(bool8[])* = new()
        let slot_contents%3#0: Encoded(bool8[]) = load(arr#0)
        store(arr2#0, slot_contents%3#0)
        let aggregate%array_length%3#0: uint64 = (extract_uint16 dyn_arr#1 0u)
        let array_length%0#0: uint64 = aggregate%array_length%3#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L154
        let item_index_internal%0#1: uint64 = Ï†(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L155
        let aggregate%add%2#0: uint64 = (+ item_index_internal%0#1 16u)
        let aggregate%get_bit%4#0: uint64 = (getbit dyn_arr#1 aggregate%add%2#0)
        let array_item%2#0: bool = aggregate%get_bit%4#0
        let aggregate%encoded_bool%4#0: bytes[1] = (setbit 0x00 0u array_item%2#0)
        let b#0: Encoded(bool8) = aggregate%encoded_bool%4#0
        let slot_contents%4#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%head%2#0: bytes = (concat 0x b#0)
        let aggregate%as_Encoded(bool8[])%3#0: Encoded(bool8[]) = aggregate%head%2#0
        let tmp%25#0: Encoded(bool8[]) = aggregate%as_Encoded(bool8[])%3#0
        let concat%2#0: Encoded(bool8[]) = (concat slot_contents%4#0 tmp%25#0) // on error: max array length exceeded
        store(arr2#0, concat%2#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L154
        let aggregate%slot_contents%0#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 1u)
        let tmp%26#0: uint64 = aggregate%array_len%1#0
        let tmp%27#0: bool = (== tmp%26#0 4u)
        (assert tmp%27#0) // expected correct length
        let slot_contents%5#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%5#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(bool8) = aggregate%encoded_element%0#0
        let values%3#0: Encoded(bool8) = array_item%3#0
        let aggregate%get_bit%5#0: bool = (getbit values%3#0 0u)
        let tmp%28#0: bool = aggregate%get_bit%5#0
        let tmp%29#0: account = (txn Sender)
        let tmp%30#0: account = (txn Receiver)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        let tmp%32#0: bool = (== tmp%28#0 tmp%31#0)
        (assert tmp%32#0) // expected correct value at 0
        let slot_contents%6#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 1u)
        let aggregate%encoded_element%1#0: bytes = (extract3 slot_contents%6#0 aggregate%bytes_offset%1#0 1u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(bool8) = aggregate%encoded_element%1#0
        let values%4#0: Encoded(bool8) = array_item%4#0
        let aggregate%get_bit%6#0: bool = (getbit values%4#0 0u)
        let tmp%33#0: bool = aggregate%get_bit%6#0
        let tmp%34#0: account = (txn Sender)
        let tmp%35#0: account = (txn Receiver)
        let tmp%36#0: bool = (!= tmp%34#0 tmp%35#0)
        let tmp%37#0: bool = (== tmp%33#0 tmp%36#0)
        (assert tmp%37#0) // expected correct value at 1
        let slot_contents%7#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%2#0: bytes = (extract3 slot_contents%7#0 aggregate%bytes_offset%2#0 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(bool8) = aggregate%encoded_element%2#0
        let values%5#0: Encoded(bool8) = array_item%5#0
        let aggregate%get_bit%7#0: bool = (getbit values%5#0 0u)
        let tmp%38#0: bool = aggregate%get_bit%7#0
        let tmp%39#0: account = (txn Sender)
        let tmp%40#0: account = (txn Receiver)
        let tmp%41#0: bool = (== tmp%39#0 tmp%40#0)
        let tmp%42#0: bool = (== tmp%38#0 tmp%41#0)
        (assert tmp%42#0) // expected correct value at 2
        let slot_contents%8#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 slot_contents%8#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(bool8) = aggregate%encoded_element%3#0
        let values%6#0: Encoded(bool8) = array_item%6#0
        let aggregate%get_bit%8#0: bool = (getbit values%6#0 0u)
        let tmp%43#0: bool = aggregate%get_bit%8#0
        let tmp%44#0: account = (txn Sender)
        let tmp%45#0: account = (txn Receiver)
        let tmp%46#0: bool = (!= tmp%44#0 tmp%45#0)
        let tmp%47#0: bool = (== tmp%43#0 tmp%46#0)
        (assert tmp%47#0) // expected correct value at 3
        let slot_contents%9#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%2#0: uint64 = (len slot_contents%9#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 1u)
        let tmp%48#0: uint64 = aggregate%array_len%2#0
        let bit_packed_source%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%9#0, tmp%48#0, 8u)
        return bit_packed_source%0#0