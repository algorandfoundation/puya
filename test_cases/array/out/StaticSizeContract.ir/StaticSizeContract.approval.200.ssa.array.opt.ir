main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@16
    block@4: // abi_routing_L37
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@6, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@7, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@8, method "test_bool_array(uint64)uint64" => block@9, method "test_arc4_conversion(uint64)uint64[]" => block@10, method "sum_array(uint64[])uint64" => block@11, method "test_arc4_bool()bool[]" => block@12, * => block@15}
    block@6: // test_array_route_L41
        test_cases.array.static_size.StaticSizeContract.test_array[routing]()
        goto block@15
    block@7: // test_extend_from_tuple_route_L59
        test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple[routing]()
        goto block@15
    block@8: // test_extend_from_arc4_tuple_route_L69
        test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple[routing]()
        goto block@15
    block@9: // test_bool_array_route_L77
        test_cases.array.static_size.StaticSizeContract.test_bool_array[routing]()
        goto block@15
    block@10: // test_arc4_conversion_route_L96
        test_cases.array.static_size.StaticSizeContract.test_arc4_conversion[routing]()
        goto block@15
    block@11: // sum_array_route_L114
        test_cases.array.static_size.StaticSizeContract.sum_array[routing]()
        goto block@15
    block@12: // test_arc4_bool_route_L140
        test_cases.array.static_size.StaticSizeContract.test_arc4_bool[routing]()
        goto block@15
    block@15: // after_if_else_L37
        fail
    block@16: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L129
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L154
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L153
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L159
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L160
        let tmp%16#0: bool = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L159
        return result#2

subroutine test_cases.array.static_size.StaticSizeContract.test_array[routing]() -> void:
    block@0: // L41
        let x1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len x1#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let y1#0: uint64 = (btoi tmp%1#0)
        let x2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len x2#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let tmp%4#0: bytes = (txna ApplicationArgs 4)
        let len%3#0: uint64 = (len tmp%4#0)
        let eq%3#0: bool = (== len%3#0 8u)
        (assert eq%3#0) // invalid number of bytes for arc4.uint64
        let y2#0: uint64 = (btoi tmp%4#0)
        (app_global_put "count" 0u)
        let (tmp%0#1: uint64, tmp%1#1: uint64, tmp%2#1: account, tmp%3#1: Encoded(uint64,uint64), tmp%4#1: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#1: uint64, tmp%6#1: uint64, tmp%7#1: account, tmp%8#1: Encoded(uint64,uint64), tmp%9#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: account, tmp%13#0: Encoded(uint64,uint64), tmp%14#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let aggregate%head%0#0: bytes = 0x0000000000000000
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%head%1#0: bytes = 0x00000000000000000000000000000000
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#1)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#1)
        let aggregate%head%3#0: bytes = (concat aggregate%val_as_bytes%1#0 aggregate%val_as_bytes%2#0)
        let aggregate%head%4#0: bytes = (concat aggregate%head%3#0 tmp%2#1)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 tmp%3#1)
        let aggregate%value_len%0#0: uint64 = (len tmp%4#1)
        let aggregate%len_ok%0#0: bool = (<= aggregate%value_len%0#0 64u)
        (assert aggregate%len_ok%0#0) // overflow
        let aggregate%bzero%0#0: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#0: bytes[64] = (b| tmp%4#1 aggregate%bzero%0#0)
        let aggregate%head%6#0: bytes = (concat aggregate%head%5#0 aggregate%arc4_encoded%0#0)
        let aggregate%head%7#0: bytes = (concat 0x00000000000000000000000000000000 aggregate%head%6#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob y1#0)
        let aggregate%head%10#0: bytes = (concat x1#0 aggregate%val_as_bytes%3#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%5#1)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%6#1)
        let aggregate%head%12#0: bytes = (concat aggregate%val_as_bytes%4#0 aggregate%val_as_bytes%5#0)
        let aggregate%head%13#0: bytes = (concat aggregate%head%12#0 tmp%7#1)
        let aggregate%head%14#0: bytes = (concat aggregate%head%13#0 tmp%8#1)
        let aggregate%value_len%1#0: uint64 = (len tmp%9#0)
        let aggregate%len_ok%1#0: bool = (<= aggregate%value_len%1#0 64u)
        (assert aggregate%len_ok%1#0) // overflow
        let aggregate%arc4_encoded%1#0: bytes[64] = (b| tmp%9#0 aggregate%bzero%0#0)
        let aggregate%head%15#0: bytes = (concat aggregate%head%14#0 aggregate%arc4_encoded%1#0)
        let aggregate%head%16#0: bytes = (concat aggregate%head%10#0 aggregate%head%15#0)
        let aggregate%head%17#0: bytes = (concat aggregate%head%7#0 aggregate%head%16#0)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob y2#0)
        let aggregate%head%19#0: bytes = (concat x2#0 aggregate%val_as_bytes%6#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%10#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%11#0)
        let aggregate%head%21#0: bytes = (concat aggregate%val_as_bytes%7#0 aggregate%val_as_bytes%8#0)
        let aggregate%head%22#0: bytes = (concat aggregate%head%21#0 tmp%12#0)
        let aggregate%head%23#0: bytes = (concat aggregate%head%22#0 tmp%13#0)
        let aggregate%value_len%2#0: uint64 = (len tmp%14#0)
        let aggregate%len_ok%2#0: bool = (<= aggregate%value_len%2#0 64u)
        (assert aggregate%len_ok%2#0) // overflow
        let aggregate%arc4_encoded%2#0: bytes[64] = (b| tmp%14#0 aggregate%bzero%0#0)
        let aggregate%head%24#0: bytes = (concat aggregate%head%23#0 aggregate%arc4_encoded%2#0)
        let aggregate%head%25#0: bytes = (concat aggregate%head%19#0 aggregate%head%24#0)
        let aggregate%head%26#0: bytes = (concat aggregate%head%17#0 aggregate%head%25#0)
        let path#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[])* = new()
        store(path#0, aggregate%head%26#0)
        let value_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L51
        let i#0: uint64 = φ(value_internal%0#0 <- block@0, tmp%15#0 <- block@3)
        let continue_looping%0#0: bool = (< i#0 3u)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L52
        let slot_contents%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%0#0: uint64 = (* i#0 144u)
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%0#0 aggregate%bytes_offset%0#0 144u) // on error: index access is out of bounds
        let aggregate%extract%2#0: bytes = ((extract 16 128) aggregate%encoded_element%0#0)
        let aggregate%extract%4#0: bytes = ((extract 8 8) aggregate%extract%2#0)
        let aggregate%item1%1#0: uint64 = (extract_uint64 aggregate%extract%2#0 8u)
        let tmp%15#0: uint64 = (+ i#0 1u)
        let tmp%16#0: bool = (== aggregate%item1%1#0 tmp%15#0)
        (assert tmp%16#0)
        let slot_contents%1#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = slot_contents%0#0
        let aggregate%encoded_element%1#0: bytes = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 144u) // on error: index access is out of bounds
        let aggregate%extract%10#0: bytes = ((extract 16 128) aggregate%encoded_element%1#0)
        let aggregate%extract%14#0: bytes = ((extract 48 16) aggregate%extract%10#0)
        let aggregate%extract%16#0: bytes = ((extract 0 8) aggregate%extract%14#0)
        let tmp%17#0: uint64 = (+ i#0 2u)
        let tmp%18#0: biguint = (itob tmp%17#0)
        let tmp%19#0: bool = (b== aggregate%extract%16#0 tmp%18#0)
        (assert tmp%19#0)
        let slot_contents%2#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = slot_contents%0#0
        let aggregate%encoded_element%2#0: bytes = (extract3 slot_contents%2#0 aggregate%bytes_offset%0#0 144u) // on error: index access is out of bounds
        let aggregate%extract%19#0: bytes = ((extract 16 128) aggregate%encoded_element%2#0)
        let aggregate%extract%23#0: bytes = ((extract 48 16) aggregate%extract%19#0)
        let aggregate%extract%25#0: bytes = ((extract 8 8) aggregate%extract%23#0)
        let tmp%22#0: uint64 = (* tmp%15#0 tmp%15#0)
        let tmp%23#0: biguint = (itob tmp%22#0)
        let tmp%24#0: bool = (b== aggregate%extract%25#0 tmp%23#0)
        (assert tmp%24#0)
        goto block@2
    block@5: // after_for_L51
        let slot_contents%3#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%3#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 144u)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = (concat as_u16_bytes%0#0 slot_contents%3#0)
        (box_del "a")
        (box_put "a" converted_array%0#0)
        let slot_contents%0#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = slot_contents%3#0
        let aggregate%bytes_offset%3#0: uint64 = 0u
        let aggregate%encoded_element%3#0: bytes = ((extract 0 144) slot_contents%0#1) // on error: index access is out of bounds
        let last_point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%3#0)
        let aggregate%extract%27#0: bytes = ((extract 8 8) aggregate%encoded_element%3#0)
        let last_point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%3#0 8u)
        let length#0: uint64 = 0u
        let aggregate%slot_contents%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = slot_contents%3#0
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 144u)
        let value_internal%0#1: uint64 = 1u
        goto block@7
    block@7: // for_header_L171
        let point_idx#0: uint64 = φ(value_internal%0#1 <- block@5, value_internal%0#3 <- block@14)
        let length#3: uint64 = φ(length#0 <- block@5, length#4 <- block@14)
        let continue_looping%0#1: bool = (< point_idx#0 aggregate%array_len%1#0)
        goto continue_looping%0#1 ? block@8 : block@15
    block@8: // for_body_L172
        let slot_contents%1#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = load(path#0)
        let aggregate%bytes_offset%4#0: uint64 = (* point_idx#0 144u)
        let aggregate%encoded_element%4#0: bytes = (extract3 slot_contents%1#1 aggregate%bytes_offset%4#0 144u) // on error: index access is out of bounds
        let point.x#0: Encoded(uint64) = ((extract 0 8) aggregate%encoded_element%4#0)
        let aggregate%extract%35#0: bytes = ((extract 8 8) aggregate%encoded_element%4#0)
        let point.y#0: uint64 = (extract_uint64 aggregate%encoded_element%4#0 8u)
        let tmp%1#2: bool = (b< point.x#0 last_point.x#0)
        goto tmp%1#2 ? block@9 : block@10
    block@9: // if_body_L174
        let tmp%2#2: uint64 = (extract_uint64 aggregate%encoded_element%3#0 0u)
        let tmp%3#2: uint64 = (extract_uint64 aggregate%encoded_element%4#0 0u)
        let dx#0: uint64 = (- tmp%2#2 tmp%3#2)
        goto block@11
    block@10: // else_body_L176
        let tmp%5#2: uint64 = (extract_uint64 aggregate%encoded_element%4#0 0u)
        let tmp%6#2: uint64 = (extract_uint64 aggregate%encoded_element%3#0 0u)
        let dx#1: uint64 = (- tmp%5#2 tmp%6#2)
        goto block@11
    block@11: // after_if_else_L173
        let dx#3: uint64 = φ(dx#0 <- block@9, dx#1 <- block@10)
        let tmp%8#2: bool = (< point.y#0 last_point.y#0)
        goto tmp%8#2 ? block@12 : block@13
    block@12: // if_body_L178
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@14
    block@13: // else_body_L180
        let dy#1: uint64 = (- point.y#0 last_point.y#0)
        goto block@14
    block@14: // after_if_else_L177
        let dy#2: uint64 = φ(dy#0 <- block@12, dy#1 <- block@13)
        let tmp%11#1: uint64 = (* dx#3 dx#3)
        let tmp%12#1: uint64 = (* dy#2 dy#2)
        let tmp%13#1: uint64 = (+ tmp%11#1 tmp%12#1)
        let tmp%14#1: uint64 = (sqrt tmp%13#1)
        let length#4: uint64 = (+ length#3 tmp%14#1)
        let value_internal%0#3: uint64 = (+ point_idx#0 1u)
        goto block@7
    block@15: // after_for_L171
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob length#3)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#0)
        (log tmp%8#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple[routing]() -> void:
    block@0: // L59
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>
        let some_more.0#0: Encoded(uint64,uint64) = ((extract 0 16) tmp%0#0)
        let some_more.1#0: Encoded(uint64,uint64) = ((extract 16 16) tmp%0#0)
        let arr#0: Encoded((uint64,uint64)[])* = new()
        let slot_contents%0#0: Encoded((uint64,uint64)[]) = 0x
        let aggregate%head%0#0: bytes = some_more.0#0
        let aggregate%head%1#0: bytes = (concat some_more.0#0 some_more.1#0)
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat slot_contents%0#0 aggregate%head%1#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let aggregate%slot_contents%0#0: Encoded((uint64,uint64)[]) = concat%0#0
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 16u)
        let tmp%2#1: uint64 = (- aggregate%array_len%0#0 1u)
        let slot_contents%1#0: Encoded((uint64,uint64)[]) = concat%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* tmp%2#1 16u)
        let last#0: Encoded(uint64,uint64) = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%3#1: bool = (== last#0 some_more.1#0)
        (assert tmp%3#1)
        let slot_contents%2#0: Encoded((uint64,uint64)[]) = concat%0#0
        let aggregate%bytes_len%1#0: uint64 = (len slot_contents%2#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 16u)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%1#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%2#0)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 result#0 0u) // on error: invalid array length header
        let tmp%6#0: uint64 = (- aggregate%array_length%0#0 1u)
        let aggregate%total_length%0#0: uint64 = (len result#0)
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) result#0)
        let aggregate%bytes_offset%1#0: uint64 = (* tmp%6#0 16u)
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%7#0: bool = (== aggregate%encoded_element%1#0 last#0)
        (assert tmp%7#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 result#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple[routing]() -> void:
    block@0: // L69
        let some_more#0: Encoded((uint64,uint64),(uint64,uint64)) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len some_more#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>
        let arr#0: Encoded((uint64,uint64)[])* = new()
        let slot_contents%0#0: Encoded((uint64,uint64)[]) = 0x
        let concat%0#0: Encoded((uint64,uint64)[]) = (concat slot_contents%0#0 some_more#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let slot_contents%1#0: Encoded((uint64,uint64)[]) = concat%0#0
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%1#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob aggregate%array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,uint64)[]) = (concat as_u16_bytes%0#0 slot_contents%1#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 converted_array%0#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.test_bool_array[routing]() -> void:
    block@0: // L77
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let length#0: uint64 = (btoi tmp%0#0)
        let arr#0: Encoded(bool8[])* = new()
        store(arr#0, 0x)
        let aggregate%slot_contents%0#0: Encoded(bool8[]) = 0x
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = aggregate%bytes_len%0#0
        let tmp%1#1: bool = (! aggregate%bytes_len%0#0)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (+ length#0 1u)
        let value_internal%0#0: uint64 = 1u
        goto block@2
    block@2: // for_header_L82
        let i#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< i#0 tmp%2#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L83
        let tmp%3#1: uint64 = (% i#0 2u)
        let tmp%4#1: bool = (! tmp%3#1)
        let slot_contents%0#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%4#1)
        let aggregate%head%0#0: bytes = aggregate%encoded_bool%0#0
        let concat%0#0: Encoded(bool8[]) = (concat slot_contents%0#0 aggregate%encoded_bool%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L82
        let aggregate%slot_contents%1#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = aggregate%bytes_len%1#0
        let tmp%7#0: bool = (== aggregate%bytes_len%1#0 length#0)
        (assert tmp%7#0) // expected correct length
        let arr2#0: Encoded(bool8[])* = new()
        let slot_contents%1#0: Encoded(bool8[]) = aggregate%slot_contents%1#0
        store(arr2#0, slot_contents%1#0)
        let slot_contents%2#0: Encoded(bool8[]) = load(arr#0)
        let slot_contents%3#0: Encoded(bool8[]) = slot_contents%1#0
        let concat%1#0: Encoded(bool8[]) = (concat slot_contents%3#0 slot_contents%2#0) // on error: max array length exceeded
        store(arr2#0, concat%1#0)
        let aggregate%slot_contents%2#0: Encoded(bool8[]) = concat%1#0
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%2#0)
        let aggregate%array_len%2#0: uint64 = aggregate%bytes_len%2#0
        let tmp%9#0: uint64 = (* length#0 2u)
        let tmp%10#0: bool = (== aggregate%bytes_len%2#0 tmp%9#0)
        (assert tmp%10#0) // expected correct length
        let count#0: uint64 = 0u
        let aggregate%slot_contents%3#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%3#0: uint64 = (len aggregate%slot_contents%3#0)
        let aggregate%array_len%3#0: uint64 = aggregate%bytes_len%3#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L91
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@5, item_index_internal%0#2 <- block@9)
        let count#1: uint64 = φ(count#0 <- block@5, count#3 <- block@9)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 aggregate%bytes_len%3#0)
        goto continue_looping%1#0 ? block@7 : block@11
    block@7: // for_body_L92
        let slot_contents%4#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = item_index_internal%0#1
        let aggregate%encoded_element%0#0: bytes = (extract3 slot_contents%4#0 item_index_internal%0#1 1u) // on error: index access is out of bounds
        let val#0: bool = (getbit aggregate%encoded_element%0#0 0u)
        goto val#0 ? block@8 : block@9
    block@8: // if_body_L93
        let count#2: uint64 = (+ count#1 1u)
        goto block@9
    block@9: // after_if_else_L92
        let count#3: uint64 = φ(count#1 <- block@7, count#2 <- block@8)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@6
    block@11: // after_for_L91
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob count#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%4#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_conversion[routing]() -> void:
    block@0: // L96
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let length#0: uint64 = (btoi tmp%0#0)
        let arr#0: Encoded(uint64[])* = new()
        store(arr#0, 0x)
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = 0x
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let tmp%1#1: bool = (! aggregate%array_len%0#0)
        (assert tmp%1#1)
        let tmp%2#1: uint64 = (+ length#0 1u)
        let value_internal%0#0: uint64 = 1u
        goto block@2
    block@2: // for_header_L101
        let i#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< i#0 tmp%2#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L102
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 aggregate%val_as_bytes%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L101
        let aggregate%slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%1#0)
        let aggregate%array_len%1#0: uint64 = (/ aggregate%bytes_len%1#0 8u)
        let tmp%6#0: bool = (== aggregate%array_len%1#0 length#0)
        (assert tmp%6#0) // expected correct length
        let count#0: uint64 = 0u
        let aggregate%slot_contents%2#0: Encoded(uint64[]) = aggregate%slot_contents%1#0
        let aggregate%bytes_len%2#0: uint64 = (len aggregate%slot_contents%2#0)
        let aggregate%array_len%2#0: uint64 = (/ aggregate%bytes_len%2#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L105
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@5, item_index_internal%0#2 <- block@9)
        let count#1: uint64 = φ(count#0 <- block@5, count#3 <- block@9)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 aggregate%array_len%2#0)
        goto continue_looping%1#0 ? block@7 : block@11
    block@7: // for_body_L106
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let val#0: Encoded(uint64) = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%7#0: bool = (b!= val#0 0b)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // if_body_L107
        let count#2: uint64 = (+ count#1 1u)
        goto block@9
    block@9: // after_if_else_L106
        let count#3: uint64 = φ(count#1 <- block@7, count#2 <- block@8)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@6
    block@11: // after_for_L105
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let arc4_arr#0: Encoded(len+uint64[]) = 0x0000
        let slot_contents%2#0: Encoded(uint64[]) = load(arr#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat 0x0000 slot_contents%2#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#1: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#1 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let tmp%3#0: bytes = (concat 0x151f7c75 arc4_arr#1)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.sum_array[routing]() -> void:
    block@0: // L114
        let arc4_arr#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 arc4_arr#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len arc4_arr#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
        let arr#0: Encoded(uint64[])* = new()
        let slot_contents%0#0: Encoded(uint64[]) = 0x
        let extract_to_end%0#0: bytes = ((extract 2 0) arc4_arr#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%0#0 extract_to_end%0#0) // on error: max array length exceeded
        store(arr#0, concat%0#0)
        let total#0: uint64 = 0u
        let aggregate%slot_contents%0#0: Encoded(uint64[]) = concat%0#0
        let aggregate%bytes_len%0#0: uint64 = (len aggregate%slot_contents%0#0)
        let aggregate%array_len%0#0: uint64 = (/ aggregate%bytes_len%0#0 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L120
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 aggregate%array_len%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L121
        let slot_contents%1#0: Encoded(uint64[]) = load(arr#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let item#0: Encoded(uint64) = (extract3 slot_contents%1#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%0#1: uint64 = (extract_uint64 slot_contents%1#0 aggregate%bytes_offset%0#0)
        let total#2: uint64 = (+ total#1 tmp%0#1)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L120
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob total#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%3#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_bool[routing]() -> void:
    block@0: // L140
        let arr#0: Encoded(bool8[])* = new()
        let tmp%0#1: account = (txn Sender)
        let tmp%1#1: account = (txn Receiver)
        let tmp%2#0: bool = (== tmp%0#1 tmp%1#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let slot_contents%0#0: Encoded(bool8[]) = 0x
        let concat%0#0: Encoded(bool8[]) = (concat slot_contents%0#0 aggregate%encoded_bool%0#0) // on error: max array length exceeded
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: account = (txn Receiver)
        let tmp%7#0: bool = (!= tmp%5#0 tmp%6#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%7#0)
        let slot_contents%1#0: Encoded(bool8[]) = concat%0#0
        let concat%1#0: Encoded(bool8[]) = (concat slot_contents%1#0 aggregate%encoded_bool%1#0) // on error: max array length exceeded
        store(arr#0, concat%1#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let dyn_arr#0: Encoded(len+bool1[]) = 0x0000
        let slot_contents%2#0: Encoded(bool8[]) = concat%1#0
        let aggregate%bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%2#0, aggregate%bytes_len%0#0, 8u)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 dyn_arr#1 0u) // on error: invalid array length header
        let tmp%12#0: bool = (== aggregate%array_length%0#0 2u)
        (assert tmp%12#0) // expected correct length
        let tmp%13#0: uint64 = (len dyn_arr#1)
        let tmp%14#0: bool = (== tmp%13#0 3u)
        (assert tmp%14#0) // expected 3 bytes
        let aggregate%lt%0#0: bool = (< 0u aggregate%array_length%0#0)
        (assert aggregate%array_length%0#0) // index access is out of bounds
        let aggregate%add%0#0: uint64 = 16u
        let aggregate%get_bit%0#0: bool = (getbit dyn_arr#1 16u)
        let aggregate%encoded_bool%2#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%0#0)
        let aggregate%get_bit%1#0: bool = (getbit aggregate%encoded_bool%2#0 0u)
        let tmp%16#0: account = (txn Sender)
        let tmp%17#0: account = (txn Receiver)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        let tmp%19#0: bool = (== aggregate%get_bit%1#0 tmp%18#0)
        (assert tmp%19#0) // expected correct value at 0
        let aggregate%lt%1#0: bool = (< 1u aggregate%array_length%0#0)
        (assert aggregate%lt%1#0) // index access is out of bounds
        let aggregate%add%1#0: uint64 = 17u
        let aggregate%get_bit%2#0: bool = (getbit dyn_arr#1 17u)
        let aggregate%encoded_bool%3#0: bytes[1] = (setbit 0x00 0u aggregate%get_bit%2#0)
        let aggregate%get_bit%3#0: bool = (getbit aggregate%encoded_bool%3#0 0u)
        let tmp%21#0: account = (txn Sender)
        let tmp%22#0: account = (txn Receiver)
        let tmp%23#0: bool = (!= tmp%21#0 tmp%22#0)
        let tmp%24#0: bool = (== aggregate%get_bit%3#0 tmp%23#0)
        (assert tmp%24#0) // expected correct value at 1
        let arr2#0: Encoded(bool8[])* = new()
        let slot_contents%3#0: Encoded(bool8[]) = concat%1#0
        store(arr2#0, slot_contents%3#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L156
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L157
        let aggregate%add%2#0: uint64 = (+ item_index_internal%0#1 16u)
        let aggregate%get_bit%4#0: bool = (getbit dyn_arr#1 aggregate%add%2#0)
        let b#0: Encoded(bool8) = (setbit 0x00 0u aggregate%get_bit%4#0)
        let slot_contents%4#0: Encoded(bool8[]) = load(arr2#0)
        let concat%2#0: Encoded(bool8[]) = (concat slot_contents%4#0 b#0) // on error: max array length exceeded
        store(arr2#0, concat%2#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L156
        let aggregate%slot_contents%0#0: Encoded(bool8[]) = load(arr2#0)
        let aggregate%bytes_len%1#0: uint64 = (len aggregate%slot_contents%0#0)
        let tmp%27#0: bool = (== aggregate%bytes_len%1#0 4u)
        (assert tmp%27#0) // expected correct length
        let slot_contents%5#0: Encoded(bool8[]) = aggregate%slot_contents%0#0
        let aggregate%bytes_offset%0#0: uint64 = 0u
        let aggregate%encoded_element%0#0: bytes = ((extract 0 1) slot_contents%5#0) // on error: index access is out of bounds
        let aggregate%get_bit%5#0: bool = (getbit aggregate%encoded_element%0#0 0u)
        let tmp%29#0: account = (txn Sender)
        let tmp%30#0: account = (txn Receiver)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        let tmp%32#0: bool = (== aggregate%get_bit%5#0 tmp%31#0)
        (assert tmp%32#0) // expected correct value at 0
        let slot_contents%6#0: Encoded(bool8[]) = aggregate%slot_contents%0#0
        let aggregate%bytes_offset%1#0: uint64 = 1u
        let aggregate%encoded_element%1#0: bytes = ((extract 1 1) slot_contents%6#0) // on error: index access is out of bounds
        let aggregate%get_bit%6#0: bool = (getbit aggregate%encoded_element%1#0 0u)
        let tmp%34#0: account = (txn Sender)
        let tmp%35#0: account = (txn Receiver)
        let tmp%36#0: bool = (!= tmp%34#0 tmp%35#0)
        let tmp%37#0: bool = (== aggregate%get_bit%6#0 tmp%36#0)
        (assert tmp%37#0) // expected correct value at 1
        let slot_contents%7#0: Encoded(bool8[]) = aggregate%slot_contents%0#0
        let aggregate%bytes_offset%2#0: uint64 = 2u
        let aggregate%encoded_element%2#0: bytes = ((extract 2 1) slot_contents%7#0) // on error: index access is out of bounds
        let aggregate%get_bit%7#0: bool = (getbit aggregate%encoded_element%2#0 0u)
        let tmp%39#0: account = (txn Sender)
        let tmp%40#0: account = (txn Receiver)
        let tmp%41#0: bool = (== tmp%39#0 tmp%40#0)
        let tmp%42#0: bool = (== aggregate%get_bit%7#0 tmp%41#0)
        (assert tmp%42#0) // expected correct value at 2
        let slot_contents%8#0: Encoded(bool8[]) = aggregate%slot_contents%0#0
        let aggregate%bytes_offset%3#0: uint64 = 3u
        let aggregate%encoded_element%3#0: bytes = ((extract 3 1) slot_contents%8#0) // on error: index access is out of bounds
        let aggregate%get_bit%8#0: bool = (getbit aggregate%encoded_element%3#0 0u)
        let tmp%44#0: account = (txn Sender)
        let tmp%45#0: account = (txn Receiver)
        let tmp%46#0: bool = (!= tmp%44#0 tmp%45#0)
        let tmp%47#0: bool = (== aggregate%get_bit%8#0 tmp%46#0)
        (assert tmp%47#0) // expected correct value at 3
        let slot_contents%9#0: Encoded(bool8[]) = load(arr#0)
        let aggregate%bytes_len%2#0: uint64 = (len slot_contents%9#0)
        let bit_packed_source%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%9#0, aggregate%bytes_len%2#0, 8u)
        let tmp%1#0: bytes = (concat 0x151f7c75 bit_packed_source%0#0)
        (log tmp%1#0)
        exit 1u

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, account, Encoded(uint64,uint64), biguint>:
    block@0: // L125
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: account = (txn Sender)
        let tmp%3#0: Encoded(uint64,uint64) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%4#0: biguint = (itob maybe_value%2#0)
        return tmp%1#0 tmp%0#0 tmp%2#0 tmp%3#0 tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded(uint64,uint64):
    block@0: // L136
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%1#0) // check self.count exists
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%2#0: uint64 = (* maybe_value%1#0 maybe_value%2#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%0#0: bytes = aggregate%val_as_bytes%0#0
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        return aggregate%head%1#0