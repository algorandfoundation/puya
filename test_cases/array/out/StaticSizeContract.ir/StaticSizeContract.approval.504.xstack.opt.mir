// Op                                                                                             Stack (out)
// test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                         tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // array/static_size.py:39
        // self.count = UInt64(0)
        byte "count"                                                                              "count"
        int 0                                                                                     "count",0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // array/static_size.py:37
        // class StaticSizeContract(arc4.ARC4Contract):
        txn NumAppArgs                                                                            tmp%0#2
        bz main___algopy_default_create@14 ; b main_abi_routing@4

    main_abi_routing@4:
        // array/static_size.py:37
        // class StaticSizeContract(arc4.ARC4Contract):
        txn OnCompletion                                                                          tmp%2#0
        !                                                                                         tmp%3#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%4#0
        assert
        txna ApplicationArgs 0                                                                    tmp%5#0
        method test_array(uint64,uint64,uint64,uint64)uint64                                      tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64)
        method test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[] tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[])
        method test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[] tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[])
        method test_bool_array(uint64)uint64                                                      tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_bool_array(uint64)uint64)
        method test_arc4_conversion(uint64)uint64[]                                               tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_bool_array(uint64)uint64),Method(test_arc4_conversion(uint64)uint64[])
        method sum_array(uint64[])uint64                                                          tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_bool_array(uint64)uint64),Method(test_arc4_conversion(uint64)uint64[]),Method(sum_array(uint64[])uint64)
        method test_arc4_bool()bool[]                                                             tmp%5#0,Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_bool_array(uint64)uint64),Method(test_arc4_conversion(uint64)uint64[]),Method(sum_array(uint64[])uint64),Method(test_arc4_bool()bool[])
        l-load tmp%5#0 7                                                                          Method(test_array(uint64,uint64,uint64,uint64)uint64),Method(test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]),Method(test_bool_array(uint64)uint64),Method(test_arc4_conversion(uint64)uint64[]),Method(sum_array(uint64[])uint64),Method(test_arc4_bool()bool[]),tmp%5#0
        match main_test_array_route@6 main_test_extend_from_tuple_route@7 main_test_extend_from_arc4_tuple_route@8 main_test_bool_array_route@9 main_test_arc4_conversion_route@10 main_sum_array_route@11 main_test_arc4_bool_route@12 ; b main_after_if_else@13 

    main_test_array_route@6:
        // array/static_size.py:41
        // @arc4.abimethod()
        callsub test_array
        b main_after_if_else@13

    main_test_extend_from_tuple_route@7:
        // array/static_size.py:57
        // @arc4.abimethod()
        callsub test_extend_from_tuple
        b main_after_if_else@13

    main_test_extend_from_arc4_tuple_route@8:
        // array/static_size.py:67
        // @arc4.abimethod()
        callsub test_extend_from_arc4_tuple
        b main_after_if_else@13

    main_test_bool_array_route@9:
        // array/static_size.py:75
        // @arc4.abimethod()
        callsub test_bool_array
        b main_after_if_else@13

    main_test_arc4_conversion_route@10:
        // array/static_size.py:94
        // @arc4.abimethod()
        callsub test_arc4_conversion
        b main_after_if_else@13

    main_sum_array_route@11:
        // array/static_size.py:112
        // @arc4.abimethod()
        callsub sum_array
        b main_after_if_else@13

    main_test_arc4_bool_route@12:
        // array/static_size.py:138
        // @arc4.abimethod()
        callsub test_arc4_bool
        b main_after_if_else@13

    main_after_if_else@13:
        // array/static_size.py:37
        // class StaticSizeContract(arc4.ARC4Contract):
        err

    main___algopy_default_create@14:
        txn OnCompletion                                                                          tmp%6#0
        !                                                                                         tmp%7#0
        txn ApplicationID                                                                         tmp%7#0,tmp%8#0
        !                                                                                         tmp%7#0,tmp%9#0
        l-load tmp%7#0 1                                                                          tmp%9#0,tmp%7#0
        l-load tmp%9#0 1                                                                          tmp%7#0,tmp%9#0
        &&                                                                                        tmp%10#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                                     1
        return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
subroutine dynamic_array_concat_bits:
    dynamic_array_concat_bits_block@0:                                                            (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        p-load array#0                                                                            (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy)
        int 0                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy),0
        extract_uint16                                                                            (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        l-store-copy array_length#0 0                                                             (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
        v-store array_length#0                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        l-load-copy array_length#0 0                                                              (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
        p-load new_items_count#0                                                                  (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy),new_items_count#0 (copy)
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0
        l-load-copy new_array_length#0 0                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length#0 (copy)
        itob                                                                                      (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,tmp%2#0
        extract 6 0                                                                               (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0
        p-load array#0                                                                            (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0,array#0 (copy)
        l-load new_array_length_b#0 1                                                             (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,array#0 (copy),new_array_length_b#0
        replace2 0                                                                                (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,result#0
        l-store-copy result#0 2                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,array_length#0,new_array_length#0,result#0 (copy)
        v-store result#0                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,array_length#0,new_array_length#0
        l-load array_length#0 1                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,array_length#0
        int 7                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,array_length#0,7
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,tmp%5#0
        int 8                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,tmp%5#0,8
        /                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0
        l-store-copy current_bytes#0 0                                                            (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0,current_bytes#0 (copy)
        v-store current_bytes#0                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0
        l-load new_array_length#0 1                                                               (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,new_array_length#0
        int 7                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,new_array_length#0,7
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,tmp%7#0
        int 8                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,tmp%7#0,8
        /                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
        l-store-copy required_bytes#0 0                                                           (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0,required_bytes#0 (copy)
        v-store required_bytes#0                                                                  (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
        l-load current_bytes#0 1                                                                  (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,required_bytes#0,current_bytes#0
        l-load required_bytes#0 1                                                                 (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
        <                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,tmp%9#0
        l-load result#0 1                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%9#0,result#0
        v-store result#7                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%9#0
        l-load tmp%9#0 0                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%9#0
        bz dynamic_array_concat_bits_after_if_else@2 ; b dynamic_array_concat_bits_if_body@1 (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

    dynamic_array_concat_bits_if_body@1:                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load required_bytes#0                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0
        v-load current_bytes#0                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0,current_bytes#0
        -                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%10#0
        bzero                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%11#0
        v-load result#0                                                                           (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%11#0,result#0
        l-load tmp%11#0 1                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,tmp%11#0
        concat                                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
        v-store result#7                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_after_if_else@2                                               (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_after_if_else@2:                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load result#7                                                                           (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#7
        v-store result#0                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        int 0                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 0
        v-store read_offset#0                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load array_length#0                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        int 16                                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,16
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        l-store-copy write_offset#0 0                                                             (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_offset#0 (copy)
        v-store write_offset#0                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        l-load write_offset#0 0                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        p-load new_items_count#0                                                                  (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,new_items_count#0 (copy)
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_end#0
        v-store write_end#0                                                                       (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_while_top@3                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_while_top@3:                                                        (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load write_offset#0                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        v-load write_end#0                                                                        (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_end#0
        <                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%15#0
        bz dynamic_array_concat_bits_after_while@5 ; b dynamic_array_concat_bits_while_body@4 (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

    dynamic_array_concat_bits_while_body@4:                                                       (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        p-load new_items_bytes#0                                                                  (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy)
        v-load read_offset#0                                                                      (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy),read_offset#0
        l-store-copy read_offset#0 1                                                              (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,new_items_bytes#0 (copy),read_offset#0 (copy)
        getbit                                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0
        v-load result#0                                                                           (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0,result#0
        v-load write_offset#0                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0,result#0,write_offset#0
        l-store-copy write_offset#0 2                                                             (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,tmp%16#0,result#0,write_offset#0 (copy)
        l-load tmp%16#0 2                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0,write_offset#0 (copy),tmp%16#0
        setbit                                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0
        v-store result#0                                                                          (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        l-load write_offset#0 0                                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        int 1                                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,1
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        v-store write_offset#0                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        l-load read_offset#0 0                                                                    (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        p-load read_step#0                                                                        (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,read_step#0 (copy)
        +                                                                                         (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        v-store read_offset#0                                                                     (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_while_top@3                                                   (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_after_while@5:                                                      (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load result#0                                                                           (洧도) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
        retsub                                                                                    result#0


// test_cases.array.static_size.StaticSizeContract.test_array[routing]() -> void:
subroutine test_array:
    test_array_block@0:
        // array/static_size.py:41
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    x1#0
        txna ApplicationArgs 2                                                                    x1#0,reinterpret_Encoded(uint64)%1#0
        btoi                                                                                      x1#0,y1#0
        txna ApplicationArgs 3                                                                    x1#0,y1#0,x2#0
        txna ApplicationArgs 4                                                                    x1#0,y1#0,x2#0,reinterpret_Encoded(uint64)%3#0
        btoi                                                                                      x1#0,y1#0,x2#0,y2#0
        // array/static_size.py:43
        // self.count = UInt64(0)
        byte "count"                                                                              x1#0,y1#0,x2#0,y2#0,"count"
        int 0                                                                                     x1#0,y1#0,x2#0,y2#0,"count",0
        app_global_put                                                                            x1#0,y1#0,x2#0,y2#0
        // array/static_size.py:45
        // Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
        callsub xtra                                                                              x1#0,y1#0,x2#0,y2#0,tmp%0#1,tmp%1#1,tmp%2#1,tmp%3#1,tmp%4#1
        // array/static_size.py:46
        // Point(x=x1, y=y1, other=self.xtra()),
        callsub xtra                                                                              x1#0,y1#0,x2#0,y2#0,tmp%0#1,tmp%1#1,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0
        // array/static_size.py:47
        // Point(x=x2, y=y2, other=self.xtra()),
        callsub xtra                                                                              x1#0,y1#0,x2#0,y2#0,tmp%0#1,tmp%1#1,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0
        // array/static_size.py:44-48
        // path = ReferenceArray(
        //     Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
        //     Point(x=x1, y=y1, other=self.xtra()),
        //     Point(x=x2, y=y2, other=self.xtra()),
        // )
        l-load tmp%0#1 14                                                                         x1#0,y1#0,x2#0,y2#0,tmp%1#1,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%0#1
        itob                                                                                      x1#0,y1#0,x2#0,y2#0,tmp%1#1,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%val_as_bytes%1#0
        l-load tmp%1#1 14                                                                         x1#0,y1#0,x2#0,y2#0,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%val_as_bytes%1#0,tmp%1#1
        itob                                                                                      x1#0,y1#0,x2#0,y2#0,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        l-load aggregate%val_as_bytes%1#0 1                                                       x1#0,y1#0,x2#0,y2#0,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%val_as_bytes%2#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%2#0 1                                                       x1#0,y1#0,x2#0,y2#0,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%2#0
        concat                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%2#1,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%3#0
        l-load tmp%2#1 13                                                                         x1#0,y1#0,x2#0,y2#0,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%3#0,tmp%2#1
        concat                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%3#1,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%4#0
        l-load tmp%3#1 12                                                                         x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%4#0,tmp%3#1
        concat                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0
        l-load-copy tmp%4#1 11                                                                    x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,tmp%4#1 (copy)
        len                                                                                       x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%value_len%0#0
        int 64                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%value_len%0#0,64
        <=                                                                                        x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%len_ok%0#0
        assert // overflow                                                                        x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0
        int 64                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,64
        bzero                                                                                     x1#0,y1#0,x2#0,y2#0,tmp%4#1,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%bzero%0#0
        l-load tmp%4#1 12                                                                         x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%bzero%0#0,tmp%4#1
        l-load-copy aggregate%bzero%0#0 1                                                         x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%bzero%0#0,tmp%4#1,aggregate%bzero%0#0 (copy)
        b|                                                                                        x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%head%5#0,aggregate%bzero%0#0,aggregate%arc4_encoded%0#0
        l-load aggregate%head%5#0 2                                                               x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%arc4_encoded%0#0,aggregate%head%5#0
        l-load aggregate%arc4_encoded%0#0 1                                                       x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%5#0,aggregate%arc4_encoded%0#0
        concat                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%6#0
        byte 0x00000000000000000000000000000000                                                   x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%6#0,0x00000000000000000000000000000000
        l-load aggregate%head%6#0 1                                                               x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,0x00000000000000000000000000000000,aggregate%head%6#0
        concat                                                                                    x1#0,y1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0
        l-load y1#0 14                                                                            x1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,y1#0
        itob                                                                                      x1#0,x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%val_as_bytes%3#0
        l-load x1#0 15                                                                            x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%val_as_bytes%3#0,x1#0
        l-load aggregate%val_as_bytes%3#0 1                                                       x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,x1#0,aggregate%val_as_bytes%3#0
        concat                                                                                    x2#0,y2#0,tmp%5#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0
        l-load tmp%5#0 12                                                                         x2#0,y2#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,tmp%5#0
        itob                                                                                      x2#0,y2#0,tmp%6#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%val_as_bytes%4#0
        l-load tmp%6#0 12                                                                         x2#0,y2#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%val_as_bytes%4#0,tmp%6#0
        itob                                                                                      x2#0,y2#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%5#0
        l-load aggregate%val_as_bytes%4#0 1                                                       x2#0,y2#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%val_as_bytes%5#0,aggregate%val_as_bytes%4#0
        l-load aggregate%val_as_bytes%5#0 1                                                       x2#0,y2#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%val_as_bytes%4#0,aggregate%val_as_bytes%5#0
        concat                                                                                    x2#0,y2#0,tmp%7#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%12#0
        l-load tmp%7#0 11                                                                         x2#0,y2#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%12#0,tmp%7#0
        concat                                                                                    x2#0,y2#0,tmp%8#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%13#0
        l-load tmp%8#0 10                                                                         x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%13#0,tmp%8#0
        concat                                                                                    x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0
        l-load-copy tmp%9#0 9                                                                     x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,tmp%9#0 (copy)
        len                                                                                       x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,aggregate%value_len%1#0
        int 64                                                                                    x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,aggregate%value_len%1#0,64
        <=                                                                                        x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,aggregate%len_ok%1#0
        assert // overflow                                                                        x2#0,y2#0,tmp%9#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0
        l-load tmp%9#0 9                                                                          x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,tmp%9#0
        l-load-copy aggregate%bzero%0#0 4                                                         x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,tmp%9#0,aggregate%bzero%0#0 (copy)
        b|                                                                                        x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,aggregate%arc4_encoded%1#0
        l-load aggregate%head%14#0 1                                                              x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%arc4_encoded%1#0,aggregate%head%14#0
        l-load aggregate%arc4_encoded%1#0 1                                                       x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%14#0,aggregate%arc4_encoded%1#0
        concat                                                                                    x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%15#0
        l-load aggregate%head%10#0 1                                                              x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%15#0,aggregate%head%10#0
        l-load aggregate%head%15#0 1                                                              x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%10#0,aggregate%head%15#0
        concat                                                                                    x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%16#0
        l-load aggregate%head%7#0 1                                                               x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%16#0,aggregate%head%7#0
        l-load aggregate%head%16#0 1                                                              x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%7#0,aggregate%head%16#0
        concat                                                                                    x2#0,y2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0
        l-load y2#0 7                                                                             x2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,y2#0
        itob                                                                                      x2#0,tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%val_as_bytes%6#0
        l-load x2#0 8                                                                             tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%val_as_bytes%6#0,x2#0
        l-load aggregate%val_as_bytes%6#0 1                                                       tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,x2#0,aggregate%val_as_bytes%6#0
        concat                                                                                    tmp%10#0,tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0
        l-load tmp%10#0 7                                                                         tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,tmp%10#0
        itob                                                                                      tmp%11#0,tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%val_as_bytes%7#0
        l-load tmp%11#0 7                                                                         tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%val_as_bytes%7#0,tmp%11#0
        itob                                                                                      tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%val_as_bytes%7#0,aggregate%val_as_bytes%8#0
        l-load aggregate%val_as_bytes%7#0 1                                                       tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%val_as_bytes%8#0,aggregate%val_as_bytes%7#0
        l-load aggregate%val_as_bytes%8#0 1                                                       tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%val_as_bytes%7#0,aggregate%val_as_bytes%8#0
        concat                                                                                    tmp%12#0,tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%21#0
        l-load tmp%12#0 6                                                                         tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%21#0,tmp%12#0
        concat                                                                                    tmp%13#0,tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%22#0
        l-load tmp%13#0 5                                                                         tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%22#0,tmp%13#0
        concat                                                                                    tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0
        l-load-copy tmp%14#0 4                                                                    tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,tmp%14#0 (copy)
        len                                                                                       tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,aggregate%value_len%2#0
        int 64                                                                                    tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,aggregate%value_len%2#0,64
        <=                                                                                        tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,aggregate%len_ok%2#0
        assert // overflow                                                                        tmp%14#0,aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0
        l-load tmp%14#0 4                                                                         aggregate%bzero%0#0,aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,tmp%14#0
        l-load aggregate%bzero%0#0 4                                                              aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,tmp%14#0,aggregate%bzero%0#0
        b|                                                                                        aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,aggregate%arc4_encoded%2#0
        l-load aggregate%head%23#0 1                                                              aggregate%head%17#0,aggregate%head%19#0,aggregate%arc4_encoded%2#0,aggregate%head%23#0
        l-load aggregate%arc4_encoded%2#0 1                                                       aggregate%head%17#0,aggregate%head%19#0,aggregate%head%23#0,aggregate%arc4_encoded%2#0
        concat                                                                                    aggregate%head%17#0,aggregate%head%19#0,aggregate%head%24#0
        l-load aggregate%head%19#0 1                                                              aggregate%head%17#0,aggregate%head%24#0,aggregate%head%19#0
        l-load aggregate%head%24#0 1                                                              aggregate%head%17#0,aggregate%head%19#0,aggregate%head%24#0
        concat                                                                                    aggregate%head%17#0,aggregate%head%25#0
        l-load aggregate%head%17#0 1                                                              aggregate%head%25#0,aggregate%head%17#0
        l-load aggregate%head%25#0 1                                                              aggregate%head%17#0,aggregate%head%25#0
        concat                                                                                    aggregate%head%26#0
        v-store slot%0
        // array/static_size.py:49
        // for i in urange(3):
        int 0                                                                                     0
        v-store i#0
        b test_array_for_header@2

    test_array_for_header@2:
        // array/static_size.py:49
        // for i in urange(3):
        v-load i#0                                                                                i#0
        int 3                                                                                     i#0,3
        <                                                                                         continue_looping%0#0
        bz test_array_after_for@5 ; b test_array_for_body@3

    test_array_for_body@3:
        v-load slot%0                                                                             slot_contents%0#0
        // array/static_size.py:50
        // assert path[i].other.b == i + 1
        v-load i#0                                                                                slot_contents%0#0,i#0
        l-store-copy i#0 1                                                                        i#0,slot_contents%0#0,i#0 (copy)
        int 144                                                                                   i#0,slot_contents%0#0,i#0 (copy),144
        *                                                                                         i#0,slot_contents%0#0,aggregate%bytes_offset%0#0
        l-load slot_contents%0#0 1                                                                i#0,aggregate%bytes_offset%0#0,slot_contents%0#0
        l-load aggregate%bytes_offset%0#0 1                                                       i#0,slot_contents%0#0,aggregate%bytes_offset%0#0
        int 144                                                                                   i#0,slot_contents%0#0,aggregate%bytes_offset%0#0,144
        extract3 // on error: index access is out of bounds                                       i#0,aggregate%encoded_element%0#0
        extract 16 128                                                                            i#0,aggregate%extract%2#0
        l-load-copy aggregate%extract%2#0 0                                                       i#0,aggregate%extract%2#0,aggregate%extract%2#0 (copy)
        int 8                                                                                     i#0,aggregate%extract%2#0,aggregate%extract%2#0 (copy),8
        extract_uint64                                                                            i#0,aggregate%extract%2#0,aggregate%item1%1#0
        l-load-copy i#0 2                                                                         i#0,aggregate%extract%2#0,aggregate%item1%1#0,i#0 (copy)
        int 1                                                                                     i#0,aggregate%extract%2#0,aggregate%item1%1#0,i#0 (copy),1
        +                                                                                         i#0,aggregate%extract%2#0,aggregate%item1%1#0,i#2
        l-load aggregate%item1%1#0 1                                                              i#0,aggregate%extract%2#0,i#2,aggregate%item1%1#0
        l-load-copy i#2 1                                                                         i#0,aggregate%extract%2#0,i#2,aggregate%item1%1#0,i#2 (copy)
        ==                                                                                        i#0,aggregate%extract%2#0,i#2,tmp%16#0
        assert                                                                                    i#0,aggregate%extract%2#0,i#2
        // array/static_size.py:51
        // assert path[i].other.d.foo == i + 2
        l-load aggregate%extract%2#0 1                                                            i#0,i#2,aggregate%extract%2#0
        extract 48 16                                                                             i#0,i#2,aggregate%extract%14#0
        l-load-copy aggregate%extract%14#0 0                                                      i#0,i#2,aggregate%extract%14#0,aggregate%extract%14#0 (copy)
        extract 0 8                                                                               i#0,i#2,aggregate%extract%14#0,aggregate%extract%16#0
        l-load i#0 3                                                                              i#2,aggregate%extract%14#0,aggregate%extract%16#0,i#0
        int 2                                                                                     i#2,aggregate%extract%14#0,aggregate%extract%16#0,i#0,2
        +                                                                                         i#2,aggregate%extract%14#0,aggregate%extract%16#0,tmp%17#0
        itob                                                                                      i#2,aggregate%extract%14#0,aggregate%extract%16#0,tmp%18#0
        l-load aggregate%extract%16#0 1                                                           i#2,aggregate%extract%14#0,tmp%18#0,aggregate%extract%16#0
        l-load tmp%18#0 1                                                                         i#2,aggregate%extract%14#0,aggregate%extract%16#0,tmp%18#0
        b==                                                                                       i#2,aggregate%extract%14#0,tmp%19#0
        assert                                                                                    i#2,aggregate%extract%14#0
        // array/static_size.py:52
        // assert path[i].other.d.bar == (i + 1) * (i + 1)
        l-load aggregate%extract%14#0 0                                                           i#2,aggregate%extract%14#0
        extract 8 8                                                                               i#2,aggregate%extract%25#0
        l-load-copy i#2 1                                                                         i#2,aggregate%extract%25#0,i#2 (copy)
        l-load-copy i#2 2                                                                         i#2,aggregate%extract%25#0,i#2 (copy),i#2 (copy)
        *                                                                                         i#2,aggregate%extract%25#0,tmp%22#0
        itob                                                                                      i#2,aggregate%extract%25#0,tmp%23#0
        l-load aggregate%extract%25#0 1                                                           i#2,tmp%23#0,aggregate%extract%25#0
        l-load tmp%23#0 1                                                                         i#2,aggregate%extract%25#0,tmp%23#0
        b==                                                                                       i#2,tmp%24#0
        assert                                                                                    i#2
        l-load i#2 0                                                                              i#2
        v-store i#0
        b test_array_for_header@2

    test_array_after_for@5:
        v-load slot%0                                                                             slot_contents%3#0
        // array/static_size.py:54
        // Box(ImmutableArray[Point], key="a").value = path.freeze()
        l-load-copy slot_contents%3#0 0                                                           slot_contents%3#0,slot_contents%3#0 (copy)
        len                                                                                       slot_contents%3#0,aggregate%bytes_len%0#0
        int 144                                                                                   slot_contents%3#0,aggregate%bytes_len%0#0,144
        /                                                                                         slot_contents%3#0,aggregate%array_len%0#0
        l-store-copy aggregate%array_len%0#0 0                                                    slot_contents%3#0,aggregate%array_len%0#0,aggregate%array_len%0#0 (copy)
        v-store aggregate%array_len%0#0                                                           slot_contents%3#0,aggregate%array_len%0#0
        l-load aggregate%array_len%0#0 0                                                          slot_contents%3#0,aggregate%array_len%0#0
        itob                                                                                      slot_contents%3#0,as_bytes%0#0
        extract 6 2                                                                               slot_contents%3#0,as_u16_bytes%0#0
        l-load-copy slot_contents%3#0 1                                                           slot_contents%3#0,as_u16_bytes%0#0,slot_contents%3#0 (copy)
        concat                                                                                    slot_contents%3#0,converted_array%0#0
        byte "a"                                                                                  slot_contents%3#0,converted_array%0#0,"a"
        box_del                                                                                   slot_contents%3#0,converted_array%0#0,{box_del}
        pop 1                                                                                     slot_contents%3#0,converted_array%0#0
        byte "a"                                                                                  slot_contents%3#0,converted_array%0#0,"a"
        l-load converted_array%0#0 1                                                              slot_contents%3#0,"a",converted_array%0#0
        box_put                                                                                   slot_contents%3#0
        // array/static_size.py:167
        // last_point = path[0]
        l-load slot_contents%3#0 0                                                                slot_contents%3#0
        extract 0 144 // on error: index access is out of bounds                                  aggregate%encoded_element%3#0
        l-store-copy aggregate%encoded_element%3#0 0                                              aggregate%encoded_element%3#0,aggregate%encoded_element%3#0 (copy)
        v-store aggregate%encoded_element%3#0                                                     aggregate%encoded_element%3#0
        l-load-copy aggregate%encoded_element%3#0 0                                               aggregate%encoded_element%3#0,aggregate%encoded_element%3#0 (copy)
        extract 0 8                                                                               aggregate%encoded_element%3#0,last_point.x#0
        v-store last_point.x#0                                                                    aggregate%encoded_element%3#0
        l-load aggregate%encoded_element%3#0 0                                                    aggregate%encoded_element%3#0
        int 8                                                                                     aggregate%encoded_element%3#0,8
        extract_uint64                                                                            last_point.y#0
        v-store last_point.y#0
        // array/static_size.py:168
        // length = UInt64()
        int 0                                                                                     0
        v-store length#0
        // array/static_size.py:169
        // for point_idx in urange(1, path.length):
        int 1                                                                                     1
        v-store point_idx#0
        b test_array_for_header@7

    test_array_for_header@7:
        // array/static_size.py:169
        // for point_idx in urange(1, path.length):
        v-load point_idx#0                                                                        point_idx#0
        v-load aggregate%array_len%0#0                                                            point_idx#0,aggregate%array_len%0#0
        <                                                                                         continue_looping%0#0
        bz test_array_after_for@15 ; b test_array_for_body@8

    test_array_for_body@8:
        v-load slot%0                                                                             slot_contents%1#1
        // array/static_size.py:170
        // point = path[point_idx]
        v-load point_idx#0                                                                        slot_contents%1#1,point_idx#0
        int 144                                                                                   slot_contents%1#1,point_idx#0,144
        *                                                                                         slot_contents%1#1,aggregate%bytes_offset%4#0
        l-load slot_contents%1#1 1                                                                aggregate%bytes_offset%4#0,slot_contents%1#1
        l-load aggregate%bytes_offset%4#0 1                                                       slot_contents%1#1,aggregate%bytes_offset%4#0
        int 144                                                                                   slot_contents%1#1,aggregate%bytes_offset%4#0,144
        extract3 // on error: index access is out of bounds                                       aggregate%encoded_element%4#0
        l-store-copy aggregate%encoded_element%4#0 0                                              aggregate%encoded_element%4#0,aggregate%encoded_element%4#0
        x-store aggregate%encoded_element%4#0                                                     (洧뎶) aggregate%encoded_element%4#0 | aggregate%encoded_element%4#0
        l-load-copy aggregate%encoded_element%4#0 0                                               (洧뎶) aggregate%encoded_element%4#0 | aggregate%encoded_element%4#0,aggregate%encoded_element%4#0 (copy)
        extract 0 8                                                                               (洧뎶) aggregate%encoded_element%4#0 | aggregate%encoded_element%4#0,point.x#0
        l-load aggregate%encoded_element%4#0 1                                                    (洧뎶) aggregate%encoded_element%4#0 | point.x#0,aggregate%encoded_element%4#0
        int 8                                                                                     (洧뎶) aggregate%encoded_element%4#0 | point.x#0,aggregate%encoded_element%4#0,8
        extract_uint64                                                                            (洧뎶) aggregate%encoded_element%4#0 | point.x#0,point.y#0
        v-store point.y#0                                                                         (洧뎶) aggregate%encoded_element%4#0 | point.x#0
        // array/static_size.py:171
        // if point.x < last_point.x:
        l-load point.x#0 0                                                                        (洧뎶) aggregate%encoded_element%4#0 | point.x#0
        v-load last_point.x#0                                                                     (洧뎶) aggregate%encoded_element%4#0 | point.x#0,last_point.x#0
        b<                                                                                        (洧뎶) aggregate%encoded_element%4#0 | tmp%1#2
        bz test_array_else_body@10 ; b test_array_if_body@9                                       (洧뎶) aggregate%encoded_element%4#0 |

    test_array_if_body@9:                                                                         (洧뎶) aggregate%encoded_element%4#0 |
        // array/static_size.py:172
        // dx = last_point.x.native - point.x.native
        v-load aggregate%encoded_element%3#0                                                      (洧뎶) aggregate%encoded_element%4#0 | aggregate%encoded_element%3#0
        // array/static_size.py:167
        // last_point = path[0]
        int 0                                                                                     (洧뎶) aggregate%encoded_element%4#0 | aggregate%encoded_element%3#0,0
        // array/static_size.py:172
        // dx = last_point.x.native - point.x.native
        extract_uint64                                                                            (洧뎶) aggregate%encoded_element%4#0 | tmp%2#2
        x-load aggregate%encoded_element%4#0                                                      tmp%2#2,aggregate%encoded_element%4#0
        // array/static_size.py:170
        // point = path[point_idx]
        int 0                                                                                     tmp%2#2,aggregate%encoded_element%4#0,0
        // array/static_size.py:172
        // dx = last_point.x.native - point.x.native
        extract_uint64                                                                            tmp%2#2,tmp%3#2
        l-load tmp%2#2 1                                                                          tmp%3#2,tmp%2#2
        l-load tmp%3#2 1                                                                          tmp%2#2,tmp%3#2
        -                                                                                         dx#0
        v-store dx#0
        b test_array_after_if_else@11

    test_array_else_body@10:                                                                      (洧뎶) aggregate%encoded_element%4#0 |
        // array/static_size.py:174
        // dx = point.x.native - last_point.x.native
        x-load aggregate%encoded_element%4#0                                                      aggregate%encoded_element%4#0
        // array/static_size.py:170
        // point = path[point_idx]
        int 0                                                                                     aggregate%encoded_element%4#0,0
        // array/static_size.py:174
        // dx = point.x.native - last_point.x.native
        extract_uint64                                                                            tmp%5#0
        v-load aggregate%encoded_element%3#0                                                      tmp%5#0,aggregate%encoded_element%3#0
        // array/static_size.py:167
        // last_point = path[0]
        int 0                                                                                     tmp%5#0,aggregate%encoded_element%3#0,0
        // array/static_size.py:174
        // dx = point.x.native - last_point.x.native
        extract_uint64                                                                            tmp%5#0,tmp%6#0
        l-load tmp%5#0 1                                                                          tmp%6#0,tmp%5#0
        l-load tmp%6#0 1                                                                          tmp%5#0,tmp%6#0
        -                                                                                         dx#0
        v-store dx#0
        b test_array_after_if_else@11

    test_array_after_if_else@11:
        // array/static_size.py:175
        // if point.y < last_point.y:
        v-load point.y#0                                                                          point.y#0
        v-load last_point.y#0                                                                     point.y#0,last_point.y#0
        <                                                                                         tmp%8#1
        bz test_array_else_body@13 ; b test_array_if_body@12

    test_array_if_body@12:
        // array/static_size.py:176
        // dy = last_point.y - point.y
        v-load last_point.y#0                                                                     last_point.y#0
        v-load point.y#0                                                                          last_point.y#0,point.y#0
        -                                                                                         dy#0
        x-store dy#0                                                                              (洧뎶) dy#0 |
        b test_array_after_if_else@14                                                             (洧뎶) dy#0 |

    test_array_else_body@13:
        // array/static_size.py:178
        // dy = point.y - last_point.y
        v-load point.y#0                                                                          point.y#0
        v-load last_point.y#0                                                                     point.y#0,last_point.y#0
        -                                                                                         dy#0
        x-store dy#0                                                                              (洧뎶) dy#0 |
        b test_array_after_if_else@14                                                             (洧뎶) dy#0 |

    test_array_after_if_else@14:                                                                  (洧뎶) dy#0 |
        // array/static_size.py:179
        // length += op.sqrt(dx * dx + dy * dy)
        v-load dx#0                                                                               (洧뎶) dy#0 | dx#0
        l-store-copy dx#0 0                                                                       (洧뎶) dy#0 | dx#0,dx#0 (copy)
        l-load dx#0 1                                                                             (洧뎶) dy#0 | dx#0 (copy),dx#0
        *                                                                                         (洧뎶) dy#0 | tmp%11#0
        x-load dy#0                                                                               tmp%11#0,dy#0
        l-store-copy dy#0 0                                                                       tmp%11#0,dy#0,dy#0 (copy)
        l-load dy#0 1                                                                             tmp%11#0,dy#0 (copy),dy#0
        *                                                                                         tmp%11#0,tmp%12#1
        l-load tmp%11#0 1                                                                         tmp%12#1,tmp%11#0
        l-load tmp%12#1 1                                                                         tmp%11#0,tmp%12#1
        +                                                                                         tmp%13#1
        sqrt                                                                                      tmp%14#1
        v-load length#0                                                                           tmp%14#1,length#0
        l-load tmp%14#1 1                                                                         length#0,tmp%14#1
        +                                                                                         length#0
        v-store length#0
        // array/static_size.py:169
        // for point_idx in urange(1, path.length):
        v-load point_idx#0                                                                        point_idx#0
        int 1                                                                                     point_idx#0,1
        +                                                                                         point_idx#0
        v-store point_idx#0
        b test_array_for_header@7

    test_array_after_for@15:
        // array/static_size.py:41
        // @arc4.abimethod()
        v-load length#0                                                                           length#0
        itob                                                                                      aggregate%val_as_bytes%9#0
        byte 0x151f7c75                                                                           aggregate%val_as_bytes%9#0,0x151f7c75
        l-load aggregate%val_as_bytes%9#0 1                                                       0x151f7c75,aggregate%val_as_bytes%9#0
        concat                                                                                    tmp%4#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple[routing]() -> void:
subroutine test_extend_from_tuple:
    test_extend_from_tuple_block@0:
        // array/static_size.py:57
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0
        l-load-copy reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0 0                    reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0,reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0 (copy)
        extract 0 16                                                                              reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0,some_more.0#0
        l-load reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0 1                         some_more.0#0,reinterpret_Encoded((uint64,uint64),(uint64,uint64))%0#0
        extract 16 16                                                                             some_more.0#0,some_more.1#0
        // array/static_size.py:60
        // arr.extend(some_more)
        l-load some_more.0#0 1                                                                    some_more.1#0,some_more.0#0
        l-load-copy some_more.1#0 1                                                               some_more.1#0,some_more.0#0,some_more.1#0 (copy)
        concat                                                                                    some_more.1#0,aggregate%head%1#0
        l-load-copy aggregate%head%1#0 0                                                          some_more.1#0,aggregate%head%1#0,aggregate%head%1#0 (copy)
        pop 1                                                                                     some_more.1#0,aggregate%head%1#0
        // array/static_size.py:61
        // last = arr[-1]
        l-load-copy aggregate%head%1#0 0                                                          some_more.1#0,aggregate%head%1#0,aggregate%head%1#0 (copy)
        len                                                                                       some_more.1#0,aggregate%head%1#0,aggregate%bytes_len%0#0
        int 16                                                                                    some_more.1#0,aggregate%head%1#0,aggregate%bytes_len%0#0,16
        /                                                                                         some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0
        l-load-copy aggregate%array_len%0#0 0                                                     some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%array_len%0#0 (copy)
        int 1                                                                                     some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%array_len%0#0 (copy),1
        -                                                                                         some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,tmp%2#1
        int 16                                                                                    some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,tmp%2#1,16
        *                                                                                         some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%bytes_offset%0#0
        l-load-copy aggregate%head%1#0 2                                                          some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%bytes_offset%0#0,aggregate%head%1#0 (copy)
        l-load aggregate%bytes_offset%0#0 1                                                       some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%head%1#0 (copy),aggregate%bytes_offset%0#0
        int 16                                                                                    some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,aggregate%head%1#0 (copy),aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                       some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,last#0
        // array/static_size.py:62
        // assert last == some_more[1]
        l-load-copy last#0 0                                                                      some_more.1#0,aggregate%head%1#0,aggregate%array_len%0#0,last#0,last#0 (copy)
        l-load some_more.1#0 4                                                                    aggregate%head%1#0,aggregate%array_len%0#0,last#0,last#0 (copy),some_more.1#0
        ==                                                                                        aggregate%head%1#0,aggregate%array_len%0#0,last#0,tmp%3#1
        assert                                                                                    aggregate%head%1#0,aggregate%array_len%0#0,last#0
        // array/static_size.py:63
        // result = arr.freeze()
        l-load aggregate%array_len%0#0 1                                                          aggregate%head%1#0,last#0,aggregate%array_len%0#0
        itob                                                                                      aggregate%head%1#0,last#0,as_bytes%0#0
        extract 6 2                                                                               aggregate%head%1#0,last#0,as_u16_bytes%0#0
        l-load aggregate%head%1#0 2                                                               last#0,as_u16_bytes%0#0,aggregate%head%1#0
        concat                                                                                    last#0,result#0
        // array/static_size.py:64
        // assert result[-1] == last
        l-load-copy result#0 0                                                                    last#0,result#0,result#0 (copy)
        int 0                                                                                     last#0,result#0,result#0 (copy),0
        extract_uint16                                                                            last#0,result#0,aggregate%array_length%0#0
        int 1                                                                                     last#0,result#0,aggregate%array_length%0#0,1
        -                                                                                         last#0,result#0,tmp%6#0
        l-load-copy result#0 1                                                                    last#0,result#0,tmp%6#0,result#0 (copy)
        extract 2 0                                                                               last#0,result#0,tmp%6#0,aggregate%array_trimmed%0#0
        l-load tmp%6#0 1                                                                          last#0,result#0,aggregate%array_trimmed%0#0,tmp%6#0
        int 16                                                                                    last#0,result#0,aggregate%array_trimmed%0#0,tmp%6#0,16
        *                                                                                         last#0,result#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0
        l-load aggregate%array_trimmed%0#0 1                                                      last#0,result#0,aggregate%bytes_offset%1#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%1#0 1                                                       last#0,result#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0
        int 16                                                                                    last#0,result#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0,16
        extract3 // on error: index access is out of bounds                                       last#0,result#0,aggregate%encoded_element%1#0
        l-load last#0 2                                                                           result#0,aggregate%encoded_element%1#0,last#0
        ==                                                                                        result#0,tmp%7#0
        assert                                                                                    result#0
        // array/static_size.py:57
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           result#0,0x151f7c75
        l-load result#0 1                                                                         0x151f7c75,result#0
        concat                                                                                    tmp%3#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple[routing]() -> void:
subroutine test_extend_from_arc4_tuple:
    test_extend_from_arc4_tuple_block@0:
        // array/static_size.py:67
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    some_more#0
        // array/static_size.py:72
        // arr.extend(some_more)
        l-load-copy some_more#0 0                                                                 some_more#0,some_more#0 (copy)
        pop 1                                                                                     some_more#0
        // array/static_size.py:73
        // return arr.freeze()
        l-load-copy some_more#0 0                                                                 some_more#0,some_more#0 (copy)
        len                                                                                       some_more#0,aggregate%bytes_len%0#0
        int 16                                                                                    some_more#0,aggregate%bytes_len%0#0,16
        /                                                                                         some_more#0,aggregate%array_len%0#0
        itob                                                                                      some_more#0,as_bytes%0#0
        extract 6 2                                                                               some_more#0,as_u16_bytes%0#0
        l-load some_more#0 1                                                                      as_u16_bytes%0#0,some_more#0
        concat                                                                                    converted_array%0#0
        // array/static_size.py:67
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           converted_array%0#0,0x151f7c75
        l-load converted_array%0#0 1                                                              0x151f7c75,converted_array%0#0
        concat                                                                                    tmp%1#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.test_bool_array[routing]() -> void:
subroutine test_bool_array:
    test_bool_array_block@0:
        // array/static_size.py:75
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%0#0
        btoi                                                                                      length#0
        l-store-copy length#0 0                                                                   length#0,length#0 (copy)
        v-store length#0                                                                          length#0
        // array/static_size.py:77
        // arr = ReferenceArray[bool]()
        byte 0x                                                                                   length#0,0x
        v-store slot%0                                                                            length#0
        // array/static_size.py:80
        // for i in urange(1, length + 1):
        l-load length#0 0                                                                         length#0
        int 1                                                                                     length#0,1
        +                                                                                         tmp%2#1
        v-store tmp%2#1
        int 1                                                                                     1
        v-store i#0
        b test_bool_array_for_header@2

    test_bool_array_for_header@2:
        // array/static_size.py:80
        // for i in urange(1, length + 1):
        v-load i#0                                                                                i#0
        v-load tmp%2#1                                                                            i#0,tmp%2#1
        <                                                                                         continue_looping%0#0
        bz test_bool_array_after_for@5 ; b test_bool_array_for_body@3

    test_bool_array_for_body@3:
        // array/static_size.py:81
        // arr.append(i % 2 == 0)
        v-load i#0                                                                                i#0
        l-store-copy i#0 0                                                                        i#0,i#0 (copy)
        int 2                                                                                     i#0,i#0 (copy),2
        %                                                                                         i#0,tmp%3#1
        !                                                                                         i#0,tmp%4#0
        v-load slot%0                                                                             i#0,tmp%4#0,slot_contents%0#0
        l-store slot_contents%0#0 1                                                               i#0,slot_contents%0#0,tmp%4#0
        byte 0x00                                                                                 i#0,slot_contents%0#0,tmp%4#0,0x00
        int 0                                                                                     i#0,slot_contents%0#0,tmp%4#0,0x00,0
        l-load tmp%4#0 2                                                                          i#0,slot_contents%0#0,0x00,0,tmp%4#0
        setbit                                                                                    i#0,slot_contents%0#0,aggregate%encoded_bool%0#0
        l-load slot_contents%0#0 1                                                                i#0,aggregate%encoded_bool%0#0,slot_contents%0#0
        l-load aggregate%encoded_bool%0#0 1                                                       i#0,slot_contents%0#0,aggregate%encoded_bool%0#0
        concat // on error: max array length exceeded                                             i#0,concat%0#0
        v-store slot%0                                                                            i#0
        // array/static_size.py:80
        // for i in urange(1, length + 1):
        l-load i#0 0                                                                              i#0
        int 1                                                                                     i#0,1
        +                                                                                         i#0
        v-store i#0
        b test_bool_array_for_header@2

    test_bool_array_after_for@5:
        v-load slot%0                                                                             slot%0
        l-store-copy slot%0 0                                                                     slot%0,aggregate%slot_contents%1#0
        // array/static_size.py:82
        // assert arr.length == length, "expected correct length"
        l-load-copy aggregate%slot_contents%1#0 0                                                 slot%0,aggregate%slot_contents%1#0,aggregate%slot_contents%1#0 (copy)
        len                                                                                       slot%0,aggregate%slot_contents%1#0,aggregate%bytes_len%1#0
        v-load length#0                                                                           slot%0,aggregate%slot_contents%1#0,aggregate%bytes_len%1#0,length#0
        l-store-copy length#0 3                                                                   length#0,slot%0,aggregate%slot_contents%1#0,aggregate%bytes_len%1#0,length#0 (copy)
        ==                                                                                        length#0,slot%0,aggregate%slot_contents%1#0,tmp%7#0
        assert // expected correct length                                                         length#0,slot%0,aggregate%slot_contents%1#0
        // array/static_size.py:84
        // arr2 = arr.copy()
        l-load-copy aggregate%slot_contents%1#0 0                                                 length#0,slot%0,aggregate%slot_contents%1#0,aggregate%slot_contents%1#0 (copy)
        pop 1                                                                                     length#0,slot%0,aggregate%slot_contents%1#0
        l-load-copy slot%0 1                                                                      length#0,slot%0,aggregate%slot_contents%1#0,slot_contents%2#0
        // array/static_size.py:85
        // arr2.extend(arr)
        l-load aggregate%slot_contents%1#0 1                                                      length#0,slot%0,slot_contents%2#0,aggregate%slot_contents%1#0
        l-load slot_contents%2#0 1                                                                length#0,slot%0,aggregate%slot_contents%1#0,slot_contents%2#0
        concat // on error: max array length exceeded                                             length#0,slot%0,concat%1#0
        l-load-copy concat%1#0 0                                                                  length#0,slot%0,concat%1#0,concat%1#0 (copy)
        pop 1                                                                                     length#0,slot%0,concat%1#0
        // array/static_size.py:86
        // assert arr2.length == length * 2, "expected correct length"
        l-load concat%1#0 0                                                                       length#0,slot%0,concat%1#0
        len                                                                                       length#0,slot%0,aggregate%bytes_len%2#0
        l-load length#0 2                                                                         slot%0,aggregate%bytes_len%2#0,length#0
        int 2                                                                                     slot%0,aggregate%bytes_len%2#0,length#0,2
        *                                                                                         slot%0,aggregate%bytes_len%2#0,tmp%9#0
        l-load aggregate%bytes_len%2#0 1                                                          slot%0,tmp%9#0,aggregate%bytes_len%2#0
        l-load tmp%9#0 1                                                                          slot%0,aggregate%bytes_len%2#0,tmp%9#0
        ==                                                                                        slot%0,tmp%10#0
        assert // expected correct length                                                         slot%0
        // array/static_size.py:88
        // count = UInt64(0)
        int 0                                                                                     slot%0,0
        v-store count#0                                                                           slot%0
        l-load slot%0 0                                                                           aggregate%slot_contents%3#0
        // array/static_size.py:89
        // for val in arr:
        len                                                                                       aggregate%bytes_len%3#0
        v-store aggregate%bytes_len%3#0
        int 0                                                                                     0
        v-store item_index_internal%0#0
        b test_bool_array_for_header@6

    test_bool_array_for_header@6:
        // array/static_size.py:89
        // for val in arr:
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        v-load aggregate%bytes_len%3#0                                                            item_index_internal%0#0,aggregate%bytes_len%3#0
        <                                                                                         continue_looping%1#0
        bz test_bool_array_after_for@11 ; b test_bool_array_for_body@7

    test_bool_array_for_body@7:
        v-load slot%0                                                                             slot_contents%4#0
        // array/static_size.py:89
        // for val in arr:
        v-load item_index_internal%0#0                                                            slot_contents%4#0,item_index_internal%0#0
        int 1                                                                                     slot_contents%4#0,item_index_internal%0#0,1
        extract3 // on error: index access is out of bounds                                       aggregate%encoded_element%0#0
        int 0                                                                                     aggregate%encoded_element%0#0,0
        getbit                                                                                    val#0
        v-load count#0                                                                            val#0,count#0
        v-store count#9                                                                           val#0
        // array/static_size.py:90
        // if val:
        l-load val#0 0                                                                            val#0
        bz test_bool_array_after_if_else@9 ; b test_bool_array_if_body@8

    test_bool_array_if_body@8:
        // array/static_size.py:91
        // count += 1
        v-load count#0                                                                            count#0
        int 1                                                                                     count#0,1
        +                                                                                         count#0
        v-store count#9
        b test_bool_array_after_if_else@9

    test_bool_array_after_if_else@9:
        v-load count#9                                                                            count#9
        v-store count#0
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        int 1                                                                                     item_index_internal%0#0,1
        +                                                                                         item_index_internal%0#0
        v-store item_index_internal%0#0
        b test_bool_array_for_header@6

    test_bool_array_after_for@11:
        // array/static_size.py:75
        // @arc4.abimethod()
        v-load count#0                                                                            count#0
        itob                                                                                      aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                           aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                                       0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                                    tmp%3#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.test_arc4_conversion[routing]() -> void:
subroutine test_arc4_conversion:
    test_arc4_conversion_block@0:
        // array/static_size.py:94
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint64)%0#0
        btoi                                                                                      length#0
        l-store-copy length#0 0                                                                   length#0,length#0 (copy)
        v-store length#0                                                                          length#0
        // array/static_size.py:96
        // arr = ReferenceArray[arc4.UInt64]()
        byte 0x                                                                                   length#0,0x
        v-store slot%0                                                                            length#0
        // array/static_size.py:99
        // for i in urange(1, length + 1):
        l-load length#0 0                                                                         length#0
        int 1                                                                                     length#0,1
        +                                                                                         tmp%2#1
        v-store tmp%2#1
        int 1                                                                                     1
        v-store i#0
        b test_arc4_conversion_for_header@2

    test_arc4_conversion_for_header@2:
        // array/static_size.py:99
        // for i in urange(1, length + 1):
        v-load i#0                                                                                i#0
        v-load tmp%2#1                                                                            i#0,tmp%2#1
        <                                                                                         continue_looping%0#0
        bz test_arc4_conversion_after_for@5 ; b test_arc4_conversion_for_body@3

    test_arc4_conversion_for_body@3:
        // array/static_size.py:100
        // arr.append(arc4.UInt64(i))
        v-load i#0                                                                                i#0
        l-store-copy i#0 0                                                                        i#0,i#0 (copy)
        itob                                                                                      i#0,aggregate%val_as_bytes%0#0
        v-load slot%0                                                                             i#0,aggregate%val_as_bytes%0#0,slot_contents%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                       i#0,slot_contents%0#0,aggregate%val_as_bytes%0#0
        concat // on error: max array length exceeded                                             i#0,concat%0#0
        v-store slot%0                                                                            i#0
        // array/static_size.py:99
        // for i in urange(1, length + 1):
        l-load i#0 0                                                                              i#0
        int 1                                                                                     i#0,1
        +                                                                                         i#0
        v-store i#0
        b test_arc4_conversion_for_header@2

    test_arc4_conversion_after_for@5:
        v-load slot%0                                                                             aggregate%slot_contents%1#0
        // array/static_size.py:101
        // assert arr.length == length, "expected correct length"
        len                                                                                       aggregate%bytes_len%1#0
        int 8                                                                                     aggregate%bytes_len%1#0,8
        /                                                                                         aggregate%array_len%1#0
        l-store-copy aggregate%array_len%1#0 0                                                    aggregate%array_len%1#0,aggregate%array_len%1#0 (copy)
        v-store aggregate%array_len%1#0                                                           aggregate%array_len%1#0
        l-load aggregate%array_len%1#0 0                                                          aggregate%array_len%1#0
        v-load length#0                                                                           aggregate%array_len%1#0,length#0
        ==                                                                                        tmp%6#0
        assert // expected correct length
        // array/static_size.py:102
        // count = UInt64(0)
        int 0                                                                                     0
        v-store count#0
        int 0                                                                                     0
        v-store item_index_internal%0#0
        b test_arc4_conversion_for_header@6

    test_arc4_conversion_for_header@6:
        // array/static_size.py:103
        // for val in arr:
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        v-load aggregate%array_len%1#0                                                            item_index_internal%0#0,aggregate%array_len%1#0
        <                                                                                         continue_looping%1#0
        bz test_arc4_conversion_after_for@11 ; b test_arc4_conversion_for_body@7

    test_arc4_conversion_for_body@7:
        v-load slot%0                                                                             slot_contents%1#0
        // array/static_size.py:103
        // for val in arr:
        v-load item_index_internal%0#0                                                            slot_contents%1#0,item_index_internal%0#0
        int 8                                                                                     slot_contents%1#0,item_index_internal%0#0,8
        *                                                                                         slot_contents%1#0,aggregate%bytes_offset%0#0
        l-load slot_contents%1#0 1                                                                aggregate%bytes_offset%0#0,slot_contents%1#0
        l-load aggregate%bytes_offset%0#0 1                                                       slot_contents%1#0,aggregate%bytes_offset%0#0
        int 8                                                                                     slot_contents%1#0,aggregate%bytes_offset%0#0,8
        extract3 // on error: index access is out of bounds                                       val#0
        // array/static_size.py:104
        // if val:
        byte 0x                                                                                   val#0,0x
        b!=                                                                                       tmp%7#0
        v-load count#0                                                                            tmp%7#0,count#0
        v-store count#9                                                                           tmp%7#0
        l-load tmp%7#0 0                                                                          tmp%7#0
        bz test_arc4_conversion_after_if_else@9 ; b test_arc4_conversion_if_body@8

    test_arc4_conversion_if_body@8:
        // array/static_size.py:105
        // count += 1
        v-load count#0                                                                            count#0
        int 1                                                                                     count#0,1
        +                                                                                         count#0
        v-store count#9
        b test_arc4_conversion_after_if_else@9

    test_arc4_conversion_after_if_else@9:
        v-load count#9                                                                            count#9
        v-store count#0
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        int 1                                                                                     item_index_internal%0#0,1
        +                                                                                         item_index_internal%0#0
        v-store item_index_internal%0#0
        b test_arc4_conversion_for_header@6

    test_arc4_conversion_after_for@11:
        v-load slot%0                                                                             slot_contents%2#0
        // array/static_size.py:107
        // arc4_arr = arc4.DynamicArray[arc4.UInt64]()
        byte 0x0000                                                                               slot_contents%2#0,0x0000
        // array/static_size.py:108
        // arc4_arr.extend(arr)
        l-load slot_contents%2#0 1                                                                0x0000,slot_contents%2#0
        concat // on error: max array length exceeded                                             concat%1#0
        l-load-copy concat%1#0 0                                                                  concat%1#0,concat%1#0 (copy)
        extract 2 0                                                                               concat%1#0,extract_to_end%0#0
        len                                                                                       concat%1#0,len%0#0
        int 8                                                                                     concat%1#0,len%0#0,8
        /                                                                                         concat%1#0,div_floor%0#0
        itob                                                                                      concat%1#0,as_bytes%0#0
        extract 6 2                                                                               concat%1#0,as_u16_bytes%0#0
        l-load concat%1#0 1                                                                       as_u16_bytes%0#0,concat%1#0
        l-load as_u16_bytes%0#0 1                                                                 concat%1#0,as_u16_bytes%0#0
        replace2 0                                                                                arc4_arr#1
        // array/static_size.py:94
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           arc4_arr#1,0x151f7c75
        l-load arc4_arr#1 1                                                                       0x151f7c75,arc4_arr#1
        concat                                                                                    tmp%2#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.sum_array[routing]() -> void:
subroutine sum_array:
    sum_array_block@0:
        // array/static_size.py:112
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                                    arc4_arr#0
        // array/static_size.py:115
        // arr.extend(arc4_arr)
        extract 2 0                                                                               extract_to_end%0#0
        l-load-copy extract_to_end%0#0 0                                                          extract_to_end%0#0,extract_to_end%0#0 (copy)
        v-store slot%0                                                                            extract_to_end%0#0
        // array/static_size.py:117
        // total = UInt64(0)
        int 0                                                                                     extract_to_end%0#0,0
        v-store total#0                                                                           extract_to_end%0#0
        // array/static_size.py:118
        // for item in arr:
        l-load extract_to_end%0#0 0                                                               extract_to_end%0#0
        len                                                                                       aggregate%bytes_len%0#0
        int 8                                                                                     aggregate%bytes_len%0#0,8
        /                                                                                         aggregate%array_len%0#0
        v-store aggregate%array_len%0#0
        int 0                                                                                     0
        v-store item_index_internal%0#0
        b sum_array_for_header@2

    sum_array_for_header@2:
        // array/static_size.py:118
        // for item in arr:
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        v-load aggregate%array_len%0#0                                                            item_index_internal%0#0,aggregate%array_len%0#0
        <                                                                                         continue_looping%0#0
        bz sum_array_after_for@5 ; b sum_array_for_body@3

    sum_array_for_body@3:
        v-load slot%0                                                                             slot_contents%1#0
        // array/static_size.py:118
        // for item in arr:
        v-load item_index_internal%0#0                                                            slot_contents%1#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                                    item_index_internal%0#0,slot_contents%1#0,item_index_internal%0#0 (copy)
        int 8                                                                                     item_index_internal%0#0,slot_contents%1#0,item_index_internal%0#0 (copy),8
        *                                                                                         item_index_internal%0#0,slot_contents%1#0,aggregate%bytes_offset%0#0
        // array/static_size.py:119
        // total += item.native
        l-load slot_contents%1#0 1                                                                item_index_internal%0#0,aggregate%bytes_offset%0#0,slot_contents%1#0
        l-load aggregate%bytes_offset%0#0 1                                                       item_index_internal%0#0,slot_contents%1#0,aggregate%bytes_offset%0#0
        extract_uint64                                                                            item_index_internal%0#0,tmp%0#1
        v-load total#0                                                                            item_index_internal%0#0,tmp%0#1,total#0
        l-load tmp%0#1 1                                                                          item_index_internal%0#0,total#0,tmp%0#1
        +                                                                                         item_index_internal%0#0,total#0
        v-store total#0                                                                           item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                          item_index_internal%0#0
        int 1                                                                                     item_index_internal%0#0,1
        +                                                                                         item_index_internal%0#0
        v-store item_index_internal%0#0
        b sum_array_for_header@2

    sum_array_after_for@5:
        // array/static_size.py:112
        // @arc4.abimethod()
        v-load total#0                                                                            total#0
        itob                                                                                      aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                           aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                                       0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                                    tmp%2#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.test_arc4_bool[routing]() -> void:
subroutine test_arc4_bool:
    test_arc4_bool_block@0:
        // array/static_size.py:141
        // arr.append(arc4.Bool(Txn.sender == Txn.receiver))
        txn Sender                                                                                tmp%0#1
        txn Receiver                                                                              tmp%0#1,tmp%1#1
        l-load tmp%0#1 1                                                                          tmp%1#1,tmp%0#1
        l-load tmp%1#1 1                                                                          tmp%0#1,tmp%1#1
        ==                                                                                        tmp%2#0
        byte 0x00                                                                                 tmp%2#0,0x00
        int 0                                                                                     tmp%2#0,0x00,0
        l-load tmp%2#0 2                                                                          0x00,0,tmp%2#0
        setbit                                                                                    aggregate%encoded_bool%0#0
        // array/static_size.py:142
        // arr.append(arc4.Bool(Txn.sender != Txn.receiver))
        txn Sender                                                                                aggregate%encoded_bool%0#0,tmp%5#0
        txn Receiver                                                                              aggregate%encoded_bool%0#0,tmp%5#0,tmp%6#0
        l-load tmp%5#0 1                                                                          aggregate%encoded_bool%0#0,tmp%6#0,tmp%5#0
        l-load tmp%6#0 1                                                                          aggregate%encoded_bool%0#0,tmp%5#0,tmp%6#0
        !=                                                                                        aggregate%encoded_bool%0#0,tmp%7#0
        byte 0x00                                                                                 aggregate%encoded_bool%0#0,tmp%7#0,0x00
        int 0                                                                                     aggregate%encoded_bool%0#0,tmp%7#0,0x00,0
        l-load tmp%7#0 2                                                                          aggregate%encoded_bool%0#0,0x00,0,tmp%7#0
        setbit                                                                                    aggregate%encoded_bool%0#0,aggregate%encoded_bool%1#0
        l-load aggregate%encoded_bool%0#0 1                                                       aggregate%encoded_bool%1#0,aggregate%encoded_bool%0#0
        l-load aggregate%encoded_bool%1#0 1                                                       aggregate%encoded_bool%0#0,aggregate%encoded_bool%1#0
        concat // on error: max array length exceeded                                             concat%1#0
        l-load-copy concat%1#0 0                                                                  concat%1#0,slot%0
        l-store-copy slot%0 1                                                                     slot%0,concat%1#0,slot%0 (copy)
        v-store slot%0                                                                            slot%0,concat%1#0
        // array/static_size.py:145
        // dyn_arr.extend(arr)
        l-load-copy concat%1#0 0                                                                  slot%0,concat%1#0,concat%1#0 (copy)
        len                                                                                       slot%0,concat%1#0,aggregate%bytes_len%0#0
        // array/static_size.py:144
        // dyn_arr = arc4.DynamicArray[arc4.Bool]()
        byte 0x0000                                                                               slot%0,concat%1#0,aggregate%bytes_len%0#0,0x0000
        // array/static_size.py:145
        // dyn_arr.extend(arr)
        l-load concat%1#0 2                                                                       slot%0,aggregate%bytes_len%0#0,0x0000,concat%1#0
        l-load aggregate%bytes_len%0#0 2                                                          slot%0,0x0000,concat%1#0,aggregate%bytes_len%0#0
        int 8                                                                                     slot%0,0x0000,concat%1#0,aggregate%bytes_len%0#0,8
        callsub dynamic_array_concat_bits                                                         slot%0,dyn_arr#1
        l-store-copy dyn_arr#1 0                                                                  slot%0,dyn_arr#1,dyn_arr#1 (copy)
        v-store dyn_arr#1                                                                         slot%0,dyn_arr#1
        // array/static_size.py:146
        // assert dyn_arr.length == 2, "expected correct length"
        l-load-copy dyn_arr#1 0                                                                   slot%0,dyn_arr#1,dyn_arr#1 (copy)
        int 0                                                                                     slot%0,dyn_arr#1,dyn_arr#1 (copy),0
        extract_uint16                                                                            slot%0,dyn_arr#1,aggregate%array_length%0#0
        l-store-copy aggregate%array_length%0#0 0                                                 slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy)
        v-store aggregate%array_length%0#0                                                        slot%0,dyn_arr#1,aggregate%array_length%0#0
        l-load-copy aggregate%array_length%0#0 0                                                  slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy)
        int 2                                                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy),2
        ==                                                                                        slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%12#0
        assert // expected correct length                                                         slot%0,dyn_arr#1,aggregate%array_length%0#0
        // array/static_size.py:147
        // assert dyn_arr.bytes.length == 3, "expected 3 bytes"
        l-load-copy dyn_arr#1 1                                                                   slot%0,dyn_arr#1,aggregate%array_length%0#0,dyn_arr#1 (copy)
        len                                                                                       slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%13#0
        int 3                                                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%13#0,3
        ==                                                                                        slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%14#0
        assert // expected 3 bytes                                                                slot%0,dyn_arr#1,aggregate%array_length%0#0
        // array/static_size.py:148
        // assert dyn_arr[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
        l-load-copy aggregate%array_length%0#0 0                                                  slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy)
        assert // index access is out of bounds                                                   slot%0,dyn_arr#1,aggregate%array_length%0#0
        l-load-copy dyn_arr#1 1                                                                   slot%0,dyn_arr#1,aggregate%array_length%0#0,dyn_arr#1 (copy)
        int 16                                                                                    slot%0,dyn_arr#1,aggregate%array_length%0#0,dyn_arr#1 (copy),16
        getbit                                                                                    slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%0#0
        byte 0x00                                                                                 slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%0#0,0x00
        int 0                                                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%0#0,0x00,0
        l-load aggregate%get_bit%0#0 2                                                            slot%0,dyn_arr#1,aggregate%array_length%0#0,0x00,0,aggregate%get_bit%0#0
        setbit                                                                                    slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%encoded_bool%2#0
        int 0                                                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%encoded_bool%2#0,0
        getbit                                                                                    slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0
        txn Sender                                                                                slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%16#0
        txn Receiver                                                                              slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%16#0,tmp%17#0
        l-load tmp%16#0 1                                                                         slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%17#0,tmp%16#0
        l-load tmp%17#0 1                                                                         slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%16#0,tmp%17#0
        ==                                                                                        slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%18#0
        l-load aggregate%get_bit%1#0 1                                                            slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%18#0,aggregate%get_bit%1#0
        l-load tmp%18#0 1                                                                         slot%0,dyn_arr#1,aggregate%array_length%0#0,aggregate%get_bit%1#0,tmp%18#0
        ==                                                                                        slot%0,dyn_arr#1,aggregate%array_length%0#0,tmp%19#0
        assert // expected correct value at 0                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0
        // array/static_size.py:149
        // assert dyn_arr[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
        int 1                                                                                     slot%0,dyn_arr#1,aggregate%array_length%0#0,1
        l-load aggregate%array_length%0#0 1                                                       slot%0,dyn_arr#1,1,aggregate%array_length%0#0
        <                                                                                         slot%0,dyn_arr#1,aggregate%lt%1#0
        assert // index access is out of bounds                                                   slot%0,dyn_arr#1
        l-load dyn_arr#1 0                                                                        slot%0,dyn_arr#1
        int 17                                                                                    slot%0,dyn_arr#1,17
        getbit                                                                                    slot%0,aggregate%get_bit%2#0
        byte 0x00                                                                                 slot%0,aggregate%get_bit%2#0,0x00
        int 0                                                                                     slot%0,aggregate%get_bit%2#0,0x00,0
        l-load aggregate%get_bit%2#0 2                                                            slot%0,0x00,0,aggregate%get_bit%2#0
        setbit                                                                                    slot%0,aggregate%encoded_bool%3#0
        int 0                                                                                     slot%0,aggregate%encoded_bool%3#0,0
        getbit                                                                                    slot%0,aggregate%get_bit%3#0
        txn Sender                                                                                slot%0,aggregate%get_bit%3#0,tmp%21#0
        txn Receiver                                                                              slot%0,aggregate%get_bit%3#0,tmp%21#0,tmp%22#0
        l-load tmp%21#0 1                                                                         slot%0,aggregate%get_bit%3#0,tmp%22#0,tmp%21#0
        l-load tmp%22#0 1                                                                         slot%0,aggregate%get_bit%3#0,tmp%21#0,tmp%22#0
        !=                                                                                        slot%0,aggregate%get_bit%3#0,tmp%23#0
        l-load aggregate%get_bit%3#0 1                                                            slot%0,tmp%23#0,aggregate%get_bit%3#0
        l-load tmp%23#0 1                                                                         slot%0,aggregate%get_bit%3#0,tmp%23#0
        ==                                                                                        slot%0,tmp%24#0
        assert // expected correct value at 1                                                     slot%0
        l-load slot%0 0                                                                           slot_contents%3#0
        v-store slot%1
        int 0                                                                                     0
        v-store item_index_internal%0#0
        b test_arc4_bool_for_header@2

    test_arc4_bool_for_header@2:
        // array/static_size.py:154
        // for b in dyn_arr:
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        v-load aggregate%array_length%0#0                                                         item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                                         continue_looping%0#0
        bz test_arc4_bool_after_for@5 ; b test_arc4_bool_for_body@3

    test_arc4_bool_for_body@3:
        // array/static_size.py:154
        // for b in dyn_arr:
        v-load item_index_internal%0#0                                                            item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                                    item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                                    item_index_internal%0#0,item_index_internal%0#0 (copy),16
        +                                                                                         item_index_internal%0#0,aggregate%add%2#0
        v-load dyn_arr#1                                                                          item_index_internal%0#0,aggregate%add%2#0,dyn_arr#1
        l-load aggregate%add%2#0 1                                                                item_index_internal%0#0,dyn_arr#1,aggregate%add%2#0
        getbit                                                                                    item_index_internal%0#0,aggregate%get_bit%4#0
        byte 0x00                                                                                 item_index_internal%0#0,aggregate%get_bit%4#0,0x00
        int 0                                                                                     item_index_internal%0#0,aggregate%get_bit%4#0,0x00,0
        l-load aggregate%get_bit%4#0 2                                                            item_index_internal%0#0,0x00,0,aggregate%get_bit%4#0
        setbit                                                                                    item_index_internal%0#0,b#0
        v-load slot%1                                                                             item_index_internal%0#0,b#0,slot_contents%4#0
        // array/static_size.py:155
        // arr2.append(b)
        l-load b#0 1                                                                              item_index_internal%0#0,slot_contents%4#0,b#0
        concat // on error: max array length exceeded                                             item_index_internal%0#0,concat%2#0
        v-store slot%1                                                                            item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                          item_index_internal%0#0
        int 1                                                                                     item_index_internal%0#0,1
        +                                                                                         item_index_internal%0#0
        v-store item_index_internal%0#0
        b test_arc4_bool_for_header@2

    test_arc4_bool_after_for@5:
        v-load slot%1                                                                             aggregate%slot_contents%0#0
        // array/static_size.py:156
        // assert arr2.length == 4, "expected correct length"
        l-load-copy aggregate%slot_contents%0#0 0                                                 aggregate%slot_contents%0#0,aggregate%slot_contents%0#0 (copy)
        len                                                                                       aggregate%slot_contents%0#0,aggregate%bytes_len%1#0
        int 4                                                                                     aggregate%slot_contents%0#0,aggregate%bytes_len%1#0,4
        ==                                                                                        aggregate%slot_contents%0#0,tmp%27#0
        assert // expected correct length                                                         aggregate%slot_contents%0#0
        // array/static_size.py:157
        // assert arr2[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
        l-load-copy aggregate%slot_contents%0#0 0                                                 aggregate%slot_contents%0#0,aggregate%slot_contents%0#0 (copy)
        extract 0 1 // on error: index access is out of bounds                                    aggregate%slot_contents%0#0,aggregate%encoded_element%0#0
        int 0                                                                                     aggregate%slot_contents%0#0,aggregate%encoded_element%0#0,0
        getbit                                                                                    aggregate%slot_contents%0#0,aggregate%get_bit%5#0
        txn Sender                                                                                aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%29#0
        txn Receiver                                                                              aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%29#0,tmp%30#0
        l-load tmp%29#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%30#0,tmp%29#0
        l-load tmp%30#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%29#0,tmp%30#0
        ==                                                                                        aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%31#0
        l-load aggregate%get_bit%5#0 1                                                            aggregate%slot_contents%0#0,tmp%31#0,aggregate%get_bit%5#0
        l-load tmp%31#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%5#0,tmp%31#0
        ==                                                                                        aggregate%slot_contents%0#0,tmp%32#0
        assert // expected correct value at 0                                                     aggregate%slot_contents%0#0
        // array/static_size.py:158
        // assert arr2[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
        l-load-copy aggregate%slot_contents%0#0 0                                                 aggregate%slot_contents%0#0,aggregate%slot_contents%0#0 (copy)
        extract 1 1 // on error: index access is out of bounds                                    aggregate%slot_contents%0#0,aggregate%encoded_element%1#0
        int 0                                                                                     aggregate%slot_contents%0#0,aggregate%encoded_element%1#0,0
        getbit                                                                                    aggregate%slot_contents%0#0,aggregate%get_bit%6#0
        txn Sender                                                                                aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%34#0
        txn Receiver                                                                              aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%34#0,tmp%35#0
        l-load tmp%34#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%35#0,tmp%34#0
        l-load tmp%35#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%34#0,tmp%35#0
        !=                                                                                        aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%36#0
        l-load aggregate%get_bit%6#0 1                                                            aggregate%slot_contents%0#0,tmp%36#0,aggregate%get_bit%6#0
        l-load tmp%36#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%6#0,tmp%36#0
        ==                                                                                        aggregate%slot_contents%0#0,tmp%37#0
        assert // expected correct value at 1                                                     aggregate%slot_contents%0#0
        // array/static_size.py:159
        // assert arr2[2] == (Txn.sender == Txn.receiver), "expected correct value at 2"
        l-load-copy aggregate%slot_contents%0#0 0                                                 aggregate%slot_contents%0#0,aggregate%slot_contents%0#0 (copy)
        extract 2 1 // on error: index access is out of bounds                                    aggregate%slot_contents%0#0,aggregate%encoded_element%2#0
        int 0                                                                                     aggregate%slot_contents%0#0,aggregate%encoded_element%2#0,0
        getbit                                                                                    aggregate%slot_contents%0#0,aggregate%get_bit%7#0
        txn Sender                                                                                aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%39#0
        txn Receiver                                                                              aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%39#0,tmp%40#0
        l-load tmp%39#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%40#0,tmp%39#0
        l-load tmp%40#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%39#0,tmp%40#0
        ==                                                                                        aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%41#0
        l-load aggregate%get_bit%7#0 1                                                            aggregate%slot_contents%0#0,tmp%41#0,aggregate%get_bit%7#0
        l-load tmp%41#0 1                                                                         aggregate%slot_contents%0#0,aggregate%get_bit%7#0,tmp%41#0
        ==                                                                                        aggregate%slot_contents%0#0,tmp%42#0
        assert // expected correct value at 2                                                     aggregate%slot_contents%0#0
        // array/static_size.py:160
        // assert arr2[3] == (Txn.sender != Txn.receiver), "expected correct value at 3"
        l-load aggregate%slot_contents%0#0 0                                                      aggregate%slot_contents%0#0
        extract 3 1 // on error: index access is out of bounds                                    aggregate%encoded_element%3#0
        int 0                                                                                     aggregate%encoded_element%3#0,0
        getbit                                                                                    aggregate%get_bit%8#0
        txn Sender                                                                                aggregate%get_bit%8#0,tmp%44#0
        txn Receiver                                                                              aggregate%get_bit%8#0,tmp%44#0,tmp%45#0
        l-load tmp%44#0 1                                                                         aggregate%get_bit%8#0,tmp%45#0,tmp%44#0
        l-load tmp%45#0 1                                                                         aggregate%get_bit%8#0,tmp%44#0,tmp%45#0
        !=                                                                                        aggregate%get_bit%8#0,tmp%46#0
        l-load aggregate%get_bit%8#0 1                                                            tmp%46#0,aggregate%get_bit%8#0
        l-load tmp%46#0 1                                                                         aggregate%get_bit%8#0,tmp%46#0
        ==                                                                                        tmp%47#0
        assert // expected correct value at 3
        v-load slot%0                                                                             slot_contents%9#0
        // array/static_size.py:162
        // return arr.freeze()
        l-load-copy slot_contents%9#0 0                                                           slot_contents%9#0,slot_contents%9#0 (copy)
        len                                                                                       slot_contents%9#0,aggregate%bytes_len%2#0
        byte 0x0000                                                                               slot_contents%9#0,aggregate%bytes_len%2#0,0x0000
        l-load slot_contents%9#0 2                                                                aggregate%bytes_len%2#0,0x0000,slot_contents%9#0
        l-load aggregate%bytes_len%2#0 2                                                          0x0000,slot_contents%9#0,aggregate%bytes_len%2#0
        int 8                                                                                     0x0000,slot_contents%9#0,aggregate%bytes_len%2#0,8
        callsub dynamic_array_concat_bits                                                         bit_packed_source%0#0
        // array/static_size.py:138
        // @arc4.abimethod()
        byte 0x151f7c75                                                                           bit_packed_source%0#0,0x151f7c75
        l-load bit_packed_source%0#0 1                                                            0x151f7c75,bit_packed_source%0#0
        concat                                                                                    tmp%1#0
        log
        int 1                                                                                     1
        return


// test_cases.array.static_size.StaticSizeContract.xtra() -> uint64, uint64, bytes, bytes, bytes:
subroutine xtra:
    xtra_block@0:
        // array/static_size.py:125
        // self.count += 1
        int 0                                                                                     0
        byte "count"                                                                              0,"count"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        assert // check self.count exists                                                         maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  maybe_value%0#0
        int 1                                                                                     maybe_value%0#0,1
        +                                                                                         tmp%0#0
        byte "count"                                                                              tmp%0#0,"count"
        l-load-copy tmp%0#0 1                                                                     tmp%0#0,"count",tmp%0#0 (copy)
        app_global_put                                                                            tmp%0#0
        // array/static_size.py:127
        // a=Txn.num_app_args,
        txn NumAppArgs                                                                            tmp%0#0,tmp%1#0
        // array/static_size.py:129
        // c=Txn.sender,
        txn Sender                                                                                tmp%0#0,tmp%1#0,tmp%2#0
        // array/static_size.py:130
        // d=self.more(),
        callsub more                                                                              tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0
        // array/static_size.py:131
        // e=BigUInt(self.count),
        int 0                                                                                     tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,0
        byte "count"                                                                              tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,0,"count"
        app_global_get_ex                                                                         tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.count exists                                                         tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,maybe_value%2#0
        l-load maybe_value%2#0 0                                                                  tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,maybe_value%2#0
        itob                                                                                      tmp%0#0,tmp%1#0,tmp%2#0,tmp%3#0,tmp%4#0
        // array/static_size.py:126-132
        // return Xtra(
        //     a=Txn.num_app_args,
        //     b=self.count,
        //     c=Txn.sender,
        //     d=self.more(),
        //     e=BigUInt(self.count),
        // )
        l-load tmp%1#0 3                                                                          tmp%0#0,tmp%2#0,tmp%3#0,tmp%4#0,tmp%1#0
        l-load tmp%0#0 4                                                                          tmp%2#0,tmp%3#0,tmp%4#0,tmp%1#0,tmp%0#0
        l-load tmp%2#0 4                                                                          tmp%3#0,tmp%4#0,tmp%1#0,tmp%0#0,tmp%2#0
        l-load tmp%3#0 4                                                                          tmp%4#0,tmp%1#0,tmp%0#0,tmp%2#0,tmp%3#0
        l-load tmp%4#0 4                                                                          tmp%1#0,tmp%0#0,tmp%2#0,tmp%3#0,tmp%4#0
        retsub                                                                                    tmp%1#0,tmp%0#0,tmp%2#0,tmp%3#0,tmp%4#0


// test_cases.array.static_size.StaticSizeContract.more() -> bytes:
subroutine more:
    more_block@0:
        // array/static_size.py:136
        // return More(foo=arc4.UInt64(self.count + 1), bar=arc4.UInt64(self.count * self.count))
        int 0                                                                                     0
        byte "count"                                                                              0,"count"
        app_global_get_ex                                                                         maybe_value%0#0,maybe_exists%0#0
        assert // check self.count exists                                                         maybe_value%0#0
        l-load-copy maybe_value%0#0 0                                                             maybe_value%0#0,maybe_value%0#0 (copy)
        int 1                                                                                     maybe_value%0#0,maybe_value%0#0 (copy),1
        +                                                                                         maybe_value%0#0,tmp%0#0
        itob                                                                                      maybe_value%0#0,aggregate%val_as_bytes%0#0
        l-load-copy maybe_value%0#0 1                                                             maybe_value%0#0,aggregate%val_as_bytes%0#0,maybe_value%0#0 (copy)
        l-load maybe_value%0#0 2                                                                  aggregate%val_as_bytes%0#0,maybe_value%0#0 (copy),maybe_value%0#0
        *                                                                                         aggregate%val_as_bytes%0#0,tmp%2#0
        itob                                                                                      aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                       aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                       aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                                    aggregate%head%1#0
        retsub                                                                                    aggregate%head%1#0


