main test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@12
    block@4: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@5, method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@6, method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]" => block@7, method "test_bool_array(uint64)uint64" => block@8, method "test_arc4_conversion(uint64)uint64[]" => block@9, method "sum_array(uint64[])uint64" => block@10, method "test_arc4_bool()bool[]" => block@11, * => block@14}
    block@5: // test_array_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%9#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_array(reinterpret_Encoded(uint64)%0#0, tmp%7#0, reinterpret_Encoded(uint64)%2#0, tmp%8#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%9#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@15
    block@6: // test_extend_from_tuple_route_L57
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0: Encoded(((uint64,uint64),(uint64,uint64))) = (txna ApplicationArgs 1)
        let item0%0#0: bytes = ((extract 0 16) reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0) // on error: Index access is out of bounds
        let item1%0#0: bytes = ((extract 16 16) reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%0#0) // on error: Index access is out of bounds
        let tmp%15#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(item0%0#0, item1%0#0)
        let tmp%16#0: bytes = (concat 0x151f7c75 tmp%15#0)
        (log tmp%16#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@15
    block@7: // test_extend_from_arc4_tuple_route_L67
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%1#0: Encoded(((uint64,uint64),(uint64,uint64))) = (txna ApplicationArgs 1)
        let tmp%21#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(reinterpret_Encoded(((uint64,uint64),(uint64,uint64)))%1#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@15
    block@8: // test_bool_array_route_L75
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%27#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%28#0: uint64 = test_cases.array.static_size.StaticSizeContract.test_bool_array(tmp%27#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%28#0)
        let tmp%29#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%29#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@15
    block@9: // test_arc4_conversion_route_L89
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        (assert tmp%32#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%34#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%35#0: Encoded(len+uint64[]) = test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(tmp%34#0)
        let tmp%36#0: bytes = (concat 0x151f7c75 tmp%35#0)
        (log tmp%36#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@15
    block@10: // sum_array_route_L107
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let tmp%41#0: uint64 = test_cases.array.static_size.StaticSizeContract.sum_array(reinterpret_Encoded(len+uint64[])%0#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%41#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%42#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@15
    block@11: // test_arc4_bool_route_L133
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        let tmp%47#0: Encoded(len+bool1[]) = test_cases.array.static_size.StaticSizeContract.test_arc4_bool()
        let tmp%48#0: bytes = (concat 0x151f7c75 tmp%47#0)
        (log tmp%48#0)
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@15
    block@12: // bare_routing_L37
        let tmp%49#0: uint64 = (txn OnCompletion)
        goto tmp%49#0 ? block@14 : block@13
    block@13: // __algopy_default_create_L1
        let tmp%50#0: uint64 = (txn ApplicationID)
        let tmp%51#0: bool = (! tmp%50#0)
        (assert tmp%51#0) // can only call when creating
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@15
    block@14: // after_if_else_L37
        let test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#8: bool = 0u
        goto block@15
    block@15: // after_inlined_test_cases.array.static_size.StaticSizeContract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#0 <- block@5, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#1 <- block@6, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#2 <- block@7, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#3 <- block@8, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#4 <- block@9, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#5 <- block@10, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#6 <- block@11, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#7 <- block@13, test_cases.array.static_size.StaticSizeContract.__puya_arc4_router__%0#8 <- block@14)
        return tmp%0#1

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine test_cases.array.static_size.StaticSizeContract.test_array(x1: Encoded(uint64), y1: uint64, x2: Encoded(uint64), y2: uint64) -> uint64:
    block@0: // L41
        (app_global_put "count" 0u)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: bytes[32], tmp%3#0: Encoded((uint64,uint64)), tmp%4#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%5#0: uint64, tmp%6#0: uint64, tmp%7#0: bytes[32], tmp%8#0: Encoded((uint64,uint64)), tmp%9#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let (tmp%10#0: uint64, tmp%11#0: uint64, tmp%12#0: bytes[32], tmp%13#0: Encoded((uint64,uint64)), tmp%14#0: biguint) = test_cases.array.static_size.StaticSizeContract.xtra()
        let val_as_bytes%1#0: bytes[8] = (itob tmp%0#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        let encoded%3#0: Encoded((uint64,uint64)) = (concat val_as_bytes%1#0 val_as_bytes%2#0)
        let length%0#0: uint64 = (len tmp%2#0)
        let lengths_equal%0#0: bool = (== length%0#0 32u)
        (assert lengths_equal%0#0) // invalid size
        let encoded%4#0: Encoded((uint64,uint64,uint8[32])) = (concat encoded%3#0 tmp%2#0)
        let encoded%5#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%4#0 tmp%3#0)
        let value_len%0#0: uint64 = (len tmp%4#0)
        let len_ok%0#0: bool = (<= value_len%0#0 64u)
        (assert len_ok%0#0) // overflow
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| tmp%4#0 bzero%0#0)
        let encoded%6#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%5#0 arc4_encoded%0#0)
        let encoded%8#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat 0x00000000000000000000000000000000 encoded%6#0)
        let val_as_bytes%3#0: bytes[8] = (itob y1#0)
        let encoded%12#0: Encoded((uint64,uint64)) = (concat x1#0 val_as_bytes%3#0)
        let val_as_bytes%4#0: bytes[8] = (itob tmp%5#0)
        let val_as_bytes%5#0: bytes[8] = (itob tmp%6#0)
        let encoded%14#0: Encoded((uint64,uint64)) = (concat val_as_bytes%4#0 val_as_bytes%5#0)
        let length%1#0: uint64 = (len tmp%7#0)
        let lengths_equal%1#0: bool = (== length%1#0 32u)
        (assert lengths_equal%1#0) // invalid size
        let encoded%15#0: Encoded((uint64,uint64,uint8[32])) = (concat encoded%14#0 tmp%7#0)
        let encoded%16#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%15#0 tmp%8#0)
        let value_len%1#0: uint64 = (len tmp%9#0)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let arc4_encoded%1#0: bytes[64] = (b| tmp%9#0 bzero%0#0)
        let encoded%17#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%16#0 arc4_encoded%1#0)
        let encoded%19#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat encoded%12#0 encoded%17#0)
        let encoded%21#0: Encoded(((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)))) = (concat encoded%8#0 encoded%19#0)
        let val_as_bytes%6#0: bytes[8] = (itob y2#0)
        let encoded%23#0: Encoded((uint64,uint64)) = (concat x2#0 val_as_bytes%6#0)
        let val_as_bytes%7#0: bytes[8] = (itob tmp%10#0)
        let val_as_bytes%8#0: bytes[8] = (itob tmp%11#0)
        let encoded%25#0: Encoded((uint64,uint64)) = (concat val_as_bytes%7#0 val_as_bytes%8#0)
        let length%2#0: uint64 = (len tmp%12#0)
        let lengths_equal%2#0: bool = (== length%2#0 32u)
        (assert lengths_equal%2#0) // invalid size
        let encoded%26#0: Encoded((uint64,uint64,uint8[32])) = (concat encoded%25#0 tmp%12#0)
        let encoded%27#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64))) = (concat encoded%26#0 tmp%13#0)
        let value_len%2#0: uint64 = (len tmp%14#0)
        let len_ok%2#0: bool = (<= value_len%2#0 64u)
        (assert len_ok%2#0) // overflow
        let arc4_encoded%2#0: bytes[64] = (b| tmp%14#0 bzero%0#0)
        let encoded%28#0: Encoded((uint64,uint64,uint8[32],(uint64,uint64),uint512)) = (concat encoded%27#0 arc4_encoded%2#0)
        let encoded%30#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))) = (concat encoded%23#0 encoded%28#0)
        let encoded%32#0: Encoded(((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)),(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512)))) = (concat encoded%21#0 encoded%30#0)
        let path#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[])* = new()
        write(path#0, encoded%32#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L49
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L50
        let slot_contents%0#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = read(path#0)
        let bytes_offset%0#0: uint64 = (* i#1 144u)
        let encoded_element%0#0: bytes = (extract3 slot_contents%0#0 bytes_offset%0#0 144u) // on error: index access is out of bounds
        let (tmp%15#0: Encoded(uint64), tmp%16#0: uint64, tmp%17#0: uint64, tmp%18#0: uint64, tmp%19#0: bytes[32], tmp%20#0: Encoded((uint64,uint64)), tmp%21#0: biguint) = decode<(Encoded(uint64),uint64,(uint64,uint64,bytes[32],Encoded((uint64,uint64)),biguint,),)>(encoded_element%0#0)
        let i#2: uint64 = (+ i#1 1u)
        let tmp%23#0: bool = (== tmp%18#0 i#2)
        (assert tmp%23#0)
        let (tmp%24#0: Encoded(uint64), tmp%25#0: uint64, tmp%26#0: uint64, tmp%27#0: uint64, tmp%28#0: bytes[32], tmp%29#0: Encoded((uint64,uint64)), tmp%30#0: biguint) = decode<(Encoded(uint64),uint64,(uint64,uint64,bytes[32],Encoded((uint64,uint64)),biguint,),)>(encoded_element%0#0)
        let tmp%31#0: bytes = ((extract 0 8) tmp%29#0) // on error: Index access is out of bounds
        let tmp%32#0: uint64 = (+ i#1 2u)
        let tmp%33#0: biguint = (itob tmp%32#0)
        let tmp%34#0: bool = (b== tmp%31#0 tmp%33#0)
        (assert tmp%34#0)
        let (tmp%35#0: Encoded(uint64), tmp%36#0: uint64, tmp%37#0: uint64, tmp%38#0: uint64, tmp%39#0: bytes[32], tmp%40#0: Encoded((uint64,uint64)), tmp%41#0: biguint) = decode<(Encoded(uint64),uint64,(uint64,uint64,bytes[32],Encoded((uint64,uint64)),biguint,),)>(encoded_element%0#0)
        let tmp%42#0: bytes = ((extract 8 8) tmp%40#0) // on error: Index access is out of bounds
        let tmp%45#0: uint64 = (* i#2 i#2)
        let tmp%46#0: biguint = (itob tmp%45#0)
        let tmp%47#0: bool = (b== tmp%42#0 tmp%46#0)
        (assert tmp%47#0)
        goto block@1
    block@4: // after_for_L49
        let slot_contents%3#0: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = read(path#0)
        let concat%0#0: Encoded(len+(uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = (concat 0x0000 slot_contents%3#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 144u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%0#0: bytes = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        (box_del "a")
        (box_put "a" replace%0#0)
        let encoded_element%0#1: bytes = ((extract 0 144) slot_contents%3#0) // on error: index access is out of bounds
        let (last_point.x#0: Encoded(uint64), last_point.y#0: uint64, last_point.other.a#0: uint64, last_point.other.b#0: uint64, last_point.other.c#0: bytes[32], last_point.other.d#0: Encoded((uint64,uint64)), last_point.other.e#0: biguint) = decode<(Encoded(uint64),uint64,(uint64,uint64,bytes[32],Encoded((uint64,uint64)),biguint,),)>(encoded_element%0#1)
        let length#0: uint64 = 0u
        let length%0#1: uint64 = slot_contents%3#0.length
        let point_idx#0: uint64 = 1u
        goto block@6
    block@6: // for_header_L152
        let point_idx#1: uint64 = φ(point_idx#0 <- block@4, point_idx#2 <- block@13)
        let length#3: uint64 = φ(length#0 <- block@4, length#4 <- block@13)
        let continue_looping%0#1: bool = (< point_idx#1 length%0#1)
        goto continue_looping%0#1 ? block@7 : block@14
    block@7: // for_body_L153
        let slot_contents%2#1: Encoded((uint64,uint64,(uint64,uint64,uint8[32],(uint64,uint64),uint512))[]) = read(path#0)
        let bytes_offset%1#1: uint64 = (* point_idx#1 144u)
        let encoded_element%1#1: bytes = (extract3 slot_contents%2#1 bytes_offset%1#1 144u) // on error: index access is out of bounds
        let (point.x#0: Encoded(uint64), point.y#0: uint64, point.other.a#0: uint64, point.other.b#0: uint64, point.other.c#0: bytes[32], point.other.d#0: Encoded((uint64,uint64)), point.other.e#0: biguint) = decode<(Encoded(uint64),uint64,(uint64,uint64,bytes[32],Encoded((uint64,uint64)),biguint,),)>(encoded_element%1#1)
        let tmp%14#1: bool = (b< point.x#0 last_point.x#0)
        goto tmp%14#1 ? block@8 : block@9
    block@8: // if_body_L155
        let tmp%15#1: uint64 = (btoi last_point.x#0)
        let tmp%16#1: uint64 = (btoi point.x#0)
        let dx#0: uint64 = (- tmp%15#1 tmp%16#1)
        goto block@10
    block@9: // else_body_L157
        let tmp%18#1: uint64 = (btoi point.x#0)
        let tmp%19#1: uint64 = (btoi last_point.x#0)
        let dx#1: uint64 = (- tmp%18#1 tmp%19#1)
        goto block@10
    block@10: // after_if_else_L154
        let dx#3: uint64 = φ(dx#0 <- block@8, dx#1 <- block@9)
        let tmp%21#1: bool = (< point.y#0 last_point.y#0)
        goto tmp%21#1 ? block@11 : block@12
    block@11: // if_body_L159
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@13
    block@12: // else_body_L161
        let dy#1: uint64 = (- point.y#0 last_point.y#0)
        goto block@13
    block@13: // after_if_else_L158
        let dy#2: uint64 = φ(dy#0 <- block@11, dy#1 <- block@12)
        let tmp%24#1: uint64 = (* dx#3 dx#3)
        let tmp%25#1: uint64 = (* dy#2 dy#2)
        let tmp%26#1: uint64 = (+ tmp%24#1 tmp%25#1)
        let tmp%27#1: uint64 = (sqrt tmp%26#1)
        let length#4: uint64 = (+ length#3 tmp%27#1)
        let point_idx#2: uint64 = (+ point_idx#1 1u)
        goto block@6
    block@14: // after_for_L152
        return length#3

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(some_more.0: Encoded((uint64,uint64)), some_more.1: Encoded((uint64,uint64))) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L57
        let arr#0: Encoded((uint64,uint64)[])* = new()
        let encoded%2#0: Encoded(((uint64,uint64),(uint64,uint64))) = (concat some_more.0#0 some_more.1#0)
        write(arr#0, encoded%2#0)
        let length%0#0: uint64 = encoded%2#0.length
        let tmp%0#0: uint64 = (- length%0#0 1u)
        let bytes_offset%0#0: uint64 = (* tmp%0#0 16u)
        let last#0: Encoded((uint64,uint64)) = (extract3 encoded%2#0 bytes_offset%0#0 16u) // on error: index access is out of bounds
        let tmp%1#0: bool = (== last#0 some_more.1#0)
        (assert tmp%1#0)
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat 0x0000 encoded%2#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        let length%1#0: uint64 = result#0.length
        let tmp%2#0: uint64 = (- length%1#0 1u)
        let array_trimmed%0#0: bytes = ((extract 2 0) result#0)
        let bytes_offset%1#0: uint64 = (* tmp%2#0 16u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%3#0: bool = (== encoded_element%1#0 last#0)
        (assert tmp%3#0)
        return result#0

subroutine test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(some_more: Encoded(((uint64,uint64),(uint64,uint64)))) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L67
        let arr#0: Encoded((uint64,uint64)[])* = new()
        write(arr#0, some_more#0)
        let concat%1#0: Encoded(len+(uint64,uint64)[]) = (concat 0x0000 some_more#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%0#0: bytes = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        return replace%0#0

subroutine test_cases.array.static_size.StaticSizeContract.test_bool_array(length: uint64) -> uint64:
    block@0: // L75
        let arr#0: Encoded(bool8[])* = new()
        write(arr#0, 0x)
        let length%0#0: uint64 = 0x.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let tmp%1#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L80
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L81
        let tmp%2#0: uint64 = (% i#1 2u)
        let tmp%3#0: bool = (! tmp%2#0)
        let slot_contents%1#0: Encoded(bool8[]) = read(arr#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let concat%0#0: Encoded(bool8[]) = (concat slot_contents%1#0 encoded_bool%0#0) // on error: max array length exceeded
        write(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L80
        let slot_contents%2#0: Encoded(bool8[]) = read(arr#0)
        let length%1#0: uint64 = slot_contents%2#0.length
        let tmp%4#0: bool = (== length%1#0 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let length%2#0: uint64 = slot_contents%2#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L84
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 length%2#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L85
        let slot_contents%4#0: Encoded(bool8[]) = read(arr#0)
        let encoded_element%0#0: bytes = (extract3 slot_contents%4#0 item_index_internal%0#1 1u) // on error: index access is out of bounds
        let val#0: bool = decode<bool>(encoded_element%0#0)
        goto val#0 ? block@7 : block@8
    block@7: // if_body_L86
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L85
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L84
        return count#1

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(length: uint64) -> Encoded(len+uint64[]):
    block@0: // L89
        let arr#0: Encoded(uint64[])* = new()
        write(arr#0, 0x)
        let length%0#0: uint64 = 0x.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let tmp%1#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L94
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L95
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let slot_contents%1#0: Encoded(uint64[]) = read(arr#0)
        let concat%0#0: Encoded(uint64[]) = (concat slot_contents%1#0 val_as_bytes%0#0) // on error: max array length exceeded
        write(arr#0, concat%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L94
        let slot_contents%2#0: Encoded(uint64[]) = read(arr#0)
        let length%1#0: uint64 = slot_contents%2#0.length
        let tmp%2#0: bool = (== length%1#0 length#0)
        (assert tmp%2#0) // expected correct length
        let count#0: uint64 = 0u
        let length%2#0: uint64 = slot_contents%2#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L98
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 length%2#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L99
        let slot_contents%4#0: Encoded(uint64[]) = read(arr#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let val#0: Encoded(uint64) = (extract3 slot_contents%4#0 bytes_offset%0#0 8u) // on error: index access is out of bounds
        let tmp%3#0: bool = (b!= val#0 0b)
        goto tmp%3#0 ? block@7 : block@8
    block@7: // if_body_L100
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L99
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L98
        let slot_contents%5#0: Encoded(uint64[]) = read(arr#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat 0x0000 slot_contents%5#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%1#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arc4_arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%0#0)
        return arc4_arr#1

subroutine test_cases.array.static_size.StaticSizeContract.sum_array(arc4_arr: Encoded(len+uint64[])) -> uint64:
    block@0: // L107
        let arr#0: Encoded(uint64[])* = new()
        let extract_to_end%0#0: bytes = ((extract 2 0) arc4_arr#0)
        write(arr#0, extract_to_end%0#0)
        let total#0: uint64 = 0u
        let length%0#0: uint64 = extract_to_end%0#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L113
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L114
        let slot_contents%2#0: Encoded(uint64[]) = read(arr#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 slot_contents%2#0 bytes_offset%0#0)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L113
        return total#1

subroutine test_cases.array.static_size.StaticSizeContract.xtra() -> <uint64, uint64, bytes[32], Encoded((uint64,uint64)), biguint>:
    block@0: // L118
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: bytes[32] = (txn Sender)
        let tmp%3#0: Encoded((uint64,uint64)) = test_cases.array.static_size.StaticSizeContract.more()
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let tmp%4#0: biguint = (itob maybe_value%2#0)
        return tmp%1#0 tmp%0#0 tmp%2#0 tmp%3#0 tmp%4#0

subroutine test_cases.array.static_size.StaticSizeContract.more() -> Encoded((uint64,uint64)):
    block@0: // L129
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let tmp%0#0: uint64 = (+ maybe_value%0#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let tmp%1#0: uint64 = (* maybe_value%0#0 maybe_value%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%1#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        return encoded%1#0

subroutine test_cases.array.static_size.StaticSizeContract.test_arc4_bool() -> Encoded(len+bool1[]):
    block@0: // L133
        let arr#0: Encoded(bool8[])* = new()
        let tmp%0#0: bytes[32] = (txn Sender)
        let tmp%1#0: bytes[32] = (txn Receiver)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let tmp%3#0: bytes[32] = (txn Sender)
        let tmp%4#0: bytes[32] = (txn Receiver)
        let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%5#0)
        let concat%1#0: Encoded(bool8[]) = (concat encoded_bool%0#0 encoded_bool%1#0) // on error: max array length exceeded
        write(arr#0, concat%1#0)
        let tmp%6#0: uint64 = concat%1#0.length
        let dyn_arr#1: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, concat%1#0, tmp%6#0, 8u)
        let length%0#0: uint64 = dyn_arr#1.length
        let tmp%7#0: bool = (== length%0#0 2u)
        (assert tmp%7#0) // expected correct length
        let tmp%8#0: uint64 = (len dyn_arr#1)
        let tmp%9#0: bool = (== tmp%8#0 3u)
        (assert tmp%9#0) // expected 3 bytes
        let length%1#0: uint64 = dyn_arr#1.length
        (assert length%1#0) // index access is out of bounds
        let array_trimmed%0#0: bytes = ((extract 2 0) dyn_arr#1)
        let is_true%0#0: bool = (getbit array_trimmed%0#0 0u)
        let tmp%10#0: Encoded(bool8) = encode<bool8>(is_true%0#0)
        let tmp%11#0: bool = (getbit tmp%10#0 0u)
        let tmp%12#0: bytes[32] = (txn Sender)
        let tmp%13#0: bytes[32] = (txn Receiver)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        let tmp%15#0: bool = (== tmp%11#0 tmp%14#0)
        (assert tmp%15#0) // expected correct value at 0
        let length%2#0: uint64 = dyn_arr#1.length
        let lt%1#0: bool = (< 1u length%2#0)
        (assert lt%1#0) // index access is out of bounds
        let is_true%1#0: bool = (getbit array_trimmed%0#0 1u)
        let tmp%16#0: Encoded(bool8) = encode<bool8>(is_true%1#0)
        let tmp%17#0: bool = (getbit tmp%16#0 0u)
        let tmp%18#0: bytes[32] = (txn Sender)
        let tmp%19#0: bytes[32] = (txn Receiver)
        let tmp%20#0: bool = (!= tmp%18#0 tmp%19#0)
        let tmp%21#0: bool = (== tmp%17#0 tmp%20#0)
        (assert tmp%21#0) // expected correct value at 1
        let slot_contents%3#0: Encoded(bool8[]) = read(arr#0)
        let tmp%22#0: uint64 = slot_contents%3#0.length
        let as_Encoded(len+bool1[])%1#0: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, slot_contents%3#0, tmp%22#0, 8u)
        return as_Encoded(len+bool1[])%1#0