#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 16 144
    bytecblock 0x 0x151f7c75 "count" 0x00 0x0000
    txn ApplicationID
    bnz main_after_if_else@2
    // array/static_size.py:39
    // self.count = UInt64(0)
    bytec_2 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@16
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x28d7c1b8 0xfa9cb973 0x6039a240 0xf8fd68a7 0x1f028db1 0x096b3a59 0x8d6e3a25 // method "test_array(uint64,uint64,uint64,uint64)uint64", method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_bool_array(uint64)uint64", method "test_arc4_conversion(uint64)uint64[]", method "sum_array(uint64[])uint64", method "test_arc4_bool()bool[]"
    txna ApplicationArgs 0
    match test_array test_extend_from_tuple test_extend_from_arc4_tuple test_bool_array test_arc4_conversion sum_array test_arc4_bool
    err

main___algopy_default_create@16:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_0 // ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    cover 2
    swap
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    uncover 2
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    cover 2
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 4

dynamic_array_concat_bits_after_if_else@2:
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    intc_3 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.test_array[routing]() -> void:
test_array:
    intc_0 // 0
    dup
    bytec_0 // ""
    dupn 5
    // array/static_size.py:41
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    txna ApplicationArgs 3
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 4
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    // array/static_size.py:43
    // self.count = UInt64(0)
    bytec_2 // "count"
    intc_0 // 0
    app_global_put
    // array/static_size.py:46
    // Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    callsub xtra
    // array/static_size.py:47
    // Point(x=x1, y=y1, other=self.xtra()),
    callsub xtra
    // array/static_size.py:48
    // Point(x=x2, y=y2, other=self.xtra()),
    callsub xtra
    // array/static_size.py:44-50
    // path = ReferenceArray(
    //     (
    //         Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    //         Point(x=x1, y=y1, other=self.xtra()),
    //         Point(x=x2, y=y2, other=self.xtra()),
    //     )
    // )
    uncover 14
    itob
    uncover 14
    itob
    concat
    uncover 13
    concat
    uncover 12
    concat
    dig 11
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    uncover 12
    dig 1
    b|
    uncover 2
    swap
    concat
    pushbytes 0x00000000000000000000000000000000
    swap
    concat
    uncover 14
    itob
    uncover 15
    swap
    concat
    uncover 12
    itob
    uncover 12
    itob
    concat
    uncover 11
    concat
    uncover 10
    concat
    dig 9
    len
    pushint 64 // 64
    <=
    assert // overflow
    uncover 9
    dig 4
    b|
    concat
    concat
    concat
    uncover 7
    itob
    uncover 8
    swap
    concat
    uncover 7
    itob
    uncover 7
    itob
    concat
    uncover 6
    concat
    uncover 5
    concat
    dig 4
    len
    pushint 64 // 64
    <=
    assert // overflow
    uncover 4
    uncover 4
    b|
    concat
    concat
    concat
    // array/static_size.py:51
    // for i in urange(3):
    intc_0 // 0

test_array_for_header@2:
    // array/static_size.py:51
    // for i in urange(3):
    dup
    pushint 3 // 3
    <
    bz test_array_after_for@5
    // array/static_size.py:52
    // assert path[i].other.b == i + 1
    dup2
    dup
    cover 2
    intc 4 // 144
    *
    intc 4 // 144
    extract3 // on error: index access is out of bounds
    extract 16 128
    dup
    intc_2 // 8
    extract_uint64
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    ==
    assert
    // array/static_size.py:53
    // assert path[i].other.d.foo == i + 2
    swap
    extract 48 16
    dup
    extract 0 8
    uncover 3
    pushint 2 // 2
    +
    itob
    b==
    assert
    // array/static_size.py:54
    // assert path[i].other.d.bar == (i + 1) * (i + 1)
    extract 8 8
    dig 1
    dig 2
    *
    itob
    b==
    assert
    bury 1
    b test_array_for_header@2

test_array_after_for@5:
    dig 1
    // array/static_size.py:56
    // Box(ImmutableArray[Point], key="a").value = path.freeze()
    dup
    len
    intc 4 // 144
    /
    dup
    bury 10
    itob
    extract 6 2
    dig 1
    concat
    pushbytes "a"
    box_del
    pop
    pushbytes "a"
    swap
    box_put
    // array/static_size.py:169
    // last_point = path[0]
    extract 0 144 // on error: index access is out of bounds
    dup
    bury 11
    dup
    extract 0 8
    bury 10
    intc_2 // 8
    extract_uint64
    bury 6
    // array/static_size.py:170
    // length = UInt64()
    intc_0 // 0
    bury 5
    // array/static_size.py:171
    // for point_idx in urange(1, path.length):
    intc_1 // 1
    bury 3

test_array_for_header@7:
    // array/static_size.py:171
    // for point_idx in urange(1, path.length):
    dig 2
    dig 8
    <
    bz test_array_after_for@15
    dig 1
    // array/static_size.py:172
    // point = path[point_idx]
    dig 3
    intc 4 // 144
    *
    intc 4 // 144
    extract3 // on error: index access is out of bounds
    dupn 2
    extract 0 8
    swap
    intc_2 // 8
    extract_uint64
    bury 6
    // array/static_size.py:173
    // if point.x < last_point.x:
    dig 10
    b<
    bz test_array_else_body@10
    // array/static_size.py:174
    // dx = last_point.x.as_uint64() - point.x.as_uint64()
    dig 10
    // array/static_size.py:169
    // last_point = path[0]
    intc_0 // 0
    // array/static_size.py:174
    // dx = last_point.x.as_uint64() - point.x.as_uint64()
    extract_uint64
    swap
    // array/static_size.py:172
    // point = path[point_idx]
    intc_0 // 0
    // array/static_size.py:174
    // dx = last_point.x.as_uint64() - point.x.as_uint64()
    extract_uint64
    -
    bury 7

test_array_after_if_else@11:
    // array/static_size.py:177
    // if point.y < last_point.y:
    dig 3
    dig 6
    <
    bz test_array_else_body@13
    // array/static_size.py:178
    // dy = last_point.y - point.y
    dig 5
    dig 4
    -

test_array_after_if_else@14:
    // array/static_size.py:181
    // length += op.sqrt(dx * dx + dy * dy)
    dig 7
    dup
    *
    swap
    dup
    *
    +
    sqrt
    dig 5
    +
    bury 5
    // array/static_size.py:171
    // for point_idx in urange(1, path.length):
    dig 2
    intc_1 // 1
    +
    bury 3
    b test_array_for_header@7

test_array_else_body@13:
    // array/static_size.py:180
    // dy = point.y - last_point.y
    dig 3
    dig 6
    -
    b test_array_after_if_else@14

test_array_else_body@10:
    // array/static_size.py:172
    // point = path[point_idx]
    intc_0 // 0
    // array/static_size.py:176
    // dx = point.x.as_uint64() - last_point.x.as_uint64()
    extract_uint64
    dig 10
    // array/static_size.py:169
    // last_point = path[0]
    intc_0 // 0
    // array/static_size.py:176
    // dx = point.x.as_uint64() - last_point.x.as_uint64()
    extract_uint64
    -
    bury 7
    b test_array_after_if_else@11

test_array_after_for@15:
    // array/static_size.py:41
    // @arc4.abimethod()
    dig 4
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple[routing]() -> void:
test_extend_from_tuple:
    // array/static_size.py:59
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>
    dup
    extract 0 16
    swap
    extract 16 16
    // array/static_size.py:62
    // arr.extend(some_more)
    swap
    dig 1
    concat
    // array/static_size.py:63
    // last = arr[-1]
    dup
    len
    intc_3 // 16
    /
    dup
    intc_1 // 1
    -
    intc_3 // 16
    *
    dig 2
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // array/static_size.py:64
    // assert last == some_more[1]
    dup
    uncover 4
    ==
    assert
    // array/static_size.py:65
    // result = arr.freeze()
    swap
    itob
    extract 6 2
    uncover 2
    concat
    // array/static_size.py:66
    // assert result[-1] == last
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    uncover 2
    ==
    assert
    // array/static_size.py:59
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple[routing]() -> void:
test_extend_from_arc4_tuple:
    // array/static_size.py:69
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    dup
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.tuple<test_cases.array.static_size.More,test_cases.array.static_size.More>
    // array/static_size.py:74
    // arr.extend(some_more)
    dig 1
    pop
    // array/static_size.py:75
    // return arr.freeze()
    intc_3 // 16
    /
    itob
    extract 6 2
    swap
    concat
    // array/static_size.py:69
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.test_bool_array[routing]() -> void:
test_bool_array:
    bytec_0 // ""
    dupn 2
    // array/static_size.py:77
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    dup
    // array/static_size.py:79
    // arr = ReferenceArray[bool]()
    bytec_0 // 0x
    swap
    // array/static_size.py:82
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    intc_1 // 1

test_bool_array_for_header@2:
    // array/static_size.py:82
    // for i in urange(1, length + 1):
    dup
    dig 2
    <
    bz test_bool_array_after_for@5
    // array/static_size.py:83
    // arr.append(i % 2 == 0)
    dupn 2
    pushint 2 // 2
    %
    !
    dig 4
    swap
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    concat // on error: max array length exceeded
    bury 4
    // array/static_size.py:82
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    bury 1
    b test_bool_array_for_header@2

test_bool_array_after_for@5:
    dig 2
    dupn 2
    // array/static_size.py:84
    // assert arr.length == length, "expected correct length"
    len
    dig 6
    dup
    cover 4
    ==
    assert // expected correct length
    dig 1
    // array/static_size.py:87
    // arr2.extend(arr)
    concat // on error: max array length exceeded
    // array/static_size.py:88
    // assert arr2.length == length * 2, "expected correct length"
    len
    uncover 2
    pushint 2 // 2
    *
    ==
    assert // expected correct length
    // array/static_size.py:90
    // count = UInt64(0)
    intc_0 // 0
    bury 7
    // array/static_size.py:91
    // for val in arr:
    len
    bury 7
    intc_0 // 0
    bury 5

test_bool_array_for_header@6:
    // array/static_size.py:91
    // for val in arr:
    dig 4
    dig 7
    <
    bz test_bool_array_after_for@11
    dig 2
    dig 5
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    // array/static_size.py:92
    // if val:
    bz test_bool_array_after_if_else@9
    // array/static_size.py:93
    // count += 1
    dig 5
    intc_1 // 1
    +
    bury 6

test_bool_array_after_if_else@9:
    dig 4
    intc_1 // 1
    +
    bury 5
    b test_bool_array_for_header@6

test_bool_array_after_for@11:
    // array/static_size.py:77
    // @arc4.abimethod()
    dig 5
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.test_arc4_conversion[routing]() -> void:
test_arc4_conversion:
    bytec_0 // ""
    dupn 2
    // array/static_size.py:96
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    btoi
    dup
    // array/static_size.py:98
    // arr = ReferenceArray[arc4.UInt64]()
    bytec_0 // 0x
    swap
    // array/static_size.py:101
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    intc_1 // 1

test_arc4_conversion_for_header@2:
    // array/static_size.py:101
    // for i in urange(1, length + 1):
    dup
    dig 2
    <
    bz test_arc4_conversion_after_for@5
    // array/static_size.py:102
    // arr.append(arc4.UInt64(i))
    dupn 2
    itob
    dig 4
    swap
    concat // on error: max array length exceeded
    bury 4
    // array/static_size.py:101
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    bury 1
    b test_arc4_conversion_for_header@2

test_arc4_conversion_after_for@5:
    dig 2
    // array/static_size.py:103
    // assert arr.length == length, "expected correct length"
    len
    intc_2 // 8
    /
    dup
    bury 8
    dig 4
    ==
    assert // expected correct length
    // array/static_size.py:104
    // count = UInt64(0)
    intc_0 // 0
    bury 6
    intc_0 // 0
    bury 5

test_arc4_conversion_for_header@6:
    // array/static_size.py:105
    // for val in arr:
    dig 4
    dig 7
    <
    bz test_arc4_conversion_after_for@11
    dig 2
    dig 5
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    // array/static_size.py:106
    // if val:
    bytec_0 // 0x
    b!=
    bz test_arc4_conversion_after_if_else@9
    // array/static_size.py:107
    // count += 1
    dig 5
    intc_1 // 1
    +
    bury 6

test_arc4_conversion_after_if_else@9:
    dig 4
    intc_1 // 1
    +
    bury 5
    b test_arc4_conversion_for_header@6

test_arc4_conversion_after_for@11:
    // array/static_size.py:109
    // arc4_arr = arc4.DynamicArray[arc4.UInt64]()
    bytec 4 // 0x0000
    dig 3
    // array/static_size.py:110
    // arc4_arr.extend(arr)
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    replace2 0
    // array/static_size.py:96
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.sum_array[routing]() -> void:
sum_array:
    // array/static_size.py:114
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    intc_2 // 8
    *
    pushint 2 // 2
    +
    dig 1
    len
    ==
    assert // invalid number of bytes for arc4.dynamic_array<arc4.uint64>
    // array/static_size.py:117
    // arr.extend(arc4_arr)
    extract 2 0
    dup
    // array/static_size.py:119
    // total = UInt64(0)
    intc_0 // 0
    swap
    // array/static_size.py:120
    // for item in arr:
    len
    intc_2 // 8
    /
    intc_0 // 0

sum_array_for_header@2:
    // array/static_size.py:120
    // for item in arr:
    dup
    dig 2
    <
    bz sum_array_after_for@5
    dig 3
    dig 1
    dup
    cover 2
    intc_2 // 8
    *
    // array/static_size.py:121
    // total += item.as_uint64()
    extract_uint64
    dig 4
    +
    bury 4
    intc_1 // 1
    +
    bury 1
    b sum_array_for_header@2

sum_array_after_for@5:
    // array/static_size.py:114
    // @arc4.abimethod()
    dig 2
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.test_arc4_bool[routing]() -> void:
test_arc4_bool:
    // array/static_size.py:143
    // arr.append(arc4.Bool(Txn.sender == Txn.receiver))
    txn Sender
    txn Receiver
    ==
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // array/static_size.py:144
    // arr.append(arc4.Bool(Txn.sender != Txn.receiver))
    txn Sender
    txn Receiver
    !=
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    concat // on error: max array length exceeded
    dupn 2
    // array/static_size.py:147
    // dyn_arr.extend(arr)
    len
    // array/static_size.py:146
    // dyn_arr = arc4.DynamicArray[arc4.Bool]()
    bytec 4 // 0x0000
    // array/static_size.py:147
    // dyn_arr.extend(arr)
    dig 2
    uncover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    dup
    cover 2
    // array/static_size.py:148
    // assert dyn_arr.length == 2, "expected correct length"
    dup
    intc_0 // 0
    extract_uint16 // on error: invalid array length header
    dup
    cover 3
    dup
    pushint 2 // 2
    ==
    assert // expected correct length
    // array/static_size.py:149
    // assert dyn_arr.bytes.length == 3, "expected 3 bytes"
    dig 1
    len
    pushint 3 // 3
    ==
    assert // expected 3 bytes
    // array/static_size.py:150
    // assert dyn_arr[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
    dup
    assert // index access is out of bounds
    dig 1
    intc_3 // 16
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 0
    // array/static_size.py:151
    // assert dyn_arr[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
    intc_1 // 1
    >
    assert // index access is out of bounds
    pushint 17 // 17
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 1
    intc_0 // 0

test_arc4_bool_for_header@2:
    // array/static_size.py:154-156
    // # note: not supported currently
    // # arr2.extend(dyn_array)
    // for b in dyn_arr:
    dup
    dig 3
    <
    bz test_arc4_bool_after_for@5
    dupn 2
    intc_3 // 16
    +
    dig 5
    swap
    getbit
    bytec_3 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    dig 3
    // array/static_size.py:157
    // arr2.append(b)
    swap
    concat // on error: max array length exceeded
    bury 3
    intc_1 // 1
    +
    bury 1
    b test_arc4_bool_for_header@2

test_arc4_bool_after_for@5:
    dig 1
    // array/static_size.py:158
    // assert arr2.length == 4, "expected correct length"
    dup
    len
    pushint 4 // 4
    ==
    assert // expected correct length
    // array/static_size.py:159
    // assert arr2[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
    dup
    extract 0 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 0
    // array/static_size.py:160
    // assert arr2[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
    dup
    extract 1 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 1
    // array/static_size.py:161
    // assert arr2[2] == (Txn.sender == Txn.receiver), "expected correct value at 2"
    dup
    extract 2 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 2
    // array/static_size.py:162
    // assert arr2[3] == (Txn.sender != Txn.receiver), "expected correct value at 3"
    extract 3 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 3
    dig 4
    // array/static_size.py:164
    // return arr.freeze()
    dup
    len
    bytec 4 // 0x0000
    cover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    // array/static_size.py:140
    // @arc4.abimethod()
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// test_cases.array.static_size.StaticSizeContract.xtra() -> uint64, uint64, bytes, bytes, bytes:
xtra:
    // array/static_size.py:127
    // self.count += 1
    intc_0 // 0
    bytec_2 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_2 // "count"
    dig 1
    app_global_put
    // array/static_size.py:129
    // a=Txn.num_app_args,
    txn NumAppArgs
    // array/static_size.py:131
    // c=Txn.sender,
    txn Sender
    // array/static_size.py:132
    // d=self.more(),
    callsub more
    // array/static_size.py:133
    // e=BigUInt(self.count),
    intc_0 // 0
    bytec_2 // "count"
    app_global_get_ex
    assert // check self.count exists
    itob
    // array/static_size.py:128-134
    // return Xtra(
    //     a=Txn.num_app_args,
    //     b=self.count,
    //     c=Txn.sender,
    //     d=self.more(),
    //     e=BigUInt(self.count),
    // )
    uncover 3
    cover 4
    retsub


// test_cases.array.static_size.StaticSizeContract.more() -> bytes:
more:
    // array/static_size.py:138
    // return More(foo=arc4.UInt64(self.count + 1), bar=arc4.UInt64(self.count * self.count))
    intc_0 // 0
    bytec_2 // "count"
    app_global_get_ex
    assert // check self.count exists
    dup
    intc_1 // 1
    +
    itob
    dig 1
    uncover 2
    *
    itob
    concat
    retsub
