#pragma version 10
#pragma typetrack false

// test_cases.array.static_size.StaticSizeContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 8 16 144
    bytecblock 0x151f7c75 "count" 0x00 0x 0x0000
    txn ApplicationID
    bnz main_after_if_else@2
    // array/static_size.py:39
    // self.count = UInt64(0)
    bytec_1 // "count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    pushbytess 0x28d7c1b8 0xfa9cb973 0x6039a240 0xf8fd68a7 0x1f028db1 0x096b3a59 0x8d6e3a25 // method "test_array(uint64,uint64,uint64,uint64)uint64", method "test_extend_from_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_extend_from_arc4_tuple(((uint64,uint64),(uint64,uint64)))(uint64,uint64)[]", method "test_bool_array(uint64)uint64", method "test_arc4_conversion(uint64)uint64[]", method "sum_array(uint64[])uint64", method "test_arc4_bool()bool[]"
    txna ApplicationArgs 0
    match main_test_array_route@5 main_test_extend_from_tuple_route@6 main_test_extend_from_arc4_tuple_route@7 main_test_bool_array_route@8 main_test_arc4_conversion_route@9 main_sum_array_route@10 main_test_arc4_bool_route@11

main_after_if_else@14:
    err

main_test_arc4_bool_route@11:
    // array/static_size.py:138
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_arc4_bool
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_sum_array_route@10:
    // array/static_size.py:112
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/static_size.py:112
    // @arc4.abimethod()
    callsub sum_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_arc4_conversion_route@9:
    // array/static_size.py:94
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/static_size.py:94
    // @arc4.abimethod()
    callsub test_arc4_conversion
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_bool_array_route@8:
    // array/static_size.py:75
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // array/static_size.py:75
    // @arc4.abimethod()
    callsub test_bool_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_extend_from_arc4_tuple_route@7:
    // array/static_size.py:67
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // array/static_size.py:67
    // @arc4.abimethod()
    callsub test_extend_from_arc4_tuple
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_extend_from_tuple_route@6:
    // array/static_size.py:57
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    extract 0 16
    swap
    extract 16 16
    // array/static_size.py:57
    // @arc4.abimethod()
    callsub test_extend_from_tuple
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_test_array_route@5:
    // array/static_size.py:41
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    // array/static_size.py:41
    // @arc4.abimethod()
    callsub test_array
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@12:
    // array/static_size.py:37
    // class StaticSizeContract(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:
    proto 4 1
    bytec_3 // ""
    dupn 2
    frame_dig -4
    intc_0 // 0
    extract_uint16
    dupn 2
    frame_dig -2
    +
    dup
    itob
    extract 6 0
    frame_dig -4
    swap
    replace2 0
    dup
    uncover 2
    uncover 3
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    cover 3
    swap
    pushint 7 // 7
    +
    intc_2 // 8
    /
    dup
    cover 3
    <
    bz dynamic_array_concat_bits_after_if_else@2
    frame_dig 6
    frame_dig 5
    -
    bzero
    frame_dig 4
    swap
    concat
    frame_bury 7

dynamic_array_concat_bits_after_if_else@2:
    frame_dig 7
    frame_bury 4
    intc_0 // 0
    frame_bury 0
    frame_dig 3
    intc_3 // 16
    +
    dup
    frame_bury 2
    frame_dig -2
    +
    frame_bury 1

dynamic_array_concat_bits_while_top@3:
    frame_dig 2
    frame_dig 1
    <
    bz dynamic_array_concat_bits_after_while@5
    frame_dig -3
    frame_dig 0
    dup
    cover 2
    getbit
    frame_dig 4
    frame_dig 2
    dup
    cover 3
    uncover 2
    setbit
    frame_bury 4
    intc_1 // 1
    +
    frame_bury 2
    frame_dig -1
    +
    frame_bury 0
    b dynamic_array_concat_bits_while_top@3

dynamic_array_concat_bits_after_while@5:
    frame_dig 4
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.test_array(x1: bytes, y1: uint64, x2: bytes, y2: uint64) -> uint64:
test_array:
    // array/static_size.py:41-42
    // @arc4.abimethod()
    // def test_array(self, x1: arc4.UInt64, y1: UInt64, x2: arc4.UInt64, y2: UInt64) -> UInt64:
    proto 4 1
    intc_0 // 0
    dup
    bytec_3 // ""
    dupn 5
    // array/static_size.py:43
    // self.count = UInt64(0)
    bytec_1 // "count"
    intc_0 // 0
    app_global_put
    // array/static_size.py:45
    // Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    callsub xtra
    // array/static_size.py:46
    // Point(x=x1, y=y1, other=self.xtra()),
    callsub xtra
    // array/static_size.py:47
    // Point(x=x2, y=y2, other=self.xtra()),
    callsub xtra
    // array/static_size.py:44-48
    // path = ReferenceArray(
    //     Point(x=arc4.UInt64(), y=UInt64(), other=self.xtra()),
    //     Point(x=x1, y=y1, other=self.xtra()),
    //     Point(x=x2, y=y2, other=self.xtra()),
    // )
    uncover 14
    itob
    uncover 14
    itob
    concat
    uncover 13
    concat
    uncover 12
    concat
    dig 11
    len
    pushint 64 // 64
    <=
    assert // overflow
    pushint 64 // 64
    bzero
    uncover 12
    dig 1
    b|
    uncover 2
    swap
    concat
    pushbytes 0x00000000000000000000000000000000
    swap
    concat
    frame_dig -3
    itob
    frame_dig -4
    swap
    concat
    uncover 12
    itob
    uncover 12
    itob
    concat
    uncover 11
    concat
    uncover 10
    concat
    dig 9
    len
    pushint 64 // 64
    <=
    assert // overflow
    uncover 9
    dig 4
    b|
    concat
    concat
    concat
    frame_dig -1
    itob
    frame_dig -2
    swap
    concat
    uncover 7
    itob
    uncover 7
    itob
    concat
    uncover 6
    concat
    uncover 5
    concat
    dig 4
    len
    pushint 64 // 64
    <=
    assert // overflow
    uncover 4
    uncover 4
    b|
    concat
    concat
    concat
    // array/static_size.py:49
    // for i in urange(3):
    intc_0 // 0

test_array_for_header@1:
    // array/static_size.py:49
    // for i in urange(3):
    frame_dig 9
    pushint 3 // 3
    <
    bz test_array_after_for@4
    frame_dig 8
    // array/static_size.py:50
    // assert path[i].other.b == i + 1
    frame_dig 9
    dup
    cover 2
    intc 4 // 144
    *
    intc 4 // 144
    extract3 // on error: index access is out of bounds
    extract 16 128
    dup
    intc_2 // 8
    extract_uint64
    dig 2
    intc_1 // 1
    +
    swap
    dig 1
    ==
    assert
    // array/static_size.py:51
    // assert path[i].other.d.foo == i + 2
    swap
    extract 48 16
    dup
    extract 0 8
    uncover 3
    pushint 2 // 2
    +
    itob
    b==
    assert
    // array/static_size.py:52
    // assert path[i].other.d.bar == (i + 1) * (i + 1)
    extract 8 8
    dig 1
    dig 2
    *
    itob
    b==
    assert
    frame_bury 9
    b test_array_for_header@1

test_array_after_for@4:
    frame_dig 8
    // array/static_size.py:54
    // Box(ImmutableArray[Point], key="a").value = path.freeze()
    dup
    len
    intc 4 // 144
    /
    dup
    frame_bury 2
    itob
    extract 6 2
    dig 1
    concat
    pushbytes "a"
    box_del
    pop
    pushbytes "a"
    swap
    box_put
    // array/static_size.py:167
    // last_point = path[0]
    extract 0 144 // on error: index access is out of bounds
    dup
    frame_bury 0
    dup
    extract 0 8
    frame_bury 1
    intc_2 // 8
    extract_uint64
    frame_bury 4
    // array/static_size.py:168
    // length = UInt64()
    intc_0 // 0
    frame_bury 5
    // array/static_size.py:169
    // for point_idx in urange(1, path.length):
    intc_1 // 1
    frame_bury 7

test_array_for_header@6:
    // array/static_size.py:169
    // for point_idx in urange(1, path.length):
    frame_dig 7
    frame_dig 2
    <
    bz test_array_after_for@14
    frame_dig 8
    // array/static_size.py:170
    // point = path[point_idx]
    frame_dig 7
    intc 4 // 144
    *
    intc 4 // 144
    extract3 // on error: index access is out of bounds
    dupn 2
    extract 0 8
    swap
    intc_2 // 8
    extract_uint64
    frame_bury 6
    // array/static_size.py:171
    // if point.x < last_point.x:
    frame_dig 1
    b<
    bz test_array_else_body@9
    // array/static_size.py:172
    // dx = last_point.x.native - point.x.native
    frame_dig 0
    // array/static_size.py:167
    // last_point = path[0]
    intc_0 // 0
    // array/static_size.py:172
    // dx = last_point.x.native - point.x.native
    extract_uint64
    swap
    // array/static_size.py:170
    // point = path[point_idx]
    intc_0 // 0
    // array/static_size.py:172
    // dx = last_point.x.native - point.x.native
    extract_uint64
    -
    frame_bury 3

test_array_after_if_else@10:
    // array/static_size.py:175
    // if point.y < last_point.y:
    frame_dig 6
    frame_dig 4
    <
    bz test_array_else_body@12
    // array/static_size.py:176
    // dy = last_point.y - point.y
    frame_dig 4
    frame_dig 6
    -

test_array_after_if_else@13:
    // array/static_size.py:179
    // length += op.sqrt(dx * dx + dy * dy)
    frame_dig 3
    dup
    *
    swap
    dup
    *
    +
    sqrt
    frame_dig 5
    +
    frame_bury 5
    // array/static_size.py:169
    // for point_idx in urange(1, path.length):
    frame_dig 7
    intc_1 // 1
    +
    frame_bury 7
    b test_array_for_header@6

test_array_else_body@12:
    // array/static_size.py:178
    // dy = point.y - last_point.y
    frame_dig 6
    frame_dig 4
    -
    b test_array_after_if_else@13

test_array_else_body@9:
    // array/static_size.py:170
    // point = path[point_idx]
    intc_0 // 0
    // array/static_size.py:174
    // dx = point.x.native - last_point.x.native
    extract_uint64
    frame_dig 0
    // array/static_size.py:167
    // last_point = path[0]
    intc_0 // 0
    // array/static_size.py:174
    // dx = point.x.native - last_point.x.native
    extract_uint64
    -
    frame_bury 3
    b test_array_after_if_else@10

test_array_after_for@14:
    // array/static_size.py:55
    // return path_length(path)
    frame_dig 5
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.test_extend_from_tuple(some_more.0: bytes, some_more.1: bytes) -> bytes:
test_extend_from_tuple:
    // array/static_size.py:57-58
    // @arc4.abimethod()
    // def test_extend_from_tuple(self, some_more: tuple[More, More]) -> ImmutableArray[More]:
    proto 2 1
    // array/static_size.py:60
    // arr.extend(some_more)
    frame_dig -2
    frame_dig -1
    concat
    // array/static_size.py:61
    // last = arr[-1]
    dup
    len
    intc_3 // 16
    /
    dup
    intc_1 // 1
    -
    intc_3 // 16
    *
    dig 2
    swap
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    // array/static_size.py:62
    // assert last == some_more[1]
    dup
    frame_dig -1
    ==
    assert
    // array/static_size.py:63
    // result = arr.freeze()
    swap
    itob
    extract 6 2
    uncover 2
    concat
    // array/static_size.py:64
    // assert result[-1] == last
    dup
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    -
    dig 1
    extract 2 0
    swap
    intc_3 // 16
    *
    intc_3 // 16
    extract3 // on error: index access is out of bounds
    uncover 2
    ==
    assert
    // array/static_size.py:65
    // return result
    retsub


// test_cases.array.static_size.StaticSizeContract.test_extend_from_arc4_tuple(some_more: bytes) -> bytes:
test_extend_from_arc4_tuple:
    // array/static_size.py:67-70
    // @arc4.abimethod()
    // def test_extend_from_arc4_tuple(
    //     self, some_more: arc4.Tuple[More, More]
    // ) -> ImmutableArray[More]:
    proto 1 1
    // array/static_size.py:72
    // arr.extend(some_more)
    frame_dig -1
    pop
    // array/static_size.py:73
    // return arr.freeze()
    frame_dig -1
    len
    intc_3 // 16
    /
    itob
    extract 6 2
    frame_dig -1
    concat
    retsub


// test_cases.array.static_size.StaticSizeContract.test_bool_array(length: uint64) -> uint64:
test_bool_array:
    // array/static_size.py:75-76
    // @arc4.abimethod()
    // def test_bool_array(self, length: UInt64) -> UInt64:
    proto 1 1
    bytec_3 // ""
    // array/static_size.py:77
    // arr = ReferenceArray[bool]()
    dupn 4
    // array/static_size.py:80
    // for i in urange(1, length + 1):
    frame_dig -1
    intc_1 // 1
    +
    intc_1 // 1

test_bool_array_for_header@1:
    // array/static_size.py:80
    // for i in urange(1, length + 1):
    frame_dig 6
    frame_dig 5
    <
    bz test_bool_array_after_for@4
    // array/static_size.py:81
    // arr.append(i % 2 == 0)
    frame_dig 6
    dup
    pushint 2 // 2
    %
    !
    frame_dig 4
    swap
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    concat // on error: max array length exceeded
    frame_bury 4
    // array/static_size.py:80
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    frame_bury 6
    b test_bool_array_for_header@1

test_bool_array_after_for@4:
    frame_dig 4
    dupn 2
    // array/static_size.py:82
    // assert arr.length == length, "expected correct length"
    len
    frame_dig -1
    ==
    assert // expected correct length
    dig 1
    // array/static_size.py:85
    // arr2.extend(arr)
    concat // on error: max array length exceeded
    // array/static_size.py:86
    // assert arr2.length == length * 2, "expected correct length"
    len
    frame_dig -1
    pushint 2 // 2
    *
    ==
    assert // expected correct length
    // array/static_size.py:88
    // count = UInt64(0)
    intc_0 // 0
    frame_bury 1
    // array/static_size.py:89
    // for val in arr:
    len
    frame_bury 0
    intc_0 // 0
    frame_bury 3

test_bool_array_for_header@5:
    // array/static_size.py:89
    // for val in arr:
    frame_dig 3
    frame_dig 0
    <
    bz test_bool_array_after_for@10
    frame_dig 4
    frame_dig 3
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    frame_dig 1
    frame_bury 2
    // array/static_size.py:90
    // if val:
    bz test_bool_array_after_if_else@8
    // array/static_size.py:91
    // count += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 2

test_bool_array_after_if_else@8:
    frame_dig 2
    frame_bury 1
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_bool_array_for_header@5

test_bool_array_after_for@10:
    // array/static_size.py:92
    // return count
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.test_arc4_conversion(length: uint64) -> bytes:
test_arc4_conversion:
    // array/static_size.py:94-95
    // @arc4.abimethod()
    // def test_arc4_conversion(self, length: UInt64) -> arc4.DynamicArray[arc4.UInt64]:
    proto 1 1
    bytec_3 // ""
    // array/static_size.py:96
    // arr = ReferenceArray[arc4.UInt64]()
    dupn 4
    // array/static_size.py:99
    // for i in urange(1, length + 1):
    frame_dig -1
    intc_1 // 1
    +
    intc_1 // 1

test_arc4_conversion_for_header@1:
    // array/static_size.py:99
    // for i in urange(1, length + 1):
    frame_dig 6
    frame_dig 5
    <
    bz test_arc4_conversion_after_for@4
    // array/static_size.py:100
    // arr.append(arc4.UInt64(i))
    frame_dig 6
    dup
    itob
    frame_dig 4
    swap
    concat // on error: max array length exceeded
    frame_bury 4
    // array/static_size.py:99
    // for i in urange(1, length + 1):
    intc_1 // 1
    +
    frame_bury 6
    b test_arc4_conversion_for_header@1

test_arc4_conversion_after_for@4:
    frame_dig 4
    // array/static_size.py:101
    // assert arr.length == length, "expected correct length"
    len
    intc_2 // 8
    /
    dup
    frame_bury 0
    frame_dig -1
    ==
    assert // expected correct length
    // array/static_size.py:102
    // count = UInt64(0)
    intc_0 // 0
    frame_bury 1
    intc_0 // 0
    frame_bury 3

test_arc4_conversion_for_header@5:
    // array/static_size.py:103
    // for val in arr:
    frame_dig 3
    frame_dig 0
    <
    bz test_arc4_conversion_after_for@10
    frame_dig 4
    frame_dig 3
    intc_2 // 8
    *
    intc_2 // 8
    extract3 // on error: index access is out of bounds
    // array/static_size.py:104
    // if val:
    bytec_3 // 0x
    b!=
    frame_dig 1
    frame_bury 2
    bz test_arc4_conversion_after_if_else@8
    // array/static_size.py:105
    // count += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 2

test_arc4_conversion_after_if_else@8:
    frame_dig 2
    frame_bury 1
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b test_arc4_conversion_for_header@5

test_arc4_conversion_after_for@10:
    // array/static_size.py:107
    // arc4_arr = arc4.DynamicArray[arc4.UInt64]()
    bytec 4 // 0x0000
    frame_dig 4
    // array/static_size.py:108
    // arc4_arr.extend(arr)
    concat // on error: max array length exceeded
    dup
    extract 2 0
    len
    intc_2 // 8
    /
    itob
    extract 6 2
    replace2 0
    // array/static_size.py:110
    // return arc4_arr
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.sum_array(arc4_arr: bytes) -> uint64:
sum_array:
    // array/static_size.py:112-113
    // @arc4.abimethod()
    // def sum_array(self, arc4_arr: arc4.DynamicArray[arc4.UInt64]) -> UInt64:
    proto 1 1
    // array/static_size.py:115
    // arr.extend(arc4_arr)
    frame_dig -1
    extract 2 0
    dup
    // array/static_size.py:117
    // total = UInt64(0)
    intc_0 // 0
    swap
    // array/static_size.py:118
    // for item in arr:
    len
    intc_2 // 8
    /
    intc_0 // 0

sum_array_for_header@1:
    // array/static_size.py:118
    // for item in arr:
    frame_dig 3
    frame_dig 2
    <
    bz sum_array_after_for@4
    frame_dig 0
    frame_dig 3
    dup
    cover 2
    intc_2 // 8
    *
    // array/static_size.py:119
    // total += item.native
    extract_uint64
    frame_dig 1
    +
    frame_bury 1
    intc_1 // 1
    +
    frame_bury 3
    b sum_array_for_header@1

sum_array_after_for@4:
    // array/static_size.py:121
    // return total
    frame_dig 1
    frame_bury 0
    retsub


// test_cases.array.static_size.StaticSizeContract.xtra() -> uint64, uint64, bytes, bytes, bytes:
xtra:
    // array/static_size.py:125
    // self.count += 1
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    intc_1 // 1
    +
    bytec_1 // "count"
    dig 1
    app_global_put
    // array/static_size.py:127
    // a=Txn.num_app_args,
    txn NumAppArgs
    // array/static_size.py:129
    // c=Txn.sender,
    txn Sender
    // array/static_size.py:130
    // d=self.more(),
    callsub more
    // array/static_size.py:131
    // e=BigUInt(self.count),
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    itob
    // array/static_size.py:126-132
    // return Xtra(
    //     a=Txn.num_app_args,
    //     b=self.count,
    //     c=Txn.sender,
    //     d=self.more(),
    //     e=BigUInt(self.count),
    // )
    uncover 3
    cover 4
    retsub


// test_cases.array.static_size.StaticSizeContract.more() -> bytes:
more:
    // array/static_size.py:136
    // return More(foo=arc4.UInt64(self.count + 1), bar=arc4.UInt64(self.count * self.count))
    intc_0 // 0
    bytec_1 // "count"
    app_global_get_ex
    assert // check self.count exists
    dup
    intc_1 // 1
    +
    itob
    dig 1
    uncover 2
    *
    itob
    concat
    retsub


// test_cases.array.static_size.StaticSizeContract.test_arc4_bool() -> bytes:
test_arc4_bool:
    // array/static_size.py:138-139
    // @arc4.abimethod()
    // def test_arc4_bool(self) -> ImmutableArray[arc4.Bool]:
    proto 0 1
    // array/static_size.py:141
    // arr.append(arc4.Bool(Txn.sender == Txn.receiver))
    txn Sender
    txn Receiver
    ==
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    // array/static_size.py:142
    // arr.append(arc4.Bool(Txn.sender != Txn.receiver))
    txn Sender
    txn Receiver
    !=
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    concat // on error: max array length exceeded
    dupn 2
    uncover 2
    // array/static_size.py:145
    // dyn_arr.extend(arr)
    dup
    len
    // array/static_size.py:144
    // dyn_arr = arc4.DynamicArray[arc4.Bool]()
    bytec 4 // 0x0000
    // array/static_size.py:145
    // dyn_arr.extend(arr)
    cover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    dup
    cover 2
    // array/static_size.py:146
    // assert dyn_arr.length == 2, "expected correct length"
    dup
    intc_0 // 0
    extract_uint16
    dup
    cover 3
    dup
    pushint 2 // 2
    ==
    assert // expected correct length
    // array/static_size.py:147
    // assert dyn_arr.bytes.length == 3, "expected 3 bytes"
    dig 1
    len
    pushint 3 // 3
    ==
    assert // expected 3 bytes
    // array/static_size.py:148
    // assert dyn_arr[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
    dup
    assert // index access is out of bounds
    dig 1
    intc_3 // 16
    getbit
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 0
    // array/static_size.py:149
    // assert dyn_arr[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
    intc_1 // 1
    >
    assert // index access is out of bounds
    pushint 17 // 17
    getbit
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 1
    intc_0 // 0

test_arc4_bool_for_header@1:
    // array/static_size.py:152-154
    // # note: not supported currently
    // # arr2.extend(dyn_array)
    // for b in dyn_arr:
    frame_dig 4
    frame_dig 2
    <
    bz test_arc4_bool_after_for@4
    frame_dig 4
    dup
    intc_3 // 16
    +
    frame_dig 1
    swap
    getbit
    bytec_2 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    frame_dig 3
    // array/static_size.py:155
    // arr2.append(b)
    swap
    concat // on error: max array length exceeded
    frame_bury 3
    intc_1 // 1
    +
    frame_bury 4
    b test_arc4_bool_for_header@1

test_arc4_bool_after_for@4:
    frame_dig 3
    // array/static_size.py:156
    // assert arr2.length == 4, "expected correct length"
    dup
    len
    pushint 4 // 4
    ==
    assert // expected correct length
    // array/static_size.py:157
    // assert arr2[0] == (Txn.sender == Txn.receiver), "expected correct value at 0"
    dup
    extract 0 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 0
    // array/static_size.py:158
    // assert arr2[1] == (Txn.sender != Txn.receiver), "expected correct value at 1"
    dup
    extract 1 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 1
    // array/static_size.py:159
    // assert arr2[2] == (Txn.sender == Txn.receiver), "expected correct value at 2"
    dup
    extract 2 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    ==
    ==
    assert // expected correct value at 2
    // array/static_size.py:160
    // assert arr2[3] == (Txn.sender != Txn.receiver), "expected correct value at 3"
    extract 3 1 // on error: index access is out of bounds
    intc_0 // 0
    getbit
    txn Sender
    txn Receiver
    !=
    ==
    assert // expected correct value at 3
    frame_dig 0
    // array/static_size.py:162
    // return arr.freeze()
    dup
    len
    bytec 4 // 0x0000
    cover 2
    intc_2 // 8
    callsub dynamic_array_concat_bits
    frame_bury 0
    retsub
