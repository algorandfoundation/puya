{
  "version": 3,
  "sources": [
    "../immutable-init.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAWoC;;AAV/B;AAAA;AAgCuB;;AAVvB;AAAA;AAwBQ;AAEuB;;;;AACrB;AAAA;AAAA;AAAa;AAAb;AAAP;AACO;AAAA;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AAAP;AAEK;;;;AAEE;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AAAP;AAZK;;AAAA;;AAeE;AAAA;AAAA;AAAA;AAAa;AAAb;AAAP;AACO;AAAA;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AApBV;AAwBQ;AAEe;;;;AACb;AAAA;AAAA;AAAa;AAAb;AAAP;AACO;AAAA;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AAAP;AAEK;;;;AAEE;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AAAP;AAZK;;AAAA;;AAeE;AAAA;AAAA;AAAA;AAAa;AAAb;AAAP;AACO;AAAA;AAAA;AAAS;AAAT;AAAP;AACO;AAAA;AAAA;AAAS;;AAAT;AAAP;AACO;;AAAA;AAAS;AAAT;AApBV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 3 1 0"
    },
    "7": {
      "op": "bytecblock 0x000000000000000100000000000000020000000000000003"
    },
    "34": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "39": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "42": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "45": {
      "op": "assert",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0x8434ba2a 0x63aabba0 0xdbaf034e 0xa9d14554 // method \"test_immutable_array_init()void\", method \"test_immutable_array_init_without_type_generic()void\", method \"test_reference_array_init()void\", method \"test_reference_array_init_without_type_generic()void\"",
      "defined_out": [
        "Method(test_immutable_array_init()void)",
        "Method(test_immutable_array_init_without_type_generic()void)",
        "Method(test_reference_array_init()void)",
        "Method(test_reference_array_init_without_type_generic()void)"
      ],
      "stack_out": [
        "Method(test_immutable_array_init()void)",
        "Method(test_immutable_array_init_without_type_generic()void)",
        "Method(test_reference_array_init()void)",
        "Method(test_reference_array_init_without_type_generic()void)"
      ]
    },
    "68": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_immutable_array_init()void)",
        "Method(test_immutable_array_init_without_type_generic()void)",
        "Method(test_reference_array_init()void)",
        "Method(test_reference_array_init_without_type_generic()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_immutable_array_init()void)",
        "Method(test_immutable_array_init_without_type_generic()void)",
        "Method(test_reference_array_init()void)",
        "Method(test_reference_array_init_without_type_generic()void)",
        "tmp%6#0"
      ]
    },
    "71": {
      "op": "match test_immutable_array_init test_immutable_array_init_without_type_generic test_reference_array_init test_reference_array_init_without_type_generic",
      "stack_out": []
    },
    "81": {
      "op": "err"
    },
    "82": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "85": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "87": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "88": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "89": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "90": {
      "subroutine": "test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init[routing]",
      "params": {},
      "block": "test_immutable_array_init",
      "stack_in": [],
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "defined_out": [
        "0x000000000000000100000000000000020000000000000003"
      ],
      "stack_out": [
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "91": {
      "op": "pop",
      "stack_out": []
    },
    "92": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "subroutine": "test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic[routing]",
      "params": {},
      "block": "test_immutable_array_init_without_type_generic",
      "stack_in": [],
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "defined_out": [
        "0x000000000000000100000000000000020000000000000003"
      ],
      "stack_out": [
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "95": {
      "op": "pop",
      "stack_out": []
    },
    "96": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "subroutine": "test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init[routing]",
      "params": {},
      "block": "test_reference_array_init",
      "stack_in": [],
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "0x000000000000000100000000000000020000000000000003",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "100": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "101": {
      "op": "dupn 2",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "103": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%bytes_len%0#0"
      ]
    },
    "104": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "aggregate%bytes_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%bytes_len%0#0",
        "8"
      ]
    },
    "105": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "106": {
      "op": "intc_1 // 3",
      "defined_out": [
        "3",
        "aggregate%array_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%array_len%0#0",
        "3"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%3#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%3#0"
      ]
    },
    "108": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "109": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "110": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "0"
      ]
    },
    "111": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%0#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%0#0"
      ]
    },
    "112": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%0#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%0#0",
        "1"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%4#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%4#0"
      ]
    },
    "114": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "115": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "116": {
      "op": "intc_0 // 8",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "8"
      ]
    },
    "117": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%2#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%2#0"
      ]
    },
    "118": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%2#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%2#0",
        "2"
      ]
    },
    "120": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%5#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%5#0"
      ]
    },
    "121": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "122": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "16"
      ]
    },
    "124": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "values%4#0"
      ],
      "stack_out": [
        "slot%0",
        "values%4#0"
      ]
    },
    "125": {
      "op": "intc_1 // 3",
      "stack_out": [
        "slot%0",
        "values%4#0",
        "3"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "tmp%6#0"
      ],
      "stack_out": [
        "slot%0",
        "tmp%6#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": [
        "slot%0"
      ]
    },
    "128": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "129": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "130": {
      "op": "dupn 2",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ]
    },
    "132": {
      "op": "intc_3 // 0",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)",
        "0"
      ]
    },
    "133": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0"
      ]
    },
    "134": {
      "op": "intc_2 // 1",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0",
        "1"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%10#0"
      ]
    },
    "136": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0"
      ]
    },
    "137": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ]
    },
    "138": {
      "op": "intc_0 // 8",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)",
        "8"
      ]
    },
    "139": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0"
      ]
    },
    "140": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0",
        "2"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%11#0"
      ]
    },
    "143": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0"
      ]
    },
    "144": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "16"
      ]
    },
    "146": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "values%10#0"
      ],
      "stack_out": [
        "slot%0",
        "values%10#0"
      ]
    },
    "147": {
      "op": "intc_1 // 3",
      "stack_out": [
        "slot%0",
        "values%10#0",
        "3"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "tmp%12#0"
      ],
      "stack_out": [
        "slot%0",
        "tmp%12#0"
      ]
    },
    "149": {
      "op": "assert",
      "stack_out": [
        "slot%0"
      ]
    },
    "150": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "151": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "152": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "153": {
      "op": "pop",
      "defined_out": [
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "154": {
      "op": "dup",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "155": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%3#0",
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%bytes_len%3#0"
      ]
    },
    "156": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%bytes_len%3#0",
        "8"
      ]
    },
    "157": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%3#0",
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%array_len%3#0"
      ]
    },
    "158": {
      "op": "intc_1 // 3",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%array_len%3#0",
        "3"
      ]
    },
    "159": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%15#0"
      ]
    },
    "160": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "161": {
      "op": "dup",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "162": {
      "op": "intc_3 // 0",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)",
        "0"
      ]
    },
    "163": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0"
      ]
    },
    "164": {
      "op": "intc_2 // 1",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0",
        "1"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%16#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "167": {
      "op": "dup",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "168": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)",
        "8"
      ]
    },
    "169": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0"
      ]
    },
    "170": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0",
        "2"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%17#0"
      ]
    },
    "173": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "174": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "16"
      ]
    },
    "176": {
      "op": "extract_uint64",
      "defined_out": [
        "values%16#0"
      ],
      "stack_out": [
        "values%16#0"
      ]
    },
    "177": {
      "op": "intc_1 // 3",
      "stack_out": [
        "values%16#0",
        "3"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "subroutine": "test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic[routing]",
      "params": {},
      "block": "test_reference_array_init_without_type_generic",
      "stack_in": [],
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "defined_out": [
        "slot%0"
      ],
      "stack_out": [
        "slot%0"
      ]
    },
    "181": {
      "op": "dup",
      "defined_out": [
        "0x000000000000000100000000000000020000000000000003",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "182": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "183": {
      "op": "dupn 2",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "185": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%bytes_len%0#0"
      ]
    },
    "186": {
      "op": "intc_0 // 8",
      "defined_out": [
        "8",
        "aggregate%bytes_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%bytes_len%0#0",
        "8"
      ]
    },
    "187": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%array_len%0#0"
      ]
    },
    "188": {
      "op": "intc_1 // 3",
      "defined_out": [
        "3",
        "aggregate%array_len%0#0",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%array_len%0#0",
        "3"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%3#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%3#0"
      ]
    },
    "190": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "191": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "192": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "0"
      ]
    },
    "193": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%0#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%0#0"
      ]
    },
    "194": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%0#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%0#0",
        "1"
      ]
    },
    "195": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%4#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%4#0"
      ]
    },
    "196": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "197": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)"
      ]
    },
    "198": {
      "op": "intc_0 // 8",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "aggregate%slot_contents%0#0 (copy)",
        "8"
      ]
    },
    "199": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%2#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%2#0"
      ]
    },
    "200": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%slot_contents%0#0",
        "slot%0",
        "values%2#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "values%2#0",
        "2"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%0#0",
        "slot%0",
        "tmp%5#0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "tmp%5#0"
      ]
    },
    "203": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0"
      ]
    },
    "204": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%slot_contents%0#0",
        "slot%0"
      ],
      "stack_out": [
        "slot%0",
        "aggregate%slot_contents%0#0",
        "16"
      ]
    },
    "206": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "values%4#0"
      ],
      "stack_out": [
        "slot%0",
        "values%4#0"
      ]
    },
    "207": {
      "op": "intc_1 // 3",
      "stack_out": [
        "slot%0",
        "values%4#0",
        "3"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "tmp%6#0"
      ],
      "stack_out": [
        "slot%0",
        "tmp%6#0"
      ]
    },
    "209": {
      "op": "assert",
      "stack_out": [
        "slot%0"
      ]
    },
    "210": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "211": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "212": {
      "op": "dupn 2",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ]
    },
    "214": {
      "op": "intc_3 // 0",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)",
        "0"
      ]
    },
    "215": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0"
      ]
    },
    "216": {
      "op": "intc_2 // 1",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%6#0",
        "1"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%10#0"
      ]
    },
    "218": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0"
      ]
    },
    "219": {
      "op": "dup",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)"
      ]
    },
    "220": {
      "op": "intc_0 // 8",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "slot_contents%6#0 (copy)",
        "8"
      ]
    },
    "221": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0"
      ]
    },
    "222": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "values%8#0",
        "2"
      ]
    },
    "224": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "tmp%11#0"
      ]
    },
    "225": {
      "op": "assert",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0"
      ]
    },
    "226": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "slot%0",
        "slot_contents%6#0",
        "16"
      ]
    },
    "228": {
      "op": "extract_uint64",
      "defined_out": [
        "slot%0",
        "values%10#0"
      ],
      "stack_out": [
        "slot%0",
        "values%10#0"
      ]
    },
    "229": {
      "op": "intc_1 // 3",
      "stack_out": [
        "slot%0",
        "values%10#0",
        "3"
      ]
    },
    "230": {
      "op": "==",
      "defined_out": [
        "slot%0",
        "tmp%12#0"
      ],
      "stack_out": [
        "slot%0",
        "tmp%12#0"
      ]
    },
    "231": {
      "op": "assert",
      "stack_out": [
        "slot%0"
      ]
    },
    "232": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "233": {
      "op": "pop",
      "stack_out": [
        "slot%0"
      ]
    },
    "234": {
      "op": "bytec_0 // 0x000000000000000100000000000000020000000000000003",
      "stack_out": [
        "slot%0",
        "0x000000000000000100000000000000020000000000000003"
      ]
    },
    "235": {
      "op": "pop",
      "defined_out": [
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "237": {
      "op": "len",
      "defined_out": [
        "aggregate%bytes_len%3#0",
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%bytes_len%3#0"
      ]
    },
    "238": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%bytes_len%3#0",
        "8"
      ]
    },
    "239": {
      "op": "/",
      "defined_out": [
        "aggregate%array_len%3#0",
        "aggregate%slot_contents%3#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%array_len%3#0"
      ]
    },
    "240": {
      "op": "intc_1 // 3",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%array_len%3#0",
        "3"
      ]
    },
    "241": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%15#0"
      ]
    },
    "242": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "243": {
      "op": "dup",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "244": {
      "op": "intc_3 // 0",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)",
        "0"
      ]
    },
    "245": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0"
      ]
    },
    "246": {
      "op": "intc_2 // 1",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%12#0",
        "1"
      ]
    },
    "247": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%16#0"
      ]
    },
    "248": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "249": {
      "op": "dup",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)"
      ]
    },
    "250": {
      "op": "intc_0 // 8",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "aggregate%slot_contents%3#0 (copy)",
        "8"
      ]
    },
    "251": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0"
      ]
    },
    "252": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "values%14#0",
        "2"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "aggregate%slot_contents%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "tmp%17#0"
      ]
    },
    "255": {
      "op": "assert",
      "stack_out": [
        "aggregate%slot_contents%3#0"
      ]
    },
    "256": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "aggregate%slot_contents%3#0",
        "16"
      ]
    },
    "258": {
      "op": "extract_uint64",
      "defined_out": [
        "values%16#0"
      ],
      "stack_out": [
        "values%16#0"
      ]
    },
    "259": {
      "op": "intc_1 // 3",
      "stack_out": [
        "values%16#0",
        "3"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    }
  }
}