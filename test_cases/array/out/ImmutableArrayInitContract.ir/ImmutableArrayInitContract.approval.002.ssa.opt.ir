main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L10
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_immutable_array_init()void" => block@4, method "test_immutable_array_init_without_type_generic()void" => block@5, method "test_reference_array_init()void" => block@6, method "test_reference_array_init_without_type_generic()void" => block@7, * => block@10}
    block@4: // test_immutable_array_init_route_L11
        test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init[routing]()
        goto block@10
    block@5: // test_immutable_array_init_without_type_generic_route_L33
        test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic[routing]()
        goto block@10
    block@6: // test_reference_array_init_route_L55
        test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init[routing]()
        goto block@10
    block@7: // test_reference_array_init_without_type_generic_route_L77
        test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic[routing]()
        goto block@10
    block@10: // after_if_else_L10
        fail
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init[routing]() -> void:
    block@0: // L11
        let a1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u)
        let encoded_array%1#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(1u, 2u, 3u)
        let tmp%0#0: uint64 = array_len(encoded_array%1#0)
        let as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let a2#0: Encoded(len+uint64[]) = (concat as_u16_bytes%0#0 encoded_array%1#0)
        let tmp%1#0: uint64 = array_len(a1#0)
        let tmp%2#0: uint64 = array_len(a2#0)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let array_item%0#0: Encoded(uint64) = extract_value(a1#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let array_item%1#0: Encoded(uint64) = extract_value(a2#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== values%0#0 values%1#0)
        (assert tmp%4#0)
        let array_item%2#0: Encoded(uint64) = extract_value(a1#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let array_item%3#0: Encoded(uint64) = extract_value(a2#0, 1u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%5#0: bool = (== values%2#0 values%3#0)
        (assert tmp%5#0)
        let array_item%4#0: Encoded(uint64) = extract_value(a1#0, 2u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let array_item%5#0: Encoded(uint64) = extract_value(a2#0, 2u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%6#0: bool = (== values%4#0 values%5#0)
        (assert tmp%6#0)
        let encoded_array%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u, 2u, 3u)
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%2#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(slot%0#0)
        let tmp%7#0: uint64 = array_len(slot_contents%0#0)
        let as_bytes%1#0: bytes[8] = (itob tmp%7#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let a3#0: Encoded(len+uint64[]) = (concat as_u16_bytes%1#0 slot_contents%0#0)
        let tmp%8#0: uint64 = array_len(a3#0)
        let tmp%9#0: bool = (== tmp%8#0 3u)
        (assert tmp%9#0)
        let array_item%7#0: Encoded(uint64) = extract_value(a3#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%10#0: bool = (== values%0#0 values%7#0)
        (assert tmp%10#0)
        let array_item%9#0: Encoded(uint64) = extract_value(a3#0, 1u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%11#0: bool = (== values%2#0 values%9#0)
        (assert tmp%11#0)
        let array_item%11#0: Encoded(uint64) = extract_value(a3#0, 2u)
        let values%11#0: uint64 = decode_bytes<uint64>(array_item%11#0)
        let tmp%12#0: bool = (== values%4#0 values%11#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = array_len(a1#0)
        let tmp%14#0: uint64 = array_len(a1#0)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = 1u
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        exit 1u

subroutine test_cases.array.immutable-init.ImmutableArrayInitContract.test_immutable_array_init_without_type_generic[routing]() -> void:
    block@0: // L33
        let a1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u)
        let encoded_array%1#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(1u, 2u, 3u)
        let tmp%0#0: uint64 = array_len(encoded_array%1#0)
        let as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let a2#0: Encoded(len+uint64[]) = (concat as_u16_bytes%0#0 encoded_array%1#0)
        let tmp%1#0: uint64 = array_len(a1#0)
        let tmp%2#0: uint64 = array_len(a2#0)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let array_item%0#0: Encoded(uint64) = extract_value(a1#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let array_item%1#0: Encoded(uint64) = extract_value(a2#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== values%0#0 values%1#0)
        (assert tmp%4#0)
        let array_item%2#0: Encoded(uint64) = extract_value(a1#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let array_item%3#0: Encoded(uint64) = extract_value(a2#0, 1u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%5#0: bool = (== values%2#0 values%3#0)
        (assert tmp%5#0)
        let array_item%4#0: Encoded(uint64) = extract_value(a1#0, 2u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let array_item%5#0: Encoded(uint64) = extract_value(a2#0, 2u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%6#0: bool = (== values%4#0 values%5#0)
        (assert tmp%6#0)
        let encoded_array%2#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u, 2u, 3u)
        let slot%0#0: Encoded(uint64[])* = new()
        store(slot%0#0, encoded_array%2#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(slot%0#0)
        let tmp%7#0: uint64 = array_len(slot_contents%0#0)
        let as_bytes%1#0: bytes[8] = (itob tmp%7#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let a3#0: Encoded(len+uint64[]) = (concat as_u16_bytes%1#0 slot_contents%0#0)
        let tmp%8#0: uint64 = array_len(a3#0)
        let tmp%9#0: bool = (== tmp%8#0 3u)
        (assert tmp%9#0)
        let array_item%7#0: Encoded(uint64) = extract_value(a3#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%10#0: bool = (== values%0#0 values%7#0)
        (assert tmp%10#0)
        let array_item%9#0: Encoded(uint64) = extract_value(a3#0, 1u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%11#0: bool = (== values%2#0 values%9#0)
        (assert tmp%11#0)
        let array_item%11#0: Encoded(uint64) = extract_value(a3#0, 2u)
        let values%11#0: uint64 = decode_bytes<uint64>(array_item%11#0)
        let tmp%12#0: bool = (== values%4#0 values%11#0)
        (assert tmp%12#0)
        let tmp%13#0: uint64 = array_len(a1#0)
        let tmp%14#0: uint64 = array_len(a1#0)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = 1u
        let tmp%17#0: bool = 1u
        let tmp%18#0: bool = 1u
        exit 1u

subroutine test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init[routing]() -> void:
    block@0: // L55
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u, 2u, 3u)
        let a1#0: Encoded(uint64[])* = new()
        store(a1#0, encoded_array%0#0)
        let encoded_array%1#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(1u, 2u, 3u)
        let a2#0: Encoded(uint64[])* = new()
        store(a2#0, encoded_array%1#0)
        let tmp%1#0: uint64 = array_len(a1#0)
        let tmp%2#0: uint64 = array_len(a2#0)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(a1#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(a2#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%1#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== values%0#0 values%1#0)
        (assert tmp%4#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(a1#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%2#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(a2#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%3#0, 1u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%5#0: bool = (== values%2#0 values%3#0)
        (assert tmp%5#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(a1#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%4#0, 2u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(a2#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%5#0, 2u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%6#0: bool = (== values%4#0 values%5#0)
        (assert tmp%6#0)
        let encoded_array%2#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u)
        let converted_array%0#0: bytes = ((extract 2 0) encoded_array%2#0)
        let a3#0: Encoded(uint64[])* = new()
        store(a3#0, converted_array%0#0)
        let tmp%8#0: uint64 = array_len(a3#0)
        let tmp%9#0: bool = (== tmp%8#0 3u)
        (assert tmp%9#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(a1#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%6#0, 0u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(a3#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%7#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%10#0: bool = (== values%6#0 values%7#0)
        (assert tmp%10#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(a1#0)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%8#0, 1u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let slot_contents%9#0: Encoded(uint64[]) = load(a3#0)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%9#0, 1u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%11#0: bool = (== values%8#0 values%9#0)
        (assert tmp%11#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(a1#0)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%10#0, 2u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(a3#0)
        let array_item%11#0: Encoded(uint64) = extract_value(slot_contents%11#0, 2u)
        let values%11#0: uint64 = decode_bytes<uint64>(array_item%11#0)
        let tmp%12#0: bool = (== values%10#0 values%11#0)
        (assert tmp%12#0)
        let slot%3#0: Encoded(uint64[])* = new()
        store(slot%3#0, encoded_array%0#0)
        let a4#0: Encoded(uint64[])* = new()
        let slot_contents%12#0: Encoded(uint64[]) = load(slot%3#0)
        store(a4#0, slot_contents%12#0)
        let tmp%13#0: uint64 = array_len(a1#0)
        let tmp%14#0: uint64 = array_len(a4#0)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(a1#0)
        let array_item%12#0: Encoded(uint64) = extract_value(slot_contents%13#0, 0u)
        let values%12#0: uint64 = decode_bytes<uint64>(array_item%12#0)
        let slot_contents%14#0: Encoded(uint64[]) = load(a4#0)
        let array_item%13#0: Encoded(uint64) = extract_value(slot_contents%14#0, 0u)
        let values%13#0: uint64 = decode_bytes<uint64>(array_item%13#0)
        let tmp%16#0: bool = (== values%12#0 values%13#0)
        (assert tmp%16#0)
        let slot_contents%15#0: Encoded(uint64[]) = load(a1#0)
        let array_item%14#0: Encoded(uint64) = extract_value(slot_contents%15#0, 1u)
        let values%14#0: uint64 = decode_bytes<uint64>(array_item%14#0)
        let slot_contents%16#0: Encoded(uint64[]) = load(a4#0)
        let array_item%15#0: Encoded(uint64) = extract_value(slot_contents%16#0, 1u)
        let values%15#0: uint64 = decode_bytes<uint64>(array_item%15#0)
        let tmp%17#0: bool = (== values%14#0 values%15#0)
        (assert tmp%17#0)
        let slot_contents%17#0: Encoded(uint64[]) = load(a1#0)
        let array_item%16#0: Encoded(uint64) = extract_value(slot_contents%17#0, 2u)
        let values%16#0: uint64 = decode_bytes<uint64>(array_item%16#0)
        let slot_contents%18#0: Encoded(uint64[]) = load(a4#0)
        let array_item%17#0: Encoded(uint64) = extract_value(slot_contents%18#0, 2u)
        let values%17#0: uint64 = decode_bytes<uint64>(array_item%17#0)
        let tmp%18#0: bool = (== values%16#0 values%17#0)
        (assert tmp%18#0)
        exit 1u

subroutine test_cases.array.immutable-init.ImmutableArrayInitContract.test_reference_array_init_without_type_generic[routing]() -> void:
    block@0: // L77
        let encoded_array%0#0: Encoded(uint64[]) = bytes_encode<uint64[]>(1u, 2u, 3u)
        let a1#0: Encoded(uint64[])* = new()
        store(a1#0, encoded_array%0#0)
        let encoded_array%1#0: Encoded(uint64[3]) = bytes_encode<uint64[3]>(1u, 2u, 3u)
        let a2#0: Encoded(uint64[])* = new()
        store(a2#0, encoded_array%1#0)
        let tmp%1#0: uint64 = array_len(a1#0)
        let tmp%2#0: uint64 = array_len(a2#0)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0)
        let slot_contents%0#0: Encoded(uint64[]) = load(a1#0)
        let array_item%0#0: Encoded(uint64) = extract_value(slot_contents%0#0, 0u)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let slot_contents%1#0: Encoded(uint64[]) = load(a2#0)
        let array_item%1#0: Encoded(uint64) = extract_value(slot_contents%1#0, 0u)
        let values%1#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let tmp%4#0: bool = (== values%0#0 values%1#0)
        (assert tmp%4#0)
        let slot_contents%2#0: Encoded(uint64[]) = load(a1#0)
        let array_item%2#0: Encoded(uint64) = extract_value(slot_contents%2#0, 1u)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%2#0)
        let slot_contents%3#0: Encoded(uint64[]) = load(a2#0)
        let array_item%3#0: Encoded(uint64) = extract_value(slot_contents%3#0, 1u)
        let values%3#0: uint64 = decode_bytes<uint64>(array_item%3#0)
        let tmp%5#0: bool = (== values%2#0 values%3#0)
        (assert tmp%5#0)
        let slot_contents%4#0: Encoded(uint64[]) = load(a1#0)
        let array_item%4#0: Encoded(uint64) = extract_value(slot_contents%4#0, 2u)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let slot_contents%5#0: Encoded(uint64[]) = load(a2#0)
        let array_item%5#0: Encoded(uint64) = extract_value(slot_contents%5#0, 2u)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%5#0)
        let tmp%6#0: bool = (== values%4#0 values%5#0)
        (assert tmp%6#0)
        let encoded_array%2#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>(1u, 2u, 3u)
        let converted_array%0#0: bytes = ((extract 2 0) encoded_array%2#0)
        let a3#0: Encoded(uint64[])* = new()
        store(a3#0, converted_array%0#0)
        let tmp%8#0: uint64 = array_len(a3#0)
        let tmp%9#0: bool = (== tmp%8#0 3u)
        (assert tmp%9#0)
        let slot_contents%6#0: Encoded(uint64[]) = load(a1#0)
        let array_item%6#0: Encoded(uint64) = extract_value(slot_contents%6#0, 0u)
        let values%6#0: uint64 = decode_bytes<uint64>(array_item%6#0)
        let slot_contents%7#0: Encoded(uint64[]) = load(a3#0)
        let array_item%7#0: Encoded(uint64) = extract_value(slot_contents%7#0, 0u)
        let values%7#0: uint64 = decode_bytes<uint64>(array_item%7#0)
        let tmp%10#0: bool = (== values%6#0 values%7#0)
        (assert tmp%10#0)
        let slot_contents%8#0: Encoded(uint64[]) = load(a1#0)
        let array_item%8#0: Encoded(uint64) = extract_value(slot_contents%8#0, 1u)
        let values%8#0: uint64 = decode_bytes<uint64>(array_item%8#0)
        let slot_contents%9#0: Encoded(uint64[]) = load(a3#0)
        let array_item%9#0: Encoded(uint64) = extract_value(slot_contents%9#0, 1u)
        let values%9#0: uint64 = decode_bytes<uint64>(array_item%9#0)
        let tmp%11#0: bool = (== values%8#0 values%9#0)
        (assert tmp%11#0)
        let slot_contents%10#0: Encoded(uint64[]) = load(a1#0)
        let array_item%10#0: Encoded(uint64) = extract_value(slot_contents%10#0, 2u)
        let values%10#0: uint64 = decode_bytes<uint64>(array_item%10#0)
        let slot_contents%11#0: Encoded(uint64[]) = load(a3#0)
        let array_item%11#0: Encoded(uint64) = extract_value(slot_contents%11#0, 2u)
        let values%11#0: uint64 = decode_bytes<uint64>(array_item%11#0)
        let tmp%12#0: bool = (== values%10#0 values%11#0)
        (assert tmp%12#0)
        let slot%3#0: Encoded(uint64[])* = new()
        store(slot%3#0, encoded_array%0#0)
        let a4#0: Encoded(uint64[])* = new()
        let slot_contents%12#0: Encoded(uint64[]) = load(slot%3#0)
        store(a4#0, slot_contents%12#0)
        let tmp%13#0: uint64 = array_len(a1#0)
        let tmp%14#0: uint64 = array_len(a4#0)
        let tmp%15#0: bool = (== tmp%13#0 tmp%14#0)
        (assert tmp%15#0)
        let slot_contents%13#0: Encoded(uint64[]) = load(a1#0)
        let array_item%12#0: Encoded(uint64) = extract_value(slot_contents%13#0, 0u)
        let values%12#0: uint64 = decode_bytes<uint64>(array_item%12#0)
        let slot_contents%14#0: Encoded(uint64[]) = load(a4#0)
        let array_item%13#0: Encoded(uint64) = extract_value(slot_contents%14#0, 0u)
        let values%13#0: uint64 = decode_bytes<uint64>(array_item%13#0)
        let tmp%16#0: bool = (== values%12#0 values%13#0)
        (assert tmp%16#0)
        let slot_contents%15#0: Encoded(uint64[]) = load(a1#0)
        let array_item%14#0: Encoded(uint64) = extract_value(slot_contents%15#0, 1u)
        let values%14#0: uint64 = decode_bytes<uint64>(array_item%14#0)
        let slot_contents%16#0: Encoded(uint64[]) = load(a4#0)
        let array_item%15#0: Encoded(uint64) = extract_value(slot_contents%16#0, 1u)
        let values%15#0: uint64 = decode_bytes<uint64>(array_item%15#0)
        let tmp%17#0: bool = (== values%14#0 values%15#0)
        (assert tmp%17#0)
        let slot_contents%17#0: Encoded(uint64[]) = load(a1#0)
        let array_item%16#0: Encoded(uint64) = extract_value(slot_contents%17#0, 2u)
        let values%16#0: uint64 = decode_bytes<uint64>(array_item%16#0)
        let slot_contents%18#0: Encoded(uint64[]) = load(a4#0)
        let array_item%17#0: Encoded(uint64) = extract_value(slot_contents%18#0, 2u)
        let values%17#0: uint64 = decode_bytes<uint64>(array_item%17#0)
        let tmp%18#0: bool = (== values%16#0 values%17#0)
        (assert tmp%18#0)
        exit 1u