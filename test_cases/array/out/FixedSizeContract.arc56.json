{
    "name": "FixedSizeContract",
    "structs": {},
    "methods": [
        {
            "name": "test_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "x1"
                },
                {
                    "type": "uint64",
                    "name": "y1"
                },
                {
                    "type": "uint64",
                    "name": "x2"
                },
                {
                    "type": "uint64",
                    "name": "y2"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_bool_array",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_arc4_conversion",
            "args": [
                {
                    "type": "uint64",
                    "name": "length"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_array",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "arc4_arr"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y291bnQ="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        74,
                        94,
                        114,
                        135
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        171
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        77,
                        97,
                        117,
                        138
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        750,
                        761,
                        767,
                        774,
                        778
                    ],
                    "errorMessage": "check self.count exists"
                },
                {
                    "pc": [
                        524,
                        622
                    ],
                    "errorMessage": "expected correct length"
                },
                {
                    "pc": [
                        503,
                        601
                    ],
                    "errorMessage": "max array length exceeded"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAIUCYDBWNvdW50BBUffHUAMRhAAAMoI2cxG0EAgYIEBCjXwbgE+P1opwQfAo2xBAlrOlk2GgCOBAA/ACoAFgACI0MxGRREMRhENhoBiAJlFilMULAiQzEZFEQxGEQ2GgEXiAHWKUxQsCJDMRkURDEYRDYaAReIAVkWKUxQsCJDMRkURDEYRDYaATYaAhc2GgM2GgQXiAASFilMULAiQzEZQP+dMRgURCJDigQBI0kqRwYoI2eIAi+IAiyIAilPCxaAEAAAAAAAAAAAAAAAAAAAAABMUE8LFlBPClBPCVCL/RaL/ExQTwkWUE8IFlBPB1BPBlBQi/8Wi/5MUE8FFlBPBBZQTwNQTwJQUCOLCoEDDEEANosJiwpJTgIlCyVYSYEYW0sCIghMSwESREsBV0AITwOBAggWqERMV0gISwFLAgsWqESMCkL/wosJSYwBSVcACIwASSRbjAUjjAYVJQqMAiKMCIsIiwIMQQBgiwlJiwglC0mMA0olWE4CJFhMJFuMB4sApEEAN4sBI1tMiwNbCYwEiweLBQxBAByLBYsHCYsESQtMSQsIkosGCIwGiwgiCIwIQv+tiweLBQlC/+GLA1uLASNbCYwEQv/HiwaMAImKAQEqRwSL/yIIIosGiwUMQQAYiwZJgQIYFBZXBwGLBExQjAQiCIwGQv/giwQVIgpJjACL/xJEI4wBI4wDiwOLAAxBAB+LBIsDVYsBjAJBAAaLASIIjAKLAowBiwMiCIwDQv/ZiwGMAImKAQEqRwSL/yIIIosGiwUMQQARiwZJFosETFCMBCIIjAZC/+eLBBUkCkmMAIv/EkQjjAEjjAOLA4sADEEALYsEiwMkCyRYgAgAAAAAAAAAABOLAYwCQQAGiwEiCIwCiwKMAYsDIgiMA0L/y4sESRUkChZXBgJMUIwAiYoBAYv/VwIASSNMFSQKI4sDiwIMQQAWiwCLA0lOAiQLW4sBCIwBIgiMA0L/4osBjACJIyhlRCIIKExnMRsjKGVEMQAjKGVEIggWIyhlRCMoZUQLFlCJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}