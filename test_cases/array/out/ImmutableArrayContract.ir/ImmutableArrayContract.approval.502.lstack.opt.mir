// Op                                                                                       Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // array/immutable.py:93
        // class ImmutableArrayContract(arc4.ARC4Contract):
        txn NumAppArgs                                                                      tmp%0#1
        bz main___algopy_default_create@31 ; b main_abi_routing@2

    main_abi_routing@2:
        // array/immutable.py:93
        // class ImmutableArrayContract(arc4.ARC4Contract):
        txn OnCompletion                                                                    tmp%2#0
        !                                                                                   tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                   tmp%4#0
        assert
        txna ApplicationArgs 0                                                              tmp%6#0
        method test_uint64_array()void                                                      tmp%6#0,Method(test_uint64_array()void)
        method test_biguint_array()void                                                     tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void)
        method test_bool_array(uint64)void                                                  tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void)
        method test_fixed_size_tuple_array()void                                            tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void)
        method test_fixed_size_named_tuple_array()void                                      tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void)
        method test_dynamic_sized_tuple_array()void                                         tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void)
        method test_dynamic_sized_named_tuple_array()void                                   tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void)
        method test_implicit_conversion_log(uint64[])void                                   tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void)
        method test_implicit_conversion_emit(uint64[])void                                  tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void)
        method test_nested_array(uint64,uint64[][])uint64[]                                 tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[])
        method test_bit_packed_tuples()void                                                 tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void)
        method sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64) tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64))
        method test_uint64_return(uint64)uint64[]                                           tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[])
        method test_bool_return(uint64)bool[]                                               tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[])
        method test_tuple_return(uint64)(uint64,bool,bool)[]                                tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[])
        method test_dynamic_tuple_return(uint64)(uint64,string)[]                           tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[])
        method test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[] tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[])
        method test_concat_with_arc4_tuple((uint64,uint64))uint64[]                         tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[])
        method test_concat_with_native_tuple((uint64,uint64))uint64[]                       tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[])
        method test_dynamic_concat_with_arc4_tuple((string,string))string[]                 tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[])
        method test_dynamic_concat_with_native_tuple((string,string))string[]               tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[]),Method(test_dynamic_concat_with_native_tuple((string,string))string[])
        method test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[] tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[]),Method(test_dynamic_concat_with_native_tuple((string,string))string[]),Method(test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[])
        method test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]                      tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[]),Method(test_dynamic_concat_with_native_tuple((string,string))string[]),Method(test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]),Method(test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[])
        method test_imm_fixed_arr()(uint64,uint64)[3]                                       tmp%6#0,Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[]),Method(test_dynamic_concat_with_native_tuple((string,string))string[]),Method(test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]),Method(test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]),Method(test_imm_fixed_arr()(uint64,uint64)[3])
        l-load tmp%6#0 24                                                                   Method(test_uint64_array()void),Method(test_biguint_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_implicit_conversion_log(uint64[])void),Method(test_implicit_conversion_emit(uint64[])void),Method(test_nested_array(uint64,uint64[][])uint64[]),Method(test_bit_packed_tuples()void),Method(sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)),Method(test_uint64_return(uint64)uint64[]),Method(test_bool_return(uint64)bool[]),Method(test_tuple_return(uint64)(uint64,bool,bool)[]),Method(test_dynamic_tuple_return(uint64)(uint64,string)[]),Method(test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]),Method(test_concat_with_arc4_tuple((uint64,uint64))uint64[]),Method(test_concat_with_native_tuple((uint64,uint64))uint64[]),Method(test_dynamic_concat_with_arc4_tuple((string,string))string[]),Method(test_dynamic_concat_with_native_tuple((string,string))string[]),Method(test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]),Method(test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]),Method(test_imm_fixed_arr()(uint64,uint64)[3]),tmp%6#0
        match main_test_uint64_array_route@4 main_test_biguint_array_route@5 main_test_bool_array_route@6 main_test_fixed_size_tuple_array_route@7 main_test_fixed_size_named_tuple_array_route@8 main_test_dynamic_sized_tuple_array_route@9 main_test_dynamic_sized_named_tuple_array_route@10 main_test_implicit_conversion_log_route@11 main_test_implicit_conversion_emit_route@12 main_test_nested_array_route@13 main_test_bit_packed_tuples_route@14 main_sum_uints_and_lengths_and_trues_route@15 main_test_uint64_return_route@16 main_test_bool_return_route@17 main_test_tuple_return_route@18 main_test_dynamic_tuple_return_route@19 main_test_convert_to_array_and_back_route@20 main_test_concat_with_arc4_tuple_route@21 main_test_concat_with_native_tuple_route@22 main_test_dynamic_concat_with_arc4_tuple_route@23 main_test_dynamic_concat_with_native_tuple_route@24 main_test_concat_immutable_dynamic_route@25 main_test_immutable_arc4_route@26 main_test_imm_fixed_arr_route@27 ; b main_after_if_else@30 

    main_test_uint64_array_route@4:
        // array/immutable.py:94
        // @arc4.abimethod()
        callsub test_uint64_array
        b main_after_if_else@30

    main_test_biguint_array_route@5:
        // array/immutable.py:130
        // @arc4.abimethod()
        callsub test_biguint_array
        b main_after_if_else@30

    main_test_bool_array_route@6:
        // array/immutable.py:155
        // @arc4.abimethod()
        callsub test_bool_array
        b main_after_if_else@30

    main_test_fixed_size_tuple_array_route@7:
        // array/immutable.py:179
        // @arc4.abimethod()
        callsub test_fixed_size_tuple_array
        b main_after_if_else@30

    main_test_fixed_size_named_tuple_array_route@8:
        // array/immutable.py:197
        // @arc4.abimethod()
        callsub test_fixed_size_named_tuple_array
        b main_after_if_else@30

    main_test_dynamic_sized_tuple_array_route@9:
        // array/immutable.py:212
        // @arc4.abimethod()
        callsub test_dynamic_sized_tuple_array
        b main_after_if_else@30

    main_test_dynamic_sized_named_tuple_array_route@10:
        // array/immutable.py:231
        // @arc4.abimethod()
        callsub test_dynamic_sized_named_tuple_array
        b main_after_if_else@30

    main_test_implicit_conversion_log_route@11:
        // array/immutable.py:250
        // @arc4.abimethod()
        callsub test_implicit_conversion_log
        b main_after_if_else@30

    main_test_implicit_conversion_emit_route@12:
        // array/immutable.py:254
        // @arc4.abimethod()
        callsub test_implicit_conversion_emit
        b main_after_if_else@30

    main_test_nested_array_route@13:
        // array/immutable.py:258
        // @arc4.abimethod()
        callsub test_nested_array
        b main_after_if_else@30

    main_test_bit_packed_tuples_route@14:
        // array/immutable.py:276
        // @arc4.abimethod()
        callsub test_bit_packed_tuples
        b main_after_if_else@30

    main_sum_uints_and_lengths_and_trues_route@15:
        // array/immutable.py:341
        // @arc4.abimethod()
        callsub sum_uints_and_lengths_and_trues
        b main_after_if_else@30

    main_test_uint64_return_route@16:
        // array/immutable.py:368
        // @arc4.abimethod()
        callsub test_uint64_return
        b main_after_if_else@30

    main_test_bool_return_route@17:
        // array/immutable.py:375
        // @arc4.abimethod()
        callsub test_bool_return
        b main_after_if_else@30

    main_test_tuple_return_route@18:
        // array/immutable.py:382
        // @arc4.abimethod()
        callsub test_tuple_return
        b main_after_if_else@30

    main_test_dynamic_tuple_return_route@19:
        // array/immutable.py:389
        // @arc4.abimethod()
        callsub test_dynamic_tuple_return
        b main_after_if_else@30

    main_test_convert_to_array_and_back_route@20:
        // array/immutable.py:396
        // @arc4.abimethod()
        callsub test_convert_to_array_and_back
        b main_after_if_else@30

    main_test_concat_with_arc4_tuple_route@21:
        // array/immutable.py:406
        // @arc4.abimethod()
        callsub test_concat_with_arc4_tuple
        b main_after_if_else@30

    main_test_concat_with_native_tuple_route@22:
        // array/immutable.py:414
        // @arc4.abimethod()
        callsub test_concat_with_native_tuple
        b main_after_if_else@30

    main_test_dynamic_concat_with_arc4_tuple_route@23:
        // array/immutable.py:422
        // @arc4.abimethod()
        callsub test_dynamic_concat_with_arc4_tuple
        b main_after_if_else@30

    main_test_dynamic_concat_with_native_tuple_route@24:
        // array/immutable.py:430
        // @arc4.abimethod()
        callsub test_dynamic_concat_with_native_tuple
        b main_after_if_else@30

    main_test_concat_immutable_dynamic_route@25:
        // array/immutable.py:438
        // @arc4.abimethod()
        callsub test_concat_immutable_dynamic
        b main_after_if_else@30

    main_test_immutable_arc4_route@26:
        // array/immutable.py:444
        // @arc4.abimethod()
        callsub test_immutable_arc4
        b main_after_if_else@30

    main_test_imm_fixed_arr_route@27:
        // array/immutable.py:450
        // @arc4.abimethod()
        callsub test_imm_fixed_arr
        b main_after_if_else@30

    main_after_if_else@30:
        // array/immutable.py:93
        // class ImmutableArrayContract(arc4.ARC4Contract):
        err

    main___algopy_default_create@31:
        txn OnCompletion                                                                    tmp%7#0
        !                                                                                   tmp%8#0
        txn ApplicationID                                                                   tmp%8#0,tmp%9#0
        !                                                                                   tmp%8#0,tmp%10#0
        l-load tmp%8#0 1                                                                    tmp%10#0,tmp%8#0
        l-load tmp%10#0 1                                                                   tmp%8#0,tmp%10#0
        &&                                                                                  tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                               1
        return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
subroutine dynamic_array_pop_fixed_size:
    dynamic_array_pop_fixed_size_block@0:                                                   (𝕡) array#0,fixed_byte_size#0 |
        p-load array#0                                                                      (𝕡) array#0,fixed_byte_size#0 | array#0 (copy)
        int 0                                                                               (𝕡) array#0,fixed_byte_size#0 | array#0 (copy),0
        extract_uint16                                                                      (𝕡) array#0,fixed_byte_size#0 | array_length#0
        int 1                                                                               (𝕡) array#0,fixed_byte_size#0 | array_length#0,1
        -                                                                                   (𝕡) array#0,fixed_byte_size#0 | length_minus_1#0
        itob                                                                                (𝕡) array#0,fixed_byte_size#0 | tmp%2#0
        extract 6 0                                                                         (𝕡) array#0,fixed_byte_size#0 | tmp%3#0
        p-load array#0                                                                      (𝕡) array#0,fixed_byte_size#0 | tmp%3#0,array#0 (copy)
        l-load tmp%3#0 1                                                                    (𝕡) array#0,fixed_byte_size#0 | array#0 (copy),tmp%3#0
        replace2 0                                                                          (𝕡) array#0,fixed_byte_size#0 | result#0
        l-load-copy result#0 0                                                              (𝕡) array#0,fixed_byte_size#0 | result#0,result#0 (copy)
        len                                                                                 (𝕡) array#0,fixed_byte_size#0 | result#0,tmp%5#0
        p-load fixed_byte_size#0                                                            (𝕡) array#0,fixed_byte_size#0 | result#0,tmp%5#0,fixed_byte_size#0 (copy)
        -                                                                                   (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0
        l-load-copy result#0 1                                                              (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy)
        l-load-copy item_location#0 1                                                       (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy),item_location#0 (copy)
        p-load fixed_byte_size#0                                                            (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy),item_location#0 (copy),fixed_byte_size#0 (copy)
        extract3                                                                            (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,popped#0
        l-load result#0 2                                                                   (𝕡) array#0,fixed_byte_size#0 | item_location#0,popped#0,result#0
        int 0                                                                               (𝕡) array#0,fixed_byte_size#0 | item_location#0,popped#0,result#0,0
        l-load item_location#0 3                                                            (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0,0,item_location#0
        substring3                                                                          (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0
        l-load popped#0 1                                                                   (𝕡) array#0,fixed_byte_size#0 | result#0,popped#0
        l-load result#0 1                                                                   (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0
        retsub                                                                              popped#0,result#0


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
subroutine dynamic_array_pop_dynamic_element:
    dynamic_array_pop_dynamic_element_block@0:                                              (𝕡) array#0 |
        p-load array#0                                                                      (𝕡) array#0 | array#0 (copy)
        int 0                                                                               (𝕡) array#0 | array#0 (copy),0
        extract_uint16                                                                      (𝕡) array#0 | array_length#0
        int 1                                                                               (𝕡) array#0 | array_length#0,1
        -                                                                                   (𝕡) array#0 | length_minus_1#0
        l-store-copy length_minus_1#0 0                                                     (𝕡) array#0 | length_minus_1#0,length_minus_1#0 (copy)
        v-store length_minus_1#0                                                            (𝕡) array#0 | length_minus_1#0
        l-load length_minus_1#0 0                                                           (𝕡) array#0 | length_minus_1#0
        int 2                                                                               (𝕡) array#0 | length_minus_1#0,2
        *                                                                                   (𝕡) array#0 | popped_header_offset#0
        l-store-copy popped_header_offset#0 0                                               (𝕡) array#0 | popped_header_offset#0,popped_header_offset#0 (copy)
        v-store popped_header_offset#0                                                      (𝕡) array#0 | popped_header_offset#0
        p-load array#0                                                                      (𝕡) array#0 | popped_header_offset#0,array#0 (copy)
        extract 2 0                                                                         (𝕡) array#0 | popped_header_offset#0,head_and_tail#0
        l-store-copy head_and_tail#0 0                                                      (𝕡) array#0 | popped_header_offset#0,head_and_tail#0,head_and_tail#0 (copy)
        v-store head_and_tail#0                                                             (𝕡) array#0 | popped_header_offset#0,head_and_tail#0
        l-load-copy head_and_tail#0 0                                                       (𝕡) array#0 | popped_header_offset#0,head_and_tail#0,head_and_tail#0 (copy)
        l-load popped_header_offset#0 2                                                     (𝕡) array#0 | head_and_tail#0,head_and_tail#0 (copy),popped_header_offset#0
        extract_uint16                                                                      (𝕡) array#0 | head_and_tail#0,popped_offset#0
        l-store-copy popped_offset#0 1                                                      (𝕡) array#0 | popped_offset#0,head_and_tail#0,popped_offset#0 (copy)
        v-store popped_offset#0                                                             (𝕡) array#0 | popped_offset#0,head_and_tail#0
        l-load-copy head_and_tail#0 0                                                       (𝕡) array#0 | popped_offset#0,head_and_tail#0,head_and_tail#0 (copy)
        len                                                                                 (𝕡) array#0 | popped_offset#0,head_and_tail#0,tmp%5#0
        l-load head_and_tail#0 1                                                            (𝕡) array#0 | popped_offset#0,tmp%5#0,head_and_tail#0
        l-load popped_offset#0 2                                                            (𝕡) array#0 | tmp%5#0,head_and_tail#0,popped_offset#0
        l-load tmp%5#0 2                                                                    (𝕡) array#0 | head_and_tail#0,popped_offset#0,tmp%5#0
        substring3                                                                          (𝕡) array#0 | popped#0
        v-store popped#0                                                                    (𝕡) array#0 |
        byte 0x                                                                             (𝕡) array#0 | 0x
        v-store new_head#0                                                                  (𝕡) array#0 |
        int 0                                                                               (𝕡) array#0 | value_internal%0#0
        v-store head_offset#0                                                               (𝕡) array#0 |
        b dynamic_array_pop_dynamic_element_for_header@1                                    (𝕡) array#0 |

    dynamic_array_pop_dynamic_element_for_header@1:                                         (𝕡) array#0 |
        v-load head_offset#0                                                                (𝕡) array#0 | head_offset#0
        v-load popped_header_offset#0                                                       (𝕡) array#0 | head_offset#0,popped_header_offset#0
        <                                                                                   (𝕡) array#0 | continue_looping%0#0
        bz dynamic_array_pop_dynamic_element_after_for@4 ; b dynamic_array_pop_dynamic_element_for_body@2 (𝕡) array#0 | 

    dynamic_array_pop_dynamic_element_for_body@2:                                           (𝕡) array#0 |
        v-load head_and_tail#0                                                              (𝕡) array#0 | head_and_tail#0
        v-load head_offset#0                                                                (𝕡) array#0 | head_and_tail#0,head_offset#0
        l-store-copy head_offset#0 1                                                        (𝕡) array#0 | head_offset#0,head_and_tail#0,head_offset#0 (copy)
        extract_uint16                                                                      (𝕡) array#0 | head_offset#0,item_offset#0
        int 2                                                                               (𝕡) array#0 | head_offset#0,item_offset#0,2
        -                                                                                   (𝕡) array#0 | head_offset#0,item_offset#0
        itob                                                                                (𝕡) array#0 | head_offset#0,tmp%10#0
        extract 6 2                                                                         (𝕡) array#0 | head_offset#0,tmp%11#0
        v-load new_head#0                                                                   (𝕡) array#0 | head_offset#0,tmp%11#0,new_head#0
        l-load tmp%11#0 1                                                                   (𝕡) array#0 | head_offset#0,new_head#0,tmp%11#0
        concat                                                                              (𝕡) array#0 | head_offset#0,new_head#0
        v-store new_head#0                                                                  (𝕡) array#0 | head_offset#0
        l-load head_offset#0 0                                                              (𝕡) array#0 | head_offset#0
        int 2                                                                               (𝕡) array#0 | head_offset#0,2
        +                                                                                   (𝕡) array#0 | value_internal%0#0
        v-store head_offset#0                                                               (𝕡) array#0 |
        b dynamic_array_pop_dynamic_element_for_header@1                                    (𝕡) array#0 |

    dynamic_array_pop_dynamic_element_after_for@4:                                          (𝕡) array#0 |
        v-load length_minus_1#0                                                             (𝕡) array#0 | length_minus_1#0
        itob                                                                                (𝕡) array#0 | tmp%13#0
        extract 6 2                                                                         (𝕡) array#0 | tmp%14#0
        v-load new_head#0                                                                   (𝕡) array#0 | tmp%14#0,new_head#0
        concat                                                                              (𝕡) array#0 | tmp%15#0
        v-load popped_header_offset#0                                                       (𝕡) array#0 | tmp%15#0,popped_header_offset#0
        int 2                                                                               (𝕡) array#0 | tmp%15#0,popped_header_offset#0,2
        +                                                                                   (𝕡) array#0 | tmp%15#0,tmp%16#0
        v-load head_and_tail#0                                                              (𝕡) array#0 | tmp%15#0,tmp%16#0,head_and_tail#0
        l-load tmp%16#0 1                                                                   (𝕡) array#0 | tmp%15#0,head_and_tail#0,tmp%16#0
        v-load popped_offset#0                                                              (𝕡) array#0 | tmp%15#0,head_and_tail#0,tmp%16#0,popped_offset#0
        substring3                                                                          (𝕡) array#0 | tmp%15#0,tmp%17#0
        l-load tmp%15#0 1                                                                   (𝕡) array#0 | tmp%17#0,tmp%15#0
        l-load tmp%17#0 1                                                                   (𝕡) array#0 | tmp%15#0,tmp%17#0
        concat                                                                              (𝕡) array#0 | updated#0
        v-load popped#0                                                                     (𝕡) array#0 | updated#0,popped#0
        l-load updated#0 1                                                                  (𝕡) array#0 | popped#0,updated#0
        retsub                                                                              popped#0,updated#0


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
subroutine dynamic_array_concat_bits:
    dynamic_array_concat_bits_block@0:                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy)
        int 0                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy),0
        extract_uint16                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        l-store-copy array_length#0 0                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
        v-store array_length#0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        l-load-copy array_length#0 0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
        p-load new_items_count#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy),new_items_count#0 (copy)
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0
        l-load-copy new_array_length#0 0                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length#0 (copy)
        itob                                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,tmp%2#0
        extract 6 0                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0,array#0 (copy)
        l-load new_array_length_b#0 1                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,array#0 (copy),new_array_length_b#0
        replace2 0                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,result#0
        v-store result#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0
        l-load array_length#0 1                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,array_length#0
        int 7                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,array_length#0,7
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,tmp%5#0
        int 8                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,tmp%5#0,8
        /                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,current_bytes#0
        l-store-copy current_bytes#0 0                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,current_bytes#0,current_bytes#0 (copy)
        v-store current_bytes#0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_array_length#0,current_bytes#0
        l-load new_array_length#0 1                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,new_array_length#0
        int 7                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,new_array_length#0,7
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,tmp%7#0
        int 8                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,tmp%7#0,8
        /                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,required_bytes#0
        l-store-copy required_bytes#0 0                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,required_bytes#0,required_bytes#0 (copy)
        v-store required_bytes#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,required_bytes#0
        l-load current_bytes#0 1                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0,current_bytes#0
        l-load required_bytes#0 1                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | current_bytes#0,required_bytes#0
        <                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%9#0
        bz dynamic_array_concat_bits_after_if_else@2 ; b dynamic_array_concat_bits_if_body@1 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

    dynamic_array_concat_bits_if_body@1:                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load required_bytes#0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0
        v-load current_bytes#0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0,current_bytes#0
        -                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%10#0
        bzero                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%11#0
        v-load result#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%11#0,result#0
        l-load tmp%11#0 1                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,tmp%11#0
        concat                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
        v-store result#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_after_if_else@2                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_after_if_else@2:                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        int 0                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 0
        v-store read_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load array_length#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
        int 16                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,16
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        l-store-copy write_offset#0 0                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_offset#0 (copy)
        v-store write_offset#0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        l-load write_offset#0 0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        p-load new_items_count#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,new_items_count#0 (copy)
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_end#0
        v-store write_end#0                                                                 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_while_top@3                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_while_top@3:                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load write_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
        v-load write_end#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_end#0
        <                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%15#0
        bz dynamic_array_concat_bits_after_while@5 ; b dynamic_array_concat_bits_while_body@4 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

    dynamic_array_concat_bits_while_body@4:                                                 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        p-load new_items_bytes#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy)
        v-load read_offset#0                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy),read_offset#0
        l-store-copy read_offset#0 1                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,new_items_bytes#0 (copy),read_offset#0 (copy)
        getbit                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0
        v-load result#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0,result#0
        v-load write_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%16#0,result#0,write_offset#0
        l-store-copy write_offset#0 2                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,tmp%16#0,result#0,write_offset#0 (copy)
        l-load tmp%16#0 2                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0,write_offset#0 (copy),tmp%16#0
        setbit                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0
        v-store result#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        l-load write_offset#0 0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        int 1                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,1
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
        v-store write_offset#0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        l-load read_offset#0 0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        p-load read_step#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,read_step#0 (copy)
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
        v-store read_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        b dynamic_array_concat_bits_while_top@3                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

    dynamic_array_concat_bits_after_while@5:                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
        v-load result#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
        retsub                                                                              result#0


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
subroutine dynamic_array_concat_byte_length_head:
    dynamic_array_concat_byte_length_head_block@0:                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array#0 (copy)
        int 0                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array#0 (copy),0
        extract_uint16                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array_length#0
        l-load-copy array_length#0 0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array_length#0,array_length#0 (copy)
        p-load new_items_count#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array_length#0,array_length#0 (copy),new_items_count#0 (copy)
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | array_length#0,new_length#0
        l-load array_length#0 1                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,array_length#0
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,array_length#0,2
        *                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%2#0
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%2#0,2
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0
        l-load-copy new_length#0 1                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,new_length#0 (copy)
        itob                                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%4#0
        extract 6 2                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%5#0
        v-store tmp%5#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,array#0 (copy)
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,array#0 (copy),2
        l-load-copy header_end#0 2                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,array#0 (copy),2,header_end#0 (copy)
        substring3                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0
        p-load new_items_count#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0,new_items_count#0 (copy)
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0,new_items_count#0 (copy),2
        *                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0,tmp%7#0
        bzero                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0,tmp%8#0
        l-load tmp%6#0 1                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%8#0,tmp%6#0
        l-load tmp%8#0 1                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%6#0,tmp%8#0
        concat                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%9#0
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%9#0,array#0 (copy)
        len                                                                                 (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%9#0,tmp%10#0
        p-load array#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,header_end#0,tmp%9#0,tmp%10#0,array#0 (copy)
        l-load header_end#0 3                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%9#0,tmp%10#0,array#0 (copy),header_end#0
        l-load tmp%10#0 2                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%9#0,array#0 (copy),header_end#0,tmp%10#0
        substring3                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%9#0,tmp%11#0
        l-load tmp%9#0 1                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%11#0,tmp%9#0
        l-load tmp%11#0 1                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%9#0,tmp%11#0
        concat                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%12#0
        p-load new_items_bytes#0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,tmp%12#0,new_items_bytes#0 (copy)
        concat                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,array_head_and_tail#0
        v-store array_head_and_tail#0                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0
        l-load new_length#0 0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | new_length#0,2
        *                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#0
        l-store-copy tail_offset#0 0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#0,tail_offset#0 (copy)
        v-store tail_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#0
        int 0                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#0,tmp%1#0
        l-store tmp%1#0 1                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%1#0,tail_offset#0
        l-load tail_offset#0 0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%1#0,tail_offset#0
        v-store tail_offset#1                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%1#0
        l-load tmp%1#0 0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%1#0
        v-store head_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        b dynamic_array_concat_byte_length_head_for_header@2                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 |

    dynamic_array_concat_byte_length_head_for_header@2:                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        v-load head_offset#0                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0
        v-load tail_offset#0                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#0
        <                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | continue_looping%0#0
        bz dynamic_array_concat_byte_length_head_after_for@4 ; b dynamic_array_concat_byte_length_head_for_body@3 (𝕡) array#0,new_items_bytes#0,new_items_count#0 | 

    dynamic_array_concat_byte_length_head_for_body@3:                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        v-load tail_offset#1                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1
        l-store-copy tail_offset#1 0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1,tail_offset#1 (copy)
        itob                                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1,tmp%6#0
        extract 6 2                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1,tail_offset_bytes#0
        v-load array_head_and_tail#0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1,tail_offset_bytes#0,array_head_and_tail#0
        v-load head_offset#0                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tail_offset#1,tail_offset_bytes#0,array_head_and_tail#0,head_offset#0
        l-store-copy head_offset#0 3                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,tail_offset_bytes#0,array_head_and_tail#0,head_offset#0 (copy)
        l-load tail_offset_bytes#0 2                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0,head_offset#0 (copy),tail_offset_bytes#0
        replace3                                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0
        l-store-copy array_head_and_tail#0 0                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0,array_head_and_tail#0 (copy)
        v-store array_head_and_tail#0                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0
        l-load array_head_and_tail#0 0                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0
        l-load-copy tail_offset#1 1                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,array_head_and_tail#0,tail_offset#1 (copy)
        extract_uint16                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,tmp%9#1
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,tmp%9#1,2
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,tmp%10#0
        l-load tail_offset#1 1                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tmp%10#0,tail_offset#1
        l-load tmp%10#0 1                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1,tmp%10#0
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,tail_offset#1
        v-store tail_offset#1                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0
        l-load head_offset#0 0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0
        int 2                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 | head_offset#0,2
        +                                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0 | value_internal%0#2
        v-store head_offset#0                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        b dynamic_array_concat_byte_length_head_for_header@2                                (𝕡) array#0,new_items_bytes#0,new_items_count#0 |

    dynamic_array_concat_byte_length_head_after_for@4:                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 |
        v-load tmp%5#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%5#0
        v-load array_head_and_tail#0                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%5#0,array_head_and_tail#0
        concat                                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0 | tmp%15#0
        retsub                                                                              tmp%15#0


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
subroutine dynamic_array_concat_dynamic_element:
    dynamic_array_concat_dynamic_element_block@0:                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        byte 0x                                                                             (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 0x
        v-store new_head#0                                                                  (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load new_items_count#0                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_items_count#0 (copy)
        int 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_items_count#0 (copy),2
        *                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | item_offset_adjustment#0
        v-store item_offset_adjustment#0                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load array_items_count#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy)
        int 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy),2
        *                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%1#0
        v-store tmp%1#0                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        int 0                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | value_internal%0#0
        v-store head_offset#0                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        b dynamic_array_concat_dynamic_element_for_header@1                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

    dynamic_array_concat_dynamic_element_for_header@1:                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        v-load head_offset#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        v-load tmp%1#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%1#0
        <                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | continue_looping%0#0
        bz dynamic_array_concat_dynamic_element_after_for@4 ; b dynamic_array_concat_dynamic_element_for_body@2 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 

    dynamic_array_concat_dynamic_element_for_body@2:                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load array_head_and_tail#0                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy)
        v-load head_offset#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy),head_offset#0
        l-store-copy head_offset#0 1                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,array_head_and_tail#0 (copy),head_offset#0 (copy)
        extract_uint16                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0
        v-load item_offset_adjustment#0                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0,item_offset_adjustment#0
        l-load item_offset#0 1                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset_adjustment#0,item_offset#0
        +                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%3#0
        itob                                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%4#0
        extract 6 2                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%5#0
        v-load new_head#0                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%5#0,new_head#0
        l-load tmp%5#0 1                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0,tmp%5#0
        concat                                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0
        v-store new_head#0                                                                  (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        l-load head_offset#0 0                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        int 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,2
        +                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | value_internal%0#0
        v-store head_offset#0                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        b dynamic_array_concat_dynamic_element_for_header@1                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

    dynamic_array_concat_dynamic_element_after_for@4:                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load array_head_and_tail#0                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy)
        len                                                                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_and_tail_length#0
        v-store head_and_tail_length#0                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        int 0                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | value_internal%1#0
        v-store head_offset#0                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        b dynamic_array_concat_dynamic_element_for_header@5                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

    dynamic_array_concat_dynamic_element_for_header@5:                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        v-load head_offset#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        v-load item_offset_adjustment#0                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset_adjustment#0
        <                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | continue_looping%1#0
        bz dynamic_array_concat_dynamic_element_after_for@8 ; b dynamic_array_concat_dynamic_element_for_body@6 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 

    dynamic_array_concat_dynamic_element_for_body@6:                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load new_head_and_tail#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_head_and_tail#0 (copy)
        v-load head_offset#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_head_and_tail#0 (copy),head_offset#0
        l-store-copy head_offset#0 1                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head_and_tail#0 (copy),head_offset#0 (copy)
        extract_uint16                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0
        v-load head_and_tail_length#0                                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0,head_and_tail_length#0
        l-load item_offset#0 1                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,head_and_tail_length#0,item_offset#0
        +                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%10#0
        itob                                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%11#0
        extract 6 2                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%12#0
        v-load new_head#0                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%12#0,new_head#0
        l-load tmp%12#0 1                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0,tmp%12#0
        concat                                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0
        v-store new_head#0                                                                  (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        l-load head_offset#0 0                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
        int 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,2
        +                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | value_internal%1#0
        v-store head_offset#0                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        b dynamic_array_concat_dynamic_element_for_header@5                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

    dynamic_array_concat_dynamic_element_after_for@8:                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
        p-load array_items_count#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy)
        p-load new_items_count#0                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy),new_items_count#0 (copy)
        +                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%14#0
        itob                                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0
        extract 6 2                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%16#0
        v-load new_head#0                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%16#0,new_head#0
        concat                                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0
        p-load array_head_and_tail#0                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0,array_head_and_tail#0 (copy)
        v-load tmp%1#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0,array_head_and_tail#0 (copy),tmp%1#0
        v-load head_and_tail_length#0                                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0,array_head_and_tail#0 (copy),tmp%1#0,head_and_tail_length#0
        substring3                                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0,tmp%19#0
        l-load tmp%17#0 1                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%19#0,tmp%17#0
        l-load tmp%19#0 1                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%17#0,tmp%19#0
        concat                                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0
        p-load new_head_and_tail#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,new_head_and_tail#0 (copy)
        len                                                                                 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,tmp%22#0
        p-load new_head_and_tail#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,tmp%22#0,new_head_and_tail#0 (copy)
        v-load item_offset_adjustment#0                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,tmp%22#0,new_head_and_tail#0 (copy),item_offset_adjustment#0
        l-load tmp%22#0 2                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,new_head_and_tail#0 (copy),item_offset_adjustment#0,tmp%22#0
        substring3                                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,tmp%23#0
        l-load tmp%20#0 1                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%23#0,tmp%20#0
        l-load tmp%23#0 1                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%20#0,tmp%23#0
        concat                                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%24#0
        retsub                                                                              tmp%24#0


// test_cases.array.immutable.sum_imm_fixed(arr: bytes) -> uint64:
subroutine sum_imm_fixed:
    sum_imm_fixed_block@0:                                                                  (𝕡) arr#0 |
        // array/immutable.py:481
        // total = UInt64(0)
        int 0                                                                               (𝕡) arr#0 | 0
        v-store total#0                                                                     (𝕡) arr#0 |
        int 0                                                                               (𝕡) arr#0 | 0
        v-store item_index_internal%0#0                                                     (𝕡) arr#0 |
        b sum_imm_fixed_for_header@1                                                        (𝕡) arr#0 |

    sum_imm_fixed_for_header@1:                                                             (𝕡) arr#0 |
        // array/immutable.py:482
        // for item in arr:
        v-load item_index_internal%0#0                                                      (𝕡) arr#0 | item_index_internal%0#0
        int 3                                                                               (𝕡) arr#0 | item_index_internal%0#0,3
        <                                                                                   (𝕡) arr#0 | continue_looping%0#0
        bz sum_imm_fixed_after_for@4 ; b sum_imm_fixed_for_body@2                           (𝕡) arr#0 |

    sum_imm_fixed_for_body@2:                                                               (𝕡) arr#0 |
        // array/immutable.py:482-483
        // for item in arr:
        //     total += item.foo
        v-load item_index_internal%0#0                                                      (𝕡) arr#0 | item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                              (𝕡) arr#0 | item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                              (𝕡) arr#0 | item_index_internal%0#0,item_index_internal%0#0 (copy),16
        *                                                                                   (𝕡) arr#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0
        p-load arr#0                                                                        (𝕡) arr#0 | item_index_internal%0#0,aggregate%bytes_offset%0#0,arr#0 (copy)
        l-load aggregate%bytes_offset%0#0 1                                                 (𝕡) arr#0 | item_index_internal%0#0,arr#0 (copy),aggregate%bytes_offset%0#0
        int 16                                                                              (𝕡) arr#0 | item_index_internal%0#0,arr#0 (copy),aggregate%bytes_offset%0#0,16
        extract3 // on error: index access is out of bounds                                 (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0
        // array/immutable.py:483
        // total += item.foo
        l-load-copy aggregate%encoded_element%0#0 0                                         (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        // array/immutable.py:482-483
        // for item in arr:
        //     total += item.foo
        int 0                                                                               (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        // array/immutable.py:483
        // total += item.foo
        extract_uint64                                                                      (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,values%0#0
        v-load total#0                                                                      (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,values%0#0,total#0
        l-load values%0#0 1                                                                 (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,total#0,values%0#0
        +                                                                                   (𝕡) arr#0 | item_index_internal%0#0,aggregate%encoded_element%0#0,total#0
        // array/immutable.py:484
        // total += item.bar
        l-load aggregate%encoded_element%0#0 1                                              (𝕡) arr#0 | item_index_internal%0#0,total#0,aggregate%encoded_element%0#0
        int 8                                                                               (𝕡) arr#0 | item_index_internal%0#0,total#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                      (𝕡) arr#0 | item_index_internal%0#0,total#0,values%1#0
        l-load total#0 1                                                                    (𝕡) arr#0 | item_index_internal%0#0,values%1#0,total#0
        l-load values%1#0 1                                                                 (𝕡) arr#0 | item_index_internal%0#0,total#0,values%1#0
        +                                                                                   (𝕡) arr#0 | item_index_internal%0#0,total#0
        v-store total#0                                                                     (𝕡) arr#0 | item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                    (𝕡) arr#0 | item_index_internal%0#0
        int 1                                                                               (𝕡) arr#0 | item_index_internal%0#0,1
        +                                                                                   (𝕡) arr#0 | item_index_internal%0#0
        v-store item_index_internal%0#0                                                     (𝕡) arr#0 |
        b sum_imm_fixed_for_header@1                                                        (𝕡) arr#0 |

    sum_imm_fixed_after_for@4:                                                              (𝕡) arr#0 |
        // array/immutable.py:485
        // return total
        v-load total#0                                                                      (𝕡) arr#0 | total#0
        retsub                                                                              total#0


// test_cases.array.immutable.times(n: uint64) -> bytes:
subroutine times:
    times_block@0:                                                                          (𝕡) n#0 |
        // array/immutable.py:490
        // result = String()
        byte ""                                                                             (𝕡) n#0 | ""
        v-store result#0                                                                    (𝕡) n#0 |
        // array/immutable.py:491
        // for _i in urange(n):
        int 0                                                                               (𝕡) n#0 | value_internal%0#0
        v-store _i#0                                                                        (𝕡) n#0 |
        b times_for_header@1                                                                (𝕡) n#0 |

    times_for_header@1:                                                                     (𝕡) n#0 |
        // array/immutable.py:491
        // for _i in urange(n):
        v-load _i#0                                                                         (𝕡) n#0 | _i#0
        p-load n#0                                                                          (𝕡) n#0 | _i#0,n#0 (copy)
        <                                                                                   (𝕡) n#0 | continue_looping%0#0
        bz times_after_for@4 ; b times_for_body@2                                           (𝕡) n#0 |

    times_for_body@2:                                                                       (𝕡) n#0 |
        // array/immutable.py:492
        // result += String(" ")
        v-load result#0                                                                     (𝕡) n#0 | result#0
        byte " "                                                                            (𝕡) n#0 | result#0," "
        concat                                                                              (𝕡) n#0 | result#0
        v-store result#0                                                                    (𝕡) n#0 |
        // array/immutable.py:491
        // for _i in urange(n):
        v-load _i#0                                                                         (𝕡) n#0 | _i#0
        int 1                                                                               (𝕡) n#0 | _i#0,1
        +                                                                                   (𝕡) n#0 | value_internal%0#0
        v-store _i#0                                                                        (𝕡) n#0 |
        b times_for_header@1                                                                (𝕡) n#0 |

    times_after_for@4:                                                                      (𝕡) n#0 |
        // array/immutable.py:493
        // return result
        v-load result#0                                                                     (𝕡) n#0 | result#0
        retsub                                                                              result#0


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
subroutine add_x:
    add_x_block@0:                                                                          (𝕡) arr#0,x#0 |
        // array/immutable.py:498
        // for i in urange(x):
        int 0                                                                               (𝕡) arr#0,x#0 | value_internal%0#0
        v-store i#0                                                                         (𝕡) arr#0,x#0 |
        b add_x_for_header@1                                                                (𝕡) arr#0,x#0 |

    add_x_for_header@1:                                                                     (𝕡) arr#0,x#0 |
        // array/immutable.py:498
        // for i in urange(x):
        v-load i#0                                                                          (𝕡) arr#0,x#0 | i#0
        p-load x#0                                                                          (𝕡) arr#0,x#0 | i#0,x#0 (copy)
        <                                                                                   (𝕡) arr#0,x#0 | continue_looping%0#0
        bz add_x_after_for@4 ; b add_x_for_body@2                                           (𝕡) arr#0,x#0 |

    add_x_for_body@2:                                                                       (𝕡) arr#0,x#0 |
        // array/immutable.py:499
        // arr = arr.append(i)
        v-load i#0                                                                          (𝕡) arr#0,x#0 | i#0
        l-store-copy i#0 0                                                                  (𝕡) arr#0,x#0 | i#0,i#0 (copy)
        itob                                                                                (𝕡) arr#0,x#0 | i#0,aggregate%val_as_bytes%0#0
        p-load arr#0                                                                        (𝕡) arr#0,x#0 | i#0,aggregate%val_as_bytes%0#0,arr#0 (copy)
        l-load aggregate%val_as_bytes%0#0 1                                                 (𝕡) arr#0,x#0 | i#0,arr#0 (copy),aggregate%val_as_bytes%0#0
        concat // on error: max array length exceeded                                       (𝕡) arr#0,x#0 | i#0,concat%0#0
        p-load arr#0                                                                        (𝕡) arr#0,x#0 | i#0,concat%0#0,arr#0 (copy)
        int 0                                                                               (𝕡) arr#0,x#0 | i#0,concat%0#0,arr#0 (copy),0
        extract_uint16                                                                      (𝕡) arr#0,x#0 | i#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               (𝕡) arr#0,x#0 | i#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   (𝕡) arr#0,x#0 | i#0,concat%0#0,add%0#0
        itob                                                                                (𝕡) arr#0,x#0 | i#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         (𝕡) arr#0,x#0 | i#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 (𝕡) arr#0,x#0 | i#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           (𝕡) arr#0,x#0 | i#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          (𝕡) arr#0,x#0 | i#0,arr#0
        p-store arr#0                                                                       (𝕡) arr#0,x#0 | i#0
        // array/immutable.py:498
        // for i in urange(x):
        l-load i#0 0                                                                        (𝕡) arr#0,x#0 | i#0
        int 1                                                                               (𝕡) arr#0,x#0 | i#0,1
        +                                                                                   (𝕡) arr#0,x#0 | value_internal%0#0
        v-store i#0                                                                         (𝕡) arr#0,x#0 |
        b add_x_for_header@1                                                                (𝕡) arr#0,x#0 |

    add_x_after_for@4:                                                                      (𝕡) arr#0,x#0 |
        // array/immutable.py:500
        // return arr
        p-load arr#0                                                                        (𝕡) arr#0,x#0 | arr#0 (copy)
        retsub                                                                              arr#0 (copy)


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array[routing]() -> void:
subroutine test_uint64_array:
    test_uint64_array_block@0:
        // array/immutable.py:99
        // arr = arr.append(UInt64(42))
        byte 0x0001000000000000002a                                                         0x0001000000000000002a
        // array/immutable.py:103
        // arr = add_x(arr, UInt64(5))
        int 5                                                                               0x0001000000000000002a,5
        callsub add_x                                                                       arr#2
        // array/immutable.py:104
        // assert arr.length == 6
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%3#0
        l-load-copy aggregate%array_length%3#0 0                                            arr#2,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 6                                                                               arr#2,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),6
        ==                                                                                  arr#2,aggregate%array_length%3#0,tmp%10#0
        assert                                                                              arr#2,aggregate%array_length%3#0
        // array/immutable.py:105
        // assert arr[-1] == 4
        l-load-copy aggregate%array_length%3#0 0                                            arr#2,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 1                                                                               arr#2,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),1
        -                                                                                   arr#2,aggregate%array_length%3#0,tmp%12#0
        l-load-copy arr#2 2                                                                 arr#2,aggregate%array_length%3#0,tmp%12#0,arr#2 (copy)
        extract 2 0                                                                         arr#2,aggregate%array_length%3#0,tmp%12#0,aggregate%array_trimmed%1#0
        l-load tmp%12#0 1                                                                   arr#2,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,tmp%12#0
        int 8                                                                               arr#2,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,tmp%12#0,8
        *                                                                                   arr#2,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        l-load aggregate%array_trimmed%1#0 1                                                arr#2,aggregate%array_length%3#0,aggregate%bytes_offset%1#0,aggregate%array_trimmed%1#0
        l-load aggregate%bytes_offset%1#0 1                                                 arr#2,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        extract_uint64                                                                      arr#2,aggregate%array_length%3#0,values%1#0
        int 4                                                                               arr#2,aggregate%array_length%3#0,values%1#0,4
        ==                                                                                  arr#2,aggregate%array_length%3#0,tmp%13#0
        assert                                                                              arr#2,aggregate%array_length%3#0
        // array/immutable.py:107
        // arr = arr.append(UInt64(43))
        int 43                                                                              arr#2,aggregate%array_length%3#0,43
        itob                                                                                arr#2,aggregate%array_length%3#0,aggregate%val_as_bytes%1#0
        l-load arr#2 2                                                                      aggregate%array_length%3#0,aggregate%val_as_bytes%1#0,arr#2
        l-load aggregate%val_as_bytes%1#0 1                                                 aggregate%array_length%3#0,arr#2,aggregate%val_as_bytes%1#0
        concat // on error: max array length exceeded                                       aggregate%array_length%3#0,concat%1#0
        l-load aggregate%array_length%3#0 1                                                 concat%1#0,aggregate%array_length%3#0
        int 1                                                                               concat%1#0,aggregate%array_length%3#0,1
        +                                                                                   concat%1#0,add%1#0
        itob                                                                                concat%1#0,as_bytes%1#0
        extract 6 2                                                                         concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                 as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                           concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                          arr#2
        l-store-copy arr#2 0                                                                arr#2,arr#2 (copy)
        v-store arr#2                                                                       arr#2
        // array/immutable.py:108
        // assert arr.length == 7
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%5#0
        l-load-copy aggregate%array_length%5#0 0                                            arr#2,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy)
        int 7                                                                               arr#2,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy),7
        ==                                                                                  arr#2,aggregate%array_length%5#0,tmp%16#0
        assert                                                                              arr#2,aggregate%array_length%5#0
        // array/immutable.py:109
        // assert arr[-1] == 43
        l-load aggregate%array_length%5#0 0                                                 arr#2,aggregate%array_length%5#0
        int 1                                                                               arr#2,aggregate%array_length%5#0,1
        -                                                                                   arr#2,tmp%18#0
        l-load-copy arr#2 1                                                                 arr#2,tmp%18#0,arr#2 (copy)
        extract 2 0                                                                         arr#2,tmp%18#0,aggregate%array_trimmed%2#0
        l-load tmp%18#0 1                                                                   arr#2,aggregate%array_trimmed%2#0,tmp%18#0
        int 8                                                                               arr#2,aggregate%array_trimmed%2#0,tmp%18#0,8
        *                                                                                   arr#2,aggregate%array_trimmed%2#0,aggregate%bytes_offset%2#0
        l-load aggregate%array_trimmed%2#0 1                                                arr#2,aggregate%bytes_offset%2#0,aggregate%array_trimmed%2#0
        l-load aggregate%bytes_offset%2#0 1                                                 arr#2,aggregate%array_trimmed%2#0,aggregate%bytes_offset%2#0
        extract_uint64                                                                      arr#2,values%2#0
        int 43                                                                              arr#2,values%2#0,43
        ==                                                                                  arr#2,tmp%19#0
        assert                                                                              arr#2
        // array/immutable.py:110
        // assert arr[0] == 42
        l-load arr#2 0                                                                      arr#2
        int 2                                                                               arr#2,2
        extract_uint64                                                                      values%3#0
        int 42                                                                              values%3#0,42
        ==                                                                                  tmp%20#0
        assert
        // array/immutable.py:505
        // for _i in urange(x):
        int 0                                                                               value_internal%0#0
        v-store _i#0
        b test_uint64_array_for_header@2

    test_uint64_array_for_header@2:
        // array/immutable.py:505
        // for _i in urange(x):
        v-load _i#0                                                                         _i#0
        // array/immutable.py:112
        // arr = pop_x(arr, UInt64(3))
        int 3                                                                               _i#0,3
        // array/immutable.py:505
        // for _i in urange(x):
        <                                                                                   continue_looping%0#0
        bz test_uint64_array_after_for@4 ; b test_uint64_array_for_body@3

    test_uint64_array_for_body@3:
        // array/immutable.py:506
        // arr = arr.pop()
        v-load arr#2                                                                        arr#2
        int 8                                                                               arr#2,8
        callsub dynamic_array_pop_fixed_size                                                tmp%0#1,arr#2
        v-store arr#2                                                                       tmp%0#1
        pop 1
        // array/immutable.py:505
        // for _i in urange(x):
        v-load _i#0                                                                         _i#0
        int 1                                                                               _i#0,1
        +                                                                                   value_internal%0#0
        v-store _i#0
        b test_uint64_array_for_header@2

    test_uint64_array_after_for@4:
        // array/immutable.py:113
        // assert arr.length == 4
        v-load arr#2                                                                        arr#2
        l-store-copy arr#2 0                                                                arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%7#0
        l-load-copy aggregate%array_length%7#0 0                                            arr#2,aggregate%array_length%7#0,aggregate%array_length%7#0 (copy)
        int 4                                                                               arr#2,aggregate%array_length%7#0,aggregate%array_length%7#0 (copy),4
        ==                                                                                  arr#2,aggregate%array_length%7#0,tmp%23#0
        assert                                                                              arr#2,aggregate%array_length%7#0
        // array/immutable.py:114
        // assert arr[-1] == 2
        l-load aggregate%array_length%7#0 0                                                 arr#2,aggregate%array_length%7#0
        int 1                                                                               arr#2,aggregate%array_length%7#0,1
        -                                                                                   arr#2,tmp%25#0
        l-load-copy arr#2 1                                                                 arr#2,tmp%25#0,arr#2 (copy)
        extract 2 0                                                                         arr#2,tmp%25#0,aggregate%array_trimmed%4#0
        l-load tmp%25#0 1                                                                   arr#2,aggregate%array_trimmed%4#0,tmp%25#0
        int 8                                                                               arr#2,aggregate%array_trimmed%4#0,tmp%25#0,8
        *                                                                                   arr#2,aggregate%array_trimmed%4#0,aggregate%bytes_offset%4#0
        l-load aggregate%array_trimmed%4#0 1                                                arr#2,aggregate%bytes_offset%4#0,aggregate%array_trimmed%4#0
        l-load aggregate%bytes_offset%4#0 1                                                 arr#2,aggregate%array_trimmed%4#0,aggregate%bytes_offset%4#0
        extract_uint64                                                                      arr#2,values%4#0
        int 2                                                                               arr#2,values%4#0,2
        ==                                                                                  arr#2,tmp%26#0
        assert                                                                              arr#2
        // array/immutable.py:116
        // arr = add_x(arr, UInt64(10))
        l-load arr#2 0                                                                      arr#2
        int 10                                                                              arr#2,10
        callsub add_x                                                                       arr#2
        // array/immutable.py:117
        // assert arr.length == 14
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%9#0
        l-load-copy aggregate%array_length%9#0 0                                            arr#2,aggregate%array_length%9#0,aggregate%array_length%9#0 (copy)
        int 14                                                                              arr#2,aggregate%array_length%9#0,aggregate%array_length%9#0 (copy),14
        ==                                                                                  arr#2,aggregate%array_length%9#0,tmp%29#0
        assert                                                                              arr#2,aggregate%array_length%9#0
        // array/immutable.py:118
        // assert arr[-1] == 9
        l-load-copy aggregate%array_length%9#0 0                                            arr#2,aggregate%array_length%9#0,aggregate%array_length%9#0 (copy)
        int 1                                                                               arr#2,aggregate%array_length%9#0,aggregate%array_length%9#0 (copy),1
        -                                                                                   arr#2,aggregate%array_length%9#0,tmp%31#0
        l-load-copy arr#2 2                                                                 arr#2,aggregate%array_length%9#0,tmp%31#0,arr#2 (copy)
        extract 2 0                                                                         arr#2,aggregate%array_length%9#0,tmp%31#0,aggregate%array_trimmed%5#0
        l-load tmp%31#0 1                                                                   arr#2,aggregate%array_length%9#0,aggregate%array_trimmed%5#0,tmp%31#0
        int 8                                                                               arr#2,aggregate%array_length%9#0,aggregate%array_trimmed%5#0,tmp%31#0,8
        *                                                                                   arr#2,aggregate%array_length%9#0,aggregate%array_trimmed%5#0,aggregate%bytes_offset%5#0
        l-load aggregate%array_trimmed%5#0 1                                                arr#2,aggregate%array_length%9#0,aggregate%bytes_offset%5#0,aggregate%array_trimmed%5#0
        l-load aggregate%bytes_offset%5#0 1                                                 arr#2,aggregate%array_length%9#0,aggregate%array_trimmed%5#0,aggregate%bytes_offset%5#0
        extract_uint64                                                                      arr#2,aggregate%array_length%9#0,values%5#0
        int 9                                                                               arr#2,aggregate%array_length%9#0,values%5#0,9
        ==                                                                                  arr#2,aggregate%array_length%9#0,tmp%32#0
        assert                                                                              arr#2,aggregate%array_length%9#0
        // array/immutable.py:120
        // arr = arr.append(UInt64(44))
        int 44                                                                              arr#2,aggregate%array_length%9#0,44
        itob                                                                                arr#2,aggregate%array_length%9#0,aggregate%val_as_bytes%2#0
        l-load arr#2 2                                                                      aggregate%array_length%9#0,aggregate%val_as_bytes%2#0,arr#2
        l-load aggregate%val_as_bytes%2#0 1                                                 aggregate%array_length%9#0,arr#2,aggregate%val_as_bytes%2#0
        concat // on error: max array length exceeded                                       aggregate%array_length%9#0,concat%2#0
        l-load aggregate%array_length%9#0 1                                                 concat%2#0,aggregate%array_length%9#0
        int 1                                                                               concat%2#0,aggregate%array_length%9#0,1
        +                                                                                   concat%2#0,add%2#0
        itob                                                                                concat%2#0,as_bytes%2#0
        extract 6 2                                                                         concat%2#0,as_u16_bytes%2#0
        l-load concat%2#0 1                                                                 as_u16_bytes%2#0,concat%2#0
        l-load as_u16_bytes%2#0 1                                                           concat%2#0,as_u16_bytes%2#0
        replace2 0                                                                          arr#2
        // array/immutable.py:121
        // assert arr.length == 15
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%11#0
        l-load-copy aggregate%array_length%11#0 0                                           arr#2,aggregate%array_length%11#0,aggregate%array_length%11#0 (copy)
        int 15                                                                              arr#2,aggregate%array_length%11#0,aggregate%array_length%11#0 (copy),15
        ==                                                                                  arr#2,aggregate%array_length%11#0,tmp%35#0
        assert                                                                              arr#2,aggregate%array_length%11#0
        // array/immutable.py:122
        // assert arr[-1] == 44
        l-load aggregate%array_length%11#0 0                                                arr#2,aggregate%array_length%11#0
        int 1                                                                               arr#2,aggregate%array_length%11#0,1
        -                                                                                   arr#2,tmp%37#0
        l-load-copy arr#2 1                                                                 arr#2,tmp%37#0,arr#2 (copy)
        extract 2 0                                                                         arr#2,tmp%37#0,aggregate%array_trimmed%6#0
        l-load tmp%37#0 1                                                                   arr#2,aggregate%array_trimmed%6#0,tmp%37#0
        int 8                                                                               arr#2,aggregate%array_trimmed%6#0,tmp%37#0,8
        *                                                                                   arr#2,aggregate%array_trimmed%6#0,aggregate%bytes_offset%6#0
        l-load aggregate%array_trimmed%6#0 1                                                arr#2,aggregate%bytes_offset%6#0,aggregate%array_trimmed%6#0
        l-load aggregate%bytes_offset%6#0 1                                                 arr#2,aggregate%array_trimmed%6#0,aggregate%bytes_offset%6#0
        extract_uint64                                                                      arr#2,values%6#0
        int 44                                                                              arr#2,values%6#0,44
        ==                                                                                  arr#2,tmp%38#0
        assert                                                                              arr#2
        // array/immutable.py:124
        // arr = arr.replace(2, UInt64(23))
        int 23                                                                              arr#2,23
        itob                                                                                arr#2,aggregate%val_as_bytes%3#0
        l-load arr#2 1                                                                      aggregate%val_as_bytes%3#0,arr#2
        l-load aggregate%val_as_bytes%3#0 1                                                 arr#2,aggregate%val_as_bytes%3#0
        replace2 18 // on error: index access is out of bounds                              arr#2
        // array/immutable.py:125
        // assert arr.length == 15
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 0                                                                               arr#2,arr#2 (copy),0
        extract_uint16                                                                      arr#2,aggregate%array_length%13#0
        int 15                                                                              arr#2,aggregate%array_length%13#0,15
        ==                                                                                  arr#2,tmp%40#0
        assert                                                                              arr#2
        // array/immutable.py:126
        // assert arr[2] == 23
        l-load-copy arr#2 0                                                                 arr#2,arr#2 (copy)
        int 18                                                                              arr#2,arr#2 (copy),18
        extract_uint64                                                                      arr#2,values%7#0
        int 23                                                                              arr#2,values%7#0,23
        ==                                                                                  arr#2,tmp%41#0
        assert                                                                              arr#2
        // array/immutable.py:128
        // self.a = arr
        byte "a"                                                                            arr#2,"a"
        l-load arr#2 1                                                                      "a",arr#2
        app_global_put
        // array/immutable.py:94
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_biguint_array[routing]() -> void:
subroutine test_biguint_array:
    test_biguint_array_block@0:
        // array/immutable.py:135
        // arr = arr.append(BigUInt(Txn.num_app_args - 1))
        txn NumAppArgs                                                                      tmp%2#0
        int 1                                                                               tmp%2#0,1
        -                                                                                   tmp%3#0
        itob                                                                                tmp%4#0
        int 64                                                                              tmp%4#0,64
        bzero                                                                               tmp%4#0,aggregate%bzero%0#0
        l-store-copy aggregate%bzero%0#0 0                                                  tmp%4#0,aggregate%bzero%0#0,aggregate%bzero%0#0 (copy)
        v-store aggregate%bzero%0#0                                                         tmp%4#0,aggregate%bzero%0#0
        l-load tmp%4#0 1                                                                    aggregate%bzero%0#0,tmp%4#0
        l-load aggregate%bzero%0#0 1                                                        tmp%4#0,aggregate%bzero%0#0
        b|                                                                                  aggregate%arc4_encoded%0#0
        // array/immutable.py:132
        // arr = ImmutableArray[BigUInt]()
        byte 0x0000                                                                         aggregate%arc4_encoded%0#0,0x0000
        // array/immutable.py:135
        // arr = arr.append(BigUInt(Txn.num_app_args - 1))
        l-load aggregate%arc4_encoded%0#0 1                                                 0x0000,aggregate%arc4_encoded%0#0
        concat // on error: max array length exceeded                                       concat%0#0
        byte 0x0001                                                                         concat%0#0,0x0001
        replace2 0                                                                          arr#1
        l-store-copy arr#1 0                                                                arr#1,arr#1 (copy)
        v-store arr#1                                                                       arr#1
        // array/immutable.py:136
        // assert arr.length == 1
        l-load-copy arr#1 0                                                                 arr#1,arr#1 (copy)
        int 0                                                                               arr#1,arr#1 (copy),0
        extract_uint16                                                                      arr#1,aggregate%array_length%1#0
        l-load-copy aggregate%array_length%1#0 0                                            arr#1,aggregate%array_length%1#0,aggregate%array_length%1#0 (copy)
        int 1                                                                               arr#1,aggregate%array_length%1#0,aggregate%array_length%1#0 (copy),1
        ==                                                                                  arr#1,aggregate%array_length%1#0,tmp%7#0
        assert                                                                              arr#1,aggregate%array_length%1#0
        // array/immutable.py:137
        // assert arr[-1] == 0
        l-load aggregate%array_length%1#0 0                                                 arr#1,aggregate%array_length%1#0
        int 1                                                                               arr#1,aggregate%array_length%1#0,1
        -                                                                                   arr#1,tmp%9#0
        l-load arr#1 1                                                                      tmp%9#0,arr#1
        extract 2 0                                                                         tmp%9#0,aggregate%array_trimmed%0#0
        l-load tmp%9#0 1                                                                    aggregate%array_trimmed%0#0,tmp%9#0
        int 64                                                                              aggregate%array_trimmed%0#0,tmp%9#0,64
        *                                                                                   aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        l-load aggregate%array_trimmed%0#0 1                                                aggregate%bytes_offset%0#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%0#0 1                                                 aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        int 64                                                                              aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0,64
        extract3 // on error: index access is out of bounds                                 aggregate%encoded_element%0#0
        byte 0x                                                                             aggregate%encoded_element%0#0,0x
        b==                                                                                 tmp%10#0
        assert
        // array/immutable.py:512
        // for i in urange(x):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_biguint_array_for_header@2

    test_biguint_array_for_header@2:
        // array/immutable.py:512
        // for i in urange(x):
        v-load i#0                                                                          i#0
        // array/immutable.py:139
        // arr = add_xb(arr, UInt64(5))
        int 5                                                                               i#0,5
        // array/immutable.py:512
        // for i in urange(x):
        <                                                                                   continue_looping%0#0
        bz test_biguint_array_after_for@4 ; b test_biguint_array_for_body@3

    test_biguint_array_for_body@3:
        // array/immutable.py:513
        // arr = arr.append(BigUInt(i))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        itob                                                                                i#0,tmp%0#1
        v-load aggregate%bzero%0#0                                                          i#0,tmp%0#1,aggregate%bzero%0#0
        b|                                                                                  i#0,aggregate%arc4_encoded%1#0
        v-load arr#1                                                                        i#0,aggregate%arc4_encoded%1#0,arr#1
        l-store-copy arr#1 1                                                                i#0,arr#1,aggregate%arc4_encoded%1#0,arr#1 (copy)
        l-load aggregate%arc4_encoded%1#0 1                                                 i#0,arr#1,arr#1 (copy),aggregate%arc4_encoded%1#0
        concat // on error: max array length exceeded                                       i#0,arr#1,concat%0#0
        l-load arr#1 1                                                                      i#0,concat%0#0,arr#1
        int 0                                                                               i#0,concat%0#0,arr#1,0
        extract_uint16                                                                      i#0,concat%0#0,extract_uint16%0#1
        int 1                                                                               i#0,concat%0#0,extract_uint16%0#1,1
        +                                                                                   i#0,concat%0#0,add%0#1
        itob                                                                                i#0,concat%0#0,as_bytes%0#1
        extract 6 2                                                                         i#0,concat%0#0,as_u16_bytes%0#1
        l-load concat%0#0 1                                                                 i#0,as_u16_bytes%0#1,concat%0#0
        l-load as_u16_bytes%0#1 1                                                           i#0,concat%0#0,as_u16_bytes%0#1
        replace2 0                                                                          i#0,arr#1
        v-store arr#1                                                                       i#0
        // array/immutable.py:512
        // for i in urange(x):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_biguint_array_for_header@2

    test_biguint_array_after_for@4:
        // array/immutable.py:140
        // assert arr.length == 6
        v-load arr#1                                                                        arr#1
        l-store-copy arr#1 0                                                                arr#1,arr#1 (copy)
        int 0                                                                               arr#1,arr#1 (copy),0
        extract_uint16                                                                      arr#1,aggregate%array_length%3#0
        l-load-copy aggregate%array_length%3#0 0                                            arr#1,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 6                                                                               arr#1,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),6
        ==                                                                                  arr#1,aggregate%array_length%3#0,tmp%13#0
        assert                                                                              arr#1,aggregate%array_length%3#0
        // array/immutable.py:141
        // assert arr[-1] == 4
        l-load-copy aggregate%array_length%3#0 0                                            arr#1,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 1                                                                               arr#1,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),1
        -                                                                                   arr#1,aggregate%array_length%3#0,tmp%15#0
        l-load-copy arr#1 2                                                                 arr#1,aggregate%array_length%3#0,tmp%15#0,arr#1 (copy)
        extract 2 0                                                                         arr#1,aggregate%array_length%3#0,tmp%15#0,aggregate%array_trimmed%1#0
        l-load tmp%15#0 1                                                                   arr#1,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,tmp%15#0
        int 64                                                                              arr#1,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,tmp%15#0,64
        *                                                                                   arr#1,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        l-load aggregate%array_trimmed%1#0 1                                                arr#1,aggregate%array_length%3#0,aggregate%bytes_offset%1#0,aggregate%array_trimmed%1#0
        l-load aggregate%bytes_offset%1#0 1                                                 arr#1,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        int 64                                                                              arr#1,aggregate%array_length%3#0,aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0,64
        extract3 // on error: index access is out of bounds                                 arr#1,aggregate%array_length%3#0,aggregate%encoded_element%1#0
        byte 0x04                                                                           arr#1,aggregate%array_length%3#0,aggregate%encoded_element%1#0,0x04
        b==                                                                                 arr#1,aggregate%array_length%3#0,tmp%16#0
        assert                                                                              arr#1,aggregate%array_length%3#0
        // array/immutable.py:143
        // arr = arr.append(BigUInt(2**512 - 1) - Txn.num_app_args)
        txn NumAppArgs                                                                      arr#1,aggregate%array_length%3#0,tmp%17#0
        itob                                                                                arr#1,aggregate%array_length%3#0,tmp%18#0
        byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff arr#1,aggregate%array_length%3#0,tmp%18#0,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        l-load tmp%18#0 1                                                                   arr#1,aggregate%array_length%3#0,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,tmp%18#0
        b-                                                                                  arr#1,aggregate%array_length%3#0,tmp%19#0
        l-load-copy tmp%19#0 0                                                              arr#1,aggregate%array_length%3#0,tmp%19#0,tmp%19#0 (copy)
        len                                                                                 arr#1,aggregate%array_length%3#0,tmp%19#0,aggregate%value_len%2#0
        int 64                                                                              arr#1,aggregate%array_length%3#0,tmp%19#0,aggregate%value_len%2#0,64
        <=                                                                                  arr#1,aggregate%array_length%3#0,tmp%19#0,aggregate%len_ok%2#0
        assert // overflow                                                                  arr#1,aggregate%array_length%3#0,tmp%19#0
        l-load tmp%19#0 0                                                                   arr#1,aggregate%array_length%3#0,tmp%19#0
        v-load aggregate%bzero%0#0                                                          arr#1,aggregate%array_length%3#0,tmp%19#0,aggregate%bzero%0#0
        b|                                                                                  arr#1,aggregate%array_length%3#0,aggregate%arc4_encoded%2#0
        l-load arr#1 2                                                                      aggregate%array_length%3#0,aggregate%arc4_encoded%2#0,arr#1
        l-load aggregate%arc4_encoded%2#0 1                                                 aggregate%array_length%3#0,arr#1,aggregate%arc4_encoded%2#0
        concat // on error: max array length exceeded                                       aggregate%array_length%3#0,concat%1#0
        l-load aggregate%array_length%3#0 1                                                 concat%1#0,aggregate%array_length%3#0
        int 1                                                                               concat%1#0,aggregate%array_length%3#0,1
        +                                                                                   concat%1#0,add%1#0
        itob                                                                                concat%1#0,as_bytes%1#0
        extract 6 2                                                                         concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                 as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                           concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                          arr#1
        // array/immutable.py:144
        // assert arr.length == 7
        l-load-copy arr#1 0                                                                 arr#1,arr#1 (copy)
        int 0                                                                               arr#1,arr#1 (copy),0
        extract_uint16                                                                      arr#1,aggregate%array_length%5#0
        l-load-copy aggregate%array_length%5#0 0                                            arr#1,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy)
        int 7                                                                               arr#1,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy),7
        ==                                                                                  arr#1,aggregate%array_length%5#0,tmp%22#0
        assert                                                                              arr#1,aggregate%array_length%5#0
        // array/immutable.py:145
        // assert arr[-1] == 2**512 - 2
        l-load-copy aggregate%array_length%5#0 0                                            arr#1,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy)
        int 1                                                                               arr#1,aggregate%array_length%5#0,aggregate%array_length%5#0 (copy),1
        -                                                                                   arr#1,aggregate%array_length%5#0,tmp%24#0
        l-load-copy arr#1 2                                                                 arr#1,aggregate%array_length%5#0,tmp%24#0,arr#1 (copy)
        extract 2 0                                                                         arr#1,aggregate%array_length%5#0,tmp%24#0,aggregate%array_trimmed%2#0
        l-load tmp%24#0 1                                                                   arr#1,aggregate%array_length%5#0,aggregate%array_trimmed%2#0,tmp%24#0
        int 64                                                                              arr#1,aggregate%array_length%5#0,aggregate%array_trimmed%2#0,tmp%24#0,64
        *                                                                                   arr#1,aggregate%array_length%5#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%2#0
        l-load aggregate%array_trimmed%2#0 1                                                arr#1,aggregate%array_length%5#0,aggregate%bytes_offset%2#0,aggregate%array_trimmed%2#0
        l-load aggregate%bytes_offset%2#0 1                                                 arr#1,aggregate%array_length%5#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%2#0
        int 64                                                                              arr#1,aggregate%array_length%5#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%2#0,64
        extract3 // on error: index access is out of bounds                                 arr#1,aggregate%array_length%5#0,aggregate%encoded_element%2#0
        byte 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe arr#1,aggregate%array_length%5#0,aggregate%encoded_element%2#0,0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe
        b==                                                                                 arr#1,aggregate%array_length%5#0,tmp%25#0
        assert                                                                              arr#1,aggregate%array_length%5#0
        // array/immutable.py:146
        // assert arr[0] == 0
        l-load-copy arr#1 1                                                                 arr#1,aggregate%array_length%5#0,arr#1 (copy)
        extract 2 64                                                                        arr#1,aggregate%array_length%5#0,aggregate%encoded_element%3#0
        byte 0x                                                                             arr#1,aggregate%array_length%5#0,aggregate%encoded_element%3#0,0x
        b==                                                                                 arr#1,aggregate%array_length%5#0,tmp%26#0
        assert                                                                              arr#1,aggregate%array_length%5#0
        // array/immutable.py:148
        // arr = arr.append(BigUInt(2**512 - 1))
        l-load arr#1 1                                                                      aggregate%array_length%5#0,arr#1
        byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff aggregate%array_length%5#0,arr#1,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        concat // on error: max array length exceeded                                       aggregate%array_length%5#0,concat%2#0
        l-load aggregate%array_length%5#0 1                                                 concat%2#0,aggregate%array_length%5#0
        int 1                                                                               concat%2#0,aggregate%array_length%5#0,1
        +                                                                                   concat%2#0,add%2#0
        itob                                                                                concat%2#0,as_bytes%2#0
        extract 6 2                                                                         concat%2#0,as_u16_bytes%2#0
        l-load concat%2#0 1                                                                 as_u16_bytes%2#0,concat%2#0
        l-load as_u16_bytes%2#0 1                                                           concat%2#0,as_u16_bytes%2#0
        replace2 0                                                                          arr#1
        // array/immutable.py:149
        // assert arr.length == 8
        l-load-copy arr#1 0                                                                 arr#1,arr#1 (copy)
        int 0                                                                               arr#1,arr#1 (copy),0
        extract_uint16                                                                      arr#1,aggregate%array_length%7#0
        l-load-copy aggregate%array_length%7#0 0                                            arr#1,aggregate%array_length%7#0,aggregate%array_length%7#0 (copy)
        int 8                                                                               arr#1,aggregate%array_length%7#0,aggregate%array_length%7#0 (copy),8
        ==                                                                                  arr#1,aggregate%array_length%7#0,tmp%29#0
        assert                                                                              arr#1,aggregate%array_length%7#0
        // array/immutable.py:150
        // assert arr[-1] == 2**512 - 1
        l-load aggregate%array_length%7#0 0                                                 arr#1,aggregate%array_length%7#0
        int 1                                                                               arr#1,aggregate%array_length%7#0,1
        -                                                                                   arr#1,tmp%31#0
        l-load-copy arr#1 1                                                                 arr#1,tmp%31#0,arr#1 (copy)
        extract 2 0                                                                         arr#1,tmp%31#0,aggregate%array_trimmed%4#0
        l-load tmp%31#0 1                                                                   arr#1,aggregate%array_trimmed%4#0,tmp%31#0
        int 64                                                                              arr#1,aggregate%array_trimmed%4#0,tmp%31#0,64
        *                                                                                   arr#1,aggregate%array_trimmed%4#0,aggregate%bytes_offset%4#0
        l-load aggregate%array_trimmed%4#0 1                                                arr#1,aggregate%bytes_offset%4#0,aggregate%array_trimmed%4#0
        l-load aggregate%bytes_offset%4#0 1                                                 arr#1,aggregate%array_trimmed%4#0,aggregate%bytes_offset%4#0
        int 64                                                                              arr#1,aggregate%array_trimmed%4#0,aggregate%bytes_offset%4#0,64
        extract3 // on error: index access is out of bounds                                 arr#1,aggregate%encoded_element%4#0
        byte 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff arr#1,aggregate%encoded_element%4#0,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
        b==                                                                                 arr#1,tmp%32#0
        assert                                                                              arr#1
        // array/immutable.py:151
        // assert arr[0] == 0
        l-load-copy arr#1 0                                                                 arr#1,arr#1 (copy)
        extract 2 64                                                                        arr#1,aggregate%encoded_element%5#0
        byte 0x                                                                             arr#1,aggregate%encoded_element%5#0,0x
        b==                                                                                 arr#1,tmp%33#0
        assert                                                                              arr#1
        // array/immutable.py:153
        // Box(ImmutableArray[BigUInt], key=b"biguint").value = arr
        byte 0x62696775696e74                                                               arr#1,0x62696775696e74
        box_del                                                                             arr#1,{box_del}
        pop 1                                                                               arr#1
        byte 0x62696775696e74                                                               arr#1,0x62696775696e74
        l-load arr#1 1                                                                      0x62696775696e74,arr#1
        box_put
        // array/immutable.py:130
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array[routing]() -> void:
subroutine test_bool_array:
    test_bool_array_block@0:
        // array/immutable.py:155
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                length#0
        v-store length#0
        // array/immutable.py:157
        // arr = ImmutableArray[bool]()
        byte 0x0000                                                                         0x0000
        v-store arr#0
        // array/immutable.py:160
        // for i in urange(length):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_bool_array_for_header@2

    test_bool_array_for_header@2:
        // array/immutable.py:160
        // for i in urange(length):
        v-load i#0                                                                          i#0
        v-load length#0                                                                     i#0,length#0
        <                                                                                   continue_looping%0#0
        bz test_bool_array_after_for@5 ; b test_bool_array_for_body@3

    test_bool_array_for_body@3:
        // array/immutable.py:161
        // arr = arr.append(i == Txn.num_app_args)
        txn NumAppArgs                                                                      tmp%2#0
        v-load i#0                                                                          tmp%2#0,i#0
        l-store-copy i#0 1                                                                  i#0,tmp%2#0,i#0 (copy)
        l-load tmp%2#0 1                                                                    i#0,i#0 (copy),tmp%2#0
        ==                                                                                  i#0,tmp%3#0
        byte 0x00                                                                           i#0,tmp%3#0,0x00
        int 0                                                                               i#0,tmp%3#0,0x00,0
        l-load tmp%3#0 2                                                                    i#0,0x00,0,tmp%3#0
        setbit                                                                              i#0,aggregate%encoded_bool%0#0
        v-load arr#0                                                                        i#0,aggregate%encoded_bool%0#0,arr#0
        l-load aggregate%encoded_bool%0#0 1                                                 i#0,arr#0,aggregate%encoded_bool%0#0
        int 1                                                                               i#0,arr#0,aggregate%encoded_bool%0#0,1
        int 8                                                                               i#0,arr#0,aggregate%encoded_bool%0#0,1,8
        callsub dynamic_array_concat_bits                                                   i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:160
        // for i in urange(length):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_bool_array_for_header@2

    test_bool_array_after_for@5:
        // array/immutable.py:163
        // assert arr.length == length
        v-load arr#0                                                                        arr#0
        int 0                                                                               arr#0,0
        extract_uint16                                                                      array_length#0
        l-store-copy array_length#0 0                                                       array_length#0,array_length#0 (copy)
        v-store array_length#0                                                              array_length#0
        l-load array_length#0 0                                                             array_length#0
        v-load length#0                                                                     array_length#0,length#0
        l-store-copy length#0 1                                                             length#0,array_length#0,length#0 (copy)
        ==                                                                                  length#0,tmp%6#0
        assert                                                                              length#0
        // array/immutable.py:165
        // if length > 0:
        l-load length#0 0                                                                   length#0
        bz test_bool_array_after_if_else@7 ; b test_bool_array_if_body@6

    test_bool_array_if_body@6:
        // array/immutable.py:166
        // assert not arr[0], "expected element 0 to be False"
        v-load array_length#0                                                               array_length#0
        assert // index access is out of bounds
        v-load arr#0                                                                        arr#0
        int 16                                                                              arr#0,16
        getbit                                                                              aggregate%get_bit%0#0
        !                                                                                   tmp%8#0
        assert // expected element 0 to be False
        b test_bool_array_after_if_else@7

    test_bool_array_after_if_else@7:
        // array/immutable.py:167
        // if length > 1:
        v-load length#0                                                                     length#0
        int 1                                                                               length#0,1
        >                                                                                   tmp%9#0
        bz test_bool_array_after_if_else@9 ; b test_bool_array_if_body@8

    test_bool_array_if_body@8:
        // array/immutable.py:168
        // assert not arr[1], "expected element 1 to be False"
        int 1                                                                               1
        v-load array_length#0                                                               1,array_length#0
        <                                                                                   aggregate%lt%1#0
        assert // index access is out of bounds
        v-load arr#0                                                                        arr#0
        int 17                                                                              arr#0,17
        getbit                                                                              aggregate%get_bit%1#0
        !                                                                                   tmp%10#0
        assert // expected element 1 to be False
        b test_bool_array_after_if_else@9

    test_bool_array_after_if_else@9:
        // array/immutable.py:169
        // if length > 2:
        v-load length#0                                                                     length#0
        int 2                                                                               length#0,2
        >                                                                                   tmp%11#0
        bz test_bool_array_after_if_else@11 ; b test_bool_array_if_body@10

    test_bool_array_if_body@10:
        // array/immutable.py:170
        // assert arr[2], "expected element 2 to be True"
        int 2                                                                               2
        v-load array_length#0                                                               2,array_length#0
        <                                                                                   aggregate%lt%2#0
        assert // index access is out of bounds
        v-load arr#0                                                                        arr#0
        int 18                                                                              arr#0,18
        getbit                                                                              aggregate%get_bit%2#0
        assert // expected element 2 to be True
        b test_bool_array_after_if_else@11

    test_bool_array_after_if_else@11:
        // array/immutable.py:171
        // if length > 3:
        v-load length#0                                                                     length#0
        int 3                                                                               length#0,3
        >                                                                                   tmp%12#0
        bz test_bool_array_after_if_else@13 ; b test_bool_array_if_body@12

    test_bool_array_if_body@12:
        // array/immutable.py:172
        // assert not arr[length - 1], "expected last element to be False"
        v-load length#0                                                                     length#0
        int 1                                                                               length#0,1
        -                                                                                   tmp%13#0
        l-load-copy tmp%13#0 0                                                              tmp%13#0,tmp%13#0 (copy)
        v-load array_length#0                                                               tmp%13#0,tmp%13#0 (copy),array_length#0
        <                                                                                   tmp%13#0,aggregate%lt%3#0
        assert // index access is out of bounds                                             tmp%13#0
        l-load tmp%13#0 0                                                                   tmp%13#0
        int 16                                                                              tmp%13#0,16
        +                                                                                   aggregate%add%3#0
        v-load arr#0                                                                        aggregate%add%3#0,arr#0
        l-load aggregate%add%3#0 1                                                          arr#0,aggregate%add%3#0
        getbit                                                                              aggregate%get_bit%3#0
        !                                                                                   tmp%14#0
        assert // expected last element to be False
        b test_bool_array_after_if_else@13

    test_bool_array_after_if_else@13:
        // array/immutable.py:174
        // self.g = arr
        byte "g"                                                                            "g"
        v-load arr#0                                                                        "g",arr#0
        app_global_put
        // array/immutable.py:175
        // if length:
        v-load length#0                                                                     length#0
        bz test_bool_array_after_if_else@15 ; b test_bool_array_if_body@14

    test_bool_array_if_body@14:
        v-load array_length#0                                                               array_length#0
        int 1                                                                               array_length#0,1
        -                                                                                   length_minus_1#0
        l-load-copy length_minus_1#0 0                                                      length_minus_1#0,length_minus_1#0 (copy)
        itob                                                                                length_minus_1#0,tmp%2#1
        extract 6 0                                                                         length_minus_1#0,tmp%3#1
        v-load arr#0                                                                        length_minus_1#0,tmp%3#1,arr#0
        l-load tmp%3#1 1                                                                    length_minus_1#0,arr#0,tmp%3#1
        replace2 0                                                                          length_minus_1#0,result#0
        l-load-copy length_minus_1#0 1                                                      length_minus_1#0,result#0,length_minus_1#0 (copy)
        int 16                                                                              length_minus_1#0,result#0,length_minus_1#0 (copy),16
        +                                                                                   length_minus_1#0,result#0,popped_location#0
        l-load result#0 1                                                                   length_minus_1#0,popped_location#0,result#0
        l-load popped_location#0 1                                                          length_minus_1#0,result#0,popped_location#0
        int 0                                                                               length_minus_1#0,result#0,popped_location#0,0
        setbit                                                                              length_minus_1#0,result#0
        l-load length_minus_1#0 1                                                           result#0,length_minus_1#0
        int 7                                                                               result#0,length_minus_1#0,7
        +                                                                                   result#0,tmp%8#1
        int 8                                                                               result#0,tmp%8#1,8
        /                                                                                   result#0,tmp%9#1
        int 2                                                                               result#0,tmp%9#1,2
        l-load tmp%9#1 1                                                                    result#0,2,tmp%9#1
        +                                                                                   result#0,tmp%10#1
        l-load result#0 1                                                                   tmp%10#1,result#0
        int 0                                                                               tmp%10#1,result#0,0
        l-load tmp%10#1 2                                                                   result#0,0,tmp%10#1
        substring3                                                                          result#0
        // array/immutable.py:177
        // assert arr.length == length - 1
        int 0                                                                               result#0,0
        extract_uint16                                                                      aggregate%array_length%6#0
        v-load length#0                                                                     aggregate%array_length%6#0,length#0
        int 1                                                                               aggregate%array_length%6#0,length#0,1
        -                                                                                   aggregate%array_length%6#0,tmp%20#0
        l-load aggregate%array_length%6#0 1                                                 tmp%20#0,aggregate%array_length%6#0
        l-load tmp%20#0 1                                                                   aggregate%array_length%6#0,tmp%20#0
        ==                                                                                  tmp%21#0
        assert
        b test_bool_array_after_if_else@15

    test_bool_array_after_if_else@15:
        // array/immutable.py:155
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array[routing]() -> void:
subroutine test_fixed_size_tuple_array:
    test_fixed_size_tuple_array_block@0:
        // array/immutable.py:181
        // arr = ImmutableArray[tuple[UInt64, UInt64]]()
        byte 0x0000                                                                         0x0000
        v-store arr#0
        // array/immutable.py:184
        // for i in urange(5):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_fixed_size_tuple_array_for_header@2

    test_fixed_size_tuple_array_for_header@2:
        // array/immutable.py:184
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%0#0
        bz test_fixed_size_tuple_array_after_for@5 ; b test_fixed_size_tuple_array_for_body@3 

    test_fixed_size_tuple_array_for_body@3:
        // array/immutable.py:185
        // arr = arr.append((i + 1, i + 2))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 1                                                                               i#0,i#0 (copy),1
        +                                                                                   i#0,tmp%2#0
        l-load i#0 1                                                                        tmp%2#0,i#0
        int 2                                                                               tmp%2#0,i#0,2
        +                                                                                   tmp%2#0,tmp%3#0
        l-load-copy tmp%2#0 1                                                               tmp%2#0,tmp%3#0,tmp%2#0 (copy)
        itob                                                                                tmp%2#0,tmp%3#0,aggregate%val_as_bytes%0#0
        l-load tmp%3#0 1                                                                    tmp%2#0,aggregate%val_as_bytes%0#0,tmp%3#0
        itob                                                                                tmp%2#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                 tmp%2#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                 tmp%2#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                              tmp%2#0,aggregate%head%1#0
        v-load arr#0                                                                        tmp%2#0,aggregate%head%1#0,arr#0
        l-store-copy arr#0 1                                                                tmp%2#0,arr#0,aggregate%head%1#0,arr#0 (copy)
        l-load aggregate%head%1#0 1                                                         tmp%2#0,arr#0,arr#0 (copy),aggregate%head%1#0
        concat // on error: max array length exceeded                                       tmp%2#0,arr#0,concat%0#0
        l-load arr#0 1                                                                      tmp%2#0,concat%0#0,arr#0
        int 0                                                                               tmp%2#0,concat%0#0,arr#0,0
        extract_uint16                                                                      tmp%2#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               tmp%2#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   tmp%2#0,concat%0#0,add%0#0
        itob                                                                                tmp%2#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         tmp%2#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 tmp%2#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           tmp%2#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          tmp%2#0,arr#0
        v-store arr#0                                                                       tmp%2#0
        l-load tmp%2#0 0                                                                    tmp%2#0
        v-store i#0
        b test_fixed_size_tuple_array_for_header@2

    test_fixed_size_tuple_array_after_for@5:
        // array/immutable.py:187
        // assert arr.length == 5
        v-load arr#0                                                                        arr#0
        l-store-copy arr#0 0                                                                arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%1#0
        l-load-copy aggregate%array_length%1#0 0                                            arr#0,aggregate%array_length%1#0,aggregate%array_length%1#0 (copy)
        int 5                                                                               arr#0,aggregate%array_length%1#0,aggregate%array_length%1#0 (copy),5
        ==                                                                                  arr#0,aggregate%array_length%1#0,tmp%6#0
        assert                                                                              arr#0,aggregate%array_length%1#0
        // array/immutable.py:188
        // assert arr[0] == (UInt64(1), UInt64(2))
        l-load-copy arr#0 1                                                                 arr#0,aggregate%array_length%1#0,arr#0 (copy)
        extract 2 0                                                                         arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0
        l-load-copy arr#0 2                                                                 arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,arr#0 (copy)
        extract 2 16                                                                        arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                         arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%encoded_element%0#0,aggregate%item0%0#0
        l-load aggregate%encoded_element%0#0 1                                              arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item0%0#0,aggregate%encoded_element%0#0
        int 8                                                                               arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item0%0#0,aggregate%encoded_element%0#0,8
        extract_uint64                                                                      arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item0%0#0 1                                                        arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item1%0#0,aggregate%item0%0#0
        int 1                                                                               arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item1%0#0,aggregate%item0%0#0,1
        ==                                                                                  arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,aggregate%item1%0#0,tmp%7#0
        l-load aggregate%item1%0#0 1                                                        arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%7#0,aggregate%item1%0#0
        int 2                                                                               arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%7#0,aggregate%item1%0#0,2
        ==                                                                                  arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%7#0,tmp%8#0
        l-load tmp%7#0 1                                                                    arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%8#0,tmp%7#0
        l-load tmp%8#0 1                                                                    arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%7#0,tmp%8#0
        &&                                                                                  arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0,tmp%9#0
        assert                                                                              arr#0,aggregate%array_length%1#0,aggregate%array_trimmed%0#0
        // array/immutable.py:189
        // assert arr[-1] == (UInt64(5), UInt64(6))
        l-load aggregate%array_length%1#0 1                                                 arr#0,aggregate%array_trimmed%0#0,aggregate%array_length%1#0
        int 1                                                                               arr#0,aggregate%array_trimmed%0#0,aggregate%array_length%1#0,1
        -                                                                                   arr#0,aggregate%array_trimmed%0#0,tmp%11#0
        int 16                                                                              arr#0,aggregate%array_trimmed%0#0,tmp%11#0,16
        *                                                                                   arr#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0
        l-load aggregate%array_trimmed%0#0 1                                                arr#0,aggregate%bytes_offset%1#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%1#0 1                                                 arr#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0
        int 16                                                                              arr#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%1#0,16
        extract3 // on error: index access is out of bounds                                 arr#0,aggregate%encoded_element%1#0
        l-load-copy aggregate%encoded_element%1#0 0                                         arr#0,aggregate%encoded_element%1#0,aggregate%encoded_element%1#0 (copy)
        int 0                                                                               arr#0,aggregate%encoded_element%1#0,aggregate%encoded_element%1#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%encoded_element%1#0,aggregate%item0%1#0
        l-load aggregate%encoded_element%1#0 1                                              arr#0,aggregate%item0%1#0,aggregate%encoded_element%1#0
        int 8                                                                               arr#0,aggregate%item0%1#0,aggregate%encoded_element%1#0,8
        extract_uint64                                                                      arr#0,aggregate%item0%1#0,aggregate%item1%1#0
        l-load aggregate%item0%1#0 1                                                        arr#0,aggregate%item1%1#0,aggregate%item0%1#0
        int 5                                                                               arr#0,aggregate%item1%1#0,aggregate%item0%1#0,5
        ==                                                                                  arr#0,aggregate%item1%1#0,tmp%12#0
        l-load aggregate%item1%1#0 1                                                        arr#0,tmp%12#0,aggregate%item1%1#0
        int 6                                                                               arr#0,tmp%12#0,aggregate%item1%1#0,6
        ==                                                                                  arr#0,tmp%12#0,tmp%13#0
        l-load tmp%12#0 1                                                                   arr#0,tmp%13#0,tmp%12#0
        l-load tmp%13#0 1                                                                   arr#0,tmp%12#0,tmp%13#0
        &&                                                                                  arr#0,tmp%14#0
        assert                                                                              arr#0
        // array/immutable.py:191
        // arr = arr.pop()
        l-load arr#0 0                                                                      arr#0
        int 16                                                                              arr#0,16
        callsub dynamic_array_pop_fixed_size                                                tmp%15#0,arr#0
        l-store arr#0 1                                                                     arr#0,tmp%15#0
        pop 1                                                                               arr#0
        // array/immutable.py:192
        // assert arr.length == 4
        l-load-copy arr#0 0                                                                 arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0
        l-load-copy aggregate%array_length%3#0 0                                            arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 4                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),4
        ==                                                                                  arr#0,aggregate%array_length%3#0,tmp%20#0
        assert                                                                              arr#0,aggregate%array_length%3#0
        // array/immutable.py:193
        // assert arr[0] == (UInt64(1), UInt64(2))
        l-load-copy arr#0 1                                                                 arr#0,aggregate%array_length%3#0,arr#0 (copy)
        extract 2 0                                                                         arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0
        l-load-copy arr#0 2                                                                 arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,arr#0 (copy)
        extract 2 16                                                                        arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%encoded_element%2#0
        l-load-copy aggregate%encoded_element%2#0 0                                         arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%encoded_element%2#0,aggregate%encoded_element%2#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%encoded_element%2#0,aggregate%encoded_element%2#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%encoded_element%2#0,aggregate%item0%2#0
        l-load aggregate%encoded_element%2#0 1                                              arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item0%2#0,aggregate%encoded_element%2#0
        int 8                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item0%2#0,aggregate%encoded_element%2#0,8
        extract_uint64                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item0%2#0,aggregate%item1%2#0
        l-load aggregate%item0%2#0 1                                                        arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item1%2#0,aggregate%item0%2#0
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item1%2#0,aggregate%item0%2#0,1
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,aggregate%item1%2#0,tmp%21#0
        l-load aggregate%item1%2#0 1                                                        arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%21#0,aggregate%item1%2#0
        int 2                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%21#0,aggregate%item1%2#0,2
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%21#0,tmp%22#0
        l-load tmp%21#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%22#0,tmp%21#0
        l-load tmp%22#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%21#0,tmp%22#0
        &&                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0,tmp%23#0
        assert                                                                              arr#0,aggregate%array_length%3#0,aggregate%array_trimmed%2#0
        // array/immutable.py:194
        // assert arr[-1] == (UInt64(4), UInt64(5))
        l-load aggregate%array_length%3#0 1                                                 arr#0,aggregate%array_trimmed%2#0,aggregate%array_length%3#0
        int 1                                                                               arr#0,aggregate%array_trimmed%2#0,aggregate%array_length%3#0,1
        -                                                                                   arr#0,aggregate%array_trimmed%2#0,tmp%25#0
        int 16                                                                              arr#0,aggregate%array_trimmed%2#0,tmp%25#0,16
        *                                                                                   arr#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%3#0
        l-load aggregate%array_trimmed%2#0 1                                                arr#0,aggregate%bytes_offset%3#0,aggregate%array_trimmed%2#0
        l-load aggregate%bytes_offset%3#0 1                                                 arr#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%3#0
        int 16                                                                              arr#0,aggregate%array_trimmed%2#0,aggregate%bytes_offset%3#0,16
        extract3 // on error: index access is out of bounds                                 arr#0,aggregate%encoded_element%3#0
        l-load-copy aggregate%encoded_element%3#0 0                                         arr#0,aggregate%encoded_element%3#0,aggregate%encoded_element%3#0 (copy)
        int 0                                                                               arr#0,aggregate%encoded_element%3#0,aggregate%encoded_element%3#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%encoded_element%3#0,aggregate%item0%3#0
        l-load aggregate%encoded_element%3#0 1                                              arr#0,aggregate%item0%3#0,aggregate%encoded_element%3#0
        int 8                                                                               arr#0,aggregate%item0%3#0,aggregate%encoded_element%3#0,8
        extract_uint64                                                                      arr#0,aggregate%item0%3#0,aggregate%item1%3#0
        l-load aggregate%item0%3#0 1                                                        arr#0,aggregate%item1%3#0,aggregate%item0%3#0
        int 4                                                                               arr#0,aggregate%item1%3#0,aggregate%item0%3#0,4
        ==                                                                                  arr#0,aggregate%item1%3#0,tmp%26#0
        l-load aggregate%item1%3#0 1                                                        arr#0,tmp%26#0,aggregate%item1%3#0
        int 5                                                                               arr#0,tmp%26#0,aggregate%item1%3#0,5
        ==                                                                                  arr#0,tmp%26#0,tmp%27#0
        l-load tmp%26#0 1                                                                   arr#0,tmp%27#0,tmp%26#0
        l-load tmp%27#0 1                                                                   arr#0,tmp%26#0,tmp%27#0
        &&                                                                                  arr#0,tmp%28#0
        assert                                                                              arr#0
        // array/immutable.py:195
        // self.c = arr
        byte "c"                                                                            arr#0,"c"
        l-load arr#0 1                                                                      "c",arr#0
        app_global_put
        // array/immutable.py:179
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array[routing]() -> void:
subroutine test_fixed_size_named_tuple_array:
    test_fixed_size_named_tuple_array_block@0:
        // array/immutable.py:199
        // arr = ImmutableArray[MyTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr#0
        // array/immutable.py:202
        // for i in urange(5):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_fixed_size_named_tuple_array_for_header@2

    test_fixed_size_named_tuple_array_for_header@2:
        // array/immutable.py:202
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%0#0
        bz test_fixed_size_named_tuple_array_after_for@5 ; b test_fixed_size_named_tuple_array_for_body@3 

    test_fixed_size_named_tuple_array_for_body@3:
        // array/immutable.py:203
        // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 2                                                                               i#0,i#0 (copy),2
        %                                                                                   i#0,tmp%2#0
        !                                                                                   i#0,tmp%3#0
        l-load-copy i#0 1                                                                   i#0,tmp%3#0,i#0 (copy)
        int 3                                                                               i#0,tmp%3#0,i#0 (copy),3
        *                                                                                   i#0,tmp%3#0,tmp%4#0
        int 2                                                                               i#0,tmp%3#0,tmp%4#0,2
        %                                                                                   i#0,tmp%3#0,tmp%5#0
        !                                                                                   i#0,tmp%3#0,tmp%6#0
        l-load-copy i#0 2                                                                   i#0,tmp%3#0,tmp%6#0,i#0 (copy)
        itob                                                                                i#0,tmp%3#0,tmp%6#0,aggregate%val_as_bytes%0#0
        byte 0x00                                                                           i#0,tmp%3#0,tmp%6#0,aggregate%val_as_bytes%0#0,0x00
        int 0                                                                               i#0,tmp%3#0,tmp%6#0,aggregate%val_as_bytes%0#0,0x00,0
        l-load tmp%3#0 4                                                                    i#0,tmp%6#0,aggregate%val_as_bytes%0#0,0x00,0,tmp%3#0
        setbit                                                                              i#0,tmp%6#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0
        int 1                                                                               i#0,tmp%6#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0,1
        l-load tmp%6#0 3                                                                    i#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0,1,tmp%6#0
        setbit                                                                              i#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                 i#0,aggregate%set_bit%0#0,aggregate%val_as_bytes%0#0
        l-load aggregate%set_bit%0#0 1                                                      i#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0
        concat                                                                              i#0,aggregate%head%1#0
        v-load arr#0                                                                        i#0,aggregate%head%1#0,arr#0
        l-store-copy arr#0 1                                                                i#0,arr#0,aggregate%head%1#0,arr#0 (copy)
        l-load aggregate%head%1#0 1                                                         i#0,arr#0,arr#0 (copy),aggregate%head%1#0
        concat // on error: max array length exceeded                                       i#0,arr#0,concat%0#0
        l-load arr#0 1                                                                      i#0,concat%0#0,arr#0
        int 0                                                                               i#0,concat%0#0,arr#0,0
        extract_uint16                                                                      i#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               i#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   i#0,concat%0#0,add%0#0
        itob                                                                                i#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         i#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 i#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           i#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:202
        // for i in urange(5):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_fixed_size_named_tuple_array_for_header@2

    test_fixed_size_named_tuple_array_after_for@5:
        // array/immutable.py:205
        // assert arr.length == 5
        v-load arr#0                                                                        arr#0
        l-store-copy arr#0 0                                                                arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%1#0
        int 5                                                                               arr#0,aggregate%array_length%1#0,5
        ==                                                                                  arr#0,tmp%9#0
        assert                                                                              arr#0
        // array/immutable.py:206
        // foo, bar, baz = arr[0]
        l-load-copy arr#0 0                                                                 arr#0,arr#0 (copy)
        extract 2 9                                                                         arr#0,aggregate%encoded_element%0#0
        l-load-copy aggregate%encoded_element%0#0 0                                         arr#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy)
        int 0                                                                               arr#0,aggregate%encoded_element%0#0,aggregate%encoded_element%0#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%encoded_element%0#0,foo#0
        l-load-copy aggregate%encoded_element%0#0 1                                         arr#0,aggregate%encoded_element%0#0,foo#0,aggregate%encoded_element%0#0 (copy)
        int 64                                                                              arr#0,aggregate%encoded_element%0#0,foo#0,aggregate%encoded_element%0#0 (copy),64
        getbit                                                                              arr#0,aggregate%encoded_element%0#0,foo#0,bar#0
        l-load aggregate%encoded_element%0#0 2                                              arr#0,foo#0,bar#0,aggregate%encoded_element%0#0
        int 65                                                                              arr#0,foo#0,bar#0,aggregate%encoded_element%0#0,65
        getbit                                                                              arr#0,foo#0,bar#0,baz#0
        // array/immutable.py:207
        // assert foo == 0
        l-load foo#0 2                                                                      arr#0,bar#0,baz#0,foo#0
        !                                                                                   arr#0,bar#0,baz#0,tmp%10#0
        assert                                                                              arr#0,bar#0,baz#0
        // array/immutable.py:208
        // assert bar
        l-load bar#0 1                                                                      arr#0,baz#0,bar#0
        assert                                                                              arr#0,baz#0
        // array/immutable.py:209
        // assert baz
        l-load baz#0 0                                                                      arr#0,baz#0
        assert                                                                              arr#0
        // array/immutable.py:210
        // self.d = arr
        byte "d"                                                                            arr#0,"d"
        l-load arr#0 1                                                                      "d",arr#0
        app_global_put
        // array/immutable.py:197
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array[routing]() -> void:
subroutine test_dynamic_sized_tuple_array:
    test_dynamic_sized_tuple_array_block@0:
        // array/immutable.py:214
        // arr = ImmutableArray[tuple[UInt64, Bytes]]()
        byte 0x0000                                                                         0x0000
        v-store arr#0
        // array/immutable.py:217
        // for i in urange(5):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_dynamic_sized_tuple_array_for_header@2

    test_dynamic_sized_tuple_array_for_header@2:
        // array/immutable.py:217
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%0#0
        bz test_dynamic_sized_tuple_array_after_for@5 ; b test_dynamic_sized_tuple_array_for_body@3 

    test_dynamic_sized_tuple_array_for_body@3:
        // array/immutable.py:218
        // arr = arr.append((i + 1, op.bzero(i)))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 1                                                                               i#0,i#0 (copy),1
        +                                                                                   i#0,tmp%2#0
        l-load i#0 1                                                                        tmp%2#0,i#0
        bzero                                                                               tmp%2#0,tmp%3#0
        v-load arr#0                                                                        tmp%2#0,tmp%3#0,arr#0
        l-store-copy arr#0 0                                                                tmp%2#0,tmp%3#0,arr#0,arr#0 (copy)
        int 0                                                                               tmp%2#0,tmp%3#0,arr#0,arr#0 (copy),0
        extract_uint16                                                                      tmp%2#0,tmp%3#0,arr#0,extract_uint16%0#0
        l-load arr#0 1                                                                      tmp%2#0,tmp%3#0,extract_uint16%0#0,arr#0
        extract 2 0                                                                         tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0
        l-load-copy tmp%2#0 3                                                               tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,tmp%2#0 (copy)
        itob                                                                                tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0
        l-load-copy tmp%3#0 3                                                               tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,tmp%3#0 (copy)
        len                                                                                 tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length%0#0
        itob                                                                                tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%as_bytes%1#0
        extract 6 2                                                                         tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length_uint16%0#0
        l-load tmp%3#0 4                                                                    tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length_uint16%0#0,tmp%3#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%encoded_value%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                 tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%val_as_bytes%0#0
        byte 0x000a                                                                         tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%val_as_bytes%0#0,0x000a
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%head%1#0
        l-load aggregate%encoded_value%0#0 1                                                tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%head%1#0,aggregate%encoded_value%0#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%0#0
        byte 0x0002                                                                         tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%0#0,0x0002
        l-load aggregate%concat%0#0 1                                                       tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,0x0002,aggregate%concat%0#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%1#0
        l-load extract_uint16%0#0 2                                                         tmp%2#0,extract_to_end%0#0,aggregate%concat%1#0,extract_uint16%0#0
        l-load extract_to_end%0#0 2                                                         tmp%2#0,aggregate%concat%1#0,extract_uint16%0#0,extract_to_end%0#0
        int 1                                                                               tmp%2#0,aggregate%concat%1#0,extract_uint16%0#0,extract_to_end%0#0,1
        l-load aggregate%concat%1#0 3                                                       tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,1,aggregate%concat%1#0
        callsub dynamic_array_concat_dynamic_element                                        tmp%2#0,arr#0
        v-store arr#0                                                                       tmp%2#0
        l-load tmp%2#0 0                                                                    tmp%2#0
        v-store i#0
        b test_dynamic_sized_tuple_array_for_header@2

    test_dynamic_sized_tuple_array_after_for@5:
        // array/immutable.py:220
        // assert arr.length == 5
        v-load arr#0                                                                        arr#0
        int 0                                                                               arr#0,0
        extract_uint16                                                                      aggregate%array_length%1#0
        l-store-copy aggregate%array_length%1#0 0                                           aggregate%array_length%1#0,aggregate%array_length%1#0 (copy)
        v-store aggregate%array_length%1#0                                                  aggregate%array_length%1#0
        l-load aggregate%array_length%1#0 0                                                 aggregate%array_length%1#0
        int 5                                                                               aggregate%array_length%1#0,5
        ==                                                                                  tmp%6#0
        assert
        // array/immutable.py:221
        // for i in urange(5):
        int 0                                                                               value_internal%1#0
        v-store i#0
        b test_dynamic_sized_tuple_array_for_header@6

    test_dynamic_sized_tuple_array_for_header@6:
        // array/immutable.py:221
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%1#0
        bz test_dynamic_sized_tuple_array_after_for@9 ; b test_dynamic_sized_tuple_array_for_body@7 

    test_dynamic_sized_tuple_array_for_body@7:
        // array/immutable.py:222
        // assert arr[i][0] == i + 1, "expected 1st element to be correct"
        v-load arr#0                                                                        arr#0
        extract 2 0                                                                         aggregate%array_head_and_tail%0#0
        v-load i#0                                                                          aggregate%array_head_and_tail%0#0,i#0
        l-store-copy i#0 1                                                                  i#0,aggregate%array_head_and_tail%0#0,i#0 (copy)
        int 2                                                                               i#0,aggregate%array_head_and_tail%0#0,i#0 (copy),2
        *                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 1                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%item_offset_offset%0#0 1                                           i#0,aggregate%array_head_and_tail%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%item_offset_offset%0#0
        extract_uint16                                                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load-copy i#0 2                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,i#0 (copy)
        int 1                                                                               i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,i#0 (copy),1
        +                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0
        v-load aggregate%array_length%1#0                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%1#0
        l-load-copy aggregate%next_index%0#0 1                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%1#0,aggregate%next_index%0#0 (copy)
        - // on error: index access is out of bounds                                        i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 3                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%array_head_and_tail%0#0 (copy)
        len                                                                                 i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0
        l-load-copy aggregate%next_index%0#0 2                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy)
        int 2                                                                               i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy),2
        *                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 5                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%next_item_offset_offset%0#0 1                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%next_item_offset_offset%0#0
        extract_uint16                                                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%end_of_array%0#0 1                                                 i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%next_item_offset%0#0,aggregate%end_of_array%0#0
        l-load aggregate%next_item_offset%0#0 1                                             i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%has_next%0#0 2                                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0,aggregate%has_next%0#0
        select                                                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0
        l-load aggregate%array_head_and_tail%0#0 3                                          i#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0
        l-load aggregate%item_offset%0#0 3                                                  i#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load aggregate%end_offset%0#0 2                                                   i#0,aggregate%next_index%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%end_offset%0#0
        substring3                                                                          i#0,aggregate%next_index%0#0,aggregate%substring3%0#0
        l-load-copy aggregate%substring3%0#0 0                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy)
        int 0                                                                               i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy),0
        extract_uint64                                                                      i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0
        l-load-copy aggregate%substring3%0#0 1                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%substring3%0#0 (copy)
        int 8                                                                               i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%substring3%0#0 (copy),8
        extract_uint16                                                                      i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0
        l-load-copy aggregate%substring3%0#0 2                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%substring3%0#0 (copy)
        len                                                                                 i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        l-load aggregate%substring3%0#0 3                                                   i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0,aggregate%substring3%0#0
        l-load aggregate%extract_uint16%0#0 2                                               i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%len%0#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0
        l-load aggregate%len%0#0 2                                                          i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        substring3                                                                          i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%substring3%1#0
        extract 2 0                                                                         i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item0%0#0 1                                                        i#0,aggregate%next_index%0#0,aggregate%item1%0#0,aggregate%item0%0#0
        l-load-copy aggregate%next_index%0#0 2                                              i#0,aggregate%next_index%0#0,aggregate%item1%0#0,aggregate%item0%0#0,aggregate%next_index%0#0 (copy)
        ==                                                                                  i#0,aggregate%next_index%0#0,aggregate%item1%0#0,tmp%8#0
        assert // expected 1st element to be correct                                        i#0,aggregate%next_index%0#0,aggregate%item1%0#0
        // array/immutable.py:223
        // assert arr[i][1].length == i, "expected 2nd element to be correct"
        l-load aggregate%item1%0#0 0                                                        i#0,aggregate%next_index%0#0,aggregate%item1%0#0
        len                                                                                 i#0,aggregate%next_index%0#0,tmp%9#0
        l-load i#0 2                                                                        aggregate%next_index%0#0,tmp%9#0,i#0
        ==                                                                                  aggregate%next_index%0#0,tmp%10#0
        assert // expected 2nd element to be correct                                        aggregate%next_index%0#0
        l-load aggregate%next_index%0#0 0                                                   aggregate%next_index%0#0
        v-store i#0
        b test_dynamic_sized_tuple_array_for_header@6

    test_dynamic_sized_tuple_array_after_for@9:
        // array/immutable.py:225
        // arr = arr.pop()
        v-load arr#0                                                                        arr#0
        callsub dynamic_array_pop_dynamic_element                                           tmp%11#0,arr#0
        l-store arr#0 1                                                                     arr#0,tmp%11#0
        pop 1                                                                               arr#0
        // array/immutable.py:226
        // assert arr.length == 4
        l-load-copy arr#0 0                                                                 arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0
        l-load-copy aggregate%array_length%3#0 0                                            arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 4                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),4
        ==                                                                                  arr#0,aggregate%array_length%3#0,tmp%16#0
        assert                                                                              arr#0,aggregate%array_length%3#0
        // array/immutable.py:227
        // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
        l-load-copy arr#0 1                                                                 arr#0,aggregate%array_length%3#0,arr#0 (copy)
        extract 2 0                                                                         arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 0                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%array_head_and_tail%1#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%array_head_and_tail%1#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0
        l-load-copy aggregate%array_length%3#0 2                                            arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%array_length%3#0 (copy)
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%array_length%3#0 (copy),1
        - // on error: index access is out of bounds                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 2                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%array_head_and_tail%1#0 (copy)
        len                                                                                 arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 3                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy)
        int 2                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),2
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%1#0
        l-load-copy aggregate%end_of_array%1#0 1                                            arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%1#0,aggregate%end_of_array%1#0 (copy)
        l-load aggregate%next_item_offset%1#0 1                                             arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_of_array%1#0 (copy),aggregate%next_item_offset%1#0
        l-load-copy aggregate%has_next%1#0 3                                                arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_of_array%1#0 (copy),aggregate%next_item_offset%1#0,aggregate%has_next%1#0 (copy)
        select                                                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 4                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%item_offset%1#0 4                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset%1#0
        l-load aggregate%end_offset%1#0 2                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset%1#0,aggregate%end_offset%1#0
        substring3                                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0
        l-load-copy aggregate%substring3%2#0 0                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%substring3%2#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%substring3%2#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0
        l-load-copy aggregate%substring3%2#0 1                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%substring3%2#0 (copy)
        int 8                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%substring3%2#0 (copy),8
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0
        l-load-copy aggregate%substring3%2#0 2                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%substring3%2#0 (copy)
        len                                                                                 arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%len%1#0
        l-load aggregate%substring3%2#0 3                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%len%1#0,aggregate%substring3%2#0
        l-load aggregate%extract_uint16%1#0 2                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%len%1#0,aggregate%substring3%2#0,aggregate%extract_uint16%1#0
        l-load aggregate%len%1#0 2                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%substring3%2#0,aggregate%extract_uint16%1#0,aggregate%len%1#0
        substring3                                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%substring3%3#0
        extract 2 0                                                                         arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%item1%1#0
        l-load aggregate%item0%1#0 1                                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,aggregate%item0%1#0
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,aggregate%item0%1#0,1
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,tmp%17#0
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,tmp%17#0,0
        bzero                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,tmp%17#0,tmp%18#0
        l-load aggregate%item1%1#0 2                                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,tmp%18#0,aggregate%item1%1#0
        l-load tmp%18#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,aggregate%item1%1#0,tmp%18#0
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,tmp%19#0
        l-load tmp%17#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%19#0,tmp%17#0
        l-load tmp%19#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,tmp%19#0
        &&                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%20#0
        assert // expected 1, 0                                                             arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0
        // array/immutable.py:228
        // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
        l-load-copy aggregate%has_next%1#0 1                                                arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%has_next%1#0 (copy)
        int 2                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%has_next%1#0 (copy),2
        *                                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset_offset%2#0
        l-load-copy aggregate%array_head_and_tail%1#0 3                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset_offset%2#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%item_offset_offset%2#0 1                                           arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset_offset%2#0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0
        l-load aggregate%has_next%1#0 2                                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%1#0
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%1#0,1
        +                                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0
        l-load aggregate%array_length%3#0 4                                                 arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%array_length%3#0
        l-load-copy aggregate%next_index%2#0 1                                              arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%array_length%3#0,aggregate%next_index%2#0 (copy)
        - // on error: index access is out of bounds                                        arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%has_next%2#0
        l-load aggregate%next_index%2#0 1                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_index%2#0
        int 2                                                                               arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_index%2#0,2
        *                                                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset_offset%2#0
        l-load-copy aggregate%array_head_and_tail%1#0 4                                     arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset_offset%2#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%next_item_offset_offset%2#0 1                                      arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%next_item_offset_offset%2#0
        extract_uint16                                                                      arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset%2#0
        l-load aggregate%end_of_array%1#0 3                                                 arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset%2#0,aggregate%end_of_array%1#0
        l-load aggregate%next_item_offset%2#0 1                                             arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%2#0
        l-load aggregate%has_next%2#0 2                                                     arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%2#0,aggregate%has_next%2#0
        select                                                                              arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0
        l-load aggregate%array_head_and_tail%1#0 2                                          arr#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0,aggregate%array_head_and_tail%1#0
        l-load aggregate%item_offset%2#0 2                                                  arr#0,aggregate%end_offset%2#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0
        l-load aggregate%end_offset%2#0 2                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0
        substring3                                                                          arr#0,aggregate%substring3%4#0
        l-load-copy aggregate%substring3%4#0 0                                              arr#0,aggregate%substring3%4#0,aggregate%substring3%4#0 (copy)
        int 0                                                                               arr#0,aggregate%substring3%4#0,aggregate%substring3%4#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%substring3%4#0,aggregate%item0%2#0
        l-load-copy aggregate%substring3%4#0 1                                              arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%substring3%4#0 (copy)
        int 8                                                                               arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%substring3%4#0 (copy),8
        extract_uint16                                                                      arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0
        l-load-copy aggregate%substring3%4#0 2                                              arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%substring3%4#0 (copy)
        len                                                                                 arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%len%2#0
        l-load aggregate%substring3%4#0 3                                                   arr#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%len%2#0,aggregate%substring3%4#0
        l-load aggregate%extract_uint16%2#0 2                                               arr#0,aggregate%item0%2#0,aggregate%len%2#0,aggregate%substring3%4#0,aggregate%extract_uint16%2#0
        l-load aggregate%len%2#0 2                                                          arr#0,aggregate%item0%2#0,aggregate%substring3%4#0,aggregate%extract_uint16%2#0,aggregate%len%2#0
        substring3                                                                          arr#0,aggregate%item0%2#0,aggregate%substring3%5#0
        extract 2 0                                                                         arr#0,aggregate%item0%2#0,aggregate%item1%2#0
        l-load aggregate%item0%2#0 1                                                        arr#0,aggregate%item1%2#0,aggregate%item0%2#0
        int 4                                                                               arr#0,aggregate%item1%2#0,aggregate%item0%2#0,4
        ==                                                                                  arr#0,aggregate%item1%2#0,tmp%23#0
        int 3                                                                               arr#0,aggregate%item1%2#0,tmp%23#0,3
        bzero                                                                               arr#0,aggregate%item1%2#0,tmp%23#0,tmp%24#0
        l-load aggregate%item1%2#0 2                                                        arr#0,tmp%23#0,tmp%24#0,aggregate%item1%2#0
        l-load tmp%24#0 1                                                                   arr#0,tmp%23#0,aggregate%item1%2#0,tmp%24#0
        ==                                                                                  arr#0,tmp%23#0,tmp%25#0
        l-load tmp%23#0 1                                                                   arr#0,tmp%25#0,tmp%23#0
        l-load tmp%25#0 1                                                                   arr#0,tmp%23#0,tmp%25#0
        &&                                                                                  arr#0,tmp%26#0
        assert // expected 4, 3                                                             arr#0
        // array/immutable.py:229
        // self.e = arr
        byte "e"                                                                            arr#0,"e"
        l-load arr#0 1                                                                      "e",arr#0
        app_global_put
        // array/immutable.py:212
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array[routing]() -> void:
subroutine test_dynamic_sized_named_tuple_array:
    test_dynamic_sized_named_tuple_array_block@0:
        // array/immutable.py:233
        // arr = ImmutableArray[MyDynamicSizedTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr#0
        // array/immutable.py:236
        // for i in urange(5):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_dynamic_sized_named_tuple_array_for_header@2

    test_dynamic_sized_named_tuple_array_for_header@2:
        // array/immutable.py:236
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%0#0
        bz test_dynamic_sized_named_tuple_array_after_for@5 ; b test_dynamic_sized_named_tuple_array_for_body@3 

    test_dynamic_sized_named_tuple_array_for_body@3:
        // array/immutable.py:237
        // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 1                                                                               i#0,i#0 (copy),1
        +                                                                                   i#0,tmp%2#0
        l-load i#0 1                                                                        tmp%2#0,i#0
        callsub times                                                                       tmp%2#0,tmp%3#0
        v-load arr#0                                                                        tmp%2#0,tmp%3#0,arr#0
        l-store-copy arr#0 0                                                                tmp%2#0,tmp%3#0,arr#0,arr#0 (copy)
        int 0                                                                               tmp%2#0,tmp%3#0,arr#0,arr#0 (copy),0
        extract_uint16                                                                      tmp%2#0,tmp%3#0,arr#0,extract_uint16%0#0
        l-load arr#0 1                                                                      tmp%2#0,tmp%3#0,extract_uint16%0#0,arr#0
        extract 2 0                                                                         tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0
        l-load-copy tmp%2#0 3                                                               tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,tmp%2#0 (copy)
        itob                                                                                tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0
        l-load-copy tmp%3#0 3                                                               tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,tmp%3#0 (copy)
        len                                                                                 tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length%0#0
        itob                                                                                tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%as_bytes%1#0
        extract 6 2                                                                         tmp%2#0,tmp%3#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length_uint16%0#0
        l-load tmp%3#0 4                                                                    tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%length_uint16%0#0,tmp%3#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%0#0,aggregate%encoded_value%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                 tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%val_as_bytes%0#0
        byte 0x000a                                                                         tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%val_as_bytes%0#0,0x000a
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%0#0,aggregate%head%1#0
        l-load aggregate%encoded_value%0#0 1                                                tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%head%1#0,aggregate%encoded_value%0#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%0#0
        byte 0x0002                                                                         tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%0#0,0x0002
        l-load aggregate%concat%0#0 1                                                       tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,0x0002,aggregate%concat%0#0
        concat                                                                              tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%1#0
        l-load extract_uint16%0#0 2                                                         tmp%2#0,extract_to_end%0#0,aggregate%concat%1#0,extract_uint16%0#0
        l-load extract_to_end%0#0 2                                                         tmp%2#0,aggregate%concat%1#0,extract_uint16%0#0,extract_to_end%0#0
        int 1                                                                               tmp%2#0,aggregate%concat%1#0,extract_uint16%0#0,extract_to_end%0#0,1
        l-load aggregate%concat%1#0 3                                                       tmp%2#0,extract_uint16%0#0,extract_to_end%0#0,1,aggregate%concat%1#0
        callsub dynamic_array_concat_dynamic_element                                        tmp%2#0,arr#0
        v-store arr#0                                                                       tmp%2#0
        l-load tmp%2#0 0                                                                    tmp%2#0
        v-store i#0
        b test_dynamic_sized_named_tuple_array_for_header@2

    test_dynamic_sized_named_tuple_array_after_for@5:
        // array/immutable.py:239
        // assert arr.length == 5
        v-load arr#0                                                                        arr#0
        int 0                                                                               arr#0,0
        extract_uint16                                                                      aggregate%array_length%1#0
        l-store-copy aggregate%array_length%1#0 0                                           aggregate%array_length%1#0,aggregate%array_length%1#0 (copy)
        v-store aggregate%array_length%1#0                                                  aggregate%array_length%1#0
        l-load aggregate%array_length%1#0 0                                                 aggregate%array_length%1#0
        int 5                                                                               aggregate%array_length%1#0,5
        ==                                                                                  tmp%6#0
        assert
        // array/immutable.py:240
        // for i in urange(5):
        int 0                                                                               value_internal%1#0
        v-store i#0
        b test_dynamic_sized_named_tuple_array_for_header@6

    test_dynamic_sized_named_tuple_array_for_header@6:
        // array/immutable.py:240
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%1#0
        bz test_dynamic_sized_named_tuple_array_after_for@9 ; b test_dynamic_sized_named_tuple_array_for_body@7 

    test_dynamic_sized_named_tuple_array_for_body@7:
        // array/immutable.py:241
        // assert arr[i][0] == i + 1, "expected 1st element to be correct"
        v-load arr#0                                                                        arr#0
        extract 2 0                                                                         aggregate%array_head_and_tail%0#0
        v-load i#0                                                                          aggregate%array_head_and_tail%0#0,i#0
        l-store-copy i#0 1                                                                  i#0,aggregate%array_head_and_tail%0#0,i#0 (copy)
        int 2                                                                               i#0,aggregate%array_head_and_tail%0#0,i#0 (copy),2
        *                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 1                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%item_offset_offset%0#0 1                                           i#0,aggregate%array_head_and_tail%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%item_offset_offset%0#0
        extract_uint16                                                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load-copy i#0 2                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,i#0 (copy)
        int 1                                                                               i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,i#0 (copy),1
        +                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0
        v-load aggregate%array_length%1#0                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%1#0
        l-load-copy aggregate%next_index%0#0 1                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%1#0,aggregate%next_index%0#0 (copy)
        - // on error: index access is out of bounds                                        i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 3                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%array_head_and_tail%0#0 (copy)
        len                                                                                 i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0
        l-load-copy aggregate%next_index%0#0 2                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy)
        int 2                                                                               i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy),2
        *                                                                                   i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 5                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%next_item_offset_offset%0#0 1                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%next_item_offset_offset%0#0
        extract_uint16                                                                      i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%end_of_array%0#0 1                                                 i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%next_item_offset%0#0,aggregate%end_of_array%0#0
        l-load aggregate%next_item_offset%0#0 1                                             i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%has_next%0#0 2                                                     i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0,aggregate%has_next%0#0
        select                                                                              i#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0
        l-load aggregate%array_head_and_tail%0#0 3                                          i#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0
        l-load aggregate%item_offset%0#0 3                                                  i#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load aggregate%end_offset%0#0 2                                                   i#0,aggregate%next_index%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%end_offset%0#0
        substring3                                                                          i#0,aggregate%next_index%0#0,aggregate%substring3%0#0
        l-load-copy aggregate%substring3%0#0 0                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy)
        int 0                                                                               i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy),0
        extract_uint64                                                                      i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0
        l-load-copy aggregate%substring3%0#0 1                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%substring3%0#0 (copy)
        int 8                                                                               i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%substring3%0#0 (copy),8
        extract_uint16                                                                      i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0
        l-load-copy aggregate%substring3%0#0 2                                              i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%substring3%0#0 (copy)
        len                                                                                 i#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        l-load aggregate%substring3%0#0 3                                                   i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0,aggregate%substring3%0#0
        l-load aggregate%extract_uint16%0#0 2                                               i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%len%0#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0
        l-load aggregate%len%0#0 2                                                          i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        substring3                                                                          i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%substring3%1#0
        extract 2 0                                                                         i#0,aggregate%next_index%0#0,aggregate%item0%0#0,aggregate%item1%0#0
        l-load aggregate%item0%0#0 1                                                        i#0,aggregate%next_index%0#0,aggregate%item1%0#0,aggregate%item0%0#0
        l-load-copy aggregate%next_index%0#0 2                                              i#0,aggregate%next_index%0#0,aggregate%item1%0#0,aggregate%item0%0#0,aggregate%next_index%0#0 (copy)
        ==                                                                                  i#0,aggregate%next_index%0#0,aggregate%item1%0#0,tmp%8#0
        assert // expected 1st element to be correct                                        i#0,aggregate%next_index%0#0,aggregate%item1%0#0
        // array/immutable.py:242
        // assert arr[i][1] == times(i), "expected 2nd element to be correct"
        l-load i#0 2                                                                        aggregate%next_index%0#0,aggregate%item1%0#0,i#0
        callsub times                                                                       aggregate%next_index%0#0,aggregate%item1%0#0,tmp%9#0
        l-load aggregate%item1%0#0 1                                                        aggregate%next_index%0#0,tmp%9#0,aggregate%item1%0#0
        l-load tmp%9#0 1                                                                    aggregate%next_index%0#0,aggregate%item1%0#0,tmp%9#0
        ==                                                                                  aggregate%next_index%0#0,tmp%10#0
        assert // expected 2nd element to be correct                                        aggregate%next_index%0#0
        l-load aggregate%next_index%0#0 0                                                   aggregate%next_index%0#0
        v-store i#0
        b test_dynamic_sized_named_tuple_array_for_header@6

    test_dynamic_sized_named_tuple_array_after_for@9:
        // array/immutable.py:244
        // arr = arr.pop()
        v-load arr#0                                                                        arr#0
        callsub dynamic_array_pop_dynamic_element                                           tmp%11#0,arr#0
        l-store arr#0 1                                                                     arr#0,tmp%11#0
        pop 1                                                                               arr#0
        // array/immutable.py:245
        // assert arr.length == 4
        l-load-copy arr#0 0                                                                 arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0
        l-load-copy aggregate%array_length%3#0 0                                            arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy)
        int 4                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_length%3#0 (copy),4
        ==                                                                                  arr#0,aggregate%array_length%3#0,tmp%16#0
        assert                                                                              arr#0,aggregate%array_length%3#0
        // array/immutable.py:246
        // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
        l-load-copy arr#0 1                                                                 arr#0,aggregate%array_length%3#0,arr#0 (copy)
        extract 2 0                                                                         arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 0                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%array_head_and_tail%1#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%array_head_and_tail%1#0 (copy),0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0
        l-load-copy aggregate%array_length%3#0 2                                            arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%array_length%3#0 (copy)
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%array_length%3#0 (copy),1
        - // on error: index access is out of bounds                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 2                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%array_head_and_tail%1#0 (copy)
        len                                                                                 arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 3                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy)
        int 2                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),2
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%1#0
        l-load-copy aggregate%end_of_array%1#0 1                                            arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%1#0,aggregate%end_of_array%1#0 (copy)
        l-load aggregate%next_item_offset%1#0 1                                             arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_of_array%1#0 (copy),aggregate%next_item_offset%1#0
        l-load-copy aggregate%has_next%1#0 3                                                arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_of_array%1#0 (copy),aggregate%next_item_offset%1#0,aggregate%has_next%1#0 (copy)
        select                                                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0
        l-load-copy aggregate%array_head_and_tail%1#0 4                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%item_offset%1#0 4                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%end_offset%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset%1#0
        l-load aggregate%end_offset%1#0 2                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset%1#0,aggregate%end_offset%1#0
        substring3                                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0
        l-load-copy aggregate%substring3%2#0 0                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%substring3%2#0 (copy)
        int 0                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%substring3%2#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0
        l-load-copy aggregate%substring3%2#0 1                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%substring3%2#0 (copy)
        int 8                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%substring3%2#0 (copy),8
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0
        l-load-copy aggregate%substring3%2#0 2                                              arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%substring3%2#0 (copy)
        len                                                                                 arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%substring3%2#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%len%1#0
        l-load aggregate%substring3%2#0 3                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%extract_uint16%1#0,aggregate%len%1#0,aggregate%substring3%2#0
        l-load aggregate%extract_uint16%1#0 2                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%len%1#0,aggregate%substring3%2#0,aggregate%extract_uint16%1#0
        l-load aggregate%len%1#0 2                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%substring3%2#0,aggregate%extract_uint16%1#0,aggregate%len%1#0
        substring3                                                                          arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%substring3%3#0
        extract 2 0                                                                         arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item0%1#0,aggregate%item1%1#0
        l-load aggregate%item0%1#0 1                                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,aggregate%item0%1#0
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,aggregate%item0%1#0,1
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item1%1#0,tmp%17#0
        l-load aggregate%item1%1#0 1                                                        arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,aggregate%item1%1#0
        byte ""                                                                             arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,aggregate%item1%1#0,""
        ==                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,tmp%18#0
        l-load tmp%17#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%18#0,tmp%17#0
        l-load tmp%18#0 1                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%17#0,tmp%18#0
        &&                                                                                  arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,tmp%19#0
        assert // expected 1, 0                                                             arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0
        // array/immutable.py:247
        // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
        l-load-copy aggregate%has_next%1#0 1                                                arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%has_next%1#0 (copy)
        int 2                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%has_next%1#0 (copy),2
        *                                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset_offset%2#0
        l-load-copy aggregate%array_head_and_tail%1#0 3                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset_offset%2#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%item_offset_offset%2#0 1                                           arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%item_offset_offset%2#0
        extract_uint16                                                                      arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%has_next%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0
        l-load aggregate%has_next%1#0 2                                                     arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%1#0
        int 1                                                                               arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%1#0,1
        +                                                                                   arr#0,aggregate%array_length%3#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0
        l-load aggregate%array_length%3#0 4                                                 arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%array_length%3#0
        l-load-copy aggregate%next_index%2#0 1                                              arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%array_length%3#0,aggregate%next_index%2#0 (copy)
        - // on error: index access is out of bounds                                        arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%next_index%2#0,aggregate%has_next%2#0
        l-load aggregate%next_index%2#0 1                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_index%2#0
        int 2                                                                               arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_index%2#0,2
        *                                                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset_offset%2#0
        l-load-copy aggregate%array_head_and_tail%1#0 4                                     arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset_offset%2#0,aggregate%array_head_and_tail%1#0 (copy)
        l-load aggregate%next_item_offset_offset%2#0 1                                      arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%array_head_and_tail%1#0 (copy),aggregate%next_item_offset_offset%2#0
        extract_uint16                                                                      arr#0,aggregate%array_head_and_tail%1#0,aggregate%end_of_array%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset%2#0
        l-load aggregate%end_of_array%1#0 3                                                 arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%next_item_offset%2#0,aggregate%end_of_array%1#0
        l-load aggregate%next_item_offset%2#0 1                                             arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%has_next%2#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%2#0
        l-load aggregate%has_next%2#0 2                                                     arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_of_array%1#0,aggregate%next_item_offset%2#0,aggregate%has_next%2#0
        select                                                                              arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0
        l-load aggregate%array_head_and_tail%1#0 2                                          arr#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0,aggregate%array_head_and_tail%1#0
        l-load aggregate%item_offset%2#0 2                                                  arr#0,aggregate%end_offset%2#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0
        l-load aggregate%end_offset%2#0 2                                                   arr#0,aggregate%array_head_and_tail%1#0,aggregate%item_offset%2#0,aggregate%end_offset%2#0
        substring3                                                                          arr#0,aggregate%substring3%4#0
        l-load-copy aggregate%substring3%4#0 0                                              arr#0,aggregate%substring3%4#0,aggregate%substring3%4#0 (copy)
        int 0                                                                               arr#0,aggregate%substring3%4#0,aggregate%substring3%4#0 (copy),0
        extract_uint64                                                                      arr#0,aggregate%substring3%4#0,aggregate%item0%2#0
        l-load-copy aggregate%substring3%4#0 1                                              arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%substring3%4#0 (copy)
        int 8                                                                               arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%substring3%4#0 (copy),8
        extract_uint16                                                                      arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0
        l-load-copy aggregate%substring3%4#0 2                                              arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%substring3%4#0 (copy)
        len                                                                                 arr#0,aggregate%substring3%4#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%len%2#0
        l-load aggregate%substring3%4#0 3                                                   arr#0,aggregate%item0%2#0,aggregate%extract_uint16%2#0,aggregate%len%2#0,aggregate%substring3%4#0
        l-load aggregate%extract_uint16%2#0 2                                               arr#0,aggregate%item0%2#0,aggregate%len%2#0,aggregate%substring3%4#0,aggregate%extract_uint16%2#0
        l-load aggregate%len%2#0 2                                                          arr#0,aggregate%item0%2#0,aggregate%substring3%4#0,aggregate%extract_uint16%2#0,aggregate%len%2#0
        substring3                                                                          arr#0,aggregate%item0%2#0,aggregate%substring3%5#0
        extract 2 0                                                                         arr#0,aggregate%item0%2#0,aggregate%item1%2#0
        l-load aggregate%item0%2#0 1                                                        arr#0,aggregate%item1%2#0,aggregate%item0%2#0
        int 4                                                                               arr#0,aggregate%item1%2#0,aggregate%item0%2#0,4
        ==                                                                                  arr#0,aggregate%item1%2#0,tmp%22#0
        l-load aggregate%item1%2#0 1                                                        arr#0,tmp%22#0,aggregate%item1%2#0
        byte "   "                                                                          arr#0,tmp%22#0,aggregate%item1%2#0,"   "
        ==                                                                                  arr#0,tmp%22#0,tmp%23#0
        l-load tmp%22#0 1                                                                   arr#0,tmp%23#0,tmp%22#0
        l-load tmp%23#0 1                                                                   arr#0,tmp%22#0,tmp%23#0
        &&                                                                                  arr#0,tmp%24#0
        assert // expected 4, 3                                                             arr#0
        // array/immutable.py:248
        // self.f = arr
        byte "f"                                                                            arr#0,"f"
        l-load arr#0 1                                                                      "f",arr#0
        app_global_put
        // array/immutable.py:231
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log[routing]() -> void:
subroutine test_implicit_conversion_log:
    test_implicit_conversion_log_block@0:
        // array/immutable.py:250
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arr#0
        // array/immutable.py:252
        // log(arr)
        log
        // array/immutable.py:250
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit[routing]() -> void:
subroutine test_implicit_conversion_emit:
    test_implicit_conversion_emit_block@0:
        // array/immutable.py:254
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arr#0
        // array/immutable.py:256
        // arc4.emit("emit_test", arr)
        byte 0xfa40c0530002                                                                 arr#0,0xfa40c0530002
        l-load arr#0 1                                                                      0xfa40c0530002,arr#0
        concat                                                                              event%0#0
        log
        // array/immutable.py:254
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_nested_array[routing]() -> void:
subroutine test_nested_array:
    test_nested_array_block@0:
        // array/immutable.py:258
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                arr_to_add#0
        v-store arr_to_add#0
        txna ApplicationArgs 2                                                              arr#0
        v-store arr#0
        // array/immutable.py:263
        // for i in urange(arr_to_add):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_nested_array_for_header@2

    test_nested_array_for_header@2:
        // array/immutable.py:263
        // for i in urange(arr_to_add):
        v-load i#0                                                                          i#0
        v-load arr_to_add#0                                                                 i#0,arr_to_add#0
        <                                                                                   continue_looping%0#0
        bz test_nested_array_after_for@9 ; b test_nested_array_for_body@3

    test_nested_array_for_body@3:
        // array/immutable.py:264
        // extra_arr = ImmutableArray[UInt64]()
        byte 0x0000                                                                         0x0000
        v-store extra_arr#0
        // array/immutable.py:265
        // for j in urange(i):
        int 0                                                                               value_internal%1#0
        v-store j#0
        b test_nested_array_for_header@4

    test_nested_array_for_header@4:
        // array/immutable.py:265
        // for j in urange(i):
        v-load j#0                                                                          j#0
        v-load i#0                                                                          j#0,i#0
        <                                                                                   continue_looping%1#0
        bz test_nested_array_after_for@7 ; b test_nested_array_for_body@5

    test_nested_array_for_body@5:
        // array/immutable.py:266
        // extra_arr = extra_arr.append(j)
        v-load j#0                                                                          j#0
        l-store-copy j#0 0                                                                  j#0,j#0 (copy)
        itob                                                                                j#0,aggregate%val_as_bytes%0#0
        v-load extra_arr#0                                                                  j#0,aggregate%val_as_bytes%0#0,extra_arr#0
        l-store-copy extra_arr#0 1                                                          j#0,extra_arr#0,aggregate%val_as_bytes%0#0,extra_arr#0 (copy)
        l-load aggregate%val_as_bytes%0#0 1                                                 j#0,extra_arr#0,extra_arr#0 (copy),aggregate%val_as_bytes%0#0
        concat // on error: max array length exceeded                                       j#0,extra_arr#0,concat%0#0
        l-load extra_arr#0 1                                                                j#0,concat%0#0,extra_arr#0
        int 0                                                                               j#0,concat%0#0,extra_arr#0,0
        extract_uint16                                                                      j#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               j#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   j#0,concat%0#0,add%0#0
        itob                                                                                j#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         j#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 j#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           j#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          j#0,extra_arr#0
        v-store extra_arr#0                                                                 j#0
        // array/immutable.py:265
        // for j in urange(i):
        l-load j#0 0                                                                        j#0
        int 1                                                                               j#0,1
        +                                                                                   value_internal%1#0
        v-store j#0
        b test_nested_array_for_header@4

    test_nested_array_after_for@7:
        // array/immutable.py:267
        // arr = arr.append(extra_arr)
        v-load arr#0                                                                        arr#0
        l-store-copy arr#0 0                                                                arr#0,arr#0 (copy)
        int 0                                                                               arr#0,arr#0 (copy),0
        extract_uint16                                                                      arr#0,extract_uint16%1#0
        l-load arr#0 1                                                                      extract_uint16%1#0,arr#0
        extract 2 0                                                                         extract_uint16%1#0,extract_to_end%0#0
        byte 0x0002                                                                         extract_uint16%1#0,extract_to_end%0#0,0x0002
        v-load extra_arr#0                                                                  extract_uint16%1#0,extract_to_end%0#0,0x0002,extra_arr#0
        concat                                                                              extract_uint16%1#0,extract_to_end%0#0,aggregate%concat%0#0
        l-load extract_uint16%1#0 2                                                         extract_to_end%0#0,aggregate%concat%0#0,extract_uint16%1#0
        l-load extract_to_end%0#0 2                                                         aggregate%concat%0#0,extract_uint16%1#0,extract_to_end%0#0
        int 1                                                                               aggregate%concat%0#0,extract_uint16%1#0,extract_to_end%0#0,1
        l-load aggregate%concat%0#0 3                                                       extract_uint16%1#0,extract_to_end%0#0,1,aggregate%concat%0#0
        callsub dynamic_array_concat_dynamic_element                                        arr#0
        v-store arr#0
        // array/immutable.py:263
        // for i in urange(arr_to_add):
        v-load i#0                                                                          i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_nested_array_for_header@2

    test_nested_array_after_for@9:
        // array/immutable.py:270
        // totals = ImmutableArray[UInt64]()
        byte 0x0000                                                                         0x0000
        v-store totals#0
        // array/immutable.py:271
        // for inner_arr in arr:
        v-load arr#0                                                                        arr#0
        int 0                                                                               arr#0,0
        extract_uint16                                                                      aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        int 0                                                                               0
        v-store item_index_internal%0#0
        b test_nested_array_for_header@10

    test_nested_array_for_header@10:
        // array/immutable.py:271
        // for inner_arr in arr:
        v-load item_index_internal%0#0                                                      item_index_internal%0#0
        v-load aggregate%array_length%0#0                                                   item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                                   continue_looping%2#0
        bz test_nested_array_after_for@13 ; b test_nested_array_for_body@11

    test_nested_array_for_body@11:
        // array/immutable.py:271
        // for inner_arr in arr:
        v-load arr#0                                                                        arr#0
        extract 2 0                                                                         aggregate%array_head_and_tail%0#0
        v-load item_index_internal%0#0                                                      aggregate%array_head_and_tail%0#0,item_index_internal%0#0
        int 2                                                                               aggregate%array_head_and_tail%0#0,item_index_internal%0#0,2
        *                                                                                   aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 1                                     aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%item_offset_offset%0#0 1                                           aggregate%array_head_and_tail%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%item_offset_offset%0#0
        extract_uint16                                                                      aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 1                                     aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load-copy aggregate%item_offset%0#0 1                                             aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%item_offset%0#0 (copy)
        extract_uint16                                                                      aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_length%0#0
        int 8                                                                               aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_length%0#0,8
        *                                                                                   aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_length_in_bytes%0#0
        int 2                                                                               aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_length_in_bytes%0#0,2
        +                                                                                   aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_head_tail_length%0#0
        l-load aggregate%array_head_and_tail%0#0 2                                          aggregate%item_offset%0#0,aggregate%item_head_tail_length%0#0,aggregate%array_head_and_tail%0#0
        l-load aggregate%item_offset%0#0 2                                                  aggregate%item_head_tail_length%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load aggregate%item_head_tail_length%0#0 2                                        aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%item_head_tail_length%0#0
        extract3                                                                            inner_arr#0
        l-store-copy inner_arr#0 0                                                          inner_arr#0,inner_arr#0 (copy)
        v-store inner_arr#0                                                                 inner_arr#0
        // array/immutable.py:519
        // total = UInt64()
        int 0                                                                               inner_arr#0,0
        v-store total#0                                                                     inner_arr#0
        // array/immutable.py:520
        // for i in arr:
        l-load inner_arr#0 0                                                                inner_arr#0
        int 0                                                                               inner_arr#0,0
        extract_uint16                                                                      aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        int 0                                                                               0
        v-store item_index_internal%0#3
        b test_nested_array_for_header@15

    test_nested_array_for_header@15:
        // array/immutable.py:520
        // for i in arr:
        v-load item_index_internal%0#3                                                      item_index_internal%0#3
        v-load aggregate%array_length%1#0                                                   item_index_internal%0#3,aggregate%array_length%1#0
        <                                                                                   continue_looping%0#0
        bz test_nested_array_after_for@17 ; b test_nested_array_for_body@16

    test_nested_array_for_body@16:
        // array/immutable.py:520
        // for i in arr:
        v-load inner_arr#0                                                                  inner_arr#0
        extract 2 0                                                                         aggregate%array_trimmed%0#0
        v-load item_index_internal%0#3                                                      aggregate%array_trimmed%0#0,item_index_internal%0#3
        l-store-copy item_index_internal%0#3 1                                              item_index_internal%0#3,aggregate%array_trimmed%0#0,item_index_internal%0#3 (copy)
        int 8                                                                               item_index_internal%0#3,aggregate%array_trimmed%0#0,item_index_internal%0#3 (copy),8
        *                                                                                   item_index_internal%0#3,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        l-load aggregate%array_trimmed%0#0 1                                                item_index_internal%0#3,aggregate%bytes_offset%0#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%0#0 1                                                 item_index_internal%0#3,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        extract_uint64                                                                      item_index_internal%0#3,i#0
        // array/immutable.py:521
        // total += i
        v-load total#0                                                                      item_index_internal%0#3,i#0,total#0
        l-load i#0 1                                                                        item_index_internal%0#3,total#0,i#0
        +                                                                                   item_index_internal%0#3,total#0
        v-store total#0                                                                     item_index_internal%0#3
        l-load item_index_internal%0#3 0                                                    item_index_internal%0#3
        int 1                                                                               item_index_internal%0#3,1
        +                                                                                   item_index_internal%0#3
        v-store item_index_internal%0#3
        b test_nested_array_for_header@15

    test_nested_array_after_for@17:
        // array/immutable.py:272
        // totals = totals.append(sum_arr(inner_arr))
        v-load total#0                                                                      total#0
        itob                                                                                aggregate%val_as_bytes%1#0
        v-load totals#0                                                                     aggregate%val_as_bytes%1#0,totals#0
        l-store-copy totals#0 1                                                             totals#0,aggregate%val_as_bytes%1#0,totals#0 (copy)
        l-load aggregate%val_as_bytes%1#0 1                                                 totals#0,totals#0 (copy),aggregate%val_as_bytes%1#0
        concat // on error: max array length exceeded                                       totals#0,concat%1#0
        l-load totals#0 1                                                                   concat%1#0,totals#0
        int 0                                                                               concat%1#0,totals#0,0
        extract_uint16                                                                      concat%1#0,extract_uint16%2#0
        int 1                                                                               concat%1#0,extract_uint16%2#0,1
        +                                                                                   concat%1#0,add%1#0
        itob                                                                                concat%1#0,as_bytes%1#0
        extract 6 2                                                                         concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                 as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                           concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                          totals#0
        v-store totals#0
        v-load item_index_internal%0#0                                                      item_index_internal%0#0
        int 1                                                                               item_index_internal%0#0,1
        +                                                                                   item_index_internal%0#0
        v-store item_index_internal%0#0
        b test_nested_array_for_header@10

    test_nested_array_after_for@13:
        // array/immutable.py:258
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     0x151f7c75
        v-load totals#0                                                                     0x151f7c75,totals#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples[routing]() -> void:
subroutine test_bit_packed_tuples:
    test_bit_packed_tuples_block@0:
        // array/immutable.py:278
        // arr2 = ImmutableArray[TwoBoolTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr2#0
        // array/immutable.py:279
        // arr7 = ImmutableArray[SevenBoolTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr7#0
        // array/immutable.py:280
        // arr8 = ImmutableArray[EightBoolTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr8#0
        // array/immutable.py:281
        // arr9 = ImmutableArray[NineBoolTuple]()
        byte 0x0000                                                                         0x0000
        v-store arr9#0
        // array/immutable.py:287
        // for i in urange(5):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_bit_packed_tuples_for_header@2

    test_bit_packed_tuples_for_header@2:
        // array/immutable.py:287
        // for i in urange(5):
        v-load i#0                                                                          i#0
        int 5                                                                               i#0,5
        <                                                                                   continue_looping%0#0
        bz test_bit_packed_tuples_after_for@5 ; b test_bit_packed_tuples_for_body@3

    test_bit_packed_tuples_for_body@3:
        // array/immutable.py:288
        // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        !                                                                                   i#0,tmp%8#0
        l-load-copy i#0 1                                                                   i#0,tmp%8#0,i#0 (copy)
        int 1                                                                               i#0,tmp%8#0,i#0 (copy),1
        ==                                                                                  i#0,tmp%8#0,tmp%9#0
        byte 0x00                                                                           i#0,tmp%8#0,tmp%9#0,0x00
        int 0                                                                               i#0,tmp%8#0,tmp%9#0,0x00,0
        l-load tmp%8#0 3                                                                    i#0,tmp%9#0,0x00,0,tmp%8#0
        setbit                                                                              i#0,tmp%9#0,aggregate%encoded_bool%0#0
        int 1                                                                               i#0,tmp%9#0,aggregate%encoded_bool%0#0,1
        l-load tmp%9#0 2                                                                    i#0,aggregate%encoded_bool%0#0,1,tmp%9#0
        setbit                                                                              i#0,aggregate%set_bit%0#0
        v-load arr2#0                                                                       i#0,aggregate%set_bit%0#0,arr2#0
        l-store-copy arr2#0 1                                                               i#0,arr2#0,aggregate%set_bit%0#0,arr2#0 (copy)
        l-load-copy aggregate%set_bit%0#0 1                                                 i#0,arr2#0,aggregate%set_bit%0#0,arr2#0 (copy),aggregate%set_bit%0#0 (copy)
        concat // on error: max array length exceeded                                       i#0,arr2#0,aggregate%set_bit%0#0,concat%0#0
        l-load arr2#0 2                                                                     i#0,aggregate%set_bit%0#0,concat%0#0,arr2#0
        int 0                                                                               i#0,aggregate%set_bit%0#0,concat%0#0,arr2#0,0
        extract_uint16                                                                      i#0,aggregate%set_bit%0#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               i#0,aggregate%set_bit%0#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   i#0,aggregate%set_bit%0#0,concat%0#0,add%0#0
        itob                                                                                i#0,aggregate%set_bit%0#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         i#0,aggregate%set_bit%0#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 i#0,aggregate%set_bit%0#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           i#0,aggregate%set_bit%0#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          i#0,aggregate%set_bit%0#0,arr2#0
        v-store arr2#0                                                                      i#0,aggregate%set_bit%0#0
        // array/immutable.py:295
        // c=i == 2,
        l-load-copy i#0 1                                                                   i#0,aggregate%set_bit%0#0,i#0 (copy)
        int 2                                                                               i#0,aggregate%set_bit%0#0,i#0 (copy),2
        ==                                                                                  i#0,aggregate%set_bit%0#0,tmp%13#0
        // array/immutable.py:296
        // d=i == 3,
        l-load-copy i#0 2                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,i#0 (copy)
        int 3                                                                               i#0,aggregate%set_bit%0#0,tmp%13#0,i#0 (copy),3
        ==                                                                                  i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0
        // array/immutable.py:297
        // e=i == 4,
        l-load-copy i#0 3                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,i#0 (copy)
        int 4                                                                               i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,i#0 (copy),4
        ==                                                                                  i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0
        // array/immutable.py:298
        // f=i == 5,
        l-load-copy i#0 4                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,i#0 (copy)
        int 5                                                                               i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,i#0 (copy),5
        ==                                                                                  i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0
        // array/immutable.py:299
        // g=i == 6,
        l-load-copy i#0 5                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#0 (copy)
        int 6                                                                               i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#0 (copy),6
        ==                                                                                  i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0
        // array/immutable.py:292
        // bar=i + 1,
        l-load-copy i#0 6                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,i#0 (copy)
        int 1                                                                               i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,i#0 (copy),1
        +                                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0
        // array/immutable.py:289-301
        // arr7 = arr7.append(
        //     SevenBoolTuple(
        //         foo=i,
        //         bar=i + 1,
        //         a=i == 0,
        //         b=i == 1,
        //         c=i == 2,
        //         d=i == 3,
        //         e=i == 4,
        //         f=i == 5,
        //         g=i == 6,
        //     )
        // )
        l-load-copy i#0 7                                                                   i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,i#0 (copy)
        itob                                                                                i#0,aggregate%set_bit%0#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0
        l-load aggregate%set_bit%0#0 7                                                      i#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0
        int 2                                                                               i#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0,2
        l-load tmp%13#0 8                                                                   i#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0,2,tmp%13#0
        setbit                                                                              i#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%2#0
        int 3                                                                               i#0,tmp%14#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%2#0,3
        l-load tmp%14#0 7                                                                   i#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%2#0,3,tmp%14#0
        setbit                                                                              i#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%3#0
        int 4                                                                               i#0,tmp%15#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%3#0,4
        l-load tmp%15#0 6                                                                   i#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%3#0,4,tmp%15#0
        setbit                                                                              i#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%4#0
        int 5                                                                               i#0,tmp%16#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%4#0,5
        l-load tmp%16#0 5                                                                   i#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%4#0,5,tmp%16#0
        setbit                                                                              i#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%5#0
        int 6                                                                               i#0,tmp%17#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%5#0,6
        l-load tmp%17#0 4                                                                   i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%5#0,6,tmp%17#0
        setbit                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0
        l-load-copy aggregate%val_as_bytes%0#0 1                                            i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%0#0 (copy)
        l-load-copy aggregate%set_bit%6#0 1                                                 i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%0#0 (copy),aggregate%set_bit%6#0 (copy)
        concat                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%head%3#0
        l-load-copy tmp%18#0 3                                                              i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%head%3#0,tmp%18#0 (copy)
        itob                                                                                i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%head%3#0,aggregate%val_as_bytes%1#0
        l-load aggregate%head%3#0 1                                                         i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,aggregate%head%3#0
        l-load-copy aggregate%val_as_bytes%1#0 1                                            i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,aggregate%head%3#0,aggregate%val_as_bytes%1#0 (copy)
        concat                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,aggregate%head%4#0
        v-load arr7#0                                                                       i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,aggregate%head%4#0,arr7#0
        l-store-copy arr7#0 1                                                               i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,arr7#0,aggregate%head%4#0,arr7#0 (copy)
        l-load aggregate%head%4#0 1                                                         i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,arr7#0,arr7#0 (copy),aggregate%head%4#0
        concat // on error: max array length exceeded                                       i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,arr7#0,concat%1#0
        l-load arr7#0 1                                                                     i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,arr7#0
        int 0                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,arr7#0,0
        extract_uint16                                                                      i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,extract_uint16%1#0
        int 1                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,extract_uint16%1#0,1
        +                                                                                   i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,add%1#0
        itob                                                                                i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,as_bytes%1#0
        extract 6 2                                                                         i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,as_u16_bytes%1#0
        l-load concat%1#0 1                                                                 i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,as_u16_bytes%1#0,concat%1#0
        l-load as_u16_bytes%1#0 1                                                           i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,concat%1#0,as_u16_bytes%1#0
        replace2 0                                                                          i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,arr7#0
        v-store arr7#0                                                                      i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0
        // array/immutable.py:313
        // h=i == 7,
        l-load-copy i#0 4                                                                   i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,i#0 (copy)
        int 7                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,i#0 (copy),7
        ==                                                                                  i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%6#0,aggregate%val_as_bytes%1#0,tmp%27#0
        // array/immutable.py:302-315
        // arr8 = arr8.append(
        //     EightBoolTuple(
        //         foo=i,
        //         bar=i + 1,
        //         a=i == 0,
        //         b=i == 1,
        //         c=i == 2,
        //         d=i == 3,
        //         e=i == 4,
        //         f=i == 5,
        //         g=i == 6,
        //         h=i == 7,
        //     )
        // )
        l-load aggregate%set_bit%6#0 2                                                      i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,tmp%27#0,aggregate%set_bit%6#0
        int 7                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,tmp%27#0,aggregate%set_bit%6#0,7
        l-load tmp%27#0 2                                                                   i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%set_bit%6#0,7,tmp%27#0
        setbit                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0,aggregate%set_bit%13#0
        l-load aggregate%val_as_bytes%0#0 2                                                 i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%set_bit%13#0,aggregate%val_as_bytes%0#0
        l-load aggregate%set_bit%13#0 1                                                     i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%13#0
        concat                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0
        l-load-copy aggregate%head%7#0 0                                                    i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%head%7#0 (copy)
        l-load-copy aggregate%val_as_bytes%1#0 2                                            i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%head%7#0 (copy),aggregate%val_as_bytes%1#0 (copy)
        concat                                                                              i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%head%8#0
        v-load arr8#0                                                                       i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%head%8#0,arr8#0
        l-store-copy arr8#0 1                                                               i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,arr8#0,aggregate%head%8#0,arr8#0 (copy)
        l-load aggregate%head%8#0 1                                                         i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,arr8#0,arr8#0 (copy),aggregate%head%8#0
        concat // on error: max array length exceeded                                       i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,arr8#0,concat%2#0
        l-load arr8#0 1                                                                     i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,arr8#0
        int 0                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,arr8#0,0
        extract_uint16                                                                      i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,extract_uint16%2#0
        int 1                                                                               i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,extract_uint16%2#0,1
        +                                                                                   i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,add%2#0
        itob                                                                                i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,as_bytes%2#0
        extract 6 2                                                                         i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,as_u16_bytes%2#0
        l-load concat%2#0 1                                                                 i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,as_u16_bytes%2#0,concat%2#0
        l-load as_u16_bytes%2#0 1                                                           i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,concat%2#0,as_u16_bytes%2#0
        replace2 0                                                                          i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,arr8#0
        v-store arr8#0                                                                      i#0,tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0
        // array/immutable.py:328
        // i=i == 8,
        l-load i#0 3                                                                        tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,i#0
        int 8                                                                               tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,i#0,8
        ==                                                                                  tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,tmp%38#0
        // array/immutable.py:316-330
        // arr9 = arr9.append(
        //     NineBoolTuple(
        //         foo=i,
        //         bar=i + 1,
        //         a=i == 0,
        //         b=i == 1,
        //         c=i == 2,
        //         d=i == 3,
        //         e=i == 4,
        //         f=i == 5,
        //         g=i == 6,
        //         h=i == 7,
        //         i=i == 8,
        //     )
        // )
        byte 0x00                                                                           tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,tmp%38#0,0x00
        int 0                                                                               tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,tmp%38#0,0x00,0
        l-load tmp%38#0 2                                                                   tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,0x00,0,tmp%38#0
        setbit                                                                              tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%encoded_bool%4#0
        l-load aggregate%head%7#0 1                                                         tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%encoded_bool%4#0,aggregate%head%7#0
        l-load aggregate%encoded_bool%4#0 1                                                 tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%7#0,aggregate%encoded_bool%4#0
        concat                                                                              tmp%18#0,aggregate%val_as_bytes%1#0,aggregate%head%12#0
        l-load aggregate%val_as_bytes%1#0 1                                                 tmp%18#0,aggregate%head%12#0,aggregate%val_as_bytes%1#0
        concat                                                                              tmp%18#0,aggregate%head%13#0
        v-load arr9#0                                                                       tmp%18#0,aggregate%head%13#0,arr9#0
        l-store-copy arr9#0 1                                                               tmp%18#0,arr9#0,aggregate%head%13#0,arr9#0 (copy)
        l-load aggregate%head%13#0 1                                                        tmp%18#0,arr9#0,arr9#0 (copy),aggregate%head%13#0
        concat // on error: max array length exceeded                                       tmp%18#0,arr9#0,concat%3#0
        l-load arr9#0 1                                                                     tmp%18#0,concat%3#0,arr9#0
        int 0                                                                               tmp%18#0,concat%3#0,arr9#0,0
        extract_uint16                                                                      tmp%18#0,concat%3#0,extract_uint16%3#0
        int 1                                                                               tmp%18#0,concat%3#0,extract_uint16%3#0,1
        +                                                                                   tmp%18#0,concat%3#0,add%3#0
        itob                                                                                tmp%18#0,concat%3#0,as_bytes%3#0
        extract 6 2                                                                         tmp%18#0,concat%3#0,as_u16_bytes%3#0
        l-load concat%3#0 1                                                                 tmp%18#0,as_u16_bytes%3#0,concat%3#0
        l-load as_u16_bytes%3#0 1                                                           tmp%18#0,concat%3#0,as_u16_bytes%3#0
        replace2 0                                                                          tmp%18#0,arr9#0
        v-store arr9#0                                                                      tmp%18#0
        l-load tmp%18#0 0                                                                   tmp%18#0
        v-store i#0
        b test_bit_packed_tuples_for_header@2

    test_bit_packed_tuples_after_for@5:
        // array/immutable.py:332
        // assert arr2.length == 5
        v-load arr2#0                                                                       arr2#0
        l-store-copy arr2#0 0                                                               arr2#0,arr2#0 (copy)
        int 0                                                                               arr2#0,arr2#0 (copy),0
        extract_uint16                                                                      arr2#0,aggregate%array_length%4#0
        int 5                                                                               arr2#0,aggregate%array_length%4#0,5
        ==                                                                                  arr2#0,tmp%42#0
        assert                                                                              arr2#0
        // array/immutable.py:333
        // assert arr7.length == 5
        v-load arr7#0                                                                       arr2#0,arr7#0
        l-store-copy arr7#0 0                                                               arr2#0,arr7#0,arr7#0 (copy)
        int 0                                                                               arr2#0,arr7#0,arr7#0 (copy),0
        extract_uint16                                                                      arr2#0,arr7#0,aggregate%array_length%5#0
        int 5                                                                               arr2#0,arr7#0,aggregate%array_length%5#0,5
        ==                                                                                  arr2#0,arr7#0,tmp%44#0
        assert                                                                              arr2#0,arr7#0
        // array/immutable.py:334
        // assert arr8.length == 5
        v-load arr8#0                                                                       arr2#0,arr7#0,arr8#0
        l-store-copy arr8#0 0                                                               arr2#0,arr7#0,arr8#0,arr8#0 (copy)
        int 0                                                                               arr2#0,arr7#0,arr8#0,arr8#0 (copy),0
        extract_uint16                                                                      arr2#0,arr7#0,arr8#0,aggregate%array_length%6#0
        int 5                                                                               arr2#0,arr7#0,arr8#0,aggregate%array_length%6#0,5
        ==                                                                                  arr2#0,arr7#0,arr8#0,tmp%46#0
        assert                                                                              arr2#0,arr7#0,arr8#0
        // array/immutable.py:335
        // assert arr9.length == 5
        v-load arr9#0                                                                       arr2#0,arr7#0,arr8#0,arr9#0
        l-store-copy arr9#0 0                                                               arr2#0,arr7#0,arr8#0,arr9#0,arr9#0 (copy)
        int 0                                                                               arr2#0,arr7#0,arr8#0,arr9#0,arr9#0 (copy),0
        extract_uint16                                                                      arr2#0,arr7#0,arr8#0,arr9#0,aggregate%array_length%7#0
        int 5                                                                               arr2#0,arr7#0,arr8#0,arr9#0,aggregate%array_length%7#0,5
        ==                                                                                  arr2#0,arr7#0,arr8#0,arr9#0,tmp%48#0
        assert                                                                              arr2#0,arr7#0,arr8#0,arr9#0
        // array/immutable.py:336
        // self.bool2 = arr2
        byte "bool2"                                                                        arr2#0,arr7#0,arr8#0,arr9#0,"bool2"
        l-load arr2#0 4                                                                     arr7#0,arr8#0,arr9#0,"bool2",arr2#0
        app_global_put                                                                      arr7#0,arr8#0,arr9#0
        // array/immutable.py:337
        // self.bool7 = arr7
        byte "bool7"                                                                        arr7#0,arr8#0,arr9#0,"bool7"
        l-load arr7#0 3                                                                     arr8#0,arr9#0,"bool7",arr7#0
        app_global_put                                                                      arr8#0,arr9#0
        // array/immutable.py:338
        // self.bool8 = arr8
        byte "bool8"                                                                        arr8#0,arr9#0,"bool8"
        l-load arr8#0 2                                                                     arr9#0,"bool8",arr8#0
        app_global_put                                                                      arr9#0
        // array/immutable.py:339
        // self.bool9 = arr9
        byte "bool9"                                                                        arr9#0,"bool9"
        l-load arr9#0 1                                                                     "bool9",arr9#0
        app_global_put
        // array/immutable.py:276
        // @arc4.abimethod()
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues[routing]() -> void:
subroutine sum_uints_and_lengths_and_trues:
    sum_uints_and_lengths_and_trues_block@0:
        // array/immutable.py:341
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arr1#0
        l-store-copy arr1#0 0                                                               arr1#0,arr1#0 (copy)
        v-store arr1#0                                                                      arr1#0
        txna ApplicationArgs 2                                                              arr1#0,arr2#0
        v-store arr2#0                                                                      arr1#0
        txna ApplicationArgs 3                                                              arr1#0,arr3#0
        v-store arr3#0                                                                      arr1#0
        txna ApplicationArgs 4                                                              arr1#0,arr4#0
        v-store arr4#0                                                                      arr1#0
        // array/immutable.py:349
        // sum1 = sum2 = sum3 = sum4 = UInt64()
        int 0                                                                               arr1#0,0
        v-store sum4#0                                                                      arr1#0
        int 0                                                                               arr1#0,0
        v-store sum3#0                                                                      arr1#0
        int 0                                                                               arr1#0,0
        v-store sum2#0                                                                      arr1#0
        int 0                                                                               arr1#0,0
        v-store sum1#0                                                                      arr1#0
        // array/immutable.py:350
        // for i in arr1:
        l-load arr1#0 0                                                                     arr1#0
        int 0                                                                               arr1#0,0
        extract_uint16                                                                      aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        int 0                                                                               0
        v-store item_index_internal%0#0
        b sum_uints_and_lengths_and_trues_for_header@2

    sum_uints_and_lengths_and_trues_for_header@2:
        // array/immutable.py:350
        // for i in arr1:
        v-load item_index_internal%0#0                                                      item_index_internal%0#0
        v-load aggregate%array_length%0#0                                                   item_index_internal%0#0,aggregate%array_length%0#0
        <                                                                                   continue_looping%0#0
        bz sum_uints_and_lengths_and_trues_after_for@5 ; b sum_uints_and_lengths_and_trues_for_body@3 

    sum_uints_and_lengths_and_trues_for_body@3:
        // array/immutable.py:350
        // for i in arr1:
        v-load arr1#0                                                                       arr1#0
        extract 2 0                                                                         aggregate%array_trimmed%0#0
        v-load item_index_internal%0#0                                                      aggregate%array_trimmed%0#0,item_index_internal%0#0
        l-store-copy item_index_internal%0#0 1                                              item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy)
        int 8                                                                               item_index_internal%0#0,aggregate%array_trimmed%0#0,item_index_internal%0#0 (copy),8
        *                                                                                   item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        l-load aggregate%array_trimmed%0#0 1                                                item_index_internal%0#0,aggregate%bytes_offset%0#0,aggregate%array_trimmed%0#0
        l-load aggregate%bytes_offset%0#0 1                                                 item_index_internal%0#0,aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        extract_uint64                                                                      item_index_internal%0#0,i#0
        // array/immutable.py:351
        // sum1 += i
        v-load sum1#0                                                                       item_index_internal%0#0,i#0,sum1#0
        l-load i#0 1                                                                        item_index_internal%0#0,sum1#0,i#0
        +                                                                                   item_index_internal%0#0,sum1#0
        v-store sum1#0                                                                      item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                    item_index_internal%0#0
        int 1                                                                               item_index_internal%0#0,1
        +                                                                                   item_index_internal%0#0
        v-store item_index_internal%0#0
        b sum_uints_and_lengths_and_trues_for_header@2

    sum_uints_and_lengths_and_trues_after_for@5:
        // array/immutable.py:352
        // for b in arr2:
        v-load arr2#0                                                                       arr2#0
        int 0                                                                               arr2#0,0
        extract_uint16                                                                      aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        int 0                                                                               0
        v-store item_index_internal%1#0
        b sum_uints_and_lengths_and_trues_for_header@6

    sum_uints_and_lengths_and_trues_for_header@6:
        // array/immutable.py:352
        // for b in arr2:
        v-load item_index_internal%1#0                                                      item_index_internal%1#0
        v-load aggregate%array_length%1#0                                                   item_index_internal%1#0,aggregate%array_length%1#0
        <                                                                                   continue_looping%1#0
        bz sum_uints_and_lengths_and_trues_after_for@11 ; b sum_uints_and_lengths_and_trues_for_body@7 

    sum_uints_and_lengths_and_trues_for_body@7:
        // array/immutable.py:352
        // for b in arr2:
        v-load item_index_internal%1#0                                                      item_index_internal%1#0
        int 16                                                                              item_index_internal%1#0,16
        +                                                                                   aggregate%add%0#0
        v-load arr2#0                                                                       aggregate%add%0#0,arr2#0
        l-load aggregate%add%0#0 1                                                          arr2#0,aggregate%add%0#0
        getbit                                                                              b#0
        // array/immutable.py:353
        // if b:
        bz sum_uints_and_lengths_and_trues_after_if_else@9 ; b sum_uints_and_lengths_and_trues_if_body@8 

    sum_uints_and_lengths_and_trues_if_body@8:
        // array/immutable.py:354
        // sum2 += 1
        v-load sum2#0                                                                       sum2#0
        int 1                                                                               sum2#0,1
        +                                                                                   sum2#0
        v-store sum2#0
        b sum_uints_and_lengths_and_trues_after_if_else@9

    sum_uints_and_lengths_and_trues_after_if_else@9:
        v-load item_index_internal%1#0                                                      item_index_internal%1#0
        int 1                                                                               item_index_internal%1#0,1
        +                                                                                   item_index_internal%1#0
        v-store item_index_internal%1#0
        b sum_uints_and_lengths_and_trues_for_header@6

    sum_uints_and_lengths_and_trues_after_for@11:
        // array/immutable.py:355
        // for tup in arr3:
        v-load arr3#0                                                                       arr3#0
        int 0                                                                               arr3#0,0
        extract_uint16                                                                      aggregate%array_length%2#0
        v-store aggregate%array_length%2#0
        int 0                                                                               0
        v-store item_index_internal%2#0
        b sum_uints_and_lengths_and_trues_for_header@12

    sum_uints_and_lengths_and_trues_for_header@12:
        // array/immutable.py:355
        // for tup in arr3:
        v-load item_index_internal%2#0                                                      item_index_internal%2#0
        v-load aggregate%array_length%2#0                                                   item_index_internal%2#0,aggregate%array_length%2#0
        <                                                                                   continue_looping%2#0
        bz sum_uints_and_lengths_and_trues_after_for@19 ; b sum_uints_and_lengths_and_trues_for_body@13 

    sum_uints_and_lengths_and_trues_for_body@13:
        // array/immutable.py:355
        // for tup in arr3:
        v-load arr3#0                                                                       arr3#0
        extract 2 0                                                                         aggregate%array_trimmed%1#0
        v-load item_index_internal%2#0                                                      aggregate%array_trimmed%1#0,item_index_internal%2#0
        int 9                                                                               aggregate%array_trimmed%1#0,item_index_internal%2#0,9
        *                                                                                   aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        l-load aggregate%array_trimmed%1#0 1                                                aggregate%bytes_offset%1#0,aggregate%array_trimmed%1#0
        l-load aggregate%bytes_offset%1#0 1                                                 aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0
        int 9                                                                               aggregate%array_trimmed%1#0,aggregate%bytes_offset%1#0,9
        extract3 // on error: index access is out of bounds                                 aggregate%encoded_element%1#0
        l-load-copy aggregate%encoded_element%1#0 0                                         aggregate%encoded_element%1#0,aggregate%encoded_element%1#0 (copy)
        int 0                                                                               aggregate%encoded_element%1#0,aggregate%encoded_element%1#0 (copy),0
        extract_uint64                                                                      aggregate%encoded_element%1#0,tup.foo#0
        l-load-copy aggregate%encoded_element%1#0 1                                         aggregate%encoded_element%1#0,tup.foo#0,aggregate%encoded_element%1#0 (copy)
        int 64                                                                              aggregate%encoded_element%1#0,tup.foo#0,aggregate%encoded_element%1#0 (copy),64
        getbit                                                                              aggregate%encoded_element%1#0,tup.foo#0,tup.bar#0
        l-load aggregate%encoded_element%1#0 2                                              tup.foo#0,tup.bar#0,aggregate%encoded_element%1#0
        int 65                                                                              tup.foo#0,tup.bar#0,aggregate%encoded_element%1#0,65
        getbit                                                                              tup.foo#0,tup.bar#0,tup.baz#0
        v-store tup.baz#0                                                                   tup.foo#0,tup.bar#0
        // array/immutable.py:356
        // sum3 += tup.foo
        v-load sum3#0                                                                       tup.foo#0,tup.bar#0,sum3#0
        l-load tup.foo#0 2                                                                  tup.bar#0,sum3#0,tup.foo#0
        +                                                                                   tup.bar#0,sum3#0
        v-store sum3#0                                                                      tup.bar#0
        // array/immutable.py:357
        // if tup.bar:
        l-load tup.bar#0 0                                                                  tup.bar#0
        bz sum_uints_and_lengths_and_trues_after_if_else@15 ; b sum_uints_and_lengths_and_trues_if_body@14 

    sum_uints_and_lengths_and_trues_if_body@14:
        // array/immutable.py:358
        // sum3 += 1
        v-load sum3#0                                                                       sum3#0
        int 1                                                                               sum3#0,1
        +                                                                                   sum3#0
        v-store sum3#0
        b sum_uints_and_lengths_and_trues_after_if_else@15

    sum_uints_and_lengths_and_trues_after_if_else@15:
        // array/immutable.py:359
        // if tup.baz:
        v-load tup.baz#0                                                                    tup.baz#0
        bz sum_uints_and_lengths_and_trues_after_if_else@17 ; b sum_uints_and_lengths_and_trues_if_body@16 

    sum_uints_and_lengths_and_trues_if_body@16:
        // array/immutable.py:360
        // sum3 += 1
        v-load sum3#0                                                                       sum3#0
        int 1                                                                               sum3#0,1
        +                                                                                   sum3#0
        v-store sum3#0
        b sum_uints_and_lengths_and_trues_after_if_else@17

    sum_uints_and_lengths_and_trues_after_if_else@17:
        v-load item_index_internal%2#0                                                      item_index_internal%2#0
        int 1                                                                               item_index_internal%2#0,1
        +                                                                                   item_index_internal%2#0
        v-store item_index_internal%2#0
        b sum_uints_and_lengths_and_trues_for_header@12

    sum_uints_and_lengths_and_trues_after_for@19:
        // array/immutable.py:361
        // for idx, dyn_tup in uenumerate(arr4):
        v-load arr4#0                                                                       arr4#0
        int 0                                                                               arr4#0,0
        extract_uint16                                                                      aggregate%array_length%3#0
        v-store aggregate%array_length%3#0
        int 0                                                                               item_index_internal%3#0
        v-store idx#0
        b sum_uints_and_lengths_and_trues_for_header@20

    sum_uints_and_lengths_and_trues_for_header@20:
        // array/immutable.py:361
        // for idx, dyn_tup in uenumerate(arr4):
        v-load idx#0                                                                        idx#0
        v-load aggregate%array_length%3#0                                                   idx#0,aggregate%array_length%3#0
        <                                                                                   continue_looping%3#0
        bz sum_uints_and_lengths_and_trues_after_for@23 ; b sum_uints_and_lengths_and_trues_for_body@21 

    sum_uints_and_lengths_and_trues_for_body@21:
        // array/immutable.py:361
        // for idx, dyn_tup in uenumerate(arr4):
        v-load arr4#0                                                                       arr4#0
        extract 2 0                                                                         aggregate%array_head_and_tail%0#0
        v-load idx#0                                                                        aggregate%array_head_and_tail%0#0,idx#0
        l-store-copy idx#0 1                                                                idx#0,aggregate%array_head_and_tail%0#0,idx#0 (copy)
        int 2                                                                               idx#0,aggregate%array_head_and_tail%0#0,idx#0 (copy),2
        *                                                                                   idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 1                                     idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%item_offset_offset%0#0 1                                           idx#0,aggregate%array_head_and_tail%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%item_offset_offset%0#0
        extract_uint16                                                                      idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load-copy idx#0 2                                                                 idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,idx#0 (copy)
        int 1                                                                               idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,idx#0 (copy),1
        +                                                                                   idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0
        v-load aggregate%array_length%3#0                                                   idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%3#0
        l-load-copy aggregate%next_index%0#0 1                                              idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%array_length%3#0,aggregate%next_index%0#0 (copy)
        - // on error: index access is out of bounds                                        idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 3                                     idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%array_head_and_tail%0#0 (copy)
        len                                                                                 idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0
        l-load-copy aggregate%next_index%0#0 2                                              idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy)
        int 2                                                                               idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_index%0#0 (copy),2
        *                                                                                   idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0
        l-load-copy aggregate%array_head_and_tail%0#0 5                                     idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset_offset%0#0,aggregate%array_head_and_tail%0#0 (copy)
        l-load aggregate%next_item_offset_offset%0#0 1                                      idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%array_head_and_tail%0#0 (copy),aggregate%next_item_offset_offset%0#0
        extract_uint16                                                                      idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%end_of_array%0#0 1                                                 idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%next_item_offset%0#0,aggregate%end_of_array%0#0
        l-load aggregate%next_item_offset%0#0 1                                             idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%has_next%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0
        l-load aggregate%has_next%0#0 2                                                     idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_of_array%0#0,aggregate%next_item_offset%0#0,aggregate%has_next%0#0
        select                                                                              idx#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0
        l-load aggregate%array_head_and_tail%0#0 3                                          idx#0,aggregate%item_offset%0#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0
        l-load aggregate%item_offset%0#0 3                                                  idx#0,aggregate%next_index%0#0,aggregate%end_offset%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0
        l-load aggregate%end_offset%0#0 2                                                   idx#0,aggregate%next_index%0#0,aggregate%array_head_and_tail%0#0,aggregate%item_offset%0#0,aggregate%end_offset%0#0
        substring3                                                                          idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0
        l-load-copy aggregate%substring3%0#0 0                                              idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy)
        int 0                                                                               idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,aggregate%substring3%0#0 (copy),0
        extract_uint64                                                                      idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0
        l-load-copy aggregate%substring3%0#0 1                                              idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0,aggregate%substring3%0#0 (copy)
        int 8                                                                               idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0,aggregate%substring3%0#0 (copy),8
        extract_uint16                                                                      idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0,aggregate%extract_uint16%0#0
        l-load-copy aggregate%substring3%0#0 2                                              idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0,aggregate%extract_uint16%0#0,aggregate%substring3%0#0 (copy)
        len                                                                                 idx#0,aggregate%next_index%0#0,aggregate%substring3%0#0,dyn_tup.foo#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        l-load aggregate%substring3%0#0 3                                                   idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,aggregate%extract_uint16%0#0,aggregate%len%0#0,aggregate%substring3%0#0
        l-load aggregate%extract_uint16%0#0 2                                               idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,aggregate%len%0#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0
        l-load aggregate%len%0#0 2                                                          idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,aggregate%substring3%0#0,aggregate%extract_uint16%0#0,aggregate%len%0#0
        substring3                                                                          idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,aggregate%substring3%1#0
        extract 2 0                                                                         idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,dyn_tup.bar#0
        // array/immutable.py:362
        // sum4 += dyn_tup.foo
        v-load sum4#0                                                                       idx#0,aggregate%next_index%0#0,dyn_tup.foo#0,dyn_tup.bar#0,sum4#0
        l-load dyn_tup.foo#0 2                                                              idx#0,aggregate%next_index%0#0,dyn_tup.bar#0,sum4#0,dyn_tup.foo#0
        +                                                                                   idx#0,aggregate%next_index%0#0,dyn_tup.bar#0,sum4#0
        // array/immutable.py:363
        // sum4 += dyn_tup.bar.bytes.length
        l-load dyn_tup.bar#0 1                                                              idx#0,aggregate%next_index%0#0,sum4#0,dyn_tup.bar#0
        len                                                                                 idx#0,aggregate%next_index%0#0,sum4#0,tmp%6#0
        l-load sum4#0 1                                                                     idx#0,aggregate%next_index%0#0,tmp%6#0,sum4#0
        l-load-copy tmp%6#0 1                                                               idx#0,aggregate%next_index%0#0,tmp%6#0,sum4#0,tmp%6#0 (copy)
        +                                                                                   idx#0,aggregate%next_index%0#0,tmp%6#0,sum4#0
        v-store sum4#0                                                                      idx#0,aggregate%next_index%0#0,tmp%6#0
        // array/immutable.py:364
        // assert dyn_tup.bar.bytes.length == idx, "expected string length to match index"
        l-load tmp%6#0 0                                                                    idx#0,aggregate%next_index%0#0,tmp%6#0
        l-load idx#0 2                                                                      aggregate%next_index%0#0,tmp%6#0,idx#0
        ==                                                                                  aggregate%next_index%0#0,tmp%9#0
        assert // expected string length to match index                                     aggregate%next_index%0#0
        l-load aggregate%next_index%0#0 0                                                   aggregate%next_index%0#0
        v-store idx#0
        b sum_uints_and_lengths_and_trues_for_header@20

    sum_uints_and_lengths_and_trues_after_for@23:
        // array/immutable.py:341
        // @arc4.abimethod()
        v-load sum1#0                                                                       sum1#0
        itob                                                                                aggregate%val_as_bytes%0#0
        v-load sum2#0                                                                       aggregate%val_as_bytes%0#0,sum2#0
        itob                                                                                aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                 aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                 aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                              aggregate%head%1#0
        v-load sum3#0                                                                       aggregate%head%1#0,sum3#0
        itob                                                                                aggregate%head%1#0,aggregate%val_as_bytes%2#0
        l-load aggregate%head%1#0 1                                                         aggregate%val_as_bytes%2#0,aggregate%head%1#0
        l-load aggregate%val_as_bytes%2#0 1                                                 aggregate%head%1#0,aggregate%val_as_bytes%2#0
        concat                                                                              aggregate%head%2#0
        v-load sum4#0                                                                       aggregate%head%2#0,sum4#0
        itob                                                                                aggregate%head%2#0,aggregate%val_as_bytes%3#0
        l-load aggregate%head%2#0 1                                                         aggregate%val_as_bytes%3#0,aggregate%head%2#0
        l-load aggregate%val_as_bytes%3#0 1                                                 aggregate%head%2#0,aggregate%val_as_bytes%3#0
        concat                                                                              aggregate%head%3#0
        byte 0x151f7c75                                                                     aggregate%head%3#0,0x151f7c75
        l-load aggregate%head%3#0 1                                                         0x151f7c75,aggregate%head%3#0
        concat                                                                              tmp%5#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_return[routing]() -> void:
subroutine test_uint64_return:
    test_uint64_return_block@0:
        // array/immutable.py:368
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                append#0
        v-store append#0
        // array/immutable.py:370
        // arr = ImmutableArray((UInt64(1), UInt64(2), UInt64(3)))
        byte 0x0003000000000000000100000000000000020000000000000003                         0x0003000000000000000100000000000000020000000000000003
        v-store arr#0
        // array/immutable.py:371
        // for i in urange(append):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_uint64_return_for_header@2

    test_uint64_return_for_header@2:
        // array/immutable.py:371
        // for i in urange(append):
        v-load i#0                                                                          i#0
        v-load append#0                                                                     i#0,append#0
        <                                                                                   continue_looping%0#0
        bz test_uint64_return_after_for@5 ; b test_uint64_return_for_body@3

    test_uint64_return_for_body@3:
        // array/immutable.py:372
        // arr = arr.append(i)
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        itob                                                                                i#0,aggregate%val_as_bytes%3#0
        v-load arr#0                                                                        i#0,aggregate%val_as_bytes%3#0,arr#0
        l-store-copy arr#0 1                                                                i#0,arr#0,aggregate%val_as_bytes%3#0,arr#0 (copy)
        l-load aggregate%val_as_bytes%3#0 1                                                 i#0,arr#0,arr#0 (copy),aggregate%val_as_bytes%3#0
        concat // on error: max array length exceeded                                       i#0,arr#0,concat%0#0
        l-load arr#0 1                                                                      i#0,concat%0#0,arr#0
        int 0                                                                               i#0,concat%0#0,arr#0,0
        extract_uint16                                                                      i#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               i#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   i#0,concat%0#0,add%0#0
        itob                                                                                i#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         i#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 i#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           i#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:371
        // for i in urange(append):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_uint64_return_for_header@2

    test_uint64_return_after_for@5:
        // array/immutable.py:368
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     0x151f7c75
        v-load arr#0                                                                        0x151f7c75,arr#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return[routing]() -> void:
subroutine test_bool_return:
    test_bool_return_block@0:
        // array/immutable.py:375
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                append#0
        v-store append#0
        // array/immutable.py:377
        // arr = ImmutableArray((True, False, True, False, True))
        byte 0x0005a8                                                                       0x0005a8
        v-store arr#0
        // array/immutable.py:378
        // for i in urange(append):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_bool_return_for_header@2

    test_bool_return_for_header@2:
        // array/immutable.py:378
        // for i in urange(append):
        v-load i#0                                                                          i#0
        v-load append#0                                                                     i#0,append#0
        <                                                                                   continue_looping%0#0
        bz test_bool_return_after_for@5 ; b test_bool_return_for_body@3

    test_bool_return_for_body@3:
        // array/immutable.py:379
        // arr = arr.append(i % 2 == 0)
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 2                                                                               i#0,i#0 (copy),2
        %                                                                                   i#0,tmp%0#1
        !                                                                                   i#0,tmp%1#1
        byte 0x00                                                                           i#0,tmp%1#1,0x00
        int 0                                                                               i#0,tmp%1#1,0x00,0
        l-load tmp%1#1 2                                                                    i#0,0x00,0,tmp%1#1
        setbit                                                                              i#0,aggregate%encoded_bool%1#0
        v-load arr#0                                                                        i#0,aggregate%encoded_bool%1#0,arr#0
        l-load aggregate%encoded_bool%1#0 1                                                 i#0,arr#0,aggregate%encoded_bool%1#0
        int 1                                                                               i#0,arr#0,aggregate%encoded_bool%1#0,1
        int 8                                                                               i#0,arr#0,aggregate%encoded_bool%1#0,1,8
        callsub dynamic_array_concat_bits                                                   i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:378
        // for i in urange(append):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_bool_return_for_header@2

    test_bool_return_after_for@5:
        // array/immutable.py:375
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     0x151f7c75
        v-load arr#0                                                                        0x151f7c75,arr#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_tuple_return[routing]() -> void:
subroutine test_tuple_return:
    test_tuple_return_block@0:
        // array/immutable.py:382
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                append#0
        v-store append#0
        // array/immutable.py:384
        // arr = ImmutableArray((MyTuple(UInt64(), True, False),))
        byte 0x0001000000000000000080                                                       0x0001000000000000000080
        v-store arr#0
        // array/immutable.py:385
        // for i in urange(append):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_tuple_return_for_header@2

    test_tuple_return_for_header@2:
        // array/immutable.py:385
        // for i in urange(append):
        v-load i#0                                                                          i#0
        v-load append#0                                                                     i#0,append#0
        <                                                                                   continue_looping%0#0
        bz test_tuple_return_after_for@5 ; b test_tuple_return_for_body@3

    test_tuple_return_for_body@3:
        // array/immutable.py:386
        // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 2                                                                               i#0,i#0 (copy),2
        %                                                                                   i#0,tmp%0#1
        !                                                                                   i#0,tmp%1#1
        l-load-copy i#0 1                                                                   i#0,tmp%1#1,i#0 (copy)
        int 3                                                                               i#0,tmp%1#1,i#0 (copy),3
        %                                                                                   i#0,tmp%1#1,tmp%2#1
        !                                                                                   i#0,tmp%1#1,tmp%3#0
        l-load-copy i#0 2                                                                   i#0,tmp%1#1,tmp%3#0,i#0 (copy)
        itob                                                                                i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%1#0
        byte 0x00                                                                           i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%1#0,0x00
        int 0                                                                               i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%1#0,0x00,0
        l-load tmp%1#1 4                                                                    i#0,tmp%3#0,aggregate%val_as_bytes%1#0,0x00,0,tmp%1#1
        setbit                                                                              i#0,tmp%3#0,aggregate%val_as_bytes%1#0,aggregate%encoded_bool%1#0
        int 1                                                                               i#0,tmp%3#0,aggregate%val_as_bytes%1#0,aggregate%encoded_bool%1#0,1
        l-load tmp%3#0 3                                                                    i#0,aggregate%val_as_bytes%1#0,aggregate%encoded_bool%1#0,1,tmp%3#0
        setbit                                                                              i#0,aggregate%val_as_bytes%1#0,aggregate%set_bit%1#0
        l-load aggregate%val_as_bytes%1#0 1                                                 i#0,aggregate%set_bit%1#0,aggregate%val_as_bytes%1#0
        l-load aggregate%set_bit%1#0 1                                                      i#0,aggregate%val_as_bytes%1#0,aggregate%set_bit%1#0
        concat                                                                              i#0,aggregate%head%4#0
        v-load arr#0                                                                        i#0,aggregate%head%4#0,arr#0
        l-store-copy arr#0 1                                                                i#0,arr#0,aggregate%head%4#0,arr#0 (copy)
        l-load aggregate%head%4#0 1                                                         i#0,arr#0,arr#0 (copy),aggregate%head%4#0
        concat // on error: max array length exceeded                                       i#0,arr#0,concat%0#0
        l-load arr#0 1                                                                      i#0,concat%0#0,arr#0
        int 0                                                                               i#0,concat%0#0,arr#0,0
        extract_uint16                                                                      i#0,concat%0#0,extract_uint16%0#0
        int 1                                                                               i#0,concat%0#0,extract_uint16%0#0,1
        +                                                                                   i#0,concat%0#0,add%0#0
        itob                                                                                i#0,concat%0#0,as_bytes%0#0
        extract 6 2                                                                         i#0,concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 i#0,as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           i#0,concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:385
        // for i in urange(append):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_tuple_return_for_header@2

    test_tuple_return_after_for@5:
        // array/immutable.py:382
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     0x151f7c75
        v-load arr#0                                                                        0x151f7c75,arr#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return[routing]() -> void:
subroutine test_dynamic_tuple_return:
    test_dynamic_tuple_return_block@0:
        // array/immutable.py:389
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64)%0#0
        btoi                                                                                append#0
        v-store append#0
        // array/immutable.py:391
        // arr = ImmutableArray((MyDynamicSizedTuple(UInt64(), String("Hello")),))
        byte 0x000100020000000000000000000a000548656c6c6f                                   0x000100020000000000000000000a000548656c6c6f
        v-store arr#0
        // array/immutable.py:392
        // for i in urange(append):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_dynamic_tuple_return_for_header@2

    test_dynamic_tuple_return_for_header@2:
        // array/immutable.py:392
        // for i in urange(append):
        v-load i#0                                                                          i#0
        v-load append#0                                                                     i#0,append#0
        <                                                                                   continue_looping%0#0
        bz test_dynamic_tuple_return_after_for@5 ; b test_dynamic_tuple_return_for_body@3 

    test_dynamic_tuple_return_for_body@3:
        // array/immutable.py:393
        // arr = arr.append(MyDynamicSizedTuple(i, times(i)))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        callsub times                                                                       i#0,tmp%0#1
        v-load arr#0                                                                        i#0,tmp%0#1,arr#0
        l-store-copy arr#0 0                                                                i#0,tmp%0#1,arr#0,arr#0 (copy)
        int 0                                                                               i#0,tmp%0#1,arr#0,arr#0 (copy),0
        extract_uint16                                                                      i#0,tmp%0#1,arr#0,extract_uint16%0#0
        l-load arr#0 1                                                                      i#0,tmp%0#1,extract_uint16%0#0,arr#0
        extract 2 0                                                                         i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0
        l-load-copy i#0 3                                                                   i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,i#0 (copy)
        itob                                                                                i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0
        l-load-copy tmp%0#1 3                                                               i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,tmp%0#1 (copy)
        len                                                                                 i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,aggregate%length%1#0
        itob                                                                                i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,aggregate%as_bytes%4#0
        extract 6 2                                                                         i#0,tmp%0#1,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,aggregate%length_uint16%1#0
        l-load tmp%0#1 4                                                                    i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,aggregate%length_uint16%1#0,tmp%0#1
        concat                                                                              i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%val_as_bytes%1#0,aggregate%encoded_value%1#0
        l-load aggregate%val_as_bytes%1#0 1                                                 i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%1#0,aggregate%val_as_bytes%1#0
        byte 0x000a                                                                         i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%1#0,aggregate%val_as_bytes%1#0,0x000a
        concat                                                                              i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%encoded_value%1#0,aggregate%head%4#0
        l-load aggregate%encoded_value%1#0 1                                                i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%head%4#0,aggregate%encoded_value%1#0
        concat                                                                              i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%2#0
        byte 0x0002                                                                         i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%2#0,0x0002
        l-load aggregate%concat%2#0 1                                                       i#0,extract_uint16%0#0,extract_to_end%0#0,0x0002,aggregate%concat%2#0
        concat                                                                              i#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%concat%3#0
        l-load extract_uint16%0#0 2                                                         i#0,extract_to_end%0#0,aggregate%concat%3#0,extract_uint16%0#0
        l-load extract_to_end%0#0 2                                                         i#0,aggregate%concat%3#0,extract_uint16%0#0,extract_to_end%0#0
        int 1                                                                               i#0,aggregate%concat%3#0,extract_uint16%0#0,extract_to_end%0#0,1
        l-load aggregate%concat%3#0 3                                                       i#0,extract_uint16%0#0,extract_to_end%0#0,1,aggregate%concat%3#0
        callsub dynamic_array_concat_dynamic_element                                        i#0,arr#0
        v-store arr#0                                                                       i#0
        // array/immutable.py:392
        // for i in urange(append):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_dynamic_tuple_return_for_header@2

    test_dynamic_tuple_return_after_for@5:
        // array/immutable.py:389
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     0x151f7c75
        v-load arr#0                                                                        0x151f7c75,arr#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back[routing]() -> void:
subroutine test_convert_to_array_and_back:
    test_convert_to_array_and_back_block@0:
        // array/immutable.py:396
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arr#0
        txna ApplicationArgs 2                                                              arr#0,reinterpret_Encoded(uint64)%0#0
        btoi                                                                                arr#0,append#0
        v-store append#0                                                                    arr#0
        // array/immutable.py:401
        // mutable.extend(arr)
        l-load arr#0 0                                                                      arr#0
        extract 2 0                                                                         extract_to_end%0#0
        v-store slot%0
        // array/immutable.py:402
        // for i in urange(append):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_convert_to_array_and_back_for_header@2

    test_convert_to_array_and_back_for_header@2:
        // array/immutable.py:402
        // for i in urange(append):
        v-load i#0                                                                          i#0
        v-load append#0                                                                     i#0,append#0
        <                                                                                   continue_looping%0#0
        bz test_convert_to_array_and_back_after_for@5 ; b test_convert_to_array_and_back_for_body@3 

    test_convert_to_array_and_back_for_body@3:
        // array/immutable.py:403
        // mutable.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i % 3 == 0))
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 2                                                                               i#0,i#0 (copy),2
        %                                                                                   i#0,tmp%0#1
        !                                                                                   i#0,tmp%1#1
        l-load-copy i#0 1                                                                   i#0,tmp%1#1,i#0 (copy)
        int 3                                                                               i#0,tmp%1#1,i#0 (copy),3
        %                                                                                   i#0,tmp%1#1,tmp%2#1
        !                                                                                   i#0,tmp%1#1,tmp%3#0
        v-load slot%0                                                                       i#0,tmp%1#1,tmp%3#0,slot_contents%1#0
        l-store slot_contents%1#0 3                                                         slot_contents%1#0,i#0,tmp%1#1,tmp%3#0
        l-load-copy i#0 2                                                                   slot_contents%1#0,i#0,tmp%1#1,tmp%3#0,i#0 (copy)
        itob                                                                                slot_contents%1#0,i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%0#0
        byte 0x00                                                                           slot_contents%1#0,i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%0#0,0x00
        int 0                                                                               slot_contents%1#0,i#0,tmp%1#1,tmp%3#0,aggregate%val_as_bytes%0#0,0x00,0
        l-load tmp%1#1 4                                                                    slot_contents%1#0,i#0,tmp%3#0,aggregate%val_as_bytes%0#0,0x00,0,tmp%1#1
        setbit                                                                              slot_contents%1#0,i#0,tmp%3#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0
        int 1                                                                               slot_contents%1#0,i#0,tmp%3#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0,1
        l-load tmp%3#0 3                                                                    slot_contents%1#0,i#0,aggregate%val_as_bytes%0#0,aggregate%encoded_bool%0#0,1,tmp%3#0
        setbit                                                                              slot_contents%1#0,i#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0
        l-load aggregate%val_as_bytes%0#0 1                                                 slot_contents%1#0,i#0,aggregate%set_bit%0#0,aggregate%val_as_bytes%0#0
        l-load aggregate%set_bit%0#0 1                                                      slot_contents%1#0,i#0,aggregate%val_as_bytes%0#0,aggregate%set_bit%0#0
        concat                                                                              slot_contents%1#0,i#0,aggregate%head%1#0
        l-load slot_contents%1#0 2                                                          i#0,aggregate%head%1#0,slot_contents%1#0
        l-load aggregate%head%1#0 1                                                         i#0,slot_contents%1#0,aggregate%head%1#0
        concat // on error: max array length exceeded                                       i#0,concat%1#0
        v-store slot%0                                                                      i#0
        // array/immutable.py:402
        // for i in urange(append):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_convert_to_array_and_back_for_header@2

    test_convert_to_array_and_back_after_for@5:
        v-load slot%0                                                                       slot_contents%2#0
        // array/immutable.py:404
        // return mutable.freeze()
        l-load-copy slot_contents%2#0 0                                                     slot_contents%2#0,slot_contents%2#0 (copy)
        len                                                                                 slot_contents%2#0,aggregate%bytes_len%0#0
        int 9                                                                               slot_contents%2#0,aggregate%bytes_len%0#0,9
        /                                                                                   slot_contents%2#0,aggregate%array_len%0#0
        itob                                                                                slot_contents%2#0,as_bytes%0#0
        extract 6 2                                                                         slot_contents%2#0,as_u16_bytes%0#0
        l-load slot_contents%2#0 1                                                          as_u16_bytes%0#0,slot_contents%2#0
        concat                                                                              converted_array%0#0
        // array/immutable.py:396
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     converted_array%0#0,0x151f7c75
        l-load converted_array%0#0 1                                                        0x151f7c75,converted_array%0#0
        concat                                                                              tmp%2#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple[routing]() -> void:
subroutine test_concat_with_arc4_tuple:
    test_concat_with_arc4_tuple_block@0:
        // array/immutable.py:406
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arg#0
        // array/immutable.py:410
        // prefix = ImmutableArray((arc4.UInt64(1), arc4.UInt64(2)))
        byte 0x000200000000000000010000000000000002                                         arg#0,0x000200000000000000010000000000000002
        // array/immutable.py:411
        // result = prefix + arg
        l-load arg#0 1                                                                      0x000200000000000000010000000000000002,arg#0
        concat // on error: max array length exceeded                                       concat%0#0
        l-load-copy concat%0#0 0                                                            concat%0#0,concat%0#0 (copy)
        extract 2 0                                                                         concat%0#0,extract_to_end%0#0
        len                                                                                 concat%0#0,len%0#0
        int 8                                                                               concat%0#0,len%0#0,8
        /                                                                                   concat%0#0,div_floor%0#0
        itob                                                                                concat%0#0,as_bytes%0#0
        extract 6 2                                                                         concat%0#0,as_u16_bytes%0#0
        l-load concat%0#0 1                                                                 as_u16_bytes%0#0,concat%0#0
        l-load as_u16_bytes%0#0 1                                                           concat%0#0,as_u16_bytes%0#0
        replace2 0                                                                          result#0
        // array/immutable.py:406
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     result#0,0x151f7c75
        l-load result#0 1                                                                   0x151f7c75,result#0
        concat                                                                              tmp%1#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple[routing]() -> void:
subroutine test_concat_with_native_tuple:
    test_concat_with_native_tuple_block@0:
        // array/immutable.py:414
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded(uint64,uint64)%0#0
        l-load-copy reinterpret_Encoded(uint64,uint64)%0#0 0                                reinterpret_Encoded(uint64,uint64)%0#0,reinterpret_Encoded(uint64,uint64)%0#0 (copy)
        extract 0 8                                                                         reinterpret_Encoded(uint64,uint64)%0#0,arg.0#0
        l-load reinterpret_Encoded(uint64,uint64)%0#0 1                                     arg.0#0,reinterpret_Encoded(uint64,uint64)%0#0
        extract 8 8                                                                         arg.0#0,arg.1#0
        // array/immutable.py:419
        // result = prefix + arg
        l-load arg.0#0 1                                                                    arg.1#0,arg.0#0
        l-load arg.1#0 1                                                                    arg.0#0,arg.1#0
        concat                                                                              aggregate%head%3#0
        // array/immutable.py:418
        // prefix = ImmutableArray((arc4.UInt64(1), arc4.UInt64(2)))
        byte 0x000200000000000000010000000000000002                                         aggregate%head%3#0,0x000200000000000000010000000000000002
        // array/immutable.py:419
        // result = prefix + arg
        l-load aggregate%head%3#0 1                                                         0x000200000000000000010000000000000002,aggregate%head%3#0
        concat // on error: max array length exceeded                                       concat%0#0
        byte 0x0004                                                                         concat%0#0,0x0004
        replace2 0                                                                          result#0
        // array/immutable.py:414
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     result#0,0x151f7c75
        l-load result#0 1                                                                   0x151f7c75,result#0
        concat                                                                              tmp%3#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple[routing]() -> void:
subroutine test_dynamic_concat_with_arc4_tuple:
    test_dynamic_concat_with_arc4_tuple_block@0:
        // array/immutable.py:422
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              arg#0
        // array/immutable.py:427
        // result = prefix + arg
        extract 4 0                                                                         data%0#0
        // array/immutable.py:426
        // prefix = ImmutableArray((arc4.String("a"), arc4.String("b")))
        byte 0x000200040007000161000162                                                     data%0#0,0x000200040007000161000162
        // array/immutable.py:427
        // result = prefix + arg
        l-load data%0#0 1                                                                   0x000200040007000161000162,data%0#0
        int 2                                                                               0x000200040007000161000162,data%0#0,2
        callsub dynamic_array_concat_byte_length_head                                       result#0
        // array/immutable.py:422
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     result#0,0x151f7c75
        l-load result#0 1                                                                   0x151f7c75,result#0
        concat                                                                              tmp%1#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple[routing]() -> void:
subroutine test_dynamic_concat_with_native_tuple:
    test_dynamic_concat_with_native_tuple_block@0:
        // array/immutable.py:430
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 0                    reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)
        int 0                                                                               reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy),0
        extract_uint16                                                                      reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 1                    reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)
        int 2                                                                               reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy),2
        extract_uint16                                                                      reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0
        l-load-copy reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 2                    reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)
        l-load aggregate%extract_uint16%0#0 2                                               reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy),aggregate%extract_uint16%0#0
        l-load-copy aggregate%extract_uint16%1#0 2                                          reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy),aggregate%extract_uint16%0#0,aggregate%extract_uint16%1#0 (copy)
        substring3                                                                          reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,arg.0#0
        l-load-copy reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 2                    reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,arg.0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 (copy)
        len                                                                                 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,arg.0#0,aggregate%len%0#0
        l-load reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0 3                         aggregate%extract_uint16%1#0,arg.0#0,aggregate%len%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0
        l-load aggregate%extract_uint16%1#0 3                                               arg.0#0,aggregate%len%0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0
        l-load aggregate%len%0#0 2                                                          arg.0#0,reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0,aggregate%extract_uint16%1#0,aggregate%len%0#0
        substring3                                                                          arg.0#0,arg.1#0
        // array/immutable.py:435
        // result = prefix + arg
        l-load arg.0#0 1                                                                    arg.1#0,arg.0#0
        l-load arg.1#0 1                                                                    arg.0#0,arg.1#0
        concat                                                                              concat%1#0
        // array/immutable.py:434
        // prefix = ImmutableArray((arc4.String("a"), arc4.String("b")))
        byte 0x000200040007000161000162                                                     concat%1#0,0x000200040007000161000162
        // array/immutable.py:435
        // result = prefix + arg
        l-load concat%1#0 1                                                                 0x000200040007000161000162,concat%1#0
        int 2                                                                               0x000200040007000161000162,concat%1#0,2
        callsub dynamic_array_concat_byte_length_head                                       result#0
        // array/immutable.py:430
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     result#0,0x151f7c75
        l-load result#0 1                                                                   0x151f7c75,result#0
        concat                                                                              tmp%3#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic[routing]() -> void:
subroutine test_concat_immutable_dynamic:
    test_concat_immutable_dynamic_block@0:
        // array/immutable.py:438
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              imm1#0
        txna ApplicationArgs 2                                                              imm1#0,imm2#0
        // array/immutable.py:442
        // return imm1 + imm2
        l-load-copy imm1#0 1                                                                imm1#0,imm2#0,imm1#0 (copy)
        int 0                                                                               imm1#0,imm2#0,imm1#0 (copy),0
        extract_uint16                                                                      imm1#0,imm2#0,extract_uint16%0#0
        l-load imm1#0 2                                                                     imm2#0,extract_uint16%0#0,imm1#0
        extract 2 0                                                                         imm2#0,extract_uint16%0#0,extract_to_end%0#0
        l-load-copy imm2#0 2                                                                imm2#0,extract_uint16%0#0,extract_to_end%0#0,imm2#0 (copy)
        extract 2 0                                                                         imm2#0,extract_uint16%0#0,extract_to_end%0#0,extract_to_end%1#0
        l-load imm2#0 3                                                                     extract_uint16%0#0,extract_to_end%0#0,extract_to_end%1#0,imm2#0
        int 0                                                                               extract_uint16%0#0,extract_to_end%0#0,extract_to_end%1#0,imm2#0,0
        extract_uint16                                                                      extract_uint16%0#0,extract_to_end%0#0,extract_to_end%1#0,aggregate%array_length%0#0
        l-load extract_uint16%0#0 3                                                         extract_to_end%0#0,extract_to_end%1#0,aggregate%array_length%0#0,extract_uint16%0#0
        l-load extract_to_end%0#0 3                                                         extract_to_end%1#0,aggregate%array_length%0#0,extract_uint16%0#0,extract_to_end%0#0
        l-load aggregate%array_length%0#0 2                                                 extract_to_end%1#0,extract_uint16%0#0,extract_to_end%0#0,aggregate%array_length%0#0
        l-load extract_to_end%1#0 3                                                         extract_uint16%0#0,extract_to_end%0#0,aggregate%array_length%0#0,extract_to_end%1#0
        callsub dynamic_array_concat_dynamic_element                                        as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        // array/immutable.py:438
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     as_Encoded(len+(uint64,(len+utf8[]))[])%0#0,0x151f7c75
        l-load as_Encoded(len+(uint64,(len+utf8[]))[])%0#0 1                                0x151f7c75,as_Encoded(len+(uint64,(len+utf8[]))[])%0#0
        concat                                                                              tmp%1#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4[routing]() -> void:
subroutine test_immutable_arc4:
    test_immutable_arc4_block@0:
        // array/immutable.py:444
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                              imm#0
        // array/immutable.py:446
        // assert imm, "expected non empty array"
        l-load-copy imm#0 0                                                                 imm#0,imm#0 (copy)
        int 0                                                                               imm#0,imm#0 (copy),0
        extract_uint16                                                                      imm#0,aggregate%array_length%0#0
        l-load-copy aggregate%array_length%0#0 0                                            imm#0,aggregate%array_length%0#0,aggregate%array_length%0#0 (copy)
        assert // expected non empty array                                                  imm#0,aggregate%array_length%0#0
        // array/immutable.py:447
        // imm = imm.replace(imm.length - 1, imm[0])
        l-load aggregate%array_length%0#0 0                                                 imm#0,aggregate%array_length%0#0
        int 1                                                                               imm#0,aggregate%array_length%0#0,1
        -                                                                                   imm#0,tmp%3#0
        l-load-copy imm#0 1                                                                 imm#0,tmp%3#0,imm#0 (copy)
        extract 2 16                                                                        imm#0,tmp%3#0,aggregate%encoded_element%0#0
        l-load tmp%3#0 1                                                                    imm#0,aggregate%encoded_element%0#0,tmp%3#0
        int 16                                                                              imm#0,aggregate%encoded_element%0#0,tmp%3#0,16
        *                                                                                   imm#0,aggregate%encoded_element%0#0,aggregate%write_offset%0#0
        int 2                                                                               imm#0,aggregate%encoded_element%0#0,aggregate%write_offset%0#0,2
        +                                                                                   imm#0,aggregate%encoded_element%0#0,aggregate%write_offset_with_length_header%0#0
        l-load imm#0 2                                                                      aggregate%encoded_element%0#0,aggregate%write_offset_with_length_header%0#0,imm#0
        l-load aggregate%write_offset_with_length_header%0#0 1                              aggregate%encoded_element%0#0,imm#0,aggregate%write_offset_with_length_header%0#0
        l-load aggregate%encoded_element%0#0 2                                              imm#0,aggregate%write_offset_with_length_header%0#0,aggregate%encoded_element%0#0
        replace3 // on error: index access is out of bounds                                 imm#0
        // array/immutable.py:444
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     imm#0,0x151f7c75
        l-load imm#0 1                                                                      0x151f7c75,imm#0
        concat                                                                              tmp%1#0
        log
        int 1                                                                               1
        return


// test_cases.array.immutable.ImmutableArrayContract.test_imm_fixed_arr[routing]() -> void:
subroutine test_imm_fixed_arr:
    test_imm_fixed_arr_block@0:
        // array/immutable.py:452
        // arr1 = zero_bytes(NativeStruct3)
        int 48                                                                              48
        bzero                                                                               arr1#0
        l-store-copy arr1#0 0                                                               arr1#0,arr1#0 (copy)
        v-store arr1#0                                                                      arr1#0
        // array/immutable.py:453
        // struct12 = NativeStruct(Txn.num_app_args + 1, Txn.num_app_args + 2)
        txn NumAppArgs                                                                      arr1#0,tmp%1#1
        int 1                                                                               arr1#0,tmp%1#1,1
        +                                                                                   arr1#0,tmp%2#0
        txn NumAppArgs                                                                      arr1#0,tmp%2#0,tmp%3#0
        int 2                                                                               arr1#0,tmp%2#0,tmp%3#0,2
        +                                                                                   arr1#0,tmp%2#0,tmp%4#0
        l-load tmp%2#0 1                                                                    arr1#0,tmp%4#0,tmp%2#0
        itob                                                                                arr1#0,tmp%4#0,aggregate%val_as_bytes%0#0
        l-load tmp%4#0 1                                                                    arr1#0,aggregate%val_as_bytes%0#0,tmp%4#0
        itob                                                                                arr1#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        l-load aggregate%val_as_bytes%0#0 1                                                 arr1#0,aggregate%val_as_bytes%1#0,aggregate%val_as_bytes%0#0
        l-load aggregate%val_as_bytes%1#0 1                                                 arr1#0,aggregate%val_as_bytes%0#0,aggregate%val_as_bytes%1#0
        concat                                                                              arr1#0,struct12#0
        l-store-copy struct12#0 0                                                           arr1#0,struct12#0,struct12#0 (copy)
        v-store struct12#0                                                                  arr1#0,struct12#0
        // array/immutable.py:454
        // arr2 = NativeStruct3((struct12, struct12, struct12))
        l-load-copy struct12#0 0                                                            arr1#0,struct12#0,struct12#0 (copy)
        l-load-copy struct12#0 1                                                            arr1#0,struct12#0,struct12#0 (copy),struct12#0 (copy)
        concat                                                                              arr1#0,struct12#0,aggregate%head%3#0
        l-load struct12#0 1                                                                 arr1#0,aggregate%head%3#0,struct12#0
        concat                                                                              arr1#0,arr2#0
        l-store-copy arr2#0 0                                                               arr1#0,arr2#0,arr2#0 (copy)
        v-store arr2#0                                                                      arr1#0,arr2#0
        // array/immutable.py:456
        // assert arr1 != arr2, "expected arrays to be different"
        l-load arr1#0 1                                                                     arr2#0,arr1#0
        l-load arr2#0 1                                                                     arr1#0,arr2#0
        !=                                                                                  tmp%6#0
        assert // expected arrays to be different
        // array/immutable.py:459
        // for i in urange(3):
        int 0                                                                               value_internal%0#0
        v-store i#0
        b test_imm_fixed_arr_for_header@2

    test_imm_fixed_arr_for_header@2:
        // array/immutable.py:459
        // for i in urange(3):
        v-load i#0                                                                          i#0
        int 3                                                                               i#0,3
        <                                                                                   continue_looping%0#0
        bz test_imm_fixed_arr_after_for@5 ; b test_imm_fixed_arr_for_body@3

    test_imm_fixed_arr_for_body@3:
        // array/immutable.py:460
        // arr1 = arr1.replace(i, struct12)
        v-load i#0                                                                          i#0
        l-store-copy i#0 0                                                                  i#0,i#0 (copy)
        int 16                                                                              i#0,i#0 (copy),16
        *                                                                                   i#0,aggregate%write_offset%0#0
        v-load arr1#0                                                                       i#0,aggregate%write_offset%0#0,arr1#0
        l-load aggregate%write_offset%0#0 1                                                 i#0,arr1#0,aggregate%write_offset%0#0
        v-load struct12#0                                                                   i#0,arr1#0,aggregate%write_offset%0#0,struct12#0
        replace3 // on error: index access is out of bounds                                 i#0,arr1#0
        v-store arr1#0                                                                      i#0
        // array/immutable.py:459
        // for i in urange(3):
        l-load i#0 0                                                                        i#0
        int 1                                                                               i#0,1
        +                                                                                   value_internal%0#0
        v-store i#0
        b test_imm_fixed_arr_for_header@2

    test_imm_fixed_arr_after_for@5:
        // array/immutable.py:462
        // assert arr1 == arr2, "expected arrays to be the same"
        v-load arr1#0                                                                       arr1#0
        v-load arr2#0                                                                       arr1#0,arr2#0
        ==                                                                                  tmp%8#0
        assert // expected arrays to be the same
        int 0                                                                               0
        v-store item_index_internal%0#0
        b test_imm_fixed_arr_for_header@6

    test_imm_fixed_arr_for_header@6:
        // array/immutable.py:464
        // for struct_it in arr1:
        v-load item_index_internal%0#0                                                      item_index_internal%0#0
        int 3                                                                               item_index_internal%0#0,3
        <                                                                                   continue_looping%1#0
        bz test_imm_fixed_arr_after_for@9 ; b test_imm_fixed_arr_for_body@7

    test_imm_fixed_arr_for_body@7:
        // array/immutable.py:464
        // for struct_it in arr1:
        v-load item_index_internal%0#0                                                      item_index_internal%0#0
        l-store-copy item_index_internal%0#0 0                                              item_index_internal%0#0,item_index_internal%0#0 (copy)
        int 16                                                                              item_index_internal%0#0,item_index_internal%0#0 (copy),16
        *                                                                                   item_index_internal%0#0,aggregate%bytes_offset%1#0
        v-load arr1#0                                                                       item_index_internal%0#0,aggregate%bytes_offset%1#0,arr1#0
        l-load aggregate%bytes_offset%1#0 1                                                 item_index_internal%0#0,arr1#0,aggregate%bytes_offset%1#0
        int 16                                                                              item_index_internal%0#0,arr1#0,aggregate%bytes_offset%1#0,16
        extract3 // on error: index access is out of bounds                                 item_index_internal%0#0,struct_it#0
        // array/immutable.py:465
        // assert struct_it == struct12, "expected items on iteration to be the same"
        v-load struct12#0                                                                   item_index_internal%0#0,struct_it#0,struct12#0
        ==                                                                                  item_index_internal%0#0,tmp%9#0
        assert // expected items on iteration to be the same                                item_index_internal%0#0
        l-load item_index_internal%0#0 0                                                    item_index_internal%0#0
        int 1                                                                               item_index_internal%0#0,1
        +                                                                                   item_index_internal%0#0
        v-store item_index_internal%0#0
        b test_imm_fixed_arr_for_header@6

    test_imm_fixed_arr_after_for@9:
        // array/immutable.py:467
        // self.imm_fixed_arr = arr1
        byte "imm_fixed_arr"                                                                "imm_fixed_arr"
        v-load arr1#0                                                                       "imm_fixed_arr",arr1#0
        l-store-copy arr1#0 1                                                               arr1#0,"imm_fixed_arr",arr1#0 (copy)
        app_global_put                                                                      arr1#0
        // array/immutable.py:471
        // assert sum_imm_fixed(mut_arr.freeze()) == 15, "expected sum to be 15"
        l-load-copy arr1#0 0                                                                arr1#0,arr1#0 (copy)
        callsub sum_imm_fixed                                                               arr1#0,tmp%13#0
        int 15                                                                              arr1#0,tmp%13#0,15
        ==                                                                                  arr1#0,tmp%14#0
        assert // expected sum to be 15                                                     arr1#0
        // array/immutable.py:473
        // mut_arr[0] = NativeStruct(UInt64(), UInt64())
        l-load arr1#0 0                                                                     arr1#0
        byte 0x00000000000000000000000000000000                                             arr1#0,0x00000000000000000000000000000000
        replace2 0 // on error: index access is out of bounds                               mut_arr#1
        // array/immutable.py:474
        // assert sum_imm_fixed(mut_arr.freeze()) == 10, "expected sum to be 10"
        callsub sum_imm_fixed                                                               tmp%17#0
        int 10                                                                              tmp%17#0,10
        ==                                                                                  tmp%18#0
        assert // expected sum to be 10
        // array/immutable.py:476
        // return self.imm_fixed_arr
        int 0                                                                               0
        byte "imm_fixed_arr"                                                                0,"imm_fixed_arr"
        app_global_get_ex                                                                   maybe_value%1#0,maybe_exists%1#0
        assert // check self.imm_fixed_arr exists                                           maybe_value%1#0
        // array/immutable.py:450
        // @arc4.abimethod()
        byte 0x151f7c75                                                                     maybe_value%1#0,0x151f7c75
        l-load maybe_value%1#0 1                                                            0x151f7c75,maybe_value%1#0
        concat                                                                              tmp%1#0
        log
        int 1                                                                               1
        return


