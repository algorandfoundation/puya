main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@28
    block@2: // abi_routing_L81
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint64_array()void" => block@3, method "test_biguint_array()void" => block@4, method "test_bool_array(uint64)void" => block@5, method "test_fixed_size_tuple_array()void" => block@6, method "test_fixed_size_named_tuple_array()void" => block@7, method "test_dynamic_sized_tuple_array()void" => block@8, method "test_dynamic_sized_named_tuple_array()void" => block@9, method "test_implicit_conversion_log(uint64[])void" => block@10, method "test_implicit_conversion_emit(uint64[])void" => block@11, method "test_nested_array(uint64,uint64[][])uint64[]" => block@12, method "test_bit_packed_tuples()void" => block@13, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@14, method "test_uint64_return(uint64)uint64[]" => block@15, method "test_bool_return(uint64)bool[]" => block@16, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@17, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@18, method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]" => block@19, method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]" => block@20, method "test_concat_with_native_tuple((uint64,uint64))uint64[]" => block@21, method "test_dynamic_concat_with_arc4_tuple((string,string))string[]" => block@22, method "test_dynamic_concat_with_native_tuple((string,string))string[]" => block@23, method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]" => block@24, method "test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]" => block@25, * => block@32}
    block@3: // test_uint64_array_route_L82
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@33
    block@4: // test_biguint_array_route_L118
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_biguint_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@33
    block@5: // test_bool_array_route_L143
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%15#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@33
    block@6: // test_fixed_size_tuple_array_route_L167
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@33
    block@7: // test_fixed_size_named_tuple_array_route_L185
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@33
    block@8: // test_dynamic_sized_tuple_array_route_L200
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@33
    block@9: // test_dynamic_sized_named_tuple_array_route_L219
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@33
    block@10: // test_implicit_conversion_log_route_L238
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(reinterpret_Encoded(len+uint64[])%0#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@33
    block@11: // test_implicit_conversion_emit_route_L242
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(reinterpret_Encoded(len+uint64[])%1#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8: bool = 1u
        goto block@33
    block@12: // test_nested_array_route_L246
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%44#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+(len+uint64[])[])%0#0: Encoded(len+(len+uint64[])[]) = (txna ApplicationArgs 2)
        let tmp%45#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_nested_array(tmp%44#0, reinterpret_Encoded(len+(len+uint64[])[])%0#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9: bool = 1u
        goto block@33
    block@13: // test_bit_packed_tuples_route_L264
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10: bool = 1u
        goto block@33
    block@14: // sum_uints_and_lengths_and_trues_route_L329
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 4)
        let (tmp%55#0: uint64, tmp%56#0: uint64, tmp%57#0: uint64, tmp%58#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(reinterpret_Encoded(len+uint64[])%2#0, reinterpret_Encoded(len+bool1[])%0#0, reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0, reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%0#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%55#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%56#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%57#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%58#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%3#1: Encoded(uint64,uint64,uint64,uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%encoded%4#1: Encoded(uint64,uint64,uint64,uint64) = (concat aggregate%encoded%3#1 0x)
        let tmp%59#0: Encoded(uint64,uint64,uint64,uint64) = aggregate%encoded%4#1
        let tmp%60#0: bytes = (concat 0x151f7c75 tmp%59#0)
        (log tmp%60#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11: bool = 1u
        goto block@33
    block@15: // test_uint64_return_route_L356
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%65#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let tmp%66#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%65#0)
        let tmp%67#0: bytes = (concat 0x151f7c75 tmp%66#0)
        (log tmp%67#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12: bool = 1u
        goto block@33
    block@16: // test_bool_return_route_L363
        let tmp%68#0: uint64 = (txn OnCompletion)
        let tmp%69#0: bool = (! tmp%68#0)
        (assert tmp%69#0) // OnCompletion is not NoOp
        let tmp%70#0: uint64 = (txn ApplicationID)
        (assert tmp%70#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%72#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%73#0: Encoded(len+bool1[]) = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%72#0)
        let tmp%74#0: bytes = (concat 0x151f7c75 tmp%73#0)
        (log tmp%74#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13: bool = 1u
        goto block@33
    block@17: // test_tuple_return_route_L370
        let tmp%75#0: uint64 = (txn OnCompletion)
        let tmp%76#0: bool = (! tmp%75#0)
        (assert tmp%76#0) // OnCompletion is not NoOp
        let tmp%77#0: uint64 = (txn ApplicationID)
        (assert tmp%77#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%79#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%80#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%79#0)
        let tmp%81#0: bytes = (concat 0x151f7c75 tmp%80#0)
        (log tmp%81#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14: bool = 1u
        goto block@33
    block@18: // test_dynamic_tuple_return_route_L377
        let tmp%82#0: uint64 = (txn OnCompletion)
        let tmp%83#0: bool = (! tmp%82#0)
        (assert tmp%83#0) // OnCompletion is not NoOp
        let tmp%84#0: uint64 = (txn ApplicationID)
        (assert tmp%84#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%86#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%87#0: Encoded(len+(uint64,(len+utf8[]))[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%86#0)
        let tmp%88#0: bytes = (concat 0x151f7c75 tmp%87#0)
        (log tmp%88#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15: bool = 1u
        goto block@33
    block@19: // test_convert_to_array_and_back_route_L384
        let tmp%89#0: uint64 = (txn OnCompletion)
        let tmp%90#0: bool = (! tmp%89#0)
        (assert tmp%90#0) // OnCompletion is not NoOp
        let tmp%91#0: uint64 = (txn ApplicationID)
        (assert tmp%91#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%1#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%93#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let tmp%94#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(reinterpret_Encoded(len+(uint64,bool1,bool1)[])%1#0, tmp%93#0)
        let tmp%95#0: bytes = (concat 0x151f7c75 tmp%94#0)
        (log tmp%95#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16: bool = 1u
        goto block@33
    block@20: // test_concat_with_arc4_tuple_route_L394
        let tmp%96#0: uint64 = (txn OnCompletion)
        let tmp%97#0: bool = (! tmp%96#0)
        (assert tmp%97#0) // OnCompletion is not NoOp
        let tmp%98#0: uint64 = (txn ApplicationID)
        (assert tmp%98#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let tmp%100#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(reinterpret_Encoded(uint64,uint64)%0#0)
        let tmp%101#0: bytes = (concat 0x151f7c75 tmp%100#0)
        (log tmp%101#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17: bool = 1u
        goto block@33
    block@21: // test_concat_with_native_tuple_route_L402
        let tmp%102#0: uint64 = (txn OnCompletion)
        let tmp%103#0: bool = (! tmp%102#0)
        (assert tmp%103#0) // OnCompletion is not NoOp
        let tmp%104#0: uint64 = (txn ApplicationID)
        (assert tmp%104#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 0u 8u)
        let aggregate%extract%1#1: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 8u 8u)
        let (tmp%106#0: Encoded(uint64), tmp%107#0: Encoded(uint64)) = (aggregate%extract%0#1, aggregate%extract%1#1)
        let tmp%108#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(tmp%106#0, tmp%107#0)
        let tmp%109#0: bytes = (concat 0x151f7c75 tmp%108#0)
        (log tmp%109#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18: bool = 1u
        goto block@33
    block@22: // test_dynamic_concat_with_arc4_tuple_route_L410
        let tmp%110#0: uint64 = (txn OnCompletion)
        let tmp%111#0: bool = (! tmp%110#0)
        (assert tmp%111#0) // OnCompletion is not NoOp
        let tmp%112#0: uint64 = (txn ApplicationID)
        (assert tmp%112#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%114#0: Encoded(len+(len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(reinterpret_Encoded((len+utf8[]),(len+utf8[]))%0#0)
        let tmp%115#0: bytes = (concat 0x151f7c75 tmp%114#0)
        (log tmp%115#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19: bool = 1u
        goto block@33
    block@23: // test_dynamic_concat_with_native_tuple_route_L418
        let tmp%116#0: uint64 = (txn OnCompletion)
        let tmp%117#0: bool = (! tmp%116#0)
        (assert tmp%117#0) // OnCompletion is not NoOp
        let tmp%118#0: uint64 = (txn ApplicationID)
        (assert tmp%118#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0: Encoded((len+utf8[]),(len+utf8[])) = (txna ApplicationArgs 1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0 0u)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0 2u)
        let aggregate%substring3%0#1: bytes = (substring3 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0 aggregate%extract_uint16%0#1 aggregate%extract_uint16%1#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0 2u)
        let aggregate%len%0#1: uint64 = (len reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0)
        let aggregate%substring3%1#1: bytes = (substring3 reinterpret_Encoded((len+utf8[]),(len+utf8[]))%1#0 aggregate%extract_uint16%2#1 aggregate%len%0#1)
        let (tmp%120#0: Encoded(len+utf8[]), tmp%121#0: Encoded(len+utf8[])) = (aggregate%substring3%0#1, aggregate%substring3%1#1)
        let tmp%122#0: Encoded(len+(len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(tmp%120#0, tmp%121#0)
        let tmp%123#0: bytes = (concat 0x151f7c75 tmp%122#0)
        (log tmp%123#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20: bool = 1u
        goto block@33
    block@24: // test_concat_immutable_dynamic_route_L426
        let tmp%124#0: uint64 = (txn OnCompletion)
        let tmp%125#0: bool = (! tmp%124#0)
        (assert tmp%125#0) // OnCompletion is not NoOp
        let tmp%126#0: uint64 = (txn ApplicationID)
        (assert tmp%126#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%1#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%2#0: Encoded(len+(uint64,(len+utf8[]))[]) = (txna ApplicationArgs 2)
        let tmp%128#0: Encoded(len+(uint64,(len+utf8[]))[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%1#0, reinterpret_Encoded(len+(uint64,(len+utf8[]))[])%2#0)
        let tmp%129#0: bytes = (concat 0x151f7c75 tmp%128#0)
        (log tmp%129#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21: bool = 1u
        goto block@33
    block@25: // test_immutable_arc4_route_L432
        let tmp%130#0: uint64 = (txn OnCompletion)
        let tmp%131#0: bool = (! tmp%130#0)
        (assert tmp%131#0) // OnCompletion is not NoOp
        let tmp%132#0: uint64 = (txn ApplicationID)
        (assert tmp%132#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%134#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let tmp%135#0: bytes = (concat 0x151f7c75 tmp%134#0)
        (log tmp%135#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22: bool = 1u
        goto block@33
    block@28: // bare_routing_L81
        let tmp%136#0: uint64 = (txn OnCompletion)
        goto tmp%136#0 ? block@32 : block@29
    block@29: // __algopy_default_create_L1
        let tmp%137#0: uint64 = (txn ApplicationID)
        let tmp%138#0: bool = (! tmp%137#0)
        (assert tmp%138#0) // can only call when creating
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#23: bool = 1u
        goto block@33
    block@32: // after_if_else_L81
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#24: bool = 0u
        goto block@33
    block@33: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1 <- block@4, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2 <- block@5, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3 <- block@6, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4 <- block@7, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5 <- block@8, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6 <- block@9, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7 <- block@10, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8 <- block@11, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9 <- block@12, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10 <- block@13, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11 <- block@14, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12 <- block@15, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13 <- block@16, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14 <- block@17, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15 <- block@18, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16 <- block@19, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17 <- block@20, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18 <- block@21, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19 <- block@22, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20 <- block@23, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21 <- block@24, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22 <- block@25, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#23 <- block@29, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#24 <- block@32)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%10#0: bytes = (itob item_offset#1)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let new_head#2: bytes = (concat new_head#1 tmp%11#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#1)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%15#0 tmp%17#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tmp%14#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%13#0, new_length#0, 0u)
        let tmp%15#0: bytes = (concat tmp%5#0 tmp%14#0)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#2: bytes = (concat new_head#1 tmp%5#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#4: bytes = (concat new_head#3 tmp%12#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#3)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%1#0 item_offset_adjustment#2)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.array.immutable.times(n: uint64) -> string:
    block@0: // L439
        let result#0: string = ""
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L442
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let result#1: string = φ(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L443
        let result#2: string = (concat result#1 " ")
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L442
        return result#1

subroutine test_cases.array.immutable.add_x(arr: Encoded(len+uint64[]), x: uint64) -> Encoded(len+uint64[]):
    block@0: // L447
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L449
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+uint64[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L450
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%1#1: Encoded(uint64[]) = (concat aggregate%encoded%0#1 0x)
        let tmp%0#0: Encoded(uint64[]) = aggregate%encoded%1#1
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#1 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L449
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L82
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+uint64[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+uint64[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%3#1: Encoded(uint64[]) = (concat aggregate%encoded%2#1 0x)
        let tmp%1#0: Encoded(uint64[]) = aggregate%encoded%3#1
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#0 tmp%1#0) // on error: max array length exceeded
        let add%0#0: uint64 = (+ array_length%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#1: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%2#0: bool = (== array_length%1#0 1u)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (- array_length%1#0 1u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%3#0 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let values%0#0: uint64 = (btoi array_item%0#0)
        let tmp%4#0: bool = (== values%0#0 42u)
        (assert tmp%4#0)
        let arr#2: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(arr#1, 5u)
        let array_length%3#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%6#0: bool = (== array_length%3#0 6u)
        (assert tmp%6#0)
        let tmp%7#0: uint64 = (- array_length%3#0 1u)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) arr#2)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%7#0 8u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 8u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64) = aggregate%encoded_element%1#1
        let values%1#0: uint64 = (btoi array_item%1#0)
        let tmp%8#0: bool = (== values%1#0 4u)
        (assert tmp%8#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 43u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%4#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%5#1: Encoded(uint64[]) = (concat aggregate%encoded%4#1 0x)
        let tmp%9#0: Encoded(uint64[]) = aggregate%encoded%5#1
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 tmp%9#0) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%3#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%10#0: bool = (== array_length%5#0 7u)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (- array_length%5#0 1u)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%11#0 8u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 8u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64) = aggregate%encoded_element%2#1
        let values%2#0: uint64 = (btoi array_item%2#0)
        let tmp%12#0: bool = (== values%2#0 43u)
        (assert tmp%12#0)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 8u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 8u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64) = aggregate%encoded_element%3#1
        let values%3#0: uint64 = (btoi array_item%3#0)
        let tmp%13#0: bool = (== values%3#0 42u)
        (assert tmp%13#0)
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L456
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let arr#9: Encoded(len+uint64[]) = φ(arr#3 <- block@0, arr#10 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L457
        let (tmp%0#1: bytes, arr#10: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#9, 8u)
        let tmp%2#1: uint64 = (btoi tmp%0#1)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@4: // after_for_L456
        let array_length%7#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%15#0: bool = (== array_length%7#0 4u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (- array_length%7#0 1u)
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) arr#9)
        let aggregate%bytes_offset%4#1: uint64 = (* tmp%16#0 8u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%4#1 8u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint64) = aggregate%encoded_element%4#1
        let values%4#0: uint64 = (btoi array_item%4#0)
        let tmp%17#0: bool = (== values%4#0 2u)
        (assert tmp%17#0)
        let arr#5: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(arr#9, 10u)
        let array_length%9#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%19#0: bool = (== array_length%9#0 14u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = (- array_length%9#0 1u)
        let aggregate%array_trimmed%5#1: bytes = ((extract 2 0) arr#5)
        let aggregate%bytes_offset%5#1: uint64 = (* tmp%20#0 8u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%5#1 aggregate%bytes_offset%5#1 8u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint64) = aggregate%encoded_element%5#1
        let values%5#0: uint64 = (btoi array_item%5#0)
        let tmp%21#0: bool = (== values%5#0 9u)
        (assert tmp%21#0)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 44u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded%7#1: Encoded(uint64[]) = (concat aggregate%encoded%6#1 0x)
        let tmp%22#0: Encoded(uint64[]) = aggregate%encoded%7#1
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#5 tmp%22#0) // on error: max array length exceeded
        let add%2#0: uint64 = (+ array_length%9#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#6: Encoded(len+uint64[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let array_length%11#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%23#0: bool = (== array_length%11#0 15u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (- array_length%11#0 1u)
        let aggregate%array_trimmed%6#1: bytes = ((extract 2 0) arr#6)
        let aggregate%bytes_offset%6#1: uint64 = (* tmp%24#0 8u)
        let aggregate%encoded_element%6#1: bytes = (extract3 aggregate%array_trimmed%6#1 aggregate%bytes_offset%6#1 8u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint64) = aggregate%encoded_element%6#1
        let values%6#0: uint64 = (btoi array_item%6#0)
        let tmp%25#0: bool = (== values%6#0 44u)
        (assert tmp%25#0)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob 23u)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#1
        let aggregate%array_trimmed%7#1: bytes = ((extract 2 0) arr#6)
        let aggregate%bytes_offset%7#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%7#1: bytes = (extract3 aggregate%array_trimmed%7#1 aggregate%bytes_offset%7#1 8u) // on error: index access is out of bounds
        let aggregate%write_offset%0#1: uint64 = (* 2u 8u)
        let aggregate%write_offset_with_length_header%0#1: uint64 = (+ aggregate%write_offset%0#1 2u)
        let aggregate%updated_array%0#1: bytes = (replace3 arr#6 aggregate%write_offset_with_length_header%0#1 encoded_value%0#0)
        let arr#7: Encoded(len+uint64[]) = aggregate%updated_array%0#1
        let array_length%13#0: uint64 = (extract_uint16 arr#7 0u)
        let tmp%26#0: bool = (== array_length%13#0 15u)
        (assert tmp%26#0)
        let aggregate%array_trimmed%8#1: bytes = ((extract 2 0) arr#7)
        let aggregate%bytes_offset%8#1: uint64 = (* 2u 8u)
        let aggregate%encoded_element%8#1: bytes = (extract3 aggregate%array_trimmed%8#1 aggregate%bytes_offset%8#1 8u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint64) = aggregate%encoded_element%8#1
        let values%7#0: uint64 = (btoi array_item%7#0)
        let tmp%27#0: bool = (== values%7#0 23u)
        (assert tmp%27#0)
        (app_global_put "a" arr#7)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_biguint_array() -> void:
    block@0: // L118
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+uint512[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+uint512[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let tmp%3#0: biguint = (itob tmp%2#0)
        let aggregate%value_len%0#1: uint64 = (len tmp%3#0)
        let aggregate%len_ok%0#1: bool = (<= aggregate%value_len%0#1 64u)
        (assert aggregate%len_ok%0#1) // overflow
        let aggregate%bzero%0#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%0#1: bytes[64] = (b| tmp%3#0 aggregate%bzero%0#1)
        let aggregate%as_Encoded(uint512)%0#1: Encoded(uint512) = aggregate%arc4_encoded%0#1
        let aggregate%encoded%2#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%0#1)
        let aggregate%encoded%3#1: Encoded(uint512[]) = (concat aggregate%encoded%2#1 0x)
        let tmp%4#0: Encoded(uint512[]) = aggregate%encoded%3#1
        let concat%0#0: Encoded(len+uint512[]) = (concat arr#0 tmp%4#0) // on error: max array length exceeded
        let add%0#0: uint64 = (+ array_length%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#1: Encoded(len+uint512[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== array_length%1#0 1u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (- array_length%1#0 1u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%bytes_offset%0#1: uint64 = (* tmp%6#0 64u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 64u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint512) = aggregate%encoded_element%0#1
        let values%0#0: biguint = array_item%0#0
        let tmp%7#0: bool = (b== values%0#0 0b)
        (assert tmp%7#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L463
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#6: Encoded(len+uint512[]) = φ(arr#1 <- block@0, arr#7 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L464
        let tmp%0#1: biguint = (itob i#1)
        let aggregate%value_len%1#1: uint64 = (len tmp%0#1)
        let aggregate%len_ok%1#1: bool = (<= aggregate%value_len%1#1 64u)
        (assert aggregate%len_ok%1#1) // overflow
        let aggregate%bzero%1#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%1#1: bytes[64] = (b| tmp%0#1 aggregate%bzero%1#1)
        let aggregate%as_Encoded(uint512)%1#1: Encoded(uint512) = aggregate%arc4_encoded%1#1
        let aggregate%encoded%4#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%1#1)
        let aggregate%encoded%5#1: Encoded(uint512[]) = (concat aggregate%encoded%4#1 0x)
        let tmp%1#1: Encoded(uint512[]) = aggregate%encoded%5#1
        let concat%0#1: Encoded(len+uint512[]) = (concat arr#6 tmp%1#1) // on error: max array length exceeded
        let extract_uint16%0#1: uint64 = (extract_uint16 arr#6 0u)
        let add%0#1: uint64 = (+ extract_uint16%0#1 1u)
        let as_bytes%0#1: bytes[8] = (itob add%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let arr#7: Encoded(len+uint512[]) = ((replace2 0) concat%0#1 as_u16_bytes%0#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@4: // after_for_L463
        let array_length%3#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%9#0: bool = (== array_length%3#0 6u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (- array_length%3#0 1u)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) arr#6)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%10#0 64u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 64u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint512) = aggregate%encoded_element%1#1
        let values%1#0: biguint = array_item%1#0
        let tmp%11#0: bool = (b== values%1#0 4b)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (txn NumAppArgs)
        let tmp%13#0: biguint = (itob tmp%12#0)
        let tmp%14#0: biguint = (b- 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b tmp%13#0)
        let aggregate%value_len%2#1: uint64 = (len tmp%14#0)
        let aggregate%len_ok%2#1: bool = (<= aggregate%value_len%2#1 64u)
        (assert aggregate%len_ok%2#1) // overflow
        let aggregate%bzero%2#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%2#1: bytes[64] = (b| tmp%14#0 aggregate%bzero%2#1)
        let aggregate%as_Encoded(uint512)%2#1: Encoded(uint512) = aggregate%arc4_encoded%2#1
        let aggregate%encoded%6#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%2#1)
        let aggregate%encoded%7#1: Encoded(uint512[]) = (concat aggregate%encoded%6#1 0x)
        let tmp%15#0: Encoded(uint512[]) = aggregate%encoded%7#1
        let concat%1#0: Encoded(len+uint512[]) = (concat arr#6 tmp%15#0) // on error: max array length exceeded
        let add%1#0: uint64 = (+ array_length%3#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: Encoded(len+uint512[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let array_length%5#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%16#0: bool = (== array_length%5#0 7u)
        (assert tmp%16#0)
        let tmp%17#0: uint64 = (- array_length%5#0 1u)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%2#1: uint64 = (* tmp%17#0 64u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 64u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint512) = aggregate%encoded_element%2#1
        let values%2#0: biguint = array_item%2#0
        let tmp%18#0: bool = (b== values%2#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084094b)
        (assert tmp%18#0)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%3#1: uint64 = (* 0u 64u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 64u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint512) = aggregate%encoded_element%3#1
        let values%3#0: biguint = array_item%3#0
        let tmp%19#0: bool = (b== values%3#0 0b)
        (assert tmp%19#0)
        let aggregate%value_len%3#1: uint64 = (len 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        let aggregate%len_ok%3#1: bool = (<= aggregate%value_len%3#1 64u)
        (assert aggregate%len_ok%3#1) // overflow
        let aggregate%bzero%3#1: bytes = (bzero 64u)
        let aggregate%arc4_encoded%3#1: bytes[64] = (b| 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b aggregate%bzero%3#1)
        let aggregate%as_Encoded(uint512)%3#1: Encoded(uint512) = aggregate%arc4_encoded%3#1
        let aggregate%encoded%8#1: Encoded(uint512) = (concat 0x aggregate%as_Encoded(uint512)%3#1)
        let aggregate%encoded%9#1: Encoded(uint512[]) = (concat aggregate%encoded%8#1 0x)
        let tmp%20#0: Encoded(uint512[]) = aggregate%encoded%9#1
        let concat%2#0: Encoded(len+uint512[]) = (concat arr#3 tmp%20#0) // on error: max array length exceeded
        let add%2#0: uint64 = (+ array_length%5#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#4: Encoded(len+uint512[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let array_length%7#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%21#0: bool = (== array_length%7#0 8u)
        (assert tmp%21#0)
        let tmp%22#0: uint64 = (- array_length%7#0 1u)
        let aggregate%array_trimmed%4#1: bytes = ((extract 2 0) arr#4)
        let aggregate%bytes_offset%4#1: uint64 = (* tmp%22#0 64u)
        let aggregate%encoded_element%4#1: bytes = (extract3 aggregate%array_trimmed%4#1 aggregate%bytes_offset%4#1 64u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint512) = aggregate%encoded_element%4#1
        let values%4#0: biguint = array_item%4#0
        let tmp%23#0: bool = (b== values%4#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        (assert tmp%23#0)
        let aggregate%array_trimmed%5#1: bytes = ((extract 2 0) arr#4)
        let aggregate%bytes_offset%5#1: uint64 = (* 0u 64u)
        let aggregate%encoded_element%5#1: bytes = (extract3 aggregate%array_trimmed%5#1 aggregate%bytes_offset%5#1 64u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint512) = aggregate%encoded_element%5#1
        let values%5#0: biguint = array_item%5#0
        let tmp%24#0: bool = (b== values%5#0 0b)
        (assert tmp%24#0)
        (box_del 0x62696775696e74)
        (box_put 0x62696775696e74 arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L143
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+bool1[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+bool1[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L148
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+bool1[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L149
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: bool = (== i#1 tmp%1#0)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let aggregate%encoded%2#1: Encoded(bool8) = (concat 0x aggregate%as_Encoded(bool8)%0#1)
        let aggregate%encoded%3#1: Encoded(bool8[]) = (concat aggregate%encoded%2#1 0x)
        let tmp%3#0: Encoded(bool8[]) = aggregate%encoded%3#1
        let arr#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, tmp%3#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L148
        let array_length#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%4#0: bool = (== array_length#0 length#0)
        (assert tmp%4#0)
        goto length#0 ? block@5 : block@6
    block@5: // if_body_L154
        let aggregate%array_length%0#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%lt%0#1: bool = (< 0u aggregate%array_length%0#1)
        (assert aggregate%lt%0#1) // index access is out of bounds
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%get_bit%0#1: uint64 = (getbit aggregate%array_trimmed%0#1 0u)
        let array_item%0#0: bool = aggregate%get_bit%0#1
        let tmp%6#0: bool = (! array_item%0#0)
        (assert tmp%6#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L153
        let tmp%7#0: bool = (> length#0 1u)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // if_body_L156
        let aggregate%array_length%1#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%lt%1#1: bool = (< 1u aggregate%array_length%1#1)
        (assert aggregate%lt%1#1) // index access is out of bounds
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) arr#1)
        let aggregate%get_bit%1#1: uint64 = (getbit aggregate%array_trimmed%1#1 1u)
        let array_item%1#0: bool = aggregate%get_bit%1#1
        let tmp%8#0: bool = (! array_item%1#0)
        (assert tmp%8#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L155
        let tmp%9#0: bool = (> length#0 2u)
        goto tmp%9#0 ? block@9 : block@10
    block@9: // if_body_L158
        let aggregate%array_length%2#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%lt%2#1: bool = (< 2u aggregate%array_length%2#1)
        (assert aggregate%lt%2#1) // index access is out of bounds
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) arr#1)
        let aggregate%get_bit%2#1: uint64 = (getbit aggregate%array_trimmed%2#1 2u)
        let array_item%2#0: bool = aggregate%get_bit%2#1
        (assert array_item%2#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L157
        let tmp%10#0: bool = (> length#0 3u)
        goto tmp%10#0 ? block@11 : block@12
    block@11: // if_body_L160
        let tmp%11#0: uint64 = (- length#0 1u)
        let aggregate%array_length%3#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%lt%3#1: bool = (< tmp%11#0 aggregate%array_length%3#1)
        (assert aggregate%lt%3#1) // index access is out of bounds
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) arr#1)
        let aggregate%get_bit%3#1: uint64 = (getbit aggregate%array_trimmed%3#1 tmp%11#0)
        let array_item%3#0: bool = aggregate%get_bit%3#1
        let tmp%12#0: bool = (! array_item%3#0)
        (assert tmp%12#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L159
        (app_global_put "g" arr#1)
        goto length#0 ? block@13 : block@14
    block@13: // if_body_L164
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#1: bytes = ((extract 6 0) tmp%2#1)
        let result#0: bytes = ((replace2 0) arr#1 tmp%3#1)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%8#1: uint64 = (+ length_minus_1#0 7u)
        let tmp%9#1: uint64 = (/ tmp%8#1 8u)
        let tmp%10#1: uint64 = (+ 2u tmp%9#1)
        let result#2: bytes = (substring3 result#1 0u tmp%10#1)
        let array_length%2#0: uint64 = (extract_uint16 result#2 0u)
        let tmp%16#0: uint64 = (- length#0 1u)
        let tmp%17#0: bool = (== array_length%2#0 tmp%16#0)
        (assert tmp%17#0)
        goto block@14
    block@14: // after_if_else_L163
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L167
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+(uint64,uint64)[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+(uint64,uint64)[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L172
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,uint64)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L173
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: uint64 = (+ i#1 2u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%3#1: Encoded(uint64,uint64) = (concat aggregate%encoded%2#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%4#1: Encoded(uint64,uint64) = (concat aggregate%encoded%3#1 0x)
        let aggregate%encoded%5#1: Encoded((uint64,uint64)) = (concat 0x aggregate%encoded%4#1)
        let aggregate%encoded%6#1: Encoded((uint64,uint64)[]) = (concat aggregate%encoded%5#1 0x)
        let tmp%3#0: Encoded((uint64,uint64)[]) = aggregate%encoded%6#1
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat arr#1 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        goto block@1
    block@4: // after_for_L172
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%4#0: bool = (== array_length%1#0 5u)
        (assert tmp%4#0)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract%1#1: bytes = (extract3 array_item%0#0 8u 8u)
        let aggregate%item1%0#1: uint64 = (btoi aggregate%extract%1#1)
        let (values%0#0: uint64, values%1#0: uint64) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let tmp%5#0: bool = (== values%0#0 1u)
        let tmp%6#0: bool = (== values%1#0 2u)
        let tmp%7#0: bool = (&& tmp%5#0 tmp%6#0)
        (assert tmp%7#0)
        let tmp%8#0: uint64 = (- array_length%1#0 1u)
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) arr#1)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%8#0 16u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 16u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint64,uint64) = aggregate%encoded_element%1#1
        let aggregate%extract%2#1: bytes = (extract3 array_item%1#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract%3#1: bytes = (extract3 array_item%1#0 8u 8u)
        let aggregate%item1%1#1: uint64 = (btoi aggregate%extract%3#1)
        let (values%2#0: uint64, values%3#0: uint64) = (aggregate%item0%1#1, aggregate%item1%1#1)
        let tmp%9#0: bool = (== values%2#0 5u)
        let tmp%10#0: bool = (== values%3#0 6u)
        let tmp%11#0: bool = (&& tmp%9#0 tmp%10#0)
        (assert tmp%11#0)
        let (tmp%12#0: bytes, arr#3: Encoded(len+(uint64,uint64)[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 16u)
        let aggregate%extract%4#1: bytes = (extract3 tmp%12#0 0u 8u)
        let aggregate%item0%2#1: uint64 = (btoi aggregate%extract%4#1)
        let aggregate%extract%5#1: bytes = (extract3 tmp%12#0 8u 8u)
        let aggregate%item1%2#1: uint64 = (btoi aggregate%extract%5#1)
        let (tmp%14#0: uint64, tmp%15#0: uint64) = (aggregate%item0%2#1, aggregate%item1%2#1)
        let array_length%3#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%16#0: bool = (== array_length%3#0 4u)
        (assert tmp%16#0)
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%2#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%2#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%2#1 16u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,uint64) = aggregate%encoded_element%2#1
        let aggregate%extract%6#1: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%3#1: uint64 = (btoi aggregate%extract%6#1)
        let aggregate%extract%7#1: bytes = (extract3 array_item%2#0 8u 8u)
        let aggregate%item1%3#1: uint64 = (btoi aggregate%extract%7#1)
        let (values%4#0: uint64, values%5#0: uint64) = (aggregate%item0%3#1, aggregate%item1%3#1)
        let tmp%17#0: bool = (== values%4#0 1u)
        let tmp%18#0: bool = (== values%5#0 2u)
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = (- array_length%3#0 1u)
        let aggregate%array_trimmed%3#1: bytes = ((extract 2 0) arr#3)
        let aggregate%bytes_offset%3#1: uint64 = (* tmp%20#0 16u)
        let aggregate%encoded_element%3#1: bytes = (extract3 aggregate%array_trimmed%3#1 aggregate%bytes_offset%3#1 16u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint64,uint64) = aggregate%encoded_element%3#1
        let aggregate%extract%8#1: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%4#1: uint64 = (btoi aggregate%extract%8#1)
        let aggregate%extract%9#1: bytes = (extract3 array_item%3#0 8u 8u)
        let aggregate%item1%4#1: uint64 = (btoi aggregate%extract%9#1)
        let (values%6#0: uint64, values%7#0: uint64) = (aggregate%item0%4#1, aggregate%item1%4#1)
        let tmp%21#0: bool = (== values%6#0 4u)
        let tmp%22#0: bool = (== values%7#0 5u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        (app_global_put "c" arr#3)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L185
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+(uint64,bool1,bool1)[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L190
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,bool1,bool1)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L191
        let tmp%1#0: uint64 = (% i#1 2u)
        let tmp%2#0: bool = (! tmp%1#0)
        let tmp%3#0: uint64 = (* i#1 3u)
        let tmp%4#0: uint64 = (% tmp%3#0 2u)
        let tmp%5#0: bool = (! tmp%4#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let aggregate%encoded%3#1: Encoded(uint64,bool1) = (concat aggregate%encoded%2#1 aggregate%encoded_bool%0#1)
        let aggregate%set_bit%0#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%3#1 65u tmp%5#0)
        let aggregate%encoded%4#1: Encoded(uint64,bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let aggregate%encoded%5#1: Encoded((uint64,bool1,bool1)) = (concat 0x aggregate%encoded%4#1)
        let aggregate%encoded%6#1: Encoded((uint64,bool1,bool1)[]) = (concat aggregate%encoded%5#1 0x)
        let tmp%6#0: Encoded((uint64,bool1,bool1)[]) = aggregate%encoded%6#1
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#1 tmp%6#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+(uint64,bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L190
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%7#0: bool = (== array_length%1#0 5u)
        (assert tmp%7#0)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 9u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 9u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,bool1,bool1) = aggregate%encoded_element%0#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%get_bit%0#1: uint64 = (getbit array_item%0#0 64u)
        let aggregate%get_bit%1#1: uint64 = (getbit array_item%0#0 65u)
        let (foo#0: uint64, bar#0: bool, baz#0: bool) = (aggregate%item0%0#1, aggregate%get_bit%0#1, aggregate%get_bit%1#1)
        let tmp%8#0: bool = (! foo#0)
        (assert tmp%8#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L200
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+(uint64,(len+uint8[]))[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+(uint64,(len+uint8[]))[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L205
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,(len+uint8[]))[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L206
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: bytes = (bzero i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%length%0#1: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 tmp%2#0)
        let aggregate%as_Encoded(len+uint8[])%0#1: Encoded(len+uint8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%3#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%4#1: Encoded(uint64,(len+uint8[])) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%encoded%4#1)
        let aggregate%data_length%1#1: uint64 = (len aggregate%encoded%4#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 2u aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%5#1: Encoded((uint64,(len+uint8[]))) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%6#1: Encoded((uint64,(len+uint8[]))[]) = (concat aggregate%encoded%5#1 aggregate%tail%1#1)
        let tmp%3#0: Encoded((uint64,(len+uint8[]))[]) = aggregate%encoded%6#1
        let arr#2: Encoded(len+(uint64,(len+uint8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%3#0)
        goto block@1
    block@4: // after_for_L205
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%4#0: bool = (== array_length%1#0 5u)
        (assert tmp%4#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L209
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L210
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%item_offset_offset%0#1: uint64 = (* i#4 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%next_index%0#1: uint64 = (+ i#4 1u)
        let aggregate%has_next%0#1: uint64 = (- aggregate%array_length%0#1 aggregate%next_index%0#1) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%0#1)
        let aggregate%next_item_offset_offset%0#1: uint64 = (* aggregate%next_index%0#1 2u)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%next_item_offset_offset%0#1)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%0#1: bytes = (substring3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%end_offset%0#1)
        let array_item%0#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%0#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 array_item%0#0 8u)
        let aggregate%len%0#1: uint64 = (len array_item%0#0)
        let aggregate%substring3%1#1: bytes = (substring3 array_item%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let (values%0#0: uint64, values%1#0: bytes) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let i#5: uint64 = (+ i#4 1u)
        let tmp%6#0: bool = (== values%0#0 i#5)
        (assert tmp%6#0) // expected 1st element to be correct
        let tmp%7#0: uint64 = (len values%1#0)
        let tmp%8#0: bool = (== tmp%7#0 i#4)
        (assert tmp%8#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L209
        let (tmp%9#0: bytes, arr#4: Encoded(len+(uint64,(len+uint8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let aggregate%extract%1#1: bytes = (extract3 tmp%9#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tmp%9#0 8u)
        let aggregate%len%1#1: uint64 = (len tmp%9#0)
        let aggregate%substring3%2#1: bytes = (substring3 tmp%9#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let (tmp%11#0: uint64, tmp%12#0: bytes) = (aggregate%item0%1#1, aggregate%item1%1#1)
        let array_length%2#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%13#0: bool = (== array_length%2#0 4u)
        (assert tmp%13#0)
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) arr#4)
        let aggregate%array_length%1#1: uint64 = (extract_uint16 arr#4 0u)
        let aggregate%item_offset_offset%1#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%item_offset_offset%1#1)
        let aggregate%next_index%1#1: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#1: uint64 = (- aggregate%array_length%1#1 aggregate%next_index%1#1) // on error: index access is out of bounds
        let aggregate%end_of_array%1#1: uint64 = (len aggregate%array_head_and_tail%1#1)
        let aggregate%next_item_offset_offset%1#1: uint64 = (* aggregate%next_index%1#1 2u)
        let aggregate%next_item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%next_item_offset_offset%1#1)
        let aggregate%end_offset%1#1: uint64 = (select aggregate%end_of_array%1#1 aggregate%next_item_offset%1#1 aggregate%has_next%1#1)
        let aggregate%substring3%3#1: bytes = (substring3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%end_offset%1#1)
        let array_item%2#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%3#1
        let aggregate%extract%2#1: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%2#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 array_item%2#0 8u)
        let aggregate%len%2#1: uint64 = (len array_item%2#0)
        let aggregate%substring3%4#1: bytes = (substring3 array_item%2#0 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let aggregate%item1%2#1: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let (values%4#0: uint64, values%5#0: bytes) = (aggregate%item0%2#1, aggregate%item1%2#1)
        let tmp%14#0: bool = (== values%4#0 1u)
        let tmp%15#0: bytes = (bzero 0u)
        let tmp%16#0: bool = (== values%5#0 tmp%15#0)
        let tmp%17#0: bool = (&& tmp%14#0 tmp%16#0)
        (assert tmp%17#0) // expected 1, 0
        let tmp%18#0: uint64 = (- array_length%2#0 1u)
        let aggregate%array_head_and_tail%2#1: bytes = ((extract 2 0) arr#4)
        let aggregate%array_length%2#1: uint64 = (extract_uint16 arr#4 0u)
        let aggregate%item_offset_offset%2#1: uint64 = (* tmp%18#0 2u)
        let aggregate%item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%item_offset_offset%2#1)
        let aggregate%next_index%2#1: uint64 = (+ tmp%18#0 1u)
        let aggregate%has_next%2#1: uint64 = (- aggregate%array_length%2#1 aggregate%next_index%2#1) // on error: index access is out of bounds
        let aggregate%end_of_array%2#1: uint64 = (len aggregate%array_head_and_tail%2#1)
        let aggregate%next_item_offset_offset%2#1: uint64 = (* aggregate%next_index%2#1 2u)
        let aggregate%next_item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%next_item_offset_offset%2#1)
        let aggregate%end_offset%2#1: uint64 = (select aggregate%end_of_array%2#1 aggregate%next_item_offset%2#1 aggregate%has_next%2#1)
        let aggregate%substring3%5#1: bytes = (substring3 aggregate%array_head_and_tail%2#1 aggregate%item_offset%2#1 aggregate%end_offset%2#1)
        let array_item%3#0: Encoded(uint64,(len+uint8[])) = aggregate%substring3%5#1
        let aggregate%extract%3#1: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%3#1: uint64 = (btoi aggregate%extract%3#1)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%3#1: uint64 = (len array_item%3#0)
        let aggregate%substring3%6#1: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%3#1 aggregate%len%3#1)
        let aggregate%item1%3#1: bytes = ((extract 2 0) aggregate%substring3%6#1)
        let (values%6#0: uint64, values%7#0: bytes) = (aggregate%item0%3#1, aggregate%item1%3#1)
        let tmp%19#0: bool = (== values%6#0 4u)
        let tmp%20#0: bytes = (bzero 3u)
        let tmp%21#0: bool = (== values%7#0 tmp%20#0)
        let tmp%22#0: bool = (&& tmp%19#0 tmp%21#0)
        (assert tmp%22#0) // expected 4, 3
        (app_global_put "e" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L219
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+(uint64,(len+utf8[]))[]) = (concat aggregate%encoded%0#1 0x)
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%encoded%1#1
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L224
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,(len+utf8[]))[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L225
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: string = test_cases.array.immutable.times(i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%length%0#1: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 tmp%2#0)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%3#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%2#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%4#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%3#1 aggregate%tail%0#1)
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%encoded%4#1)
        let aggregate%data_length%1#1: uint64 = (len aggregate%encoded%4#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 2u aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%5#1: Encoded((uint64,(len+utf8[]))) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%encoded%6#1: Encoded((uint64,(len+utf8[]))[]) = (concat aggregate%encoded%5#1 aggregate%tail%1#1)
        let tmp%3#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%encoded%6#1
        let arr#2: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%3#0)
        goto block@1
    block@4: // after_for_L224
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%4#0: bool = (== array_length%1#0 5u)
        (assert tmp%4#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L228
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L229
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) arr#1)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 arr#1 0u)
        let aggregate%item_offset_offset%0#1: uint64 = (* i#4 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%next_index%0#1: uint64 = (+ i#4 1u)
        let aggregate%has_next%0#1: uint64 = (- aggregate%array_length%0#1 aggregate%next_index%0#1) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%0#1)
        let aggregate%next_item_offset_offset%0#1: uint64 = (* aggregate%next_index%0#1 2u)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%next_item_offset_offset%0#1)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%0#1: bytes = (substring3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%end_offset%0#1)
        let array_item%0#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%0#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%0#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 array_item%0#0 8u)
        let aggregate%len%0#1: uint64 = (len array_item%0#0)
        let aggregate%substring3%1#1: bytes = (substring3 array_item%0#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let (values%0#0: uint64, values%1#0: string) = (aggregate%item0%0#1, aggregate%item1%0#1)
        let i#5: uint64 = (+ i#4 1u)
        let tmp%6#0: bool = (== values%0#0 i#5)
        (assert tmp%6#0) // expected 1st element to be correct
        let tmp%7#0: string = test_cases.array.immutable.times(i#4)
        let tmp%8#0: bool = (== values%1#0 tmp%7#0)
        (assert tmp%8#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L228
        let (tmp%9#0: bytes, arr#4: Encoded(len+(uint64,(len+utf8[]))[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let aggregate%extract%1#1: bytes = (extract3 tmp%9#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract_uint16%1#1: uint64 = (extract_uint16 tmp%9#0 8u)
        let aggregate%len%1#1: uint64 = (len tmp%9#0)
        let aggregate%substring3%2#1: bytes = (substring3 tmp%9#0 aggregate%extract_uint16%1#1 aggregate%len%1#1)
        let aggregate%item1%1#1: bytes = ((extract 2 0) aggregate%substring3%2#1)
        let (tmp%11#0: uint64, tmp%12#0: string) = (aggregate%item0%1#1, aggregate%item1%1#1)
        let array_length%2#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%13#0: bool = (== array_length%2#0 4u)
        (assert tmp%13#0)
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) arr#4)
        let aggregate%array_length%1#1: uint64 = (extract_uint16 arr#4 0u)
        let aggregate%item_offset_offset%1#1: uint64 = (* 0u 2u)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%item_offset_offset%1#1)
        let aggregate%next_index%1#1: uint64 = (+ 0u 1u)
        let aggregate%has_next%1#1: uint64 = (- aggregate%array_length%1#1 aggregate%next_index%1#1) // on error: index access is out of bounds
        let aggregate%end_of_array%1#1: uint64 = (len aggregate%array_head_and_tail%1#1)
        let aggregate%next_item_offset_offset%1#1: uint64 = (* aggregate%next_index%1#1 2u)
        let aggregate%next_item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%next_item_offset_offset%1#1)
        let aggregate%end_offset%1#1: uint64 = (select aggregate%end_of_array%1#1 aggregate%next_item_offset%1#1 aggregate%has_next%1#1)
        let aggregate%substring3%3#1: bytes = (substring3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%end_offset%1#1)
        let array_item%2#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%3#1
        let aggregate%extract%2#1: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%2#1: uint64 = (btoi aggregate%extract%2#1)
        let aggregate%extract_uint16%2#1: uint64 = (extract_uint16 array_item%2#0 8u)
        let aggregate%len%2#1: uint64 = (len array_item%2#0)
        let aggregate%substring3%4#1: bytes = (substring3 array_item%2#0 aggregate%extract_uint16%2#1 aggregate%len%2#1)
        let aggregate%item1%2#1: bytes = ((extract 2 0) aggregate%substring3%4#1)
        let (values%4#0: uint64, values%5#0: string) = (aggregate%item0%2#1, aggregate%item1%2#1)
        let tmp%14#0: bool = (== values%4#0 1u)
        let tmp%15#0: bool = (== values%5#0 "")
        let tmp%16#0: bool = (&& tmp%14#0 tmp%15#0)
        (assert tmp%16#0) // expected 1, 0
        let tmp%17#0: uint64 = (- array_length%2#0 1u)
        let aggregate%array_head_and_tail%2#1: bytes = ((extract 2 0) arr#4)
        let aggregate%array_length%2#1: uint64 = (extract_uint16 arr#4 0u)
        let aggregate%item_offset_offset%2#1: uint64 = (* tmp%17#0 2u)
        let aggregate%item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%item_offset_offset%2#1)
        let aggregate%next_index%2#1: uint64 = (+ tmp%17#0 1u)
        let aggregate%has_next%2#1: uint64 = (- aggregate%array_length%2#1 aggregate%next_index%2#1) // on error: index access is out of bounds
        let aggregate%end_of_array%2#1: uint64 = (len aggregate%array_head_and_tail%2#1)
        let aggregate%next_item_offset_offset%2#1: uint64 = (* aggregate%next_index%2#1 2u)
        let aggregate%next_item_offset%2#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%2#1 aggregate%next_item_offset_offset%2#1)
        let aggregate%end_offset%2#1: uint64 = (select aggregate%end_of_array%2#1 aggregate%next_item_offset%2#1 aggregate%has_next%2#1)
        let aggregate%substring3%5#1: bytes = (substring3 aggregate%array_head_and_tail%2#1 aggregate%item_offset%2#1 aggregate%end_offset%2#1)
        let array_item%3#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%5#1
        let aggregate%extract%3#1: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%3#1: uint64 = (btoi aggregate%extract%3#1)
        let aggregate%extract_uint16%3#1: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%3#1: uint64 = (len array_item%3#0)
        let aggregate%substring3%6#1: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%3#1 aggregate%len%3#1)
        let aggregate%item1%3#1: bytes = ((extract 2 0) aggregate%substring3%6#1)
        let (values%6#0: uint64, values%7#0: string) = (aggregate%item0%3#1, aggregate%item1%3#1)
        let tmp%18#0: bool = (== values%6#0 4u)
        let tmp%19#0: bool = (== values%7#0 "   ")
        let tmp%20#0: bool = (&& tmp%18#0 tmp%19#0)
        (assert tmp%20#0) // expected 4, 3
        (app_global_put "f" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: Encoded(len+uint64[])) -> void:
    block@0: // L238
        (log arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: Encoded(len+uint64[])) -> void:
    block@0: // L242
        let aggregate%tail%0#1: bytes = (concat 0x arr#0)
        let aggregate%data_length%0#1: uint64 = (len arr#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 2u aggregate%data_length%0#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%1#1: Encoded((len+uint64[])) = (concat aggregate%encoded%0#1 aggregate%tail%0#1)
        let tmp%0#0: Encoded((len+uint64[])) = aggregate%encoded%1#1
        let event%0#0: bytes = (concat method "emit_test(uint64[])" tmp%0#0)
        (log event%0#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: Encoded(len+(len+uint64[])[])) -> Encoded(len+uint64[]):
    block@0: // L246
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L251
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@6)
        let arr#2: Encoded(len+(len+uint64[])[]) = φ(arr#0 <- block@0, arr#3 <- block@6)
        let continue_looping%0#0: bool = (< i#1 arr_to_add#0)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L252
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+uint64[]) = (concat aggregate%encoded%0#1 0x)
        let extra_arr#0: Encoded(len+uint64[]) = aggregate%encoded%1#1
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L253
        let j#1: uint64 = φ(j#0 <- block@2, j#2 <- block@4)
        let extra_arr#1: Encoded(len+uint64[]) = φ(extra_arr#0 <- block@2, extra_arr#2 <- block@4)
        let continue_looping%1#0: bool = (< j#1 i#1)
        goto continue_looping%1#0 ? block@4 : block@6
    block@4: // for_body_L254
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob j#1)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%2#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded%3#1: Encoded(uint64[]) = (concat aggregate%encoded%2#1 0x)
        let tmp%0#0: Encoded(uint64[]) = aggregate%encoded%3#1
        let concat%0#0: Encoded(len+uint64[]) = (concat extra_arr#1 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 extra_arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let extra_arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let j#2: uint64 = (+ j#1 1u)
        goto block@3
    block@6: // after_for_L253
        let extract_uint16%1#0: uint64 = (extract_uint16 arr#2 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#2)
        let aggregate%tail%0#1: bytes = (concat 0x extra_arr#1)
        let aggregate%data_length%0#1: uint64 = (len extra_arr#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 2u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%4#1: Encoded((len+uint64[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%5#1: Encoded((len+uint64[])[]) = (concat aggregate%encoded%4#1 aggregate%tail%0#1)
        let tmp%1#0: Encoded((len+uint64[])[]) = aggregate%encoded%5#1
        let arr#3: Encoded(len+(len+uint64[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%1#0, extract_to_end%0#0, 1u, tmp%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@8: // after_for_L251
        let aggregate%as_bytes%2#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%6#1: bytes = (concat aggregate%len_u16%1#1 0x)
        let aggregate%encoded%7#1: Encoded(len+uint64[]) = (concat aggregate%encoded%6#1 0x)
        let totals#0: Encoded(len+uint64[]) = aggregate%encoded%7#1
        let array_length%0#0: uint64 = (extract_uint16 arr#2 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L259
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@8, item_index_internal%0#2 <- block@16)
        let totals#1: Encoded(len+uint64[]) = φ(totals#0 <- block@8, totals#2 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L260
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) arr#2)
        let aggregate%item_offset_offset%0#1: uint64 = (* item_index_internal%0#1 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%item_length%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1)
        let aggregate%item_length_in_bytes%0#1: uint64 = (* aggregate%item_length%0#1 8u)
        let aggregate%item_head_tail_length%0#1: uint64 = (+ aggregate%item_length_in_bytes%0#1 2u)
        let aggregate%item%0#1: bytes = (extract3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%item_head_tail_length%0#1)
        let inner_arr#0: Encoded(len+uint64[]) = aggregate%item%0#1
        let total#0: uint64 = 0u
        let array_length%0#1: uint64 = (extract_uint16 inner_arr#0 0u)
        let item_index_internal%0#3: uint64 = 0u
        goto block@14
    block@14: // for_header_L471
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@10, item_index_internal%0#5 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@10, total#2 <- block@15)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 array_length%0#1)
        goto continue_looping%0#1 ? block@15 : block@16
    block@15: // for_body_L472
        let aggregate%array_head_and_tail%1#1: bytes = ((extract 2 0) arr#2)
        let aggregate%item_offset_offset%1#1: uint64 = (* item_index_internal%0#1 2u)
        let aggregate%item_offset%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%item_offset_offset%1#1)
        let aggregate%item_length%1#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1)
        let aggregate%item_length_in_bytes%1#1: uint64 = (* aggregate%item_length%1#1 8u)
        let aggregate%item_head_tail_length%1#1: uint64 = (+ aggregate%item_length_in_bytes%1#1 2u)
        let aggregate%item%1#1: bytes = (extract3 aggregate%array_head_and_tail%1#1 aggregate%item_offset%1#1 aggregate%item_head_tail_length%1#1)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) aggregate%item%1#1)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#4 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#1: Encoded(uint64) = aggregate%encoded_element%0#1
        let i#3: uint64 = (btoi array_item%0#1)
        let total#2: uint64 = (+ total#1 i#3)
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@14
    block@16: // after_for_L471
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob total#1)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%8#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%9#1: Encoded(uint64[]) = (concat aggregate%encoded%8#1 0x)
        let tmp%3#0: Encoded(uint64[]) = aggregate%encoded%9#1
        let concat%1#0: Encoded(len+uint64[]) = (concat totals#1 tmp%3#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 totals#1 0u)
        let add%1#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let totals#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@9
    block@12: // after_for_L259
        return totals#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L264
        let aggregate%as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%0#1: bytes = (concat aggregate%len_u16%0#1 0x)
        let aggregate%encoded%1#1: Encoded(len+(bool1,bool1)[]) = (concat aggregate%encoded%0#1 0x)
        let arr2#0: Encoded(len+(bool1,bool1)[]) = aggregate%encoded%1#1
        let aggregate%as_bytes%1#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%1#1 0x)
        let aggregate%encoded%3#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%2#1 0x)
        let arr7#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%3#1
        let aggregate%as_bytes%2#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%4#1: bytes = (concat aggregate%len_u16%2#1 0x)
        let aggregate%encoded%5#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%4#1 0x)
        let arr8#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%5#1
        let aggregate%as_bytes%3#1: bytes[8] = (itob 0u)
        let aggregate%len_u16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%6#1: bytes = (concat aggregate%len_u16%3#1 0x)
        let aggregate%encoded%7#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%6#1 0x)
        let arr9#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%7#1
        let array_length%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%0#0: bool = (! array_length%0#0)
        (assert tmp%0#0)
        let array_length%1#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%1#0: bool = (! array_length%1#0)
        (assert tmp%1#0)
        let array_length%2#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%2#0: bool = (! array_length%2#0)
        (assert tmp%2#0)
        let array_length%3#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%3#0: bool = (! array_length%3#0)
        (assert tmp%3#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L275
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr2#1: Encoded(len+(bool1,bool1)[]) = φ(arr2#0 <- block@0, arr2#2 <- block@2)
        let arr7#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr7#0 <- block@0, arr7#2 <- block@2)
        let arr8#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr8#0 <- block@0, arr8#2 <- block@2)
        let arr9#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr9#0 <- block@0, arr9#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L276
        let tmp%4#0: bool = (! i#1)
        let tmp%5#0: bool = (== i#1 1u)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let aggregate%encoded%8#1: Encoded(bool1) = (concat 0x aggregate%encoded_bool%0#1)
        let aggregate%set_bit%0#1: Encoded(bool1) = (setbit aggregate%encoded%8#1 1u tmp%5#0)
        let aggregate%encoded%9#1: Encoded(bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let aggregate%encoded%10#1: Encoded((bool1,bool1)) = (concat 0x aggregate%encoded%9#1)
        let aggregate%encoded%11#1: Encoded((bool1,bool1)[]) = (concat aggregate%encoded%10#1 0x)
        let tmp%6#0: Encoded((bool1,bool1)[]) = aggregate%encoded%11#1
        let concat%0#0: Encoded(len+(bool1,bool1)[]) = (concat arr2#1 tmp%6#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr2#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#2: Encoded(len+(bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%9#0: bool = (== i#1 2u)
        let tmp%10#0: bool = (== i#1 3u)
        let tmp%11#0: bool = (== i#1 4u)
        let tmp%12#0: bool = (== i#1 5u)
        let tmp%13#0: bool = (== i#1 6u)
        let i#2: uint64 = (+ i#1 1u)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%12#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let aggregate%encoded%13#1: Encoded(uint64,bool1) = (concat aggregate%encoded%12#1 aggregate%encoded_bool%1#1)
        let aggregate%set_bit%1#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%13#1 65u tmp%5#0)
        let aggregate%set_bit%2#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%1#1 66u tmp%9#0)
        let aggregate%set_bit%3#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%2#1 67u tmp%10#0)
        let aggregate%set_bit%4#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%3#1 68u tmp%11#0)
        let aggregate%set_bit%5#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%4#1 69u tmp%12#0)
        let aggregate%set_bit%6#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%5#1 70u tmp%13#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%14#1: Encoded(uint64,bool1,uint64) = (concat aggregate%set_bit%6#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded%15#1: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = (concat aggregate%encoded%14#1 0x)
        let aggregate%encoded%16#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)) = (concat 0x aggregate%encoded%15#1)
        let aggregate%encoded%17#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%16#1 0x)
        let tmp%15#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%17#1
        let concat%1#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr7#1 tmp%15#0) // on error: max array length exceeded
        let extract_uint16%1#0: uint64 = (extract_uint16 arr7#1 0u)
        let add%1#0: uint64 = (+ extract_uint16%1#0 1u)
        let as_bytes%1#0: bytes[8] = (itob add%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr7#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let tmp%23#0: bool = (== i#1 7u)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%18#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%2#1)
        let aggregate%encoded_bool%2#1: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let aggregate%encoded%19#1: Encoded(uint64,bool1) = (concat aggregate%encoded%18#1 aggregate%encoded_bool%2#1)
        let aggregate%set_bit%7#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%19#1 65u tmp%5#0)
        let aggregate%set_bit%8#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%7#1 66u tmp%9#0)
        let aggregate%set_bit%9#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%8#1 67u tmp%10#0)
        let aggregate%set_bit%10#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%9#1 68u tmp%11#0)
        let aggregate%set_bit%11#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%10#1 69u tmp%12#0)
        let aggregate%set_bit%12#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%11#1 70u tmp%13#0)
        let aggregate%set_bit%13#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%12#1 71u tmp%23#0)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%20#1: Encoded(uint64,bool1,uint64) = (concat aggregate%set_bit%13#1 aggregate%as_Encoded(uint64)%3#1)
        let aggregate%encoded%21#1: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = (concat aggregate%encoded%20#1 0x)
        let aggregate%encoded%22#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)) = (concat 0x aggregate%encoded%21#1)
        let aggregate%encoded%23#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%22#1 0x)
        let tmp%25#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%23#1
        let concat%2#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr8#1 tmp%25#0) // on error: max array length exceeded
        let extract_uint16%2#0: uint64 = (extract_uint16 arr8#1 0u)
        let add%2#0: uint64 = (+ extract_uint16%2#0 1u)
        let as_bytes%2#0: bytes[8] = (itob add%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr8#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let tmp%34#0: bool = (== i#1 8u)
        let aggregate%val_as_bytes%4#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%4#1: Encoded(uint64) = aggregate%val_as_bytes%4#1
        let aggregate%encoded%24#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%4#1)
        let aggregate%encoded_bool%3#1: bytes[1] = (setbit 0x00 0u tmp%4#0)
        let aggregate%encoded%25#1: Encoded(uint64,bool1) = (concat aggregate%encoded%24#1 aggregate%encoded_bool%3#1)
        let aggregate%set_bit%14#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%25#1 65u tmp%5#0)
        let aggregate%set_bit%15#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%14#1 66u tmp%9#0)
        let aggregate%set_bit%16#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%15#1 67u tmp%10#0)
        let aggregate%set_bit%17#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%16#1 68u tmp%11#0)
        let aggregate%set_bit%18#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%17#1 69u tmp%12#0)
        let aggregate%set_bit%19#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%18#1 70u tmp%13#0)
        let aggregate%set_bit%20#1: Encoded(uint64,bool1) = (setbit aggregate%set_bit%19#1 71u tmp%23#0)
        let aggregate%set_bit%21#1: bytes[1] = (setbit 0x00 0u tmp%34#0)
        let aggregate%encoded%26#1: Encoded(uint64,bool1,bool1) = (concat aggregate%set_bit%20#1 aggregate%set_bit%21#1)
        let aggregate%val_as_bytes%5#1: bytes[8] = (itob i#2)
        let aggregate%as_Encoded(uint64)%5#1: Encoded(uint64) = aggregate%val_as_bytes%5#1
        let aggregate%encoded%27#1: Encoded(uint64,bool1,bool1,uint64) = (concat aggregate%encoded%26#1 aggregate%as_Encoded(uint64)%5#1)
        let aggregate%encoded%28#1: Encoded(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64) = (concat aggregate%encoded%27#1 0x)
        let aggregate%encoded%29#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)) = (concat 0x aggregate%encoded%28#1)
        let aggregate%encoded%30#1: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat aggregate%encoded%29#1 0x)
        let tmp%36#0: Encoded((uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = aggregate%encoded%30#1
        let concat%3#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr9#1 tmp%36#0) // on error: max array length exceeded
        let extract_uint16%3#0: uint64 = (extract_uint16 arr9#1 0u)
        let add%3#0: uint64 = (+ extract_uint16%3#0 1u)
        let as_bytes%3#0: bytes[8] = (itob add%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr9#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        goto block@1
    block@4: // after_for_L275
        let array_length%4#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%37#0: bool = (== array_length%4#0 5u)
        (assert tmp%37#0)
        let array_length%5#0: uint64 = (extract_uint16 arr7#1 0u)
        let tmp%38#0: bool = (== array_length%5#0 5u)
        (assert tmp%38#0)
        let array_length%6#0: uint64 = (extract_uint16 arr8#1 0u)
        let tmp%39#0: bool = (== array_length%6#0 5u)
        (assert tmp%39#0)
        let array_length%7#0: uint64 = (extract_uint16 arr9#1 0u)
        let tmp%40#0: bool = (== array_length%7#0 5u)
        (assert tmp%40#0)
        (app_global_put "bool2" arr2#1)
        (app_global_put "bool7" arr7#1)
        (app_global_put "bool8" arr8#1)
        (app_global_put "bool9" arr9#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: Encoded(len+uint64[]), arr2: Encoded(len+bool1[]), arr3: Encoded(len+(uint64,bool1,bool1)[]), arr4: Encoded(len+(uint64,(len+utf8[]))[])) -> <uint64, uint64, uint64, uint64>:
    block@0: // L329
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr1#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L338
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let sum1#1: uint64 = φ(sum1#0 <- block@0, sum1#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L339
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) arr1#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#1 8u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#1
        let i#0: uint64 = (btoi array_item%0#0)
        let sum1#2: uint64 = (+ sum1#1 i#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L338
        let array_length%1#0: uint64 = (extract_uint16 arr2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L340
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@8)
        let sum2#1: uint64 = φ(sum2#0 <- block@4, sum2#4 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L341
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) arr2#0)
        let aggregate%get_bit%0#1: uint64 = (getbit aggregate%array_trimmed%1#1 item_index_internal%1#1)
        let b#0: bool = aggregate%get_bit%0#1
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L342
        let sum2#2: uint64 = (+ sum2#1 1u)
        goto block@8
    block@8: // after_if_else_L341
        let sum2#4: uint64 = φ(sum2#1 <- block@6, sum2#2 <- block@7)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@10: // after_for_L340
        let array_length%2#0: uint64 = (extract_uint16 arr3#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L343
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@10, item_index_internal%2#2 <- block@16)
        let sum3#1: uint64 = φ(sum3#0 <- block@10, sum3#9 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L344
        let aggregate%array_trimmed%2#1: bytes = ((extract 2 0) arr3#0)
        let aggregate%bytes_offset%1#1: uint64 = (* item_index_internal%2#1 9u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%2#1 aggregate%bytes_offset%1#1 9u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint64,bool1,bool1) = aggregate%encoded_element%1#1
        let aggregate%extract%0#1: bytes = (extract3 array_item%2#0 0u 8u)
        let aggregate%item0%0#1: uint64 = (btoi aggregate%extract%0#1)
        let aggregate%get_bit%1#1: uint64 = (getbit array_item%2#0 64u)
        let aggregate%get_bit%2#1: uint64 = (getbit array_item%2#0 65u)
        let (tup.foo#0: uint64, tup.bar#0: bool, tup.baz#0: bool) = (aggregate%item0%0#1, aggregate%get_bit%1#1, aggregate%get_bit%2#1)
        let sum3#2: uint64 = (+ sum3#1 tup.foo#0)
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L346
        let sum3#3: uint64 = (+ sum3#2 1u)
        goto block@14
    block@14: // after_if_else_L345
        let sum3#4: uint64 = φ(sum3#2 <- block@12, sum3#3 <- block@13)
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L348
        let sum3#5: uint64 = (+ sum3#4 1u)
        goto block@16
    block@16: // after_if_else_L347
        let sum3#9: uint64 = φ(sum3#4 <- block@14, sum3#5 <- block@15)
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@11
    block@18: // after_for_L343
        let array_length%3#0: uint64 = (extract_uint16 arr4#0 0u)
        let item_index_internal%3#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L349
        let idx#0: uint64 = φ(item_index_internal%3#0 <- block@18, item_index_internal%3#2 <- block@20)
        let sum4#1: uint64 = φ(sum4#0 <- block@18, sum4#3 <- block@20)
        let continue_looping%3#0: bool = (< idx#0 array_length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L350
        let aggregate%array_head_and_tail%0#1: bytes = ((extract 2 0) arr4#0)
        let aggregate%array_length%0#1: uint64 = (extract_uint16 arr4#0 0u)
        let aggregate%item_offset_offset%0#1: uint64 = (* idx#0 2u)
        let aggregate%item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%item_offset_offset%0#1)
        let aggregate%next_index%0#1: uint64 = (+ idx#0 1u)
        let aggregate%has_next%0#1: uint64 = (- aggregate%array_length%0#1 aggregate%next_index%0#1) // on error: index access is out of bounds
        let aggregate%end_of_array%0#1: uint64 = (len aggregate%array_head_and_tail%0#1)
        let aggregate%next_item_offset_offset%0#1: uint64 = (* aggregate%next_index%0#1 2u)
        let aggregate%next_item_offset%0#1: uint64 = (extract_uint16 aggregate%array_head_and_tail%0#1 aggregate%next_item_offset_offset%0#1)
        let aggregate%end_offset%0#1: uint64 = (select aggregate%end_of_array%0#1 aggregate%next_item_offset%0#1 aggregate%has_next%0#1)
        let aggregate%substring3%0#1: bytes = (substring3 aggregate%array_head_and_tail%0#1 aggregate%item_offset%0#1 aggregate%end_offset%0#1)
        let array_item%3#0: Encoded(uint64,(len+utf8[])) = aggregate%substring3%0#1
        let aggregate%extract%1#1: bytes = (extract3 array_item%3#0 0u 8u)
        let aggregate%item0%1#1: uint64 = (btoi aggregate%extract%1#1)
        let aggregate%extract_uint16%0#1: uint64 = (extract_uint16 array_item%3#0 8u)
        let aggregate%len%0#1: uint64 = (len array_item%3#0)
        let aggregate%substring3%1#1: bytes = (substring3 array_item%3#0 aggregate%extract_uint16%0#1 aggregate%len%0#1)
        let aggregate%item1%0#1: bytes = ((extract 2 0) aggregate%substring3%1#1)
        let (dyn_tup.foo#0: uint64, dyn_tup.bar#0: string) = (aggregate%item0%1#1, aggregate%item1%0#1)
        let sum4#2: uint64 = (+ sum4#1 dyn_tup.foo#0)
        let tmp%6#0: uint64 = (len dyn_tup.bar#0)
        let sum4#3: uint64 = (+ sum4#2 tmp%6#0)
        let tmp%9#0: bool = (== tmp%6#0 idx#0)
        (assert tmp%9#0) // expected string length to match index
        let item_index_internal%3#2: uint64 = (+ idx#0 1u)
        goto block@19
    block@22: // after_for_L349
        return sum1#1 sum2#1 sum3#1 sum4#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> Encoded(len+uint64[]):
    block@0: // L356
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob 2u)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 aggregate%as_Encoded(uint64)%1#1)
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob 3u)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let aggregate%encoded%2#1: Encoded(uint64,uint64,uint64) = (concat aggregate%encoded%1#1 aggregate%as_Encoded(uint64)%2#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 3u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%3#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%2#1)
        let aggregate%encoded%4#1: Encoded(len+uint64[]) = (concat aggregate%encoded%3#1 0x)
        let arr#0: Encoded(len+uint64[]) = aggregate%encoded%4#1
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L359
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+uint64[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L360
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let aggregate%encoded%5#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%3#1)
        let aggregate%encoded%6#1: Encoded(uint64[]) = (concat aggregate%encoded%5#1 0x)
        let tmp%0#0: Encoded(uint64[]) = aggregate%encoded%6#1
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#1 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L359
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> Encoded(len+bool1[]):
    block@0: // L363
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%0#1: Encoded(bool1) = (concat 0x aggregate%encoded_bool%0#1)
        let aggregate%set_bit%0#1: Encoded(bool1) = (setbit aggregate%encoded%0#1 1u 0u)
        let aggregate%set_bit%1#1: Encoded(bool1) = (setbit aggregate%set_bit%0#1 2u 1u)
        let aggregate%set_bit%2#1: Encoded(bool1) = (setbit aggregate%set_bit%1#1 3u 0u)
        let aggregate%set_bit%3#1: Encoded(bool1) = (setbit aggregate%set_bit%2#1 4u 1u)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 5u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%1#1: bytes = (concat aggregate%len_u16%0#1 aggregate%set_bit%3#1)
        let aggregate%encoded%2#1: Encoded(len+bool1[]) = (concat aggregate%encoded%1#1 0x)
        let arr#0: Encoded(len+bool1[]) = aggregate%encoded%2#1
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L366
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+bool1[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L367
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%1#1
        let aggregate%encoded%3#1: Encoded(bool8) = (concat 0x aggregate%as_Encoded(bool8)%0#1)
        let aggregate%encoded%4#1: Encoded(bool8[]) = (concat aggregate%encoded%3#1 0x)
        let tmp%2#0: Encoded(bool8[]) = aggregate%encoded%4#1
        let arr#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, tmp%2#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L366
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L370
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u 1u)
        let aggregate%encoded%1#1: Encoded(uint64,bool1) = (concat aggregate%encoded%0#1 aggregate%encoded_bool%0#1)
        let aggregate%set_bit%0#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%1#1 65u 0u)
        let aggregate%encoded%2#1: Encoded(uint64,bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let aggregate%encoded%3#1: Encoded((uint64,bool1,bool1)) = (concat 0x aggregate%encoded%2#1)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%4#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%3#1)
        let aggregate%encoded%5#1: Encoded(len+(uint64,bool1,bool1)[]) = (concat aggregate%encoded%4#1 0x)
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = aggregate%encoded%5#1
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L373
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,bool1,bool1)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L374
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%encoded_bool%1#1: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%encoded%7#1: Encoded(uint64,bool1) = (concat aggregate%encoded%6#1 aggregate%encoded_bool%1#1)
        let aggregate%set_bit%1#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%7#1 65u tmp%3#0)
        let aggregate%encoded%8#1: Encoded(uint64,bool1,bool1) = (concat aggregate%set_bit%1#1 0x)
        let aggregate%encoded%9#1: Encoded((uint64,bool1,bool1)) = (concat 0x aggregate%encoded%8#1)
        let aggregate%encoded%10#1: Encoded((uint64,bool1,bool1)[]) = (concat aggregate%encoded%9#1 0x)
        let tmp%4#0: Encoded((uint64,bool1,bool1)[]) = aggregate%encoded%10#1
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#1 tmp%4#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 1u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+(uint64,bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L373
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> Encoded(len+(uint64,(len+utf8[]))[]):
    block@0: // L377
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob 0u)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%length%0#1: uint64 = (len "Hello")
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let aggregate%tail%0#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%data_length%0#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%0#1)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 10u aggregate%data_length%0#1)
        let aggregate%as_bytes%1#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded%1#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%0#1)
        let aggregate%encoded%2#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%1#1 aggregate%tail%0#1)
        let aggregate%tail%1#1: bytes = (concat 0x aggregate%encoded%2#1)
        let aggregate%data_length%1#1: uint64 = (len aggregate%encoded%2#1)
        let aggregate%current_tail_offset%1#1: uint64 = (+ 2u aggregate%data_length%1#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%3#1: Encoded((uint64,(len+utf8[]))) = (concat 0x aggregate%offset_as_uint16%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob 1u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%4#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%3#1)
        let aggregate%encoded%5#1: Encoded(len+(uint64,(len+utf8[]))[]) = (concat aggregate%encoded%4#1 aggregate%tail%1#1)
        let arr#0: Encoded(len+(uint64,(len+utf8[]))[]) = aggregate%encoded%5#1
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L380
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,(len+utf8[]))[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L381
        let tmp%0#0: string = test_cases.array.immutable.times(i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let aggregate%encoded%6#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%1#1)
        let aggregate%length%1#1: uint64 = (len tmp%0#0)
        let aggregate%as_bytes%4#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 tmp%0#0)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let aggregate%tail%2#1: bytes = (concat 0x aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%data_length%2#1: uint64 = (len aggregate%as_Encoded(len+utf8[])%1#1)
        let aggregate%current_tail_offset%2#1: uint64 = (+ 10u aggregate%data_length%2#1)
        let aggregate%as_bytes%5#1: bytes[8] = (itob 10u)
        let aggregate%offset_as_uint16%2#1: bytes = ((extract 6 2) aggregate%as_bytes%5#1)
        let aggregate%encoded%7#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%6#1 aggregate%offset_as_uint16%2#1)
        let aggregate%encoded%8#1: Encoded(uint64,(len+utf8[])) = (concat aggregate%encoded%7#1 aggregate%tail%2#1)
        let aggregate%tail%3#1: bytes = (concat 0x aggregate%encoded%8#1)
        let aggregate%data_length%3#1: uint64 = (len aggregate%encoded%8#1)
        let aggregate%current_tail_offset%3#1: uint64 = (+ 2u aggregate%data_length%3#1)
        let aggregate%as_bytes%6#1: bytes[8] = (itob 2u)
        let aggregate%offset_as_uint16%3#1: bytes = ((extract 6 2) aggregate%as_bytes%6#1)
        let aggregate%encoded%9#1: Encoded((uint64,(len+utf8[]))) = (concat 0x aggregate%offset_as_uint16%3#1)
        let aggregate%encoded%10#1: Encoded((uint64,(len+utf8[]))[]) = (concat aggregate%encoded%9#1 aggregate%tail%3#1)
        let tmp%1#0: Encoded((uint64,(len+utf8[]))[]) = aggregate%encoded%10#1
        let arr#2: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, tmp%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L380
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: Encoded(len+(uint64,bool1,bool1)[]), append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L384
        let aggregate%encoded%0#1: Encoded((uint64,bool1,bool1)[]) = (concat 0x 0x)
        let encoded_array%0#0: Encoded((uint64,bool1,bool1)[]) = aggregate%encoded%0#1
        let mutable#0: Encoded((uint64,bool1,bool1)[])* = new()
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#0)
        let concat%0#0: Encoded((uint64,bool1,bool1)[]) = (concat encoded_array%0#0 extract_to_end%0#0) // on error: max array length exceeded
        write(mutable#0, concat%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L390
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L391
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let slot_contents%1#0: Encoded((uint64,bool1,bool1)[]) = read(mutable#0)
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob i#1)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let aggregate%encoded%1#1: Encoded(uint64) = (concat 0x aggregate%as_Encoded(uint64)%0#1)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let aggregate%encoded%2#1: Encoded(uint64,bool1) = (concat aggregate%encoded%1#1 aggregate%encoded_bool%0#1)
        let aggregate%set_bit%0#1: Encoded(uint64,bool1) = (setbit aggregate%encoded%2#1 65u tmp%3#0)
        let aggregate%encoded%3#1: Encoded(uint64,bool1,bool1) = (concat aggregate%set_bit%0#1 0x)
        let aggregate%encoded%4#1: Encoded((uint64,bool1,bool1)) = (concat 0x aggregate%encoded%3#1)
        let aggregate%encoded%5#1: Encoded((uint64,bool1,bool1)[]) = (concat aggregate%encoded%4#1 0x)
        let tmp%4#0: Encoded((uint64,bool1,bool1)[]) = aggregate%encoded%5#1
        let concat%1#0: Encoded((uint64,bool1,bool1)[]) = (concat slot_contents%1#0 tmp%4#0) // on error: max array length exceeded
        write(mutable#0, concat%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L390
        let slot_contents%2#0: Encoded((uint64,bool1,bool1)[]) = read(mutable#0)
        let bytes_len%0#0: uint64 = (len slot_contents%2#0)
        let array_len%0#0: uint64 = (/ bytes_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob array_len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let converted_array%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat as_u16_bytes%0#0 slot_contents%2#0)
        return converted_array%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: Encoded(uint64,uint64)) -> Encoded(len+uint64[]):
    block@0: // L394
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x 0x0000000000000001)
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 0x0000000000000002)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%1#1)
        let aggregate%encoded%3#1: Encoded(len+uint64[]) = (concat aggregate%encoded%2#1 0x)
        let prefix#0: Encoded(len+uint64[]) = aggregate%encoded%3#1
        let concat%0#0: Encoded(len+uint64[]) = (concat prefix#0 arg#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: Encoded(uint64), arg.1: Encoded(uint64)) -> Encoded(len+uint64[]):
    block@0: // L402
        let aggregate%encoded%0#1: Encoded(uint64) = (concat 0x 0x0000000000000001)
        let aggregate%encoded%1#1: Encoded(uint64,uint64) = (concat aggregate%encoded%0#1 0x0000000000000002)
        let aggregate%as_bytes%0#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%1#1)
        let aggregate%encoded%3#1: Encoded(len+uint64[]) = (concat aggregate%encoded%2#1 0x)
        let prefix#0: Encoded(len+uint64[]) = aggregate%encoded%3#1
        let aggregate%encoded%4#1: Encoded(uint64) = (concat 0x arg.0#0)
        let aggregate%encoded%5#1: Encoded(uint64,uint64) = (concat aggregate%encoded%4#1 arg.1#0)
        let aggregate%encoded%6#1: Encoded(uint64[]) = (concat aggregate%encoded%5#1 0x)
        let tmp%0#0: Encoded(uint64[]) = aggregate%encoded%6#1
        let concat%0#0: Encoded(len+uint64[]) = (concat prefix#0 tmp%0#0) // on error: max array length exceeded
        let extract_uint16%0#0: uint64 = (extract_uint16 prefix#0 0u)
        let add%0#0: uint64 = (+ extract_uint16%0#0 2u)
        let as_bytes%0#0: bytes[8] = (itob add%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let result#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: Encoded((len+utf8[]),(len+utf8[]))) -> Encoded(len+(len+utf8[])[]):
    block@0: // L410
        let aggregate%length%0#1: uint64 = (len 0x61)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x61)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x62)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x62)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%tail%0#1: bytes = (concat 0x encoded%0#0)
        let aggregate%data_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 encoded%1#0)
        let aggregate%data_length%1#1: uint64 = (len encoded%1#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%1#1)
        let aggregate%encoded%3#1: Encoded(len+(len+utf8[])[]) = (concat aggregate%encoded%2#1 aggregate%tail%1#1)
        let prefix#0: Encoded(len+(len+utf8[])[]) = aggregate%encoded%3#1
        let total_length%0#0: uint64 = (len arg#0)
        let data%0#0: bytes = (substring3 arg#0 4u total_length%0#0)
        let result#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%0#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: Encoded(len+utf8[]), arg.1: Encoded(len+utf8[])) -> Encoded(len+(len+utf8[])[]):
    block@0: // L418
        let aggregate%length%0#1: uint64 = (len 0x61)
        let aggregate%as_bytes%0#1: bytes[8] = (itob aggregate%length%0#1)
        let aggregate%length_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%0#1)
        let aggregate%encoded_value%0#1: bytes = (concat aggregate%length_uint16%0#1 0x61)
        let aggregate%as_Encoded(len+utf8[])%0#1: Encoded(len+utf8[]) = aggregate%encoded_value%0#1
        let encoded%0#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#1
        let aggregate%length%1#1: uint64 = (len 0x62)
        let aggregate%as_bytes%1#1: bytes[8] = (itob aggregate%length%1#1)
        let aggregate%length_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%1#1)
        let aggregate%encoded_value%1#1: bytes = (concat aggregate%length_uint16%1#1 0x62)
        let aggregate%as_Encoded(len+utf8[])%1#1: Encoded(len+utf8[]) = aggregate%encoded_value%1#1
        let encoded%1#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#1
        let aggregate%tail%0#1: bytes = (concat 0x encoded%0#0)
        let aggregate%data_length%0#1: uint64 = (len encoded%0#0)
        let aggregate%current_tail_offset%0#1: uint64 = (+ 4u aggregate%data_length%0#1)
        let aggregate%as_bytes%2#1: bytes[8] = (itob 4u)
        let aggregate%offset_as_uint16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%2#1)
        let aggregate%encoded%0#1: Encoded((len+utf8[])) = (concat 0x aggregate%offset_as_uint16%0#1)
        let aggregate%tail%1#1: bytes = (concat aggregate%tail%0#1 encoded%1#0)
        let aggregate%data_length%1#1: uint64 = (len encoded%1#0)
        let aggregate%current_tail_offset%1#1: uint64 = (+ aggregate%current_tail_offset%0#1 aggregate%data_length%1#1)
        let aggregate%as_bytes%3#1: bytes[8] = (itob aggregate%current_tail_offset%0#1)
        let aggregate%offset_as_uint16%1#1: bytes = ((extract 6 2) aggregate%as_bytes%3#1)
        let aggregate%encoded%1#1: Encoded((len+utf8[]),(len+utf8[])) = (concat aggregate%encoded%0#1 aggregate%offset_as_uint16%1#1)
        let aggregate%as_bytes%4#1: bytes[8] = (itob 2u)
        let aggregate%len_u16%0#1: bytes = ((extract 6 2) aggregate%as_bytes%4#1)
        let aggregate%encoded%2#1: bytes = (concat aggregate%len_u16%0#1 aggregate%encoded%1#1)
        let aggregate%encoded%3#1: Encoded(len+(len+utf8[])[]) = (concat aggregate%encoded%2#1 aggregate%tail%1#1)
        let prefix#0: Encoded(len+(len+utf8[])[]) = aggregate%encoded%3#1
        let tmp%0#0: Encoded(len+utf8[]) = arg.0#0
        let tmp%1#0: Encoded(len+utf8[]) = arg.1#0
        let concat%1#0: bytes = (concat tmp%0#0 tmp%1#0)
        let result#0: Encoded(len+(len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, concat%1#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: Encoded(len+(uint64,(len+utf8[]))[]), imm2: Encoded(len+(uint64,(len+utf8[]))[])) -> Encoded(len+(uint64,(len+utf8[]))[]):
    block@0: // L426
        let extract_uint16%0#0: uint64 = (extract_uint16 imm1#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) imm1#0)
        let array_length%0#0: uint64 = (extract_uint16 imm2#0 0u)
        let extract_to_end%1#0: bytes = ((extract 2 0) imm2#0)
        let as_Encoded(len+(uint64,(len+utf8[]))[])%0#0: Encoded(len+(uint64,(len+utf8[]))[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, array_length%0#0, extract_to_end%1#0)
        return as_Encoded(len+(uint64,(len+utf8[]))[])%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(imm: Encoded(len+(uint64,uint64)[])) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L432
        let array_length%0#0: uint64 = (extract_uint16 imm#0 0u)
        (assert array_length%0#0) // expected non empty array
        let tmp%1#0: uint64 = (- array_length%0#0 1u)
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) imm#0)
        let aggregate%bytes_offset%0#1: uint64 = (* 0u 16u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 16u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64,uint64) = aggregate%encoded_element%0#1
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) imm#0)
        let aggregate%bytes_offset%1#1: uint64 = (* tmp%1#0 16u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 16u) // on error: index access is out of bounds
        let aggregate%write_offset%0#1: uint64 = (* tmp%1#0 16u)
        let aggregate%write_offset_with_length_header%0#1: uint64 = (+ aggregate%write_offset%0#1 2u)
        let aggregate%updated_array%0#1: bytes = (replace3 imm#0 aggregate%write_offset_with_length_header%0#1 array_item%0#0)
        let imm#1: Encoded(len+(uint64,uint64)[]) = aggregate%updated_array%0#1
        return imm#1