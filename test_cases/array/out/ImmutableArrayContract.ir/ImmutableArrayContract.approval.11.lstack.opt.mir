// Op                                                                                         Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn NumAppArgs                                                                            tmp%0#1
    bz main_bare_routing@17 ; b main_abi_routing@2

main_abi_routing@2:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 0                                                                    tmp%2#0
    method test_uint64_array()void                                                            tmp%2#0,Method(test_uint64_array()void)
    method test_bool_array(uint64)void                                                        tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void)
    method test_fixed_size_tuple_array()void                                                  tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void)
    method test_fixed_size_named_tuple_array()void                                            tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void)
    method test_dynamic_sized_tuple_array()void                                               tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void)
    method test_dynamic_sized_named_tuple_array()void                                         tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void)
    method test_bit_packed_tuples()void                                                       tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void)
    method test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void              tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void)
    method test_uint64_return()uint64[]                                                       tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void),Method(test_uint64_return()uint64[])
    method test_bool_return()bool[]                                                           tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void),Method(test_uint64_return()uint64[]),Method(test_bool_return()bool[])
    method test_tuple_return()(uint64,bool,bool)[]                                            tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void),Method(test_uint64_return()uint64[]),Method(test_bool_return()bool[]),Method(test_tuple_return()(uint64,bool,bool)[])
    method test_dynamic_tuple_return()(uint64,string)[]                                       tmp%2#0,Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void),Method(test_uint64_return()uint64[]),Method(test_bool_return()bool[]),Method(test_tuple_return()(uint64,bool,bool)[]),Method(test_dynamic_tuple_return()(uint64,string)[])
    l-load tmp%2#0 12                                                                         Method(test_uint64_array()void),Method(test_bool_array(uint64)void),Method(test_fixed_size_tuple_array()void),Method(test_fixed_size_named_tuple_array()void),Method(test_dynamic_sized_tuple_array()void),Method(test_dynamic_sized_named_tuple_array()void),Method(test_bit_packed_tuples()void),Method(test_args(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])void),Method(test_uint64_return()uint64[]),Method(test_bool_return()bool[]),Method(test_tuple_return()(uint64,bool,bool)[]),Method(test_dynamic_tuple_return()(uint64,string)[]),tmp%2#0
    match main_test_uint64_array_route@3 main_test_bool_array_route@4 main_test_fixed_size_tuple_array_route@5 main_test_fixed_size_named_tuple_array_route@6 main_test_dynamic_sized_tuple_array_route@7 main_test_dynamic_sized_named_tuple_array_route@8 main_test_bit_packed_tuples_route@9 main_test_args_route@10 main_test_uint64_return_route@11 main_test_bool_return_route@12 main_test_tuple_return_route@13 main_test_dynamic_tuple_return_route@14 ; b main_after_if_else@21 

main_test_uint64_array_route@3:
    // array/immutable.py:62
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%3#0
    !                                                                                         tmp%4#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%5#0
    assert // can only call when not creating
    callsub test_uint64_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_bool_array_route@4:
    // array/immutable.py:98
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%7#0
    !                                                                                         tmp%8#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%9#0
    assert // can only call when not creating
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                                    reinterpret_bytes[8]%0#0
    btoi                                                                                      tmp%11#0
    // array/immutable.py:98
    // @arc4.abimethod()
    callsub test_bool_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_fixed_size_tuple_array_route@5:
    // array/immutable.py:122
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%12#0
    !                                                                                         tmp%13#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%14#0
    assert // can only call when not creating
    callsub test_fixed_size_tuple_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_fixed_size_named_tuple_array_route@6:
    // array/immutable.py:140
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%16#0
    !                                                                                         tmp%17#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%18#0
    assert // can only call when not creating
    callsub test_fixed_size_named_tuple_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_dynamic_sized_tuple_array_route@7:
    // array/immutable.py:155
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%20#0
    !                                                                                         tmp%21#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%22#0
    assert // can only call when not creating
    callsub test_dynamic_sized_tuple_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_dynamic_sized_named_tuple_array_route@8:
    // array/immutable.py:174
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%24#0
    !                                                                                         tmp%25#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%26#0
    assert // can only call when not creating
    callsub test_dynamic_sized_named_tuple_array
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_bit_packed_tuples_route@9:
    // array/immutable.py:193
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%28#0
    !                                                                                         tmp%29#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%30#0
    assert // can only call when not creating
    callsub test_bit_packed_tuples
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_args_route@10:
    // array/immutable.py:258
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%32#0
    !                                                                                         tmp%33#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%34#0
    assert // can only call when not creating
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_uint64_return_route@11:
    // array/immutable.py:268
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%40#0
    !                                                                                         tmp%41#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%42#0
    assert // can only call when not creating
    byte 0x151f7c750003000000000000000100000000000000020000000000000003                       0x151f7c750003000000000000000100000000000000020000000000000003
    log
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_bool_return_route@12:
    // array/immutable.py:272
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%46#0
    !                                                                                         tmp%47#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%48#0
    assert // can only call when not creating
    callsub test_bool_return                                                                  tmp%50#0
    byte 0x151f7c75                                                                           tmp%50#0,0x151f7c75
    l-load tmp%50#0 1                                                                         0x151f7c75,tmp%50#0
    concat                                                                                    tmp%51#0
    log
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_tuple_return_route@13:
    // array/immutable.py:276
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%52#0
    !                                                                                         tmp%53#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%54#0
    assert // can only call when not creating
    byte 0x151f7c750001000000000000000080                                                     0x151f7c750001000000000000000080
    log
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_test_dynamic_tuple_return_route@14:
    // array/immutable.py:280
    // @arc4.abimethod()
    txn OnCompletion                                                                          tmp%58#0
    !                                                                                         tmp%59#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                         tmp%60#0
    assert // can only call when not creating
    callsub test_dynamic_tuple_return                                                         tmp%62#0
    byte 0x151f7c75                                                                           tmp%62#0,0x151f7c75
    l-load tmp%62#0 1                                                                         0x151f7c75,tmp%62#0
    concat                                                                                    tmp%63#0
    log
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_bare_routing@17:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    txn OnCompletion                                                                          tmp%64#0
    bz main___algopy_default_create@18 ; b main_after_if_else@21

main___algopy_default_create@18:
    txn ApplicationID                                                                         tmp%65#0
    !                                                                                         tmp%66#0
    assert // can only call when creating
    int 1                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_after_if_else@21:
    // array/immutable.py:61
    // class ImmutableArrayContract(arc4.ARC4Contract):
    int 0                                                                                     test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0
    v-store tmp%0#0
    b main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22 

main_after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__@22:
    v-load tmp%0#0                                                                            tmp%0#0
    return


// _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> bytes, bytes:
dynamic_array_pop_fixed_size:                                                                 (𝕡) array#0,fixed_byte_size#0 |
    p-load array#0                                                                            (𝕡) array#0,fixed_byte_size#0 | array#0 (copy)
    int 0                                                                                     (𝕡) array#0,fixed_byte_size#0 | array#0 (copy),0
    extract_uint16                                                                            (𝕡) array#0,fixed_byte_size#0 | array_length#0
    int 1                                                                                     (𝕡) array#0,fixed_byte_size#0 | array_length#0,1
    -                                                                                         (𝕡) array#0,fixed_byte_size#0 | length_minus_1#0
    itob                                                                                      (𝕡) array#0,fixed_byte_size#0 | tmp%0#0
    extract 6 0                                                                               (𝕡) array#0,fixed_byte_size#0 | tmp%1#0
    p-load array#0                                                                            (𝕡) array#0,fixed_byte_size#0 | tmp%1#0,array#0 (copy)
    l-load tmp%1#0 1                                                                          (𝕡) array#0,fixed_byte_size#0 | array#0 (copy),tmp%1#0
    replace2 0                                                                                (𝕡) array#0,fixed_byte_size#0 | result#0
    l-load-copy result#0 0                                                                    (𝕡) array#0,fixed_byte_size#0 | result#0,result#0 (copy)
    len                                                                                       (𝕡) array#0,fixed_byte_size#0 | result#0,tmp%2#0
    p-load fixed_byte_size#0                                                                  (𝕡) array#0,fixed_byte_size#0 | result#0,tmp%2#0,fixed_byte_size#0 (copy)
    -                                                                                         (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0
    l-load-copy result#0 1                                                                    (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy)
    l-load-copy item_location#0 1                                                             (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy),item_location#0 (copy)
    p-load fixed_byte_size#0                                                                  (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,result#0 (copy),item_location#0 (copy),fixed_byte_size#0 (copy)
    extract3                                                                                  (𝕡) array#0,fixed_byte_size#0 | result#0,item_location#0,popped#0
    l-load result#0 2                                                                         (𝕡) array#0,fixed_byte_size#0 | item_location#0,popped#0,result#0
    int 0                                                                                     (𝕡) array#0,fixed_byte_size#0 | item_location#0,popped#0,result#0,0
    l-load item_location#0 3                                                                  (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0,0,item_location#0
    substring3                                                                                (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0
    l-load popped#0 1                                                                         (𝕡) array#0,fixed_byte_size#0 | result#0,popped#0
    l-load result#0 1                                                                         (𝕡) array#0,fixed_byte_size#0 | popped#0,result#0
    retsub                                                                                    popped#0,result#0


// _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> bytes, bytes:
dynamic_array_pop_dynamic_element:                                                            (𝕡) array#0 |
    p-load array#0                                                                            (𝕡) array#0 | array#0 (copy)
    int 0                                                                                     (𝕡) array#0 | array#0 (copy),0
    extract_uint16                                                                            (𝕡) array#0 | array_length#0
    int 1                                                                                     (𝕡) array#0 | array_length#0,1
    -                                                                                         (𝕡) array#0 | length_minus_1#0
    l-store-copy length_minus_1#0 0                                                           (𝕡) array#0 | length_minus_1#0,length_minus_1#0 (copy)
    v-store length_minus_1#0                                                                  (𝕡) array#0 | length_minus_1#0
    l-load length_minus_1#0 0                                                                 (𝕡) array#0 | length_minus_1#0
    int 2                                                                                     (𝕡) array#0 | length_minus_1#0,2
    *                                                                                         (𝕡) array#0 | popped_header_offset#0
    l-store-copy popped_header_offset#0 0                                                     (𝕡) array#0 | popped_header_offset#0,popped_header_offset#0 (copy)
    v-store popped_header_offset#0                                                            (𝕡) array#0 | popped_header_offset#0
    p-load array#0                                                                            (𝕡) array#0 | popped_header_offset#0,array#0 (copy)
    extract 2 0                                                                               (𝕡) array#0 | popped_header_offset#0,head_and_tail#0
    l-store-copy head_and_tail#0 0                                                            (𝕡) array#0 | popped_header_offset#0,head_and_tail#0,head_and_tail#0 (copy)
    v-store head_and_tail#0                                                                   (𝕡) array#0 | popped_header_offset#0,head_and_tail#0
    l-load-copy head_and_tail#0 0                                                             (𝕡) array#0 | popped_header_offset#0,head_and_tail#0,head_and_tail#0 (copy)
    l-load popped_header_offset#0 2                                                           (𝕡) array#0 | head_and_tail#0,head_and_tail#0 (copy),popped_header_offset#0
    extract_uint16                                                                            (𝕡) array#0 | head_and_tail#0,popped_offset#0
    l-store-copy popped_offset#0 1                                                            (𝕡) array#0 | popped_offset#0,head_and_tail#0,popped_offset#0 (copy)
    v-store popped_offset#0                                                                   (𝕡) array#0 | popped_offset#0,head_and_tail#0
    l-load-copy head_and_tail#0 0                                                             (𝕡) array#0 | popped_offset#0,head_and_tail#0,head_and_tail#0 (copy)
    len                                                                                       (𝕡) array#0 | popped_offset#0,head_and_tail#0,tmp%0#0
    l-load head_and_tail#0 1                                                                  (𝕡) array#0 | popped_offset#0,tmp%0#0,head_and_tail#0
    l-load popped_offset#0 2                                                                  (𝕡) array#0 | tmp%0#0,head_and_tail#0,popped_offset#0
    l-load tmp%0#0 2                                                                          (𝕡) array#0 | head_and_tail#0,popped_offset#0,tmp%0#0
    substring3                                                                                (𝕡) array#0 | popped#0
    v-store popped#0                                                                          (𝕡) array#0 |
    byte 0x                                                                                   (𝕡) array#0 | 0x
    v-store new_head#0                                                                        (𝕡) array#0 |
    int 0                                                                                     (𝕡) array#0 | 0
    v-store head_offset#0                                                                     (𝕡) array#0 |
    b dynamic_array_pop_dynamic_element_for_header@1                                          (𝕡) array#0 |

dynamic_array_pop_dynamic_element_for_header@1:                                               (𝕡) array#0 |
    v-load head_offset#0                                                                      (𝕡) array#0 | head_offset#0
    v-load popped_header_offset#0                                                             (𝕡) array#0 | head_offset#0,popped_header_offset#0
    <                                                                                         (𝕡) array#0 | continue_looping%0#0
    bz dynamic_array_pop_dynamic_element_after_for@4 ; b dynamic_array_pop_dynamic_element_for_body@2 (𝕡) array#0 | 

dynamic_array_pop_dynamic_element_for_body@2:                                                 (𝕡) array#0 |
    v-load head_and_tail#0                                                                    (𝕡) array#0 | head_and_tail#0
    v-load head_offset#0                                                                      (𝕡) array#0 | head_and_tail#0,head_offset#0
    l-store-copy head_offset#0 1                                                              (𝕡) array#0 | head_offset#0,head_and_tail#0,head_offset#0 (copy)
    extract_uint16                                                                            (𝕡) array#0 | head_offset#0,item_offset#0
    int 2                                                                                     (𝕡) array#0 | head_offset#0,item_offset#0,2
    -                                                                                         (𝕡) array#0 | head_offset#0,item_offset#0
    itob                                                                                      (𝕡) array#0 | head_offset#0,tmp%2#0
    extract 6 2                                                                               (𝕡) array#0 | head_offset#0,tmp%3#0
    v-load new_head#0                                                                         (𝕡) array#0 | head_offset#0,tmp%3#0,new_head#0
    l-load tmp%3#0 1                                                                          (𝕡) array#0 | head_offset#0,new_head#0,tmp%3#0
    concat                                                                                    (𝕡) array#0 | head_offset#0,new_head#0
    v-store new_head#0                                                                        (𝕡) array#0 | head_offset#0
    l-load head_offset#0 0                                                                    (𝕡) array#0 | head_offset#0
    int 2                                                                                     (𝕡) array#0 | head_offset#0,2
    +                                                                                         (𝕡) array#0 | head_offset#0
    v-store head_offset#0                                                                     (𝕡) array#0 |
    b dynamic_array_pop_dynamic_element_for_header@1                                          (𝕡) array#0 |

dynamic_array_pop_dynamic_element_after_for@4:                                                (𝕡) array#0 |
    v-load length_minus_1#0                                                                   (𝕡) array#0 | length_minus_1#0
    itob                                                                                      (𝕡) array#0 | tmp%4#0
    extract 6 2                                                                               (𝕡) array#0 | tmp%5#0
    v-load new_head#0                                                                         (𝕡) array#0 | tmp%5#0,new_head#0
    concat                                                                                    (𝕡) array#0 | tmp%6#0
    v-load popped_header_offset#0                                                             (𝕡) array#0 | tmp%6#0,popped_header_offset#0
    int 2                                                                                     (𝕡) array#0 | tmp%6#0,popped_header_offset#0,2
    +                                                                                         (𝕡) array#0 | tmp%6#0,tmp%7#0
    v-load head_and_tail#0                                                                    (𝕡) array#0 | tmp%6#0,tmp%7#0,head_and_tail#0
    l-load tmp%7#0 1                                                                          (𝕡) array#0 | tmp%6#0,head_and_tail#0,tmp%7#0
    v-load popped_offset#0                                                                    (𝕡) array#0 | tmp%6#0,head_and_tail#0,tmp%7#0,popped_offset#0
    substring3                                                                                (𝕡) array#0 | tmp%6#0,tmp%8#0
    l-load tmp%6#0 1                                                                          (𝕡) array#0 | tmp%8#0,tmp%6#0
    l-load tmp%8#0 1                                                                          (𝕡) array#0 | tmp%6#0,tmp%8#0
    concat                                                                                    (𝕡) array#0 | updated#0
    v-load popped#0                                                                           (𝕡) array#0 | updated#0,popped#0
    l-load updated#0 1                                                                        (𝕡) array#0 | popped#0,updated#0
    retsub                                                                                    popped#0,updated#0


// _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
dynamic_array_concat_bits:                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    p-load array#0                                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy)
    int 0                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array#0 (copy),0
    extract_uint16                                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
    l-store-copy array_length#0 0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
    v-store array_length#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
    l-load-copy array_length#0 0                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy)
    p-load new_items_count#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,array_length#0 (copy),new_items_count#0 (copy)
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0
    l-load-copy new_array_length#0 0                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length#0 (copy)
    itob                                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,tmp%0#0
    extract 6 0                                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0
    p-load array#0                                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,new_array_length_b#0,array#0 (copy)
    l-load new_array_length_b#0 1                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,array#0 (copy),new_array_length_b#0
    replace2 0                                                                                (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,new_array_length#0,result#0
    l-store-copy result#0 2                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,array_length#0,new_array_length#0,result#0 (copy)
    v-store result#0                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,array_length#0,new_array_length#0
    l-load array_length#0 1                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,array_length#0
    int 7                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,array_length#0,7
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,tmp%1#0
    int 8                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,tmp%1#0,8
    /                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0
    l-store-copy current_bytes#0 0                                                            (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0,current_bytes#0 (copy)
    v-store current_bytes#0                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,new_array_length#0,current_bytes#0
    l-load new_array_length#0 1                                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,new_array_length#0
    int 7                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,new_array_length#0,7
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,tmp%2#0
    int 8                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,tmp%2#0,8
    /                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
    l-store-copy required_bytes#0 0                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0,required_bytes#0 (copy)
    v-store required_bytes#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
    l-load current_bytes#0 1                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,required_bytes#0,current_bytes#0
    l-load required_bytes#0 1                                                                 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,current_bytes#0,required_bytes#0
    <                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,tmp%3#0
    l-load result#0 1                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%3#0,result#0
    v-store result#7                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%3#0
    l-load tmp%3#0 0                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%3#0
    bz dynamic_array_concat_bits_after_if_else@2 ; b dynamic_array_concat_bits_if_body@1 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

dynamic_array_concat_bits_if_body@1:                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    v-load required_bytes#0                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0
    v-load current_bytes#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | required_bytes#0,current_bytes#0
    -                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%4#0
    bzero                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%5#0
    v-load result#0                                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%5#0,result#0
    l-load tmp%5#0 1                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0,tmp%5#0
    concat                                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
    v-store result#7                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    b dynamic_array_concat_bits_after_if_else@2                                               (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

dynamic_array_concat_bits_after_if_else@2:                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    v-load result#7                                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
    v-store result#0                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    int 0                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 0
    v-store read_offset#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    v-load array_length#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0
    int 16                                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | array_length#0,16
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
    l-store-copy write_offset#0 0                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_offset#0 (copy)
    v-store write_offset#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
    l-load write_offset#0 0                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
    p-load new_items_count#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,new_items_count#0 (copy)
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_end#0
    v-store write_end#0                                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    b dynamic_array_concat_bits_while_top@3                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

dynamic_array_concat_bits_while_top@3:                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    v-load write_offset#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0
    v-load write_end#0                                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | write_offset#0,write_end#0
    <                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | tmp%6#0
    bz dynamic_array_concat_bits_after_while@5 ; b dynamic_array_concat_bits_while_body@4 (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | 

dynamic_array_concat_bits_while_body@4:                                                       (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    p-load new_items_bytes#0                                                                  (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy)
    v-load read_offset#0                                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | new_items_bytes#0 (copy),read_offset#0
    l-store-copy read_offset#0 1                                                              (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,new_items_bytes#0 (copy),read_offset#0 (copy)
    getbit                                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%7#0
    v-load result#0                                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%7#0,result#0
    v-load write_offset#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,tmp%7#0,result#0,write_offset#0
    l-store-copy write_offset#0 2                                                             (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,tmp%7#0,result#0,write_offset#0 (copy)
    l-load tmp%7#0 2                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0,write_offset#0 (copy),tmp%7#0
    setbit                                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,result#0
    v-store result#0                                                                          (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
    l-load write_offset#0 0                                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
    int 1                                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0,1
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,write_offset#0
    v-store write_offset#0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
    l-load read_offset#0 0                                                                    (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
    p-load read_step#0                                                                        (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0,read_step#0 (copy)
    +                                                                                         (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | read_offset#0
    v-store read_offset#0                                                                     (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    b dynamic_array_concat_bits_while_top@3                                                   (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |

dynamic_array_concat_bits_after_while@5:                                                      (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 |
    v-load result#0                                                                           (𝕡) array#0,new_items_bytes#0,new_items_count#0,read_step#0 | result#0
    retsub                                                                                    result#0


// _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
dynamic_array_concat_dynamic_element:                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    byte 0x                                                                                   (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 0x
    v-store new_head#0                                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load new_items_count#0                                                                  (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_items_count#0 (copy)
    int 2                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_items_count#0 (copy),2
    *                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | item_offset_adjustment#0
    v-store item_offset_adjustment#0                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load array_items_count#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy)
    int 2                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy),2
    *                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%0#0
    v-store tmp%0#0                                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    int 0                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 0
    v-store head_offset#0                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    b dynamic_array_concat_dynamic_element_for_header@1                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

dynamic_array_concat_dynamic_element_for_header@1:                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    v-load head_offset#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    v-load tmp%0#0                                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%0#0
    <                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | continue_looping%0#0
    bz dynamic_array_concat_dynamic_element_after_for@4 ; b dynamic_array_concat_dynamic_element_for_body@2 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 

dynamic_array_concat_dynamic_element_for_body@2:                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load array_head_and_tail#0                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy)
    v-load head_offset#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy),head_offset#0
    l-store-copy head_offset#0 1                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,array_head_and_tail#0 (copy),head_offset#0 (copy)
    extract_uint16                                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0
    v-load item_offset_adjustment#0                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0,item_offset_adjustment#0
    l-load item_offset#0 1                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset_adjustment#0,item_offset#0
    +                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%1#0
    itob                                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%2#0
    extract 6 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%3#0
    v-load new_head#0                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%3#0,new_head#0
    l-load tmp%3#0 1                                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0,tmp%3#0
    concat                                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0
    v-store new_head#0                                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    l-load head_offset#0 0                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    int 2                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,2
    +                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    v-store head_offset#0                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    b dynamic_array_concat_dynamic_element_for_header@1                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

dynamic_array_concat_dynamic_element_after_for@4:                                             (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load array_head_and_tail#0                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_head_and_tail#0 (copy)
    len                                                                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | item_offset_adjustment#2
    v-store item_offset_adjustment#2                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    int 0                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 0
    v-store head_offset#0                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    b dynamic_array_concat_dynamic_element_for_header@5                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

dynamic_array_concat_dynamic_element_for_header@5:                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    v-load head_offset#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    v-load item_offset_adjustment#0                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset_adjustment#0
    <                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | continue_looping%1#0
    bz dynamic_array_concat_dynamic_element_after_for@8 ; b dynamic_array_concat_dynamic_element_for_body@6 (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | 

dynamic_array_concat_dynamic_element_for_body@6:                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load new_head_and_tail#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_head_and_tail#0 (copy)
    v-load head_offset#0                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | new_head_and_tail#0 (copy),head_offset#0
    l-store-copy head_offset#0 1                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head_and_tail#0 (copy),head_offset#0 (copy)
    extract_uint16                                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0
    v-load item_offset_adjustment#2                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset#0,item_offset_adjustment#2
    l-load item_offset#0 1                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,item_offset_adjustment#2,item_offset#0
    +                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%5#0
    itob                                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%6#0
    extract 6 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%7#0
    v-load new_head#0                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,tmp%7#0,new_head#0
    l-load tmp%7#0 1                                                                          (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0,tmp%7#0
    concat                                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,new_head#0
    v-store new_head#0                                                                        (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    l-load head_offset#0 0                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    int 2                                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0,2
    +                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | head_offset#0
    v-store head_offset#0                                                                     (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    b dynamic_array_concat_dynamic_element_for_header@5                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |

dynamic_array_concat_dynamic_element_after_for@8:                                             (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 |
    p-load array_items_count#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy)
    p-load new_items_count#0                                                                  (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | array_items_count#0 (copy),new_items_count#0 (copy)
    +                                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%8#0
    itob                                                                                      (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%9#0
    extract 6 2                                                                               (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%10#0
    v-load new_head#0                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%10#0,new_head#0
    concat                                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0
    p-load array_head_and_tail#0                                                              (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0,array_head_and_tail#0 (copy)
    v-load tmp%0#0                                                                            (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0,array_head_and_tail#0 (copy),tmp%0#0
    v-load item_offset_adjustment#2                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0,array_head_and_tail#0 (copy),tmp%0#0,item_offset_adjustment#2
    substring3                                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0,tmp%14#0
    l-load tmp%11#0 1                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%14#0,tmp%11#0
    l-load tmp%14#0 1                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%11#0,tmp%14#0
    concat                                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0
    p-load new_head_and_tail#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,new_head_and_tail#0 (copy)
    len                                                                                       (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,tmp%17#0
    p-load new_head_and_tail#0                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,tmp%17#0,new_head_and_tail#0 (copy)
    v-load item_offset_adjustment#0                                                           (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,tmp%17#0,new_head_and_tail#0 (copy),item_offset_adjustment#0
    l-load tmp%17#0 2                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,new_head_and_tail#0 (copy),item_offset_adjustment#0,tmp%17#0
    substring3                                                                                (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,tmp%18#0
    l-load tmp%15#0 1                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%18#0,tmp%15#0
    l-load tmp%18#0 1                                                                         (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%15#0,tmp%18#0
    concat                                                                                    (𝕡) array_items_count#0,array_head_and_tail#0,new_items_count#0,new_head_and_tail#0 | tmp%19#0
    retsub                                                                                    tmp%19#0


// test_cases.array.immutable.times(n: uint64) -> bytes:
times:                                                                                        (𝕡) n#0 |
    // array/immutable.py:289
    // result = String()
    byte ""                                                                                   (𝕡) n#0 | ""
    v-store result#0                                                                          (𝕡) n#0 |
    // array/immutable.py:290
    // for _i in urange(n):
    int 0                                                                                     (𝕡) n#0 | 0
    v-store _i#0                                                                              (𝕡) n#0 |
    b times_for_header@1                                                                      (𝕡) n#0 |

times_for_header@1:                                                                           (𝕡) n#0 |
    // array/immutable.py:290
    // for _i in urange(n):
    v-load _i#0                                                                               (𝕡) n#0 | _i#0
    p-load n#0                                                                                (𝕡) n#0 | _i#0,n#0 (copy)
    <                                                                                         (𝕡) n#0 | continue_looping%0#0
    bz times_after_for@4 ; b times_for_body@2                                                 (𝕡) n#0 |

times_for_body@2:                                                                             (𝕡) n#0 |
    // array/immutable.py:291
    // result += String(" ")
    v-load result#0                                                                           (𝕡) n#0 | result#0
    byte " "                                                                                  (𝕡) n#0 | result#0," "
    concat                                                                                    (𝕡) n#0 | result#0
    v-store result#0                                                                          (𝕡) n#0 |
    // array/immutable.py:290
    // for _i in urange(n):
    v-load _i#0                                                                               (𝕡) n#0 | _i#0
    int 1                                                                                     (𝕡) n#0 | _i#0,1
    +                                                                                         (𝕡) n#0 | _i#0
    v-store _i#0                                                                              (𝕡) n#0 |
    b times_for_header@1                                                                      (𝕡) n#0 |

times_after_for@4:                                                                            (𝕡) n#0 |
    // array/immutable.py:292
    // return result
    v-load result#0                                                                           (𝕡) n#0 | result#0
    retsub                                                                                    result#0


// test_cases.array.immutable.add_x(arr: bytes, x: uint64) -> bytes:
add_x:                                                                                        (𝕡) arr#0,x#0 |
    // array/immutable.py:297
    // for i in urange(x):
    int 0                                                                                     (𝕡) arr#0,x#0 | 0
    v-store i#0                                                                               (𝕡) arr#0,x#0 |
    b add_x_for_header@1                                                                      (𝕡) arr#0,x#0 |

add_x_for_header@1:                                                                           (𝕡) arr#0,x#0 |
    // array/immutable.py:297
    // for i in urange(x):
    v-load i#0                                                                                (𝕡) arr#0,x#0 | i#0
    p-load x#0                                                                                (𝕡) arr#0,x#0 | i#0,x#0 (copy)
    <                                                                                         (𝕡) arr#0,x#0 | continue_looping%0#0
    bz add_x_after_for@4 ; b add_x_for_body@2                                                 (𝕡) arr#0,x#0 |

add_x_for_body@2:                                                                             (𝕡) arr#0,x#0 |
    // array/immutable.py:298
    // arr = arr.append(i)
    p-load arr#0                                                                              (𝕡) arr#0,x#0 | arr#0 (copy)
    extract 2 0                                                                               (𝕡) arr#0,x#0 | expr_value_trimmed%0#0
    v-load i#0                                                                                (𝕡) arr#0,x#0 | expr_value_trimmed%0#0,i#0
    l-store-copy i#0 1                                                                        (𝕡) arr#0,x#0 | i#0,expr_value_trimmed%0#0,i#0 (copy)
    itob                                                                                      (𝕡) arr#0,x#0 | i#0,expr_value_trimmed%0#0,array%sub_item%0#1
    l-load expr_value_trimmed%0#0 1                                                           (𝕡) arr#0,x#0 | i#0,array%sub_item%0#1,expr_value_trimmed%0#0
    l-load array%sub_item%0#1 1                                                               (𝕡) arr#0,x#0 | i#0,expr_value_trimmed%0#0,array%sub_item%0#1
    concat                                                                                    (𝕡) arr#0,x#0 | i#0,concatenated%0#0
    l-load-copy concatenated%0#0 0                                                            (𝕡) arr#0,x#0 | i#0,concatenated%0#0,concatenated%0#0 (copy)
    len                                                                                       (𝕡) arr#0,x#0 | i#0,concatenated%0#0,byte_len%0#0
    int 8                                                                                     (𝕡) arr#0,x#0 | i#0,concatenated%0#0,byte_len%0#0,8
    /                                                                                         (𝕡) arr#0,x#0 | i#0,concatenated%0#0,len_%0#0
    itob                                                                                      (𝕡) arr#0,x#0 | i#0,concatenated%0#0,as_bytes%0#0
    extract 6 2                                                                               (𝕡) arr#0,x#0 | i#0,concatenated%0#0,len_16_bit%0#0
    l-load concatenated%0#0 1                                                                 (𝕡) arr#0,x#0 | i#0,len_16_bit%0#0,concatenated%0#0
    concat                                                                                    (𝕡) arr#0,x#0 | i#0,arr#0
    p-store arr#0                                                                             (𝕡) arr#0,x#0 | i#0
    // array/immutable.py:297
    // for i in urange(x):
    l-load i#0 0                                                                              (𝕡) arr#0,x#0 | i#0
    int 1                                                                                     (𝕡) arr#0,x#0 | i#0,1
    +                                                                                         (𝕡) arr#0,x#0 | i#0
    v-store i#0                                                                               (𝕡) arr#0,x#0 |
    b add_x_for_header@1                                                                      (𝕡) arr#0,x#0 |

add_x_after_for@4:                                                                            (𝕡) arr#0,x#0 |
    // array/immutable.py:299
    // return arr
    p-load arr#0                                                                              (𝕡) arr#0,x#0 | arr#0 (copy)
    retsub                                                                                    arr#0 (copy)


// test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
test_uint64_array:
    // array/immutable.py:67
    // arr = arr.append(UInt64(42))
    byte 0x0001000000000000002a                                                               0x0001000000000000002a
    // array/immutable.py:71
    // arr = add_x(arr, UInt64(5))
    int 5                                                                                     0x0001000000000000002a,5
    callsub add_x                                                                             arr#2
    // array/immutable.py:72
    // assert arr.length == 6
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%8#0
    l-load-copy tmp%8#0 0                                                                     arr#2,tmp%8#0,tmp%8#0 (copy)
    int 6                                                                                     arr#2,tmp%8#0,tmp%8#0 (copy),6
    ==                                                                                        arr#2,tmp%8#0,tmp%9#0
    assert                                                                                    arr#2,tmp%8#0
    // array/immutable.py:73
    // assert arr[-1] == 4
    l-load tmp%8#0 0                                                                          arr#2,tmp%8#0
    int 1                                                                                     arr#2,tmp%8#0,1
    -                                                                                         arr#2,tmp%11#0
    l-load arr#2 1                                                                            tmp%11#0,arr#2
    extract 2 0                                                                               tmp%11#0,array_head_and_tail%1#0
    l-load tmp%11#0 1                                                                         array_head_and_tail%1#0,tmp%11#0
    int 8                                                                                     array_head_and_tail%1#0,tmp%11#0,8
    *                                                                                         array_head_and_tail%1#0,item_offset%1#0
    l-load-copy array_head_and_tail%1#0 1                                                     array_head_and_tail%1#0,item_offset%1#0,array_head_and_tail%1#0 (copy)
    l-load item_offset%1#0 1                                                                  array_head_and_tail%1#0,array_head_and_tail%1#0 (copy),item_offset%1#0
    extract_uint64                                                                            array_head_and_tail%1#0,tmp%12#0
    int 4                                                                                     array_head_and_tail%1#0,tmp%12#0,4
    ==                                                                                        array_head_and_tail%1#0,tmp%13#0
    assert                                                                                    array_head_and_tail%1#0
    // array/immutable.py:75
    // arr = arr.append(UInt64(43))
    int 43                                                                                    array_head_and_tail%1#0,43
    itob                                                                                      array_head_and_tail%1#0,array%sub_item%1#1
    l-load array_head_and_tail%1#0 1                                                          array%sub_item%1#1,array_head_and_tail%1#0
    l-load array%sub_item%1#1 1                                                               array_head_and_tail%1#0,array%sub_item%1#1
    concat                                                                                    concatenated%1#0
    l-load-copy concatenated%1#0 0                                                            concatenated%1#0,concatenated%1#0 (copy)
    len                                                                                       concatenated%1#0,byte_len%1#0
    int 8                                                                                     concatenated%1#0,byte_len%1#0,8
    /                                                                                         concatenated%1#0,len_%1#0
    itob                                                                                      concatenated%1#0,as_bytes%1#0
    extract 6 2                                                                               concatenated%1#0,len_16_bit%1#0
    l-load concatenated%1#0 1                                                                 len_16_bit%1#0,concatenated%1#0
    concat                                                                                    arr#2
    l-store-copy arr#2 0                                                                      arr#2,arr#2 (copy)
    v-store arr#2                                                                             arr#2
    // array/immutable.py:76
    // assert arr.length == 7
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%14#0
    l-load-copy tmp%14#0 0                                                                    arr#2,tmp%14#0,tmp%14#0 (copy)
    int 7                                                                                     arr#2,tmp%14#0,tmp%14#0 (copy),7
    ==                                                                                        arr#2,tmp%14#0,tmp%15#0
    assert                                                                                    arr#2,tmp%14#0
    // array/immutable.py:77
    // assert arr[-1] == 43
    l-load tmp%14#0 0                                                                         arr#2,tmp%14#0
    int 1                                                                                     arr#2,tmp%14#0,1
    -                                                                                         arr#2,tmp%17#0
    l-load arr#2 1                                                                            tmp%17#0,arr#2
    extract 2 0                                                                               tmp%17#0,array_head_and_tail%2#0
    l-load tmp%17#0 1                                                                         array_head_and_tail%2#0,tmp%17#0
    int 8                                                                                     array_head_and_tail%2#0,tmp%17#0,8
    *                                                                                         array_head_and_tail%2#0,item_offset%2#0
    l-load-copy array_head_and_tail%2#0 1                                                     array_head_and_tail%2#0,item_offset%2#0,array_head_and_tail%2#0 (copy)
    l-load item_offset%2#0 1                                                                  array_head_and_tail%2#0,array_head_and_tail%2#0 (copy),item_offset%2#0
    extract_uint64                                                                            array_head_and_tail%2#0,tmp%18#0
    int 43                                                                                    array_head_and_tail%2#0,tmp%18#0,43
    ==                                                                                        array_head_and_tail%2#0,tmp%19#0
    assert                                                                                    array_head_and_tail%2#0
    // array/immutable.py:78
    // assert arr[0] == 42
    l-load array_head_and_tail%2#0 0                                                          array_head_and_tail%2#0
    int 0                                                                                     array_head_and_tail%2#0,0
    extract_uint64                                                                            tmp%20#0
    int 42                                                                                    tmp%20#0,42
    ==                                                                                        tmp%21#0
    assert
    // array/immutable.py:304
    // for _i in urange(x):
    int 0                                                                                     0
    v-store _i#0
    b test_uint64_array_for_header@2

test_uint64_array_for_header@2:
    // array/immutable.py:304
    // for _i in urange(x):
    v-load _i#0                                                                               _i#0
    // array/immutable.py:80
    // arr = pop_x(arr, UInt64(3))
    int 3                                                                                     _i#0,3
    // array/immutable.py:304
    // for _i in urange(x):
    <                                                                                         continue_looping%0#0
    bz test_uint64_array_after_for@4 ; b test_uint64_array_for_body@3

test_uint64_array_for_body@3:
    // array/immutable.py:305
    // arr = arr.pop()
    v-load arr#2                                                                              arr#2
    int 8                                                                                     arr#2,8
    callsub dynamic_array_pop_fixed_size                                                      popped%0#0,arr#2
    v-store arr#2                                                                             popped%0#0
    pop 1
    // array/immutable.py:304
    // for _i in urange(x):
    v-load _i#0                                                                               _i#0
    int 1                                                                                     _i#0,1
    +                                                                                         _i#0
    v-store _i#0
    b test_uint64_array_for_header@2

test_uint64_array_after_for@4:
    // array/immutable.py:81
    // assert arr.length == 4
    v-load arr#2                                                                              arr#2
    l-store-copy arr#2 0                                                                      arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%22#0
    l-load-copy tmp%22#0 0                                                                    arr#2,tmp%22#0,tmp%22#0 (copy)
    int 4                                                                                     arr#2,tmp%22#0,tmp%22#0 (copy),4
    ==                                                                                        arr#2,tmp%22#0,tmp%23#0
    assert                                                                                    arr#2,tmp%22#0
    // array/immutable.py:82
    // assert arr[-1] == 2
    l-load tmp%22#0 0                                                                         arr#2,tmp%22#0
    int 1                                                                                     arr#2,tmp%22#0,1
    -                                                                                         arr#2,tmp%25#0
    l-load-copy arr#2 1                                                                       arr#2,tmp%25#0,arr#2 (copy)
    extract 2 0                                                                               arr#2,tmp%25#0,array_head_and_tail%4#0
    l-load tmp%25#0 1                                                                         arr#2,array_head_and_tail%4#0,tmp%25#0
    int 8                                                                                     arr#2,array_head_and_tail%4#0,tmp%25#0,8
    *                                                                                         arr#2,array_head_and_tail%4#0,item_offset%4#0
    l-load array_head_and_tail%4#0 1                                                          arr#2,item_offset%4#0,array_head_and_tail%4#0
    l-load item_offset%4#0 1                                                                  arr#2,array_head_and_tail%4#0,item_offset%4#0
    extract_uint64                                                                            arr#2,tmp%26#0
    int 2                                                                                     arr#2,tmp%26#0,2
    ==                                                                                        arr#2,tmp%27#0
    assert                                                                                    arr#2
    // array/immutable.py:84
    // arr = add_x(arr, UInt64(10))
    l-load arr#2 0                                                                            arr#2
    int 10                                                                                    arr#2,10
    callsub add_x                                                                             arr#2
    // array/immutable.py:85
    // assert arr.length == 14
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%28#0
    l-load-copy tmp%28#0 0                                                                    arr#2,tmp%28#0,tmp%28#0 (copy)
    int 14                                                                                    arr#2,tmp%28#0,tmp%28#0 (copy),14
    ==                                                                                        arr#2,tmp%28#0,tmp%29#0
    assert                                                                                    arr#2,tmp%28#0
    // array/immutable.py:86
    // assert arr[-1] == 9
    l-load tmp%28#0 0                                                                         arr#2,tmp%28#0
    int 1                                                                                     arr#2,tmp%28#0,1
    -                                                                                         arr#2,tmp%31#0
    l-load arr#2 1                                                                            tmp%31#0,arr#2
    extract 2 0                                                                               tmp%31#0,array_head_and_tail%5#0
    l-load tmp%31#0 1                                                                         array_head_and_tail%5#0,tmp%31#0
    int 8                                                                                     array_head_and_tail%5#0,tmp%31#0,8
    *                                                                                         array_head_and_tail%5#0,item_offset%5#0
    l-load-copy array_head_and_tail%5#0 1                                                     array_head_and_tail%5#0,item_offset%5#0,array_head_and_tail%5#0 (copy)
    l-load item_offset%5#0 1                                                                  array_head_and_tail%5#0,array_head_and_tail%5#0 (copy),item_offset%5#0
    extract_uint64                                                                            array_head_and_tail%5#0,tmp%32#0
    int 9                                                                                     array_head_and_tail%5#0,tmp%32#0,9
    ==                                                                                        array_head_and_tail%5#0,tmp%33#0
    assert                                                                                    array_head_and_tail%5#0
    // array/immutable.py:88
    // arr = arr.append(UInt64(44))
    int 44                                                                                    array_head_and_tail%5#0,44
    itob                                                                                      array_head_and_tail%5#0,array%sub_item%2#1
    l-load array_head_and_tail%5#0 1                                                          array%sub_item%2#1,array_head_and_tail%5#0
    l-load array%sub_item%2#1 1                                                               array_head_and_tail%5#0,array%sub_item%2#1
    concat                                                                                    concatenated%2#0
    l-load-copy concatenated%2#0 0                                                            concatenated%2#0,concatenated%2#0 (copy)
    len                                                                                       concatenated%2#0,byte_len%2#0
    int 8                                                                                     concatenated%2#0,byte_len%2#0,8
    /                                                                                         concatenated%2#0,len_%2#0
    itob                                                                                      concatenated%2#0,as_bytes%2#0
    extract 6 2                                                                               concatenated%2#0,len_16_bit%2#0
    l-load concatenated%2#0 1                                                                 len_16_bit%2#0,concatenated%2#0
    concat                                                                                    arr#2
    // array/immutable.py:89
    // assert arr.length == 15
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%34#0
    l-load-copy tmp%34#0 0                                                                    arr#2,tmp%34#0,tmp%34#0 (copy)
    int 15                                                                                    arr#2,tmp%34#0,tmp%34#0 (copy),15
    ==                                                                                        arr#2,tmp%34#0,tmp%35#0
    assert                                                                                    arr#2,tmp%34#0
    // array/immutable.py:90
    // assert arr[-1] == 44
    l-load-copy tmp%34#0 0                                                                    arr#2,tmp%34#0,tmp%34#0 (copy)
    int 1                                                                                     arr#2,tmp%34#0,tmp%34#0 (copy),1
    -                                                                                         arr#2,tmp%34#0,tmp%37#0
    l-load-copy arr#2 2                                                                       arr#2,tmp%34#0,tmp%37#0,arr#2 (copy)
    extract 2 0                                                                               arr#2,tmp%34#0,tmp%37#0,array_head_and_tail%6#0
    l-load tmp%37#0 1                                                                         arr#2,tmp%34#0,array_head_and_tail%6#0,tmp%37#0
    int 8                                                                                     arr#2,tmp%34#0,array_head_and_tail%6#0,tmp%37#0,8
    *                                                                                         arr#2,tmp%34#0,array_head_and_tail%6#0,item_offset%6#0
    l-load array_head_and_tail%6#0 1                                                          arr#2,tmp%34#0,item_offset%6#0,array_head_and_tail%6#0
    l-load item_offset%6#0 1                                                                  arr#2,tmp%34#0,array_head_and_tail%6#0,item_offset%6#0
    extract_uint64                                                                            arr#2,tmp%34#0,tmp%38#0
    int 44                                                                                    arr#2,tmp%34#0,tmp%38#0,44
    ==                                                                                        arr#2,tmp%34#0,tmp%39#0
    assert                                                                                    arr#2,tmp%34#0
    // array/immutable.py:92
    // arr = arr.replace(2, UInt64(23))
    int 23                                                                                    arr#2,tmp%34#0,23
    itob                                                                                      arr#2,tmp%34#0,val_as_bytes%0#0
    int 2                                                                                     arr#2,tmp%34#0,val_as_bytes%0#0,2
    l-load tmp%34#0 2                                                                         arr#2,val_as_bytes%0#0,2,tmp%34#0
    <                                                                                         arr#2,val_as_bytes%0#0,index_is_in_bounds%0#0
    assert // Index access is out of bounds                                                   arr#2,val_as_bytes%0#0
    l-load arr#2 1                                                                            val_as_bytes%0#0,arr#2
    l-load val_as_bytes%0#0 1                                                                 arr#2,val_as_bytes%0#0
    replace2 18                                                                               arr#2
    // array/immutable.py:93
    // assert arr.length == 15
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    int 0                                                                                     arr#2,arr#2 (copy),0
    extract_uint16                                                                            arr#2,tmp%40#0
    int 15                                                                                    arr#2,tmp%40#0,15
    ==                                                                                        arr#2,tmp%41#0
    assert                                                                                    arr#2
    // array/immutable.py:94
    // assert arr[2] == 23
    l-load-copy arr#2 0                                                                       arr#2,arr#2 (copy)
    extract 2 0                                                                               arr#2,array_head_and_tail%7#0
    int 16                                                                                    arr#2,array_head_and_tail%7#0,16
    extract_uint64                                                                            arr#2,tmp%42#0
    int 23                                                                                    arr#2,tmp%42#0,23
    ==                                                                                        arr#2,tmp%43#0
    assert                                                                                    arr#2
    // array/immutable.py:96
    // self.a = arr
    byte "a"                                                                                  arr#2,"a"
    l-load arr#2 1                                                                            "a",arr#2
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
test_bool_array:                                                                              (𝕡) length#0 |
    // array/immutable.py:100
    // arr = ImmutableArray[bool]()
    byte 0x0000                                                                               (𝕡) length#0 | 0x0000
    v-store arr#0                                                                             (𝕡) length#0 |
    // array/immutable.py:103
    // for i in urange(length):
    int 0                                                                                     (𝕡) length#0 | 0
    v-store i#0                                                                               (𝕡) length#0 |
    b test_bool_array_for_header@1                                                            (𝕡) length#0 |

test_bool_array_for_header@1:                                                                 (𝕡) length#0 |
    // array/immutable.py:103
    // for i in urange(length):
    v-load i#0                                                                                (𝕡) length#0 | i#0
    p-load length#0                                                                           (𝕡) length#0 | i#0,length#0 (copy)
    <                                                                                         (𝕡) length#0 | continue_looping%0#0
    bz test_bool_array_after_for@4 ; b test_bool_array_for_body@2                             (𝕡) length#0 |

test_bool_array_for_body@2:                                                                   (𝕡) length#0 |
    // array/immutable.py:104
    // arr = arr.append(i == Txn.num_app_args)
    txn NumAppArgs                                                                            (𝕡) length#0 | tmp%2#0
    v-load i#0                                                                                (𝕡) length#0 | tmp%2#0,i#0
    l-store-copy i#0 1                                                                        (𝕡) length#0 | i#0,tmp%2#0,i#0 (copy)
    l-load tmp%2#0 1                                                                          (𝕡) length#0 | i#0,i#0 (copy),tmp%2#0
    ==                                                                                        (𝕡) length#0 | i#0,to_encode%0#0
    byte 0x00                                                                                 (𝕡) length#0 | i#0,to_encode%0#0,0x00
    int 0                                                                                     (𝕡) length#0 | i#0,to_encode%0#0,0x00,0
    l-load to_encode%0#0 2                                                                    (𝕡) length#0 | i#0,0x00,0,to_encode%0#0
    setbit                                                                                    (𝕡) length#0 | i#0,encoded_bool%0#0
    v-load arr#0                                                                              (𝕡) length#0 | i#0,encoded_bool%0#0,arr#0
    l-load encoded_bool%0#0 1                                                                 (𝕡) length#0 | i#0,arr#0,encoded_bool%0#0
    int 1                                                                                     (𝕡) length#0 | i#0,arr#0,encoded_bool%0#0,1
    int 8                                                                                     (𝕡) length#0 | i#0,arr#0,encoded_bool%0#0,1,8
    callsub dynamic_array_concat_bits                                                         (𝕡) length#0 | i#0,arr#0
    v-store arr#0                                                                             (𝕡) length#0 | i#0
    // array/immutable.py:103
    // for i in urange(length):
    l-load i#0 0                                                                              (𝕡) length#0 | i#0
    int 1                                                                                     (𝕡) length#0 | i#0,1
    +                                                                                         (𝕡) length#0 | i#0
    v-store i#0                                                                               (𝕡) length#0 |
    b test_bool_array_for_header@1                                                            (𝕡) length#0 |

test_bool_array_after_for@4:                                                                  (𝕡) length#0 |
    // array/immutable.py:106
    // assert arr.length == length
    v-load arr#0                                                                              (𝕡) length#0 | arr#0
    int 0                                                                                     (𝕡) length#0 | arr#0,0
    extract_uint16                                                                            (𝕡) length#0 | array_length#0
    l-store-copy array_length#0 0                                                             (𝕡) length#0 | array_length#0,array_length#0 (copy)
    v-store array_length#0                                                                    (𝕡) length#0 | array_length#0
    l-load array_length#0 0                                                                   (𝕡) length#0 | array_length#0
    p-load length#0                                                                           (𝕡) length#0 | array_length#0,length#0 (copy)
    ==                                                                                        (𝕡) length#0 | tmp%4#0
    assert                                                                                    (𝕡) length#0 |
    // array/immutable.py:108
    // if length > 0:
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    bz test_bool_array_after_if_else@6 ; b test_bool_array_if_body@5                          (𝕡) length#0 |

test_bool_array_if_body@5:                                                                    (𝕡) length#0 |
    // array/immutable.py:109
    // assert not arr[0], "expected element 0 to be False"
    v-load arr#0                                                                              (𝕡) length#0 | arr#0
    extract 2 0                                                                               (𝕡) length#0 | array_head_and_tail%0#0
    v-load array_length#0                                                                     (𝕡) length#0 | array_head_and_tail%0#0,array_length#0
    assert // Index access is out of bounds                                                   (𝕡) length#0 | array_head_and_tail%0#0
    l-load array_head_and_tail%0#0 0                                                          (𝕡) length#0 | array_head_and_tail%0#0
    int 0                                                                                     (𝕡) length#0 | array_head_and_tail%0#0,0
    getbit                                                                                    (𝕡) length#0 | is_true%0#0
    byte 0x00                                                                                 (𝕡) length#0 | is_true%0#0,0x00
    int 0                                                                                     (𝕡) length#0 | is_true%0#0,0x00,0
    l-load is_true%0#0 2                                                                      (𝕡) length#0 | 0x00,0,is_true%0#0
    setbit                                                                                    (𝕡) length#0 | encoded_bool%1#0
    int 0                                                                                     (𝕡) length#0 | encoded_bool%1#0,0
    getbit                                                                                    (𝕡) length#0 | tmp%6#0
    !                                                                                         (𝕡) length#0 | tmp%7#0
    assert // expected element 0 to be False                                                  (𝕡) length#0 |
    b test_bool_array_after_if_else@6                                                         (𝕡) length#0 |

test_bool_array_after_if_else@6:                                                              (𝕡) length#0 |
    // array/immutable.py:110
    // if length > 1:
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    int 1                                                                                     (𝕡) length#0 | length#0 (copy),1
    >                                                                                         (𝕡) length#0 | tmp%8#0
    bz test_bool_array_after_if_else@8 ; b test_bool_array_if_body@7                          (𝕡) length#0 |

test_bool_array_if_body@7:                                                                    (𝕡) length#0 |
    // array/immutable.py:111
    // assert not arr[1], "expected element 1 to be False"
    v-load arr#0                                                                              (𝕡) length#0 | arr#0
    extract 2 0                                                                               (𝕡) length#0 | array_head_and_tail%1#0
    int 1                                                                                     (𝕡) length#0 | array_head_and_tail%1#0,1
    v-load array_length#0                                                                     (𝕡) length#0 | array_head_and_tail%1#0,1,array_length#0
    <                                                                                         (𝕡) length#0 | array_head_and_tail%1#0,index_is_in_bounds%1#0
    assert // Index access is out of bounds                                                   (𝕡) length#0 | array_head_and_tail%1#0
    l-load array_head_and_tail%1#0 0                                                          (𝕡) length#0 | array_head_and_tail%1#0
    int 1                                                                                     (𝕡) length#0 | array_head_and_tail%1#0,1
    getbit                                                                                    (𝕡) length#0 | is_true%1#0
    byte 0x00                                                                                 (𝕡) length#0 | is_true%1#0,0x00
    int 0                                                                                     (𝕡) length#0 | is_true%1#0,0x00,0
    l-load is_true%1#0 2                                                                      (𝕡) length#0 | 0x00,0,is_true%1#0
    setbit                                                                                    (𝕡) length#0 | encoded_bool%2#0
    int 0                                                                                     (𝕡) length#0 | encoded_bool%2#0,0
    getbit                                                                                    (𝕡) length#0 | tmp%9#0
    !                                                                                         (𝕡) length#0 | tmp%10#0
    assert // expected element 1 to be False                                                  (𝕡) length#0 |
    b test_bool_array_after_if_else@8                                                         (𝕡) length#0 |

test_bool_array_after_if_else@8:                                                              (𝕡) length#0 |
    // array/immutable.py:112
    // if length > 2:
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    int 2                                                                                     (𝕡) length#0 | length#0 (copy),2
    >                                                                                         (𝕡) length#0 | tmp%11#0
    bz test_bool_array_after_if_else@10 ; b test_bool_array_if_body@9                         (𝕡) length#0 |

test_bool_array_if_body@9:                                                                    (𝕡) length#0 |
    // array/immutable.py:113
    // assert arr[2], "expected element 2 to be True"
    v-load arr#0                                                                              (𝕡) length#0 | arr#0
    extract 2 0                                                                               (𝕡) length#0 | array_head_and_tail%2#0
    int 2                                                                                     (𝕡) length#0 | array_head_and_tail%2#0,2
    v-load array_length#0                                                                     (𝕡) length#0 | array_head_and_tail%2#0,2,array_length#0
    <                                                                                         (𝕡) length#0 | array_head_and_tail%2#0,index_is_in_bounds%2#0
    assert // Index access is out of bounds                                                   (𝕡) length#0 | array_head_and_tail%2#0
    l-load array_head_and_tail%2#0 0                                                          (𝕡) length#0 | array_head_and_tail%2#0
    int 2                                                                                     (𝕡) length#0 | array_head_and_tail%2#0,2
    getbit                                                                                    (𝕡) length#0 | is_true%2#0
    byte 0x00                                                                                 (𝕡) length#0 | is_true%2#0,0x00
    int 0                                                                                     (𝕡) length#0 | is_true%2#0,0x00,0
    l-load is_true%2#0 2                                                                      (𝕡) length#0 | 0x00,0,is_true%2#0
    setbit                                                                                    (𝕡) length#0 | encoded_bool%3#0
    int 0                                                                                     (𝕡) length#0 | encoded_bool%3#0,0
    getbit                                                                                    (𝕡) length#0 | tmp%12#0
    assert // expected element 2 to be True                                                   (𝕡) length#0 |
    b test_bool_array_after_if_else@10                                                        (𝕡) length#0 |

test_bool_array_after_if_else@10:                                                             (𝕡) length#0 |
    // array/immutable.py:114
    // if length > 3:
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    int 3                                                                                     (𝕡) length#0 | length#0 (copy),3
    >                                                                                         (𝕡) length#0 | tmp%13#0
    bz test_bool_array_after_if_else@12 ; b test_bool_array_if_body@11                        (𝕡) length#0 |

test_bool_array_if_body@11:                                                                   (𝕡) length#0 |
    // array/immutable.py:115
    // assert not arr[length - 1], "expected last element to be False"
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    int 1                                                                                     (𝕡) length#0 | length#0 (copy),1
    -                                                                                         (𝕡) length#0 | tmp%14#0
    v-load arr#0                                                                              (𝕡) length#0 | tmp%14#0,arr#0
    extract 2 0                                                                               (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0
    l-load-copy tmp%14#0 1                                                                    (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0,tmp%14#0 (copy)
    v-load array_length#0                                                                     (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0,tmp%14#0 (copy),array_length#0
    <                                                                                         (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0,index_is_in_bounds%3#0
    assert // Index access is out of bounds                                                   (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0
    l-load array_head_and_tail%3#0 0                                                          (𝕡) length#0 | tmp%14#0,array_head_and_tail%3#0
    l-load tmp%14#0 1                                                                         (𝕡) length#0 | array_head_and_tail%3#0,tmp%14#0
    getbit                                                                                    (𝕡) length#0 | is_true%3#0
    byte 0x00                                                                                 (𝕡) length#0 | is_true%3#0,0x00
    int 0                                                                                     (𝕡) length#0 | is_true%3#0,0x00,0
    l-load is_true%3#0 2                                                                      (𝕡) length#0 | 0x00,0,is_true%3#0
    setbit                                                                                    (𝕡) length#0 | encoded_bool%4#0
    int 0                                                                                     (𝕡) length#0 | encoded_bool%4#0,0
    getbit                                                                                    (𝕡) length#0 | tmp%15#0
    !                                                                                         (𝕡) length#0 | tmp%16#0
    assert // expected last element to be False                                               (𝕡) length#0 |
    b test_bool_array_after_if_else@12                                                        (𝕡) length#0 |

test_bool_array_after_if_else@12:                                                             (𝕡) length#0 |
    // array/immutable.py:117
    // self.g = arr
    byte "g"                                                                                  (𝕡) length#0 | "g"
    v-load arr#0                                                                              (𝕡) length#0 | "g",arr#0
    app_global_put                                                                            (𝕡) length#0 |
    // array/immutable.py:118
    // if length:
    p-load length#0                                                                           (𝕡) length#0 | length#0 (copy)
    bz test_bool_array_after_if_else@14 ; b test_bool_array_if_body@13                        (𝕡) length#0 |

test_bool_array_if_body@13:                                                                   (𝕡) length#0 |
    v-load array_length#0                                                                     (𝕡) length#0 | array_length#0
    int 1                                                                                     (𝕡) length#0 | array_length#0,1
    -                                                                                         (𝕡) length#0 | length_minus_1#0
    l-load-copy length_minus_1#0 0                                                            (𝕡) length#0 | length_minus_1#0,length_minus_1#0 (copy)
    itob                                                                                      (𝕡) length#0 | length_minus_1#0,tmp%0#1
    extract 6 0                                                                               (𝕡) length#0 | length_minus_1#0,tmp%1#1
    v-load arr#0                                                                              (𝕡) length#0 | length_minus_1#0,tmp%1#1,arr#0
    l-load tmp%1#1 1                                                                          (𝕡) length#0 | length_minus_1#0,arr#0,tmp%1#1
    replace2 0                                                                                (𝕡) length#0 | length_minus_1#0,result#0
    l-load-copy length_minus_1#0 1                                                            (𝕡) length#0 | length_minus_1#0,result#0,length_minus_1#0 (copy)
    int 16                                                                                    (𝕡) length#0 | length_minus_1#0,result#0,length_minus_1#0 (copy),16
    +                                                                                         (𝕡) length#0 | length_minus_1#0,result#0,popped_location#0
    l-load result#0 1                                                                         (𝕡) length#0 | length_minus_1#0,popped_location#0,result#0
    l-load popped_location#0 1                                                                (𝕡) length#0 | length_minus_1#0,result#0,popped_location#0
    int 0                                                                                     (𝕡) length#0 | length_minus_1#0,result#0,popped_location#0,0
    setbit                                                                                    (𝕡) length#0 | length_minus_1#0,result#0
    l-load length_minus_1#0 1                                                                 (𝕡) length#0 | result#0,length_minus_1#0
    int 7                                                                                     (𝕡) length#0 | result#0,length_minus_1#0,7
    +                                                                                         (𝕡) length#0 | result#0,tmp%3#1
    int 8                                                                                     (𝕡) length#0 | result#0,tmp%3#1,8
    /                                                                                         (𝕡) length#0 | result#0,tmp%4#1
    int 2                                                                                     (𝕡) length#0 | result#0,tmp%4#1,2
    l-load tmp%4#1 1                                                                          (𝕡) length#0 | result#0,2,tmp%4#1
    +                                                                                         (𝕡) length#0 | result#0,tmp%5#1
    l-load result#0 1                                                                         (𝕡) length#0 | tmp%5#1,result#0
    int 0                                                                                     (𝕡) length#0 | tmp%5#1,result#0,0
    l-load tmp%5#1 2                                                                          (𝕡) length#0 | result#0,0,tmp%5#1
    substring3                                                                                (𝕡) length#0 | result#0
    // array/immutable.py:120
    // assert arr.length == length - 1
    int 0                                                                                     (𝕡) length#0 | result#0,0
    extract_uint16                                                                            (𝕡) length#0 | tmp%18#0
    p-load length#0                                                                           (𝕡) length#0 | tmp%18#0,length#0 (copy)
    int 1                                                                                     (𝕡) length#0 | tmp%18#0,length#0 (copy),1
    -                                                                                         (𝕡) length#0 | tmp%18#0,tmp%19#0
    l-load tmp%18#0 1                                                                         (𝕡) length#0 | tmp%19#0,tmp%18#0
    l-load tmp%19#0 1                                                                         (𝕡) length#0 | tmp%18#0,tmp%19#0
    ==                                                                                        (𝕡) length#0 | tmp%20#0
    assert                                                                                    (𝕡) length#0 |
    b test_bool_array_after_if_else@14                                                        (𝕡) length#0 |

test_bool_array_after_if_else@14:                                                             (𝕡) length#0 |
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
test_fixed_size_tuple_array:
    // array/immutable.py:124
    // arr = ImmutableArray[tuple[UInt64, UInt64]]()
    byte 0x0000                                                                               0x0000
    v-store arr#0
    // array/immutable.py:127
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_fixed_size_tuple_array_for_header@1

test_fixed_size_tuple_array_for_header@1:
    // array/immutable.py:127
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%0#0
    bz test_fixed_size_tuple_array_after_for@4 ; b test_fixed_size_tuple_array_for_body@2 

test_fixed_size_tuple_array_for_body@2:
    // array/immutable.py:128
    // arr = arr.append((i + 1, i + 2))
    v-load arr#0                                                                              arr#0
    extract 2 0                                                                               expr_value_trimmed%0#0
    v-load i#0                                                                                expr_value_trimmed%0#0,i#0
    l-store-copy i#0 0                                                                        expr_value_trimmed%0#0,i#0,i#0 (copy)
    int 1                                                                                     expr_value_trimmed%0#0,i#0,i#0 (copy),1
    +                                                                                         expr_value_trimmed%0#0,i#0,i#2
    l-load i#0 1                                                                              expr_value_trimmed%0#0,i#2,i#0
    int 2                                                                                     expr_value_trimmed%0#0,i#2,i#0,2
    +                                                                                         expr_value_trimmed%0#0,i#2,tmp%3#0
    l-load-copy i#2 1                                                                         expr_value_trimmed%0#0,i#2,tmp%3#0,i#2 (copy)
    itob                                                                                      expr_value_trimmed%0#0,i#2,tmp%3#0,array%sub_item%0#1
    l-load tmp%3#0 1                                                                          expr_value_trimmed%0#0,i#2,array%sub_item%0#1,tmp%3#0
    itob                                                                                      expr_value_trimmed%0#0,i#2,array%sub_item%0#1,array%sub_item%1#1
    l-load array%sub_item%0#1 1                                                               expr_value_trimmed%0#0,i#2,array%sub_item%1#1,array%sub_item%0#1
    l-load array%sub_item%1#1 1                                                               expr_value_trimmed%0#0,i#2,array%sub_item%0#1,array%sub_item%1#1
    concat                                                                                    expr_value_trimmed%0#0,i#2,array%encoded%1#1
    l-load expr_value_trimmed%0#0 2                                                           i#2,array%encoded%1#1,expr_value_trimmed%0#0
    l-load array%encoded%1#1 1                                                                i#2,expr_value_trimmed%0#0,array%encoded%1#1
    concat                                                                                    i#2,concatenated%0#0
    l-load-copy concatenated%0#0 0                                                            i#2,concatenated%0#0,concatenated%0#0 (copy)
    len                                                                                       i#2,concatenated%0#0,byte_len%0#0
    int 16                                                                                    i#2,concatenated%0#0,byte_len%0#0,16
    /                                                                                         i#2,concatenated%0#0,len_%0#0
    itob                                                                                      i#2,concatenated%0#0,as_bytes%0#0
    extract 6 2                                                                               i#2,concatenated%0#0,len_16_bit%0#0
    l-load concatenated%0#0 1                                                                 i#2,len_16_bit%0#0,concatenated%0#0
    concat                                                                                    i#2,arr#0
    v-store arr#0                                                                             i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_fixed_size_tuple_array_for_header@1

test_fixed_size_tuple_array_after_for@4:
    // array/immutable.py:130
    // assert arr.length == 5
    v-load arr#0                                                                              arr#0
    l-store-copy arr#0 0                                                                      arr#0,arr#0 (copy)
    int 0                                                                                     arr#0,arr#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%4#0
    l-load-copy tmp%4#0 0                                                                     arr#0,tmp%4#0,tmp%4#0 (copy)
    int 5                                                                                     arr#0,tmp%4#0,tmp%4#0 (copy),5
    ==                                                                                        arr#0,tmp%4#0,tmp%5#0
    assert                                                                                    arr#0,tmp%4#0
    // array/immutable.py:131
    // assert arr[0] == (UInt64(1), UInt64(2))
    l-load-copy arr#0 1                                                                       arr#0,tmp%4#0,arr#0 (copy)
    extract 2 0                                                                               arr#0,tmp%4#0,array_head_and_tail%0#0
    l-load-copy array_head_and_tail%0#0 0                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy)
    int 0                                                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy),0
    extract_uint64                                                                            arr#0,tmp%4#0,array_head_and_tail%0#0,item0%0%0#0
    l-load-copy array_head_and_tail%0#0 1                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,item0%0%0#0,array_head_and_tail%0#0 (copy)
    int 8                                                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,item0%0%0#0,array_head_and_tail%0#0 (copy),8
    extract_uint64                                                                            arr#0,tmp%4#0,array_head_and_tail%0#0,item0%0%0#0,item1%0%0#0
    l-load item0%0%0#0 1                                                                      arr#0,tmp%4#0,array_head_and_tail%0#0,item1%0%0#0,item0%0%0#0
    int 1                                                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,item1%0%0#0,item0%0%0#0,1
    ==                                                                                        arr#0,tmp%4#0,array_head_and_tail%0#0,item1%0%0#0,tmp%6#0
    l-load item1%0%0#0 1                                                                      arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%6#0,item1%0%0#0
    int 2                                                                                     arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%6#0,item1%0%0#0,2
    ==                                                                                        arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%6#0,tmp%7#0
    l-load tmp%6#0 1                                                                          arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%7#0,tmp%6#0
    l-load tmp%7#0 1                                                                          arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%6#0,tmp%7#0
    &&                                                                                        arr#0,tmp%4#0,array_head_and_tail%0#0,tmp%8#0
    assert                                                                                    arr#0,tmp%4#0,array_head_and_tail%0#0
    // array/immutable.py:132
    // assert arr[-1] == (UInt64(5), UInt64(6))
    l-load tmp%4#0 1                                                                          arr#0,array_head_and_tail%0#0,tmp%4#0
    int 1                                                                                     arr#0,array_head_and_tail%0#0,tmp%4#0,1
    -                                                                                         arr#0,array_head_and_tail%0#0,tmp%10#0
    int 16                                                                                    arr#0,array_head_and_tail%0#0,tmp%10#0,16
    *                                                                                         arr#0,array_head_and_tail%0#0,item_offset%1#0
    l-load-copy array_head_and_tail%0#0 1                                                     arr#0,array_head_and_tail%0#0,item_offset%1#0,array_head_and_tail%0#0 (copy)
    l-load-copy item_offset%1#0 1                                                             arr#0,array_head_and_tail%0#0,item_offset%1#0,array_head_and_tail%0#0 (copy),item_offset%1#0 (copy)
    int 16                                                                                    arr#0,array_head_and_tail%0#0,item_offset%1#0,array_head_and_tail%0#0 (copy),item_offset%1#0 (copy),16
    extract3 // on error: Index access is out of bounds                                       arr#0,array_head_and_tail%0#0,item_offset%1#0,arc4_item%1#0
    l-load array_head_and_tail%0#0 2                                                          arr#0,item_offset%1#0,arc4_item%1#0,array_head_and_tail%0#0
    l-load item_offset%1#0 2                                                                  arr#0,arc4_item%1#0,array_head_and_tail%0#0,item_offset%1#0
    extract_uint64                                                                            arr#0,arc4_item%1#0,item0%1%0#0
    l-load arc4_item%1#0 1                                                                    arr#0,item0%1%0#0,arc4_item%1#0
    int 8                                                                                     arr#0,item0%1%0#0,arc4_item%1#0,8
    extract_uint64                                                                            arr#0,item0%1%0#0,item1%1%0#0
    l-load item0%1%0#0 1                                                                      arr#0,item1%1%0#0,item0%1%0#0
    int 5                                                                                     arr#0,item1%1%0#0,item0%1%0#0,5
    ==                                                                                        arr#0,item1%1%0#0,tmp%11#0
    l-load item1%1%0#0 1                                                                      arr#0,tmp%11#0,item1%1%0#0
    int 6                                                                                     arr#0,tmp%11#0,item1%1%0#0,6
    ==                                                                                        arr#0,tmp%11#0,tmp%12#0
    l-load tmp%11#0 1                                                                         arr#0,tmp%12#0,tmp%11#0
    l-load tmp%12#0 1                                                                         arr#0,tmp%11#0,tmp%12#0
    &&                                                                                        arr#0,tmp%13#0
    assert                                                                                    arr#0
    // array/immutable.py:134
    // arr = arr.pop()
    l-load arr#0 0                                                                            arr#0
    int 16                                                                                    arr#0,16
    callsub dynamic_array_pop_fixed_size                                                      popped%0#0,arr#0
    l-store arr#0 1                                                                           arr#0,popped%0#0
    pop 1                                                                                     arr#0
    // array/immutable.py:135
    // assert arr.length == 4
    l-load-copy arr#0 0                                                                       arr#0,arr#0 (copy)
    int 0                                                                                     arr#0,arr#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%14#0
    l-load-copy tmp%14#0 0                                                                    arr#0,tmp%14#0,tmp%14#0 (copy)
    int 4                                                                                     arr#0,tmp%14#0,tmp%14#0 (copy),4
    ==                                                                                        arr#0,tmp%14#0,tmp%15#0
    assert                                                                                    arr#0,tmp%14#0
    // array/immutable.py:136
    // assert arr[0] == (UInt64(1), UInt64(2))
    l-load-copy arr#0 1                                                                       arr#0,tmp%14#0,arr#0 (copy)
    extract 2 0                                                                               arr#0,tmp%14#0,array_head_and_tail%2#0
    l-load-copy array_head_and_tail%2#0 0                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy)
    int 0                                                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy),0
    extract_uint64                                                                            arr#0,tmp%14#0,array_head_and_tail%2#0,item0%2%0#0
    l-load-copy array_head_and_tail%2#0 1                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,item0%2%0#0,array_head_and_tail%2#0 (copy)
    int 8                                                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,item0%2%0#0,array_head_and_tail%2#0 (copy),8
    extract_uint64                                                                            arr#0,tmp%14#0,array_head_and_tail%2#0,item0%2%0#0,item1%2%0#0
    l-load item0%2%0#0 1                                                                      arr#0,tmp%14#0,array_head_and_tail%2#0,item1%2%0#0,item0%2%0#0
    int 1                                                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,item1%2%0#0,item0%2%0#0,1
    ==                                                                                        arr#0,tmp%14#0,array_head_and_tail%2#0,item1%2%0#0,tmp%16#0
    l-load item1%2%0#0 1                                                                      arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%16#0,item1%2%0#0
    int 2                                                                                     arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%16#0,item1%2%0#0,2
    ==                                                                                        arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%16#0,tmp%17#0
    l-load tmp%16#0 1                                                                         arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%17#0,tmp%16#0
    l-load tmp%17#0 1                                                                         arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%16#0,tmp%17#0
    &&                                                                                        arr#0,tmp%14#0,array_head_and_tail%2#0,tmp%18#0
    assert                                                                                    arr#0,tmp%14#0,array_head_and_tail%2#0
    // array/immutable.py:137
    // assert arr[-1] == (UInt64(4), UInt64(5))
    l-load tmp%14#0 1                                                                         arr#0,array_head_and_tail%2#0,tmp%14#0
    int 1                                                                                     arr#0,array_head_and_tail%2#0,tmp%14#0,1
    -                                                                                         arr#0,array_head_and_tail%2#0,tmp%20#0
    int 16                                                                                    arr#0,array_head_and_tail%2#0,tmp%20#0,16
    *                                                                                         arr#0,array_head_and_tail%2#0,item_offset%3#0
    l-load-copy array_head_and_tail%2#0 1                                                     arr#0,array_head_and_tail%2#0,item_offset%3#0,array_head_and_tail%2#0 (copy)
    l-load-copy item_offset%3#0 1                                                             arr#0,array_head_and_tail%2#0,item_offset%3#0,array_head_and_tail%2#0 (copy),item_offset%3#0 (copy)
    int 16                                                                                    arr#0,array_head_and_tail%2#0,item_offset%3#0,array_head_and_tail%2#0 (copy),item_offset%3#0 (copy),16
    extract3 // on error: Index access is out of bounds                                       arr#0,array_head_and_tail%2#0,item_offset%3#0,arc4_item%3#0
    l-load array_head_and_tail%2#0 2                                                          arr#0,item_offset%3#0,arc4_item%3#0,array_head_and_tail%2#0
    l-load item_offset%3#0 2                                                                  arr#0,arc4_item%3#0,array_head_and_tail%2#0,item_offset%3#0
    extract_uint64                                                                            arr#0,arc4_item%3#0,item0%3%0#0
    l-load arc4_item%3#0 1                                                                    arr#0,item0%3%0#0,arc4_item%3#0
    int 8                                                                                     arr#0,item0%3%0#0,arc4_item%3#0,8
    extract_uint64                                                                            arr#0,item0%3%0#0,item1%3%0#0
    l-load item0%3%0#0 1                                                                      arr#0,item1%3%0#0,item0%3%0#0
    int 4                                                                                     arr#0,item1%3%0#0,item0%3%0#0,4
    ==                                                                                        arr#0,item1%3%0#0,tmp%21#0
    l-load item1%3%0#0 1                                                                      arr#0,tmp%21#0,item1%3%0#0
    int 5                                                                                     arr#0,tmp%21#0,item1%3%0#0,5
    ==                                                                                        arr#0,tmp%21#0,tmp%22#0
    l-load tmp%21#0 1                                                                         arr#0,tmp%22#0,tmp%21#0
    l-load tmp%22#0 1                                                                         arr#0,tmp%21#0,tmp%22#0
    &&                                                                                        arr#0,tmp%23#0
    assert                                                                                    arr#0
    // array/immutable.py:138
    // self.c = arr
    byte "c"                                                                                  arr#0,"c"
    l-load arr#0 1                                                                            "c",arr#0
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
test_fixed_size_named_tuple_array:
    // array/immutable.py:142
    // arr = ImmutableArray[MyTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr#0
    // array/immutable.py:145
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_fixed_size_named_tuple_array_for_header@1

test_fixed_size_named_tuple_array_for_header@1:
    // array/immutable.py:145
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%0#0
    bz test_fixed_size_named_tuple_array_after_for@4 ; b test_fixed_size_named_tuple_array_for_body@2 

test_fixed_size_named_tuple_array_for_body@2:
    // array/immutable.py:146
    // arr = arr.append(MyTuple(foo=i, bar=i % 2 == 0, baz=i * 3 % 2 == 0))
    v-load arr#0                                                                              arr#0
    extract 2 0                                                                               expr_value_trimmed%0#0
    v-load i#0                                                                                expr_value_trimmed%0#0,i#0
    l-store-copy i#0 0                                                                        expr_value_trimmed%0#0,i#0,i#0 (copy)
    int 2                                                                                     expr_value_trimmed%0#0,i#0,i#0 (copy),2
    %                                                                                         expr_value_trimmed%0#0,i#0,tmp%2#0
    !                                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0
    l-load-copy i#0 1                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0,i#0 (copy)
    int 3                                                                                     expr_value_trimmed%0#0,i#0,tmp%3#0,i#0 (copy),3
    *                                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%4#0
    int 2                                                                                     expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%4#0,2
    %                                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%5#0
    !                                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%6#0
    l-load-copy i#0 2                                                                         expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%6#0,i#0 (copy)
    itob                                                                                      expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%6#0,array%sub_item%0#1
    byte 0x00                                                                                 expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%6#0,array%sub_item%0#1,0x00
    byte 0x80                                                                                 expr_value_trimmed%0#0,i#0,tmp%3#0,tmp%6#0,array%sub_item%0#1,0x00,0x80
    l-load tmp%3#0 4                                                                          expr_value_trimmed%0#0,i#0,tmp%6#0,array%sub_item%0#1,0x00,0x80,tmp%3#0
    select                                                                                    expr_value_trimmed%0#0,i#0,tmp%6#0,array%sub_item%0#1,array%encoded_bit%0#1
    l-load array%sub_item%0#1 1                                                               expr_value_trimmed%0#0,i#0,tmp%6#0,array%encoded_bit%0#1,array%sub_item%0#1
    l-load array%encoded_bit%0#1 1                                                            expr_value_trimmed%0#0,i#0,tmp%6#0,array%sub_item%0#1,array%encoded_bit%0#1
    concat                                                                                    expr_value_trimmed%0#0,i#0,tmp%6#0,array%encoded%1#1
    int 65                                                                                    expr_value_trimmed%0#0,i#0,tmp%6#0,array%encoded%1#1,65
    l-load tmp%6#0 2                                                                          expr_value_trimmed%0#0,i#0,array%encoded%1#1,65,tmp%6#0
    setbit                                                                                    expr_value_trimmed%0#0,i#0,array%sub_item%1#1
    l-load expr_value_trimmed%0#0 2                                                           i#0,array%sub_item%1#1,expr_value_trimmed%0#0
    l-load array%sub_item%1#1 1                                                               i#0,expr_value_trimmed%0#0,array%sub_item%1#1
    concat                                                                                    i#0,concatenated%0#0
    l-load-copy concatenated%0#0 0                                                            i#0,concatenated%0#0,concatenated%0#0 (copy)
    len                                                                                       i#0,concatenated%0#0,byte_len%0#0
    int 9                                                                                     i#0,concatenated%0#0,byte_len%0#0,9
    /                                                                                         i#0,concatenated%0#0,len_%0#0
    itob                                                                                      i#0,concatenated%0#0,as_bytes%0#0
    extract 6 2                                                                               i#0,concatenated%0#0,len_16_bit%0#0
    l-load concatenated%0#0 1                                                                 i#0,len_16_bit%0#0,concatenated%0#0
    concat                                                                                    i#0,arr#0
    v-store arr#0                                                                             i#0
    // array/immutable.py:145
    // for i in urange(5):
    l-load i#0 0                                                                              i#0
    int 1                                                                                     i#0,1
    +                                                                                         i#0
    v-store i#0
    b test_fixed_size_named_tuple_array_for_header@1

test_fixed_size_named_tuple_array_after_for@4:
    // array/immutable.py:148
    // assert arr.length == 5
    v-load arr#0                                                                              arr#0
    l-store-copy arr#0 0                                                                      arr#0,arr#0 (copy)
    int 0                                                                                     arr#0,arr#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%7#0
    int 5                                                                                     arr#0,tmp%7#0,5
    ==                                                                                        arr#0,tmp%8#0
    assert                                                                                    arr#0
    // array/immutable.py:149
    // foo, bar, baz = arr[0]
    l-load-copy arr#0 0                                                                       arr#0,arr#0 (copy)
    extract 2 0                                                                               arr#0,array_head_and_tail%0#0
    l-load-copy array_head_and_tail%0#0 0                                                     arr#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy)
    extract 0 9 // on error: Index access is out of bounds                                    arr#0,array_head_and_tail%0#0,arc4_item%0#0
    l-load array_head_and_tail%0#0 1                                                          arr#0,arc4_item%0#0,array_head_and_tail%0#0
    int 0                                                                                     arr#0,arc4_item%0#0,array_head_and_tail%0#0,0
    extract_uint64                                                                            arr#0,arc4_item%0#0,foo#0
    l-load-copy arc4_item%0#0 1                                                               arr#0,arc4_item%0#0,foo#0,arc4_item%0#0 (copy)
    int 64                                                                                    arr#0,arc4_item%0#0,foo#0,arc4_item%0#0 (copy),64
    getbit                                                                                    arr#0,arc4_item%0#0,foo#0,is_true%0#0
    byte 0x00                                                                                 arr#0,arc4_item%0#0,foo#0,is_true%0#0,0x00
    int 0                                                                                     arr#0,arc4_item%0#0,foo#0,is_true%0#0,0x00,0
    l-load is_true%0#0 2                                                                      arr#0,arc4_item%0#0,foo#0,0x00,0,is_true%0#0
    setbit                                                                                    arr#0,arc4_item%0#0,foo#0,encoded_bool%0#0
    int 0                                                                                     arr#0,arc4_item%0#0,foo#0,encoded_bool%0#0,0
    getbit                                                                                    arr#0,arc4_item%0#0,foo#0,bar#0
    l-load arc4_item%0#0 2                                                                    arr#0,foo#0,bar#0,arc4_item%0#0
    int 65                                                                                    arr#0,foo#0,bar#0,arc4_item%0#0,65
    getbit                                                                                    arr#0,foo#0,bar#0,is_true%1#0
    byte 0x00                                                                                 arr#0,foo#0,bar#0,is_true%1#0,0x00
    int 0                                                                                     arr#0,foo#0,bar#0,is_true%1#0,0x00,0
    l-load is_true%1#0 2                                                                      arr#0,foo#0,bar#0,0x00,0,is_true%1#0
    setbit                                                                                    arr#0,foo#0,bar#0,encoded_bool%1#0
    int 0                                                                                     arr#0,foo#0,bar#0,encoded_bool%1#0,0
    getbit                                                                                    arr#0,foo#0,bar#0,baz#0
    // array/immutable.py:150
    // assert foo == 0
    l-load foo#0 2                                                                            arr#0,bar#0,baz#0,foo#0
    !                                                                                         arr#0,bar#0,baz#0,tmp%9#0
    assert                                                                                    arr#0,bar#0,baz#0
    // array/immutable.py:151
    // assert bar
    l-load bar#0 1                                                                            arr#0,baz#0,bar#0
    assert                                                                                    arr#0,baz#0
    // array/immutable.py:152
    // assert baz
    l-load baz#0 0                                                                            arr#0,baz#0
    assert                                                                                    arr#0
    // array/immutable.py:153
    // self.d = arr
    byte "d"                                                                                  arr#0,"d"
    l-load arr#0 1                                                                            "d",arr#0
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
test_dynamic_sized_tuple_array:
    // array/immutable.py:157
    // arr = ImmutableArray[tuple[UInt64, Bytes]]()
    byte 0x0000                                                                               0x0000
    v-store arr#0
    // array/immutable.py:160
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_dynamic_sized_tuple_array_for_header@1

test_dynamic_sized_tuple_array_for_header@1:
    // array/immutable.py:160
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%0#0
    bz test_dynamic_sized_tuple_array_after_for@4 ; b test_dynamic_sized_tuple_array_for_body@2 

test_dynamic_sized_tuple_array_for_body@2:
    // array/immutable.py:161
    // arr = arr.append((i + 1, op.bzero(i)))
    v-load i#0                                                                                i#0
    l-store-copy i#0 0                                                                        i#0,i#0 (copy)
    int 1                                                                                     i#0,i#0 (copy),1
    +                                                                                         i#0,i#2
    l-load i#0 1                                                                              i#2,i#0
    bzero                                                                                     i#2,tmp%3#0
    l-load-copy i#2 1                                                                         i#2,tmp%3#0,i#2 (copy)
    itob                                                                                      i#2,tmp%3#0,val_as_bytes%0#0
    l-load-copy tmp%3#0 1                                                                     i#2,tmp%3#0,val_as_bytes%0#0,tmp%3#0 (copy)
    len                                                                                       i#2,tmp%3#0,val_as_bytes%0#0,length%0#0
    itob                                                                                      i#2,tmp%3#0,val_as_bytes%0#0,as_bytes%0#0
    extract 6 2                                                                               i#2,tmp%3#0,val_as_bytes%0#0,length_uint16%0#0
    l-load tmp%3#0 2                                                                          i#2,val_as_bytes%0#0,length_uint16%0#0,tmp%3#0
    concat                                                                                    i#2,val_as_bytes%0#0,encoded_value%0#0
    l-load val_as_bytes%0#0 1                                                                 i#2,encoded_value%0#0,val_as_bytes%0#0
    byte 0x000a                                                                               i#2,encoded_value%0#0,val_as_bytes%0#0,0x000a
    concat                                                                                    i#2,encoded_value%0#0,encoded_tuple_buffer%2#0
    l-load encoded_value%0#0 1                                                                i#2,encoded_tuple_buffer%2#0,encoded_value%0#0
    concat                                                                                    i#2,encoded_tuple_buffer%3#0
    byte 0x0002                                                                               i#2,encoded_tuple_buffer%3#0,0x0002
    l-load encoded_tuple_buffer%3#0 1                                                         i#2,0x0002,encoded_tuple_buffer%3#0
    concat                                                                                    i#2,result%1#0
    v-load arr#0                                                                              i#2,result%1#0,arr#0
    l-store-copy arr#0 0                                                                      i#2,result%1#0,arr#0,arr#0 (copy)
    int 0                                                                                     i#2,result%1#0,arr#0,arr#0 (copy),0
    extract_uint16                                                                            i#2,result%1#0,arr#0,l_count%0#0
    l-load arr#0 1                                                                            i#2,result%1#0,l_count%0#0,arr#0
    extract 2 0                                                                               i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0
    l-load l_count%0#0 1                                                                      i#2,result%1#0,l_head_and_tail%0#0,l_count%0#0
    l-load l_head_and_tail%0#0 1                                                              i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0
    int 1                                                                                     i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0,1
    l-load result%1#0 3                                                                       i#2,l_count%0#0,l_head_and_tail%0#0,1,result%1#0
    callsub dynamic_array_concat_dynamic_element                                              i#2,arr#0
    v-store arr#0                                                                             i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_dynamic_sized_tuple_array_for_header@1

test_dynamic_sized_tuple_array_after_for@4:
    // array/immutable.py:163
    // assert arr.length == 5
    v-load arr#0                                                                              arr#0
    int 0                                                                                     arr#0,0
    extract_uint16                                                                            tmp%4#0
    l-store-copy tmp%4#0 0                                                                    tmp%4#0,tmp%4#0 (copy)
    v-store tmp%4#0                                                                           tmp%4#0
    l-load tmp%4#0 0                                                                          tmp%4#0
    int 5                                                                                     tmp%4#0,5
    ==                                                                                        tmp%5#0
    assert
    // array/immutable.py:164
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_dynamic_sized_tuple_array_for_header@5

test_dynamic_sized_tuple_array_for_header@5:
    // array/immutable.py:164
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%1#0
    bz test_dynamic_sized_tuple_array_after_for@8 ; b test_dynamic_sized_tuple_array_for_body@6 

test_dynamic_sized_tuple_array_for_body@6:
    // array/immutable.py:165
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    v-load arr#0                                                                              arr#0
    extract 2 0                                                                               array_head_and_tail%0#0
    v-load i#0                                                                                array_head_and_tail%0#0,i#0
    l-store-copy i#0 1                                                                        i#0,array_head_and_tail%0#0,i#0 (copy)
    int 2                                                                                     i#0,array_head_and_tail%0#0,i#0 (copy),2
    *                                                                                         i#0,array_head_and_tail%0#0,item_offset_offset%0#0
    l-load-copy array_head_and_tail%0#0 1                                                     i#0,array_head_and_tail%0#0,item_offset_offset%0#0,array_head_and_tail%0#0 (copy)
    l-load item_offset_offset%0#0 1                                                           i#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy),item_offset_offset%0#0
    extract_uint16                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0
    l-load-copy i#0 2                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#0 (copy)
    int 1                                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#0 (copy),1
    +                                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2
    v-load tmp%4#0                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,tmp%4#0
    l-load-copy i#2 1                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,tmp%4#0,i#2 (copy)
    - // on error: Index access is out of bounds                                              i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0
    l-load-copy array_head_and_tail%0#0 3                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,array_head_and_tail%0#0 (copy)
    len                                                                                       i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0
    l-load-copy i#2 2                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,i#2 (copy)
    int 2                                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,i#2 (copy),2
    *                                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset_offset%0#0
    l-load-copy array_head_and_tail%0#0 5                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset_offset%0#0,array_head_and_tail%0#0 (copy)
    l-load next_item_offset_offset%0#0 1                                                      i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,array_head_and_tail%0#0 (copy),next_item_offset_offset%0#0
    extract_uint16                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset%0#0
    l-load end_of_array%0#0 1                                                                 i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,next_item_offset%0#0,end_of_array%0#0
    l-load next_item_offset%0#0 1                                                             i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset%0#0
    l-load has_next%0#0 2                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,end_of_array%0#0,next_item_offset%0#0,has_next%0#0
    select                                                                                    i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,end_offset%0#0
    l-load array_head_and_tail%0#0 3                                                          i#0,item_offset%0#0,i#2,end_offset%0#0,array_head_and_tail%0#0
    l-load item_offset%0#0 3                                                                  i#0,i#2,end_offset%0#0,array_head_and_tail%0#0,item_offset%0#0
    l-load end_offset%0#0 2                                                                   i#0,i#2,array_head_and_tail%0#0,item_offset%0#0,end_offset%0#0
    substring3                                                                                i#0,i#2,arc4_item%0#0
    l-load-copy arc4_item%0#0 0                                                               i#0,i#2,arc4_item%0#0,arc4_item%0#0 (copy)
    int 0                                                                                     i#0,i#2,arc4_item%0#0,arc4_item%0#0 (copy),0
    extract_uint64                                                                            i#0,i#2,arc4_item%0#0,item0%0%0#0
    l-load-copy arc4_item%0#0 1                                                               i#0,i#2,arc4_item%0#0,item0%0%0#0,arc4_item%0#0 (copy)
    int 8                                                                                     i#0,i#2,arc4_item%0#0,item0%0%0#0,arc4_item%0#0 (copy),8
    extract_uint16                                                                            i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0
    l-load-copy arc4_item%0#0 2                                                               i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0,arc4_item%0#0 (copy)
    len                                                                                       i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0,item_end_offset%0#0
    l-load arc4_item%0#0 3                                                                    i#0,i#2,item0%0%0#0,item_start_offset%0#0,item_end_offset%0#0,arc4_item%0#0
    l-load item_start_offset%0#0 2                                                            i#0,i#2,item0%0%0#0,item_end_offset%0#0,arc4_item%0#0,item_start_offset%0#0
    l-load item_end_offset%0#0 2                                                              i#0,i#2,item0%0%0#0,arc4_item%0#0,item_start_offset%0#0,item_end_offset%0#0
    substring3                                                                                i#0,i#2,item0%0%0#0,item1%0#0
    l-load item0%0%0#0 1                                                                      i#0,i#2,item1%0#0,item0%0%0#0
    l-load-copy i#2 2                                                                         i#0,i#2,item1%0#0,item0%0%0#0,i#2 (copy)
    ==                                                                                        i#0,i#2,item1%0#0,tmp%7#0
    assert // expected 1st element to be correct                                              i#0,i#2,item1%0#0
    // array/immutable.py:166
    // assert arr[i][1].length == i, "expected 2nd element to be correct"
    l-load item1%0#0 0                                                                        i#0,i#2,item1%0#0
    extract 2 0                                                                               i#0,i#2,item1%1%0#0
    len                                                                                       i#0,i#2,tmp%8#0
    l-load i#0 2                                                                              i#2,tmp%8#0,i#0
    ==                                                                                        i#2,tmp%9#0
    assert // expected 2nd element to be correct                                              i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_dynamic_sized_tuple_array_for_header@5

test_dynamic_sized_tuple_array_after_for@8:
    // array/immutable.py:168
    // arr = arr.pop()
    v-load arr#0                                                                              arr#0
    callsub dynamic_array_pop_dynamic_element                                                 popped%0#0,arr#0
    l-store arr#0 1                                                                           arr#0,popped%0#0
    pop 1                                                                                     arr#0
    // array/immutable.py:169
    // assert arr.length == 4
    l-load-copy arr#0 0                                                                       arr#0,arr#0 (copy)
    int 0                                                                                     arr#0,arr#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%10#0
    l-load-copy tmp%10#0 0                                                                    arr#0,tmp%10#0,tmp%10#0 (copy)
    int 4                                                                                     arr#0,tmp%10#0,tmp%10#0 (copy),4
    ==                                                                                        arr#0,tmp%10#0,tmp%11#0
    assert                                                                                    arr#0,tmp%10#0
    // array/immutable.py:170
    // assert arr[0] == (UInt64(1), op.bzero(0)), "expected 1, 0"
    l-load-copy arr#0 1                                                                       arr#0,tmp%10#0,arr#0 (copy)
    extract 2 0                                                                               arr#0,tmp%10#0,array_head_and_tail%2#0
    l-load-copy array_head_and_tail%2#0 0                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy)
    int 0                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0
    l-load-copy tmp%10#0 2                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,tmp%10#0 (copy)
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,tmp%10#0 (copy),1
    - // on error: Index access is out of bounds                                              arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0
    l-load-copy array_head_and_tail%2#0 2                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,array_head_and_tail%2#0 (copy)
    len                                                                                       arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0
    l-load-copy array_head_and_tail%2#0 3                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy)
    int 2                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),2
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,next_item_offset%2#0
    l-load-copy end_of_array%2#0 1                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,next_item_offset%2#0,end_of_array%2#0 (copy)
    l-load next_item_offset%2#0 1                                                             arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_of_array%2#0 (copy),next_item_offset%2#0
    l-load-copy has_next%2#0 3                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_of_array%2#0 (copy),next_item_offset%2#0,has_next%2#0 (copy)
    select                                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0
    l-load-copy array_head_and_tail%2#0 4                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0,array_head_and_tail%2#0 (copy)
    l-load item_offset%2#0 4                                                                  arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0,array_head_and_tail%2#0 (copy),item_offset%2#0
    l-load end_offset%2#0 2                                                                   arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),item_offset%2#0,end_offset%2#0
    substring3                                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0
    l-load-copy arc4_item%2#0 0                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,arc4_item%2#0 (copy)
    int 0                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,arc4_item%2#0 (copy),0
    extract_uint64                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0
    l-load-copy arc4_item%2#0 1                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,arc4_item%2#0 (copy)
    int 8                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,arc4_item%2#0 (copy),8
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0
    l-load-copy arc4_item%2#0 2                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0,arc4_item%2#0 (copy)
    len                                                                                       arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0,item_end_offset%2#0
    l-load arc4_item%2#0 3                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item_start_offset%2#0,item_end_offset%2#0,arc4_item%2#0
    l-load item_start_offset%2#0 2                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item_end_offset%2#0,arc4_item%2#0,item_start_offset%2#0
    l-load item_end_offset%2#0 2                                                              arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,arc4_item%2#0,item_start_offset%2#0,item_end_offset%2#0
    substring3                                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item1%2#0
    extract 2 0                                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item1%2%0#0
    l-load item0%2%0#0 1                                                                      arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,item0%2%0#0
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,item0%2%0#0,1
    ==                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,tmp%12#0
    int 0                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,tmp%12#0,0
    bzero                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,tmp%12#0,tmp%13#0
    l-load item1%2%0#0 2                                                                      arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,tmp%13#0,item1%2%0#0
    l-load tmp%13#0 1                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,item1%2%0#0,tmp%13#0
    ==                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,tmp%14#0
    l-load tmp%12#0 1                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%14#0,tmp%12#0
    l-load tmp%14#0 1                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,tmp%14#0
    &&                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%15#0
    assert // expected 1, 0                                                                   arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0
    // array/immutable.py:171
    // assert arr[-1] == (UInt64(4), op.bzero(3)), "expected 4, 3"
    l-load-copy has_next%2#0 1                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,has_next%2#0 (copy)
    int 2                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,has_next%2#0 (copy),2
    *                                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset_offset%3#0
    l-load-copy array_head_and_tail%2#0 3                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset_offset%3#0,array_head_and_tail%2#0 (copy)
    l-load item_offset_offset%3#0 1                                                           arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),item_offset_offset%3#0
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset%3#0
    l-load has_next%2#0 2                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%2#0
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%2#0,1
    +                                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0
    l-load tmp%10#0 4                                                                         arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,tmp%10#0
    l-load-copy next_index%3#0 1                                                              arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,tmp%10#0,next_index%3#0 (copy)
    - // on error: Index access is out of bounds                                              arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,has_next%3#0
    l-load next_index%3#0 1                                                                   arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_index%3#0
    int 2                                                                                     arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_index%3#0,2
    *                                                                                         arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset_offset%3#0
    l-load-copy array_head_and_tail%2#0 4                                                     arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset_offset%3#0,array_head_and_tail%2#0 (copy)
    l-load next_item_offset_offset%3#0 1                                                      arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,array_head_and_tail%2#0 (copy),next_item_offset_offset%3#0
    extract_uint16                                                                            arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset%3#0
    l-load end_of_array%2#0 3                                                                 arr#0,array_head_and_tail%2#0,item_offset%3#0,has_next%3#0,next_item_offset%3#0,end_of_array%2#0
    l-load next_item_offset%3#0 1                                                             arr#0,array_head_and_tail%2#0,item_offset%3#0,has_next%3#0,end_of_array%2#0,next_item_offset%3#0
    l-load has_next%3#0 2                                                                     arr#0,array_head_and_tail%2#0,item_offset%3#0,end_of_array%2#0,next_item_offset%3#0,has_next%3#0
    select                                                                                    arr#0,array_head_and_tail%2#0,item_offset%3#0,end_offset%3#0
    l-load array_head_and_tail%2#0 2                                                          arr#0,item_offset%3#0,end_offset%3#0,array_head_and_tail%2#0
    l-load item_offset%3#0 2                                                                  arr#0,end_offset%3#0,array_head_and_tail%2#0,item_offset%3#0
    l-load end_offset%3#0 2                                                                   arr#0,array_head_and_tail%2#0,item_offset%3#0,end_offset%3#0
    substring3                                                                                arr#0,arc4_item%3#0
    l-load-copy arc4_item%3#0 0                                                               arr#0,arc4_item%3#0,arc4_item%3#0 (copy)
    int 0                                                                                     arr#0,arc4_item%3#0,arc4_item%3#0 (copy),0
    extract_uint64                                                                            arr#0,arc4_item%3#0,item0%3%0#0
    l-load-copy arc4_item%3#0 1                                                               arr#0,arc4_item%3#0,item0%3%0#0,arc4_item%3#0 (copy)
    int 8                                                                                     arr#0,arc4_item%3#0,item0%3%0#0,arc4_item%3#0 (copy),8
    extract_uint16                                                                            arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0
    l-load-copy arc4_item%3#0 2                                                               arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0,arc4_item%3#0 (copy)
    len                                                                                       arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0
    l-load arc4_item%3#0 3                                                                    arr#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0,arc4_item%3#0
    l-load item_start_offset%3#0 2                                                            arr#0,item0%3%0#0,item_end_offset%3#0,arc4_item%3#0,item_start_offset%3#0
    l-load item_end_offset%3#0 2                                                              arr#0,item0%3%0#0,arc4_item%3#0,item_start_offset%3#0,item_end_offset%3#0
    substring3                                                                                arr#0,item0%3%0#0,item1%3#0
    extract 2 0                                                                               arr#0,item0%3%0#0,item1%3%0#0
    l-load item0%3%0#0 1                                                                      arr#0,item1%3%0#0,item0%3%0#0
    int 4                                                                                     arr#0,item1%3%0#0,item0%3%0#0,4
    ==                                                                                        arr#0,item1%3%0#0,tmp%18#0
    int 3                                                                                     arr#0,item1%3%0#0,tmp%18#0,3
    bzero                                                                                     arr#0,item1%3%0#0,tmp%18#0,tmp%19#0
    l-load item1%3%0#0 2                                                                      arr#0,tmp%18#0,tmp%19#0,item1%3%0#0
    l-load tmp%19#0 1                                                                         arr#0,tmp%18#0,item1%3%0#0,tmp%19#0
    ==                                                                                        arr#0,tmp%18#0,tmp%20#0
    l-load tmp%18#0 1                                                                         arr#0,tmp%20#0,tmp%18#0
    l-load tmp%20#0 1                                                                         arr#0,tmp%18#0,tmp%20#0
    &&                                                                                        arr#0,tmp%21#0
    assert // expected 4, 3                                                                   arr#0
    // array/immutable.py:172
    // self.e = arr
    byte "e"                                                                                  arr#0,"e"
    l-load arr#0 1                                                                            "e",arr#0
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
test_dynamic_sized_named_tuple_array:
    // array/immutable.py:176
    // arr = ImmutableArray[MyDynamicSizedTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr#0
    // array/immutable.py:179
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_dynamic_sized_named_tuple_array_for_header@1

test_dynamic_sized_named_tuple_array_for_header@1:
    // array/immutable.py:179
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%0#0
    bz test_dynamic_sized_named_tuple_array_after_for@4 ; b test_dynamic_sized_named_tuple_array_for_body@2 

test_dynamic_sized_named_tuple_array_for_body@2:
    // array/immutable.py:180
    // arr = arr.append(MyDynamicSizedTuple(foo=i + 1, bar=times(i)))
    v-load i#0                                                                                i#0
    l-store-copy i#0 0                                                                        i#0,i#0 (copy)
    int 1                                                                                     i#0,i#0 (copy),1
    +                                                                                         i#0,i#2
    l-load i#0 1                                                                              i#2,i#0
    callsub times                                                                             i#2,tmp%3#0
    l-load-copy i#2 1                                                                         i#2,tmp%3#0,i#2 (copy)
    itob                                                                                      i#2,tmp%3#0,val_as_bytes%0#0
    l-load-copy tmp%3#0 1                                                                     i#2,tmp%3#0,val_as_bytes%0#0,tmp%3#0 (copy)
    len                                                                                       i#2,tmp%3#0,val_as_bytes%0#0,length%0#0
    itob                                                                                      i#2,tmp%3#0,val_as_bytes%0#0,as_bytes%0#0
    extract 6 2                                                                               i#2,tmp%3#0,val_as_bytes%0#0,length_uint16%0#0
    l-load tmp%3#0 2                                                                          i#2,val_as_bytes%0#0,length_uint16%0#0,tmp%3#0
    concat                                                                                    i#2,val_as_bytes%0#0,encoded_value%0#0
    l-load val_as_bytes%0#0 1                                                                 i#2,encoded_value%0#0,val_as_bytes%0#0
    byte 0x000a                                                                               i#2,encoded_value%0#0,val_as_bytes%0#0,0x000a
    concat                                                                                    i#2,encoded_value%0#0,encoded_tuple_buffer%2#0
    l-load encoded_value%0#0 1                                                                i#2,encoded_tuple_buffer%2#0,encoded_value%0#0
    concat                                                                                    i#2,encoded_tuple_buffer%3#0
    byte 0x0002                                                                               i#2,encoded_tuple_buffer%3#0,0x0002
    l-load encoded_tuple_buffer%3#0 1                                                         i#2,0x0002,encoded_tuple_buffer%3#0
    concat                                                                                    i#2,result%1#0
    v-load arr#0                                                                              i#2,result%1#0,arr#0
    l-store-copy arr#0 0                                                                      i#2,result%1#0,arr#0,arr#0 (copy)
    int 0                                                                                     i#2,result%1#0,arr#0,arr#0 (copy),0
    extract_uint16                                                                            i#2,result%1#0,arr#0,l_count%0#0
    l-load arr#0 1                                                                            i#2,result%1#0,l_count%0#0,arr#0
    extract 2 0                                                                               i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0
    l-load l_count%0#0 1                                                                      i#2,result%1#0,l_head_and_tail%0#0,l_count%0#0
    l-load l_head_and_tail%0#0 1                                                              i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0
    int 1                                                                                     i#2,result%1#0,l_count%0#0,l_head_and_tail%0#0,1
    l-load result%1#0 3                                                                       i#2,l_count%0#0,l_head_and_tail%0#0,1,result%1#0
    callsub dynamic_array_concat_dynamic_element                                              i#2,arr#0
    v-store arr#0                                                                             i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_dynamic_sized_named_tuple_array_for_header@1

test_dynamic_sized_named_tuple_array_after_for@4:
    // array/immutable.py:182
    // assert arr.length == 5
    v-load arr#0                                                                              arr#0
    int 0                                                                                     arr#0,0
    extract_uint16                                                                            tmp%4#0
    l-store-copy tmp%4#0 0                                                                    tmp%4#0,tmp%4#0 (copy)
    v-store tmp%4#0                                                                           tmp%4#0
    l-load tmp%4#0 0                                                                          tmp%4#0
    int 5                                                                                     tmp%4#0,5
    ==                                                                                        tmp%5#0
    assert
    // array/immutable.py:183
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_dynamic_sized_named_tuple_array_for_header@5

test_dynamic_sized_named_tuple_array_for_header@5:
    // array/immutable.py:183
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%1#0
    bz test_dynamic_sized_named_tuple_array_after_for@8 ; b test_dynamic_sized_named_tuple_array_for_body@6 

test_dynamic_sized_named_tuple_array_for_body@6:
    // array/immutable.py:184
    // assert arr[i][0] == i + 1, "expected 1st element to be correct"
    v-load arr#0                                                                              arr#0
    extract 2 0                                                                               array_head_and_tail%0#0
    v-load i#0                                                                                array_head_and_tail%0#0,i#0
    l-store-copy i#0 1                                                                        i#0,array_head_and_tail%0#0,i#0 (copy)
    int 2                                                                                     i#0,array_head_and_tail%0#0,i#0 (copy),2
    *                                                                                         i#0,array_head_and_tail%0#0,item_offset_offset%0#0
    l-load-copy array_head_and_tail%0#0 1                                                     i#0,array_head_and_tail%0#0,item_offset_offset%0#0,array_head_and_tail%0#0 (copy)
    l-load item_offset_offset%0#0 1                                                           i#0,array_head_and_tail%0#0,array_head_and_tail%0#0 (copy),item_offset_offset%0#0
    extract_uint16                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0
    l-load-copy i#0 2                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#0 (copy)
    int 1                                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#0 (copy),1
    +                                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2
    v-load tmp%4#0                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,tmp%4#0
    l-load-copy i#2 1                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,tmp%4#0,i#2 (copy)
    - // on error: Index access is out of bounds                                              i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0
    l-load-copy array_head_and_tail%0#0 3                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,array_head_and_tail%0#0 (copy)
    len                                                                                       i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0
    l-load-copy i#2 2                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,i#2 (copy)
    int 2                                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,i#2 (copy),2
    *                                                                                         i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset_offset%0#0
    l-load-copy array_head_and_tail%0#0 5                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset_offset%0#0,array_head_and_tail%0#0 (copy)
    l-load next_item_offset_offset%0#0 1                                                      i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,array_head_and_tail%0#0 (copy),next_item_offset_offset%0#0
    extract_uint16                                                                            i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset%0#0
    l-load end_of_array%0#0 1                                                                 i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,next_item_offset%0#0,end_of_array%0#0
    l-load next_item_offset%0#0 1                                                             i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,has_next%0#0,end_of_array%0#0,next_item_offset%0#0
    l-load has_next%0#0 2                                                                     i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,end_of_array%0#0,next_item_offset%0#0,has_next%0#0
    select                                                                                    i#0,array_head_and_tail%0#0,item_offset%0#0,i#2,end_offset%0#0
    l-load array_head_and_tail%0#0 3                                                          i#0,item_offset%0#0,i#2,end_offset%0#0,array_head_and_tail%0#0
    l-load item_offset%0#0 3                                                                  i#0,i#2,end_offset%0#0,array_head_and_tail%0#0,item_offset%0#0
    l-load end_offset%0#0 2                                                                   i#0,i#2,array_head_and_tail%0#0,item_offset%0#0,end_offset%0#0
    substring3                                                                                i#0,i#2,arc4_item%0#0
    l-load-copy arc4_item%0#0 0                                                               i#0,i#2,arc4_item%0#0,arc4_item%0#0 (copy)
    int 0                                                                                     i#0,i#2,arc4_item%0#0,arc4_item%0#0 (copy),0
    extract_uint64                                                                            i#0,i#2,arc4_item%0#0,item0%0%0#0
    l-load-copy arc4_item%0#0 1                                                               i#0,i#2,arc4_item%0#0,item0%0%0#0,arc4_item%0#0 (copy)
    int 8                                                                                     i#0,i#2,arc4_item%0#0,item0%0%0#0,arc4_item%0#0 (copy),8
    extract_uint16                                                                            i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0
    l-load-copy arc4_item%0#0 2                                                               i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0,arc4_item%0#0 (copy)
    len                                                                                       i#0,i#2,arc4_item%0#0,item0%0%0#0,item_start_offset%0#0,item_end_offset%0#0
    l-load arc4_item%0#0 3                                                                    i#0,i#2,item0%0%0#0,item_start_offset%0#0,item_end_offset%0#0,arc4_item%0#0
    l-load item_start_offset%0#0 2                                                            i#0,i#2,item0%0%0#0,item_end_offset%0#0,arc4_item%0#0,item_start_offset%0#0
    l-load item_end_offset%0#0 2                                                              i#0,i#2,item0%0%0#0,arc4_item%0#0,item_start_offset%0#0,item_end_offset%0#0
    substring3                                                                                i#0,i#2,item0%0%0#0,item1%0#0
    l-load item0%0%0#0 1                                                                      i#0,i#2,item1%0#0,item0%0%0#0
    l-load-copy i#2 2                                                                         i#0,i#2,item1%0#0,item0%0%0#0,i#2 (copy)
    ==                                                                                        i#0,i#2,item1%0#0,tmp%7#0
    assert // expected 1st element to be correct                                              i#0,i#2,item1%0#0
    // array/immutable.py:185
    // assert arr[i][1] == times(i), "expected 2nd element to be correct"
    l-load item1%0#0 0                                                                        i#0,i#2,item1%0#0
    extract 2 0                                                                               i#0,i#2,item1%1%0#0
    l-load i#0 2                                                                              i#2,item1%1%0#0,i#0
    callsub times                                                                             i#2,item1%1%0#0,tmp%8#0
    l-load item1%1%0#0 1                                                                      i#2,tmp%8#0,item1%1%0#0
    l-load tmp%8#0 1                                                                          i#2,item1%1%0#0,tmp%8#0
    ==                                                                                        i#2,tmp%9#0
    assert // expected 2nd element to be correct                                              i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_dynamic_sized_named_tuple_array_for_header@5

test_dynamic_sized_named_tuple_array_after_for@8:
    // array/immutable.py:187
    // arr = arr.pop()
    v-load arr#0                                                                              arr#0
    callsub dynamic_array_pop_dynamic_element                                                 popped%0#0,arr#0
    l-store arr#0 1                                                                           arr#0,popped%0#0
    pop 1                                                                                     arr#0
    // array/immutable.py:188
    // assert arr.length == 4
    l-load-copy arr#0 0                                                                       arr#0,arr#0 (copy)
    int 0                                                                                     arr#0,arr#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%10#0
    l-load-copy tmp%10#0 0                                                                    arr#0,tmp%10#0,tmp%10#0 (copy)
    int 4                                                                                     arr#0,tmp%10#0,tmp%10#0 (copy),4
    ==                                                                                        arr#0,tmp%10#0,tmp%11#0
    assert                                                                                    arr#0,tmp%10#0
    // array/immutable.py:189
    // assert arr[0] == MyDynamicSizedTuple(UInt64(1), String()), "expected 1, 0"
    l-load-copy arr#0 1                                                                       arr#0,tmp%10#0,arr#0 (copy)
    extract 2 0                                                                               arr#0,tmp%10#0,array_head_and_tail%2#0
    l-load-copy array_head_and_tail%2#0 0                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy)
    int 0                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,array_head_and_tail%2#0 (copy),0
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0
    l-load-copy tmp%10#0 2                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,tmp%10#0 (copy)
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,tmp%10#0 (copy),1
    - // on error: Index access is out of bounds                                              arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0
    l-load-copy array_head_and_tail%2#0 2                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,array_head_and_tail%2#0 (copy)
    len                                                                                       arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0
    l-load-copy array_head_and_tail%2#0 3                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy)
    int 2                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),2
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,next_item_offset%2#0
    l-load-copy end_of_array%2#0 1                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,next_item_offset%2#0,end_of_array%2#0 (copy)
    l-load next_item_offset%2#0 1                                                             arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_of_array%2#0 (copy),next_item_offset%2#0
    l-load-copy has_next%2#0 3                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_of_array%2#0 (copy),next_item_offset%2#0,has_next%2#0 (copy)
    select                                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0
    l-load-copy array_head_and_tail%2#0 4                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,item_offset%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0,array_head_and_tail%2#0 (copy)
    l-load item_offset%2#0 4                                                                  arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,end_offset%2#0,array_head_and_tail%2#0 (copy),item_offset%2#0
    l-load end_offset%2#0 2                                                                   arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),item_offset%2#0,end_offset%2#0
    substring3                                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0
    l-load-copy arc4_item%2#0 0                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,arc4_item%2#0 (copy)
    int 0                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,arc4_item%2#0 (copy),0
    extract_uint64                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0
    l-load-copy arc4_item%2#0 1                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,arc4_item%2#0 (copy)
    int 8                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,arc4_item%2#0 (copy),8
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0
    l-load-copy arc4_item%2#0 2                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0,arc4_item%2#0 (copy)
    len                                                                                       arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,arc4_item%2#0,item0%2%0#0,item_start_offset%2#0,item_end_offset%2#0
    l-load arc4_item%2#0 3                                                                    arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item_start_offset%2#0,item_end_offset%2#0,arc4_item%2#0
    l-load item_start_offset%2#0 2                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item_end_offset%2#0,arc4_item%2#0,item_start_offset%2#0
    l-load item_end_offset%2#0 2                                                              arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,arc4_item%2#0,item_start_offset%2#0,item_end_offset%2#0
    substring3                                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item1%2#0
    extract 2 0                                                                               arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item0%2%0#0,item1%2%0#0
    l-load item0%2%0#0 1                                                                      arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,item0%2%0#0
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,item0%2%0#0,1
    ==                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item1%2%0#0,tmp%12#0
    l-load item1%2%0#0 1                                                                      arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,item1%2%0#0
    byte ""                                                                                   arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,item1%2%0#0,""
    ==                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,tmp%13#0
    l-load tmp%12#0 1                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%13#0,tmp%12#0
    l-load tmp%13#0 1                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%12#0,tmp%13#0
    &&                                                                                        arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,tmp%14#0
    assert // expected 1, 0                                                                   arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0
    // array/immutable.py:190
    // assert arr[-1] == MyDynamicSizedTuple(UInt64(4), String("   ")), "expected 4, 3"
    l-load-copy has_next%2#0 1                                                                arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,has_next%2#0 (copy)
    int 2                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,has_next%2#0 (copy),2
    *                                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset_offset%3#0
    l-load-copy array_head_and_tail%2#0 3                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset_offset%3#0,array_head_and_tail%2#0 (copy)
    l-load item_offset_offset%3#0 1                                                           arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,array_head_and_tail%2#0 (copy),item_offset_offset%3#0
    extract_uint16                                                                            arr#0,tmp%10#0,array_head_and_tail%2#0,has_next%2#0,end_of_array%2#0,item_offset%3#0
    l-load has_next%2#0 2                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%2#0
    int 1                                                                                     arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%2#0,1
    +                                                                                         arr#0,tmp%10#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0
    l-load tmp%10#0 4                                                                         arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,tmp%10#0
    l-load-copy next_index%3#0 1                                                              arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,tmp%10#0,next_index%3#0 (copy)
    - // on error: Index access is out of bounds                                              arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,next_index%3#0,has_next%3#0
    l-load next_index%3#0 1                                                                   arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_index%3#0
    int 2                                                                                     arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_index%3#0,2
    *                                                                                         arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset_offset%3#0
    l-load-copy array_head_and_tail%2#0 4                                                     arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset_offset%3#0,array_head_and_tail%2#0 (copy)
    l-load next_item_offset_offset%3#0 1                                                      arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,array_head_and_tail%2#0 (copy),next_item_offset_offset%3#0
    extract_uint16                                                                            arr#0,array_head_and_tail%2#0,end_of_array%2#0,item_offset%3#0,has_next%3#0,next_item_offset%3#0
    l-load end_of_array%2#0 3                                                                 arr#0,array_head_and_tail%2#0,item_offset%3#0,has_next%3#0,next_item_offset%3#0,end_of_array%2#0
    l-load next_item_offset%3#0 1                                                             arr#0,array_head_and_tail%2#0,item_offset%3#0,has_next%3#0,end_of_array%2#0,next_item_offset%3#0
    l-load has_next%3#0 2                                                                     arr#0,array_head_and_tail%2#0,item_offset%3#0,end_of_array%2#0,next_item_offset%3#0,has_next%3#0
    select                                                                                    arr#0,array_head_and_tail%2#0,item_offset%3#0,end_offset%3#0
    l-load array_head_and_tail%2#0 2                                                          arr#0,item_offset%3#0,end_offset%3#0,array_head_and_tail%2#0
    l-load item_offset%3#0 2                                                                  arr#0,end_offset%3#0,array_head_and_tail%2#0,item_offset%3#0
    l-load end_offset%3#0 2                                                                   arr#0,array_head_and_tail%2#0,item_offset%3#0,end_offset%3#0
    substring3                                                                                arr#0,arc4_item%3#0
    l-load-copy arc4_item%3#0 0                                                               arr#0,arc4_item%3#0,arc4_item%3#0 (copy)
    int 0                                                                                     arr#0,arc4_item%3#0,arc4_item%3#0 (copy),0
    extract_uint64                                                                            arr#0,arc4_item%3#0,item0%3%0#0
    l-load-copy arc4_item%3#0 1                                                               arr#0,arc4_item%3#0,item0%3%0#0,arc4_item%3#0 (copy)
    int 8                                                                                     arr#0,arc4_item%3#0,item0%3%0#0,arc4_item%3#0 (copy),8
    extract_uint16                                                                            arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0
    l-load-copy arc4_item%3#0 2                                                               arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0,arc4_item%3#0 (copy)
    len                                                                                       arr#0,arc4_item%3#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0
    l-load arc4_item%3#0 3                                                                    arr#0,item0%3%0#0,item_start_offset%3#0,item_end_offset%3#0,arc4_item%3#0
    l-load item_start_offset%3#0 2                                                            arr#0,item0%3%0#0,item_end_offset%3#0,arc4_item%3#0,item_start_offset%3#0
    l-load item_end_offset%3#0 2                                                              arr#0,item0%3%0#0,arc4_item%3#0,item_start_offset%3#0,item_end_offset%3#0
    substring3                                                                                arr#0,item0%3%0#0,item1%3#0
    extract 2 0                                                                               arr#0,item0%3%0#0,item1%3%0#0
    l-load item0%3%0#0 1                                                                      arr#0,item1%3%0#0,item0%3%0#0
    int 4                                                                                     arr#0,item1%3%0#0,item0%3%0#0,4
    ==                                                                                        arr#0,item1%3%0#0,tmp%17#0
    l-load item1%3%0#0 1                                                                      arr#0,tmp%17#0,item1%3%0#0
    byte "   "                                                                                arr#0,tmp%17#0,item1%3%0#0,"   "
    ==                                                                                        arr#0,tmp%17#0,tmp%18#0
    l-load tmp%17#0 1                                                                         arr#0,tmp%18#0,tmp%17#0
    l-load tmp%18#0 1                                                                         arr#0,tmp%17#0,tmp%18#0
    &&                                                                                        arr#0,tmp%19#0
    assert // expected 4, 3                                                                   arr#0
    // array/immutable.py:191
    // self.f = arr
    byte "f"                                                                                  arr#0,"f"
    l-load arr#0 1                                                                            "f",arr#0
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
test_bit_packed_tuples:
    // array/immutable.py:195
    // arr2 = ImmutableArray[TwoBoolTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr2#0
    // array/immutable.py:196
    // arr7 = ImmutableArray[SevenBoolTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr7#0
    // array/immutable.py:197
    // arr8 = ImmutableArray[EightBoolTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr8#0
    // array/immutable.py:198
    // arr9 = ImmutableArray[NineBoolTuple]()
    byte 0x0000                                                                               0x0000
    v-store arr9#0
    // array/immutable.py:204
    // for i in urange(5):
    int 0                                                                                     0
    v-store i#0
    b test_bit_packed_tuples_for_header@1

test_bit_packed_tuples_for_header@1:
    // array/immutable.py:204
    // for i in urange(5):
    v-load i#0                                                                                i#0
    int 5                                                                                     i#0,5
    <                                                                                         continue_looping%0#0
    bz test_bit_packed_tuples_after_for@4 ; b test_bit_packed_tuples_for_body@2

test_bit_packed_tuples_for_body@2:
    // array/immutable.py:205
    // arr2 = arr2.append(TwoBoolTuple(a=i == 0, b=i == 1))
    v-load arr2#0                                                                             arr2#0
    extract 2 0                                                                               expr_value_trimmed%0#0
    v-load i#0                                                                                expr_value_trimmed%0#0,i#0
    l-store-copy i#0 0                                                                        expr_value_trimmed%0#0,i#0,i#0 (copy)
    !                                                                                         expr_value_trimmed%0#0,i#0,tmp%8#0
    l-load-copy i#0 1                                                                         expr_value_trimmed%0#0,i#0,tmp%8#0,i#0 (copy)
    int 1                                                                                     expr_value_trimmed%0#0,i#0,tmp%8#0,i#0 (copy),1
    ==                                                                                        expr_value_trimmed%0#0,i#0,tmp%8#0,tmp%9#0
    byte 0x00                                                                                 expr_value_trimmed%0#0,i#0,tmp%8#0,tmp%9#0,0x00
    byte 0x80                                                                                 expr_value_trimmed%0#0,i#0,tmp%8#0,tmp%9#0,0x00,0x80
    l-load tmp%8#0 3                                                                          expr_value_trimmed%0#0,i#0,tmp%9#0,0x00,0x80,tmp%8#0
    select                                                                                    expr_value_trimmed%0#0,i#0,tmp%9#0,array%encoded_bit%0#1
    l-load-copy array%encoded_bit%0#1 0                                                       expr_value_trimmed%0#0,i#0,tmp%9#0,array%encoded_bit%0#1,array%encoded_bit%0#1 (copy)
    int 1                                                                                     expr_value_trimmed%0#0,i#0,tmp%9#0,array%encoded_bit%0#1,array%encoded_bit%0#1 (copy),1
    l-load-copy tmp%9#0 3                                                                     expr_value_trimmed%0#0,i#0,tmp%9#0,array%encoded_bit%0#1,array%encoded_bit%0#1 (copy),1,tmp%9#0 (copy)
    setbit                                                                                    expr_value_trimmed%0#0,i#0,tmp%9#0,array%encoded_bit%0#1,array%sub_item%0#1
    l-load expr_value_trimmed%0#0 4                                                           i#0,tmp%9#0,array%encoded_bit%0#1,array%sub_item%0#1,expr_value_trimmed%0#0
    l-load array%sub_item%0#1 1                                                               i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%0#0,array%sub_item%0#1
    concat                                                                                    i#0,tmp%9#0,array%encoded_bit%0#1,concatenated%0#0
    l-load-copy concatenated%0#0 0                                                            i#0,tmp%9#0,array%encoded_bit%0#1,concatenated%0#0,concatenated%0#0 (copy)
    len                                                                                       i#0,tmp%9#0,array%encoded_bit%0#1,concatenated%0#0,len_%0#0
    itob                                                                                      i#0,tmp%9#0,array%encoded_bit%0#1,concatenated%0#0,as_bytes%0#0
    extract 6 2                                                                               i#0,tmp%9#0,array%encoded_bit%0#1,concatenated%0#0,len_16_bit%0#0
    l-load concatenated%0#0 1                                                                 i#0,tmp%9#0,array%encoded_bit%0#1,len_16_bit%0#0,concatenated%0#0
    concat                                                                                    i#0,tmp%9#0,array%encoded_bit%0#1,arr2#0
    v-store arr2#0                                                                            i#0,tmp%9#0,array%encoded_bit%0#1
    // array/immutable.py:206-218
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    v-load arr7#0                                                                             i#0,tmp%9#0,array%encoded_bit%0#1,arr7#0
    extract 2 0                                                                               i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0
    // array/immutable.py:212
    // c=i == 2,
    l-load-copy i#0 3                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,i#0 (copy)
    int 2                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,i#0 (copy),2
    ==                                                                                        i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0
    // array/immutable.py:213
    // d=i == 3,
    l-load-copy i#0 4                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,i#0 (copy)
    int 3                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,i#0 (copy),3
    ==                                                                                        i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0
    // array/immutable.py:214
    // e=i == 4,
    l-load-copy i#0 5                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,i#0 (copy)
    int 4                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,i#0 (copy),4
    ==                                                                                        i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0
    // array/immutable.py:215
    // f=i == 5,
    l-load-copy i#0 6                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,i#0 (copy)
    int 5                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,i#0 (copy),5
    ==                                                                                        i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0
    // array/immutable.py:216
    // g=i == 6,
    l-load-copy i#0 7                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,i#0 (copy)
    int 6                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,i#0 (copy),6
    ==                                                                                        i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0
    // array/immutable.py:209
    // bar=i + 1,
    l-load-copy i#0 8                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#0 (copy)
    int 1                                                                                     i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#0 (copy),1
    +                                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2
    // array/immutable.py:208
    // foo=i,
    l-load-copy i#0 9                                                                         i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,i#0 (copy)
    itob                                                                                      i#0,tmp%9#0,array%encoded_bit%0#1,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%1#1
    l-load array%encoded_bit%0#1 8                                                            i#0,tmp%9#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%1#1,array%encoded_bit%0#1
    concat                                                                                    i#0,tmp%9#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%encoded%2#1
    int 65                                                                                    i#0,tmp%9#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%encoded%2#1,65
    l-load tmp%9#0 9                                                                          i#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%encoded%2#1,65,tmp%9#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%2#1
    int 66                                                                                    i#0,expr_value_trimmed%1#0,tmp%12#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%2#1,66
    l-load tmp%12#0 7                                                                         i#0,expr_value_trimmed%1#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%2#1,66,tmp%12#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%3#1
    int 67                                                                                    i#0,expr_value_trimmed%1#0,tmp%13#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%3#1,67
    l-load tmp%13#0 6                                                                         i#0,expr_value_trimmed%1#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%3#1,67,tmp%13#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%4#1
    int 68                                                                                    i#0,expr_value_trimmed%1#0,tmp%14#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%4#1,68
    l-load tmp%14#0 5                                                                         i#0,expr_value_trimmed%1#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%4#1,68,tmp%14#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%5#1
    int 69                                                                                    i#0,expr_value_trimmed%1#0,tmp%15#0,tmp%16#0,i#2,array%sub_item%5#1,69
    l-load tmp%15#0 4                                                                         i#0,expr_value_trimmed%1#0,tmp%16#0,i#2,array%sub_item%5#1,69,tmp%15#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,tmp%16#0,i#2,array%sub_item%6#1
    int 70                                                                                    i#0,expr_value_trimmed%1#0,tmp%16#0,i#2,array%sub_item%6#1,70
    l-load tmp%16#0 3                                                                         i#0,expr_value_trimmed%1#0,i#2,array%sub_item%6#1,70,tmp%16#0
    setbit                                                                                    i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1
    l-load-copy i#2 1                                                                         i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1,i#2 (copy)
    itob                                                                                      i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1,array%sub_item%8#1
    l-load-copy array%sub_item%7#1 1                                                          i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1,array%sub_item%8#1,array%sub_item%7#1 (copy)
    l-load-copy array%sub_item%8#1 1                                                          i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1,array%sub_item%8#1,array%sub_item%7#1 (copy),array%sub_item%8#1 (copy)
    concat                                                                                    i#0,expr_value_trimmed%1#0,i#2,array%sub_item%7#1,array%sub_item%8#1,array%encoded%3#1
    // array/immutable.py:206-218
    // arr7 = arr7.append(
    //     SevenBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //     )
    // )
    l-load expr_value_trimmed%1#0 4                                                           i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,array%encoded%3#1,expr_value_trimmed%1#0
    l-load array%encoded%3#1 1                                                                i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,expr_value_trimmed%1#0,array%encoded%3#1
    concat                                                                                    i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0
    l-load-copy concatenated%1#0 0                                                            i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,concatenated%1#0 (copy)
    len                                                                                       i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,byte_len%0#0
    int 17                                                                                    i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,byte_len%0#0,17
    /                                                                                         i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,len_%1#0
    itob                                                                                      i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,as_bytes%1#0
    extract 6 2                                                                               i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,concatenated%1#0,len_16_bit%1#0
    l-load concatenated%1#0 1                                                                 i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,len_16_bit%1#0,concatenated%1#0
    concat                                                                                    i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,arr7#0
    v-store arr7#0                                                                            i#0,i#2,array%sub_item%7#1,array%sub_item%8#1
    // array/immutable.py:219-232
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    v-load arr8#0                                                                             i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,arr8#0
    extract 2 0                                                                               i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,expr_value_trimmed%2#0
    // array/immutable.py:230
    // h=i == 7,
    l-load-copy i#0 4                                                                         i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,expr_value_trimmed%2#0,i#0 (copy)
    int 7                                                                                     i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,expr_value_trimmed%2#0,i#0 (copy),7
    ==                                                                                        i#0,i#2,array%sub_item%7#1,array%sub_item%8#1,expr_value_trimmed%2#0,tmp%25#0
    // array/immutable.py:221
    // foo=i,
    l-load array%sub_item%7#1 3                                                               i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,tmp%25#0,array%sub_item%7#1
    int 71                                                                                    i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,tmp%25#0,array%sub_item%7#1,71
    l-load tmp%25#0 2                                                                         i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,array%sub_item%7#1,71,tmp%25#0
    setbit                                                                                    i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,array%sub_item%16#1
    l-load-copy array%sub_item%16#1 0                                                         i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,array%sub_item%16#1,array%sub_item%16#1 (copy)
    l-load-copy array%sub_item%8#1 3                                                          i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,array%sub_item%16#1,array%sub_item%16#1 (copy),array%sub_item%8#1 (copy)
    concat                                                                                    i#0,i#2,array%sub_item%8#1,expr_value_trimmed%2#0,array%sub_item%16#1,array%encoded%6#1
    // array/immutable.py:219-232
    // arr8 = arr8.append(
    //     EightBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //     )
    // )
    l-load expr_value_trimmed%2#0 2                                                           i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,array%encoded%6#1,expr_value_trimmed%2#0
    l-load array%encoded%6#1 1                                                                i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%2#0,array%encoded%6#1
    concat                                                                                    i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0
    l-load-copy concatenated%2#0 0                                                            i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,concatenated%2#0 (copy)
    len                                                                                       i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,byte_len%1#0
    int 17                                                                                    i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,byte_len%1#0,17
    /                                                                                         i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,len_%2#0
    itob                                                                                      i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,as_bytes%2#0
    extract 6 2                                                                               i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,concatenated%2#0,len_16_bit%2#0
    l-load concatenated%2#0 1                                                                 i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,len_16_bit%2#0,concatenated%2#0
    concat                                                                                    i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,arr8#0
    v-store arr8#0                                                                            i#0,i#2,array%sub_item%8#1,array%sub_item%16#1
    // array/immutable.py:233-247
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    v-load arr9#0                                                                             i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,arr9#0
    extract 2 0                                                                               i#0,i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0
    // array/immutable.py:245
    // i=i == 8,
    l-load i#0 4                                                                              i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,i#0
    int 8                                                                                     i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,i#0,8
    ==                                                                                        i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,tmp%35#0
    // array/immutable.py:235
    // foo=i,
    byte 0x00                                                                                 i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,tmp%35#0,0x00
    int 0                                                                                     i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,tmp%35#0,0x00,0
    l-load tmp%35#0 2                                                                         i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,0x00,0,tmp%35#0
    setbit                                                                                    i#2,array%sub_item%8#1,array%sub_item%16#1,expr_value_trimmed%3#0,array%sub_item%26#1
    l-load array%sub_item%16#1 2                                                              i#2,array%sub_item%8#1,expr_value_trimmed%3#0,array%sub_item%26#1,array%sub_item%16#1
    l-load array%sub_item%26#1 1                                                              i#2,array%sub_item%8#1,expr_value_trimmed%3#0,array%sub_item%16#1,array%sub_item%26#1
    concat                                                                                    i#2,array%sub_item%8#1,expr_value_trimmed%3#0,array%encoded%9#1
    l-load array%sub_item%8#1 2                                                               i#2,expr_value_trimmed%3#0,array%encoded%9#1,array%sub_item%8#1
    concat                                                                                    i#2,expr_value_trimmed%3#0,array%encoded%10#1
    // array/immutable.py:233-247
    // arr9 = arr9.append(
    //     NineBoolTuple(
    //         foo=i,
    //         bar=i + 1,
    //         a=i == 0,
    //         b=i == 1,
    //         c=i == 2,
    //         d=i == 3,
    //         e=i == 4,
    //         f=i == 5,
    //         g=i == 6,
    //         h=i == 7,
    //         i=i == 8,
    //     )
    // )
    l-load expr_value_trimmed%3#0 1                                                           i#2,array%encoded%10#1,expr_value_trimmed%3#0
    l-load array%encoded%10#1 1                                                               i#2,expr_value_trimmed%3#0,array%encoded%10#1
    concat                                                                                    i#2,concatenated%3#0
    l-load-copy concatenated%3#0 0                                                            i#2,concatenated%3#0,concatenated%3#0 (copy)
    len                                                                                       i#2,concatenated%3#0,byte_len%2#0
    int 18                                                                                    i#2,concatenated%3#0,byte_len%2#0,18
    /                                                                                         i#2,concatenated%3#0,len_%3#0
    itob                                                                                      i#2,concatenated%3#0,as_bytes%3#0
    extract 6 2                                                                               i#2,concatenated%3#0,len_16_bit%3#0
    l-load concatenated%3#0 1                                                                 i#2,len_16_bit%3#0,concatenated%3#0
    concat                                                                                    i#2,arr9#0
    v-store arr9#0                                                                            i#2
    l-load i#2 0                                                                              i#2
    v-store i#0
    b test_bit_packed_tuples_for_header@1

test_bit_packed_tuples_after_for@4:
    // array/immutable.py:249
    // assert arr2.length == 5
    v-load arr2#0                                                                             arr2#0
    l-store-copy arr2#0 0                                                                     arr2#0,arr2#0 (copy)
    int 0                                                                                     arr2#0,arr2#0 (copy),0
    extract_uint16                                                                            arr2#0,tmp%37#0
    int 5                                                                                     arr2#0,tmp%37#0,5
    ==                                                                                        arr2#0,tmp%38#0
    assert                                                                                    arr2#0
    // array/immutable.py:250
    // assert arr7.length == 5
    v-load arr7#0                                                                             arr2#0,arr7#0
    l-store-copy arr7#0 0                                                                     arr2#0,arr7#0,arr7#0 (copy)
    int 0                                                                                     arr2#0,arr7#0,arr7#0 (copy),0
    extract_uint16                                                                            arr2#0,arr7#0,tmp%39#0
    int 5                                                                                     arr2#0,arr7#0,tmp%39#0,5
    ==                                                                                        arr2#0,arr7#0,tmp%40#0
    assert                                                                                    arr2#0,arr7#0
    // array/immutable.py:251
    // assert arr8.length == 5
    v-load arr8#0                                                                             arr2#0,arr7#0,arr8#0
    l-store-copy arr8#0 0                                                                     arr2#0,arr7#0,arr8#0,arr8#0 (copy)
    int 0                                                                                     arr2#0,arr7#0,arr8#0,arr8#0 (copy),0
    extract_uint16                                                                            arr2#0,arr7#0,arr8#0,tmp%41#0
    int 5                                                                                     arr2#0,arr7#0,arr8#0,tmp%41#0,5
    ==                                                                                        arr2#0,arr7#0,arr8#0,tmp%42#0
    assert                                                                                    arr2#0,arr7#0,arr8#0
    // array/immutable.py:252
    // assert arr9.length == 5
    v-load arr9#0                                                                             arr2#0,arr7#0,arr8#0,arr9#0
    l-store-copy arr9#0 0                                                                     arr2#0,arr7#0,arr8#0,arr9#0,arr9#0 (copy)
    int 0                                                                                     arr2#0,arr7#0,arr8#0,arr9#0,arr9#0 (copy),0
    extract_uint16                                                                            arr2#0,arr7#0,arr8#0,arr9#0,tmp%43#0
    int 5                                                                                     arr2#0,arr7#0,arr8#0,arr9#0,tmp%43#0,5
    ==                                                                                        arr2#0,arr7#0,arr8#0,arr9#0,tmp%44#0
    assert                                                                                    arr2#0,arr7#0,arr8#0,arr9#0
    // array/immutable.py:253
    // self.bool2 = arr2
    byte "bool2"                                                                              arr2#0,arr7#0,arr8#0,arr9#0,"bool2"
    l-load arr2#0 4                                                                           arr7#0,arr8#0,arr9#0,"bool2",arr2#0
    app_global_put                                                                            arr7#0,arr8#0,arr9#0
    // array/immutable.py:254
    // self.bool7 = arr7
    byte "bool7"                                                                              arr7#0,arr8#0,arr9#0,"bool7"
    l-load arr7#0 3                                                                           arr8#0,arr9#0,"bool7",arr7#0
    app_global_put                                                                            arr8#0,arr9#0
    // array/immutable.py:255
    // self.bool8 = arr8
    byte "bool8"                                                                              arr8#0,arr9#0,"bool8"
    l-load arr8#0 2                                                                           arr9#0,"bool8",arr8#0
    app_global_put                                                                            arr9#0
    // array/immutable.py:256
    // self.bool9 = arr9
    byte "bool9"                                                                              arr9#0,"bool9"
    l-load arr9#0 1                                                                           "bool9",arr9#0
    app_global_put
    retsub


// test_cases.array.immutable.ImmutableArrayContract.test_bool_return() -> bytes:
test_bool_return:
    // array/immutable.py:274
    // return ImmutableArray(True, False, True, False, True)
    byte 0x0000                                                                               0x0000
    byte 0x8000800080                                                                         0x0000,0x8000800080
    int 5                                                                                     0x0000,0x8000800080,5
    int 8                                                                                     0x0000,0x8000800080,5,8
    callsub dynamic_array_concat_bits                                                         concat_result%0#0
    retsub                                                                                    concat_result%0#0


// test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return() -> bytes:
test_dynamic_tuple_return:
    // array/immutable.py:282
    // return ImmutableArray(MyDynamicSizedTuple(UInt64(), String("Hello")))
    int 0                                                                                     0
    byte 0x                                                                                   0,0x
    int 1                                                                                     0,0x,1
    byte 0x00020000000000000000000a000548656c6c6f                                             0,0x,1,0x00020000000000000000000a000548656c6c6f
    callsub dynamic_array_concat_dynamic_element                                              concat_result%0#0
    retsub                                                                                    concat_result%0#0


