main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@26
    block@2: // abi_routing_L74
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint64_array()void" => block@3, method "test_bool_array(uint64)void" => block@4, method "test_fixed_size_tuple_array()void" => block@5, method "test_fixed_size_named_tuple_array()void" => block@6, method "test_dynamic_sized_tuple_array()void" => block@7, method "test_dynamic_sized_named_tuple_array()void" => block@8, method "test_implicit_conversion_log(uint64[])void" => block@9, method "test_implicit_conversion_emit(uint64[])void" => block@10, method "test_nested_array(uint64,uint64[][])uint64[]" => block@11, method "test_bit_packed_tuples()void" => block@12, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@13, method "test_uint64_return(uint64)uint64[]" => block@14, method "test_bool_return(uint64)bool[]" => block@15, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@16, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@17, method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]" => block@18, method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]" => block@19, method "test_concat_with_native_tuple((uint64,uint64))uint64[]" => block@20, method "test_dynamic_concat_with_arc4_tuple((string,string))string[]" => block@21, method "test_dynamic_concat_with_native_tuple((string,string))string[]" => block@22, method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]" => block@23, * => block@30}
    block@3: // test_uint64_array_route_L75
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@31
    block@4: // test_bool_array_route_L111
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%11#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%11#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@31
    block@5: // test_fixed_size_tuple_array_route_L135
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@31
    block@6: // test_fixed_size_named_tuple_array_route_L153
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@31
    block@7: // test_dynamic_sized_tuple_array_route_L168
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@31
    block@8: // test_dynamic_sized_named_tuple_array_route_L187
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@31
    block@9: // test_implicit_conversion_log_route_L206
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        let reinterpret_uint64[]%0#0: uint64[] = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(reinterpret_uint64[]%0#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@31
    block@10: // test_implicit_conversion_emit_route_L210
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_uint64[]%1#0: uint64[] = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(reinterpret_uint64[]%1#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@31
    block@11: // test_nested_array_route_L214
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%40#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_uint64[][]%0#0: uint64[][] = (txna ApplicationArgs 2)
        let tmp%41#0: uint64[] = test_cases.array.immutable.ImmutableArrayContract.test_nested_array(tmp%40#0, reinterpret_uint64[][]%0#0)
        let tmp%42#0: bytes = (concat 0x151f7c75 tmp%41#0)
        (log tmp%42#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8: bool = 1u
        goto block@31
    block@12: // test_bit_packed_tuples_route_L232
        let tmp%43#0: uint64 = (txn OnCompletion)
        let tmp%44#0: bool = (! tmp%43#0)
        (assert tmp%44#0) // OnCompletion is not NoOp
        let tmp%45#0: uint64 = (txn ApplicationID)
        (assert tmp%45#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9: bool = 1u
        goto block@31
    block@13: // sum_uints_and_lengths_and_trues_route_L297
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let reinterpret_uint64[]%2#0: uint64[] = (txna ApplicationArgs 1)
        let reinterpret_bool[]%0#0: bool[] = (txna ApplicationArgs 2)
        let reinterpret_(uint64,bool,bool)[]%0#0: (uint64,bool,bool)[] = (txna ApplicationArgs 3)
        let reinterpret_(uint64,bytes)[]%0#0: (uint64,bytes)[] = (txna ApplicationArgs 4)
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64, elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(reinterpret_uint64[]%2#0, reinterpret_bool[]%0#0, reinterpret_(uint64,bool,bool)[]%0#0, reinterpret_(uint64,bytes)[]%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%3#0)
        let tmp%51#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%4#0)
        (log tmp%51#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10: bool = 1u
        goto block@31
    block@14: // test_uint64_return_route_L324
        let tmp%52#0: uint64 = (txn OnCompletion)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // OnCompletion is not NoOp
        let tmp%54#0: uint64 = (txn ApplicationID)
        (assert tmp%54#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%56#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let tmp%57#0: uint64[] = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%56#0)
        let tmp%58#0: bytes = (concat 0x151f7c75 tmp%57#0)
        (log tmp%58#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11: bool = 1u
        goto block@31
    block@15: // test_bool_return_route_L331
        let tmp%59#0: uint64 = (txn OnCompletion)
        let tmp%60#0: bool = (! tmp%59#0)
        (assert tmp%60#0) // OnCompletion is not NoOp
        let tmp%61#0: uint64 = (txn ApplicationID)
        (assert tmp%61#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%63#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%64#0: bool[] = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%63#0)
        let tmp%65#0: bytes = (concat 0x151f7c75 tmp%64#0)
        (log tmp%65#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12: bool = 1u
        goto block@31
    block@16: // test_tuple_return_route_L338
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%70#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let tmp%71#0: (uint64,bool,bool)[] = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%70#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 tmp%71#0)
        (log tmp%72#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13: bool = 1u
        goto block@31
    block@17: // test_dynamic_tuple_return_route_L345
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let tmp%78#0: (uint64,bytes)[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%77#0)
        let tmp%79#0: bytes = (concat 0x151f7c75 tmp%78#0)
        (log tmp%79#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14: bool = 1u
        goto block@31
    block@18: // test_convert_to_array_and_back_route_L352
        let tmp%80#0: uint64 = (txn OnCompletion)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0) // OnCompletion is not NoOp
        let tmp%82#0: uint64 = (txn ApplicationID)
        (assert tmp%82#0) // can only call when not creating
        let reinterpret_(uint64,bool,bool)[]%1#0: (uint64,bool,bool)[] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%6#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%84#0: uint64 = (btoi reinterpret_bytes[8]%6#0)
        let tmp%85#0: (uint64,bool,bool)[] = test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(reinterpret_(uint64,bool,bool)[]%1#0, tmp%84#0)
        let tmp%86#0: bytes = (concat 0x151f7c75 tmp%85#0)
        (log tmp%86#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15: bool = 1u
        goto block@31
    block@19: // test_concat_with_arc4_tuple_route_L362
        let tmp%87#0: uint64 = (txn OnCompletion)
        let tmp%88#0: bool = (! tmp%87#0)
        (assert tmp%88#0) // OnCompletion is not NoOp
        let tmp%89#0: uint64 = (txn ApplicationID)
        (assert tmp%89#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let tmp%91#0: bytes[8][] = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(reinterpret_bytes[16]%0#0)
        let tmp%92#0: bytes = (concat 0x151f7c75 tmp%91#0)
        (log tmp%92#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16: bool = 1u
        goto block@31
    block@20: // test_concat_with_native_tuple_route_L370
        let tmp%93#0: uint64 = (txn OnCompletion)
        let tmp%94#0: bool = (! tmp%93#0)
        (assert tmp%94#0) // OnCompletion is not NoOp
        let tmp%95#0: uint64 = (txn ApplicationID)
        (assert tmp%95#0) // can only call when not creating
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = ((extract 0 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let item1%0#0: bytes = ((extract 8 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let tmp%97#0: bytes[8][] = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(item0%0#0, item1%0#0)
        let tmp%98#0: bytes = (concat 0x151f7c75 tmp%97#0)
        (log tmp%98#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17: bool = 1u
        goto block@31
    block@21: // test_dynamic_concat_with_arc4_tuple_route_L378
        let tmp%99#0: uint64 = (txn OnCompletion)
        let tmp%100#0: bool = (! tmp%99#0)
        (assert tmp%100#0) // OnCompletion is not NoOp
        let tmp%101#0: uint64 = (txn ApplicationID)
        (assert tmp%101#0) // can only call when not creating
        let tmp%103#0: bytes = (txna ApplicationArgs 1)
        let tmp%104#0: bytes[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(tmp%103#0)
        let tmp%105#0: bytes = (concat 0x151f7c75 tmp%104#0)
        (log tmp%105#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18: bool = 1u
        goto block@31
    block@22: // test_dynamic_concat_with_native_tuple_route_L386
        let tmp%106#0: uint64 = (txn OnCompletion)
        let tmp%107#0: bool = (! tmp%106#0)
        (assert tmp%107#0) // OnCompletion is not NoOp
        let tmp%108#0: uint64 = (txn ApplicationID)
        (assert tmp%108#0) // can only call when not creating
        let tmp%110#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%110#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%110#0 2u)
        let item0%1#0: bytes = (substring3 tmp%110#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_end_offset%1#0: uint64 = (len tmp%110#0)
        let item1%1#0: bytes = (substring3 tmp%110#0 item_end_offset%0#0 item_end_offset%1#0)
        let tmp%111#0: bytes[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(item0%1#0, item1%1#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 tmp%111#0)
        (log tmp%112#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19: bool = 1u
        goto block@31
    block@23: // test_concat_immutable_dynamic_route_L394
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (! tmp%113#0)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        (assert tmp%115#0) // can only call when not creating
        let reinterpret_(uint64,bytes)[]%1#0: (uint64,bytes)[] = (txna ApplicationArgs 1)
        let reinterpret_(uint64,bytes)[]%2#0: (uint64,bytes)[] = (txna ApplicationArgs 2)
        let tmp%117#0: (uint64,bytes)[] = test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(reinterpret_(uint64,bytes)[]%1#0, reinterpret_(uint64,bytes)[]%2#0)
        let tmp%118#0: bytes = (concat 0x151f7c75 tmp%117#0)
        (log tmp%118#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20: bool = 1u
        goto block@31
    block@26: // bare_routing_L74
        let tmp%119#0: uint64 = (txn OnCompletion)
        goto tmp%119#0 ? block@30 : block@27
    block@27: // __algopy_default_create_L1
        let tmp%120#0: uint64 = (txn ApplicationID)
        let tmp%121#0: bool = (! tmp%120#0)
        (assert tmp%121#0) // can only call when creating
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21: bool = 1u
        goto block@31
    block@30: // after_if_else_L74
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22: bool = 0u
        goto block@31
    block@31: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1 <- block@4, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2 <- block@5, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3 <- block@6, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4 <- block@7, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5 <- block@8, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6 <- block@9, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7 <- block@10, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8 <- block@11, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9 <- block@12, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10 <- block@13, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11 <- block@14, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12 <- block@15, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13 <- block@16, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14 <- block@17, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15 <- block@18, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16 <- block@19, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17 <- block@20, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18 <- block@21, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19 <- block@22, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20 <- block@23, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21 <- block@27, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22 <- block@30)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%2#0: bytes = (itob item_offset#1)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%5#0 new_head#1)
        let tmp%7#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%8#0: bytes = (substring3 head_and_tail#0 tmp%7#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%6#0 tmp%8#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%6#0: bool = (< write_offset#1 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let array_head_and_tail#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tail_offset#0: uint64 = (* new_length#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tail_offset#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%5#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#1)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#1: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#1: uint64 = (+ tmp%6#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        let tmp%12#0: bytes = (concat tmp%2#0 array_head_and_tail#1)
        return tmp%12#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#4: bytes = (concat new_head#3 tmp%7#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%0#0 item_offset_adjustment#2)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine test_cases.array.immutable.times(n: uint64) -> bytes:
    block@0: // L401
        let result#0: bytes = ""
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L404
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let result#1: bytes = φ(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L405
        let result#2: bytes = (concat result#1 " ")
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L404
        return result#1

subroutine test_cases.array.immutable.add_x(arr: uint64[], x: uint64) -> uint64[]:
    block@0: // L409
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L411
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: uint64[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L412
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let array%sub_item%0#1: bytes[8] = (itob i#1)
        let array%encoded%0#1: uint64[] = array%sub_item%0#1
        let array%data%0#1: uint64[] = array%sub_item%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 array%sub_item%0#1)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: uint64[] = (concat len_16_bit%0#0 concatenated%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L411
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L75
        let array%sub_item%0#1: bytes[8] = (itob 42u)
        let array%encoded%0#1: uint64[] = array%sub_item%0#1
        let array%data%0#1: uint64[] = array%sub_item%0#1
        let byte_len%0#0: uint64 = 8u
        let len_%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let len_16_bit%0#0: bytes = 0x0001
        let arr#1: uint64[] = 0x0001000000000000002a
        let tmp%2#0: uint64 = 1u
        let tmp%3#0: bool = 1u
        let tmp%5#0: uint64 = 0u
        let array_head_and_tail%0#0: bytes = 0x000000000000002a
        let item_offset%0#0: uint64 = 0u
        let tmp%6#0: uint64 = 42u
        let tmp%7#0: bool = 1u
        let arr#2: uint64[] = test_cases.array.immutable.add_x(0x0001000000000000002a, 5u)
        let tmp%8#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%9#0: bool = (== tmp%8#0 6u)
        (assert tmp%9#0)
        let tmp%11#0: uint64 = (- tmp%8#0 1u)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#2)
        let item_offset%1#0: uint64 = (* tmp%11#0 8u)
        let tmp%12#0: uint64 = (extract_uint64 array_head_and_tail%1#0 item_offset%1#0)
        let tmp%13#0: bool = (== tmp%12#0 4u)
        (assert tmp%13#0)
        let array%sub_item%1#1: bytes[8] = (itob 43u)
        let array%encoded%1#1: uint64[] = array%sub_item%1#1
        let array%data%1#1: uint64[] = array%sub_item%1#1
        let concatenated%1#0: bytes = (concat array_head_and_tail%1#0 array%sub_item%1#1)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#3: uint64[] = (concat len_16_bit%1#0 concatenated%1#0)
        let tmp%14#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%15#0: bool = (== tmp%14#0 7u)
        (assert tmp%15#0)
        let tmp%17#0: uint64 = (- tmp%14#0 1u)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#3)
        let item_offset%2#0: uint64 = (* tmp%17#0 8u)
        let tmp%18#0: uint64 = (extract_uint64 array_head_and_tail%2#0 item_offset%2#0)
        let tmp%19#0: bool = (== tmp%18#0 43u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = (extract_uint64 arr#3 2u)
        let tmp%21#0: bool = (== tmp%20#0 42u)
        (assert tmp%21#0)
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L418
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let arr#9: uint64[] = φ(arr#3 <- block@0, arr#10 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L419
        let (popped%0#0: bytes, arr#10: uint64[]) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#9, 8u)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@4: // after_for_L418
        let tmp%22#0: uint64 = (extract_uint16 arr#9 0u)
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let tmp%25#0: uint64 = (- tmp%22#0 1u)
        let array_head_and_tail%4#0: bytes = ((extract 2 0) arr#9)
        let item_offset%4#0: uint64 = (* tmp%25#0 8u)
        let tmp%26#0: uint64 = (extract_uint64 array_head_and_tail%4#0 item_offset%4#0)
        let tmp%27#0: bool = (== tmp%26#0 2u)
        (assert tmp%27#0)
        let arr#5: uint64[] = test_cases.array.immutable.add_x(arr#9, 10u)
        let tmp%28#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%29#0: bool = (== tmp%28#0 14u)
        (assert tmp%29#0)
        let tmp%31#0: uint64 = (- tmp%28#0 1u)
        let array_head_and_tail%5#0: bytes = ((extract 2 0) arr#5)
        let item_offset%5#0: uint64 = (* tmp%31#0 8u)
        let tmp%32#0: uint64 = (extract_uint64 array_head_and_tail%5#0 item_offset%5#0)
        let tmp%33#0: bool = (== tmp%32#0 9u)
        (assert tmp%33#0)
        let array%sub_item%2#1: bytes[8] = (itob 44u)
        let array%encoded%2#1: uint64[] = array%sub_item%2#1
        let array%data%2#1: uint64[] = array%sub_item%2#1
        let concatenated%2#0: bytes = (concat array_head_and_tail%5#0 array%sub_item%2#1)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#6: uint64[] = (concat len_16_bit%2#0 concatenated%2#0)
        let tmp%34#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let tmp%37#0: uint64 = (- tmp%34#0 1u)
        let array_head_and_tail%6#0: bytes = ((extract 2 0) arr#6)
        let item_offset%6#0: uint64 = (* tmp%37#0 8u)
        let tmp%38#0: uint64 = (extract_uint64 array_head_and_tail%6#0 item_offset%6#0)
        let tmp%39#0: bool = (== tmp%38#0 44u)
        (assert tmp%39#0)
        let val_as_bytes%0#0: bytes[8] = (itob 23u)
        let index_is_in_bounds%0#0: bool = (< 2u tmp%34#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let arr#7: uint64[] = ((replace2 18) arr#6 val_as_bytes%0#0)
        let tmp%40#0: uint64 = (extract_uint16 arr#7 0u)
        let tmp%41#0: bool = (== tmp%40#0 15u)
        (assert tmp%41#0)
        let tmp%42#0: uint64 = (extract_uint64 arr#7 18u)
        let tmp%43#0: bool = (== tmp%42#0 23u)
        (assert tmp%43#0)
        (app_global_put "a" arr#7)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L111
        let arr#0: bool[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L116
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: bool[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L117
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let tmp%3#0: bool = (== i#1 tmp%2#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%3#0)
        let arr#2: bool[] = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, encoded_bool%0#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L116
        let array_length#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== array_length#0 length#0)
        (assert tmp%5#0)
        goto length#0 ? block@5 : block@6
    block@5: // if_body_L122
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        (assert array_length#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%0#0 0u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let tmp%7#0: bool = (getbit encoded_bool%1#0 0u)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L121
        let tmp%9#0: bool = (> length#0 1u)
        goto tmp%9#0 ? block@7 : block@8
    block@7: // if_body_L124
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let index_is_in_bounds%1#0: bool = (< 1u array_length#0)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let is_true%1#0: uint64 = (getbit array_head_and_tail%1#0 1u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tmp%10#0: bool = (getbit encoded_bool%2#0 0u)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L123
        let tmp%12#0: bool = (> length#0 2u)
        goto tmp%12#0 ? block@9 : block@10
    block@9: // if_body_L126
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#1)
        let index_is_in_bounds%2#0: bool = (< 2u array_length#0)
        (assert index_is_in_bounds%2#0) // Index access is out of bounds
        let is_true%2#0: uint64 = (getbit array_head_and_tail%2#0 2u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let tmp%13#0: bool = (getbit encoded_bool%3#0 0u)
        (assert tmp%13#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L125
        let tmp%14#0: bool = (> length#0 3u)
        goto tmp%14#0 ? block@11 : block@12
    block@11: // if_body_L128
        let tmp%15#0: uint64 = (- length#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#1)
        let index_is_in_bounds%3#0: bool = (< tmp%15#0 array_length#0)
        (assert index_is_in_bounds%3#0) // Index access is out of bounds
        let is_true%3#0: uint64 = (getbit array_head_and_tail%3#0 tmp%15#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%3#0)
        let tmp%16#0: bool = (getbit encoded_bool%4#0 0u)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L127
        (app_global_put "g" arr#1)
        goto length#0 ? block@13 : block@14
    block@13: // if_body_L132
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#1: bytes = (itob length_minus_1#0)
        let tmp%1#1: bytes = ((extract 6 0) tmp%0#1)
        let result#0: bytes = ((replace2 0) arr#1 tmp%1#1)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%3#1: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#1: uint64 = (/ tmp%3#1 8u)
        let tmp%5#1: uint64 = (+ 2u tmp%4#1)
        let result#2: bytes = (substring3 result#1 0u tmp%5#1)
        let tmp%19#0: uint64 = (extract_uint16 result#2 0u)
        let tmp%20#0: uint64 = (- length#0 1u)
        let tmp%21#0: bool = (== tmp%19#0 tmp%20#0)
        (assert tmp%21#0)
        goto block@14
    block@14: // after_if_else_L131
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L135
        let arr#0: (uint64,uint64)[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L140
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,uint64)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L141
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let i#2: uint64 = (+ i#1 1u)
        let tmp%3#0: uint64 = (+ i#1 2u)
        let array%sub_item%0#1: bytes[8] = (itob i#2)
        let array%encoded%0#1: (uint64,uint64)[] = array%sub_item%0#1
        let array%sub_item%1#1: bytes[8] = (itob tmp%3#0)
        let array%encoded%1#1: (uint64,uint64)[] = (concat array%sub_item%0#1 array%sub_item%1#1)
        let array%data%0#1: (uint64,uint64)[] = array%encoded%1#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 array%encoded%1#1)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: (uint64,uint64)[] = (concat len_16_bit%0#0 concatenated%0#0)
        goto block@1
    block@4: // after_for_L140
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let arc4_item%0#0: bytes = ((extract 2 16) arr#1)
        let item0%0%0#0: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let item1%0%0#0: uint64 = (extract_uint64 arc4_item%0#0 8u)
        let tmp%6#0: bool = (== item0%0%0#0 1u)
        let tmp%7#0: bool = (== item1%0%0#0 2u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%10#0: uint64 = (- tmp%4#0 1u)
        let item_offset%1#0: uint64 = (* tmp%10#0 16u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (extract_uint64 arc4_item%1#0 0u)
        let item1%1%0#0: uint64 = (extract_uint64 arc4_item%1#0 8u)
        let tmp%11#0: bool = (== item0%1%0#0 5u)
        let tmp%12#0: bool = (== item1%1%0#0 6u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let (popped%0#0: bytes, arr#3: (uint64,uint64)[]) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 16u)
        let tmp%14#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%15#0: bool = (== tmp%14#0 4u)
        (assert tmp%15#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#3)
        let arc4_item%2#0: bytes = ((extract 2 16) arr#3)
        let item0%2%0#0: uint64 = (extract_uint64 arc4_item%2#0 0u)
        let item1%2%0#0: uint64 = (extract_uint64 arc4_item%2#0 8u)
        let tmp%16#0: bool = (== item0%2%0#0 1u)
        let tmp%17#0: bool = (== item1%2%0#0 2u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0)
        let tmp%20#0: uint64 = (- tmp%14#0 1u)
        let item_offset%3#0: uint64 = (* tmp%20#0 16u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%3#0 16u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (extract_uint64 arc4_item%3#0 0u)
        let item1%3%0#0: uint64 = (extract_uint64 arc4_item%3#0 8u)
        let tmp%21#0: bool = (== item0%3%0#0 4u)
        let tmp%22#0: bool = (== item1%3%0#0 5u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        (app_global_put "c" arr#3)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L153
        let arr#0: (uint64,bool,bool)[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L158
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,bool,bool)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L159
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let tmp%2#0: uint64 = (% i#1 2u)
        let tmp%3#0: bool = (! tmp%2#0)
        let tmp%4#0: uint64 = (* i#1 3u)
        let tmp%5#0: uint64 = (% tmp%4#0 2u)
        let tmp%6#0: bool = (! tmp%5#0)
        let array%sub_item%0#1: bytes[8] = (itob i#1)
        let array%encoded%0#1: (uint64,bool,bool)[] = array%sub_item%0#1
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%3#0)
        let array%encoded%1#1: (uint64,bool,bool)[] = (concat array%sub_item%0#1 array%encoded_bit%0#1)
        let array%sub_item%1#1: (uint64,bool,bool)[] = (setbit array%encoded%1#1 65u tmp%6#0)
        let array%data%0#1: (uint64,bool,bool)[] = array%sub_item%1#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 array%sub_item%1#1)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: (uint64,bool,bool)[] = (concat len_16_bit%0#0 concatenated%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L158
        let tmp%7#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%8#0: bool = (== tmp%7#0 5u)
        (assert tmp%8#0)
        let arc4_item%0#0: bytes = ((extract 2 9) arr#1)
        let foo#0: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let is_true%0#0: uint64 = (getbit arc4_item%0#0 64u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let bar#0: bool = (getbit encoded_bool%0#0 0u)
        let is_true%1#0: uint64 = (getbit arc4_item%0#0 65u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let baz#0: bool = (getbit encoded_bool%1#0 0u)
        let tmp%9#0: bool = (! foo#0)
        (assert tmp%9#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L168
        let arr#0: (uint64,bytes)[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L173
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L174
        let i#2: uint64 = (+ i#1 1u)
        let tmp%3#0: bytes = (bzero i#1)
        let val_as_bytes%0#0: bytes[8] = (itob i#2)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 0x000a)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let result%1#0: bytes = (concat 0x0002 encoded_tuple_buffer%3#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let arr#2: (uint64,bytes)[] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
        goto block@1
    block@4: // after_for_L173
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L177
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L178
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let i#5: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- tmp%4#0 i#5) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* i#5 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0%0#0: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let item_start_offset%0#0: uint64 = (extract_uint16 arc4_item%0#0 8u)
        let item_end_offset%0#0: uint64 = (len arc4_item%0#0)
        let item1%0#0: bytes = (substring3 arc4_item%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%7#0: bool = (== item0%0%0#0 i#5)
        (assert tmp%7#0) // expected 1st element to be correct
        let item1%1%0#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%8#0: uint64 = (len item1%1%0#0)
        let tmp%9#0: bool = (== tmp%8#0 i#4)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L177
        let (popped%0#0: bytes, arr#4: (uint64,bytes)[]) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let tmp%10#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 0u)
        let has_next%2#0: uint64 = (- tmp%10#0 1u) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 2u)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2%0#0: uint64 = (extract_uint64 arc4_item%2#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bytes = (bzero 0u)
        let tmp%14#0: bool = (== item1%2%0#0 tmp%13#0)
        let tmp%15#0: bool = (&& tmp%12#0 tmp%14#0)
        (assert tmp%15#0) // expected 1, 0
        let item_offset_offset%3#0: uint64 = (* has_next%2#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%3#0)
        let next_index%3#0: uint64 = (+ has_next%2#0 1u)
        let has_next%3#0: uint64 = (- tmp%10#0 next_index%3#0) // on error: Index access is out of bounds
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%2#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%3#0 end_offset%3#0)
        let item0%3%0#0: uint64 = (extract_uint64 arc4_item%3#0 0u)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%18#0: bool = (== item0%3%0#0 4u)
        let tmp%19#0: bytes = (bzero 3u)
        let tmp%20#0: bool = (== item1%3%0#0 tmp%19#0)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        (assert tmp%21#0) // expected 4, 3
        (app_global_put "e" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L187
        let arr#0: (uint64,bytes)[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L192
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L193
        let i#2: uint64 = (+ i#1 1u)
        let tmp%3#0: bytes = test_cases.array.immutable.times(i#1)
        let val_as_bytes%0#0: bytes[8] = (itob i#2)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 0x000a)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let result%1#0: bytes = (concat 0x0002 encoded_tuple_buffer%3#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let arr#2: (uint64,bytes)[] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
        goto block@1
    block@4: // after_for_L192
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L196
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L197
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let i#5: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- tmp%4#0 i#5) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* i#5 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0%0#0: uint64 = (extract_uint64 arc4_item%0#0 0u)
        let item_start_offset%0#0: uint64 = (extract_uint16 arc4_item%0#0 8u)
        let item_end_offset%0#0: uint64 = (len arc4_item%0#0)
        let item1%0#0: bytes = (substring3 arc4_item%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let tmp%7#0: bool = (== item0%0%0#0 i#5)
        (assert tmp%7#0) // expected 1st element to be correct
        let item1%1%0#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%8#0: bytes = test_cases.array.immutable.times(i#4)
        let tmp%9#0: bool = (== item1%1%0#0 tmp%8#0)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L196
        let (popped%0#0: bytes, arr#4: (uint64,bytes)[]) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let tmp%10#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 0u)
        let has_next%2#0: uint64 = (- tmp%10#0 1u) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 2u)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2%0#0: uint64 = (extract_uint64 arc4_item%2#0 0u)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bool = (== item1%2%0#0 "")
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // expected 1, 0
        let item_offset_offset%3#0: uint64 = (* has_next%2#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%3#0)
        let next_index%3#0: uint64 = (+ has_next%2#0 1u)
        let has_next%3#0: uint64 = (- tmp%10#0 next_index%3#0) // on error: Index access is out of bounds
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%2#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%3#0 end_offset%3#0)
        let item0%3%0#0: uint64 = (extract_uint64 arc4_item%3#0 0u)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%17#0: bool = (== item0%3%0#0 4u)
        let tmp%18#0: bool = (== item1%3%0#0 "   ")
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // expected 4, 3
        (app_global_put "f" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: uint64[]) -> void:
    block@0: // L206
        (log arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: uint64[]) -> void:
    block@0: // L210
        let encoded_tuple_buffer%2#0: bytes = (concat 0x0002 arr#0)
        let event%0#0: bytes = (concat method "emit_test(uint64[])" encoded_tuple_buffer%2#0)
        (log event%0#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: uint64[][]) -> uint64[]:
    block@0: // L214
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L219
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@6)
        let arr#2: uint64[][] = φ(arr#0 <- block@0, arr#3 <- block@6)
        let continue_looping%0#0: bool = (< i#1 arr_to_add#0)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L220
        let extra_arr#0: uint64[] = 0x0000
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L221
        let j#1: uint64 = φ(j#0 <- block@2, j#2 <- block@4)
        let extra_arr#1: uint64[] = φ(extra_arr#0 <- block@2, extra_arr#2 <- block@4)
        let continue_looping%1#0: bool = (< j#1 i#1)
        goto continue_looping%1#0 ? block@4 : block@6
    block@4: // for_body_L222
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) extra_arr#1)
        let array%sub_item%0#1: bytes[8] = (itob j#1)
        let array%encoded%0#1: uint64[] = array%sub_item%0#1
        let array%data%0#1: uint64[] = array%sub_item%0#1
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 array%sub_item%0#1)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let extra_arr#2: uint64[] = (concat len_16_bit%0#0 concatenated%0#0)
        let j#2: uint64 = (+ j#1 1u)
        goto block@3
    block@6: // after_for_L221
        let result%1#0: bytes = (concat 0x0002 extra_arr#1)
        let l_count%0#0: uint64 = (extract_uint16 arr#2 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#2)
        let arr#3: uint64[][] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, 1u, result%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@8: // after_for_L219
        let totals#0: uint64[] = 0x0000
        let array_length%0#0: uint64 = (extract_uint16 arr#2 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L227
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@8, item_index_internal%0#2 <- block@16)
        let totals#1: uint64[] = φ(totals#0 <- block@8, totals#2 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L228
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#2)
        let item_offset_offset%0#0: uint64 = (* item_index_internal%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 8u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let inner_arr#0: uint64[] = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) totals#1)
        let total#0: uint64 = 0u
        let array_length%0#1: uint64 = (extract_uint16 inner_arr#0 0u)
        let item_index_internal%0#3: uint64 = 0u
        goto block@14
    block@14: // for_header_L426
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@10, item_index_internal%0#5 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@10, total#2 <- block@15)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 array_length%0#1)
        goto continue_looping%0#1 ? block@15 : block@16
    block@15: // for_body_L427
        let array_head_and_tail%0#1: bytes = ((extract 2 0) inner_arr#0)
        let item_offset%0#1: uint64 = (* item_index_internal%0#4 8u)
        let i#3: uint64 = (extract_uint64 array_head_and_tail%0#1 item_offset%0#1)
        let total#2: uint64 = (+ total#1 i#3)
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@14
    block@16: // after_for_L426
        let array%sub_item%1#1: bytes[8] = (itob total#1)
        let array%encoded%1#1: uint64[] = array%sub_item%1#1
        let array%data%1#1: uint64[] = array%sub_item%1#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 array%sub_item%1#1)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let totals#2: uint64[] = (concat len_16_bit%1#0 concatenated%1#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@9
    block@12: // after_for_L227
        return totals#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L232
        let arr2#0: (bool,bool)[] = 0x0000
        let arr7#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = 0x0000
        let arr8#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = 0x0000
        let arr9#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = 0x0000
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L243
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr2#1: (bool,bool)[] = φ(arr2#0 <- block@0, arr2#2 <- block@2)
        let arr7#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr7#0 <- block@0, arr7#2 <- block@2)
        let arr8#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr8#0 <- block@0, arr8#2 <- block@2)
        let arr9#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr9#0 <- block@0, arr9#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L244
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr2#1)
        let tmp%8#0: bool = (! i#1)
        let tmp%9#0: bool = (== i#1 1u)
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%8#0)
        let array%sub_item%0#1: (bool,bool)[] = (setbit array%encoded_bit%0#1 1u tmp%9#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 array%sub_item%0#1)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr2#2: (bool,bool)[] = (concat len_16_bit%0#0 concatenated%0#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr7#1)
        let tmp%12#0: bool = (== i#1 2u)
        let tmp%13#0: bool = (== i#1 3u)
        let tmp%14#0: bool = (== i#1 4u)
        let tmp%15#0: bool = (== i#1 5u)
        let tmp%16#0: bool = (== i#1 6u)
        let i#2: uint64 = (+ i#1 1u)
        let array%sub_item%1#1: bytes[8] = (itob i#1)
        let array%encoded%2#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%1#1 array%encoded_bit%0#1)
        let array%sub_item%2#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%encoded%2#1 65u tmp%9#0)
        let array%sub_item%3#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%2#1 66u tmp%12#0)
        let array%sub_item%4#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%3#1 67u tmp%13#0)
        let array%sub_item%5#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%4#1 68u tmp%14#0)
        let array%sub_item%6#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%5#1 69u tmp%15#0)
        let array%sub_item%7#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%6#1 70u tmp%16#0)
        let array%sub_item%8#1: bytes[8] = (itob i#2)
        let array%encoded%3#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%7#1 array%sub_item%8#1)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 array%encoded%3#1)
        let byte_len%0#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%0#0 17u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr7#2: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat len_16_bit%1#0 concatenated%1#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) arr8#1)
        let tmp%25#0: bool = (== i#1 7u)
        let array%sub_item%16#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (setbit array%sub_item%7#1 71u tmp%25#0)
        let array%encoded%6#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%16#1 array%sub_item%8#1)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 array%encoded%6#1)
        let byte_len%1#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%1#0 17u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr8#2: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat len_16_bit%2#0 concatenated%2#0)
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) arr9#1)
        let tmp%35#0: bool = (== i#1 8u)
        let array%sub_item%26#1: bytes = (setbit 0x00 0u tmp%35#0)
        let array%encoded%9#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%sub_item%16#1 array%sub_item%26#1)
        let array%encoded%10#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat array%encoded%9#1 array%sub_item%8#1)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%3#0 array%encoded%10#1)
        let byte_len%2#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%2#0 18u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr9#2: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = (concat len_16_bit%3#0 concatenated%3#0)
        goto block@1
    block@4: // after_for_L243
        let tmp%37#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%38#0: bool = (== tmp%37#0 5u)
        (assert tmp%38#0)
        let tmp%39#0: uint64 = (extract_uint16 arr7#1 0u)
        let tmp%40#0: bool = (== tmp%39#0 5u)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = (extract_uint16 arr8#1 0u)
        let tmp%42#0: bool = (== tmp%41#0 5u)
        (assert tmp%42#0)
        let tmp%43#0: uint64 = (extract_uint16 arr9#1 0u)
        let tmp%44#0: bool = (== tmp%43#0 5u)
        (assert tmp%44#0)
        (app_global_put "bool2" arr2#1)
        (app_global_put "bool7" arr7#1)
        (app_global_put "bool8" arr8#1)
        (app_global_put "bool9" arr9#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: uint64[], arr2: bool[], arr3: (uint64,bool,bool)[], arr4: (uint64,bytes)[]) -> <uint64, uint64, uint64, uint64>:
    block@0: // L297
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr1#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L306
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let sum1#1: uint64 = φ(sum1#0 <- block@0, sum1#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L307
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr1#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let i#0: uint64 = (extract_uint64 array_head_and_tail%0#0 item_offset%0#0)
        let sum1#2: uint64 = (+ sum1#1 i#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L306
        let array_length%1#0: uint64 = (extract_uint16 arr2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L308
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@8)
        let sum2#1: uint64 = φ(sum2#0 <- block@4, sum2#4 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L309
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr2#0)
        let is_true%0#0: uint64 = (getbit array_head_and_tail%1#0 item_index_internal%1#1)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let b#0: bool = (getbit encoded_bool%0#0 0u)
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L310
        let sum2#2: uint64 = (+ sum2#1 1u)
        goto block@8
    block@8: // after_if_else_L309
        let sum2#4: uint64 = φ(sum2#1 <- block@6, sum2#2 <- block@7)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@10: // after_for_L308
        let array_length%2#0: uint64 = (extract_uint16 arr3#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L311
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@10, item_index_internal%2#2 <- block@16)
        let sum3#1: uint64 = φ(sum3#0 <- block@10, sum3#9 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L312
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr3#0)
        let item_offset%1#0: uint64 = (* item_index_internal%2#1 9u)
        let value_at_index%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%1#0 9u) // on error: Index access is out of bounds
        let tup.foo#0: uint64 = (extract_uint64 value_at_index%2#0 0u)
        let is_true%1#0: uint64 = (getbit value_at_index%2#0 64u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let tup.bar#0: bool = (getbit encoded_bool%1#0 0u)
        let is_true%2#0: uint64 = (getbit value_at_index%2#0 65u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let tup.baz#0: bool = (getbit encoded_bool%2#0 0u)
        let sum3#2: uint64 = (+ sum3#1 tup.foo#0)
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L314
        let sum3#3: uint64 = (+ sum3#2 1u)
        goto block@14
    block@14: // after_if_else_L313
        let sum3#4: uint64 = φ(sum3#2 <- block@12, sum3#3 <- block@13)
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L316
        let sum3#5: uint64 = (+ sum3#4 1u)
        goto block@16
    block@16: // after_if_else_L315
        let sum3#9: uint64 = φ(sum3#4 <- block@14, sum3#5 <- block@15)
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@11
    block@18: // after_for_L311
        let array_length%3#0: uint64 = (extract_uint16 arr4#0 0u)
        let item_index_internal%3#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L317
        let idx#0: uint64 = φ(item_index_internal%3#0 <- block@18, next_index%0#0 <- block@20)
        let sum4#1: uint64 = φ(sum4#0 <- block@18, sum4#3 <- block@20)
        let continue_looping%3#0: bool = (< idx#0 array_length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L318
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr4#0)
        let item_offset_offset%0#0: uint64 = (* idx#0 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%0#0)
        let next_index%0#0: uint64 = (+ idx#0 1u)
        let has_next%0#0: uint64 = (- array_length%3#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let value_at_index%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%2#0 end_offset%0#0)
        let dyn_tup.foo#0: uint64 = (extract_uint64 value_at_index%3#0 0u)
        let item_start_offset%0#0: uint64 = (extract_uint16 value_at_index%3#0 8u)
        let item_end_offset%0#0: uint64 = (len value_at_index%3#0)
        let item1%1#0: bytes = (substring3 value_at_index%3#0 item_start_offset%0#0 item_end_offset%0#0)
        let dyn_tup.bar#0: bytes = ((extract 2 0) item1%1#0)
        let sum4#2: uint64 = (+ sum4#1 dyn_tup.foo#0)
        let tmp%0#0: uint64 = (len dyn_tup.bar#0)
        let sum4#3: uint64 = (+ sum4#2 tmp%0#0)
        let tmp%2#0: bool = (== tmp%0#0 idx#0)
        (assert tmp%2#0) // expected string length to match index
        goto block@19
    block@22: // after_for_L317
        return sum1#1 sum2#1 sum3#1 sum4#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> uint64[]:
    block@0: // L324
        let array%sub_item%0#1: bytes[8] = (itob 1u)
        let array%sub_item%1#1: bytes[8] = (itob 2u)
        let array%data%1#1: uint64[] = 0x00000000000000010000000000000002
        let array%sub_item%2#1: bytes[8] = (itob 3u)
        let array%data%2#1: uint64[] = 0x000000000000000100000000000000020000000000000003
        let byte_len%0#0: uint64 = 24u
        let len_%0#0: uint64 = 3u
        let len_16_bit%0#0: bytes = 0x0003
        let arr#0: uint64[] = 0x0003000000000000000100000000000000020000000000000003
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L327
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: uint64[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L328
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#1)
        let array%sub_item%3#1: bytes[8] = (itob i#1)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 array%sub_item%3#1)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: uint64[] = (concat len_16_bit%1#0 concatenated%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L327
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bool[]:
    block@0: // L331
        let arr#0: bool[] = _puya_lib.arc4.dynamic_array_concat_bits(0x0000, 0x8000800080, 5u, 8u)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L334
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: bool[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L335
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let arr#2: bool[] = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, encoded_bool%5#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L334
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> (uint64,bool,bool)[]:
    block@0: // L338
        let array%sub_item%0#1: bytes[8] = (itob 0u)
        let array%encoded%0#1: (uint64,bool,bool)[] = array%sub_item%0#1
        let array%encoded_bit%0#1: bytes = 0x80
        let array%encoded%1#1: (uint64,bool,bool)[] = 0x000000000000000080
        let array%sub_item%1#1: (uint64,bool,bool)[] = 0x000000000000000080
        let array%data%0#1: (uint64,bool,bool)[] = 0x000000000000000080
        let byte_len%0#0: uint64 = 9u
        let len_%0#0: uint64 = 1u
        let as_bytes%0#0: bytes[8] = (itob 1u)
        let len_16_bit%0#0: bytes = 0x0001
        let arr#0: (uint64,bool,bool)[] = 0x0001000000000000000080
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L341
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,bool,bool)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L342
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#1)
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let array%sub_item%2#1: bytes[8] = (itob i#1)
        let array%encoded%2#1: (uint64,bool,bool)[] = array%sub_item%2#1
        let array%encoded_bit%1#1: bytes = (select 0x00 0x80 tmp%1#0)
        let array%encoded%3#1: (uint64,bool,bool)[] = (concat array%sub_item%2#1 array%encoded_bit%1#1)
        let array%sub_item%3#1: (uint64,bool,bool)[] = (setbit array%encoded%3#1 65u tmp%3#0)
        let array%data%1#1: (uint64,bool,bool)[] = array%sub_item%3#1
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 array%sub_item%3#1)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 9u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: (uint64,bool,bool)[] = (concat len_16_bit%1#0 concatenated%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L341
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> (uint64,bytes)[]:
    block@0: // L345
        let arr#0: (uint64,bytes)[] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(0u, 0x, 1u, 0x00020000000000000000000a000548656c6c6f)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L348
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L349
        let tmp%0#0: bytes = test_cases.array.immutable.times(i#1)
        let val_as_bytes%1#0: bytes[8] = (itob i#1)
        let length%1#0: uint64 = (len tmp%0#0)
        let as_bytes%3#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%0#0)
        let encoded_tuple_buffer%6#0: bytes = (concat val_as_bytes%1#0 0x000a)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        let result%3#0: bytes = (concat 0x0002 encoded_tuple_buffer%7#0)
        let l_count%1#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let arr#2: (uint64,bytes)[] = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, 1u, result%3#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L348
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: (uint64,bool,bool)[], append: uint64) -> (uint64,bool,bool)[]:
    block@0: // L352
        let mutable#0: (uint64,bool,bool)[]* = new()
        let expr_value_trimmed%0#0: (uint64,bool,bool)[] = ((extract 2 0) arr#0)
        let array%array_contents%0#1: bytes = expr_value_trimmed%0#0
        write(mutable#0, expr_value_trimmed%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L358
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L359
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let array%sub_item%0#1: bytes[8] = (itob i#1)
        let array%encoded%0#1: (uint64,bool,bool)[] = array%sub_item%0#1
        let array%encoded_bit%0#1: bytes = (select 0x00 0x80 tmp%1#0)
        let array%encoded%1#1: (uint64,bool,bool)[] = (concat array%sub_item%0#1 array%encoded_bit%0#1)
        let array%sub_item%1#1: (uint64,bool,bool)[] = (setbit array%encoded%1#1 65u tmp%3#0)
        let array%data%0#1: (uint64,bool,bool)[] = array%sub_item%1#1
        let slot_contents%1#0: (uint64,bool,bool)[] = read(mutable#0)
        let array%array_contents%1#1: bytes = (concat slot_contents%1#0 array%sub_item%1#1) // on error: max array length exceeded
        write(mutable#0, array%array_contents%1#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L358
        let slot_contents%2#0: (uint64,bool,bool)[] = read(mutable#0)
        let byte_len%0#0: uint64 = (len slot_contents%2#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 slot_contents%2#0)
        return concat_result%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: bytes[16]) -> bytes[8][]:
    block@0: // L362
        let array%encoded%0#1: bytes[8][] = 0x0000000000000001
        let array%data%0#1: bytes[8][] = 0x0000000000000001
        let array%encoded%1#1: bytes[8][] = 0x0000000000000002
        let array%data%1#1: bytes[8][] = 0x00000000000000010000000000000002
        let byte_len%0#0: uint64 = 16u
        let len_%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_16_bit%0#0: bytes = 0x0002
        let prefix#0: bytes[8][] = 0x000200000000000000010000000000000002
        let expr_value_trimmed%1#0: bytes = 0x00000000000000010000000000000002
        let array%encoded%2#1: bytes[8][] = arg#0
        let array%data%2#1: bytes[8][] = arg#0
        let concatenated%1#0: bytes = (concat 0x00000000000000010000000000000002 arg#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: bytes[8][] = (concat len_16_bit%1#0 concatenated%1#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: bytes[8], arg.1: bytes[8]) -> bytes[8][]:
    block@0: // L370
        let array%encoded%0#1: bytes[8][] = 0x0000000000000001
        let array%data%0#1: bytes[8][] = 0x0000000000000001
        let array%encoded%1#1: bytes[8][] = 0x0000000000000002
        let array%data%1#1: bytes[8][] = 0x00000000000000010000000000000002
        let byte_len%0#0: uint64 = 16u
        let len_%0#0: uint64 = 2u
        let as_bytes%0#0: bytes[8] = (itob 2u)
        let len_16_bit%0#0: bytes = 0x0002
        let prefix#0: bytes[8][] = 0x000200000000000000010000000000000002
        let expr_value_trimmed%1#0: bytes = 0x00000000000000010000000000000002
        let array%encoded%2#1: bytes[8][] = arg.0#0
        let array%data%2#1: bytes[8][] = arg.0#0
        let array%encoded%3#1: bytes[8][] = arg.1#0
        let array%data%3#1: bytes[8][] = (concat arg.0#0 arg.1#0)
        let concatenated%1#0: bytes = (concat 0x00000000000000010000000000000002 array%data%3#1)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: bytes[8][] = (concat len_16_bit%1#0 concatenated%1#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: bytes) -> bytes[]:
    block@0: // L378
        let prefix#0: bytes[] = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x000161000162, 2u)
        let total_length%0#0: uint64 = (len arg#0)
        let data%2#0: bytes = (substring3 arg#0 4u total_length%0#0)
        let result#0: bytes[] = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%2#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes[]:
    block@0: // L386
        let prefix#0: bytes[] = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x0000, 0x000161000162, 2u)
        let data%3#0: bytes = (concat arg.0#0 arg.1#0)
        let result#0: bytes[] = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%3#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: (uint64,bytes)[], imm2: (uint64,bytes)[]) -> (uint64,bytes)[]:
    block@0: // L394
        let l_count%0#0: uint64 = (extract_uint16 imm1#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) imm1#0)
        let r_count%0#0: uint64 = (extract_uint16 imm2#0 0u)
        let r_head_and_tail%0#0: bytes = ((extract 2 0) imm2#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        return concat_result%0#0