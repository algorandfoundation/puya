main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@28
    block@2: // abi_routing_L81
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint64_array()void" => block@3, method "test_biguint_array()void" => block@4, method "test_bool_array(uint64)void" => block@5, method "test_fixed_size_tuple_array()void" => block@6, method "test_fixed_size_named_tuple_array()void" => block@7, method "test_dynamic_sized_tuple_array()void" => block@8, method "test_dynamic_sized_named_tuple_array()void" => block@9, method "test_implicit_conversion_log(uint64[])void" => block@10, method "test_implicit_conversion_emit(uint64[])void" => block@11, method "test_nested_array(uint64,uint64[][])uint64[]" => block@12, method "test_bit_packed_tuples()void" => block@13, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@14, method "test_uint64_return(uint64)uint64[]" => block@15, method "test_bool_return(uint64)bool[]" => block@16, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@17, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@18, method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]" => block@19, method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]" => block@20, method "test_concat_with_native_tuple((uint64,uint64))uint64[]" => block@21, method "test_dynamic_concat_with_arc4_tuple((string,string))string[]" => block@22, method "test_dynamic_concat_with_native_tuple((string,string))string[]" => block@23, method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]" => block@24, method "test_immutable_arc4((uint64,uint64)[])(uint64,uint64)[]" => block@25, * => block@32}
    block@3: // test_uint64_array_route_L82
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@33
    block@4: // test_biguint_array_route_L118
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_biguint_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@33
    block@5: // test_bool_array_route_L143
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%15#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%15#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@33
    block@6: // test_fixed_size_tuple_array_route_L167
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@33
    block@7: // test_fixed_size_named_tuple_array_route_L185
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@33
    block@8: // test_dynamic_sized_tuple_array_route_L200
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@33
    block@9: // test_dynamic_sized_named_tuple_array_route_L219
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@33
    block@10: // test_implicit_conversion_log_route_L238
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(reinterpret_Encoded(len+uint64[])%0#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@33
    block@11: // test_implicit_conversion_emit_route_L242
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%1#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(reinterpret_Encoded(len+uint64[])%1#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8: bool = 1u
        goto block@33
    block@12: // test_nested_array_route_L246
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%44#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+len+uint64[][])%0#0: Encoded(len+len+uint64[][]) = (txna ApplicationArgs 2)
        let tmp%45#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_nested_array(tmp%44#0, reinterpret_Encoded(len+len+uint64[][])%0#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9: bool = 1u
        goto block@33
    block@13: // test_bit_packed_tuples_route_L264
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10: bool = 1u
        goto block@33
    block@14: // sum_uints_and_lengths_and_trues_route_L329
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_Encoded(len+uint64[])%2#0: Encoded(len+uint64[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+bool1[])%0#0: Encoded(len+bool1[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 3)
        let reinterpret_Encoded(len+(uint64,len+utf8[])[])%0#0: Encoded(len+(uint64,len+utf8[])[]) = (txna ApplicationArgs 4)
        let (tmp%55#0: uint64, tmp%56#0: uint64, tmp%57#0: uint64, tmp%58#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(reinterpret_Encoded(len+uint64[])%2#0, reinterpret_Encoded(len+bool1[])%0#0, reinterpret_Encoded(len+(uint64,bool1,bool1)[])%0#0, reinterpret_Encoded(len+(uint64,len+utf8[])[])%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%55#0)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%56#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob tmp%57#0)
        let encoded%2#0: Encoded((uint64,uint64,uint64)) = (concat encoded%1#0 val_as_bytes%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob tmp%58#0)
        let encoded%3#0: Encoded((uint64,uint64,uint64,uint64)) = (concat encoded%2#0 val_as_bytes%3#0)
        let tmp%59#0: bytes = (concat 0x151f7c75 encoded%3#0)
        (log tmp%59#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11: bool = 1u
        goto block@33
    block@15: // test_uint64_return_route_L356
        let tmp%60#0: uint64 = (txn OnCompletion)
        let tmp%61#0: bool = (! tmp%60#0)
        (assert tmp%61#0) // OnCompletion is not NoOp
        let tmp%62#0: uint64 = (txn ApplicationID)
        (assert tmp%62#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%64#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let tmp%65#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%64#0)
        let tmp%66#0: bytes = (concat 0x151f7c75 tmp%65#0)
        (log tmp%66#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12: bool = 1u
        goto block@33
    block@16: // test_bool_return_route_L363
        let tmp%67#0: uint64 = (txn OnCompletion)
        let tmp%68#0: bool = (! tmp%67#0)
        (assert tmp%68#0) // OnCompletion is not NoOp
        let tmp%69#0: uint64 = (txn ApplicationID)
        (assert tmp%69#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%71#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%72#0: Encoded(len+bool1[]) = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%71#0)
        let tmp%73#0: bytes = (concat 0x151f7c75 tmp%72#0)
        (log tmp%73#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13: bool = 1u
        goto block@33
    block@17: // test_tuple_return_route_L370
        let tmp%74#0: uint64 = (txn OnCompletion)
        let tmp%75#0: bool = (! tmp%74#0)
        (assert tmp%75#0) // OnCompletion is not NoOp
        let tmp%76#0: uint64 = (txn ApplicationID)
        (assert tmp%76#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%78#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%79#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%78#0)
        let tmp%80#0: bytes = (concat 0x151f7c75 tmp%79#0)
        (log tmp%80#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14: bool = 1u
        goto block@33
    block@18: // test_dynamic_tuple_return_route_L377
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%85#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let tmp%86#0: Encoded(len+(uint64,len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%85#0)
        let tmp%87#0: bytes = (concat 0x151f7c75 tmp%86#0)
        (log tmp%87#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15: bool = 1u
        goto block@33
    block@19: // test_convert_to_array_and_back_route_L384
        let tmp%88#0: uint64 = (txn OnCompletion)
        let tmp%89#0: bool = (! tmp%88#0)
        (assert tmp%89#0) // OnCompletion is not NoOp
        let tmp%90#0: uint64 = (txn ApplicationID)
        (assert tmp%90#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,bool1,bool1)[])%1#0: Encoded(len+(uint64,bool1,bool1)[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%92#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let tmp%93#0: Encoded(len+(uint64,bool1,bool1)[]) = test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(reinterpret_Encoded(len+(uint64,bool1,bool1)[])%1#0, tmp%92#0)
        let tmp%94#0: bytes = (concat 0x151f7c75 tmp%93#0)
        (log tmp%94#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16: bool = 1u
        goto block@33
    block@20: // test_concat_with_arc4_tuple_route_L394
        let tmp%95#0: uint64 = (txn OnCompletion)
        let tmp%96#0: bool = (! tmp%95#0)
        (assert tmp%96#0) // OnCompletion is not NoOp
        let tmp%97#0: uint64 = (txn ApplicationID)
        (assert tmp%97#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%0#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let tmp%99#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(reinterpret_Encoded((uint64,uint64))%0#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 tmp%99#0)
        (log tmp%100#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17: bool = 1u
        goto block@33
    block@21: // test_concat_with_native_tuple_route_L402
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let reinterpret_Encoded((uint64,uint64))%1#0: Encoded((uint64,uint64)) = (txna ApplicationArgs 1)
        let extract%0#0: bytes = ((extract 0 8) reinterpret_Encoded((uint64,uint64))%1#0)
        let extract%1#0: bytes = ((extract 8 8) reinterpret_Encoded((uint64,uint64))%1#0)
        let tmp%105#0: Encoded(len+uint64[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(extract%0#0, extract%1#0)
        let tmp%106#0: bytes = (concat 0x151f7c75 tmp%105#0)
        (log tmp%106#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18: bool = 1u
        goto block@33
    block@22: // test_dynamic_concat_with_arc4_tuple_route_L410
        let tmp%107#0: uint64 = (txn OnCompletion)
        let tmp%108#0: bool = (! tmp%107#0)
        (assert tmp%108#0) // OnCompletion is not NoOp
        let tmp%109#0: uint64 = (txn ApplicationID)
        (assert tmp%109#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[],len+utf8[]))%0#0: Encoded((len+utf8[],len+utf8[])) = (txna ApplicationArgs 1)
        let tmp%111#0: Encoded(len+len+utf8[][]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(reinterpret_Encoded((len+utf8[],len+utf8[]))%0#0)
        let tmp%112#0: bytes = (concat 0x151f7c75 tmp%111#0)
        (log tmp%112#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19: bool = 1u
        goto block@33
    block@23: // test_dynamic_concat_with_native_tuple_route_L418
        let tmp%113#0: uint64 = (txn OnCompletion)
        let tmp%114#0: bool = (! tmp%113#0)
        (assert tmp%114#0) // OnCompletion is not NoOp
        let tmp%115#0: uint64 = (txn ApplicationID)
        (assert tmp%115#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0: Encoded((len+utf8[],len+utf8[])) = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0 0u)
        let extract_uint16%1#0: uint64 = (extract_uint16 reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0 2u)
        let substring3%0#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0 extract_uint16%0#0 extract_uint16%1#0)
        let len%0#0: uint64 = (len reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0)
        let substring3%1#0: bytes = (substring3 reinterpret_Encoded((len+utf8[],len+utf8[]))%1#0 extract_uint16%1#0 len%0#0)
        let tmp%117#0: Encoded(len+len+utf8[][]) = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(substring3%0#0, substring3%1#0)
        let tmp%118#0: bytes = (concat 0x151f7c75 tmp%117#0)
        (log tmp%118#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20: bool = 1u
        goto block@33
    block@24: // test_concat_immutable_dynamic_route_L426
        let tmp%119#0: uint64 = (txn OnCompletion)
        let tmp%120#0: bool = (! tmp%119#0)
        (assert tmp%120#0) // OnCompletion is not NoOp
        let tmp%121#0: uint64 = (txn ApplicationID)
        (assert tmp%121#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,len+utf8[])[])%1#0: Encoded(len+(uint64,len+utf8[])[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+(uint64,len+utf8[])[])%2#0: Encoded(len+(uint64,len+utf8[])[]) = (txna ApplicationArgs 2)
        let tmp%123#0: Encoded(len+(uint64,len+utf8[])[]) = test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(reinterpret_Encoded(len+(uint64,len+utf8[])[])%1#0, reinterpret_Encoded(len+(uint64,len+utf8[])[])%2#0)
        let tmp%124#0: bytes = (concat 0x151f7c75 tmp%123#0)
        (log tmp%124#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21: bool = 1u
        goto block@33
    block@25: // test_immutable_arc4_route_L432
        let tmp%125#0: uint64 = (txn OnCompletion)
        let tmp%126#0: bool = (! tmp%125#0)
        (assert tmp%126#0) // OnCompletion is not NoOp
        let tmp%127#0: uint64 = (txn ApplicationID)
        (assert tmp%127#0) // can only call when not creating
        let reinterpret_Encoded(len+(uint64,uint64)[])%0#0: Encoded(len+(uint64,uint64)[]) = (txna ApplicationArgs 1)
        let tmp%129#0: Encoded(len+(uint64,uint64)[]) = test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(reinterpret_Encoded(len+(uint64,uint64)[])%0#0)
        let tmp%130#0: bytes = (concat 0x151f7c75 tmp%129#0)
        (log tmp%130#0)
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22: bool = 1u
        goto block@33
    block@28: // bare_routing_L81
        let tmp%131#0: uint64 = (txn OnCompletion)
        goto tmp%131#0 ? block@32 : block@29
    block@29: // __algopy_default_create_L1
        let tmp%132#0: uint64 = (txn ApplicationID)
        let tmp%133#0: bool = (! tmp%132#0)
        (assert tmp%133#0) // can only call when creating
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#23: bool = 1u
        goto block@33
    block@32: // after_if_else_L81
        let test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#24: bool = 0u
        goto block@33
    block@33: // after_inlined_test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#0 <- block@3, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#1 <- block@4, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#2 <- block@5, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#3 <- block@6, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#4 <- block@7, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#5 <- block@8, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#6 <- block@9, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#7 <- block@10, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#8 <- block@11, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#9 <- block@12, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#10 <- block@13, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#11 <- block@14, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#12 <- block@15, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#13 <- block@16, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#14 <- block@17, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#15 <- block@18, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#16 <- block@19, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#17 <- block@20, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#18 <- block@21, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#19 <- block@22, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#20 <- block@23, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#21 <- block@24, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#22 <- block@25, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#23 <- block@29, test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__%0#24 <- block@32)
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#0: bytes = (itob length_minus_1#0)
        let tmp%3#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%3#0)
        let tmp%5#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%5#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%5#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%5#0)
        let new_head#0: bytes = 0x
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 popped_header_offset#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%10#0: bytes = (itob item_offset#1)
        let tmp%11#0: bytes = ((extract 6 2) tmp%10#0)
        let new_head#2: bytes = (concat new_head#1 tmp%11#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%13#0: bytes = (itob length_minus_1#0)
        let tmp%14#0: bytes = ((extract 6 2) tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%14#0 new_head#1)
        let tmp%16#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%17#0: bytes = (substring3 head_and_tail#0 tmp%16#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%15#0 tmp%17#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%2#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%5#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%5#0 8u)
        let tmp%7#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%7#0 8u)
        let tmp%9#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%9#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%10#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%11#0: bytes = (bzero tmp%10#0)
        let result#1: bytes = (concat result#0 tmp%11#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%15#0: bool = (< write_offset#1 write_end#0)
        goto tmp%15#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%16#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%16#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%2#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%2#0 2u)
        let tmp%4#0: bytes = (itob new_length#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%7#0: uint64 = (* new_items_count#0 2u)
        let tmp%8#0: bytes = (bzero tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: uint64 = (len array#0)
        let tmp%11#0: bytes = (substring3 array#0 header_end#0 tmp%10#0)
        let tmp%12#0: bytes = (concat tmp%9#0 tmp%11#0)
        let array_head_and_tail#0: bytes = (concat tmp%12#0 new_items_bytes#0)
        let tail_offset#0: uint64 = (* new_length#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tail_offset#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        let tmp%15#0: bytes = (concat tmp%5#0 array_head_and_tail#1)
        return tmp%15#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%1#0: uint64 = (* array_items_count#0 2u)
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%3#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%4#0: bytes = (itob tmp%3#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let new_head#2: bytes = (concat new_head#1 tmp%5#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@6)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@6)
        let continue_looping%1#0: bool = (< head_offset#4 item_offset_adjustment#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%10#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%11#0: bytes = (itob tmp%10#0)
        let tmp%12#0: bytes = ((extract 6 2) tmp%11#0)
        let new_head#4: bytes = (concat new_head#3 tmp%12#0)
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%14#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%15#0: bytes = (itob tmp%14#0)
        let tmp%16#0: bytes = ((extract 6 2) tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 new_head#3)
        let tmp%20#0: bytes = (substring3 array_head_and_tail#0 tmp%1#0 item_offset_adjustment#2)
        let tmp%21#0: bytes = (concat tmp%17#0 tmp%20#0)
        let tmp%23#0: uint64 = (len new_head_and_tail#0)
        let tmp%24#0: bytes = (substring3 new_head_and_tail#0 item_offset_adjustment#0 tmp%23#0)
        let tmp%25#0: bytes = (concat tmp%21#0 tmp%24#0)
        return tmp%25#0

subroutine test_cases.array.immutable.times(n: uint64) -> string:
    block@0: // L439
        let result#0: string = ""
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L442
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@2)
        let result#1: string = φ(result#0 <- block@0, result#2 <- block@2)
        let continue_looping%0#0: bool = (< _i#1 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L443
        let result#2: string = (concat result#1 " ")
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L442
        return result#1

subroutine test_cases.array.immutable.add_x(arr: Encoded(len+uint64[]), x: uint64) -> Encoded(len+uint64[]):
    block@0: // L447
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L449
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+uint64[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L450
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#1 val_as_bytes%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L449
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L82
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let length%1#0: uint64 = 0x0001000000000000002a.length
        let tmp%1#0: bool = (== length%1#0 1u)
        (assert tmp%1#0)
        let length%2#0: uint64 = 0x0001000000000000002a.length
        let tmp%2#0: uint64 = (- length%2#0 1u)
        let bytes_offset%0#0: uint64 = (* tmp%2#0 8u)
        let tmp%3#0: uint64 = (extract_uint64 0x000000000000002a bytes_offset%0#0)
        let tmp%4#0: bool = (== tmp%3#0 42u)
        (assert tmp%4#0)
        let arr#2: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(0x0001000000000000002a, 5u)
        let length%3#0: uint64 = arr#2.length
        let tmp%6#0: bool = (== length%3#0 6u)
        (assert tmp%6#0)
        let length%4#0: uint64 = arr#2.length
        let tmp%7#0: uint64 = (- length%4#0 1u)
        let array_trimmed%1#0: bytes = ((extract 2 0) arr#2)
        let bytes_offset%1#0: uint64 = (* tmp%7#0 8u)
        let tmp%8#0: uint64 = (extract_uint64 array_trimmed%1#0 bytes_offset%1#0)
        let tmp%9#0: bool = (== tmp%8#0 4u)
        (assert tmp%9#0)
        let concat%1#0: Encoded(len+uint64[]) = (concat arr#2 0x000000000000002b) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%1#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#3: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let length%5#0: uint64 = arr#3.length
        let tmp%10#0: bool = (== length%5#0 7u)
        (assert tmp%10#0)
        let length%6#0: uint64 = arr#3.length
        let tmp%11#0: uint64 = (- length%6#0 1u)
        let array_trimmed%2#0: bytes = ((extract 2 0) arr#3)
        let bytes_offset%2#0: uint64 = (* tmp%11#0 8u)
        let tmp%12#0: uint64 = (extract_uint64 array_trimmed%2#0 bytes_offset%2#0)
        let tmp%13#0: bool = (== tmp%12#0 43u)
        (assert tmp%13#0)
        let tmp%14#0: uint64 = (extract_uint64 arr#3 2u)
        let tmp%15#0: bool = (== tmp%14#0 42u)
        (assert tmp%15#0)
        let _i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L456
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let arr#9: Encoded(len+uint64[]) = φ(arr#3 <- block@0, arr#10 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 3u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L457
        let (tmp%0#1: bytes, arr#10: Encoded(len+uint64[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#9, 8u)
        let tmp%2#1: uint64 = decode<uint64>(tmp%0#1)
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@2
    block@4: // after_for_L456
        let length%7#0: uint64 = arr#9.length
        let tmp%17#0: bool = (== length%7#0 4u)
        (assert tmp%17#0)
        let length%8#0: uint64 = arr#9.length
        let tmp%18#0: uint64 = (- length%8#0 1u)
        let array_trimmed%4#0: bytes = ((extract 2 0) arr#9)
        let bytes_offset%4#0: uint64 = (* tmp%18#0 8u)
        let tmp%19#0: uint64 = (extract_uint64 array_trimmed%4#0 bytes_offset%4#0)
        let tmp%20#0: bool = (== tmp%19#0 2u)
        (assert tmp%20#0)
        let arr#5: Encoded(len+uint64[]) = test_cases.array.immutable.add_x(arr#9, 10u)
        let length%9#0: uint64 = arr#5.length
        let tmp%22#0: bool = (== length%9#0 14u)
        (assert tmp%22#0)
        let length%10#0: uint64 = arr#5.length
        let tmp%23#0: uint64 = (- length%10#0 1u)
        let array_trimmed%5#0: bytes = ((extract 2 0) arr#5)
        let bytes_offset%5#0: uint64 = (* tmp%23#0 8u)
        let tmp%24#0: uint64 = (extract_uint64 array_trimmed%5#0 bytes_offset%5#0)
        let tmp%25#0: bool = (== tmp%24#0 9u)
        (assert tmp%25#0)
        let concat%2#0: Encoded(len+uint64[]) = (concat arr#5 0x000000000000002c) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%2#0: uint64 = (len extract_to_end%2#0)
        let div_floor%2#0: uint64 = (/ len%2#0 8u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr#6: Encoded(len+uint64[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let length%11#0: uint64 = arr#6.length
        let tmp%26#0: bool = (== length%11#0 15u)
        (assert tmp%26#0)
        let length%12#0: uint64 = arr#6.length
        let tmp%27#0: uint64 = (- length%12#0 1u)
        let array_trimmed%6#0: bytes = ((extract 2 0) arr#6)
        let bytes_offset%6#0: uint64 = (* tmp%27#0 8u)
        let tmp%28#0: uint64 = (extract_uint64 array_trimmed%6#0 bytes_offset%6#0)
        let tmp%29#0: bool = (== tmp%28#0 44u)
        (assert tmp%29#0)
        let tmp%30#0: Encoded(uint64) = encode<uint64>(23u)
        let arr#7: Encoded(len+uint64[]) = ((replace2 18) arr#6 tmp%30#0)
        let length%13#0: uint64 = arr#7.length
        let tmp%31#0: bool = (== length%13#0 15u)
        (assert tmp%31#0)
        let tmp%32#0: uint64 = (extract_uint64 arr#7 18u)
        let tmp%33#0: bool = (== tmp%32#0 23u)
        (assert tmp%33#0)
        (app_global_put "a" arr#7)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_biguint_array() -> void:
    block@0: // L118
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (- tmp%1#0 1u)
        let tmp%3#0: biguint = (itob tmp%2#0)
        let bzero%0#0: bytes = (bzero 64u)
        let arc4_encoded%0#0: bytes[64] = (b| tmp%3#0 bzero%0#0)
        let concat%0#0: Encoded(len+uint512[]) = (concat 0x0000 arc4_encoded%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 64u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#1: Encoded(len+uint512[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let length%1#0: uint64 = arr#1.length
        let tmp%4#0: bool = (== length%1#0 1u)
        (assert tmp%4#0)
        let length%2#0: uint64 = arr#1.length
        let tmp%5#0: uint64 = (- length%2#0 1u)
        let array_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let bytes_offset%0#0: uint64 = (* tmp%5#0 64u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 64u) // on error: index access is out of bounds
        let tmp%6#0: bool = (b== encoded_element%0#0 0b)
        (assert tmp%6#0)
        let i#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L463
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#6: Encoded(len+uint512[]) = φ(arr#1 <- block@0, arr#7 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L464
        let tmp%0#1: biguint = (itob i#1)
        let arc4_encoded%0#1: bytes[64] = (b| tmp%0#1 bzero%0#0)
        let concat%0#1: Encoded(len+uint512[]) = (concat arr#6 arc4_encoded%0#1) // on error: max array length exceeded
        let extract_to_end%0#1: bytes = ((extract 2 0) concat%0#1)
        let len%0#1: uint64 = (len extract_to_end%0#1)
        let div_floor%0#1: uint64 = (/ len%0#1 64u)
        let as_bytes%0#1: bytes[8] = (itob div_floor%0#1)
        let as_u16_bytes%0#1: bytes = ((extract 6 2) as_bytes%0#1)
        let arr#7: Encoded(len+uint512[]) = ((replace2 0) concat%0#1 as_u16_bytes%0#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@2
    block@4: // after_for_L463
        let length%3#0: uint64 = arr#6.length
        let tmp%8#0: bool = (== length%3#0 6u)
        (assert tmp%8#0)
        let length%4#0: uint64 = arr#6.length
        let tmp%9#0: uint64 = (- length%4#0 1u)
        let array_trimmed%1#0: bytes = ((extract 2 0) arr#6)
        let bytes_offset%1#0: uint64 = (* tmp%9#0 64u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%1#0 bytes_offset%1#0 64u) // on error: index access is out of bounds
        let tmp%10#0: bool = (b== encoded_element%1#0 4b)
        (assert tmp%10#0)
        let tmp%11#0: uint64 = (txn NumAppArgs)
        let tmp%12#0: biguint = (itob tmp%11#0)
        let tmp%13#0: biguint = (b- 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b tmp%12#0)
        let value_len%1#0: uint64 = (len tmp%13#0)
        let len_ok%1#0: bool = (<= value_len%1#0 64u)
        (assert len_ok%1#0) // overflow
        let arc4_encoded%1#0: bytes[64] = (b| tmp%13#0 bzero%0#0)
        let concat%1#0: Encoded(len+uint512[]) = (concat arr#6 arc4_encoded%1#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%1#0)
        let div_floor%1#0: uint64 = (/ len%1#0 64u)
        let as_bytes%2#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let arr#3: Encoded(len+uint512[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let length%5#0: uint64 = arr#3.length
        let tmp%14#0: bool = (== length%5#0 7u)
        (assert tmp%14#0)
        let length%6#0: uint64 = arr#3.length
        let tmp%15#0: uint64 = (- length%6#0 1u)
        let array_trimmed%2#0: bytes = ((extract 2 0) arr#3)
        let bytes_offset%2#0: uint64 = (* tmp%15#0 64u)
        let encoded_element%2#0: bytes = (extract3 array_trimmed%2#0 bytes_offset%2#0 64u) // on error: index access is out of bounds
        let tmp%16#0: bool = (b== encoded_element%2#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084094b)
        (assert tmp%16#0)
        let encoded_element%3#0: bytes = ((extract 2 64) arr#3)
        let tmp%17#0: bool = (b== encoded_element%3#0 0b)
        (assert tmp%17#0)
        let concat%2#0: Encoded(len+uint512[]) = (concat arr#3 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%2#0: uint64 = (len extract_to_end%2#0)
        let div_floor%2#0: uint64 = (/ len%2#0 64u)
        let as_bytes%3#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%3#0)
        let arr#4: Encoded(len+uint512[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let length%7#0: uint64 = arr#4.length
        let tmp%18#0: bool = (== length%7#0 8u)
        (assert tmp%18#0)
        let length%8#0: uint64 = arr#4.length
        let tmp%19#0: uint64 = (- length%8#0 1u)
        let array_trimmed%4#0: bytes = ((extract 2 0) arr#4)
        let bytes_offset%4#0: uint64 = (* tmp%19#0 64u)
        let encoded_element%4#0: bytes = (extract3 array_trimmed%4#0 bytes_offset%4#0 64u) // on error: index access is out of bounds
        let tmp%20#0: bool = (b== encoded_element%4#0 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095b)
        (assert tmp%20#0)
        let encoded_element%5#0: bytes = ((extract 2 64) arr#4)
        let tmp%21#0: bool = (b== encoded_element%5#0 0b)
        (assert tmp%21#0)
        (box_del 0x62696775696e74)
        (box_put 0x62696775696e74 arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L143
        let arr#0: Encoded(len+bool1[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L148
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+bool1[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L149
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: bool = (== i#1 tmp%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%2#0)
        let arr#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, encoded_bool%0#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L148
        let length%1#0: uint64 = arr#1.length
        let tmp%3#0: bool = (== length%1#0 length#0)
        (assert tmp%3#0)
        goto length#0 ? block@5 : block@6
    block@5: // if_body_L154
        let length%2#0: uint64 = arr#1.length
        (assert length%2#0) // index access is out of bounds
        let array_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let is_true%0#0: bool = (getbit array_trimmed%0#0 0u)
        let tmp%5#0: bool = (getbit is_true%0#0 0u)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L153
        let tmp%7#0: bool = (> length#0 1u)
        goto tmp%7#0 ? block@7 : block@8
    block@7: // if_body_L156
        let length%3#0: uint64 = arr#1.length
        let lt%1#0: bool = (< 1u length%3#0)
        (assert lt%1#0) // index access is out of bounds
        let array_trimmed%1#0: bytes = ((extract 2 0) arr#1)
        let is_true%1#0: bool = (getbit array_trimmed%1#0 1u)
        let tmp%8#0: bool = (getbit is_true%1#0 0u)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L155
        let tmp%10#0: bool = (> length#0 2u)
        goto tmp%10#0 ? block@9 : block@10
    block@9: // if_body_L158
        let length%4#0: uint64 = arr#1.length
        let lt%2#0: bool = (< 2u length%4#0)
        (assert lt%2#0) // index access is out of bounds
        let array_trimmed%2#0: bytes = ((extract 2 0) arr#1)
        let is_true%2#0: bool = (getbit array_trimmed%2#0 2u)
        let tmp%11#0: bool = (getbit is_true%2#0 0u)
        (assert tmp%11#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L157
        let tmp%12#0: bool = (> length#0 3u)
        goto tmp%12#0 ? block@11 : block@12
    block@11: // if_body_L160
        let tmp%13#0: uint64 = (- length#0 1u)
        let length%5#0: uint64 = arr#1.length
        let lt%3#0: bool = (< tmp%13#0 length%5#0)
        (assert lt%3#0) // index access is out of bounds
        let array_trimmed%3#0: bytes = ((extract 2 0) arr#1)
        let is_true%3#0: bool = (getbit array_trimmed%3#0 tmp%13#0)
        let tmp%14#0: bool = (getbit is_true%3#0 0u)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L159
        (app_global_put "g" arr#1)
        goto length#0 ? block@13 : block@14
    block@13: // if_body_L164
        let array_length#0: uint64 = (extract_uint16 arr#1 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%2#1: bytes = (itob length_minus_1#0)
        let tmp%3#1: bytes = ((extract 6 0) tmp%2#1)
        let result#0: bytes = ((replace2 0) arr#1 tmp%3#1)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%9#1: uint64 = (+ length_minus_1#0 7u)
        let tmp%10#1: uint64 = (/ tmp%9#1 8u)
        let tmp%11#1: uint64 = (+ 2u tmp%10#1)
        let result#2: bytes = (substring3 result#1 0u tmp%11#1)
        let length%6#0: uint64 = result#2.length
        let tmp%19#0: uint64 = (- length#0 1u)
        let tmp%20#0: bool = (== length%6#0 tmp%19#0)
        (assert tmp%20#0)
        goto block@14
    block@14: // after_if_else_L163
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L167
        let arr#0: Encoded(len+(uint64,uint64)[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L172
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,uint64)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L173
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: uint64 = (+ i#1 2u)
        let val_as_bytes%0#0: bytes[8] = (itob i#2)
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let encoded%3#0: Encoded((uint64,uint64)) = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        let concat%0#0: Encoded(len+(uint64,uint64)[]) = (concat arr#1 encoded%3#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 16u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: Encoded(len+(uint64,uint64)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        goto block@1
    block@4: // after_for_L172
        let length%1#0: uint64 = arr#1.length
        let tmp%3#0: bool = (== length%1#0 5u)
        (assert tmp%3#0)
        let array_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let encoded_element%0#0: bytes = ((extract 2 16) arr#1)
        let tmp%4#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let tmp%5#0: uint64 = (extract_uint64 encoded_element%0#0 8u)
        let tmp%6#0: bool = (== tmp%4#0 1u)
        let tmp%7#0: bool = (== tmp%5#0 2u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let length%2#0: uint64 = arr#1.length
        let tmp%9#0: uint64 = (- length%2#0 1u)
        let bytes_offset%1#0: uint64 = (* tmp%9#0 16u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%1#0 16u) // on error: index access is out of bounds
        let tmp%10#0: uint64 = (extract_uint64 encoded_element%1#0 0u)
        let tmp%11#0: uint64 = (extract_uint64 encoded_element%1#0 8u)
        let tmp%12#0: bool = (== tmp%10#0 5u)
        let tmp%13#0: bool = (== tmp%11#0 6u)
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let (tmp%15#0: bytes, arr#3: Encoded(len+(uint64,uint64)[])) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 16u)
        let (tmp%17#0: uint64, tmp%18#0: uint64) = decode<(uint64,uint64,)>(tmp%15#0)
        let length%3#0: uint64 = arr#3.length
        let tmp%19#0: bool = (== length%3#0 4u)
        (assert tmp%19#0)
        let array_trimmed%2#0: bytes = ((extract 2 0) arr#3)
        let encoded_element%2#0: bytes = ((extract 2 16) arr#3)
        let tmp%20#0: uint64 = (extract_uint64 encoded_element%2#0 0u)
        let tmp%21#0: uint64 = (extract_uint64 encoded_element%2#0 8u)
        let tmp%22#0: bool = (== tmp%20#0 1u)
        let tmp%23#0: bool = (== tmp%21#0 2u)
        let tmp%24#0: bool = (&& tmp%22#0 tmp%23#0)
        (assert tmp%24#0)
        let length%4#0: uint64 = arr#3.length
        let tmp%25#0: uint64 = (- length%4#0 1u)
        let bytes_offset%3#0: uint64 = (* tmp%25#0 16u)
        let encoded_element%3#0: bytes = (extract3 array_trimmed%2#0 bytes_offset%3#0 16u) // on error: index access is out of bounds
        let tmp%26#0: uint64 = (extract_uint64 encoded_element%3#0 0u)
        let tmp%27#0: uint64 = (extract_uint64 encoded_element%3#0 8u)
        let tmp%28#0: bool = (== tmp%26#0 4u)
        let tmp%29#0: bool = (== tmp%27#0 5u)
        let tmp%30#0: bool = (&& tmp%28#0 tmp%29#0)
        (assert tmp%30#0)
        (app_global_put "c" arr#3)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L185
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L190
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,bool1,bool1)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L191
        let tmp%1#0: uint64 = (% i#1 2u)
        let tmp%2#0: bool = (! tmp%1#0)
        let tmp%3#0: uint64 = (* i#1 3u)
        let tmp%4#0: uint64 = (% tmp%3#0 2u)
        let tmp%5#0: bool = (! tmp%4#0)
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u tmp%2#0)
        let encoded%3#0: Encoded((uint64,bool1)) = (concat val_as_bytes%0#0 encoded_bit%0#0)
        let set_bit%0#0: Encoded((uint64,bool1)) = (setbit encoded%3#0 65u tmp%5#0)
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#1 set_bit%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 9u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: Encoded(len+(uint64,bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L190
        let length%1#0: uint64 = arr#1.length
        let tmp%6#0: bool = (== length%1#0 5u)
        (assert tmp%6#0)
        let encoded_element%0#0: bytes = ((extract 2 9) arr#1)
        let foo#0: uint64 = (extract_uint64 encoded_element%0#0 0u)
        let get_bit%0#0: uint64 = (getbit encoded_element%0#0 64u)
        let bar#0: bool = (getbit get_bit%0#0 0u)
        let get_bit%1#0: uint64 = (getbit encoded_element%0#0 65u)
        let baz#0: bool = (getbit get_bit%1#0 0u)
        let tmp%10#0: bool = (! foo#0)
        (assert tmp%10#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L200
        let arr#0: Encoded(len+(uint64,len+uint8[])[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L205
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,len+uint8[])[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L206
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: bytes = (bzero i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let val_as_bytes%0#0: bytes[8] = (itob i#2)
        let length%1#0: uint64 = (len tmp%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%2#0)
        let encoded%3#0: Encoded((uint64,len+uint8[])) = (concat val_as_bytes%0#0 0x000a)
        let encoded%4#0: Encoded((uint64,len+uint8[])) = (concat encoded%3#0 encoded_value%0#0)
        let encoded%6#0: Encoded((uint64,len+uint8[])[]) = (concat 0x0002 encoded%4#0)
        let arr#2: Encoded(len+(uint64,len+uint8[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, encoded%6#0)
        goto block@1
    block@4: // after_for_L205
        let length%2#0: uint64 = arr#1.length
        let tmp%3#0: bool = (== length%2#0 5u)
        (assert tmp%3#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L209
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L210
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let length%3#0: uint64 = arr#1.length
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let i#5: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- length%3#0 i#5) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* i#5 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let tmp%4#0: uint64 = (extract_uint64 substring3%0#0 0u)
        let tmp%7#0: bool = (== tmp%4#0 i#5)
        (assert tmp%7#0) // expected 1st element to be correct
        let length%4#0: uint64 = arr#1.length
        let has_next%1#0: uint64 = (- length%4#0 i#5) // on error: index access is out of bounds
        let end_offset%1#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%1#0)
        let substring3%2#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 substring3%2#0 8u)
        let len%1#0: uint64 = (len substring3%2#0)
        let substring3%3#0: bytes = (substring3 substring3%2#0 extract_uint16%2#0 len%1#0)
        let tmp%9#0: bytes = ((extract 2 0) substring3%3#0)
        let tmp%10#0: uint64 = (len tmp%9#0)
        let tmp%11#0: bool = (== tmp%10#0 i#4)
        (assert tmp%11#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L209
        let (tmp%12#0: bytes, arr#4: Encoded(len+(uint64,len+uint8[])[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let (tmp%14#0: uint64, tmp%15#0: bytes) = decode<(uint64,bytes,)>(tmp%12#0)
        let length%5#0: uint64 = arr#4.length
        let tmp%16#0: bool = (== length%5#0 4u)
        (assert tmp%16#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let length%6#0: uint64 = arr#4.length
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 0u)
        let has_next%2#0: uint64 = (- length%6#0 1u) // on error: index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 2u)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let substring3%4#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let tmp%17#0: uint64 = (extract_uint64 substring3%4#0 0u)
        let extract_uint16%3#0: uint64 = (extract_uint16 substring3%4#0 8u)
        let len%2#0: uint64 = (len substring3%4#0)
        let substring3%5#0: bytes = (substring3 substring3%4#0 extract_uint16%3#0 len%2#0)
        let tmp%18#0: bytes = ((extract 2 0) substring3%5#0)
        let tmp%19#0: bool = (== tmp%17#0 1u)
        let tmp%20#0: bytes = (bzero 0u)
        let tmp%21#0: bool = (== tmp%18#0 tmp%20#0)
        let tmp%22#0: bool = (&& tmp%19#0 tmp%21#0)
        (assert tmp%22#0) // expected 1, 0
        let length%7#0: uint64 = arr#4.length
        let tmp%23#0: uint64 = (- length%7#0 1u)
        let length%8#0: uint64 = arr#4.length
        let item_offset_offset%3#0: uint64 = (* tmp%23#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%3#0)
        let next_index%3#0: uint64 = (+ tmp%23#0 1u)
        let has_next%3#0: uint64 = (- length%8#0 next_index%3#0) // on error: index access is out of bounds
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%2#0 next_item_offset%3#0 has_next%3#0)
        let substring3%6#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%3#0 end_offset%3#0)
        let tmp%24#0: uint64 = (extract_uint64 substring3%6#0 0u)
        let extract_uint16%4#0: uint64 = (extract_uint16 substring3%6#0 8u)
        let len%3#0: uint64 = (len substring3%6#0)
        let substring3%7#0: bytes = (substring3 substring3%6#0 extract_uint16%4#0 len%3#0)
        let tmp%25#0: bytes = ((extract 2 0) substring3%7#0)
        let tmp%26#0: bool = (== tmp%24#0 4u)
        let tmp%27#0: bytes = (bzero 3u)
        let tmp%28#0: bool = (== tmp%25#0 tmp%27#0)
        let tmp%29#0: bool = (&& tmp%26#0 tmp%28#0)
        (assert tmp%29#0) // expected 4, 3
        (app_global_put "e" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L219
        let arr#0: Encoded(len+(uint64,len+utf8[])[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L224
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,len+utf8[])[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L225
        let i#2: uint64 = (+ i#1 1u)
        let tmp%2#0: string = test_cases.array.immutable.times(i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let val_as_bytes%0#0: bytes[8] = (itob i#2)
        let length%1#0: uint64 = (len tmp%2#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%2#0)
        let encoded%3#0: Encoded((uint64,len+utf8[])) = (concat val_as_bytes%0#0 0x000a)
        let encoded%4#0: Encoded((uint64,len+utf8[])) = (concat encoded%3#0 encoded_value%0#0)
        let encoded%6#0: Encoded((uint64,len+utf8[])[]) = (concat 0x0002 encoded%4#0)
        let arr#2: Encoded(len+(uint64,len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, encoded%6#0)
        goto block@1
    block@4: // after_for_L224
        let length%2#0: uint64 = arr#1.length
        let tmp%3#0: bool = (== length%2#0 5u)
        (assert tmp%3#0)
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L228
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@6)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L229
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let length%3#0: uint64 = arr#1.length
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let i#5: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- length%3#0 i#5) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* i#5 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let tmp%4#0: uint64 = (extract_uint64 substring3%0#0 0u)
        let tmp%7#0: bool = (== tmp%4#0 i#5)
        (assert tmp%7#0) // expected 1st element to be correct
        let length%4#0: uint64 = arr#1.length
        let has_next%1#0: uint64 = (- length%4#0 i#5) // on error: index access is out of bounds
        let end_offset%1#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%1#0)
        let substring3%2#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%1#0)
        let extract_uint16%2#0: uint64 = (extract_uint16 substring3%2#0 8u)
        let len%1#0: uint64 = (len substring3%2#0)
        let substring3%3#0: bytes = (substring3 substring3%2#0 extract_uint16%2#0 len%1#0)
        let tmp%9#0: bytes = ((extract 2 0) substring3%3#0)
        let tmp%10#0: string = test_cases.array.immutable.times(i#4)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0) // expected 2nd element to be correct
        goto block@5
    block@8: // after_for_L228
        let (tmp%12#0: bytes, arr#4: Encoded(len+(uint64,len+utf8[])[])) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let (tmp%14#0: uint64, tmp%15#0: string) = decode<(uint64,string,)>(tmp%12#0)
        let length%5#0: uint64 = arr#4.length
        let tmp%16#0: bool = (== length%5#0 4u)
        (assert tmp%16#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let length%6#0: uint64 = arr#4.length
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 0u)
        let has_next%2#0: uint64 = (- length%6#0 1u) // on error: index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 2u)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let substring3%4#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let tmp%17#0: uint64 = (extract_uint64 substring3%4#0 0u)
        let extract_uint16%3#0: uint64 = (extract_uint16 substring3%4#0 8u)
        let len%2#0: uint64 = (len substring3%4#0)
        let substring3%5#0: bytes = (substring3 substring3%4#0 extract_uint16%3#0 len%2#0)
        let tmp%18#0: bytes = ((extract 2 0) substring3%5#0)
        let tmp%19#0: bool = (== tmp%17#0 1u)
        let tmp%20#0: bool = (== tmp%18#0 "")
        let tmp%21#0: bool = (&& tmp%19#0 tmp%20#0)
        (assert tmp%21#0) // expected 1, 0
        let length%7#0: uint64 = arr#4.length
        let tmp%22#0: uint64 = (- length%7#0 1u)
        let length%8#0: uint64 = arr#4.length
        let item_offset_offset%3#0: uint64 = (* tmp%22#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%3#0)
        let next_index%3#0: uint64 = (+ tmp%22#0 1u)
        let has_next%3#0: uint64 = (- length%8#0 next_index%3#0) // on error: index access is out of bounds
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%2#0 next_item_offset%3#0 has_next%3#0)
        let substring3%6#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%3#0 end_offset%3#0)
        let tmp%23#0: uint64 = (extract_uint64 substring3%6#0 0u)
        let extract_uint16%4#0: uint64 = (extract_uint16 substring3%6#0 8u)
        let len%3#0: uint64 = (len substring3%6#0)
        let substring3%7#0: bytes = (substring3 substring3%6#0 extract_uint16%4#0 len%3#0)
        let tmp%24#0: bytes = ((extract 2 0) substring3%7#0)
        let tmp%25#0: bool = (== tmp%23#0 4u)
        let tmp%26#0: bool = (== tmp%24#0 "   ")
        let tmp%27#0: bool = (&& tmp%25#0 tmp%26#0)
        (assert tmp%27#0) // expected 4, 3
        (app_global_put "f" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_log(arr: Encoded(len+uint64[])) -> void:
    block@0: // L238
        (log arr#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_implicit_conversion_emit(arr: Encoded(len+uint64[])) -> void:
    block@0: // L242
        let encoded%1#0: Encoded((len+uint64[])) = (concat 0x0002 arr#0)
        let event%0#0: bytes = (concat method "emit_test(uint64[])" encoded%1#0)
        (log event%0#0)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: Encoded(len+len+uint64[][])) -> Encoded(len+uint64[]):
    block@0: // L246
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L251
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@6)
        let arr#2: Encoded(len+len+uint64[][]) = φ(arr#0 <- block@0, arr#3 <- block@6)
        let continue_looping%0#0: bool = (< i#1 arr_to_add#0)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L252
        let extra_arr#0: Encoded(len+uint64[]) = 0x0000
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L253
        let j#1: uint64 = φ(j#0 <- block@2, j#2 <- block@4)
        let extra_arr#1: Encoded(len+uint64[]) = φ(extra_arr#0 <- block@2, extra_arr#2 <- block@4)
        let continue_looping%1#0: bool = (< j#1 i#1)
        goto continue_looping%1#0 ? block@4 : block@6
    block@4: // for_body_L254
        let val_as_bytes%0#0: bytes[8] = (itob j#1)
        let concat%0#0: Encoded(len+uint64[]) = (concat extra_arr#1 val_as_bytes%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let extra_arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let j#2: uint64 = (+ j#1 1u)
        goto block@3
    block@6: // after_for_L253
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#2 0u)
        let extract_to_end%1#0: bytes = ((extract 2 0) arr#2)
        let encoded%5#0: Encoded(len+uint64[][]) = (concat 0x0002 extra_arr#1)
        let arr#3: Encoded(len+len+uint64[][]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%1#0, 1u, encoded%5#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@8: // after_for_L251
        let totals#0: Encoded(len+uint64[]) = 0x0000
        let length%0#0: uint64 = arr#2.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L259
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@8, item_index_internal%0#2 <- block@16)
        let totals#1: Encoded(len+uint64[]) = φ(totals#0 <- block@8, totals#2 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%0#1 length%0#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L260
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#2)
        let item_offset_offset%0#0: uint64 = (* item_index_internal%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 8u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let inner_arr#0: Encoded(len+uint64[]) = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
        let total#0: uint64 = 0u
        let length%0#1: uint64 = inner_arr#0.length
        let item_index_internal%0#3: uint64 = 0u
        goto block@14
    block@14: // for_header_L471
        let item_index_internal%0#4: uint64 = φ(item_index_internal%0#3 <- block@10, item_index_internal%0#5 <- block@15)
        let total#1: uint64 = φ(total#0 <- block@10, total#2 <- block@15)
        let continue_looping%0#1: bool = (< item_index_internal%0#4 length%0#1)
        goto continue_looping%0#1 ? block@15 : block@16
    block@15: // for_body_L472
        let array_trimmed%0#0: bytes = ((extract 2 0) inner_arr#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#4 8u)
        let i#3: uint64 = (extract_uint64 array_trimmed%0#0 bytes_offset%0#0)
        let total#2: uint64 = (+ total#1 i#3)
        let item_index_internal%0#5: uint64 = (+ item_index_internal%0#4 1u)
        goto block@14
    block@16: // after_for_L471
        let val_as_bytes%1#0: bytes[8] = (itob total#1)
        let concat%1#0: Encoded(len+uint64[]) = (concat totals#1 val_as_bytes%1#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%2#0)
        let div_floor%1#0: uint64 = (/ len%1#0 8u)
        let as_bytes%4#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let totals#2: Encoded(len+uint64[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@9
    block@12: // after_for_L259
        return totals#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L264
        let arr2#0: Encoded(len+(bool1,bool1)[]) = 0x0000
        let arr7#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = 0x0000
        let arr8#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = 0x0000
        let arr9#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = 0x0000
        let length%0#0: uint64 = 0x0000.length
        let tmp%0#0: bool = (! length%0#0)
        (assert tmp%0#0)
        let length%1#0: uint64 = 0x0000.length
        let tmp%1#0: bool = (! length%1#0)
        (assert tmp%1#0)
        let length%2#0: uint64 = 0x0000.length
        let tmp%2#0: bool = (! length%2#0)
        (assert tmp%2#0)
        let length%3#0: uint64 = 0x0000.length
        let tmp%3#0: bool = (! length%3#0)
        (assert tmp%3#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L275
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr2#1: Encoded(len+(bool1,bool1)[]) = φ(arr2#0 <- block@0, arr2#2 <- block@2)
        let arr7#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr7#0 <- block@0, arr7#2 <- block@2)
        let arr8#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr8#0 <- block@0, arr8#2 <- block@2)
        let arr9#1: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = φ(arr9#0 <- block@0, arr9#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L276
        let tmp%4#0: bool = (! i#1)
        let tmp%5#0: bool = (== i#1 1u)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u tmp%4#0)
        let set_bit%0#0: Encoded((bool1)) = (setbit encoded_bit%0#0 1u tmp%5#0)
        let concat%0#0: Encoded(len+(bool1,bool1)[]) = (concat arr2#1 set_bit%0#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let as_bytes%4#0: bytes[8] = (itob len%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%4#0)
        let arr2#2: Encoded(len+(bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let tmp%8#0: bool = (== i#1 2u)
        let tmp%9#0: bool = (== i#1 3u)
        let tmp%10#0: bool = (== i#1 4u)
        let tmp%11#0: bool = (== i#1 5u)
        let tmp%12#0: bool = (== i#1 6u)
        let i#2: uint64 = (+ i#1 1u)
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let encoded%13#0: Encoded((uint64,bool1)) = (concat val_as_bytes%0#0 encoded_bit%0#0)
        let set_bit%1#0: Encoded((uint64,bool1)) = (setbit encoded%13#0 65u tmp%5#0)
        let set_bit%2#0: Encoded((uint64,bool1)) = (setbit set_bit%1#0 66u tmp%8#0)
        let set_bit%3#0: Encoded((uint64,bool1)) = (setbit set_bit%2#0 67u tmp%9#0)
        let set_bit%4#0: Encoded((uint64,bool1)) = (setbit set_bit%3#0 68u tmp%10#0)
        let set_bit%5#0: Encoded((uint64,bool1)) = (setbit set_bit%4#0 69u tmp%11#0)
        let set_bit%6#0: Encoded((uint64,bool1)) = (setbit set_bit%5#0 70u tmp%12#0)
        let val_as_bytes%1#0: bytes[8] = (itob i#2)
        let encoded%14#0: Encoded((uint64,bool1,uint64)) = (concat set_bit%6#0 val_as_bytes%1#0)
        let concat%1#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr7#1 encoded%14#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%1#0)
        let len%1#0: uint64 = (len extract_to_end%1#0)
        let div_floor%1#0: uint64 = (/ len%1#0 17u)
        let as_bytes%5#0: bytes[8] = (itob div_floor%1#0)
        let as_u16_bytes%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let arr7#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%1#0 as_u16_bytes%1#0)
        let tmp%21#0: bool = (== i#1 7u)
        let set_bit%13#0: Encoded((uint64,bool1)) = (setbit set_bit%6#0 71u tmp%21#0)
        let encoded%20#0: Encoded((uint64,bool1,uint64)) = (concat set_bit%13#0 val_as_bytes%1#0)
        let concat%2#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr8#1 encoded%20#0) // on error: max array length exceeded
        let extract_to_end%2#0: bytes = ((extract 2 0) concat%2#0)
        let len%2#0: uint64 = (len extract_to_end%2#0)
        let div_floor%2#0: uint64 = (/ len%2#0 17u)
        let as_bytes%6#0: bytes[8] = (itob div_floor%2#0)
        let as_u16_bytes%2#0: bytes = ((extract 6 2) as_bytes%6#0)
        let arr8#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%2#0 as_u16_bytes%2#0)
        let tmp%31#0: bool = (== i#1 8u)
        let set_bit%21#0: bytes = (setbit 0x00 0u tmp%31#0)
        let encoded%26#0: Encoded((uint64,bool1,bool1)) = (concat set_bit%13#0 set_bit%21#0)
        let encoded%27#0: Encoded((uint64,bool1,bool1,uint64)) = (concat encoded%26#0 val_as_bytes%1#0)
        let concat%3#0: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = (concat arr9#1 encoded%27#0) // on error: max array length exceeded
        let extract_to_end%3#0: bytes = ((extract 2 0) concat%3#0)
        let len%3#0: uint64 = (len extract_to_end%3#0)
        let div_floor%3#0: uint64 = (/ len%3#0 18u)
        let as_bytes%7#0: bytes[8] = (itob div_floor%3#0)
        let as_u16_bytes%3#0: bytes = ((extract 6 2) as_bytes%7#0)
        let arr9#2: Encoded(len+(uint64,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,bool1,uint64)[]) = ((replace2 0) concat%3#0 as_u16_bytes%3#0)
        goto block@1
    block@4: // after_for_L275
        let length%4#0: uint64 = arr2#1.length
        let tmp%33#0: bool = (== length%4#0 5u)
        (assert tmp%33#0)
        let length%5#0: uint64 = arr7#1.length
        let tmp%34#0: bool = (== length%5#0 5u)
        (assert tmp%34#0)
        let length%6#0: uint64 = arr8#1.length
        let tmp%35#0: bool = (== length%6#0 5u)
        (assert tmp%35#0)
        let length%7#0: uint64 = arr9#1.length
        let tmp%36#0: bool = (== length%7#0 5u)
        (assert tmp%36#0)
        (app_global_put "bool2" arr2#1)
        (app_global_put "bool7" arr7#1)
        (app_global_put "bool8" arr8#1)
        (app_global_put "bool9" arr9#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: Encoded(len+uint64[]), arr2: Encoded(len+bool1[]), arr3: Encoded(len+(uint64,bool1,bool1)[]), arr4: Encoded(len+(uint64,len+utf8[])[])) -> <uint64, uint64, uint64, uint64>:
    block@0: // L329
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let length%0#0: uint64 = arr1#0.length
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L338
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let sum1#1: uint64 = φ(sum1#0 <- block@0, sum1#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L339
        let array_trimmed%0#0: bytes = ((extract 2 0) arr1#0)
        let bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let i#0: uint64 = (extract_uint64 array_trimmed%0#0 bytes_offset%0#0)
        let sum1#2: uint64 = (+ sum1#1 i#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L338
        let length%1#0: uint64 = arr2#0.length
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L340
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@8)
        let sum2#1: uint64 = φ(sum2#0 <- block@4, sum2#4 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L341
        let array_trimmed%1#0: bytes = ((extract 2 0) arr2#0)
        let is_true%0#0: bool = (getbit array_trimmed%1#0 item_index_internal%1#1)
        let b#0: bool = (getbit is_true%0#0 0u)
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L342
        let sum2#2: uint64 = (+ sum2#1 1u)
        goto block@8
    block@8: // after_if_else_L341
        let sum2#4: uint64 = φ(sum2#1 <- block@6, sum2#2 <- block@7)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@10: // after_for_L340
        let length%2#0: uint64 = arr3#0.length
        let item_index_internal%2#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L343
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@10, item_index_internal%2#2 <- block@16)
        let sum3#1: uint64 = φ(sum3#0 <- block@10, sum3#9 <- block@16)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L344
        let array_trimmed%2#0: bytes = ((extract 2 0) arr3#0)
        let bytes_offset%1#0: uint64 = (* item_index_internal%2#1 9u)
        let encoded_element%1#0: bytes = (extract3 array_trimmed%2#0 bytes_offset%1#0 9u) // on error: index access is out of bounds
        let tup.foo#0: uint64 = (extract_uint64 encoded_element%1#0 0u)
        let get_bit%0#0: uint64 = (getbit encoded_element%1#0 64u)
        let tup.bar#0: bool = (getbit get_bit%0#0 0u)
        let get_bit%1#0: uint64 = (getbit encoded_element%1#0 65u)
        let tup.baz#0: bool = (getbit get_bit%1#0 0u)
        let sum3#2: uint64 = (+ sum3#1 tup.foo#0)
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L346
        let sum3#3: uint64 = (+ sum3#2 1u)
        goto block@14
    block@14: // after_if_else_L345
        let sum3#4: uint64 = φ(sum3#2 <- block@12, sum3#3 <- block@13)
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L348
        let sum3#5: uint64 = (+ sum3#4 1u)
        goto block@16
    block@16: // after_if_else_L347
        let sum3#9: uint64 = φ(sum3#4 <- block@14, sum3#5 <- block@15)
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@11
    block@18: // after_for_L343
        let length%3#0: uint64 = arr4#0.length
        let item_index_internal%3#0: uint64 = 0u
        goto block@19
    block@19: // for_header_L349
        let idx#0: uint64 = φ(item_index_internal%3#0 <- block@18, next_index%0#0 <- block@20)
        let sum4#1: uint64 = φ(sum4#0 <- block@18, sum4#3 <- block@20)
        let continue_looping%3#0: bool = (< idx#0 length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L350
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr4#0)
        let length%4#0: uint64 = arr4#0.length
        let item_offset_offset%0#0: uint64 = (* idx#0 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let next_index%0#0: uint64 = (+ idx#0 1u)
        let has_next%0#0: uint64 = (- length%4#0 next_index%0#0) // on error: index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let substring3%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let dyn_tup.foo#0: uint64 = (extract_uint64 substring3%0#0 0u)
        let extract_uint16%0#0: uint64 = (extract_uint16 substring3%0#0 8u)
        let len%0#0: uint64 = (len substring3%0#0)
        let substring3%1#0: bytes = (substring3 substring3%0#0 extract_uint16%0#0 len%0#0)
        let dyn_tup.bar#0: string = ((extract 2 0) substring3%1#0)
        let sum4#2: uint64 = (+ sum4#1 dyn_tup.foo#0)
        let tmp%13#0: uint64 = (len dyn_tup.bar#0)
        let sum4#3: uint64 = (+ sum4#2 tmp%13#0)
        let tmp%16#0: bool = (== tmp%13#0 idx#0)
        (assert tmp%16#0) // expected string length to match index
        goto block@19
    block@22: // after_for_L349
        return sum1#1 sum2#1 sum3#1 sum4#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> Encoded(len+uint64[]):
    block@0: // L356
        let arr#0: Encoded(len+uint64[]) = 0x0003000000000000000100000000000000020000000000000003
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L359
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+uint64[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L360
        let val_as_bytes%3#0: bytes[8] = (itob i#1)
        let concat%0#0: Encoded(len+uint64[]) = (concat arr#1 val_as_bytes%3#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L359
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> Encoded(len+bool1[]):
    block@0: // L363
        let arr#0: Encoded(len+bool1[]) = 0x0005a8
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L366
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+bool1[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L367
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%1#0)
        let arr#2: Encoded(len+bool1[]) = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, encoded_bool%0#0, 1u, 8u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L366
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L370
        let arr#0: Encoded(len+(uint64,bool1,bool1)[]) = 0x0001000000000000000080
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L373
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,bool1,bool1)[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L374
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let val_as_bytes%1#0: bytes[8] = (itob i#1)
        let encoded_bit%1#0: bytes = (setbit 0x00 0u tmp%1#0)
        let encoded%7#0: Encoded((uint64,bool1)) = (concat val_as_bytes%1#0 encoded_bit%1#0)
        let set_bit%1#0: Encoded((uint64,bool1)) = (setbit encoded%7#0 65u tmp%3#0)
        let concat%0#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat arr#1 set_bit%1#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 9u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let arr#2: Encoded(len+(uint64,bool1,bool1)[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L373
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> Encoded(len+(uint64,len+utf8[])[]):
    block@0: // L377
        let arr#0: Encoded(len+(uint64,len+utf8[])[]) = 0x000100020000000000000000000a000548656c6c6f
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L380
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr#1: Encoded(len+(uint64,len+utf8[])[]) = φ(arr#0 <- block@0, arr#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L381
        let tmp%0#0: string = test_cases.array.immutable.times(i#1)
        let extract_uint16%0#0: uint64 = (extract_uint16 arr#1 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#1)
        let val_as_bytes%1#0: bytes[8] = (itob i#1)
        let length%1#0: uint64 = (len tmp%0#0)
        let as_bytes%4#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%0#0)
        let encoded%7#0: Encoded((uint64,len+utf8[])) = (concat val_as_bytes%1#0 0x000a)
        let encoded%8#0: Encoded((uint64,len+utf8[])) = (concat encoded%7#0 encoded_value%1#0)
        let encoded%10#0: Encoded((uint64,len+utf8[])[]) = (concat 0x0002 encoded%8#0)
        let arr#2: Encoded(len+(uint64,len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, 1u, encoded%10#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L380
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: Encoded(len+(uint64,bool1,bool1)[]), append: uint64) -> Encoded(len+(uint64,bool1,bool1)[]):
    block@0: // L384
        let mutable#0: Encoded((uint64,bool1,bool1)[])* = new()
        let extract_to_end%0#0: bytes = ((extract 2 0) arr#0)
        let concat%0#0: Encoded((uint64,bool1,bool1)[]) = extract_to_end%0#0
        write(mutable#0, extract_to_end%0#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L390
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L391
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (! tmp%2#0)
        let slot_contents%1#0: Encoded((uint64,bool1,bool1)[]) = read(mutable#0)
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let encoded_bit%0#0: bytes = (setbit 0x00 0u tmp%1#0)
        let encoded%2#0: Encoded((uint64,bool1)) = (concat val_as_bytes%0#0 encoded_bit%0#0)
        let set_bit%0#0: Encoded((uint64,bool1)) = (setbit encoded%2#0 65u tmp%3#0)
        let concat%1#0: Encoded((uint64,bool1,bool1)[]) = (concat slot_contents%1#0 set_bit%0#0) // on error: max array length exceeded
        write(mutable#0, concat%1#0)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L390
        let slot_contents%2#0: Encoded((uint64,bool1,bool1)[]) = read(mutable#0)
        let concat%2#0: Encoded(len+(uint64,bool1,bool1)[]) = (concat 0x0000 slot_contents%2#0) // on error: max array length exceeded
        let extract_to_end%1#0: bytes = ((extract 2 0) concat%2#0)
        let len%0#0: uint64 = (len extract_to_end%1#0)
        let div_floor%0#0: uint64 = (/ len%0#0 9u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let replace%0#0: bytes = ((replace2 0) concat%2#0 as_u16_bytes%0#0)
        return replace%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: Encoded((uint64,uint64))) -> Encoded(len+uint64[]):
    block@0: // L394
        let concat%0#0: Encoded(len+uint64[]) = (concat 0x000200000000000000010000000000000002 arg#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: Encoded(uint64), arg.1: Encoded(uint64)) -> Encoded(len+uint64[]):
    block@0: // L402
        let encoded%5#0: Encoded((uint64,uint64)) = (concat arg.0#0 arg.1#0)
        let concat%0#0: Encoded(len+uint64[]) = (concat 0x000200000000000000010000000000000002 encoded%5#0) // on error: max array length exceeded
        let extract_to_end%0#0: bytes = ((extract 2 0) concat%0#0)
        let len%0#0: uint64 = (len extract_to_end%0#0)
        let div_floor%0#0: uint64 = (/ len%0#0 8u)
        let as_bytes%1#0: bytes[8] = (itob div_floor%0#0)
        let as_u16_bytes%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result#0: Encoded(len+uint64[]) = ((replace2 0) concat%0#0 as_u16_bytes%0#0)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: Encoded((len+utf8[],len+utf8[]))) -> Encoded(len+len+utf8[][]):
    block@0: // L410
        let total_length%0#0: uint64 = (len arg#0)
        let data%0#0: bytes = (substring3 arg#0 4u total_length%0#0)
        let result#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x000200040007000161000162, data%0#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: Encoded(len+utf8[]), arg.1: Encoded(len+utf8[])) -> Encoded(len+len+utf8[][]):
    block@0: // L418
        let data_length%2#0: uint64 = (len arg.0#0)
        let current_tail_offset%2#0: uint64 = (+ 4u data_length%2#0)
        let tail%3#0: bytes = (concat arg.0#0 arg.1#0)
        let as_bytes%6#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%3#0: bytes = ((extract 6 2) as_bytes%6#0)
        let encoded%5#0: Encoded((len+utf8[],len+utf8[])) = (concat 0x0004 offset_as_uint16%3#0)
        let encoded%6#0: Encoded(len+utf8[][]) = (concat encoded%5#0 tail%3#0)
        let total_length%0#0: uint64 = (len encoded%6#0)
        let data%0#0: bytes = (substring3 encoded%6#0 4u total_length%0#0)
        let result#0: Encoded(len+len+utf8[][]) = _puya_lib.arc4.dynamic_array_concat_byte_length_head(0x000200040007000161000162, data%0#0, 2u)
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: Encoded(len+(uint64,len+utf8[])[]), imm2: Encoded(len+(uint64,len+utf8[])[])) -> Encoded(len+(uint64,len+utf8[])[]):
    block@0: // L426
        let extract_uint16%0#0: uint64 = (extract_uint16 imm1#0 0u)
        let extract_to_end%0#0: bytes = ((extract 2 0) imm1#0)
        let extract_to_end%1#0: bytes = ((extract 2 0) imm2#0)
        let tmp%0#0: uint64 = imm2#0.length
        let as_Encoded(len+(uint64,len+utf8[])[])%0#0: Encoded(len+(uint64,len+utf8[])[]) = _puya_lib.arc4.dynamic_array_concat_dynamic_element(extract_uint16%0#0, extract_to_end%0#0, tmp%0#0, extract_to_end%1#0)
        return as_Encoded(len+(uint64,len+utf8[])[])%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_immutable_arc4(imm: Encoded(len+(uint64,uint64)[])) -> Encoded(len+(uint64,uint64)[]):
    block@0: // L432
        let length%0#0: uint64 = imm#0.length
        (assert length%0#0) // expected non empty array
        let length%1#0: uint64 = imm#0.length
        let tmp%1#0: uint64 = (- length%1#0 1u)
        let encoded_element%0#0: bytes = ((extract 2 16) imm#0)
        let write_offset%0#0: uint64 = (* tmp%1#0 16u)
        let write_offset_with_length_header%0#0: uint64 = (+ write_offset%0#0 2u)
        let imm#1: Encoded(len+(uint64,uint64)[]) = (replace3 imm#0 write_offset_with_length_header%0#0 encoded_element%0#0)
        return imm#1