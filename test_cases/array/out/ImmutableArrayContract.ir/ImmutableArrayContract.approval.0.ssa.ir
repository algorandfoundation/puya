main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__()
        return tmp%0#0

subroutine _puya_lib.arc4.dynamic_array_pop_bit(array: bytes) -> <bytes, bytes>:
    block@0: // L25
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let popped_location#0: uint64 = (+ length_minus_1#0 16u)
        let tmp%2#0: uint64 = (getbit result#0 popped_location#0)
        let popped#0: bytes = (setbit 0x00 0u tmp%2#0)
        let result#1: bytes = (setbit result#0 popped_location#0 0u)
        let tmp%3#0: uint64 = (+ length_minus_1#0 7u)
        let tmp%4#0: uint64 = (/ tmp%3#0 8u)
        let tmp%5#0: uint64 = (+ 2u tmp%4#0)
        let result#2: bytes = (substring3 result#1 0u tmp%5#0)
        return popped#0 result#2

subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size(array: bytes, fixed_byte_size: uint64) -> <bytes, bytes>:
    block@0: // L44
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let tmp%0#0: bytes = (itob length_minus_1#0)
        let tmp%1#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 tmp%1#0)
        let tmp%2#0: uint64 = (len result#0)
        let item_location#0: uint64 = (- tmp%2#0 fixed_byte_size#0)
        let popped#0: bytes = (extract3 result#0 item_location#0 fixed_byte_size#0)
        let result#1: bytes = (substring3 result#0 0u item_location#0)
        return popped#0 result#1

subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element(array: bytes) -> <bytes, bytes>:
    block@0: // L92
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let length_minus_1#0: uint64 = (- array_length#0 1u)
        let popped_header_offset#0: uint64 = (* length_minus_1#0 2u)
        let head_and_tail#0: bytes = ((extract 2 0) array#0)
        let popped_offset#0: uint64 = (extract_uint16 head_and_tail#0 popped_header_offset#0)
        let tmp%0#0: uint64 = (len head_and_tail#0)
        let popped#0: bytes = (substring3 head_and_tail#0 popped_offset#0 tmp%0#0)
        let new_head#0: bytes = 0x
        let tmp%1#0: uint64 = (* length_minus_1#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L110
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%1#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L111
        let item_offset#0: uint64 = (extract_uint16 head_and_tail#0 head_offset#1)
        let item_offset#1: uint64 = (- item_offset#0 2u)
        let tmp%2#0: bytes = (itob item_offset#1)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        goto block@3
    block@3: // for_footer_L110
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L110
        let tmp%4#0: bytes = (itob length_minus_1#0)
        let tmp%5#0: bytes = ((extract 6 2) tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%5#0 new_head#1)
        let tmp%7#0: uint64 = (+ popped_header_offset#0 2u)
        let tmp%8#0: bytes = (substring3 head_and_tail#0 tmp%7#0 popped_offset#0)
        let updated#0: bytes = (concat tmp%6#0 tmp%8#0)
        return popped#0 updated#0

subroutine _puya_lib.arc4.dynamic_array_concat_bits(array: bytes, new_items_bytes: bytes, new_items_count: uint64, read_step: uint64) -> bytes:
    block@0: // L124
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_array_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: bytes = (itob new_array_length#0)
        let new_array_length_b#0: bytes = ((extract 6 0) tmp%0#0)
        let result#0: bytes = ((replace2 0) array#0 new_array_length_b#0)
        let tmp%1#0: uint64 = (+ array_length#0 7u)
        let current_bytes#0: uint64 = (/ tmp%1#0 8u)
        let tmp%2#0: uint64 = (+ new_array_length#0 7u)
        let required_bytes#0: uint64 = (/ tmp%2#0 8u)
        let tmp%3#0: bool = (< current_bytes#0 required_bytes#0)
        goto tmp%3#0 ? block@1 : block@2
    block@1: // if_body_L148
        let tmp%4#0: uint64 = (- required_bytes#0 current_bytes#0)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let result#1: bytes = (concat result#0 tmp%5#0)
        goto block@2
    block@2: // after_if_else_L147
        let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1)
        let read_offset#0: uint64 = 0u
        let write_offset#0: uint64 = (+ array_length#0 16u)
        let write_end#0: uint64 = (+ write_offset#0 new_items_count#0)
        goto block@3
    block@3: // while_top_L153
        let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4)
        let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4)
        let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4)
        let tmp%6#0: bool = (< write_offset#1 write_end#0)
        goto tmp%6#0 ? block@4 : block@5
    block@4: // while_body_L154
        let tmp%7#0: uint64 = (getbit new_items_bytes#0 read_offset#1)
        let result#3: bytes = (setbit result#2 write_offset#1 tmp%7#0)
        let write_offset#2: uint64 = (+ write_offset#1 1u)
        let read_offset#2: uint64 = (+ read_offset#1 read_step#0)
        goto block@3
    block@5: // after_while_L153
        return result#2

subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
    block@0: // L161
        let array_length#0: uint64 = (extract_uint16 array#0 0u)
        let new_length#0: uint64 = (+ array_length#0 new_items_count#0)
        let tmp%0#0: uint64 = (* array_length#0 2u)
        let header_end#0: uint64 = (+ tmp%0#0 2u)
        let tmp%1#0: bytes = (itob new_length#0)
        let tmp%2#0: bytes = ((extract 6 2) tmp%1#0)
        let tmp%3#0: bytes = (substring3 array#0 2u header_end#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        let tmp%5#0: bytes = (bzero tmp%4#0)
        let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
        let tmp%7#0: uint64 = (len array#0)
        let tmp%8#0: bytes = (substring3 array#0 header_end#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%6#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 new_items_bytes#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, new_length#0, 0u)
        let tmp%12#0: bytes = (concat tmp%2#0 tmp%11#0)
        return tmp%12#0

subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element(array_items_count: uint64, array_head_and_tail: bytes, new_items_count: uint64, new_head_and_tail: bytes) -> bytes:
    block@0: // L193
        let new_head#0: bytes = 0x
        let item_offset_adjustment#0: uint64 = (* new_items_count#0 2u)
        let tmp%0#0: uint64 = (* array_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L203
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L204
        let item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#1)
        let tmp%1#0: uint64 = (+ item_offset_adjustment#0 item_offset#0)
        let tmp%2#0: bytes = (itob tmp%1#0)
        let tmp%3#0: bytes = ((extract 6 2) tmp%2#0)
        let new_head#2: bytes = (concat new_head#1 tmp%3#0)
        goto block@3
    block@3: // for_footer_L203
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L203
        let item_offset_adjustment#2: uint64 = (len array_head_and_tail#0)
        let tmp%4#0: uint64 = (* new_items_count#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L208
        let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7)
        let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7)
        let continue_looping%1#0: bool = (< head_offset#4 tmp%4#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L209
        let item_offset#1: uint64 = (extract_uint16 new_head_and_tail#0 head_offset#4)
        let tmp%5#0: uint64 = (+ item_offset_adjustment#2 item_offset#1)
        let tmp%6#0: bytes = (itob tmp%5#0)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let new_head#4: bytes = (concat new_head#3 tmp%7#0)
        goto block@7
    block@7: // for_footer_L208
        let head_offset#5: uint64 = (+ head_offset#4 2u)
        goto block@5
    block@8: // after_for_L208
        let tmp%8#0: uint64 = (+ array_items_count#0 new_items_count#0)
        let tmp%9#0: bytes = (itob tmp%8#0)
        let tmp%10#0: bytes = ((extract 6 2) tmp%9#0)
        let tmp%11#0: bytes = (concat tmp%10#0 new_head#3)
        let tmp%12#0: uint64 = (* array_items_count#0 2u)
        let tmp%13#0: uint64 = (len array_head_and_tail#0)
        let tmp%14#0: bytes = (substring3 array_head_and_tail#0 tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = (concat tmp%11#0 tmp%14#0)
        let tmp%16#0: uint64 = (* new_items_count#0 2u)
        let tmp%17#0: uint64 = (len new_head_and_tail#0)
        let tmp%18#0: bytes = (substring3 new_head_and_tail#0 tmp%16#0 tmp%17#0)
        let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
        return tmp%19#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tmp%3#0: uint64 = (* length#0 2u)
        let tmp%4#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%4#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%3#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%5#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%5#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%6#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%7#0: uint64 = (+ tmp%6#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%7#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine test_cases.array.immutable.times(n: uint64) -> bytes:
    block@0: // L392
        let result#0: bytes = ""
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L395
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let result#1: bytes = φ(result#0 <- block@0, result#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 n#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L396
        let result#2: bytes = (concat result#1 " ")
        goto block@3
    block@3: // for_footer_L395
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L395
        return result#1

subroutine test_cases.array.immutable.add_x(arr: uint64[], x: uint64) -> uint64[]:
    block@0: // L400
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L402
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: uint64[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L403
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let encoded%0#0: uint64[] = encode<uint64>(i#1)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#2: uint64[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L402
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L402
        return arr#1

subroutine test_cases.array.immutable.pop_x(arr: uint64[], x: uint64) -> uint64[]:
    block@0: // L407
        (assert 1u) // Step cannot be zero
        let _i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L409
        let _i#1: uint64 = φ(_i#0 <- block@0, _i#2 <- block@3)
        let arr#1: uint64[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< _i#1 x#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L410
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 8u)
        let arr#2: uint64[] = data%0#0
        goto block@3
    block@3: // for_footer_L409
        let _i#2: uint64 = (+ _i#1 1u)
        goto block@1
    block@4: // after_for_L409
        return arr#1

subroutine test_cases.array.immutable.sum_arr(arr: uint64[]) -> uint64:
    block@0: // L414
        let total#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L417
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L418
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let value_at_index%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let i#0: uint64 = (btoi value_at_index%0#0)
        let total#2: uint64 = (+ total#1 i#0)
        goto block@3
    block@3: // for_footer_L417
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L417
        return total#1

subroutine test_cases.array.immutable.ImmutableArrayContract.__puya_arc4_router__() -> bool:
    block@0: // L73
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@23
    block@1: // abi_routing_L73
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_uint64_array()void" => block@2, method "test_bool_array(uint64)void" => block@3, method "test_fixed_size_tuple_array()void" => block@4, method "test_fixed_size_named_tuple_array()void" => block@5, method "test_dynamic_sized_tuple_array()void" => block@6, method "test_dynamic_sized_named_tuple_array()void" => block@7, method "test_nested_array(uint64,uint64[][])uint64[]" => block@8, method "test_bit_packed_tuples()void" => block@9, method "sum_uints_and_lengths_and_trues(uint64[],bool[],(uint64,bool,bool)[],(uint64,string)[])(uint64,uint64,uint64,uint64)" => block@10, method "test_uint64_return(uint64)uint64[]" => block@11, method "test_bool_return(uint64)bool[]" => block@12, method "test_tuple_return(uint64)(uint64,bool,bool)[]" => block@13, method "test_dynamic_tuple_return(uint64)(uint64,string)[]" => block@14, method "test_convert_to_array_and_back((uint64,bool,bool)[],uint64)(uint64,bool,bool)[]" => block@15, method "test_concat_with_arc4_tuple((uint64,uint64))uint64[]" => block@16, method "test_concat_with_native_tuple((uint64,uint64))uint64[]" => block@17, method "test_dynamic_concat_with_arc4_tuple((string,string))string[]" => block@18, method "test_dynamic_concat_with_native_tuple((string,string))string[]" => block@19, method "test_concat_immutable_dynamic((uint64,string)[],(uint64,string)[])(uint64,string)[]" => block@20, * => block@21}
    block@2: // test_uint64_array_route_L74
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_uint64_array()
        return 1u
    block@3: // test_bool_array_route_L110
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%11#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        test_cases.array.immutable.ImmutableArrayContract.test_bool_array(tmp%11#0)
        return 1u
    block@4: // test_fixed_size_tuple_array_route_L134
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array()
        return 1u
    block@5: // test_fixed_size_named_tuple_array_route_L152
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array()
        return 1u
    block@6: // test_dynamic_sized_tuple_array_route_L167
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (== tmp%20#0 NoOp)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array()
        return 1u
    block@7: // test_dynamic_sized_named_tuple_array_route_L186
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (== tmp%24#0 NoOp)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        let tmp%27#0: bool = (!= tmp%26#0 0u)
        (assert tmp%27#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array()
        return 1u
    block@8: // test_nested_array_route_L205
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (== tmp%28#0 NoOp)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (!= tmp%30#0 0u)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%32#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_uint64[][]%0#0: uint64[][] = (txna ApplicationArgs 2)
        let tmp%33#0: uint64[] = test_cases.array.immutable.ImmutableArrayContract.test_nested_array(tmp%32#0, reinterpret_uint64[][]%0#0)
        let tmp%34#0: bytes = (concat 0x151f7c75 tmp%33#0)
        (log tmp%34#0)
        return 1u
    block@9: // test_bit_packed_tuples_route_L223
        let tmp%35#0: uint64 = (txn OnCompletion)
        let tmp%36#0: bool = (== tmp%35#0 NoOp)
        (assert tmp%36#0) // OnCompletion is not NoOp
        let tmp%37#0: uint64 = (txn ApplicationID)
        let tmp%38#0: bool = (!= tmp%37#0 0u)
        (assert tmp%38#0) // can only call when not creating
        test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples()
        return 1u
    block@10: // sum_uints_and_lengths_and_trues_route_L288
        let tmp%39#0: uint64 = (txn OnCompletion)
        let tmp%40#0: bool = (== tmp%39#0 NoOp)
        (assert tmp%40#0) // OnCompletion is not NoOp
        let tmp%41#0: uint64 = (txn ApplicationID)
        let tmp%42#0: bool = (!= tmp%41#0 0u)
        (assert tmp%42#0) // can only call when not creating
        let reinterpret_uint64[]%0#0: uint64[] = (txna ApplicationArgs 1)
        let reinterpret_bool[]%0#0: bool[] = (txna ApplicationArgs 2)
        let reinterpret_(uint64,bool,bool)[]%0#0: (uint64,bool,bool)[] = (txna ApplicationArgs 3)
        let reinterpret_(uint64,bytes)[]%0#0: (uint64,bytes)[] = (txna ApplicationArgs 4)
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: uint64, elements_to_encode%2#0: uint64, elements_to_encode%3#0: uint64) = test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(reinterpret_uint64[]%0#0, reinterpret_bool[]%0#0, reinterpret_(uint64,bool,bool)[]%0#0, reinterpret_(uint64,bytes)[]%0#0)
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%1#0)
        let val_as_bytes%2#0: bytes[8] = (itob elements_to_encode%2#0)
        let val_as_bytes%3#0: bytes[8] = (itob elements_to_encode%3#0)
        let current_tail_offset%0#0: uint64 = 32u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 val_as_bytes%2#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%3#0)
        let tmp%43#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%4#0)
        (log tmp%43#0)
        return 1u
    block@11: // test_uint64_return_route_L315
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%48#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let tmp%49#0: uint64[] = test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(tmp%48#0)
        let tmp%50#0: bytes = (concat 0x151f7c75 tmp%49#0)
        (log tmp%50#0)
        return 1u
    block@12: // test_bool_return_route_L322
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (== tmp%51#0 NoOp)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (!= tmp%53#0 0u)
        (assert tmp%54#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%55#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let tmp%56#0: bool[] = test_cases.array.immutable.ImmutableArrayContract.test_bool_return(tmp%55#0)
        let tmp%57#0: bytes = (concat 0x151f7c75 tmp%56#0)
        (log tmp%57#0)
        return 1u
    block@13: // test_tuple_return_route_L329
        let tmp%58#0: uint64 = (txn OnCompletion)
        let tmp%59#0: bool = (== tmp%58#0 NoOp)
        (assert tmp%59#0) // OnCompletion is not NoOp
        let tmp%60#0: uint64 = (txn ApplicationID)
        let tmp%61#0: bool = (!= tmp%60#0 0u)
        (assert tmp%61#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%62#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let tmp%63#0: (uint64,bool,bool)[] = test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(tmp%62#0)
        let tmp%64#0: bytes = (concat 0x151f7c75 tmp%63#0)
        (log tmp%64#0)
        return 1u
    block@14: // test_dynamic_tuple_return_route_L336
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (== tmp%65#0 NoOp)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (!= tmp%67#0 0u)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%69#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let tmp%70#0: (uint64,bytes)[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(tmp%69#0)
        let tmp%71#0: bytes = (concat 0x151f7c75 tmp%70#0)
        (log tmp%71#0)
        return 1u
    block@15: // test_convert_to_array_and_back_route_L343
        let tmp%72#0: uint64 = (txn OnCompletion)
        let tmp%73#0: bool = (== tmp%72#0 NoOp)
        (assert tmp%73#0) // OnCompletion is not NoOp
        let tmp%74#0: uint64 = (txn ApplicationID)
        let tmp%75#0: bool = (!= tmp%74#0 0u)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_(uint64,bool,bool)[]%1#0: (uint64,bool,bool)[] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%6#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%76#0: uint64 = (btoi reinterpret_bytes[8]%6#0)
        let tmp%77#0: (uint64,bool,bool)[] = test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(reinterpret_(uint64,bool,bool)[]%1#0, tmp%76#0)
        let tmp%78#0: bytes = (concat 0x151f7c75 tmp%77#0)
        (log tmp%78#0)
        return 1u
    block@16: // test_concat_with_arc4_tuple_route_L353
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (== tmp%79#0 NoOp)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        let tmp%82#0: bool = (!= tmp%81#0 0u)
        (assert tmp%82#0) // can only call when not creating
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let tmp%83#0: bytes[8][] = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(reinterpret_bytes[16]%0#0)
        let tmp%84#0: bytes = (concat 0x151f7c75 tmp%83#0)
        (log tmp%84#0)
        return 1u
    block@17: // test_concat_with_native_tuple_route_L361
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (== tmp%85#0 NoOp)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        let tmp%88#0: bool = (!= tmp%87#0 0u)
        (assert tmp%88#0) // can only call when not creating
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = (extract3 reinterpret_bytes[16]%1#0 0u 8u) // on error: Index access is out of bounds
        let item1%0#0: bytes = (extract3 reinterpret_bytes[16]%1#0 8u 8u) // on error: Index access is out of bounds
        let tmp%89#0: bytes[8][] = test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(item0%0#0, item1%0#0)
        let tmp%90#0: bytes = (concat 0x151f7c75 tmp%89#0)
        (log tmp%90#0)
        return 1u
    block@18: // test_dynamic_concat_with_arc4_tuple_route_L369
        let tmp%91#0: uint64 = (txn OnCompletion)
        let tmp%92#0: bool = (== tmp%91#0 NoOp)
        (assert tmp%92#0) // OnCompletion is not NoOp
        let tmp%93#0: uint64 = (txn ApplicationID)
        let tmp%94#0: bool = (!= tmp%93#0 0u)
        (assert tmp%94#0) // can only call when not creating
        let tmp%95#0: bytes = (txna ApplicationArgs 1)
        let tmp%96#0: bytes[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(tmp%95#0)
        let tmp%97#0: bytes = (concat 0x151f7c75 tmp%96#0)
        (log tmp%97#0)
        return 1u
    block@19: // test_dynamic_concat_with_native_tuple_route_L377
        let tmp%98#0: uint64 = (txn OnCompletion)
        let tmp%99#0: bool = (== tmp%98#0 NoOp)
        (assert tmp%99#0) // OnCompletion is not NoOp
        let tmp%100#0: uint64 = (txn ApplicationID)
        let tmp%101#0: bool = (!= tmp%100#0 0u)
        (assert tmp%101#0) // can only call when not creating
        let tmp%102#0: bytes = (txna ApplicationArgs 1)
        let item_start_offset%0#0: uint64 = (extract_uint16 tmp%102#0 0u)
        let item_end_offset%0#0: uint64 = (extract_uint16 tmp%102#0 2u)
        let item0%1#0: bytes = (substring3 tmp%102#0 item_start_offset%0#0 item_end_offset%0#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 tmp%102#0 2u)
        let item_end_offset%1#0: uint64 = (len tmp%102#0)
        let item1%1#0: bytes = (substring3 tmp%102#0 item_start_offset%1#0 item_end_offset%1#0)
        let tmp%103#0: bytes[] = test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(item0%1#0, item1%1#0)
        let tmp%104#0: bytes = (concat 0x151f7c75 tmp%103#0)
        (log tmp%104#0)
        return 1u
    block@20: // test_concat_immutable_dynamic_route_L385
        let tmp%105#0: uint64 = (txn OnCompletion)
        let tmp%106#0: bool = (== tmp%105#0 NoOp)
        (assert tmp%106#0) // OnCompletion is not NoOp
        let tmp%107#0: uint64 = (txn ApplicationID)
        let tmp%108#0: bool = (!= tmp%107#0 0u)
        (assert tmp%108#0) // can only call when not creating
        let reinterpret_(uint64,bytes)[]%1#0: (uint64,bytes)[] = (txna ApplicationArgs 1)
        let reinterpret_(uint64,bytes)[]%2#0: (uint64,bytes)[] = (txna ApplicationArgs 2)
        let tmp%109#0: (uint64,bytes)[] = test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(reinterpret_(uint64,bytes)[]%1#0, reinterpret_(uint64,bytes)[]%2#0)
        let tmp%110#0: bytes = (concat 0x151f7c75 tmp%109#0)
        (log tmp%110#0)
        return 1u
    block@21: // switch_case_default_L73
        goto block@22
    block@22: // switch_case_next_L73
        goto block@27
    block@23: // bare_routing_L73
        let tmp%111#0: uint64 = (txn OnCompletion)
        switch tmp%111#0 {0u => block@24, * => block@25}
    block@24: // __algopy_default_create_L1
        let tmp%112#0: uint64 = (txn ApplicationID)
        let tmp%113#0: bool = (== tmp%112#0 0u)
        (assert tmp%113#0) // can only call when creating
        test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create()
        return 1u
    block@25: // switch_case_default_L73
        goto block@26
    block@26: // switch_case_next_L73
        goto block@27
    block@27: // after_if_else_L73
        return 0u

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_array() -> void:
    block@0: // L74
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: uint64[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#0)
        let encoded%0#0: uint64[] = encode<uint64>(42u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#1: uint64[] = concat_result%0#0
        let tmp%2#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: uint64 = (- tmp%4#0 1u)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset%0#0: uint64 = (* tmp%5#0 8u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let tmp%6#0: uint64 = (btoi arc4_item%0#0)
        let tmp%7#0: bool = (== tmp%6#0 42u)
        (assert tmp%7#0)
        let arr#2: uint64[] = test_cases.array.immutable.add_x(arr#1, 5u)
        let tmp%8#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%9#0: bool = (== tmp%8#0 6u)
        (assert tmp%9#0)
        let tmp%10#0: uint64 = (extract_uint16 arr#2 0u)
        let tmp%11#0: uint64 = (- tmp%10#0 1u)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#2)
        let item_offset%1#0: uint64 = (* tmp%11#0 8u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 8u) // on error: Index access is out of bounds
        let tmp%12#0: uint64 = (btoi arc4_item%1#0)
        let tmp%13#0: bool = (== tmp%12#0 4u)
        (assert tmp%13#0)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#2)
        let encoded%1#0: uint64[] = encode<uint64>(43u)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#3: uint64[] = concat_result%1#0
        let tmp%14#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%15#0: bool = (== tmp%14#0 7u)
        (assert tmp%15#0)
        let tmp%16#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#3)
        let item_offset%2#0: uint64 = (* tmp%17#0 8u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 8u) // on error: Index access is out of bounds
        let tmp%18#0: uint64 = (btoi arc4_item%2#0)
        let tmp%19#0: bool = (== tmp%18#0 43u)
        (assert tmp%19#0)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#3)
        let item_offset%3#0: uint64 = (* 0u 8u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 8u) // on error: Index access is out of bounds
        let tmp%20#0: uint64 = (btoi arc4_item%3#0)
        let tmp%21#0: bool = (== tmp%20#0 42u)
        (assert tmp%21#0)
        let arr#4: uint64[] = test_cases.array.immutable.pop_x(arr#3, 3u)
        let tmp%22#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%23#0: bool = (== tmp%22#0 4u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%25#0: uint64 = (- tmp%24#0 1u)
        let array_head_and_tail%4#0: bytes = ((extract 2 0) arr#4)
        let item_offset%4#0: uint64 = (* tmp%25#0 8u)
        let arc4_item%4#0: bytes = (extract3 array_head_and_tail%4#0 item_offset%4#0 8u) // on error: Index access is out of bounds
        let tmp%26#0: uint64 = (btoi arc4_item%4#0)
        let tmp%27#0: bool = (== tmp%26#0 2u)
        (assert tmp%27#0)
        let arr#5: uint64[] = test_cases.array.immutable.add_x(arr#4, 10u)
        let tmp%28#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%29#0: bool = (== tmp%28#0 14u)
        (assert tmp%29#0)
        let tmp%30#0: uint64 = (extract_uint16 arr#5 0u)
        let tmp%31#0: uint64 = (- tmp%30#0 1u)
        let array_head_and_tail%5#0: bytes = ((extract 2 0) arr#5)
        let item_offset%5#0: uint64 = (* tmp%31#0 8u)
        let arc4_item%5#0: bytes = (extract3 array_head_and_tail%5#0 item_offset%5#0 8u) // on error: Index access is out of bounds
        let tmp%32#0: uint64 = (btoi arc4_item%5#0)
        let tmp%33#0: bool = (== tmp%32#0 9u)
        (assert tmp%33#0)
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) arr#5)
        let encoded%2#0: uint64[] = encode<uint64>(44u)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 encoded%2#0)
        let byte_len%2#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%2#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let arr#6: uint64[] = concat_result%2#0
        let tmp%34#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%35#0: bool = (== tmp%34#0 15u)
        (assert tmp%35#0)
        let tmp%36#0: uint64 = (extract_uint16 arr#6 0u)
        let tmp%37#0: uint64 = (- tmp%36#0 1u)
        let array_head_and_tail%6#0: bytes = ((extract 2 0) arr#6)
        let item_offset%6#0: uint64 = (* tmp%37#0 8u)
        let arc4_item%6#0: bytes = (extract3 array_head_and_tail%6#0 item_offset%6#0 8u) // on error: Index access is out of bounds
        let tmp%38#0: uint64 = (btoi arc4_item%6#0)
        let tmp%39#0: bool = (== tmp%38#0 44u)
        (assert tmp%39#0)
        let val_as_bytes%0#0: bytes[8] = (itob 23u)
        let assigned_value%0#0: bytes[8] = val_as_bytes%0#0
        let array_length%0#0: uint64 = (extract_uint16 arr#6 0u)
        let index_is_in_bounds%0#0: bool = (< 2u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 arr#6 18u assigned_value%0#0)
        let arr#7: uint64[] = updated_target%0#0
        let tmp%40#0: uint64 = (extract_uint16 arr#7 0u)
        let tmp%41#0: bool = (== tmp%40#0 15u)
        (assert tmp%41#0)
        let array_head_and_tail%7#0: bytes = ((extract 2 0) arr#7)
        let item_offset%7#0: uint64 = (* 2u 8u)
        let arc4_item%7#0: bytes = (extract3 array_head_and_tail%7#0 item_offset%7#0 8u) // on error: Index access is out of bounds
        let tmp%42#0: uint64 = (btoi arc4_item%7#0)
        let tmp%43#0: bool = (== tmp%42#0 23u)
        (assert tmp%43#0)
        (app_global_put "a" arr#7)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_array(length: uint64) -> void:
    block@0: // L110
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: bool[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L115
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: bool[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 length#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L116
        let tmp%2#0: uint64 = (txn NumAppArgs)
        let to_encode%0#0: bool = (== i#1 tmp%2#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let encoded_item%0#0: bytes[1] = encoded_bool%0#0
        let data%0#0: bytes = (concat 0x encoded_item%0#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, data%0#0, 1u, 8u)
        let arr#2: bool[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L115
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L115
        let tmp%3#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%4#0: bool = (== tmp%3#0 length#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (> length#0 0u)
        goto tmp%5#0 ? block@5 : block@6
    block@5: // if_body_L121
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let array_length%0#0: uint64 = (extract_uint16 arr#1 0u)
        let index_is_in_bounds%0#0: bool = (< 0u array_length%0#0)
        (assert index_is_in_bounds%0#0) // Index access is out of bounds
        let is_true%0#0: uint64 = (getbit array_head_and_tail%0#0 0u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let arc4_item%0#0: bytes[1] = encoded_bool%1#0
        let tmp%6#0: bool = (getbit arc4_item%0#0 0u)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // expected element 0 to be False
        goto block@6
    block@6: // after_if_else_L120
        let tmp%8#0: bool = (> length#0 1u)
        goto tmp%8#0 ? block@7 : block@8
    block@7: // if_body_L123
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let index_is_in_bounds%1#0: bool = (< 1u array_length%1#0)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let is_true%1#0: uint64 = (getbit array_head_and_tail%1#0 1u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let arc4_item%1#0: bytes[1] = encoded_bool%2#0
        let tmp%9#0: bool = (getbit arc4_item%1#0 0u)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // expected element 1 to be False
        goto block@8
    block@8: // after_if_else_L122
        let tmp%11#0: bool = (> length#0 2u)
        goto tmp%11#0 ? block@9 : block@10
    block@9: // if_body_L125
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#1)
        let array_length%2#0: uint64 = (extract_uint16 arr#1 0u)
        let index_is_in_bounds%2#0: bool = (< 2u array_length%2#0)
        (assert index_is_in_bounds%2#0) // Index access is out of bounds
        let is_true%2#0: uint64 = (getbit array_head_and_tail%2#0 2u)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let arc4_item%2#0: bytes[1] = encoded_bool%3#0
        let tmp%12#0: bool = (getbit arc4_item%2#0 0u)
        (assert tmp%12#0) // expected element 2 to be True
        goto block@10
    block@10: // after_if_else_L124
        let tmp%13#0: bool = (> length#0 3u)
        goto tmp%13#0 ? block@11 : block@12
    block@11: // if_body_L127
        let tmp%14#0: uint64 = (- length#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#1)
        let array_length%3#0: uint64 = (extract_uint16 arr#1 0u)
        let index_is_in_bounds%3#0: bool = (< tmp%14#0 array_length%3#0)
        (assert index_is_in_bounds%3#0) // Index access is out of bounds
        let is_true%3#0: uint64 = (getbit array_head_and_tail%3#0 tmp%14#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u is_true%3#0)
        let arc4_item%3#0: bytes[1] = encoded_bool%4#0
        let tmp%15#0: bool = (getbit arc4_item%3#0 0u)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // expected last element to be False
        goto block@12
    block@12: // after_if_else_L126
        (app_global_put "g" arr#1)
        let tmp%17#0: bool = (!= length#0 0u)
        goto tmp%17#0 ? block@13 : block@14
    block@13: // if_body_L131
        let (popped%0#0: bytes, data%1#0: bytes) = _puya_lib.arc4.dynamic_array_pop_bit(arr#1)
        let arr#7: bool[] = data%1#0
        let tmp%18#0: uint64 = (extract_uint16 arr#7 0u)
        let tmp%19#0: uint64 = (- length#0 1u)
        let tmp%20#0: bool = (== tmp%18#0 tmp%19#0)
        (assert tmp%20#0)
        goto block@14
    block@14: // after_if_else_L130
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_tuple_array() -> void:
    block@0: // L134
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,uint64)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L139
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,uint64)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L140
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let tmp%2#0: uint64 = (+ i#1 1u)
        let tmp%3#0: uint64 = (+ i#1 2u)
        let encoded%0#0: (uint64,uint64)[] = encode<(uint64,uint64)>(tmp%2#0, tmp%3#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 16u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#2: (uint64,uint64)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L139
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L139
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset%0#0: uint64 = (* 0u 16u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 16u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item1%0#0: bytes = (extract3 arc4_item%0#0 8u 8u) // on error: Index access is out of bounds
        let item1%0%0#0: uint64 = (btoi item1%0#0)
        let tmp%6#0: bool = (== item0%0%0#0 1u)
        let tmp%7#0: bool = (== item1%0%0#0 2u)
        let tmp%8#0: bool = (&& tmp%6#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%10#0: uint64 = (- tmp%9#0 1u)
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let item_offset%1#0: uint64 = (* tmp%10#0 16u)
        let arc4_item%1#0: bytes = (extract3 array_head_and_tail%1#0 item_offset%1#0 16u) // on error: Index access is out of bounds
        let item0%1#0: bytes = (extract3 arc4_item%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item1%1#0: bytes = (extract3 arc4_item%1#0 8u 8u) // on error: Index access is out of bounds
        let item1%1%0#0: uint64 = (btoi item1%1#0)
        let tmp%11#0: bool = (== item0%1%0#0 5u)
        let tmp%12#0: bool = (== item1%1%0#0 6u)
        let tmp%13#0: bool = (&& tmp%11#0 tmp%12#0)
        (assert tmp%13#0)
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_fixed_size(arr#1, 16u)
        let arr#3: (uint64,uint64)[] = data%0#0
        let tmp%14#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%15#0: bool = (== tmp%14#0 4u)
        (assert tmp%15#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#3)
        let item_offset%2#0: uint64 = (* 0u 16u)
        let arc4_item%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%2#0 16u) // on error: Index access is out of bounds
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item1%2#0: bytes = (extract3 arc4_item%2#0 8u 8u) // on error: Index access is out of bounds
        let item1%2%0#0: uint64 = (btoi item1%2#0)
        let tmp%16#0: bool = (== item0%2%0#0 1u)
        let tmp%17#0: bool = (== item1%2%0#0 2u)
        let tmp%18#0: bool = (&& tmp%16#0 tmp%17#0)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = (extract_uint16 arr#3 0u)
        let tmp%20#0: uint64 = (- tmp%19#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#3)
        let item_offset%3#0: uint64 = (* tmp%20#0 16u)
        let arc4_item%3#0: bytes = (extract3 array_head_and_tail%3#0 item_offset%3#0 16u) // on error: Index access is out of bounds
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item1%3#0: bytes = (extract3 arc4_item%3#0 8u 8u) // on error: Index access is out of bounds
        let item1%3%0#0: uint64 = (btoi item1%3#0)
        let tmp%21#0: bool = (== item0%3%0#0 4u)
        let tmp%22#0: bool = (== item1%3%0#0 5u)
        let tmp%23#0: bool = (&& tmp%21#0 tmp%22#0)
        (assert tmp%23#0)
        (app_global_put "c" arr#3)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_fixed_size_named_tuple_array() -> void:
    block@0: // L152
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bool,bool)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L157
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,bool,bool)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L158
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr#1)
        let tmp%2#0: uint64 = (% i#1 2u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let tmp%4#0: uint64 = (* i#1 3u)
        let tmp%5#0: uint64 = (% tmp%4#0 2u)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        let encoded%0#0: (uint64,bool,bool)[] = encode<(uint64,bool,bool)>(i#1, tmp%3#0, tmp%6#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#2: (uint64,bool,bool)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L157
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L157
        let tmp%7#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%8#0: bool = (== tmp%7#0 5u)
        (assert tmp%8#0)
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset%0#0: uint64 = (* 0u 9u)
        let arc4_item%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 9u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let is_true%0#0: uint64 = (getbit arc4_item%0#0 64u)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let item1%0#0: bytes[1] = encoded_bool%0#0
        let item1%0%0#0: bool = (getbit item1%0#0 0u)
        let is_true%1#0: uint64 = (getbit arc4_item%0#0 65u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let item2%0#0: bytes[1] = encoded_bool%1#0
        let item2%0%0#0: bool = (getbit item2%0#0 0u)
        let foo#0: uint64 = item0%0%0#0
        let bar#0: bool = item1%0%0#0
        let baz#0: bool = item2%0%0#0
        let tmp%9#0: bool = (== foo#0 0u)
        (assert tmp%9#0)
        (assert bar#0)
        (assert baz#0)
        (app_global_put "d" arr#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_tuple_array() -> void:
    block@0: // L167
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bytes)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L172
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L173
        let tmp%2#0: uint64 = (+ i#1 1u)
        let tmp%3#0: bytes = (bzero i#1)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let current_tail_offset%0#0: uint64 = 10u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len encoded_tuple%0#0)
        let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let r_count%0#0: uint64 = 1u
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        let arr#2: (uint64,bytes)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L172
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L172
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        (assert 1u) // Step cannot be zero
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L176
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@7)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L177
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%0#0: uint64 = (extract_uint16 arr#1 0u)
        let next_index%0#0: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- array_length%0#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 arc4_item%0#0 8u)
        let item_end_offset%0#0: uint64 = (len arc4_item%0#0)
        let item1%0#0: bytes = (substring3 arc4_item%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%0%0#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%6#0: uint64 = (+ i#4 1u)
        let tmp%7#0: bool = (== item0%0%0#0 tmp%6#0)
        (assert tmp%7#0) // expected 1st element to be correct
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%1#0: uint64 = (* i#4 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let next_index%1#0: uint64 = (+ i#4 1u)
        let has_next%1#0: uint64 = (- array_length%1#0 next_index%1#0) // on error: Index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let arc4_item%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        let item0%1#0: bytes = (extract3 arc4_item%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arc4_item%1#0 8u)
        let item_end_offset%1#0: uint64 = (len arc4_item%1#0)
        let item1%1#0: bytes = (substring3 arc4_item%1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let tmp%8#0: uint64 = (len item1%1%0#0)
        let tmp%9#0: bool = (== tmp%8#0 i#4)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L176
        let i#5: uint64 = (+ i#4 1u)
        goto block@5
    block@8: // after_for_L176
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let arr#4: (uint64,bytes)[] = data%0#0
        let tmp%10#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let item_offset_offset%2#0: uint64 = (* 0u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#4 0u)
        let next_index%2#0: uint64 = (+ 0u 1u)
        let has_next%2#0: uint64 = (- array_length%2#0 next_index%2#0) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bytes = (bzero 0u)
        let tmp%14#0: bool = (== item1%2%0#0 tmp%13#0)
        let tmp%15#0: bool = (&& tmp%12#0 tmp%14#0)
        (assert tmp%15#0) // expected 1, 0
        let tmp%16#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%17#0: uint64 = (- tmp%16#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#4)
        let item_offset_offset%3#0: uint64 = (* tmp%17#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%3#0)
        let array_length%3#0: uint64 = (extract_uint16 arr#4 0u)
        let next_index%3#0: uint64 = (+ tmp%17#0 1u)
        let has_next%3#0: uint64 = (- array_length%3#0 next_index%3#0) // on error: Index access is out of bounds
        let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%3#0 end_offset%3#0)
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%18#0: bool = (== item0%3%0#0 4u)
        let tmp%19#0: bytes = (bzero 3u)
        let tmp%20#0: bool = (== item1%3%0#0 tmp%19#0)
        let tmp%21#0: bool = (&& tmp%18#0 tmp%20#0)
        (assert tmp%21#0) // expected 4, 3
        (app_global_put "e" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_sized_named_tuple_array() -> void:
    block@0: // L186
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr#0: (uint64,bytes)[] = array_data%0#0
        let tmp%0#0: uint64 = (extract_uint16 arr#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L191
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L192
        let tmp%2#0: uint64 = (+ i#1 1u)
        let tmp%3#0: bytes = test_cases.array.immutable.times(i#1)
        let val_as_bytes%0#0: bytes[8] = (itob tmp%2#0)
        let length%0#0: uint64 = (len tmp%3#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%3#0)
        let current_tail_offset%0#0: uint64 = 10u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len encoded_tuple%0#0)
        let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let r_count%0#0: uint64 = 1u
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        let arr#2: (uint64,bytes)[] = concat_result%0#0
        goto block@3
    block@3: // for_footer_L191
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L191
        let tmp%4#0: uint64 = (extract_uint16 arr#1 0u)
        let tmp%5#0: bool = (== tmp%4#0 5u)
        (assert tmp%5#0)
        (assert 1u) // Step cannot be zero
        let i#3: uint64 = 0u
        goto block@5
    block@5: // for_header_L195
        let i#4: uint64 = φ(i#3 <- block@4, i#5 <- block@7)
        let continue_looping%1#0: bool = (< i#4 5u)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L196
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%0#0: uint64 = (* i#4 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let array_length%0#0: uint64 = (extract_uint16 arr#1 0u)
        let next_index%0#0: uint64 = (+ i#4 1u)
        let has_next%0#0: uint64 = (- array_length%0#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%0#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let arc4_item%0#0: bytes = (substring3 array_head_and_tail%0#0 item_offset%0#0 end_offset%0#0)
        let item0%0#0: bytes = (extract3 arc4_item%0#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 arc4_item%0#0 8u)
        let item_end_offset%0#0: uint64 = (len arc4_item%0#0)
        let item1%0#0: bytes = (substring3 arc4_item%0#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%0%0#0: bytes = ((extract 2 0) item1%0#0)
        let tmp%6#0: uint64 = (+ i#4 1u)
        let tmp%7#0: bool = (== item0%0%0#0 tmp%6#0)
        (assert tmp%7#0) // expected 1st element to be correct
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let item_offset_offset%1#0: uint64 = (* i#4 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 item_offset_offset%1#0)
        let array_length%1#0: uint64 = (extract_uint16 arr#1 0u)
        let next_index%1#0: uint64 = (+ i#4 1u)
        let has_next%1#0: uint64 = (- array_length%1#0 next_index%1#0) // on error: Index access is out of bounds
        let end_of_array%1#0: uint64 = (len array_head_and_tail%1#0)
        let next_item_offset_offset%1#0: uint64 = (* next_index%1#0 2u)
        let next_item_offset%1#0: uint64 = (extract_uint16 array_head_and_tail%1#0 next_item_offset_offset%1#0)
        let end_offset%1#0: uint64 = (select end_of_array%1#0 next_item_offset%1#0 has_next%1#0)
        let arc4_item%1#0: bytes = (substring3 array_head_and_tail%1#0 item_offset%1#0 end_offset%1#0)
        let item0%1#0: bytes = (extract3 arc4_item%1#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item_start_offset%1#0: uint64 = (extract_uint16 arc4_item%1#0 8u)
        let item_end_offset%1#0: uint64 = (len arc4_item%1#0)
        let item1%1#0: bytes = (substring3 arc4_item%1#0 item_start_offset%1#0 item_end_offset%1#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let tmp%8#0: bytes = test_cases.array.immutable.times(i#4)
        let tmp%9#0: bool = (== item1%1%0#0 tmp%8#0)
        (assert tmp%9#0) // expected 2nd element to be correct
        goto block@7
    block@7: // for_footer_L195
        let i#5: uint64 = (+ i#4 1u)
        goto block@5
    block@8: // after_for_L195
        let (popped%0#0: bytes, data%0#0: bytes) = _puya_lib.arc4.dynamic_array_pop_dynamic_element(arr#1)
        let arr#4: (uint64,bytes)[] = data%0#0
        let tmp%10#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%11#0: bool = (== tmp%10#0 4u)
        (assert tmp%11#0)
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr#4)
        let item_offset_offset%2#0: uint64 = (* 0u 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 item_offset_offset%2#0)
        let array_length%2#0: uint64 = (extract_uint16 arr#4 0u)
        let next_index%2#0: uint64 = (+ 0u 1u)
        let has_next%2#0: uint64 = (- array_length%2#0 next_index%2#0) // on error: Index access is out of bounds
        let end_of_array%2#0: uint64 = (len array_head_and_tail%2#0)
        let next_item_offset_offset%2#0: uint64 = (* next_index%2#0 2u)
        let next_item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%2#0 next_item_offset_offset%2#0)
        let end_offset%2#0: uint64 = (select end_of_array%2#0 next_item_offset%2#0 has_next%2#0)
        let arc4_item%2#0: bytes = (substring3 array_head_and_tail%2#0 item_offset%2#0 end_offset%2#0)
        let item0%2#0: bytes = (extract3 arc4_item%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%2%0#0: uint64 = (btoi item0%2#0)
        let item_start_offset%2#0: uint64 = (extract_uint16 arc4_item%2#0 8u)
        let item_end_offset%2#0: uint64 = (len arc4_item%2#0)
        let item1%2#0: bytes = (substring3 arc4_item%2#0 item_start_offset%2#0 item_end_offset%2#0)
        let item1%2%0#0: bytes = ((extract 2 0) item1%2#0)
        let tmp%12#0: bool = (== item0%2%0#0 1u)
        let tmp%13#0: bool = (== item1%2%0#0 "")
        let tmp%14#0: bool = (&& tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // expected 1, 0
        let tmp%15#0: uint64 = (extract_uint16 arr#4 0u)
        let tmp%16#0: uint64 = (- tmp%15#0 1u)
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr#4)
        let item_offset_offset%3#0: uint64 = (* tmp%16#0 2u)
        let item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%3#0)
        let array_length%3#0: uint64 = (extract_uint16 arr#4 0u)
        let next_index%3#0: uint64 = (+ tmp%16#0 1u)
        let has_next%3#0: uint64 = (- array_length%3#0 next_index%3#0) // on error: Index access is out of bounds
        let end_of_array%3#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%3#0: uint64 = (* next_index%3#0 2u)
        let next_item_offset%3#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%3#0)
        let end_offset%3#0: uint64 = (select end_of_array%3#0 next_item_offset%3#0 has_next%3#0)
        let arc4_item%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%3#0 end_offset%3#0)
        let item0%3#0: bytes = (extract3 arc4_item%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%3%0#0: uint64 = (btoi item0%3#0)
        let item_start_offset%3#0: uint64 = (extract_uint16 arc4_item%3#0 8u)
        let item_end_offset%3#0: uint64 = (len arc4_item%3#0)
        let item1%3#0: bytes = (substring3 arc4_item%3#0 item_start_offset%3#0 item_end_offset%3#0)
        let item1%3%0#0: bytes = ((extract 2 0) item1%3#0)
        let tmp%17#0: bool = (== item0%3%0#0 4u)
        let tmp%18#0: bool = (== item1%3%0#0 "   ")
        let tmp%19#0: bool = (&& tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // expected 4, 3
        (app_global_put "f" arr#4)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.test_nested_array(arr_to_add: uint64, arr: uint64[][]) -> uint64[]:
    block@0: // L205
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L210
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@7)
        let arr#2: uint64[][] = φ(arr#0 <- block@0, arr#3 <- block@7)
        let continue_looping%0#0: bool = (< i#1 arr_to_add#0)
        goto continue_looping%0#0 ? block@2 : block@8
    block@2: // for_body_L211
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let extra_arr#0: uint64[] = array_data%0#0
        (assert 1u) // Step cannot be zero
        let j#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L212
        let j#1: uint64 = φ(j#0 <- block@2, j#2 <- block@5)
        let extra_arr#1: uint64[] = φ(extra_arr#0 <- block@2, extra_arr#2 <- block@5)
        let continue_looping%1#0: bool = (< j#1 i#1)
        goto continue_looping%1#0 ? block@4 : block@6
    block@4: // for_body_L213
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) extra_arr#1)
        let encoded%0#0: uint64[] = encode<uint64>(j#1)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let extra_arr#2: uint64[] = concat_result%0#0
        goto block@5
    block@5: // for_footer_L212
        let j#2: uint64 = (+ j#1 1u)
        goto block@3
    block@6: // after_for_L212
        let as_bytes%1#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len extra_arr#1)
        let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
        let result%1#0: bytes = (concat result%0#0 extra_arr#1)
        let l_count%0#0: uint64 = (extract_uint16 arr#2 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) arr#2)
        let r_count%0#0: uint64 = 1u
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        let arr#3: uint64[][] = concat_result%1#0
        goto block@7
    block@7: // for_footer_L210
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@8: // after_for_L210
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let totals#0: uint64[] = array_data%1#0
        let array_length%0#0: uint64 = (extract_uint16 arr#2 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@9
    block@9: // for_header_L218
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@8, item_index_internal%0#2 <- block@11)
        let totals#1: uint64[] = φ(totals#0 <- block@8, totals#2 <- block@11)
        let continue_looping%2#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%2#0 ? block@10 : block@12
    block@10: // for_body_L219
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr#2)
        let item_offset_offset%0#0: uint64 = (* item_index_internal%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset_offset%0#0)
        let item_length%0#0: uint64 = (extract_uint16 array_head_and_tail%0#0 item_offset%0#0)
        let item_length_in_bytes%0#0: uint64 = (* item_length%0#0 8u)
        let item_head_tail_length%0#0: uint64 = (+ item_length_in_bytes%0#0 2u)
        let value_at_index%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 item_head_tail_length%0#0)
        let inner_arr#0: uint64[] = value_at_index%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) totals#1)
        let tmp%0#0: uint64 = test_cases.array.immutable.sum_arr(inner_arr#0)
        let encoded%1#0: uint64[] = encode<uint64>(tmp%0#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%2#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let totals#2: uint64[] = concat_result%2#0
        goto block@11
    block@11: // for_footer_L218
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@9
    block@12: // after_for_L218
        return totals#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bit_packed_tuples() -> void:
    block@0: // L223
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let arr2#0: (bool,bool)[] = array_data%0#0
        let array_data%1#0: bytes = (concat 0x0000 0x)
        let arr7#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%1#0
        let array_data%2#0: bytes = (concat 0x0000 0x)
        let arr8#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%2#0
        let array_data%3#0: bytes = (concat 0x0000 0x)
        let arr9#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = array_data%3#0
        let tmp%0#0: uint64 = (extract_uint16 arr2#0 0u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0)
        let tmp%2#0: uint64 = (extract_uint16 arr7#0 0u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (extract_uint16 arr8#0 0u)
        let tmp%5#0: bool = (== tmp%4#0 0u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (extract_uint16 arr9#0 0u)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        (assert tmp%7#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L234
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr2#1: (bool,bool)[] = φ(arr2#0 <- block@0, arr2#2 <- block@3)
        let arr7#1: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr7#0 <- block@0, arr7#2 <- block@3)
        let arr8#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr8#0 <- block@0, arr8#2 <- block@3)
        let arr9#1: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = φ(arr9#0 <- block@0, arr9#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 5u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L235
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) arr2#1)
        let tmp%8#0: bool = (== i#1 0u)
        let tmp%9#0: bool = (== i#1 1u)
        let encoded%0#0: (bool,bool)[] = encode<(bool,bool)>(tmp%8#0, tmp%9#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let len_%0#0: uint64 = (len concatenated%0#0)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr2#2: (bool,bool)[] = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr7#1)
        let tmp%10#0: bool = (== i#1 0u)
        let tmp%11#0: bool = (== i#1 1u)
        let tmp%12#0: bool = (== i#1 2u)
        let tmp%13#0: bool = (== i#1 3u)
        let tmp%14#0: bool = (== i#1 4u)
        let tmp%15#0: bool = (== i#1 5u)
        let tmp%16#0: bool = (== i#1 6u)
        let tmp%17#0: uint64 = (+ i#1 1u)
        let encoded%1#0: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = encode<(uint64,bool,bool,bool,bool,bool,bool,bool,uint64)>(i#1, tmp%10#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0, tmp%15#0, tmp%16#0, tmp%17#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%0#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%0#0 17u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr7#2: (uint64,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%1#0
        let expr_value_trimmed%2#0: bytes = ((extract 2 0) arr8#1)
        let tmp%18#0: bool = (== i#1 0u)
        let tmp%19#0: bool = (== i#1 1u)
        let tmp%20#0: bool = (== i#1 2u)
        let tmp%21#0: bool = (== i#1 3u)
        let tmp%22#0: bool = (== i#1 4u)
        let tmp%23#0: bool = (== i#1 5u)
        let tmp%24#0: bool = (== i#1 6u)
        let tmp%25#0: bool = (== i#1 7u)
        let tmp%26#0: uint64 = (+ i#1 1u)
        let encoded%2#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = encode<(uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)>(i#1, tmp%18#0, tmp%19#0, tmp%20#0, tmp%21#0, tmp%22#0, tmp%23#0, tmp%24#0, tmp%25#0, tmp%26#0)
        let concatenated%2#0: bytes = (concat expr_value_trimmed%2#0 encoded%2#0)
        let byte_len%1#0: uint64 = (len concatenated%2#0)
        let len_%2#0: uint64 = (/ byte_len%1#0 17u)
        let as_bytes%2#0: bytes[8] = (itob len_%2#0)
        let len_16_bit%2#0: bytes = ((extract 6 2) as_bytes%2#0)
        let concat_result%2#0: bytes = (concat len_16_bit%2#0 concatenated%2#0)
        let arr8#2: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%2#0
        let expr_value_trimmed%3#0: bytes = ((extract 2 0) arr9#1)
        let tmp%27#0: bool = (== i#1 0u)
        let tmp%28#0: bool = (== i#1 1u)
        let tmp%29#0: bool = (== i#1 2u)
        let tmp%30#0: bool = (== i#1 3u)
        let tmp%31#0: bool = (== i#1 4u)
        let tmp%32#0: bool = (== i#1 5u)
        let tmp%33#0: bool = (== i#1 6u)
        let tmp%34#0: bool = (== i#1 7u)
        let tmp%35#0: bool = (== i#1 8u)
        let tmp%36#0: uint64 = (+ i#1 1u)
        let encoded%3#0: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = encode<(uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)>(i#1, tmp%27#0, tmp%28#0, tmp%29#0, tmp%30#0, tmp%31#0, tmp%32#0, tmp%33#0, tmp%34#0, tmp%35#0, tmp%36#0)
        let concatenated%3#0: bytes = (concat expr_value_trimmed%3#0 encoded%3#0)
        let byte_len%2#0: uint64 = (len concatenated%3#0)
        let len_%3#0: uint64 = (/ byte_len%2#0 18u)
        let as_bytes%3#0: bytes[8] = (itob len_%3#0)
        let len_16_bit%3#0: bytes = ((extract 6 2) as_bytes%3#0)
        let concat_result%3#0: bytes = (concat len_16_bit%3#0 concatenated%3#0)
        let arr9#2: (uint64,bool,bool,bool,bool,bool,bool,bool,bool,bool,uint64)[] = concat_result%3#0
        goto block@3
    block@3: // for_footer_L234
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L234
        let tmp%37#0: uint64 = (extract_uint16 arr2#1 0u)
        let tmp%38#0: bool = (== tmp%37#0 5u)
        (assert tmp%38#0)
        let tmp%39#0: uint64 = (extract_uint16 arr7#1 0u)
        let tmp%40#0: bool = (== tmp%39#0 5u)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = (extract_uint16 arr8#1 0u)
        let tmp%42#0: bool = (== tmp%41#0 5u)
        (assert tmp%42#0)
        let tmp%43#0: uint64 = (extract_uint16 arr9#1 0u)
        let tmp%44#0: bool = (== tmp%43#0 5u)
        (assert tmp%44#0)
        (app_global_put "bool2" arr2#1)
        (app_global_put "bool7" arr7#1)
        (app_global_put "bool8" arr8#1)
        (app_global_put "bool9" arr9#1)
        return 

subroutine test_cases.array.immutable.ImmutableArrayContract.sum_uints_and_lengths_and_trues(arr1: uint64[], arr2: bool[], arr3: (uint64,bool,bool)[], arr4: (uint64,bytes)[]) -> <uint64, uint64, uint64, uint64>:
    block@0: // L288
        let sum4#0: uint64 = 0u
        let sum3#0: uint64 = 0u
        let sum2#0: uint64 = 0u
        let sum1#0: uint64 = 0u
        let array_length%0#0: uint64 = (extract_uint16 arr1#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L297
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let sum1#1: uint64 = φ(sum1#0 <- block@0, sum1#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L298
        let array_head_and_tail%0#0: bytes = ((extract 2 0) arr1#0)
        let item_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let value_at_index%0#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 8u) // on error: Index access is out of bounds
        let i#0: uint64 = (btoi value_at_index%0#0)
        let sum1#2: uint64 = (+ sum1#1 i#0)
        goto block@3
    block@3: // for_footer_L297
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L297
        let array_length%1#0: uint64 = (extract_uint16 arr2#0 0u)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%1#0
        goto block@5
    block@5: // for_header_L299
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@9)
        let sum2#1: uint64 = φ(sum2#0 <- block@4, sum2#4 <- block@9)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L300
        let array_head_and_tail%1#0: bytes = ((extract 2 0) arr2#0)
        let is_true%0#0: uint64 = (getbit array_head_and_tail%1#0 item_index_internal%1#1)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u is_true%0#0)
        let value_at_index%1#0: bytes[1] = encoded_bool%0#0
        let b#0: bool = (getbit value_at_index%1#0 0u)
        goto b#0 ? block@7 : block@8
    block@7: // if_body_L301
        let sum2#2: uint64 = (+ sum2#1 1u)
        goto block@8
    block@8: // after_if_else_L300
        let sum2#4: uint64 = φ(sum2#1 <- block@6, sum2#2 <- block@7)
        goto block@9
    block@9: // for_footer_L299
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@10: // after_for_L299
        let array_length%2#0: uint64 = (extract_uint16 arr3#0 0u)
        let item_index_internal%2#0: uint64 = 0u
        let reverse_index_internal%2#0: uint64 = array_length%2#0
        goto block@11
    block@11: // for_header_L302
        let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@10, item_index_internal%2#2 <- block@17)
        let sum3#1: uint64 = φ(sum3#0 <- block@10, sum3#9 <- block@17)
        let continue_looping%2#0: bool = (< item_index_internal%2#1 array_length%2#0)
        goto continue_looping%2#0 ? block@12 : block@18
    block@12: // for_body_L303
        let array_head_and_tail%2#0: bytes = ((extract 2 0) arr3#0)
        let item_offset%1#0: uint64 = (* item_index_internal%2#1 9u)
        let value_at_index%2#0: bytes = (extract3 array_head_and_tail%2#0 item_offset%1#0 9u) // on error: Index access is out of bounds
        let item0%0#0: bytes = (extract3 value_at_index%2#0 0u 8u) // on error: Index access is out of bounds
        let item0%0%0#0: uint64 = (btoi item0%0#0)
        let is_true%1#0: uint64 = (getbit value_at_index%2#0 64u)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u is_true%1#0)
        let item1%0#0: bytes[1] = encoded_bool%1#0
        let item1%0%0#0: bool = (getbit item1%0#0 0u)
        let is_true%2#0: uint64 = (getbit value_at_index%2#0 65u)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u is_true%2#0)
        let item2%0#0: bytes[1] = encoded_bool%2#0
        let item2%0%0#0: bool = (getbit item2%0#0 0u)
        let (tup.foo#0: uint64, tup.bar#0: bool, tup.baz#0: bool) = (item0%0%0#0, item1%0%0#0, item2%0%0#0)
        let sum3#2: uint64 = (+ sum3#1 tup.foo#0)
        goto tup.bar#0 ? block@13 : block@14
    block@13: // if_body_L305
        let sum3#3: uint64 = (+ sum3#2 1u)
        goto block@14
    block@14: // after_if_else_L304
        let sum3#4: uint64 = φ(sum3#2 <- block@12, sum3#3 <- block@13)
        goto tup.baz#0 ? block@15 : block@16
    block@15: // if_body_L307
        let sum3#5: uint64 = (+ sum3#4 1u)
        goto block@16
    block@16: // after_if_else_L306
        let sum3#9: uint64 = φ(sum3#4 <- block@14, sum3#5 <- block@15)
        goto block@17
    block@17: // for_footer_L302
        let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
        goto block@11
    block@18: // after_for_L302
        let array_length%3#0: uint64 = (extract_uint16 arr4#0 0u)
        let item_index_internal%3#0: uint64 = 0u
        let reverse_index_internal%3#0: uint64 = array_length%3#0
        goto block@19
    block@19: // for_header_L308
        let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@18, item_index_internal%3#2 <- block@21)
        let sum4#1: uint64 = φ(sum4#0 <- block@18, sum4#3 <- block@21)
        let continue_looping%3#0: bool = (< item_index_internal%3#1 array_length%3#0)
        goto continue_looping%3#0 ? block@20 : block@22
    block@20: // for_body_L309
        let array_head_and_tail%3#0: bytes = ((extract 2 0) arr4#0)
        let item_offset_offset%0#0: uint64 = (* item_index_internal%3#1 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_head_and_tail%3#0 item_offset_offset%0#0)
        let array_length%4#0: uint64 = (extract_uint16 arr4#0 0u)
        let next_index%0#0: uint64 = (+ item_index_internal%3#1 1u)
        let has_next%0#0: uint64 = (- array_length%4#0 next_index%0#0) // on error: Index access is out of bounds
        let end_of_array%0#0: uint64 = (len array_head_and_tail%3#0)
        let next_item_offset_offset%0#0: uint64 = (* next_index%0#0 2u)
        let next_item_offset%0#0: uint64 = (extract_uint16 array_head_and_tail%3#0 next_item_offset_offset%0#0)
        let end_offset%0#0: uint64 = (select end_of_array%0#0 next_item_offset%0#0 has_next%0#0)
        let value_at_index%3#0: bytes = (substring3 array_head_and_tail%3#0 item_offset%2#0 end_offset%0#0)
        let item0%1#0: bytes = (extract3 value_at_index%3#0 0u 8u) // on error: Index access is out of bounds
        let item0%1%0#0: uint64 = (btoi item0%1#0)
        let item_start_offset%0#0: uint64 = (extract_uint16 value_at_index%3#0 8u)
        let item_end_offset%0#0: uint64 = (len value_at_index%3#0)
        let item1%1#0: bytes = (substring3 value_at_index%3#0 item_start_offset%0#0 item_end_offset%0#0)
        let item1%1%0#0: bytes = ((extract 2 0) item1%1#0)
        let (dyn_tup.foo#0: uint64, dyn_tup.bar#0: bytes) = (item0%1%0#0, item1%1%0#0)
        let idx#0: uint64 = item_index_internal%3#1
        let sum4#2: uint64 = (+ sum4#1 dyn_tup.foo#0)
        let tmp%0#0: uint64 = (len dyn_tup.bar#0)
        let sum4#3: uint64 = (+ sum4#2 tmp%0#0)
        let tmp%1#0: uint64 = (len dyn_tup.bar#0)
        let tmp%2#0: bool = (== tmp%1#0 idx#0)
        (assert tmp%2#0) // expected string length to match index
        goto block@21
    block@21: // for_footer_L308
        let item_index_internal%3#2: uint64 = (+ item_index_internal%3#1 1u)
        goto block@19
    block@22: // after_for_L308
        return sum1#1 sum2#1 sum3#1 sum4#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_uint64_return(append: uint64) -> uint64[]:
    block@0: // L315
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: uint64[] = encode<uint64>(1u, 2u, 3u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: uint64[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L318
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: uint64[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L319
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#1)
        let encoded%1#0: uint64[] = encode<uint64>(i#1)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#2: uint64[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L318
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L318
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_bool_return(append: uint64) -> bool[]:
    block@0: // L322
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%0#0: bytes[1] = encoded_bool%0#0
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_item%1#0: bytes[1] = encoded_bool%1#0
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%2#0: bytes[1] = encoded_bool%2#0
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u 0u)
        let encoded_item%3#0: bytes[1] = encoded_bool%3#0
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u 1u)
        let encoded_item%4#0: bytes[1] = encoded_bool%4#0
        let data%0#0: bytes = (concat 0x encoded_item%0#0)
        let data%1#0: bytes = (concat data%0#0 encoded_item%1#0)
        let data%2#0: bytes = (concat data%1#0 encoded_item%2#0)
        let data%3#0: bytes = (concat data%2#0 encoded_item%3#0)
        let data%4#0: bytes = (concat data%3#0 encoded_item%4#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(array_data%0#0, data%4#0, 5u, 8u)
        let arr#0: bool[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L325
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: bool[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L326
        let tmp%0#0: uint64 = (% i#1 2u)
        let to_encode%0#0: bool = (== tmp%0#0 0u)
        let encoded_bool%5#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let encoded_item%5#0: bytes[1] = encoded_bool%5#0
        let data%5#0: bytes = (concat 0x encoded_item%5#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_bits(arr#1, data%5#0, 1u, 8u)
        let arr#2: bool[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L325
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L325
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_tuple_return(append: uint64) -> (uint64,bool,bool)[]:
    block@0: // L329
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: (uint64,bool,bool)[] = encode<(uint64,bool,bool)>(0u, 1u, 0u)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let arr#0: (uint64,bool,bool)[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L332
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,bool,bool)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L333
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) arr#1)
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let encoded%1#0: (uint64,bool,bool)[] = encode<(uint64,bool,bool)>(i#1, tmp%1#0, tmp%3#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 9u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let arr#2: (uint64,bool,bool)[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L332
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L332
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_tuple_return(append: uint64) -> (uint64,bytes)[]:
    block@0: // L336
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let val_as_bytes%0#0: bytes[8] = (itob 0u)
        let length%0#0: uint64 = (len "Hello")
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 "Hello")
        let current_tail_offset%0#0: uint64 = 10u
        let encoded_tuple_buffer%0#0: bytes[0] = 0x
        let encoded_tuple_buffer%1#0: bytes = (concat encoded_tuple_buffer%0#0 val_as_bytes%0#0)
        let as_bytes%1#0: bytes[8] = (itob current_tail_offset%0#0)
        let offset_as_uint16%0#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 offset_as_uint16%0#0)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ current_tail_offset%0#0 data_length%0#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 encoded_value%0#0)
        let encoded_tuple%0#0: bytes = encoded_tuple_buffer%3#0
        let as_bytes%2#0: bytes[8] = (itob 2u)
        let next_item_head%0#0: bytes = ((extract 6 2) as_bytes%2#0)
        let result%0#0: bytes = (concat 0x next_item_head%0#0)
        let next_item_len%0#0: uint64 = (len encoded_tuple%0#0)
        let tail_offset%0#0: uint64 = (+ 2u next_item_len%0#0)
        let result%1#0: bytes = (concat result%0#0 encoded_tuple%0#0)
        let l_count%0#0: uint64 = (extract_uint16 array_data%0#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) array_data%0#0)
        let r_count%0#0: uint64 = 1u
        let r_head_and_tail%0#0: bytes = result%1#0
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        let arr#0: (uint64,bytes)[] = concat_result%0#0
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L339
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr#1: (uint64,bytes)[] = φ(arr#0 <- block@0, arr#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L340
        let tmp%0#0: bytes = test_cases.array.immutable.times(i#1)
        let val_as_bytes%1#0: bytes[8] = (itob i#1)
        let length%1#0: uint64 = (len tmp%0#0)
        let as_bytes%3#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 tmp%0#0)
        let current_tail_offset%2#0: uint64 = 10u
        let encoded_tuple_buffer%4#0: bytes[0] = 0x
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 val_as_bytes%1#0)
        let as_bytes%4#0: bytes[8] = (itob current_tail_offset%2#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%4#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 offset_as_uint16%1#0)
        let data_length%1#0: uint64 = (len encoded_value%1#0)
        let current_tail_offset%3#0: uint64 = (+ current_tail_offset%2#0 data_length%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat encoded_tuple_buffer%6#0 encoded_value%1#0)
        let encoded_tuple%1#0: bytes = encoded_tuple_buffer%7#0
        let as_bytes%5#0: bytes[8] = (itob 2u)
        let next_item_head%1#0: bytes = ((extract 6 2) as_bytes%5#0)
        let result%2#0: bytes = (concat 0x next_item_head%1#0)
        let next_item_len%1#0: uint64 = (len encoded_tuple%1#0)
        let tail_offset%1#0: uint64 = (+ 2u next_item_len%1#0)
        let result%3#0: bytes = (concat result%2#0 encoded_tuple%1#0)
        let l_count%1#0: uint64 = (extract_uint16 arr#1 0u)
        let l_head_and_tail%1#0: bytes = ((extract 2 0) arr#1)
        let r_count%1#0: uint64 = 1u
        let r_head_and_tail%1#0: bytes = result%3#0
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%1#0, l_head_and_tail%1#0, r_count%1#0, r_head_and_tail%1#0)
        let arr#2: (uint64,bytes)[] = concat_result%1#0
        goto block@3
    block@3: // for_footer_L339
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L339
        return arr#1

subroutine test_cases.array.immutable.ImmutableArrayContract.test_convert_to_array_and_back(arr: (uint64,bool,bool)[], append: uint64) -> (uint64,bool,bool)[]:
    block@0: // L343
        let encoded%0#0: (uint64,bool,bool)[] = encode<(uint64,bool,bool)>()
        let slot%0#0: (uint64,bool,bool)[]* = new()
        write(slot%0#0, encoded%0#0)
        let mutable#0: (uint64,bool,bool)[]* = slot%0#0
        let expr_value_trimmed%0#0: (uint64,bool,bool)[] = ((extract 2 0) arr#0)
        let slot_contents%0#0: (uint64,bool,bool)[] = read(mutable#0)
        let extended%0#0: (uint64,bool,bool)[] = slot_contents%0#0.concat(expr_value_trimmed%0#0)
        write(mutable#0, extended%0#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L349
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 append#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L350
        let tmp%0#0: uint64 = (% i#1 2u)
        let tmp%1#0: bool = (== tmp%0#0 0u)
        let tmp%2#0: uint64 = (% i#1 3u)
        let tmp%3#0: bool = (== tmp%2#0 0u)
        let encoded%1#0: (uint64,bool,bool)[] = encode<(uint64,bool,bool)>(i#1, tmp%1#0, tmp%3#0)
        let slot_contents%1#0: (uint64,bool,bool)[] = read(mutable#0)
        let extended%1#0: (uint64,bool,bool)[] = slot_contents%1#0.concat(encoded%1#0)
        write(mutable#0, extended%1#0)
        goto block@3
    block@3: // for_footer_L349
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L349
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) array_data%0#0)
        let slot_contents%2#0: (uint64,bool,bool)[] = read(mutable#0)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%1#0 slot_contents%2#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 9u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        return concat_result%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_arc4_tuple(arg: bytes[16]) -> bytes[8][]:
    block@0: // L353
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(0x0000000000000001, 0x0000000000000002)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let prefix#0: bytes[8][] = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) prefix#0)
        let encoded%1#0: bytes[8][] = encode<bytes[8]>(arg#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let result#0: bytes[8][] = concat_result%1#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_with_native_tuple(arg.0: bytes[8], arg.1: bytes[8]) -> bytes[8][]:
    block@0: // L361
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let expr_value_trimmed%0#0: bytes = ((extract 2 0) array_data%0#0)
        let encoded%0#0: bytes[8][] = encode<bytes[8]>(0x0000000000000001, 0x0000000000000002)
        let concatenated%0#0: bytes = (concat expr_value_trimmed%0#0 encoded%0#0)
        let byte_len%0#0: uint64 = (len concatenated%0#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let concat_result%0#0: bytes = (concat len_16_bit%0#0 concatenated%0#0)
        let prefix#0: bytes[8][] = concat_result%0#0
        let expr_value_trimmed%1#0: bytes = ((extract 2 0) prefix#0)
        let encoded%1#0: bytes[8][] = encode<bytes[8]>(arg.0#0, arg.1#0)
        let concatenated%1#0: bytes = (concat expr_value_trimmed%1#0 encoded%1#0)
        let byte_len%1#0: uint64 = (len concatenated%1#0)
        let len_%1#0: uint64 = (/ byte_len%1#0 8u)
        let as_bytes%1#0: bytes[8] = (itob len_%1#0)
        let len_16_bit%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let concat_result%1#0: bytes = (concat len_16_bit%1#0 concatenated%1#0)
        let result#0: bytes[8][] = concat_result%1#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_arc4_tuple(arg: bytes) -> bytes[]:
    block@0: // L369
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let data%0#0: bytes = (concat 0x 0x000161)
        let data%1#0: bytes = (concat data%0#0 0x000162)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_data%0#0, data%1#0, 2u)
        let prefix#0: bytes[] = concat_result%0#0
        let start_of_tail%0#0: uint64 = (* 2u 2u)
        let total_length%0#0: uint64 = (len arg#0)
        let data%2#0: bytes = (substring3 arg#0 start_of_tail%0#0 total_length%0#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%2#0, 2u)
        let result#0: bytes[] = concat_result%1#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_dynamic_concat_with_native_tuple(arg.0: bytes, arg.1: bytes) -> bytes[]:
    block@0: // L377
        let array_data%0#0: bytes = (concat 0x0000 0x)
        let data%0#0: bytes = (concat 0x 0x000161)
        let data%1#0: bytes = (concat data%0#0 0x000162)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(array_data%0#0, data%1#0, 2u)
        let prefix#0: bytes[] = concat_result%0#0
        let data%2#0: bytes = (concat 0x arg.0#0)
        let data%3#0: bytes = (concat data%2#0 arg.1#0)
        let concat_result%1#0: bytes = _puya_lib.arc4.dynamic_array_concat_byte_length_head(prefix#0, data%3#0, 2u)
        let result#0: bytes[] = concat_result%1#0
        return result#0

subroutine test_cases.array.immutable.ImmutableArrayContract.test_concat_immutable_dynamic(imm1: (uint64,bytes)[], imm2: (uint64,bytes)[]) -> (uint64,bytes)[]:
    block@0: // L385
        let l_count%0#0: uint64 = (extract_uint16 imm1#0 0u)
        let l_head_and_tail%0#0: bytes = ((extract 2 0) imm1#0)
        let r_count%0#0: uint64 = (extract_uint16 imm2#0 0u)
        let r_head_and_tail%0#0: bytes = ((extract 2 0) imm2#0)
        let concat_result%0#0: bytes = _puya_lib.arc4.dynamic_array_concat_dynamic_element(l_count%0#0, l_head_and_tail%0#0, r_count%0#0, r_head_and_tail%0#0)
        return concat_result%0#0

subroutine test_cases.array.immutable.ImmutableArrayContract.__algopy_default_create() -> void:
    block@0: // L1
        return 