#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 2 6
    // array/unused_opt_allowed.py:12
    // class AbiCallContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@5
    pushbytes 0x06598bc6 // method "test_implicit_conversion_abi_call(uint64[],uint64)void"
    txna ApplicationArgs 0
    match main_test_implicit_conversion_abi_call_route@3
    err

main_test_implicit_conversion_abi_call_route@3:
    // array/unused_opt_allowed.py:13
    // @arc4.abimethod()
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test_implicit_conversion_abi_call

main___algopy_default_create@5:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.array.unused_opt_allowed.AbiCallContract.test_implicit_conversion_abi_call[routing]() -> void:
test_implicit_conversion_abi_call:
    // array/unused_opt_allowed.py:13
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    dup
    cover 2
    // array/unused_opt_allowed.py:17-18
    // # itxn requires remove_unused_variables
    // arc4.abi_call("dont_call(uint64[])uint64", arr, app_id=app)
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x75b694f3 // method "dont_call(uint64[])uint64"
    itxn_field ApplicationArgs
    dup
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // array/unused_opt_allowed.py:21
    // nested_arr = nested_arr.append(arr)
    pushbytes 0x0002
    swap
    concat
    pushbytes 0x
    intc_0 // 0

test_implicit_conversion_abi_call_for_header@2:
    dup
    intc_0 // 0
    <
    bz test_implicit_conversion_abi_call_after_for@4
    // array/unused_opt_allowed.py:21
    // nested_arr = nested_arr.append(arr)
    pushbytes 0x
    dig 1
    dup
    cover 2
    extract_uint16
    intc_1 // 2
    +
    itob
    extract 6 2
    dig 3
    swap
    concat
    bury 3
    intc_1 // 2
    +
    bury 1
    b test_implicit_conversion_abi_call_for_header@2

test_implicit_conversion_abi_call_after_for@4:
    intc_0 // 0
    bury 1

test_implicit_conversion_abi_call_for_header@5:
    dup
    intc_1 // 2
    <
    bz test_implicit_conversion_abi_call_after_for@7
    dig 2
    dig 1
    dup
    cover 2
    extract_uint16
    itob
    extract 6 2
    dig 3
    swap
    concat
    bury 3
    intc_1 // 2
    +
    bury 1
    b test_implicit_conversion_abi_call_for_header@5

test_implicit_conversion_abi_call_after_for@7:
    pushbytes 0x0001
    dig 2
    concat
    dig 3
    extract 2 0
    concat
    // array/unused_opt_allowed.py:22
    // arc4.abi_call("dont_call(uint64[][])uint64", nested_arr, app_id=app)
    itxn_begin
    dig 4
    dup
    cover 2
    itxn_field ApplicationID
    pushbytes 0xe92b1d53 // method "dont_call(uint64[][])uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // array/unused_opt_allowed.py:26
    // arc4.abi_call("dont_call((uint64[],uint64)[])uint64", indirect_nested_arr, app_id=app)
    itxn_begin
    itxn_field ApplicationID
    pushbytes 0x165312d8 // method "dont_call((uint64[],uint64)[])uint64"
    itxn_field ApplicationArgs
    // array/unused_opt_allowed.py:24
    // indirect_nested_arr = ImmutableArray[MyTuple]()
    pushbytes 0x0000
    itxn_field ApplicationArgs
    // array/unused_opt_allowed.py:26
    // arc4.abi_call("dont_call((uint64[],uint64)[])uint64", indirect_nested_arr, app_id=app)
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // array/unused_opt_allowed.py:13
    // @arc4.abimethod()
    pushint 1 // 1
    return
