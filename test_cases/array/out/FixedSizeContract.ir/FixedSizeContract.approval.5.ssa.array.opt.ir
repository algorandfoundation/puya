main test_cases.array.fixed_size.FixedSizeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@9
    block@4: // abi_routing_L24
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_array(uint64,uint64,uint64,uint64)uint64" => block@5, method "test_bool_array(uint64)uint64" => block@6, method "test_arc4_conversion(uint64)uint64[]" => block@7, method "sum_array(uint64[])uint64" => block@8, * => block@11}
    block@5: // test_array_route_L28
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 3)
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 4)
        let tmp%8#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        let to_encode%0#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.test_array(reinterpret_bytes[8]%0#0, tmp%7#0, reinterpret_bytes[8]%2#0, tmp%8#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%9#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@6: // test_bool_array_route_L43
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let to_encode%1#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.test_bool_array(tmp%14#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let tmp%15#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%15#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // test_arc4_conversion_route_L57
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_bytes[8]%5#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_bytes[8]%5#0)
        let tmp%21#0: bytes = test_cases.array.fixed_size.FixedSizeContract.test_arc4_conversion(tmp%20#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 tmp%21#0)
        (log tmp%22#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@8: // sum_array_route_L75
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let tmp%27#0: bytes = (txna ApplicationArgs 1)
        let to_encode%2#0: uint64 = test_cases.array.fixed_size.FixedSizeContract.sum_array(tmp%27#0)
        let val_as_bytes%2#0: bytes[8] = (itob to_encode%2#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 val_as_bytes%2#0)
        (log tmp%28#0)
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@12
    block@9: // bare_routing_L24
        let tmp%29#0: uint64 = (txn OnCompletion)
        goto tmp%29#0 ? block@11 : block@10
    block@10: // __algopy_default_create_L1
        let tmp%30#0: uint64 = (txn ApplicationID)
        let tmp%31#0: bool = (! tmp%30#0)
        (assert tmp%31#0) // can only call when creating
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@12
    block@11: // after_if_else_L24
        let test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#5: bool = 0u
        goto block@12
    block@12: // after_inlined_test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#0 <- block@5, test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#1 <- block@6, test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#2 <- block@7, test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#3 <- block@8, test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#4 <- block@10, test_cases.array.fixed_size.FixedSizeContract.__puya_arc4_router__%0#5 <- block@11)
        return tmp%0#1

subroutine test_cases.array.fixed_size.FixedSizeContract.test_array(x1: bytes[8], y1: uint64, x2: bytes[8], y2: uint64) -> uint64:
    block@0: // L28
        (app_global_put "count" 0u)
        let (tmp%0#0: uint64, tmp%1#0: uint64, tmp%2#0: bytes[32], tmp%3#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let (tmp%4#0: uint64, tmp%5#0: uint64, tmp%6#0: bytes[32], tmp%7#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let (tmp%8#0: uint64, tmp%9#0: uint64, tmp%10#0: bytes[32], tmp%11#0: bytes[16]) = test_cases.array.fixed_size.FixedSizeContract.xtra()
        let sub_item%1#0: bytes[8] = (itob tmp%0#0)
        let encoded%2#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat 0x00000000000000000000000000000000 sub_item%1#0)
        let sub_item%2#0: bytes[8] = (itob tmp%1#0)
        let encoded%3#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%2#0 sub_item%2#0)
        let encoded%4#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%3#0 tmp%2#0)
        let encoded%5#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%4#0 tmp%3#0)
        let sub_item%3#0: bytes[8] = (itob y1#0)
        let encoded%7#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat x1#0 sub_item%3#0)
        let sub_item%4#0: bytes[8] = (itob tmp%4#0)
        let encoded%8#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%7#0 sub_item%4#0)
        let sub_item%5#0: bytes[8] = (itob tmp%5#0)
        let encoded%9#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%8#0 sub_item%5#0)
        let encoded%10#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%9#0 tmp%6#0)
        let encoded%11#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%10#0 tmp%7#0)
        let data%1#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%5#0 encoded%11#0)
        let sub_item%6#0: bytes[8] = (itob y2#0)
        let encoded%13#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat x2#0 sub_item%6#0)
        let sub_item%7#0: bytes[8] = (itob tmp%8#0)
        let encoded%14#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%13#0 sub_item%7#0)
        let sub_item%8#0: bytes[8] = (itob tmp%9#0)
        let encoded%15#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%14#0 sub_item%8#0)
        let encoded%16#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%15#0 tmp%10#0)
        let encoded%17#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat encoded%16#0 tmp%11#0)
        let data%2#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = (concat data%1#0 encoded%17#0)
        let path#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[]* = new()
        write(path#0, data%2#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L36
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 3u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L37
        let slot_contents%0#0: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%0#1: uint64 = (* i#1 80u)
        let array%value%0#1: bytes = (extract3 slot_contents%0#0 array%bytes_index%0#1 80u)
        let array%sub_item%6#1: uint64 = (extract_uint64 array%value%0#1 24u)
        let i#2: uint64 = (+ i#1 1u)
        let tmp%19#0: bool = (== array%sub_item%6#1 i#2)
        (assert tmp%19#0)
        let reinterpret_biguint%0#0: biguint = ((extract 64 8) array%value%0#1)
        let tmp%26#0: uint64 = (+ i#1 2u)
        let tmp%27#0: biguint = (itob tmp%26#0)
        let tmp%28#0: bool = (b== reinterpret_biguint%0#0 tmp%27#0)
        (assert tmp%28#0)
        let reinterpret_biguint%1#0: biguint = ((extract 72 8) array%value%0#1)
        let tmp%37#0: uint64 = (* i#2 i#2)
        let tmp%38#0: biguint = (itob tmp%37#0)
        let tmp%39#0: bool = (b== reinterpret_biguint%1#0 tmp%38#0)
        (assert tmp%39#0)
        goto block@1
    block@4: // after_for_L36
        let slot_contents%0#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let last_point.x#0: bytes[8] = ((extract 0 8) slot_contents%0#1)
        let last_point.y#0: uint64 = (extract_uint64 slot_contents%0#1 8u)
        let length#0: uint64 = 0u
        let array%bytes_len%0#1: uint64 = (len slot_contents%0#1)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 80u)
        let point_idx#0: uint64 = 1u
        goto block@6
    block@6: // for_header_L101
        let point_idx#1: uint64 = φ(point_idx#0 <- block@4, point_idx#2 <- block@13)
        let length#3: uint64 = φ(length#0 <- block@4, length#4 <- block@13)
        let continue_looping%0#1: bool = (< point_idx#1 array%array_len%0#1)
        goto continue_looping%0#1 ? block@7 : block@14
    block@7: // for_body_L102
        let slot_contents%2#1: (bytes[8],uint64,(uint64,uint64,bytes[32],bytes[16]))[] = read(path#0)
        let array%bytes_index%4#1: uint64 = (* point_idx#1 80u)
        let array%value%4#1: bytes = (extract3 slot_contents%2#1 array%bytes_index%4#1 80u)
        let point.x#0: bytes[8] = (extract3 slot_contents%2#1 array%bytes_index%4#1 8u)
        let point.y#0: uint64 = (extract_uint64 array%value%4#1 8u)
        let tmp%1#1: bool = (b< point.x#0 last_point.x#0)
        goto tmp%1#1 ? block@8 : block@9
    block@8: // if_body_L104
        let tmp%2#1: uint64 = (extract_uint64 slot_contents%0#1 0u)
        let tmp%3#1: uint64 = (extract_uint64 slot_contents%2#1 array%bytes_index%4#1)
        let dx#0: uint64 = (- tmp%2#1 tmp%3#1)
        goto block@10
    block@9: // else_body_L106
        let tmp%4#1: uint64 = (extract_uint64 slot_contents%2#1 array%bytes_index%4#1)
        let tmp%5#1: uint64 = (extract_uint64 slot_contents%0#1 0u)
        let dx#1: uint64 = (- tmp%4#1 tmp%5#1)
        goto block@10
    block@10: // after_if_else_L103
        let dx#3: uint64 = φ(dx#0 <- block@8, dx#1 <- block@9)
        let tmp%6#1: bool = (< point.y#0 last_point.y#0)
        goto tmp%6#1 ? block@11 : block@12
    block@11: // if_body_L108
        let dy#0: uint64 = (- last_point.y#0 point.y#0)
        goto block@13
    block@12: // else_body_L110
        let dy#1: uint64 = (- point.y#0 last_point.y#0)
        goto block@13
    block@13: // after_if_else_L107
        let dy#2: uint64 = φ(dy#0 <- block@11, dy#1 <- block@12)
        let tmp%7#1: uint64 = (* dx#3 dx#3)
        let tmp%8#1: uint64 = (* dy#2 dy#2)
        let tmp%9#1: uint64 = (+ tmp%7#1 tmp%8#1)
        let tmp%10#1: uint64 = (sqrt tmp%9#1)
        let length#4: uint64 = (+ length#3 tmp%10#1)
        let point_idx#2: uint64 = (+ point_idx#1 1u)
        goto block@6
    block@14: // after_for_L101
        return length#3

subroutine test_cases.array.fixed_size.FixedSizeContract.test_bool_array(length: uint64) -> uint64:
    block@0: // L43
        let arr#0: bool[]* = new()
        write(arr#0, 0x)
        let tmp%2#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L48
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L49
        let tmp%3#0: uint64 = (% i#1 2u)
        let tmp%4#0: bool = (! tmp%3#0)
        let sub_item%0#0: bytes[8] = (itob tmp%4#0)
        let sub_item_truncated%0#0: bytes = ((extract 7 1) sub_item%0#0)
        let slot_contents%1#0: bool[] = read(arr#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%1#0 sub_item_truncated%0#0) // on error: max array length exceeded
        write(arr#0, array%array_contents%0#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L48
        let slot_contents%2#0: bool[] = read(arr#0)
        let array%bytes_len%1#1: uint64 = (len slot_contents%2#0)
        let array%array_len%1#1: uint64 = (/ array%bytes_len%1#1 1u)
        let tmp%6#0: bool = (== array%array_len%1#1 length#0)
        (assert tmp%6#0) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L52
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array%array_len%1#1)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L53
        let slot_contents%4#0: bool[] = read(arr#0)
        let val#0: bool = (getbyte slot_contents%4#0 item_index_internal%0#1)
        goto val#0 ? block@7 : block@8
    block@7: // if_body_L54
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L53
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L52
        return count#1

subroutine test_cases.array.fixed_size.FixedSizeContract.test_arc4_conversion(length: uint64) -> bytes:
    block@0: // L57
        let arr#0: bytes[8][]* = new()
        write(arr#0, 0x)
        let tmp%2#0: uint64 = (+ length#0 1u)
        let i#0: uint64 = 1u
        goto block@1
    block@1: // for_header_L62
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 tmp%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L63
        let val_as_bytes%0#0: bytes[8] = (itob i#1)
        let slot_contents%1#0: bytes[8][] = read(arr#0)
        let array%array_contents%0#1: bytes = (concat slot_contents%1#0 val_as_bytes%0#0) // on error: max array length exceeded
        write(arr#0, array%array_contents%0#1)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L62
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let array%bytes_len%1#1: uint64 = (len slot_contents%2#0)
        let array%array_len%1#1: uint64 = (/ array%bytes_len%1#1 8u)
        let tmp%4#0: bool = (== array%array_len%1#1 length#0)
        (assert tmp%4#0) // expected correct length
        let count#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L66
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@4, item_index_internal%0#2 <- block@8)
        let count#1: uint64 = φ(count#0 <- block@4, count#3 <- block@8)
        let continue_looping%1#0: bool = (< item_index_internal%0#1 array%array_len%1#1)
        goto continue_looping%1#0 ? block@6 : block@10
    block@6: // for_body_L67
        let slot_contents%4#0: bytes[8][] = read(arr#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#1 8u)
        let val#0: bytes[8] = (extract3 slot_contents%4#0 array%bytes_index%0#1 8u)
        let tmp%5#0: bool = (!= val#0 0x0000000000000000)
        goto tmp%5#0 ? block@7 : block@8
    block@7: // if_body_L68
        let count#2: uint64 = (+ count#1 1u)
        goto block@8
    block@8: // after_if_else_L67
        let count#3: uint64 = φ(count#1 <- block@6, count#2 <- block@7)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@5
    block@10: // after_for_L66
        let slot_contents%5#0: bytes[8][] = read(arr#0)
        let byte_len%0#0: uint64 = (len slot_contents%5#0)
        let len_%0#0: uint64 = (/ byte_len%0#0 8u)
        let as_bytes%0#0: bytes[8] = (itob len_%0#0)
        let len_16_bit%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let arc4_arr#1: bytes = (concat len_16_bit%0#0 slot_contents%5#0)
        return arc4_arr#1

subroutine test_cases.array.fixed_size.FixedSizeContract.sum_array(arc4_arr: bytes) -> uint64:
    block@0: // L75
        let arr#0: bytes[8][]* = new()
        let expr_value_trimmed%0#0: bytes[8][] = ((extract 2 0) arc4_arr#0)
        write(arr#0, expr_value_trimmed%0#0)
        let total#0: uint64 = 0u
        let array%bytes_len%0#1: uint64 = (len expr_value_trimmed%0#0)
        let array%array_len%0#1: uint64 = (/ array%bytes_len%0#1 8u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L81
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array%array_len%0#1)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L82
        let slot_contents%2#0: bytes[8][] = read(arr#0)
        let array%bytes_index%0#1: uint64 = (* item_index_internal%0#1 8u)
        let tmp%0#0: uint64 = (extract_uint64 slot_contents%2#0 array%bytes_index%0#1)
        let total#2: uint64 = (+ total#1 tmp%0#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L81
        return total#1

subroutine test_cases.array.fixed_size.FixedSizeContract.xtra() -> <uint64, uint64, bytes[32], bytes[16]>:
    block@0: // L86
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%0#0) // check self.count exists
        let new_state_value%0#0: uint64 = (+ maybe_value%0#0 1u)
        (app_global_put "count" new_state_value%0#0)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%1#0) // check self.count exists
        let tmp%1#0: bytes[32] = (txn Sender)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%2#0) // check self.count exists
        let to_encode%0#0: uint64 = (+ maybe_value%2#0 1u)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%3#0) // check self.count exists
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "count")
        (assert maybe_exists%4#0) // check self.count exists
        let to_encode%1#0: uint64 = (* maybe_value%3#0 maybe_value%4#0)
        let val_as_bytes%1#0: bytes[8] = (itob to_encode%1#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 val_as_bytes%1#0)
        return tmp%0#0 maybe_value%1#0 tmp%1#0 encoded_tuple_buffer%2#0