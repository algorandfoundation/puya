contract test_cases.simple.contract.MyContract:
    program approval:
        subroutine test_cases.simple.contract.MyContract.approval_program() -> uint64:
            block@0: // L9
                let a#0: uint64 = 3u
                let b#0: uint64 = 20u
                let tmp%0#0: bool = (== a#0 3u)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // if_body_L13
                let tmp%1#0: bool = (< b#0 2u)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // if_body_L14
                let b#1: uint64 = 5u
                let tmp%2#0: uint64 = (+ a#0 b#1)
                return tmp%2#0
            block@3: // else_body_L17
                let b#2: uint64 = (* 2u a#0)
                let reinterpret_bool%0#0: bool = (* 14u b#2)
                goto reinterpret_bool%0#0 ? block@4 : block@5
            block@4: // if_body_L19
                return 2u
            block@5: // else_body_L21
                return 3u
            block@6: // else_body_L23
                return 4u
    
    program clear-state:
        subroutine test_cases.simple.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L25
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (! tmp%0#0)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = test_cases.simple.subs.zero()
                let tmp%3#0: uint64 = test_cases.simple.pkg_a.pkg_1.subs.one()
                let tmp%4#0: uint64 = (* tmp%2#0 tmp%3#0)
                return tmp%4#0
        
        subroutine test_cases.simple.subs.zero() -> uint64:
            block@0: // L4
                return 0u
        
        subroutine test_cases.simple.pkg_a.pkg_1.subs.one() -> uint64:
            block@0: // L4
                return 1u