{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;AASY;;AAAiB;AAAjB;AAAJ;AACI;AAAiB;;AAAjB;AAAJ;AACQ;AAAL;AAAX;;;AACe;AAAI;AAAJ;AAAf;;;AACoB;AAAI;AAAJ;AACG;;AAAA;AAAP;AAEI;AAAA;;AAAA;AACA;;AAAD;AAAA;;AAAA;AAAnB;;;AAC2B;AAAP;AAEO;AAAP;AAED;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.simple.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 3 4"
    },
    "6": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "8": {
      "op": "intc_0 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "1",
        "2"
      ]
    },
    "9": {
      "op": "+",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "10": {
      "op": "dup",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "11": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "4"
      ]
    },
    "12": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "4",
        "5",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "4",
        "5"
      ]
    },
    "14": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "b#0"
      ]
    },
    "15": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0"
      ]
    },
    "16": {
      "op": "intc_1 // 3",
      "defined_out": [
        "3",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0",
        "3"
      ]
    },
    "17": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "bz main_else_body@6",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "21": {
      "block": "main_if_body@1",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "dup",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0"
      ]
    },
    "22": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0",
        "2"
      ]
    },
    "23": {
      "op": "<",
      "defined_out": [
        "b#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%1#0"
      ]
    },
    "24": {
      "op": "bz main_else_body@3",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "27": {
      "block": "main_if_body@2",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "intc_1 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "3"
      ]
    },
    "28": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "3"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "3",
        "2"
      ]
    },
    "29": {
      "op": "+",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0"
      ]
    },
    "30": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0",
        "a#0"
      ]
    },
    "32": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "34": {
      "block": "main_else_body@3",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "intc_0 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "2"
      ]
    },
    "35": {
      "op": "dig 2",
      "defined_out": [
        "2",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "2",
        "a#0"
      ]
    },
    "37": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0"
      ]
    },
    "38": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "b#0",
        "14"
      ]
    },
    "40": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%3#0"
      ]
    },
    "41": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "b#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%3#0",
        "0"
      ]
    },
    "43": {
      "op": "!=",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "44": {
      "op": "bz main_else_body@5",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "47": {
      "block": "main_if_body@4",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "intc_0 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "2"
      ]
    },
    "48": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "49": {
      "block": "main_else_body@5",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "intc_1 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "3"
      ]
    },
    "50": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "51": {
      "block": "main_else_body@6",
      "stack_in": [
        "a#0",
        "b#0"
      ],
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "4"
      ]
    },
    "52": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    }
  }
}