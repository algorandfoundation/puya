contract UIntNOrdering
{
  approval_program(): bool
  {
    test_cases.arc4_numeric_comparisons.uint_n::check_both_uint_n(1arc4u8, 2arc4u64)
    test_cases.arc4_numeric_comparisons.uint_n::check_mixed(1arc4u8, 2arc4n264)
    test_cases.arc4_numeric_comparisons.uint_n::check_both_big_uint_n(1arc4n256, 2arc4n264)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine check_both_uint_n(one: arc4.byte, two: arc4.uint64): void
{
  one_uint64: uint64 = 1u
  one_biguint: biguint = 1n
  two_uint64: uint64 = 2u
  two_biguint: biguint = 2n
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) == itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) == one_biguint)
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) == itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) == two_biguint))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) != itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) != one_biguint))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) != itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) != two_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) <= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) <= one_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) <= itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) <= two_biguint)
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) < itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) < one_biguint))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) < itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) < two_biguint)
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) >= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) >= one_biguint)
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) >= itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) >= two_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) > itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > one_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) > itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > two_biguint))
}

subroutine check_mixed(one: arc4.byte, two: arc4.uint264): void
{
  one_uint64: uint64 = 1u
  one_biguint: biguint = 1n
  two_uint64: uint64 = 2u
  two_biguint: biguint = 2n
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) == itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) == one_biguint)
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) == itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) == two_biguint))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) != itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) != one_biguint))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) != itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) != two_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) <= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) <= one_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) <= itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) <= two_biguint)
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) < itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) < one_biguint))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(2arc4u8))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) < itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) < two_biguint)
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4u8))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) >= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) >= one_biguint)
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) >= itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) >= two_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) > itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > one_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(2arc4u8)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) > itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > two_biguint))
}

subroutine check_both_big_uint_n(one: arc4.uint256, two: arc4.uint264): void
{
  one_uint64: uint64 = 1u
  one_biguint: biguint = 1n
  two_uint64: uint64 = 2u
  two_biguint: biguint = 2n
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) == itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) == one_biguint)
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(2arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) == reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) == itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) == two_biguint))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) != itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) != one_biguint))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(2arc4n256))
  assert(reinterpret_cast<biguint>(one) != reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) != itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) != two_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) <= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) <= one_biguint)
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(2arc4n256))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) <= itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) <= two_biguint)
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) < itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) < one_biguint))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(2arc4n256))
  assert(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(two))
  assert(reinterpret_cast<biguint>(one) < itob(two_uint64))
  assert(reinterpret_cast<biguint>(one) < two_biguint)
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) <= reinterpret_cast<biguint>(1arc4n256))
  assert(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(one))
  assert(reinterpret_cast<biguint>(one) >= itob(one_uint64))
  assert(reinterpret_cast<biguint>(one) >= one_biguint)
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(2arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) >= reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) >= itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) >= two_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) < reinterpret_cast<biguint>(1arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(one)))
  assert(!(reinterpret_cast<biguint>(one) > itob(one_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > one_biguint))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(2arc4n256)))
  assert(!(reinterpret_cast<biguint>(one) > reinterpret_cast<biguint>(two)))
  assert(!(reinterpret_cast<biguint>(one) > itob(two_uint64)))
  assert(!(reinterpret_cast<biguint>(one) > two_biguint))
}