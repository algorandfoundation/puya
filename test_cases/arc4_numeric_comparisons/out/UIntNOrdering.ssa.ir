contract test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering:
    program approval:
        subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program() -> uint64:
            block@0: // L8
                test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(0x01, 0x0000000000000002)
                test_cases.arc4_numeric_comparisons.uint_n.check_mixed(0x01, 0x000000000000000000000000000000000000000000000000000000000000000002)
                test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(0x0000000000000000000000000000000000000000000000000000000000000001, 0x000000000000000000000000000000000000000000000000000000000000000002)
                return 1u
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(one: bytes, two: bytes) -> void:
            block@0: // L18
                let one_uint64#0: uint64 = 1u
                let one_biguint#0: bytes = 1b
                let two_uint64#0: uint64 = 2u
                let two_biguint#0: bytes = 2b
                let tmp%0#0: uint64 = (b== one#0 0x01)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (b== one#0 0x01)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (b== one#0 one#0)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (itob one_uint64#0)
                let tmp%4#0: uint64 = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (b== one#0 one_biguint#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (b== one#0 0x02)
                let tmp%7#0: uint64 = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (b== one#0 two#0)
                let tmp%9#0: uint64 = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bytes = (itob two_uint64#0)
                let tmp%11#0: uint64 = (b== one#0 tmp%10#0)
                let tmp%12#0: uint64 = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (b== one#0 two_biguint#0)
                let tmp%14#0: uint64 = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = (b!= one#0 0x01)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (b!= one#0 0x01)
                let tmp%18#0: uint64 = (! tmp%17#0)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (b!= one#0 one#0)
                let tmp%20#0: uint64 = (! tmp%19#0)
                (assert tmp%20#0)
                let tmp%21#0: bytes = (itob one_uint64#0)
                let tmp%22#0: uint64 = (b!= one#0 tmp%21#0)
                let tmp%23#0: uint64 = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: uint64 = (b!= one#0 one_biguint#0)
                let tmp%25#0: uint64 = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: uint64 = (b!= one#0 0x02)
                (assert tmp%26#0)
                let tmp%27#0: uint64 = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%28#0: bytes = (itob two_uint64#0)
                let tmp%29#0: uint64 = (b!= one#0 tmp%28#0)
                (assert tmp%29#0)
                let tmp%30#0: uint64 = (b!= one#0 two_biguint#0)
                (assert tmp%30#0)
                let tmp%31#0: uint64 = (b<= one#0 0x01)
                (assert tmp%31#0)
                let tmp%32#0: uint64 = (b>= one#0 0x01)
                (assert tmp%32#0)
                let tmp%33#0: uint64 = (b<= one#0 one#0)
                (assert tmp%33#0)
                let tmp%34#0: bytes = (itob one_uint64#0)
                let tmp%35#0: uint64 = (b<= one#0 tmp%34#0)
                (assert tmp%35#0)
                let tmp%36#0: uint64 = (b<= one#0 one_biguint#0)
                (assert tmp%36#0)
                let tmp%37#0: uint64 = (b<= one#0 0x02)
                (assert tmp%37#0)
                let tmp%38#0: uint64 = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%39#0: bytes = (itob two_uint64#0)
                let tmp%40#0: uint64 = (b<= one#0 tmp%39#0)
                (assert tmp%40#0)
                let tmp%41#0: uint64 = (b<= one#0 two_biguint#0)
                (assert tmp%41#0)
                let tmp%42#0: uint64 = (b< one#0 0x01)
                let tmp%43#0: uint64 = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = (b> one#0 0x01)
                let tmp%45#0: uint64 = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%46#0: uint64 = (b< one#0 one#0)
                let tmp%47#0: uint64 = (! tmp%46#0)
                (assert tmp%47#0)
                let tmp%48#0: bytes = (itob one_uint64#0)
                let tmp%49#0: uint64 = (b< one#0 tmp%48#0)
                let tmp%50#0: uint64 = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: uint64 = (b< one#0 one_biguint#0)
                let tmp%52#0: uint64 = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: uint64 = (b< one#0 0x02)
                (assert tmp%53#0)
                let tmp%54#0: uint64 = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%55#0: bytes = (itob two_uint64#0)
                let tmp%56#0: uint64 = (b< one#0 tmp%55#0)
                (assert tmp%56#0)
                let tmp%57#0: uint64 = (b< one#0 two_biguint#0)
                (assert tmp%57#0)
                let tmp%58#0: uint64 = (b>= one#0 0x01)
                (assert tmp%58#0)
                let tmp%59#0: uint64 = (b<= one#0 0x01)
                (assert tmp%59#0)
                let tmp%60#0: uint64 = (b>= one#0 one#0)
                (assert tmp%60#0)
                let tmp%61#0: bytes = (itob one_uint64#0)
                let tmp%62#0: uint64 = (b>= one#0 tmp%61#0)
                (assert tmp%62#0)
                let tmp%63#0: uint64 = (b>= one#0 one_biguint#0)
                (assert tmp%63#0)
                let tmp%64#0: uint64 = (b>= one#0 0x02)
                let tmp%65#0: uint64 = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: uint64 = (b>= one#0 two#0)
                let tmp%67#0: uint64 = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%68#0: bytes = (itob two_uint64#0)
                let tmp%69#0: uint64 = (b>= one#0 tmp%68#0)
                let tmp%70#0: uint64 = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: uint64 = (b>= one#0 two_biguint#0)
                let tmp%72#0: uint64 = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%73#0: uint64 = (b> one#0 0x01)
                let tmp%74#0: uint64 = (! tmp%73#0)
                (assert tmp%74#0)
                let tmp%75#0: uint64 = (b< one#0 0x01)
                let tmp%76#0: uint64 = (! tmp%75#0)
                (assert tmp%76#0)
                let tmp%77#0: uint64 = (b> one#0 one#0)
                let tmp%78#0: uint64 = (! tmp%77#0)
                (assert tmp%78#0)
                let tmp%79#0: bytes = (itob one_uint64#0)
                let tmp%80#0: uint64 = (b> one#0 tmp%79#0)
                let tmp%81#0: uint64 = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: uint64 = (b> one#0 one_biguint#0)
                let tmp%83#0: uint64 = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: uint64 = (b> one#0 0x02)
                let tmp%85#0: uint64 = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: uint64 = (b> one#0 two#0)
                let tmp%87#0: uint64 = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%88#0: bytes = (itob two_uint64#0)
                let tmp%89#0: uint64 = (b> one#0 tmp%88#0)
                let tmp%90#0: uint64 = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: uint64 = (b> one#0 two_biguint#0)
                let tmp%92#0: uint64 = (! tmp%91#0)
                (assert tmp%92#0)
                return 
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed(one: bytes, two: bytes) -> void:
            block@0: // L87
                let one_uint64#0: uint64 = 1u
                let one_biguint#0: bytes = 1b
                let two_uint64#0: uint64 = 2u
                let two_biguint#0: bytes = 2b
                let tmp%0#0: uint64 = (b== one#0 0x01)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (b== one#0 0x01)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (b== one#0 one#0)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (itob one_uint64#0)
                let tmp%4#0: uint64 = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (b== one#0 one_biguint#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (b== one#0 0x02)
                let tmp%7#0: uint64 = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (b== one#0 two#0)
                let tmp%9#0: uint64 = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bytes = (itob two_uint64#0)
                let tmp%11#0: uint64 = (b== one#0 tmp%10#0)
                let tmp%12#0: uint64 = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (b== one#0 two_biguint#0)
                let tmp%14#0: uint64 = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = (b!= one#0 0x01)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (b!= one#0 0x01)
                let tmp%18#0: uint64 = (! tmp%17#0)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (b!= one#0 one#0)
                let tmp%20#0: uint64 = (! tmp%19#0)
                (assert tmp%20#0)
                let tmp%21#0: bytes = (itob one_uint64#0)
                let tmp%22#0: uint64 = (b!= one#0 tmp%21#0)
                let tmp%23#0: uint64 = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: uint64 = (b!= one#0 one_biguint#0)
                let tmp%25#0: uint64 = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: uint64 = (b!= one#0 0x02)
                (assert tmp%26#0)
                let tmp%27#0: uint64 = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%28#0: bytes = (itob two_uint64#0)
                let tmp%29#0: uint64 = (b!= one#0 tmp%28#0)
                (assert tmp%29#0)
                let tmp%30#0: uint64 = (b!= one#0 two_biguint#0)
                (assert tmp%30#0)
                let tmp%31#0: uint64 = (b<= one#0 0x01)
                (assert tmp%31#0)
                let tmp%32#0: uint64 = (b>= one#0 0x01)
                (assert tmp%32#0)
                let tmp%33#0: uint64 = (b<= one#0 one#0)
                (assert tmp%33#0)
                let tmp%34#0: bytes = (itob one_uint64#0)
                let tmp%35#0: uint64 = (b<= one#0 tmp%34#0)
                (assert tmp%35#0)
                let tmp%36#0: uint64 = (b<= one#0 one_biguint#0)
                (assert tmp%36#0)
                let tmp%37#0: uint64 = (b<= one#0 0x02)
                (assert tmp%37#0)
                let tmp%38#0: uint64 = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%39#0: bytes = (itob two_uint64#0)
                let tmp%40#0: uint64 = (b<= one#0 tmp%39#0)
                (assert tmp%40#0)
                let tmp%41#0: uint64 = (b<= one#0 two_biguint#0)
                (assert tmp%41#0)
                let tmp%42#0: uint64 = (b< one#0 0x01)
                let tmp%43#0: uint64 = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = (b> one#0 0x01)
                let tmp%45#0: uint64 = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%46#0: uint64 = (b< one#0 one#0)
                let tmp%47#0: uint64 = (! tmp%46#0)
                (assert tmp%47#0)
                let tmp%48#0: bytes = (itob one_uint64#0)
                let tmp%49#0: uint64 = (b< one#0 tmp%48#0)
                let tmp%50#0: uint64 = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: uint64 = (b< one#0 one_biguint#0)
                let tmp%52#0: uint64 = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: uint64 = (b< one#0 0x02)
                (assert tmp%53#0)
                let tmp%54#0: uint64 = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%55#0: bytes = (itob two_uint64#0)
                let tmp%56#0: uint64 = (b< one#0 tmp%55#0)
                (assert tmp%56#0)
                let tmp%57#0: uint64 = (b< one#0 two_biguint#0)
                (assert tmp%57#0)
                let tmp%58#0: uint64 = (b>= one#0 0x01)
                (assert tmp%58#0)
                let tmp%59#0: uint64 = (b<= one#0 0x01)
                (assert tmp%59#0)
                let tmp%60#0: uint64 = (b>= one#0 one#0)
                (assert tmp%60#0)
                let tmp%61#0: bytes = (itob one_uint64#0)
                let tmp%62#0: uint64 = (b>= one#0 tmp%61#0)
                (assert tmp%62#0)
                let tmp%63#0: uint64 = (b>= one#0 one_biguint#0)
                (assert tmp%63#0)
                let tmp%64#0: uint64 = (b>= one#0 0x02)
                let tmp%65#0: uint64 = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: uint64 = (b>= one#0 two#0)
                let tmp%67#0: uint64 = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%68#0: bytes = (itob two_uint64#0)
                let tmp%69#0: uint64 = (b>= one#0 tmp%68#0)
                let tmp%70#0: uint64 = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: uint64 = (b>= one#0 two_biguint#0)
                let tmp%72#0: uint64 = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%73#0: uint64 = (b> one#0 0x01)
                let tmp%74#0: uint64 = (! tmp%73#0)
                (assert tmp%74#0)
                let tmp%75#0: uint64 = (b< one#0 0x01)
                let tmp%76#0: uint64 = (! tmp%75#0)
                (assert tmp%76#0)
                let tmp%77#0: uint64 = (b> one#0 one#0)
                let tmp%78#0: uint64 = (! tmp%77#0)
                (assert tmp%78#0)
                let tmp%79#0: bytes = (itob one_uint64#0)
                let tmp%80#0: uint64 = (b> one#0 tmp%79#0)
                let tmp%81#0: uint64 = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: uint64 = (b> one#0 one_biguint#0)
                let tmp%83#0: uint64 = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: uint64 = (b> one#0 0x02)
                let tmp%85#0: uint64 = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: uint64 = (b> one#0 two#0)
                let tmp%87#0: uint64 = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%88#0: bytes = (itob two_uint64#0)
                let tmp%89#0: uint64 = (b> one#0 tmp%88#0)
                let tmp%90#0: uint64 = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: uint64 = (b> one#0 two_biguint#0)
                let tmp%92#0: uint64 = (! tmp%91#0)
                (assert tmp%92#0)
                return 
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(one: bytes, two: bytes) -> void:
            block@0: // L156
                let one_uint64#0: uint64 = 1u
                let one_biguint#0: bytes = 1b
                let two_uint64#0: uint64 = 2u
                let two_biguint#0: bytes = 2b
                let tmp%0#0: uint64 = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%0#0)
                let tmp%1#0: uint64 = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (b== one#0 one#0)
                (assert tmp%2#0)
                let tmp%3#0: bytes = (itob one_uint64#0)
                let tmp%4#0: uint64 = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (b== one#0 one_biguint#0)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%7#0: uint64 = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (b== one#0 two#0)
                let tmp%9#0: uint64 = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: bytes = (itob two_uint64#0)
                let tmp%11#0: uint64 = (b== one#0 tmp%10#0)
                let tmp%12#0: uint64 = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: uint64 = (b== one#0 two_biguint#0)
                let tmp%14#0: uint64 = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: uint64 = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%17#0: uint64 = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%18#0: uint64 = (! tmp%17#0)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (b!= one#0 one#0)
                let tmp%20#0: uint64 = (! tmp%19#0)
                (assert tmp%20#0)
                let tmp%21#0: bytes = (itob one_uint64#0)
                let tmp%22#0: uint64 = (b!= one#0 tmp%21#0)
                let tmp%23#0: uint64 = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: uint64 = (b!= one#0 one_biguint#0)
                let tmp%25#0: uint64 = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: uint64 = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%26#0)
                let tmp%27#0: uint64 = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%28#0: bytes = (itob two_uint64#0)
                let tmp%29#0: uint64 = (b!= one#0 tmp%28#0)
                (assert tmp%29#0)
                let tmp%30#0: uint64 = (b!= one#0 two_biguint#0)
                (assert tmp%30#0)
                let tmp%31#0: uint64 = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%31#0)
                let tmp%32#0: uint64 = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%32#0)
                let tmp%33#0: uint64 = (b<= one#0 one#0)
                (assert tmp%33#0)
                let tmp%34#0: bytes = (itob one_uint64#0)
                let tmp%35#0: uint64 = (b<= one#0 tmp%34#0)
                (assert tmp%35#0)
                let tmp%36#0: uint64 = (b<= one#0 one_biguint#0)
                (assert tmp%36#0)
                let tmp%37#0: uint64 = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%37#0)
                let tmp%38#0: uint64 = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%39#0: bytes = (itob two_uint64#0)
                let tmp%40#0: uint64 = (b<= one#0 tmp%39#0)
                (assert tmp%40#0)
                let tmp%41#0: uint64 = (b<= one#0 two_biguint#0)
                (assert tmp%41#0)
                let tmp%42#0: uint64 = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%43#0: uint64 = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%45#0: uint64 = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%46#0: uint64 = (b< one#0 one#0)
                let tmp%47#0: uint64 = (! tmp%46#0)
                (assert tmp%47#0)
                let tmp%48#0: bytes = (itob one_uint64#0)
                let tmp%49#0: uint64 = (b< one#0 tmp%48#0)
                let tmp%50#0: uint64 = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: uint64 = (b< one#0 one_biguint#0)
                let tmp%52#0: uint64 = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: uint64 = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%53#0)
                let tmp%54#0: uint64 = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%55#0: bytes = (itob two_uint64#0)
                let tmp%56#0: uint64 = (b< one#0 tmp%55#0)
                (assert tmp%56#0)
                let tmp%57#0: uint64 = (b< one#0 two_biguint#0)
                (assert tmp%57#0)
                let tmp%58#0: uint64 = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%58#0)
                let tmp%59#0: uint64 = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%59#0)
                let tmp%60#0: uint64 = (b>= one#0 one#0)
                (assert tmp%60#0)
                let tmp%61#0: bytes = (itob one_uint64#0)
                let tmp%62#0: uint64 = (b>= one#0 tmp%61#0)
                (assert tmp%62#0)
                let tmp%63#0: uint64 = (b>= one#0 one_biguint#0)
                (assert tmp%63#0)
                let tmp%64#0: uint64 = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%65#0: uint64 = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: uint64 = (b>= one#0 two#0)
                let tmp%67#0: uint64 = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%68#0: bytes = (itob two_uint64#0)
                let tmp%69#0: uint64 = (b>= one#0 tmp%68#0)
                let tmp%70#0: uint64 = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: uint64 = (b>= one#0 two_biguint#0)
                let tmp%72#0: uint64 = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%73#0: uint64 = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%74#0: uint64 = (! tmp%73#0)
                (assert tmp%74#0)
                let tmp%75#0: uint64 = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%76#0: uint64 = (! tmp%75#0)
                (assert tmp%76#0)
                let tmp%77#0: uint64 = (b> one#0 one#0)
                let tmp%78#0: uint64 = (! tmp%77#0)
                (assert tmp%78#0)
                let tmp%79#0: bytes = (itob one_uint64#0)
                let tmp%80#0: uint64 = (b> one#0 tmp%79#0)
                let tmp%81#0: uint64 = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: uint64 = (b> one#0 one_biguint#0)
                let tmp%83#0: uint64 = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: uint64 = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%85#0: uint64 = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: uint64 = (b> one#0 two#0)
                let tmp%87#0: uint64 = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%88#0: bytes = (itob two_uint64#0)
                let tmp%89#0: uint64 = (b> one#0 tmp%88#0)
                let tmp%90#0: uint64 = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: uint64 = (b> one#0 two_biguint#0)
                let tmp%92#0: uint64 = (! tmp%91#0)
                (assert tmp%92#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program() -> uint64:
            block@0: // L14
                return 1u