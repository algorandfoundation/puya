main test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program:
    block@0: // L8
        test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(0x01, 0x0000000000000002)
        test_cases.arc4_numeric_comparisons.uint_n.check_mixed(0x01, 0x000000000000000000000000000000000000000000000000000000000000000002)
        test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(0x0000000000000000000000000000000000000000000000000000000000000001, 0x000000000000000000000000000000000000000000000000000000000000000002)
        return 1u

subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(one: bytes[1], two: bytes[8]) -> void:
    block@0: // L18
        let one_uint64#0: uint64 = 1u
        let one_biguint#0: biguint = 1b
        let two_uint64#0: uint64 = 2u
        let two_biguint#0: biguint = 2b
        let reinterpret_biguint%0#0: biguint = one#0
        let reinterpret_biguint%1#0: biguint = 0x01
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0)
        let reinterpret_biguint%2#0: biguint = one#0
        let reinterpret_biguint%3#0: biguint = 0x01
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0)
        let reinterpret_biguint%4#0: biguint = one#0
        let reinterpret_biguint%5#0: biguint = one#0
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%2#0)
        let reinterpret_biguint%6#0: biguint = one#0
        let tmp%3#0: biguint = (itob one_uint64#0)
        let tmp%4#0: bool = (b== reinterpret_biguint%6#0 tmp%3#0)
        (assert tmp%4#0)
        let reinterpret_biguint%7#0: biguint = one#0
        let tmp%5#0: bool = (b== reinterpret_biguint%7#0 one_biguint#0)
        (assert tmp%5#0)
        let reinterpret_biguint%8#0: biguint = one#0
        let reinterpret_biguint%9#0: biguint = 0x02
        let tmp%6#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0)
        let reinterpret_biguint%10#0: biguint = one#0
        let reinterpret_biguint%11#0: biguint = two#0
        let tmp%8#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0)
        let reinterpret_biguint%12#0: biguint = one#0
        let tmp%10#0: biguint = (itob two_uint64#0)
        let tmp%11#0: bool = (b== reinterpret_biguint%12#0 tmp%10#0)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0)
        let reinterpret_biguint%13#0: biguint = one#0
        let tmp%13#0: bool = (b== reinterpret_biguint%13#0 two_biguint#0)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0)
        let reinterpret_biguint%14#0: biguint = one#0
        let reinterpret_biguint%15#0: biguint = 0x01
        let tmp%15#0: bool = (b!= reinterpret_biguint%14#0 reinterpret_biguint%15#0)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0)
        let reinterpret_biguint%16#0: biguint = one#0
        let reinterpret_biguint%17#0: biguint = 0x01
        let tmp%17#0: bool = (b!= reinterpret_biguint%16#0 reinterpret_biguint%17#0)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0)
        let reinterpret_biguint%18#0: biguint = one#0
        let reinterpret_biguint%19#0: biguint = one#0
        let tmp%19#0: bool = (b!= reinterpret_biguint%18#0 reinterpret_biguint%19#0)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0)
        let reinterpret_biguint%20#0: biguint = one#0
        let tmp%21#0: biguint = (itob one_uint64#0)
        let tmp%22#0: bool = (b!= reinterpret_biguint%20#0 tmp%21#0)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0)
        let reinterpret_biguint%21#0: biguint = one#0
        let tmp%24#0: bool = (b!= reinterpret_biguint%21#0 one_biguint#0)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0)
        let reinterpret_biguint%22#0: biguint = one#0
        let reinterpret_biguint%23#0: biguint = 0x02
        let tmp%26#0: bool = (b!= reinterpret_biguint%22#0 reinterpret_biguint%23#0)
        (assert tmp%26#0)
        let reinterpret_biguint%24#0: biguint = one#0
        let reinterpret_biguint%25#0: biguint = two#0
        let tmp%27#0: bool = (b!= reinterpret_biguint%24#0 reinterpret_biguint%25#0)
        (assert tmp%27#0)
        let reinterpret_biguint%26#0: biguint = one#0
        let tmp%28#0: biguint = (itob two_uint64#0)
        let tmp%29#0: bool = (b!= reinterpret_biguint%26#0 tmp%28#0)
        (assert tmp%29#0)
        let reinterpret_biguint%27#0: biguint = one#0
        let tmp%30#0: bool = (b!= reinterpret_biguint%27#0 two_biguint#0)
        (assert tmp%30#0)
        let reinterpret_biguint%28#0: biguint = one#0
        let reinterpret_biguint%29#0: biguint = 0x01
        let tmp%31#0: bool = (b<= reinterpret_biguint%28#0 reinterpret_biguint%29#0)
        (assert tmp%31#0)
        let reinterpret_biguint%30#0: biguint = one#0
        let reinterpret_biguint%31#0: biguint = 0x01
        let tmp%32#0: bool = (b>= reinterpret_biguint%30#0 reinterpret_biguint%31#0)
        (assert tmp%32#0)
        let reinterpret_biguint%32#0: biguint = one#0
        let reinterpret_biguint%33#0: biguint = one#0
        let tmp%33#0: bool = (b<= reinterpret_biguint%32#0 reinterpret_biguint%33#0)
        (assert tmp%33#0)
        let reinterpret_biguint%34#0: biguint = one#0
        let tmp%34#0: biguint = (itob one_uint64#0)
        let tmp%35#0: bool = (b<= reinterpret_biguint%34#0 tmp%34#0)
        (assert tmp%35#0)
        let reinterpret_biguint%35#0: biguint = one#0
        let tmp%36#0: bool = (b<= reinterpret_biguint%35#0 one_biguint#0)
        (assert tmp%36#0)
        let reinterpret_biguint%36#0: biguint = one#0
        let reinterpret_biguint%37#0: biguint = 0x02
        let tmp%37#0: bool = (b<= reinterpret_biguint%36#0 reinterpret_biguint%37#0)
        (assert tmp%37#0)
        let reinterpret_biguint%38#0: biguint = one#0
        let reinterpret_biguint%39#0: biguint = two#0
        let tmp%38#0: bool = (b<= reinterpret_biguint%38#0 reinterpret_biguint%39#0)
        (assert tmp%38#0)
        let reinterpret_biguint%40#0: biguint = one#0
        let tmp%39#0: biguint = (itob two_uint64#0)
        let tmp%40#0: bool = (b<= reinterpret_biguint%40#0 tmp%39#0)
        (assert tmp%40#0)
        let reinterpret_biguint%41#0: biguint = one#0
        let tmp%41#0: bool = (b<= reinterpret_biguint%41#0 two_biguint#0)
        (assert tmp%41#0)
        let reinterpret_biguint%42#0: biguint = one#0
        let reinterpret_biguint%43#0: biguint = 0x01
        let tmp%42#0: bool = (b< reinterpret_biguint%42#0 reinterpret_biguint%43#0)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0)
        let reinterpret_biguint%44#0: biguint = one#0
        let reinterpret_biguint%45#0: biguint = 0x01
        let tmp%44#0: bool = (b> reinterpret_biguint%44#0 reinterpret_biguint%45#0)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0)
        let reinterpret_biguint%46#0: biguint = one#0
        let reinterpret_biguint%47#0: biguint = one#0
        let tmp%46#0: bool = (b< reinterpret_biguint%46#0 reinterpret_biguint%47#0)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0)
        let reinterpret_biguint%48#0: biguint = one#0
        let tmp%48#0: biguint = (itob one_uint64#0)
        let tmp%49#0: bool = (b< reinterpret_biguint%48#0 tmp%48#0)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0)
        let reinterpret_biguint%49#0: biguint = one#0
        let tmp%51#0: bool = (b< reinterpret_biguint%49#0 one_biguint#0)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0)
        let reinterpret_biguint%50#0: biguint = one#0
        let reinterpret_biguint%51#0: biguint = 0x02
        let tmp%53#0: bool = (b< reinterpret_biguint%50#0 reinterpret_biguint%51#0)
        (assert tmp%53#0)
        let reinterpret_biguint%52#0: biguint = one#0
        let reinterpret_biguint%53#0: biguint = two#0
        let tmp%54#0: bool = (b< reinterpret_biguint%52#0 reinterpret_biguint%53#0)
        (assert tmp%54#0)
        let reinterpret_biguint%54#0: biguint = one#0
        let tmp%55#0: biguint = (itob two_uint64#0)
        let tmp%56#0: bool = (b< reinterpret_biguint%54#0 tmp%55#0)
        (assert tmp%56#0)
        let reinterpret_biguint%55#0: biguint = one#0
        let tmp%57#0: bool = (b< reinterpret_biguint%55#0 two_biguint#0)
        (assert tmp%57#0)
        let reinterpret_biguint%56#0: biguint = one#0
        let reinterpret_biguint%57#0: biguint = 0x01
        let tmp%58#0: bool = (b>= reinterpret_biguint%56#0 reinterpret_biguint%57#0)
        (assert tmp%58#0)
        let reinterpret_biguint%58#0: biguint = one#0
        let reinterpret_biguint%59#0: biguint = 0x01
        let tmp%59#0: bool = (b<= reinterpret_biguint%58#0 reinterpret_biguint%59#0)
        (assert tmp%59#0)
        let reinterpret_biguint%60#0: biguint = one#0
        let reinterpret_biguint%61#0: biguint = one#0
        let tmp%60#0: bool = (b>= reinterpret_biguint%60#0 reinterpret_biguint%61#0)
        (assert tmp%60#0)
        let reinterpret_biguint%62#0: biguint = one#0
        let tmp%61#0: biguint = (itob one_uint64#0)
        let tmp%62#0: bool = (b>= reinterpret_biguint%62#0 tmp%61#0)
        (assert tmp%62#0)
        let reinterpret_biguint%63#0: biguint = one#0
        let tmp%63#0: bool = (b>= reinterpret_biguint%63#0 one_biguint#0)
        (assert tmp%63#0)
        let reinterpret_biguint%64#0: biguint = one#0
        let reinterpret_biguint%65#0: biguint = 0x02
        let tmp%64#0: bool = (b>= reinterpret_biguint%64#0 reinterpret_biguint%65#0)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0)
        let reinterpret_biguint%66#0: biguint = one#0
        let reinterpret_biguint%67#0: biguint = two#0
        let tmp%66#0: bool = (b>= reinterpret_biguint%66#0 reinterpret_biguint%67#0)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0)
        let reinterpret_biguint%68#0: biguint = one#0
        let tmp%68#0: biguint = (itob two_uint64#0)
        let tmp%69#0: bool = (b>= reinterpret_biguint%68#0 tmp%68#0)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0)
        let reinterpret_biguint%69#0: biguint = one#0
        let tmp%71#0: bool = (b>= reinterpret_biguint%69#0 two_biguint#0)
        let tmp%72#0: bool = (! tmp%71#0)
        (assert tmp%72#0)
        let reinterpret_biguint%70#0: biguint = one#0
        let reinterpret_biguint%71#0: biguint = 0x01
        let tmp%73#0: bool = (b> reinterpret_biguint%70#0 reinterpret_biguint%71#0)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0)
        let reinterpret_biguint%72#0: biguint = one#0
        let reinterpret_biguint%73#0: biguint = 0x01
        let tmp%75#0: bool = (b< reinterpret_biguint%72#0 reinterpret_biguint%73#0)
        let tmp%76#0: bool = (! tmp%75#0)
        (assert tmp%76#0)
        let reinterpret_biguint%74#0: biguint = one#0
        let reinterpret_biguint%75#0: biguint = one#0
        let tmp%77#0: bool = (b> reinterpret_biguint%74#0 reinterpret_biguint%75#0)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0)
        let reinterpret_biguint%76#0: biguint = one#0
        let tmp%79#0: biguint = (itob one_uint64#0)
        let tmp%80#0: bool = (b> reinterpret_biguint%76#0 tmp%79#0)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0)
        let reinterpret_biguint%77#0: biguint = one#0
        let tmp%82#0: bool = (b> reinterpret_biguint%77#0 one_biguint#0)
        let tmp%83#0: bool = (! tmp%82#0)
        (assert tmp%83#0)
        let reinterpret_biguint%78#0: biguint = one#0
        let reinterpret_biguint%79#0: biguint = 0x02
        let tmp%84#0: bool = (b> reinterpret_biguint%78#0 reinterpret_biguint%79#0)
        let tmp%85#0: bool = (! tmp%84#0)
        (assert tmp%85#0)
        let reinterpret_biguint%80#0: biguint = one#0
        let reinterpret_biguint%81#0: biguint = two#0
        let tmp%86#0: bool = (b> reinterpret_biguint%80#0 reinterpret_biguint%81#0)
        let tmp%87#0: bool = (! tmp%86#0)
        (assert tmp%87#0)
        let reinterpret_biguint%82#0: biguint = one#0
        let tmp%88#0: biguint = (itob two_uint64#0)
        let tmp%89#0: bool = (b> reinterpret_biguint%82#0 tmp%88#0)
        let tmp%90#0: bool = (! tmp%89#0)
        (assert tmp%90#0)
        let reinterpret_biguint%83#0: biguint = one#0
        let tmp%91#0: bool = (b> reinterpret_biguint%83#0 two_biguint#0)
        let tmp%92#0: bool = (! tmp%91#0)
        (assert tmp%92#0)
        return 

subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed(one: bytes[1], two: bytes[33]) -> void:
    block@0: // L87
        let one_uint64#0: uint64 = 1u
        let one_biguint#0: biguint = 1b
        let two_uint64#0: uint64 = 2u
        let two_biguint#0: biguint = 2b
        let reinterpret_biguint%0#0: biguint = one#0
        let reinterpret_biguint%1#0: biguint = 0x01
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0)
        let reinterpret_biguint%2#0: biguint = one#0
        let reinterpret_biguint%3#0: biguint = 0x01
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0)
        let reinterpret_biguint%4#0: biguint = one#0
        let reinterpret_biguint%5#0: biguint = one#0
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%2#0)
        let reinterpret_biguint%6#0: biguint = one#0
        let tmp%3#0: biguint = (itob one_uint64#0)
        let tmp%4#0: bool = (b== reinterpret_biguint%6#0 tmp%3#0)
        (assert tmp%4#0)
        let reinterpret_biguint%7#0: biguint = one#0
        let tmp%5#0: bool = (b== reinterpret_biguint%7#0 one_biguint#0)
        (assert tmp%5#0)
        let reinterpret_biguint%8#0: biguint = one#0
        let reinterpret_biguint%9#0: biguint = 0x02
        let tmp%6#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0)
        let reinterpret_biguint%10#0: biguint = one#0
        let reinterpret_biguint%11#0: biguint = two#0
        let tmp%8#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0)
        let reinterpret_biguint%12#0: biguint = one#0
        let tmp%10#0: biguint = (itob two_uint64#0)
        let tmp%11#0: bool = (b== reinterpret_biguint%12#0 tmp%10#0)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0)
        let reinterpret_biguint%13#0: biguint = one#0
        let tmp%13#0: bool = (b== reinterpret_biguint%13#0 two_biguint#0)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0)
        let reinterpret_biguint%14#0: biguint = one#0
        let reinterpret_biguint%15#0: biguint = 0x01
        let tmp%15#0: bool = (b!= reinterpret_biguint%14#0 reinterpret_biguint%15#0)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0)
        let reinterpret_biguint%16#0: biguint = one#0
        let reinterpret_biguint%17#0: biguint = 0x01
        let tmp%17#0: bool = (b!= reinterpret_biguint%16#0 reinterpret_biguint%17#0)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0)
        let reinterpret_biguint%18#0: biguint = one#0
        let reinterpret_biguint%19#0: biguint = one#0
        let tmp%19#0: bool = (b!= reinterpret_biguint%18#0 reinterpret_biguint%19#0)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0)
        let reinterpret_biguint%20#0: biguint = one#0
        let tmp%21#0: biguint = (itob one_uint64#0)
        let tmp%22#0: bool = (b!= reinterpret_biguint%20#0 tmp%21#0)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0)
        let reinterpret_biguint%21#0: biguint = one#0
        let tmp%24#0: bool = (b!= reinterpret_biguint%21#0 one_biguint#0)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0)
        let reinterpret_biguint%22#0: biguint = one#0
        let reinterpret_biguint%23#0: biguint = 0x02
        let tmp%26#0: bool = (b!= reinterpret_biguint%22#0 reinterpret_biguint%23#0)
        (assert tmp%26#0)
        let reinterpret_biguint%24#0: biguint = one#0
        let reinterpret_biguint%25#0: biguint = two#0
        let tmp%27#0: bool = (b!= reinterpret_biguint%24#0 reinterpret_biguint%25#0)
        (assert tmp%27#0)
        let reinterpret_biguint%26#0: biguint = one#0
        let tmp%28#0: biguint = (itob two_uint64#0)
        let tmp%29#0: bool = (b!= reinterpret_biguint%26#0 tmp%28#0)
        (assert tmp%29#0)
        let reinterpret_biguint%27#0: biguint = one#0
        let tmp%30#0: bool = (b!= reinterpret_biguint%27#0 two_biguint#0)
        (assert tmp%30#0)
        let reinterpret_biguint%28#0: biguint = one#0
        let reinterpret_biguint%29#0: biguint = 0x01
        let tmp%31#0: bool = (b<= reinterpret_biguint%28#0 reinterpret_biguint%29#0)
        (assert tmp%31#0)
        let reinterpret_biguint%30#0: biguint = one#0
        let reinterpret_biguint%31#0: biguint = 0x01
        let tmp%32#0: bool = (b>= reinterpret_biguint%30#0 reinterpret_biguint%31#0)
        (assert tmp%32#0)
        let reinterpret_biguint%32#0: biguint = one#0
        let reinterpret_biguint%33#0: biguint = one#0
        let tmp%33#0: bool = (b<= reinterpret_biguint%32#0 reinterpret_biguint%33#0)
        (assert tmp%33#0)
        let reinterpret_biguint%34#0: biguint = one#0
        let tmp%34#0: biguint = (itob one_uint64#0)
        let tmp%35#0: bool = (b<= reinterpret_biguint%34#0 tmp%34#0)
        (assert tmp%35#0)
        let reinterpret_biguint%35#0: biguint = one#0
        let tmp%36#0: bool = (b<= reinterpret_biguint%35#0 one_biguint#0)
        (assert tmp%36#0)
        let reinterpret_biguint%36#0: biguint = one#0
        let reinterpret_biguint%37#0: biguint = 0x02
        let tmp%37#0: bool = (b<= reinterpret_biguint%36#0 reinterpret_biguint%37#0)
        (assert tmp%37#0)
        let reinterpret_biguint%38#0: biguint = one#0
        let reinterpret_biguint%39#0: biguint = two#0
        let tmp%38#0: bool = (b<= reinterpret_biguint%38#0 reinterpret_biguint%39#0)
        (assert tmp%38#0)
        let reinterpret_biguint%40#0: biguint = one#0
        let tmp%39#0: biguint = (itob two_uint64#0)
        let tmp%40#0: bool = (b<= reinterpret_biguint%40#0 tmp%39#0)
        (assert tmp%40#0)
        let reinterpret_biguint%41#0: biguint = one#0
        let tmp%41#0: bool = (b<= reinterpret_biguint%41#0 two_biguint#0)
        (assert tmp%41#0)
        let reinterpret_biguint%42#0: biguint = one#0
        let reinterpret_biguint%43#0: biguint = 0x01
        let tmp%42#0: bool = (b< reinterpret_biguint%42#0 reinterpret_biguint%43#0)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0)
        let reinterpret_biguint%44#0: biguint = one#0
        let reinterpret_biguint%45#0: biguint = 0x01
        let tmp%44#0: bool = (b> reinterpret_biguint%44#0 reinterpret_biguint%45#0)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0)
        let reinterpret_biguint%46#0: biguint = one#0
        let reinterpret_biguint%47#0: biguint = one#0
        let tmp%46#0: bool = (b< reinterpret_biguint%46#0 reinterpret_biguint%47#0)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0)
        let reinterpret_biguint%48#0: biguint = one#0
        let tmp%48#0: biguint = (itob one_uint64#0)
        let tmp%49#0: bool = (b< reinterpret_biguint%48#0 tmp%48#0)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0)
        let reinterpret_biguint%49#0: biguint = one#0
        let tmp%51#0: bool = (b< reinterpret_biguint%49#0 one_biguint#0)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0)
        let reinterpret_biguint%50#0: biguint = one#0
        let reinterpret_biguint%51#0: biguint = 0x02
        let tmp%53#0: bool = (b< reinterpret_biguint%50#0 reinterpret_biguint%51#0)
        (assert tmp%53#0)
        let reinterpret_biguint%52#0: biguint = one#0
        let reinterpret_biguint%53#0: biguint = two#0
        let tmp%54#0: bool = (b< reinterpret_biguint%52#0 reinterpret_biguint%53#0)
        (assert tmp%54#0)
        let reinterpret_biguint%54#0: biguint = one#0
        let tmp%55#0: biguint = (itob two_uint64#0)
        let tmp%56#0: bool = (b< reinterpret_biguint%54#0 tmp%55#0)
        (assert tmp%56#0)
        let reinterpret_biguint%55#0: biguint = one#0
        let tmp%57#0: bool = (b< reinterpret_biguint%55#0 two_biguint#0)
        (assert tmp%57#0)
        let reinterpret_biguint%56#0: biguint = one#0
        let reinterpret_biguint%57#0: biguint = 0x01
        let tmp%58#0: bool = (b>= reinterpret_biguint%56#0 reinterpret_biguint%57#0)
        (assert tmp%58#0)
        let reinterpret_biguint%58#0: biguint = one#0
        let reinterpret_biguint%59#0: biguint = 0x01
        let tmp%59#0: bool = (b<= reinterpret_biguint%58#0 reinterpret_biguint%59#0)
        (assert tmp%59#0)
        let reinterpret_biguint%60#0: biguint = one#0
        let reinterpret_biguint%61#0: biguint = one#0
        let tmp%60#0: bool = (b>= reinterpret_biguint%60#0 reinterpret_biguint%61#0)
        (assert tmp%60#0)
        let reinterpret_biguint%62#0: biguint = one#0
        let tmp%61#0: biguint = (itob one_uint64#0)
        let tmp%62#0: bool = (b>= reinterpret_biguint%62#0 tmp%61#0)
        (assert tmp%62#0)
        let reinterpret_biguint%63#0: biguint = one#0
        let tmp%63#0: bool = (b>= reinterpret_biguint%63#0 one_biguint#0)
        (assert tmp%63#0)
        let reinterpret_biguint%64#0: biguint = one#0
        let reinterpret_biguint%65#0: biguint = 0x02
        let tmp%64#0: bool = (b>= reinterpret_biguint%64#0 reinterpret_biguint%65#0)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0)
        let reinterpret_biguint%66#0: biguint = one#0
        let reinterpret_biguint%67#0: biguint = two#0
        let tmp%66#0: bool = (b>= reinterpret_biguint%66#0 reinterpret_biguint%67#0)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0)
        let reinterpret_biguint%68#0: biguint = one#0
        let tmp%68#0: biguint = (itob two_uint64#0)
        let tmp%69#0: bool = (b>= reinterpret_biguint%68#0 tmp%68#0)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0)
        let reinterpret_biguint%69#0: biguint = one#0
        let tmp%71#0: bool = (b>= reinterpret_biguint%69#0 two_biguint#0)
        let tmp%72#0: bool = (! tmp%71#0)
        (assert tmp%72#0)
        let reinterpret_biguint%70#0: biguint = one#0
        let reinterpret_biguint%71#0: biguint = 0x01
        let tmp%73#0: bool = (b> reinterpret_biguint%70#0 reinterpret_biguint%71#0)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0)
        let reinterpret_biguint%72#0: biguint = one#0
        let reinterpret_biguint%73#0: biguint = 0x01
        let tmp%75#0: bool = (b< reinterpret_biguint%72#0 reinterpret_biguint%73#0)
        let tmp%76#0: bool = (! tmp%75#0)
        (assert tmp%76#0)
        let reinterpret_biguint%74#0: biguint = one#0
        let reinterpret_biguint%75#0: biguint = one#0
        let tmp%77#0: bool = (b> reinterpret_biguint%74#0 reinterpret_biguint%75#0)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0)
        let reinterpret_biguint%76#0: biguint = one#0
        let tmp%79#0: biguint = (itob one_uint64#0)
        let tmp%80#0: bool = (b> reinterpret_biguint%76#0 tmp%79#0)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0)
        let reinterpret_biguint%77#0: biguint = one#0
        let tmp%82#0: bool = (b> reinterpret_biguint%77#0 one_biguint#0)
        let tmp%83#0: bool = (! tmp%82#0)
        (assert tmp%83#0)
        let reinterpret_biguint%78#0: biguint = one#0
        let reinterpret_biguint%79#0: biguint = 0x02
        let tmp%84#0: bool = (b> reinterpret_biguint%78#0 reinterpret_biguint%79#0)
        let tmp%85#0: bool = (! tmp%84#0)
        (assert tmp%85#0)
        let reinterpret_biguint%80#0: biguint = one#0
        let reinterpret_biguint%81#0: biguint = two#0
        let tmp%86#0: bool = (b> reinterpret_biguint%80#0 reinterpret_biguint%81#0)
        let tmp%87#0: bool = (! tmp%86#0)
        (assert tmp%87#0)
        let reinterpret_biguint%82#0: biguint = one#0
        let tmp%88#0: biguint = (itob two_uint64#0)
        let tmp%89#0: bool = (b> reinterpret_biguint%82#0 tmp%88#0)
        let tmp%90#0: bool = (! tmp%89#0)
        (assert tmp%90#0)
        let reinterpret_biguint%83#0: biguint = one#0
        let tmp%91#0: bool = (b> reinterpret_biguint%83#0 two_biguint#0)
        let tmp%92#0: bool = (! tmp%91#0)
        (assert tmp%92#0)
        return 

subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(one: bytes[32], two: bytes[33]) -> void:
    block@0: // L156
        let one_uint64#0: uint64 = 1u
        let one_biguint#0: biguint = 1b
        let two_uint64#0: uint64 = 2u
        let two_biguint#0: biguint = 2b
        let reinterpret_biguint%0#0: biguint = one#0
        let reinterpret_biguint%1#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0)
        let reinterpret_biguint%2#0: biguint = one#0
        let reinterpret_biguint%3#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0)
        let reinterpret_biguint%4#0: biguint = one#0
        let reinterpret_biguint%5#0: biguint = one#0
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%2#0)
        let reinterpret_biguint%6#0: biguint = one#0
        let tmp%3#0: biguint = (itob one_uint64#0)
        let tmp%4#0: bool = (b== reinterpret_biguint%6#0 tmp%3#0)
        (assert tmp%4#0)
        let reinterpret_biguint%7#0: biguint = one#0
        let tmp%5#0: bool = (b== reinterpret_biguint%7#0 one_biguint#0)
        (assert tmp%5#0)
        let reinterpret_biguint%8#0: biguint = one#0
        let reinterpret_biguint%9#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%6#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0)
        let reinterpret_biguint%10#0: biguint = one#0
        let reinterpret_biguint%11#0: biguint = two#0
        let tmp%8#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0)
        let reinterpret_biguint%12#0: biguint = one#0
        let tmp%10#0: biguint = (itob two_uint64#0)
        let tmp%11#0: bool = (b== reinterpret_biguint%12#0 tmp%10#0)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0)
        let reinterpret_biguint%13#0: biguint = one#0
        let tmp%13#0: bool = (b== reinterpret_biguint%13#0 two_biguint#0)
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0)
        let reinterpret_biguint%14#0: biguint = one#0
        let reinterpret_biguint%15#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%15#0: bool = (b!= reinterpret_biguint%14#0 reinterpret_biguint%15#0)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0)
        let reinterpret_biguint%16#0: biguint = one#0
        let reinterpret_biguint%17#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%17#0: bool = (b!= reinterpret_biguint%16#0 reinterpret_biguint%17#0)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0)
        let reinterpret_biguint%18#0: biguint = one#0
        let reinterpret_biguint%19#0: biguint = one#0
        let tmp%19#0: bool = (b!= reinterpret_biguint%18#0 reinterpret_biguint%19#0)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0)
        let reinterpret_biguint%20#0: biguint = one#0
        let tmp%21#0: biguint = (itob one_uint64#0)
        let tmp%22#0: bool = (b!= reinterpret_biguint%20#0 tmp%21#0)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0)
        let reinterpret_biguint%21#0: biguint = one#0
        let tmp%24#0: bool = (b!= reinterpret_biguint%21#0 one_biguint#0)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0)
        let reinterpret_biguint%22#0: biguint = one#0
        let reinterpret_biguint%23#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%26#0: bool = (b!= reinterpret_biguint%22#0 reinterpret_biguint%23#0)
        (assert tmp%26#0)
        let reinterpret_biguint%24#0: biguint = one#0
        let reinterpret_biguint%25#0: biguint = two#0
        let tmp%27#0: bool = (b!= reinterpret_biguint%24#0 reinterpret_biguint%25#0)
        (assert tmp%27#0)
        let reinterpret_biguint%26#0: biguint = one#0
        let tmp%28#0: biguint = (itob two_uint64#0)
        let tmp%29#0: bool = (b!= reinterpret_biguint%26#0 tmp%28#0)
        (assert tmp%29#0)
        let reinterpret_biguint%27#0: biguint = one#0
        let tmp%30#0: bool = (b!= reinterpret_biguint%27#0 two_biguint#0)
        (assert tmp%30#0)
        let reinterpret_biguint%28#0: biguint = one#0
        let reinterpret_biguint%29#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%31#0: bool = (b<= reinterpret_biguint%28#0 reinterpret_biguint%29#0)
        (assert tmp%31#0)
        let reinterpret_biguint%30#0: biguint = one#0
        let reinterpret_biguint%31#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%32#0: bool = (b>= reinterpret_biguint%30#0 reinterpret_biguint%31#0)
        (assert tmp%32#0)
        let reinterpret_biguint%32#0: biguint = one#0
        let reinterpret_biguint%33#0: biguint = one#0
        let tmp%33#0: bool = (b<= reinterpret_biguint%32#0 reinterpret_biguint%33#0)
        (assert tmp%33#0)
        let reinterpret_biguint%34#0: biguint = one#0
        let tmp%34#0: biguint = (itob one_uint64#0)
        let tmp%35#0: bool = (b<= reinterpret_biguint%34#0 tmp%34#0)
        (assert tmp%35#0)
        let reinterpret_biguint%35#0: biguint = one#0
        let tmp%36#0: bool = (b<= reinterpret_biguint%35#0 one_biguint#0)
        (assert tmp%36#0)
        let reinterpret_biguint%36#0: biguint = one#0
        let reinterpret_biguint%37#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%37#0: bool = (b<= reinterpret_biguint%36#0 reinterpret_biguint%37#0)
        (assert tmp%37#0)
        let reinterpret_biguint%38#0: biguint = one#0
        let reinterpret_biguint%39#0: biguint = two#0
        let tmp%38#0: bool = (b<= reinterpret_biguint%38#0 reinterpret_biguint%39#0)
        (assert tmp%38#0)
        let reinterpret_biguint%40#0: biguint = one#0
        let tmp%39#0: biguint = (itob two_uint64#0)
        let tmp%40#0: bool = (b<= reinterpret_biguint%40#0 tmp%39#0)
        (assert tmp%40#0)
        let reinterpret_biguint%41#0: biguint = one#0
        let tmp%41#0: bool = (b<= reinterpret_biguint%41#0 two_biguint#0)
        (assert tmp%41#0)
        let reinterpret_biguint%42#0: biguint = one#0
        let reinterpret_biguint%43#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%42#0: bool = (b< reinterpret_biguint%42#0 reinterpret_biguint%43#0)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0)
        let reinterpret_biguint%44#0: biguint = one#0
        let reinterpret_biguint%45#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%44#0: bool = (b> reinterpret_biguint%44#0 reinterpret_biguint%45#0)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0)
        let reinterpret_biguint%46#0: biguint = one#0
        let reinterpret_biguint%47#0: biguint = one#0
        let tmp%46#0: bool = (b< reinterpret_biguint%46#0 reinterpret_biguint%47#0)
        let tmp%47#0: bool = (! tmp%46#0)
        (assert tmp%47#0)
        let reinterpret_biguint%48#0: biguint = one#0
        let tmp%48#0: biguint = (itob one_uint64#0)
        let tmp%49#0: bool = (b< reinterpret_biguint%48#0 tmp%48#0)
        let tmp%50#0: bool = (! tmp%49#0)
        (assert tmp%50#0)
        let reinterpret_biguint%49#0: biguint = one#0
        let tmp%51#0: bool = (b< reinterpret_biguint%49#0 one_biguint#0)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0)
        let reinterpret_biguint%50#0: biguint = one#0
        let reinterpret_biguint%51#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%53#0: bool = (b< reinterpret_biguint%50#0 reinterpret_biguint%51#0)
        (assert tmp%53#0)
        let reinterpret_biguint%52#0: biguint = one#0
        let reinterpret_biguint%53#0: biguint = two#0
        let tmp%54#0: bool = (b< reinterpret_biguint%52#0 reinterpret_biguint%53#0)
        (assert tmp%54#0)
        let reinterpret_biguint%54#0: biguint = one#0
        let tmp%55#0: biguint = (itob two_uint64#0)
        let tmp%56#0: bool = (b< reinterpret_biguint%54#0 tmp%55#0)
        (assert tmp%56#0)
        let reinterpret_biguint%55#0: biguint = one#0
        let tmp%57#0: bool = (b< reinterpret_biguint%55#0 two_biguint#0)
        (assert tmp%57#0)
        let reinterpret_biguint%56#0: biguint = one#0
        let reinterpret_biguint%57#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%58#0: bool = (b>= reinterpret_biguint%56#0 reinterpret_biguint%57#0)
        (assert tmp%58#0)
        let reinterpret_biguint%58#0: biguint = one#0
        let reinterpret_biguint%59#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%59#0: bool = (b<= reinterpret_biguint%58#0 reinterpret_biguint%59#0)
        (assert tmp%59#0)
        let reinterpret_biguint%60#0: biguint = one#0
        let reinterpret_biguint%61#0: biguint = one#0
        let tmp%60#0: bool = (b>= reinterpret_biguint%60#0 reinterpret_biguint%61#0)
        (assert tmp%60#0)
        let reinterpret_biguint%62#0: biguint = one#0
        let tmp%61#0: biguint = (itob one_uint64#0)
        let tmp%62#0: bool = (b>= reinterpret_biguint%62#0 tmp%61#0)
        (assert tmp%62#0)
        let reinterpret_biguint%63#0: biguint = one#0
        let tmp%63#0: bool = (b>= reinterpret_biguint%63#0 one_biguint#0)
        (assert tmp%63#0)
        let reinterpret_biguint%64#0: biguint = one#0
        let reinterpret_biguint%65#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%64#0: bool = (b>= reinterpret_biguint%64#0 reinterpret_biguint%65#0)
        let tmp%65#0: bool = (! tmp%64#0)
        (assert tmp%65#0)
        let reinterpret_biguint%66#0: biguint = one#0
        let reinterpret_biguint%67#0: biguint = two#0
        let tmp%66#0: bool = (b>= reinterpret_biguint%66#0 reinterpret_biguint%67#0)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0)
        let reinterpret_biguint%68#0: biguint = one#0
        let tmp%68#0: biguint = (itob two_uint64#0)
        let tmp%69#0: bool = (b>= reinterpret_biguint%68#0 tmp%68#0)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0)
        let reinterpret_biguint%69#0: biguint = one#0
        let tmp%71#0: bool = (b>= reinterpret_biguint%69#0 two_biguint#0)
        let tmp%72#0: bool = (! tmp%71#0)
        (assert tmp%72#0)
        let reinterpret_biguint%70#0: biguint = one#0
        let reinterpret_biguint%71#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%73#0: bool = (b> reinterpret_biguint%70#0 reinterpret_biguint%71#0)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0)
        let reinterpret_biguint%72#0: biguint = one#0
        let reinterpret_biguint%73#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000001
        let tmp%75#0: bool = (b< reinterpret_biguint%72#0 reinterpret_biguint%73#0)
        let tmp%76#0: bool = (! tmp%75#0)
        (assert tmp%76#0)
        let reinterpret_biguint%74#0: biguint = one#0
        let reinterpret_biguint%75#0: biguint = one#0
        let tmp%77#0: bool = (b> reinterpret_biguint%74#0 reinterpret_biguint%75#0)
        let tmp%78#0: bool = (! tmp%77#0)
        (assert tmp%78#0)
        let reinterpret_biguint%76#0: biguint = one#0
        let tmp%79#0: biguint = (itob one_uint64#0)
        let tmp%80#0: bool = (b> reinterpret_biguint%76#0 tmp%79#0)
        let tmp%81#0: bool = (! tmp%80#0)
        (assert tmp%81#0)
        let reinterpret_biguint%77#0: biguint = one#0
        let tmp%82#0: bool = (b> reinterpret_biguint%77#0 one_biguint#0)
        let tmp%83#0: bool = (! tmp%82#0)
        (assert tmp%83#0)
        let reinterpret_biguint%78#0: biguint = one#0
        let reinterpret_biguint%79#0: biguint = 0x0000000000000000000000000000000000000000000000000000000000000002
        let tmp%84#0: bool = (b> reinterpret_biguint%78#0 reinterpret_biguint%79#0)
        let tmp%85#0: bool = (! tmp%84#0)
        (assert tmp%85#0)
        let reinterpret_biguint%80#0: biguint = one#0
        let reinterpret_biguint%81#0: biguint = two#0
        let tmp%86#0: bool = (b> reinterpret_biguint%80#0 reinterpret_biguint%81#0)
        let tmp%87#0: bool = (! tmp%86#0)
        (assert tmp%87#0)
        let reinterpret_biguint%82#0: biguint = one#0
        let tmp%88#0: biguint = (itob two_uint64#0)
        let tmp%89#0: bool = (b> reinterpret_biguint%82#0 tmp%88#0)
        let tmp%90#0: bool = (! tmp%89#0)
        (assert tmp%90#0)
        let reinterpret_biguint%83#0: biguint = one#0
        let tmp%91#0: bool = (b> reinterpret_biguint%83#0 two_biguint#0)
        let tmp%92#0: bool = (! tmp%91#0)
        (assert tmp%92#0)
        return 