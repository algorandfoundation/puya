contract test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering:
    program approval:
        subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program() -> bool:
            block@0: // L8
                test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(0x01, 0x0000000000000002)
                test_cases.arc4_numeric_comparisons.uint_n.check_mixed(0x01, 0x000000000000000000000000000000000000000000000000000000000000000002)
                test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(0x0000000000000000000000000000000000000000000000000000000000000001, 0x000000000000000000000000000000000000000000000000000000000000000002)
                return 1u
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n(one: bytes, two: bytes) -> void:
            block@0: // L18
                let tmp%0#0: bool = (b== one#0 0x01)
                (assert tmp%0#0)
                let tmp%3#0: biguint = (itob 1u)
                let tmp%4#0: bool = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: bool = (b== one#0 1b)
                (assert tmp%5#0)
                let tmp%6#0: bool = (b== one#0 0x02)
                let tmp%7#0: bool = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: bool = (b== one#0 two#0)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: biguint = (itob 2u)
                let tmp%11#0: bool = (b== one#0 tmp%10#0)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: bool = (b== one#0 2b)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: bool = (b!= one#0 0x01)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%22#0: bool = (b!= one#0 tmp%3#0)
                let tmp%23#0: bool = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: bool = (b!= one#0 1b)
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: bool = (b!= one#0 0x02)
                (assert tmp%26#0)
                let tmp%27#0: bool = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%29#0: bool = (b!= one#0 tmp%10#0)
                (assert tmp%29#0)
                let tmp%30#0: bool = (b!= one#0 2b)
                (assert tmp%30#0)
                let tmp%31#0: bool = (b<= one#0 0x01)
                (assert tmp%31#0)
                let tmp%32#0: bool = (b>= one#0 0x01)
                (assert tmp%32#0)
                let tmp%35#0: bool = (b<= one#0 tmp%3#0)
                (assert tmp%35#0)
                let tmp%36#0: bool = (b<= one#0 1b)
                (assert tmp%36#0)
                let tmp%37#0: bool = (b<= one#0 0x02)
                (assert tmp%37#0)
                let tmp%38#0: bool = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%40#0: bool = (b<= one#0 tmp%10#0)
                (assert tmp%40#0)
                let tmp%41#0: bool = (b<= one#0 2b)
                (assert tmp%41#0)
                let tmp%42#0: bool = (b< one#0 0x01)
                let tmp%43#0: bool = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: bool = (b> one#0 0x01)
                let tmp%45#0: bool = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%49#0: bool = (b< one#0 tmp%3#0)
                let tmp%50#0: bool = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: bool = (b< one#0 1b)
                let tmp%52#0: bool = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: bool = (b< one#0 0x02)
                (assert tmp%53#0)
                let tmp%54#0: bool = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%56#0: bool = (b< one#0 tmp%10#0)
                (assert tmp%56#0)
                let tmp%57#0: bool = (b< one#0 2b)
                (assert tmp%57#0)
                let tmp%62#0: bool = (b>= one#0 tmp%3#0)
                (assert tmp%62#0)
                let tmp%63#0: bool = (b>= one#0 1b)
                (assert tmp%63#0)
                let tmp%64#0: bool = (b>= one#0 0x02)
                let tmp%65#0: bool = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: bool = (b>= one#0 two#0)
                let tmp%67#0: bool = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%69#0: bool = (b>= one#0 tmp%10#0)
                let tmp%70#0: bool = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: bool = (b>= one#0 2b)
                let tmp%72#0: bool = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%80#0: bool = (b> one#0 tmp%3#0)
                let tmp%81#0: bool = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: bool = (b> one#0 1b)
                let tmp%83#0: bool = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: bool = (b> one#0 0x02)
                let tmp%85#0: bool = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: bool = (b> one#0 two#0)
                let tmp%87#0: bool = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%89#0: bool = (b> one#0 tmp%10#0)
                let tmp%90#0: bool = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: bool = (b> one#0 2b)
                let tmp%92#0: bool = (! tmp%91#0)
                (assert tmp%92#0)
                return 
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed(one: bytes, two: bytes) -> void:
            block@0: // L87
                let tmp%0#0: bool = (b== one#0 0x01)
                (assert tmp%0#0)
                let tmp%3#0: biguint = (itob 1u)
                let tmp%4#0: bool = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: bool = (b== one#0 1b)
                (assert tmp%5#0)
                let tmp%6#0: bool = (b== one#0 0x02)
                let tmp%7#0: bool = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: bool = (b== one#0 two#0)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: biguint = (itob 2u)
                let tmp%11#0: bool = (b== one#0 tmp%10#0)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: bool = (b== one#0 2b)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: bool = (b!= one#0 0x01)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%22#0: bool = (b!= one#0 tmp%3#0)
                let tmp%23#0: bool = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: bool = (b!= one#0 1b)
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: bool = (b!= one#0 0x02)
                (assert tmp%26#0)
                let tmp%27#0: bool = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%29#0: bool = (b!= one#0 tmp%10#0)
                (assert tmp%29#0)
                let tmp%30#0: bool = (b!= one#0 2b)
                (assert tmp%30#0)
                let tmp%31#0: bool = (b<= one#0 0x01)
                (assert tmp%31#0)
                let tmp%32#0: bool = (b>= one#0 0x01)
                (assert tmp%32#0)
                let tmp%35#0: bool = (b<= one#0 tmp%3#0)
                (assert tmp%35#0)
                let tmp%36#0: bool = (b<= one#0 1b)
                (assert tmp%36#0)
                let tmp%37#0: bool = (b<= one#0 0x02)
                (assert tmp%37#0)
                let tmp%38#0: bool = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%40#0: bool = (b<= one#0 tmp%10#0)
                (assert tmp%40#0)
                let tmp%41#0: bool = (b<= one#0 2b)
                (assert tmp%41#0)
                let tmp%42#0: bool = (b< one#0 0x01)
                let tmp%43#0: bool = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: bool = (b> one#0 0x01)
                let tmp%45#0: bool = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%49#0: bool = (b< one#0 tmp%3#0)
                let tmp%50#0: bool = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: bool = (b< one#0 1b)
                let tmp%52#0: bool = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: bool = (b< one#0 0x02)
                (assert tmp%53#0)
                let tmp%54#0: bool = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%56#0: bool = (b< one#0 tmp%10#0)
                (assert tmp%56#0)
                let tmp%57#0: bool = (b< one#0 2b)
                (assert tmp%57#0)
                let tmp%62#0: bool = (b>= one#0 tmp%3#0)
                (assert tmp%62#0)
                let tmp%63#0: bool = (b>= one#0 1b)
                (assert tmp%63#0)
                let tmp%64#0: bool = (b>= one#0 0x02)
                let tmp%65#0: bool = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: bool = (b>= one#0 two#0)
                let tmp%67#0: bool = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%69#0: bool = (b>= one#0 tmp%10#0)
                let tmp%70#0: bool = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: bool = (b>= one#0 2b)
                let tmp%72#0: bool = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%80#0: bool = (b> one#0 tmp%3#0)
                let tmp%81#0: bool = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: bool = (b> one#0 1b)
                let tmp%83#0: bool = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: bool = (b> one#0 0x02)
                let tmp%85#0: bool = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: bool = (b> one#0 two#0)
                let tmp%87#0: bool = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%89#0: bool = (b> one#0 tmp%10#0)
                let tmp%90#0: bool = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: bool = (b> one#0 2b)
                let tmp%92#0: bool = (! tmp%91#0)
                (assert tmp%92#0)
                return 
        
        subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n(one: bytes, two: bytes) -> void:
            block@0: // L156
                let tmp%0#0: bool = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%0#0)
                let tmp%3#0: biguint = (itob 1u)
                let tmp%4#0: bool = (b== one#0 tmp%3#0)
                (assert tmp%4#0)
                let tmp%5#0: bool = (b== one#0 1b)
                (assert tmp%5#0)
                let tmp%6#0: bool = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%7#0: bool = (! tmp%6#0)
                (assert tmp%7#0)
                let tmp%8#0: bool = (b== one#0 two#0)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0)
                let tmp%10#0: biguint = (itob 2u)
                let tmp%11#0: bool = (b== one#0 tmp%10#0)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0)
                let tmp%13#0: bool = (b== one#0 2b)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0)
                let tmp%15#0: bool = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0)
                let tmp%22#0: bool = (b!= one#0 tmp%3#0)
                let tmp%23#0: bool = (! tmp%22#0)
                (assert tmp%23#0)
                let tmp%24#0: bool = (b!= one#0 1b)
                let tmp%25#0: bool = (! tmp%24#0)
                (assert tmp%25#0)
                let tmp%26#0: bool = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%26#0)
                let tmp%27#0: bool = (b!= one#0 two#0)
                (assert tmp%27#0)
                let tmp%29#0: bool = (b!= one#0 tmp%10#0)
                (assert tmp%29#0)
                let tmp%30#0: bool = (b!= one#0 2b)
                (assert tmp%30#0)
                let tmp%31#0: bool = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%31#0)
                let tmp%32#0: bool = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                (assert tmp%32#0)
                let tmp%35#0: bool = (b<= one#0 tmp%3#0)
                (assert tmp%35#0)
                let tmp%36#0: bool = (b<= one#0 1b)
                (assert tmp%36#0)
                let tmp%37#0: bool = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%37#0)
                let tmp%38#0: bool = (b<= one#0 two#0)
                (assert tmp%38#0)
                let tmp%40#0: bool = (b<= one#0 tmp%10#0)
                (assert tmp%40#0)
                let tmp%41#0: bool = (b<= one#0 2b)
                (assert tmp%41#0)
                let tmp%42#0: bool = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%43#0: bool = (! tmp%42#0)
                (assert tmp%43#0)
                let tmp%44#0: bool = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000001)
                let tmp%45#0: bool = (! tmp%44#0)
                (assert tmp%45#0)
                let tmp%49#0: bool = (b< one#0 tmp%3#0)
                let tmp%50#0: bool = (! tmp%49#0)
                (assert tmp%50#0)
                let tmp%51#0: bool = (b< one#0 1b)
                let tmp%52#0: bool = (! tmp%51#0)
                (assert tmp%52#0)
                let tmp%53#0: bool = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                (assert tmp%53#0)
                let tmp%54#0: bool = (b< one#0 two#0)
                (assert tmp%54#0)
                let tmp%56#0: bool = (b< one#0 tmp%10#0)
                (assert tmp%56#0)
                let tmp%57#0: bool = (b< one#0 2b)
                (assert tmp%57#0)
                let tmp%62#0: bool = (b>= one#0 tmp%3#0)
                (assert tmp%62#0)
                let tmp%63#0: bool = (b>= one#0 1b)
                (assert tmp%63#0)
                let tmp%64#0: bool = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%65#0: bool = (! tmp%64#0)
                (assert tmp%65#0)
                let tmp%66#0: bool = (b>= one#0 two#0)
                let tmp%67#0: bool = (! tmp%66#0)
                (assert tmp%67#0)
                let tmp%69#0: bool = (b>= one#0 tmp%10#0)
                let tmp%70#0: bool = (! tmp%69#0)
                (assert tmp%70#0)
                let tmp%71#0: bool = (b>= one#0 2b)
                let tmp%72#0: bool = (! tmp%71#0)
                (assert tmp%72#0)
                let tmp%80#0: bool = (b> one#0 tmp%3#0)
                let tmp%81#0: bool = (! tmp%80#0)
                (assert tmp%81#0)
                let tmp%82#0: bool = (b> one#0 1b)
                let tmp%83#0: bool = (! tmp%82#0)
                (assert tmp%83#0)
                let tmp%84#0: bool = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000002)
                let tmp%85#0: bool = (! tmp%84#0)
                (assert tmp%85#0)
                let tmp%86#0: bool = (b> one#0 two#0)
                let tmp%87#0: bool = (! tmp%86#0)
                (assert tmp%87#0)
                let tmp%89#0: bool = (b> one#0 tmp%10#0)
                let tmp%90#0: bool = (! tmp%89#0)
                (assert tmp%90#0)
                let tmp%91#0: bool = (b> one#0 2b)
                let tmp%92#0: bool = (! tmp%91#0)
                (assert tmp%92#0)
                return 
    
    program clear-state:
        subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program() -> bool:
            block@0: // L14
                return 1u