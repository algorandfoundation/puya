debug: PuyaOptions(paths=['arc4_numeric_comparisons'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@2: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L20
debug: Sealing block@3: // switch_case_0_L27
debug: Terminated block@3: // switch_case_0_L27
debug: Sealing block@4: // switch_case_1_L29
debug: Terminated block@4: // switch_case_1_L29
debug: Sealing block@5: // switch_case_default_L25
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@3: // ternary_true_L150
debug: Terminated block@3: // ternary_true_L150
debug: Sealing block@4: // ternary_false_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Sealing block@7: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Terminated block@7: // for_body_L151
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@6: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@5, i#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#5: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#5: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3) in block@3: // ternary_true_L150
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5
debug: Deleting Phi assignment: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4)
debug: Replaced trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5 in current definition for 1 blocks
debug: Added result#5 to Phi node: let result#2: bytes = φ(result#5 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#5 <- block@5, result#3 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@9: // after_for_L150
debug: Terminated block@9: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L87
debug: Terminated block@0: // L87
debug: Sealing block@0: // L156
debug: Terminated block@0: // L156
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Output IR to arc4_numeric_comparisons/out/UIntNOrdering.ssa.ir
info: Optimizing test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: one#0, reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0
debug: Replacing {reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0} with one#0 made 60 modifications
debug: Found equivalence set: two#0, reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0
debug: Replacing {reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0} with two#0 made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== one#0 one#0) to 1u
debug: Simplified (b!= one#0 one#0) to 0u
debug: Simplified (b<= one#0 one#0) to 1u
debug: Simplified (b< one#0 one#0) to 0u
debug: Simplified (b>= one#0 one#0) to 1u
debug: Simplified (b> one#0 one#0) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one_uint64#0
debug: Removing unused variable one_biguint#0
debug: Removing unused variable two_uint64#0
debug: Removing unused variable two_biguint#0
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable reinterpret_biguint%3#0
debug: Removing unused variable reinterpret_biguint%9#0
debug: Removing unused variable reinterpret_biguint%15#0
debug: Removing unused variable reinterpret_biguint%17#0
debug: Removing unused variable reinterpret_biguint%23#0
debug: Removing unused variable reinterpret_biguint%29#0
debug: Removing unused variable reinterpret_biguint%31#0
debug: Removing unused variable reinterpret_biguint%37#0
debug: Removing unused variable reinterpret_biguint%43#0
debug: Removing unused variable reinterpret_biguint%45#0
debug: Removing unused variable reinterpret_biguint%51#0
debug: Removing unused variable reinterpret_biguint%57#0
debug: Removing unused variable reinterpret_biguint%59#0
debug: Removing unused variable reinterpret_biguint%65#0
debug: Removing unused variable reinterpret_biguint%71#0
debug: Removing unused variable reinterpret_biguint%73#0
debug: Removing unused variable reinterpret_biguint%79#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%1#0: bool = (b== one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:26:11, ir_type=bool, name='tmp%0', version=0),)
debug: Replacing redundant declaration let tmp%17#0: bool = (b!= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:36:16, ir_type=bool, name='tmp%15', version=0),)
debug: Replacing redundant declaration let tmp%21#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:29:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%28#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:33:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%34#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:29:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%39#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:33:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%48#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:29:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%55#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:33:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%58#0: bool = (b>= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:47:11, ir_type=bool, name='tmp%32', version=0),)
debug: Replacing redundant declaration let tmp%59#0: bool = (b<= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:46:11, ir_type=bool, name='tmp%31', version=0),)
debug: Replacing redundant declaration let tmp%61#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:29:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%68#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:33:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%73#0: bool = (b> one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:57:16, ir_type=bool, name='tmp%44', version=0),)
debug: Replacing redundant declaration let tmp%75#0: bool = (b< one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:56:16, ir_type=bool, name='tmp%42', version=0),)
debug: Replacing redundant declaration let tmp%79#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:29:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%88#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:33:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%15#0, tmp%17#0
debug: Replacing {tmp%17#0} with tmp%15#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0
debug: Replacing {tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0} with tmp%3#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0
debug: Replacing {tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0} with tmp%10#0 made 5 modifications
debug: Found equivalence set: tmp%32#0, tmp%58#0
debug: Replacing {tmp%58#0} with tmp%32#0 made 1 modifications
debug: Found equivalence set: tmp%31#0, tmp%59#0
debug: Replacing {tmp%59#0} with tmp%31#0 made 1 modifications
debug: Found equivalence set: tmp%44#0, tmp%73#0
debug: Replacing {tmp%73#0} with tmp%44#0 made 1 modifications
debug: Found equivalence set: tmp%42#0, tmp%75#0
debug: Replacing {tmp%75#0} with tmp%42#0 made 1 modifications
debug: Removing redundant assert of tmp%0#0
debug: Replacing redundant declaration let tmp%18#0: bool = (! tmp%15#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:36:11-25, ir_type=bool, name='tmp%16', version=0),)
debug: Removing redundant assert of tmp%32#0
debug: Removing redundant assert of tmp%31#0
debug: Replacing redundant declaration let tmp%74#0: bool = (! tmp%44#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:57:11-24, ir_type=bool, name='tmp%45', version=0),)
debug: Replacing redundant declaration let tmp%76#0: bool = (! tmp%42#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:56:11-24, ir_type=bool, name='tmp%43', version=0),)
debug: Found equivalence set: tmp%16#0, tmp%18#0
debug: Replacing {tmp%18#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: tmp%45#0, tmp%74#0
debug: Replacing {tmp%74#0} with tmp%45#0 made 1 modifications
debug: Found equivalence set: tmp%43#0, tmp%76#0
debug: Replacing {tmp%76#0} with tmp%43#0 made 1 modifications
debug: Removing redundant assert of tmp%16#0
debug: Removing redundant assert of tmp%45#0
debug: Removing redundant assert of tmp%43#0
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: one#0, reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0
debug: Replacing {reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0} with one#0 made 60 modifications
debug: Found equivalence set: two#0, reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0
debug: Replacing {reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0} with two#0 made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== one#0 one#0) to 1u
debug: Simplified (b!= one#0 one#0) to 0u
debug: Simplified (b<= one#0 one#0) to 1u
debug: Simplified (b< one#0 one#0) to 0u
debug: Simplified (b>= one#0 one#0) to 1u
debug: Simplified (b> one#0 one#0) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one_uint64#0
debug: Removing unused variable one_biguint#0
debug: Removing unused variable two_uint64#0
debug: Removing unused variable two_biguint#0
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable reinterpret_biguint%3#0
debug: Removing unused variable reinterpret_biguint%9#0
debug: Removing unused variable reinterpret_biguint%15#0
debug: Removing unused variable reinterpret_biguint%17#0
debug: Removing unused variable reinterpret_biguint%23#0
debug: Removing unused variable reinterpret_biguint%29#0
debug: Removing unused variable reinterpret_biguint%31#0
debug: Removing unused variable reinterpret_biguint%37#0
debug: Removing unused variable reinterpret_biguint%43#0
debug: Removing unused variable reinterpret_biguint%45#0
debug: Removing unused variable reinterpret_biguint%51#0
debug: Removing unused variable reinterpret_biguint%57#0
debug: Removing unused variable reinterpret_biguint%59#0
debug: Removing unused variable reinterpret_biguint%65#0
debug: Removing unused variable reinterpret_biguint%71#0
debug: Removing unused variable reinterpret_biguint%73#0
debug: Removing unused variable reinterpret_biguint%79#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%1#0: bool = (b== one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:95:11, ir_type=bool, name='tmp%0', version=0),)
debug: Replacing redundant declaration let tmp%17#0: bool = (b!= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:105:16, ir_type=bool, name='tmp%15', version=0),)
debug: Replacing redundant declaration let tmp%21#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:98:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%28#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:102:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%34#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:98:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%39#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:102:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%48#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:98:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%55#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:102:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%58#0: bool = (b>= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:116:11, ir_type=bool, name='tmp%32', version=0),)
debug: Replacing redundant declaration let tmp%59#0: bool = (b<= one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:115:11, ir_type=bool, name='tmp%31', version=0),)
debug: Replacing redundant declaration let tmp%61#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:98:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%68#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:102:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%73#0: bool = (b> one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:126:16, ir_type=bool, name='tmp%44', version=0),)
debug: Replacing redundant declaration let tmp%75#0: bool = (b< one#0 0x01) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:125:16, ir_type=bool, name='tmp%42', version=0),)
debug: Replacing redundant declaration let tmp%79#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:98:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%88#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:102:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%15#0, tmp%17#0
debug: Replacing {tmp%17#0} with tmp%15#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0
debug: Replacing {tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0} with tmp%3#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0
debug: Replacing {tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0} with tmp%10#0 made 5 modifications
debug: Found equivalence set: tmp%32#0, tmp%58#0
debug: Replacing {tmp%58#0} with tmp%32#0 made 1 modifications
debug: Found equivalence set: tmp%31#0, tmp%59#0
debug: Replacing {tmp%59#0} with tmp%31#0 made 1 modifications
debug: Found equivalence set: tmp%44#0, tmp%73#0
debug: Replacing {tmp%73#0} with tmp%44#0 made 1 modifications
debug: Found equivalence set: tmp%42#0, tmp%75#0
debug: Replacing {tmp%75#0} with tmp%42#0 made 1 modifications
debug: Removing redundant assert of tmp%0#0
debug: Replacing redundant declaration let tmp%18#0: bool = (! tmp%15#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:105:11-25, ir_type=bool, name='tmp%16', version=0),)
debug: Removing redundant assert of tmp%32#0
debug: Removing redundant assert of tmp%31#0
debug: Replacing redundant declaration let tmp%74#0: bool = (! tmp%44#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:126:11-24, ir_type=bool, name='tmp%45', version=0),)
debug: Replacing redundant declaration let tmp%76#0: bool = (! tmp%42#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:125:11-24, ir_type=bool, name='tmp%43', version=0),)
debug: Found equivalence set: tmp%16#0, tmp%18#0
debug: Replacing {tmp%18#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: tmp%45#0, tmp%74#0
debug: Replacing {tmp%74#0} with tmp%45#0 made 1 modifications
debug: Found equivalence set: tmp%43#0, tmp%76#0
debug: Replacing {tmp%76#0} with tmp%43#0 made 1 modifications
debug: Removing redundant assert of tmp%16#0
debug: Removing redundant assert of tmp%45#0
debug: Removing redundant assert of tmp%43#0
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: one#0, reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0
debug: Replacing {reinterpret_biguint%0#0, reinterpret_biguint%2#0, reinterpret_biguint%4#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0, reinterpret_biguint%7#0, reinterpret_biguint%8#0, reinterpret_biguint%10#0, reinterpret_biguint%12#0, reinterpret_biguint%13#0, reinterpret_biguint%14#0, reinterpret_biguint%16#0, reinterpret_biguint%18#0, reinterpret_biguint%19#0, reinterpret_biguint%20#0, reinterpret_biguint%21#0, reinterpret_biguint%22#0, reinterpret_biguint%24#0, reinterpret_biguint%26#0, reinterpret_biguint%27#0, reinterpret_biguint%28#0, reinterpret_biguint%30#0, reinterpret_biguint%32#0, reinterpret_biguint%33#0, reinterpret_biguint%34#0, reinterpret_biguint%35#0, reinterpret_biguint%36#0, reinterpret_biguint%38#0, reinterpret_biguint%40#0, reinterpret_biguint%41#0, reinterpret_biguint%42#0, reinterpret_biguint%44#0, reinterpret_biguint%46#0, reinterpret_biguint%47#0, reinterpret_biguint%48#0, reinterpret_biguint%49#0, reinterpret_biguint%50#0, reinterpret_biguint%52#0, reinterpret_biguint%54#0, reinterpret_biguint%55#0, reinterpret_biguint%56#0, reinterpret_biguint%58#0, reinterpret_biguint%60#0, reinterpret_biguint%61#0, reinterpret_biguint%62#0, reinterpret_biguint%63#0, reinterpret_biguint%64#0, reinterpret_biguint%66#0, reinterpret_biguint%68#0, reinterpret_biguint%69#0, reinterpret_biguint%70#0, reinterpret_biguint%72#0, reinterpret_biguint%74#0, reinterpret_biguint%75#0, reinterpret_biguint%76#0, reinterpret_biguint%77#0, reinterpret_biguint%78#0, reinterpret_biguint%80#0, reinterpret_biguint%82#0, reinterpret_biguint%83#0} with one#0 made 60 modifications
debug: Found equivalence set: two#0, reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0
debug: Replacing {reinterpret_biguint%11#0, reinterpret_biguint%25#0, reinterpret_biguint%39#0, reinterpret_biguint%53#0, reinterpret_biguint%67#0, reinterpret_biguint%81#0} with two#0 made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== one#0 one#0) to 1u
debug: Simplified (b!= one#0 one#0) to 0u
debug: Simplified (b<= one#0 one#0) to 1u
debug: Simplified (b< one#0 one#0) to 0u
debug: Simplified (b>= one#0 one#0) to 1u
debug: Simplified (b> one#0 one#0) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one_uint64#0
debug: Removing unused variable one_biguint#0
debug: Removing unused variable two_uint64#0
debug: Removing unused variable two_biguint#0
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable reinterpret_biguint%3#0
debug: Removing unused variable reinterpret_biguint%9#0
debug: Removing unused variable reinterpret_biguint%15#0
debug: Removing unused variable reinterpret_biguint%17#0
debug: Removing unused variable reinterpret_biguint%23#0
debug: Removing unused variable reinterpret_biguint%29#0
debug: Removing unused variable reinterpret_biguint%31#0
debug: Removing unused variable reinterpret_biguint%37#0
debug: Removing unused variable reinterpret_biguint%43#0
debug: Removing unused variable reinterpret_biguint%45#0
debug: Removing unused variable reinterpret_biguint%51#0
debug: Removing unused variable reinterpret_biguint%57#0
debug: Removing unused variable reinterpret_biguint%59#0
debug: Removing unused variable reinterpret_biguint%65#0
debug: Removing unused variable reinterpret_biguint%71#0
debug: Removing unused variable reinterpret_biguint%73#0
debug: Removing unused variable reinterpret_biguint%79#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%1#0: bool = (b== one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:164:11, ir_type=bool, name='tmp%0', version=0),)
debug: Replacing redundant declaration let tmp%17#0: bool = (b!= one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:174:16, ir_type=bool, name='tmp%15', version=0),)
debug: Replacing redundant declaration let tmp%21#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:167:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%28#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:171:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%34#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:167:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%39#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:171:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%48#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:167:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%55#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:171:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%58#0: bool = (b>= one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:185:11, ir_type=bool, name='tmp%32', version=0),)
debug: Replacing redundant declaration let tmp%59#0: bool = (b<= one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:184:11, ir_type=bool, name='tmp%31', version=0),)
debug: Replacing redundant declaration let tmp%61#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:167:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%68#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:171:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Replacing redundant declaration let tmp%73#0: bool = (b> one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:195:16, ir_type=bool, name='tmp%44', version=0),)
debug: Replacing redundant declaration let tmp%75#0: bool = (b< one#0 0x0000000000000000000000000000000000000000000000000000000000000001) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:194:16, ir_type=bool, name='tmp%42', version=0),)
debug: Replacing redundant declaration let tmp%79#0: biguint = (itob 1u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:167:11, ir_type=biguint, name='tmp%3', version=0),)
debug: Replacing redundant declaration let tmp%88#0: biguint = (itob 2u) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:171:16, ir_type=biguint, name='tmp%10', version=0),)
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%15#0, tmp%17#0
debug: Replacing {tmp%17#0} with tmp%15#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0
debug: Replacing {tmp%21#0, tmp%34#0, tmp%48#0, tmp%61#0, tmp%79#0} with tmp%3#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0
debug: Replacing {tmp%28#0, tmp%39#0, tmp%55#0, tmp%68#0, tmp%88#0} with tmp%10#0 made 5 modifications
debug: Found equivalence set: tmp%32#0, tmp%58#0
debug: Replacing {tmp%58#0} with tmp%32#0 made 1 modifications
debug: Found equivalence set: tmp%31#0, tmp%59#0
debug: Replacing {tmp%59#0} with tmp%31#0 made 1 modifications
debug: Found equivalence set: tmp%44#0, tmp%73#0
debug: Replacing {tmp%73#0} with tmp%44#0 made 1 modifications
debug: Found equivalence set: tmp%42#0, tmp%75#0
debug: Replacing {tmp%75#0} with tmp%42#0 made 1 modifications
debug: Removing redundant assert of tmp%0#0
debug: Replacing redundant declaration let tmp%18#0: bool = (! tmp%15#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:174:11-25, ir_type=bool, name='tmp%16', version=0),)
debug: Removing redundant assert of tmp%32#0
debug: Removing redundant assert of tmp%31#0
debug: Replacing redundant declaration let tmp%74#0: bool = (! tmp%44#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:195:11-24, ir_type=bool, name='tmp%45', version=0),)
debug: Replacing redundant declaration let tmp%76#0: bool = (! tmp%42#0) with copy of existing registers (Register(source_location=arc4_numeric_comparisons/uint_n.py:194:11-24, ir_type=bool, name='tmp%43', version=0),)
debug: Found equivalence set: tmp%16#0, tmp%18#0
debug: Replacing {tmp%18#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: tmp%45#0, tmp%74#0
debug: Replacing {tmp%74#0} with tmp%45#0 made 1 modifications
debug: Found equivalence set: tmp%43#0, tmp%76#0
debug: Replacing {tmp%76#0} with tmp%43#0 made 1 modifications
debug: Removing redundant assert of tmp%16#0
debug: Removing redundant assert of tmp%45#0
debug: Removing redundant assert of tmp%43#0
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_numeric_comparisons/out/UIntNOrdering.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%77#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%77#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%77#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_numeric_comparisons/out/UIntNOrdering.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%78#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%78#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%78#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to arc4_numeric_comparisons/out/UIntNOrdering.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 4, ending loop
debug: Removing Phis from test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Removing Phis from test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Removing Phis from test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Removing Phis from test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Removing Phis from test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Coalescing local variables in test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_numeric_comparisons.uint_n.check_mixed using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.approval_program
debug: Sequentializing parallel copies in test_cases.arc4_numeric_comparisons.uint_n.check_both_uint_n
debug: Sequentializing parallel copies in test_cases.arc4_numeric_comparisons.uint_n.check_mixed
debug: Sequentializing parallel copies in test_cases.arc4_numeric_comparisons.uint_n.check_both_big_uint_n
debug: Sequentializing parallel copies in test_cases.arc4_numeric_comparisons.uint_n.UIntNOrdering.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to arc4_numeric_comparisons/out/UIntNOrdering.destructured.ir
debug: Inserted check_both_uint_n_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[13]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[15]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[22]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[27]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[29]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[31]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[33]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[38]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[40]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[42]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[44]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[52]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[54]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[56]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[58]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[63]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[65]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[67]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[69]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[74]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[76]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[78]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[80]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[85]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[87]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[89]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[91]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[96]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[98]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[100]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[102]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[107]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[109]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[114]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[116]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[121]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[123]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[128]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[130]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[135]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[137]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[142]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[144]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[149]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[151]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[156]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[158]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[163]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[165]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[170]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[172]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[177]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[179]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[184]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[186]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[191]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[193]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[195]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[197]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[202]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[204]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[206]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[208]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[213]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[215]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[217]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[219]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[224]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[226]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[228]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[230]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[235]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[237]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[242]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[244]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[249]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[251]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[256]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[258]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[263]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[265]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[270]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[272]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[277]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[279]: 'load tmp%64#0' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[281]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[283]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[288]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[290]: 'load tmp%66#0' with 'load tmp%66#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[292]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[294]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[299]: 'store tmp%69#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[301]: 'load tmp%69#0' with 'load tmp%69#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[303]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[305]: 'load tmp%70#0' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[310]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[312]: 'load tmp%71#0' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[314]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[316]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[321]: 'store tmp%80#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[323]: 'load tmp%80#0' with 'load tmp%80#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[325]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[327]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[332]: 'store tmp%82#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[334]: 'load tmp%82#0' with 'load tmp%82#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[336]: 'store tmp%83#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[338]: 'load tmp%83#0' with 'load tmp%83#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[343]: 'store tmp%84#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[345]: 'load tmp%84#0' with 'load tmp%84#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[347]: 'store tmp%85#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[349]: 'load tmp%85#0' with 'load tmp%85#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[354]: 'store tmp%86#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[356]: 'load tmp%86#0' with 'load tmp%86#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[358]: 'store tmp%87#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[360]: 'load tmp%87#0' with 'load tmp%87#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[365]: 'store tmp%89#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[367]: 'load tmp%89#0' with 'load tmp%89#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[369]: 'store tmp%90#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[371]: 'load tmp%90#0' with 'load tmp%90#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[376]: 'store tmp%91#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[378]: 'load tmp%91#0' with 'load tmp%91#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[380]: 'store tmp%92#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[382]: 'load tmp%92#0' with 'load tmp%92#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[9]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[49]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[52]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[214]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[264]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[251]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[301]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[122]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[178]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[267]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[325]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[86]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[151]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[152]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[216]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[306]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[372]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[53]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[123]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[87]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_uint_n_block@0.ops[183]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_uint_n_block@0.ops[256]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[13]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[15]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[22]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[27]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[29]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[31]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[33]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[38]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[40]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[42]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[44]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[52]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[54]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[56]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[58]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[63]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[65]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[67]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[69]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[74]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[76]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[78]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[80]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[85]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[87]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[89]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[91]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[96]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[98]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[100]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[102]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[107]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[109]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[114]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[116]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[121]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[123]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[128]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[130]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[135]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[137]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[142]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[144]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[149]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[151]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[156]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[158]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[163]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[165]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[170]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[172]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[177]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[179]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[184]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[186]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[191]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[193]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[195]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[197]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[202]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[204]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[206]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[208]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[213]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[215]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[217]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[219]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[224]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[226]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[228]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[230]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[235]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[237]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[242]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[244]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[249]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[251]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[256]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[258]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[263]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[265]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[270]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[272]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[277]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[279]: 'load tmp%64#0' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[281]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[283]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[288]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[290]: 'load tmp%66#0' with 'load tmp%66#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[292]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[294]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[299]: 'store tmp%69#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[301]: 'load tmp%69#0' with 'load tmp%69#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[303]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[305]: 'load tmp%70#0' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[310]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[312]: 'load tmp%71#0' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[314]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[316]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[321]: 'store tmp%80#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[323]: 'load tmp%80#0' with 'load tmp%80#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[325]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[327]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[332]: 'store tmp%82#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[334]: 'load tmp%82#0' with 'load tmp%82#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[336]: 'store tmp%83#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[338]: 'load tmp%83#0' with 'load tmp%83#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[343]: 'store tmp%84#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[345]: 'load tmp%84#0' with 'load tmp%84#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[347]: 'store tmp%85#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[349]: 'load tmp%85#0' with 'load tmp%85#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[354]: 'store tmp%86#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[356]: 'load tmp%86#0' with 'load tmp%86#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[358]: 'store tmp%87#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[360]: 'load tmp%87#0' with 'load tmp%87#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[365]: 'store tmp%89#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[367]: 'load tmp%89#0' with 'load tmp%89#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[369]: 'store tmp%90#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[371]: 'load tmp%90#0' with 'load tmp%90#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[376]: 'store tmp%91#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[378]: 'load tmp%91#0' with 'load tmp%91#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[380]: 'store tmp%92#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[382]: 'load tmp%92#0' with 'load tmp%92#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[9]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[49]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[52]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[214]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[264]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[251]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[301]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[122]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[178]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[267]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[325]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[86]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[151]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[152]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[216]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[306]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[372]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[53]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[123]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[87]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_mixed_block@0.ops[183]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_mixed_block@0.ops[256]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[13]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[15]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[22]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[27]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[29]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[31]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[33]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[38]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[40]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[42]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[44]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[52]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[54]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[56]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[58]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[63]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[65]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[67]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[69]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[74]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[76]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[78]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[80]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[85]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[87]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[89]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[91]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[96]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[98]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[100]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[102]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[107]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[109]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[114]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[116]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[121]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[123]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[128]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[130]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[135]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[137]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[142]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[144]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[149]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[151]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[156]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[158]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[163]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[165]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[170]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[172]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[177]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[179]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[184]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[186]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[191]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[193]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[195]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[197]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[202]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[204]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[206]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[208]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[213]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[215]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[217]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[219]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[224]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[226]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[228]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[230]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[235]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[237]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[242]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[244]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[249]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[251]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[256]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[258]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[263]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[265]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[270]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[272]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[277]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[279]: 'load tmp%64#0' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[281]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[283]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[288]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[290]: 'load tmp%66#0' with 'load tmp%66#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[292]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[294]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[299]: 'store tmp%69#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[301]: 'load tmp%69#0' with 'load tmp%69#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[303]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[305]: 'load tmp%70#0' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[310]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[312]: 'load tmp%71#0' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[314]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[316]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[321]: 'store tmp%80#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[323]: 'load tmp%80#0' with 'load tmp%80#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[325]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[327]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[332]: 'store tmp%82#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[334]: 'load tmp%82#0' with 'load tmp%82#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[336]: 'store tmp%83#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[338]: 'load tmp%83#0' with 'load tmp%83#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[343]: 'store tmp%84#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[345]: 'load tmp%84#0' with 'load tmp%84#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[347]: 'store tmp%85#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[349]: 'load tmp%85#0' with 'load tmp%85#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[354]: 'store tmp%86#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[356]: 'load tmp%86#0' with 'load tmp%86#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[358]: 'store tmp%87#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[360]: 'load tmp%87#0' with 'load tmp%87#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[365]: 'store tmp%89#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[367]: 'load tmp%89#0' with 'load tmp%89#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[369]: 'store tmp%90#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[371]: 'load tmp%90#0' with 'load tmp%90#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[376]: 'store tmp%91#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[378]: 'load tmp%91#0' with 'load tmp%91#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[380]: 'store tmp%92#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[382]: 'load tmp%92#0' with 'load tmp%92#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[9]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[49]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[52]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[214]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[264]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[251]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[301]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[122]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[178]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[267]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[325]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[86]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[151]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[152]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[216]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[306]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[372]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[53]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[123]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[87]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_both_big_uint_n_block@0.ops[183]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_both_big_uint_n_block@0.ops[256]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
info: Writing arc4_numeric_comparisons/out/UIntNOrdering.approval.teal
info: Writing arc4_numeric_comparisons/out/UIntNOrdering.clear.teal
info: Writing arc4_numeric_comparisons/out/UIntNOrdering.approval.bin
info: Writing arc4_numeric_comparisons/out/UIntNOrdering.clear.bin