contract Reference
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  globals {
    ['int_1']: uint64
    ['bytes_1']: bytes
    ['bytes_2']: bytes
  }
  locals {
    ['int_l1']: uint64
    ['int_l2']: uint64
    ['int_l3']: uint64
    ['bytes_l1']: bytes
    ['bytes_l2']: bytes
    ['bytes_l3']: bytes
    ['bytes_l4']: bytes
  }
  
  subroutine test_cases.application.contract.Reference.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine test_cases.application.contract.Reference.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.application.contract.Reference.__init__(): void
  {
    GlobalState['int_1']: uint64 = 0u
    GlobalState['bytes_1']: bytes = hex<"">
    GlobalState['bytes_2']: bytes = hex<"">
  }
  
  subroutine test_cases.application.contract.Reference.approval_program(): bool
  {
    if (txn<NumAppArgs>() == 1u) {
      if (txna<ApplicationArgs, 0>() == hex<"76616C6964617465">) {
        this::validate_asset(global<CurrentApplicationID>())
      } else {
        assert(false, comment="Expected validate")
      }
    }
    return true
  }
  
  subroutine test_cases.application.contract.Reference.validate_asset(app: application): void
  {
    assert(!(app_opted_in(txn<Sender>(), app)), comment="app opted in")
    assert(checked_maybe(app_params_get<AppCreator>(app)) == global<CreatorAddress>(), comment="expected creator")
    assert(checked_maybe(app_params_get<AppGlobalNumUint>(app)) == 1u, comment="expected global_num_uint")
    assert(checked_maybe(app_params_get<AppGlobalNumByteSlice>(app)) == 2u, comment="expected global_num_bytes")
    assert(checked_maybe(app_params_get<AppLocalNumUint>(app)) == 3u, comment="expected local_num_uint")
    assert(checked_maybe(app_params_get<AppLocalNumByteSlice>(app)) == 4u, comment="expected local_num_bytes")
    assert(len(checked_maybe(app_params_get<AppApprovalProgram>(app))) != 0u, comment="expected approval_program")
    assert(len(checked_maybe(app_params_get<AppClearStateProgram>(app))) != 0u, comment="expected clear_state_program")
    assert(app == global<CurrentApplicationID>(), comment="expected current_application_id")
    assert(checked_maybe(app_params_get<AppAddress>(app)) == global<CurrentApplicationAddress>(), comment="expected current_application_address")
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}