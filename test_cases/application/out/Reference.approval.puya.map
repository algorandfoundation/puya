{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;AAcQ;;;;;;;AAAa;;AAAb;AACA;;;;;;;;;;;AAAA;AACA;;;;;;;;;;;AAAA;AAWG;;AAAuB;;AAAvB;AAAX;;;AACe;;;AAA8B;;;;;;;;;;AAA9B;AAAf;AACoC;;AAUjB;;AAAA;;AAAA;AAAJ;AAAP;AACO;AAAA;;AAAA;AAAe;;AAAf;AAAP;AACO;AAAA;;AAAA;AAAuB;;AAAvB;AAAP;AACO;AAAA;;AAAA;AAAwB;;AAAxB;AAAP;AACO;AAAA;;AAAA;AAAsB;;AAAtB;AAAP;AACO;AAAA;;AAAA;AAAuB;;AAAvB;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACO;AAAO;;AAAP;AAAP;AAEI;;AAAA;AAAe;;AAAf;AADJ;AAhBO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.application.contract.Reference.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes \"int_1\"",
      "defined_out": [
        "\"int_1\""
      ],
      "stack_out": [
        "\"int_1\""
      ]
    },
    "13": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "\"int_1\"",
        "0"
      ],
      "stack_out": [
        "\"int_1\"",
        "0"
      ]
    },
    "15": {
      "op": "app_global_put",
      "stack_out": []
    },
    "16": {
      "op": "pushbytess \"bytes_1\" 0x // \"bytes_1\", 0x",
      "defined_out": [
        "\"bytes_1\"",
        "0x"
      ],
      "stack_out": [
        "\"bytes_1\"",
        "0x"
      ]
    },
    "27": {
      "op": "app_global_put",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess \"bytes_2\" 0x // \"bytes_2\", 0x",
      "defined_out": [
        "\"bytes_2\"",
        "0x"
      ],
      "stack_out": [
        "\"bytes_2\"",
        "0x"
      ]
    },
    "39": {
      "op": "app_global_put",
      "stack_out": []
    },
    "40": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "42": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "1"
      ]
    },
    "44": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "45": {
      "op": "bz main_after_if_else@7",
      "stack_out": []
    },
    "48": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "51": {
      "op": "pushbytes 0x76616c6964617465",
      "defined_out": [
        "0x76616c6964617465",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x76616c6964617465"
      ]
    },
    "61": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "62": {
      "error": "Expected validate",
      "op": "assert // Expected validate",
      "stack_out": []
    },
    "63": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0"
      ]
    },
    "65": {
      "op": "txn Sender",
      "defined_out": [
        "app#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#1"
      ]
    },
    "67": {
      "op": "dig 1",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%0#1",
        "app#0 (copy)"
      ]
    },
    "69": {
      "op": "app_opted_in",
      "defined_out": [
        "app#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%1#1"
      ]
    },
    "70": {
      "op": "!",
      "defined_out": [
        "app#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%2#1"
      ]
    },
    "71": {
      "error": "app opted in",
      "op": "assert // app opted in",
      "stack_out": [
        "app#0"
      ]
    },
    "72": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "73": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "app#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "app#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "75": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%0#0"
      ]
    },
    "76": {
      "op": "global CreatorAddress",
      "defined_out": [
        "app#0",
        "tmp%3#1",
        "value%0#0"
      ],
      "stack_out": [
        "app#0",
        "value%0#0",
        "tmp%3#1"
      ]
    },
    "78": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%4#1"
      ]
    },
    "79": {
      "error": "expected creator",
      "op": "assert // expected creator",
      "stack_out": [
        "app#0"
      ]
    },
    "80": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "81": {
      "op": "app_params_get AppGlobalNumUint",
      "defined_out": [
        "app#0",
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "app#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "83": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%1#0"
      ]
    },
    "84": {
      "op": "pushint 1 // 1",
      "stack_out": [
        "app#0",
        "value%1#0",
        "1"
      ]
    },
    "86": {
      "op": "==",
      "stack_out": [
        "app#0",
        "tmp%5#0"
      ]
    },
    "87": {
      "error": "expected global_num_uint",
      "op": "assert // expected global_num_uint",
      "stack_out": [
        "app#0"
      ]
    },
    "88": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "89": {
      "op": "app_params_get AppGlobalNumByteSlice",
      "defined_out": [
        "app#0",
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "app#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "91": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%2#0"
      ]
    },
    "92": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "app#0",
        "value%2#0"
      ],
      "stack_out": [
        "app#0",
        "value%2#0",
        "2"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%6#1"
      ]
    },
    "95": {
      "error": "expected global_num_bytes",
      "op": "assert // expected global_num_bytes",
      "stack_out": [
        "app#0"
      ]
    },
    "96": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "97": {
      "op": "app_params_get AppLocalNumUint",
      "defined_out": [
        "app#0",
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "app#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "99": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%3#0"
      ]
    },
    "100": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "app#0",
        "value%3#0"
      ],
      "stack_out": [
        "app#0",
        "value%3#0",
        "3"
      ]
    },
    "102": {
      "op": "==",
      "stack_out": [
        "app#0",
        "tmp%7#0"
      ]
    },
    "103": {
      "error": "expected local_num_uint",
      "op": "assert // expected local_num_uint",
      "stack_out": [
        "app#0"
      ]
    },
    "104": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "105": {
      "op": "app_params_get AppLocalNumByteSlice",
      "defined_out": [
        "app#0",
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "app#0",
        "value%4#0",
        "check%4#0"
      ]
    },
    "107": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%4#0"
      ]
    },
    "108": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "app#0",
        "value%4#0"
      ],
      "stack_out": [
        "app#0",
        "value%4#0",
        "4"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%8#1"
      ],
      "stack_out": [
        "app#0",
        "tmp%8#1"
      ]
    },
    "111": {
      "error": "expected local_num_bytes",
      "op": "assert // expected local_num_bytes",
      "stack_out": [
        "app#0"
      ]
    },
    "112": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "113": {
      "op": "app_params_get AppApprovalProgram",
      "defined_out": [
        "app#0",
        "check%5#0",
        "value%5#0"
      ],
      "stack_out": [
        "app#0",
        "value%5#0",
        "check%5#0"
      ]
    },
    "115": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%5#0"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "app#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%9#0"
      ]
    },
    "117": {
      "error": "expected approval_program",
      "op": "assert // expected approval_program",
      "stack_out": [
        "app#0"
      ]
    },
    "118": {
      "op": "dup",
      "stack_out": [
        "app#0",
        "app#0 (copy)"
      ]
    },
    "119": {
      "op": "app_params_get AppClearStateProgram",
      "defined_out": [
        "app#0",
        "check%6#0",
        "value%6#0"
      ],
      "stack_out": [
        "app#0",
        "value%6#0",
        "check%6#0"
      ]
    },
    "121": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "app#0",
        "value%6#0"
      ]
    },
    "122": {
      "op": "len",
      "defined_out": [
        "app#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%11#0"
      ]
    },
    "123": {
      "error": "expected clear_state_program",
      "op": "assert // expected clear_state_program",
      "stack_out": [
        "app#0"
      ]
    },
    "124": {
      "op": "dup"
    },
    "125": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "app#0",
        "app#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "app#0",
        "app#0 (copy)",
        "tmp%13#0"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "app#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app#0",
        "tmp%14#0"
      ]
    },
    "128": {
      "error": "expected current_application_id",
      "op": "assert // expected current_application_id",
      "stack_out": [
        "app#0"
      ]
    },
    "129": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%7#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "check%7#0"
      ]
    },
    "131": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%7#0"
      ]
    },
    "132": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%15#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "tmp%15#0"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "135": {
      "error": "expected current_application_address",
      "op": "assert // expected current_application_address",
      "stack_out": []
    },
    "136": {
      "block": "main_after_if_else@7",
      "stack_in": [],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    }
  }
}