#pragma version 10
#pragma typetrack false

// test_cases.application.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.application.contract.Reference.__init__() -> void:
__init__:
    // application/contract.py:15
    // self.int_1 = UInt64(0)
    pushbytes "int_1"
    intc_0 // 0
    app_global_put
    // application/contract.py:16
    // self.bytes_1 = Bytes(b"")
    pushbytes "bytes_1"
    pushbytes 0x
    app_global_put
    // application/contract.py:17
    // self.bytes_2 = Bytes(b"")
    pushbytes "bytes_2"
    pushbytes 0x
    app_global_put
    retsub


// test_cases.application.contract.Reference.approval_program() -> uint64:
approval_program:
    // application/contract.py:27
    // if op.Txn.num_app_args == 1:
    txn NumAppArgs
    intc_1 // 1
    ==
    bz approval_program_after_if_else@5

approval_program_if_body@1:
    // application/contract.py:28
    // if op.Txn.application_args(0) == b"validate":
    txna ApplicationArgs 0
    pushbytes 0x76616c6964617465
    ==
    bz approval_program_else_body@3

approval_program_if_body@2:
    // application/contract.py:29
    // self.validate_asset(op.Global.current_application_id)
    global CurrentApplicationID
    callsub validate_asset

approval_program_after_if_else@4:

approval_program_after_if_else@5:
    // application/contract.py:32
    // return True
    intc_1 // 1
    retsub

approval_program_else_body@3:
    // application/contract.py:31
    // assert False, "Expected validate"
    err // Expected validate


// test_cases.application.contract.Reference.validate_asset(app: uint64) -> void:
validate_asset:
    // application/contract.py:37-38
    // @subroutine
    // def validate_asset(self, app: Application) -> None:
    proto 1 0
    // application/contract.py:39
    // assert not Txn.sender.is_opted_in(app), "app opted in"
    txn Sender
    frame_dig -1
    app_opted_in
    !
    assert // app opted in
    // application/contract.py:40
    // assert app.creator == op.Global.creator_address, "expected creator"
    frame_dig -1
    app_params_get AppCreator
    assert // application exists
    global CreatorAddress
    ==
    assert // expected creator
    // application/contract.py:41
    // assert app.global_num_uint == 1, "expected global_num_uint"
    frame_dig -1
    app_params_get AppGlobalNumUint
    assert // application exists
    intc_1 // 1
    ==
    assert // expected global_num_uint
    // application/contract.py:42
    // assert app.global_num_bytes == 2, "expected global_num_bytes"
    frame_dig -1
    app_params_get AppGlobalNumByteSlice
    assert // application exists
    pushint 2 // 2
    ==
    assert // expected global_num_bytes
    // application/contract.py:43
    // assert app.local_num_uint == 3, "expected local_num_uint"
    frame_dig -1
    app_params_get AppLocalNumUint
    assert // application exists
    pushint 3 // 3
    ==
    assert // expected local_num_uint
    // application/contract.py:44
    // assert app.local_num_bytes == 4, "expected local_num_bytes"
    frame_dig -1
    app_params_get AppLocalNumByteSlice
    assert // application exists
    pushint 4 // 4
    ==
    assert // expected local_num_bytes
    // application/contract.py:45
    // assert app.approval_program, "expected approval_program"
    frame_dig -1
    app_params_get AppApprovalProgram
    assert // application exists
    len
    intc_0 // 0
    !=
    assert // expected approval_program
    // application/contract.py:46
    // assert app.clear_state_program, "expected clear_state_program"
    frame_dig -1
    app_params_get AppClearStateProgram
    assert // application exists
    len
    intc_0 // 0
    !=
    assert // expected clear_state_program
    // application/contract.py:47
    // assert app == op.Global.current_application_id, "expected current_application_id"
    global CurrentApplicationID
    frame_dig -1
    ==
    assert // expected current_application_id
    // application/contract.py:49
    // app.address == op.Global.current_application_address
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    global CurrentApplicationAddress
    ==
    // application/contract.py:48-50
    // assert (
    //     app.address == op.Global.current_application_address
    // ), "expected current_application_address"
    assert // expected current_application_address
    retsub
