{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAcQ;;;;;;;AAAa;AAAb;AACA;;;;;;;;;AAAe;;AAAf;AACA;;;;;;;;;AAAe;;AAAf;;AAUY;AAAwB;AAAxB;AAAZ;AACG;;AAAuB;AAAvB;AAAX;;;AACe;;;AAA8B;;;;;;;;;;AAA9B;AAAf;;;AACoC;;AAApB;;;AAGD;AAAP;AADQ;AAMhB;;;AAEmB;;AAAA;;AAAA;AAAJ;AAAP;AACO;;AAAA;;AAAA;AAAe;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAuB;AAAvB;AAAP;AACO;;AAAA;;AAAA;AAAwB;AAAxB;AAAP;AACO;;AAAA;;AAAA;AAAsB;;AAAtB;AAAP;AACO;;AAAA;;AAAA;AAAuB;;AAAvB;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAP;AACc;;AAAP;;AAAA;AAAP;AAEI;;AAAA;;AAAA;AAAe;;AAAf;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.application.contract.Reference.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2"
    },
    "6": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "8": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "11": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.application.contract.Reference.__init__",
      "op": "callsub __init__"
    },
    "14": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.application.contract.Reference.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "return",
      "stack_out": []
    },
    "18": {
      "subroutine": "test_cases.application.contract.Reference.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "pushbytes \"int_1\"",
      "defined_out": [
        "\"int_1\""
      ],
      "stack_out": [
        "\"int_1\""
      ]
    },
    "25": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"int_1\"",
        "0"
      ],
      "stack_out": [
        "\"int_1\"",
        "0"
      ]
    },
    "26": {
      "op": "app_global_put",
      "stack_out": []
    },
    "27": {
      "op": "pushbytes \"bytes_1\"",
      "defined_out": [
        "\"bytes_1\""
      ],
      "stack_out": [
        "\"bytes_1\""
      ]
    },
    "36": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"bytes_1\"",
        "0x"
      ],
      "stack_out": [
        "\"bytes_1\"",
        "0x"
      ]
    },
    "38": {
      "op": "app_global_put",
      "stack_out": []
    },
    "39": {
      "op": "pushbytes \"bytes_2\"",
      "defined_out": [
        "\"bytes_2\""
      ],
      "stack_out": [
        "\"bytes_2\""
      ]
    },
    "48": {
      "op": "pushbytes 0x",
      "stack_out": [
        "\"bytes_2\"",
        "0x"
      ]
    },
    "50": {
      "op": "app_global_put",
      "stack_out": []
    },
    "51": {
      "retsub": true,
      "op": "retsub"
    },
    "52": {
      "subroutine": "test_cases.application.contract.Reference.approval_program",
      "params": {},
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "53": {
      "op": "intc_2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "1",
        "2"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "assert",
      "stack_out": []
    },
    "56": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "58": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "59": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "bz approval_program_after_if_else@5",
      "stack_out": []
    },
    "63": {
      "block": "approval_program_if_body@1",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "66": {
      "op": "pushbytes 0x76616c6964617465",
      "defined_out": [
        "0x76616c6964617465",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x76616c6964617465"
      ]
    },
    "76": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "op": "bz approval_program_else_body@3",
      "stack_out": []
    },
    "80": {
      "block": "approval_program_if_body@2",
      "stack_in": [],
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "82": {
      "callsub": "test_cases.application.contract.Reference.validate_asset",
      "op": "callsub validate_asset",
      "stack_out": []
    },
    "85": {
      "block": "approval_program_after_if_else@5",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "86": {
      "retsub": true,
      "op": "retsub"
    },
    "87": {
      "block": "approval_program_else_body@3",
      "stack_in": [],
      "error": "Expected validate",
      "op": "err // Expected validate"
    },
    "88": {
      "subroutine": "test_cases.application.contract.Reference.validate_asset",
      "params": {
        "app#0": "uint64"
      },
      "block": "validate_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "91": {
      "block": "validate_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "frame_dig -1",
      "defined_out": [
        "app#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "app#0 (copy)"
      ]
    },
    "95": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "97": {
      "error": "app opted in",
      "op": "assert // app opted in",
      "stack_out": []
    },
    "98": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "100": {
      "op": "app_params_get AppCreator",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "102": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "103": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%3#0"
      ]
    },
    "105": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "106": {
      "error": "expected creator",
      "op": "assert // expected creator",
      "stack_out": []
    },
    "107": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "109": {
      "op": "app_params_get AppGlobalNumUint",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "111": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "112": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "1"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "114": {
      "error": "expected global_num_uint",
      "op": "assert // expected global_num_uint",
      "stack_out": []
    },
    "115": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "117": {
      "op": "app_params_get AppGlobalNumByteSlice",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "119": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "120": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "2"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "122": {
      "error": "expected global_num_bytes",
      "op": "assert // expected global_num_bytes",
      "stack_out": []
    },
    "123": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "125": {
      "op": "app_params_get AppLocalNumUint",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "127": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "128": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "3"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "131": {
      "error": "expected local_num_uint",
      "op": "assert // expected local_num_uint",
      "stack_out": []
    },
    "132": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "134": {
      "op": "app_params_get AppLocalNumByteSlice",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "136": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "137": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "4"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "140": {
      "error": "expected local_num_bytes",
      "op": "assert // expected local_num_bytes",
      "stack_out": []
    },
    "141": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "143": {
      "op": "app_params_get AppApprovalProgram",
      "defined_out": [
        "check%5#0",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "check%5#0"
      ]
    },
    "145": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%5#0"
      ]
    },
    "146": {
      "op": "len",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "147": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "148": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "149": {
      "error": "expected approval_program",
      "op": "assert // expected approval_program",
      "stack_out": []
    },
    "150": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "152": {
      "op": "app_params_get AppClearStateProgram",
      "defined_out": [
        "check%6#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "check%6#0"
      ]
    },
    "154": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%6#0"
      ]
    },
    "155": {
      "op": "len",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "156": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "157": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "158": {
      "error": "expected clear_state_program",
      "op": "assert // expected clear_state_program",
      "stack_out": []
    },
    "159": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "161": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "app#0 (copy)"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "164": {
      "error": "expected current_application_id",
      "op": "assert // expected current_application_id",
      "stack_out": []
    },
    "165": {
      "op": "frame_dig -1",
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "167": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%7#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "check%7#0"
      ]
    },
    "169": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%7#0"
      ]
    },
    "170": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%15#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "tmp%15#0"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "173": {
      "error": "expected current_application_address",
      "op": "assert // expected current_application_address",
      "stack_out": []
    },
    "174": {
      "retsub": true,
      "op": "retsub"
    }
  }
}