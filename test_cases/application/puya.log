debug: PuyaOptions(paths=['application'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L19
debug: Terminated block@0: // L19
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Sealing block@0: // L56
debug: Terminated block@0: // L56
debug: Sealing block@0: // L83
debug: Terminated block@0: // L83
debug: Sealing block@None: // if_body_L104
debug: Sealing block@None: // else_body_L104
debug: Terminated block@1: // if_body_L104
debug: Sealing block@2: // after_if_else_L104
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L104
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L83
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L104
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L83
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L104
debug: Sealing block@None: // ternary_true_L108
debug: Sealing block@None: // ternary_false_L108
debug: Terminated block@3: // ternary_true_L108
debug: Terminated block@4: // ternary_false_L108
debug: Sealing block@5: // ternary_merge_L108
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@5: // ternary_merge_L108
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3) in block@3: // ternary_true_L108
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3, ternary_result%6#1 <- block@4) in block@4: // ternary_false_L108
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L104
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L83
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L108
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L108
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@6: // for_header_L108
debug: Created Phi assignment: let range_item%7#1: uint64 = undefined while trying to resolve 'range_item%7' in block@6: // for_header_L108
debug: Terminated block@6: // for_header_L108
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@7: // for_body_L108
debug: Created Phi assignment: let range_item%7#2: uint64 = undefined while trying to resolve 'range_item%7' in block@7: // for_body_L108
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L108
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L108
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L108
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L108
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L108
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L108
debug: Terminated block@7: // for_body_L108
debug: Sealing block@8: // for_footer_L108
debug: Terminated block@8: // for_footer_L108
debug: Sealing block@9: // for_increment_L108
debug: Terminated block@9: // for_increment_L108
debug: Sealing block@6: // for_header_L108
debug: Added range_item%7#0 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5) in block@5: // ternary_merge_L108
debug: Added range_item%7#3 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5, range_item%7#3 <- block@9) in block@9: // for_increment_L108
debug: Sealing block@7: // for_body_L108
debug: Added range_item%7#1 to Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) in block@6: // for_header_L108
debug: Replacing trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1
debug: Deleting Phi assignment: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L108
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L104
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L83
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L104
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L108
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L108
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L108
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L108
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L108
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L108
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L108
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L108
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L108
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L108
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L108
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L104
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L83
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L108
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L108
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L108
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L108
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L108
debug: Terminated block@10: // after_for_L108
debug: Sealing block@0: // L116
debug: Terminated block@0: // L116
debug: Sealing block@0: // L138
debug: Terminated block@0: // L138
debug: Sealing block@0: // L165
debug: Terminated block@0: // L165
debug: Sealing block@0: // L194
debug: Terminated block@0: // L194
debug: Sealing block@None: // if_body_L208
debug: Sealing block@None: // else_body_L208
debug: Terminated block@1: // if_body_L208
debug: Terminated block@2: // else_body_L208
debug: Sealing block@3: // after_if_else_L208
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L208
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L208
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L208
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L208
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L208
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L208
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L208
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L213
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L213
debug: Terminated block@4: // for_header_L213
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_body_L213
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_body_L213
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L213
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L213
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L213
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L213
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L213
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L213
debug: Terminated block@5: // for_body_L213
debug: Sealing block@6: // for_footer_L213
debug: Terminated block@6: // for_footer_L213
debug: Sealing block@7: // for_increment_L213
debug: Terminated block@7: // for_increment_L213
debug: Sealing block@4: // for_header_L213
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L208
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#3 <- block@7) in block@7: // for_increment_L213
debug: Sealing block@5: // for_body_L213
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) in block@4: // for_header_L213
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L213
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L208
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L208
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L208
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L208
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L213
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L213
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L213
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L208
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L208
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L208
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L208
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L213
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L213
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L213
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L208
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L208
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L208
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L208
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L213
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L213
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L213
debug: Terminated block@8: // after_for_L213
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@None: // on_create_L14
debug: Terminated block@1: // on_create_L14
debug: Sealing block@2: // entrypoint_L14
debug: Terminated block@2: // entrypoint_L14
debug: Sealing block@None: // if_body_L27
debug: Sealing block@None: // else_body_L27
debug: Terminated block@3: // if_body_L27
debug: Sealing block@None: // if_body_L28
debug: Sealing block@None: // else_body_L28
debug: Terminated block@4: // if_body_L28
debug: Terminated block@5: // else_body_L28
debug: Sealing block@6: // after_if_else_L28
debug: Terminated block@6: // after_if_else_L28
debug: Sealing block@7: // after_if_else_L27
debug: Terminated block@7: // after_if_else_L27
debug: Sealing block@0: // L34
debug: Terminated block@0: // L34
debug: Output IR to application/out/contract_Reference.ssa.ir
info: Optimizing test_cases.application.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.application.contract.Reference.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@6: // after_if_else_L28 with block@4: // if_body_L28 in block@7: // after_if_else_L27
debug: Merged linear block@6: // after_if_else_L28 into block@4: // if_body_L28
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.validate_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to application/out/contract_Reference.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.application.contract.Reference.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.validate_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.application.contract.Reference.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to application/out/contract_Reference.cssa.ir
debug: Removing Phis from test_cases.application.contract.Reference.approval_program
debug: Removing Phis from test_cases.application.contract.Reference.validate_asset
debug: Removing Phis from test_cases.application.contract.Reference.__init__
debug: Removing Phis from test_cases.application.contract.Reference.clear_state_program
debug: Output IR to application/out/contract_Reference.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.approval_program
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.validate_asset
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.__init__
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.clear_state_program
debug: Output IR to application/out/contract_Reference.parallel_copies.ir
debug: Coalescing local variables in test_cases.application.contract.Reference.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.validate_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to application/out/contract_Reference.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[8]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@4.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_if_body@4.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Found 3 edge set/s for test_cases.application.contract.Reference.approval_program
debug: Inserted validate_asset_block@0.ops[11]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[13]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[24]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[26]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[37]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[39]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[50]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[52]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[63]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[65]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[75]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[77]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[87]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[89]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[96]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[98]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[111]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[113]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[2]: 'store maybe_value_did_exist%1#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[5]: 'load maybe_value_did_exist%1#0' with 'load maybe_value_did_exist%1#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[8]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[11]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[19]: 'store maybe_value_did_exist%5#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[22]: 'load maybe_value_did_exist%5#0' with 'load maybe_value_did_exist%5#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[33]: 'store maybe_value_did_exist%8#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[36]: 'load maybe_value_did_exist%8#0' with 'load maybe_value_did_exist%8#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[47]: 'store maybe_value_did_exist%11#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[50]: 'load maybe_value_did_exist%11#0' with 'load maybe_value_did_exist%11#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[61]: 'store maybe_value_did_exist%14#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[64]: 'load maybe_value_did_exist%14#0' with 'load maybe_value_did_exist%14#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[75]: 'store maybe_value_did_exist%17#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[78]: 'load maybe_value_did_exist%17#0' with 'load maybe_value_did_exist%17#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[88]: 'store maybe_value_did_exist%20#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[91]: 'load maybe_value_did_exist%20#0' with 'load maybe_value_did_exist%20#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[100]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[103]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[111]: 'store maybe_value_did_exist%25#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[114]: 'load maybe_value_did_exist%25#0' with 'load maybe_value_did_exist%25#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[117]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[120]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[21]: 'store maybe_value%4#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[25]: 'load maybe_value%4#0' with 'load maybe_value%4#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[36]: 'store maybe_value%7#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[40]: 'load maybe_value%7#0' with 'load maybe_value%7#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[51]: 'store maybe_value%10#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[55]: 'load maybe_value%10#0' with 'load maybe_value%10#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[66]: 'store maybe_value%13#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[70]: 'load maybe_value%13#0' with 'load maybe_value%13#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[81]: 'store maybe_value%16#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[85]: 'load maybe_value%16#0' with 'load maybe_value%16#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[95]: 'store maybe_value%19#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[99]: 'load maybe_value%19#0' with 'load maybe_value%19#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[4]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[11]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[120]: 'store maybe_value%24#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[127]: 'load maybe_value%24#0' with 'load maybe_value%24#0 from l-stack (no copy)'
info: Writing application/out/contract.approval.teal
info: Writing application/out/contract.approval.debug.teal
info: Writing application/out/contract.clear.teal
info: Writing application/out/contract.clear.debug.teal