debug: PuyaOptions(paths=['application'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L110
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@2: // for_body_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L110
debug: Terminated block@2: // for_body_L110
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@4: // for_increment_L110
debug: Terminated block@4: // for_increment_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L110
debug: Sealing block@2: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let head_and_tail#2: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@4) in block@4: // for_increment_L110
debug: Added head_and_tail#2 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L110
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@None: // if_body_L146
debug: Sealing block@None: // else_body_L146
debug: Terminated block@1: // if_body_L146
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@None: // ternary_true_L150
debug: Sealing block@None: // ternary_false_L150
debug: Terminated block@3: // ternary_true_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L150
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L150
debug: Terminated block@7: // for_body_L150
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@9: // for_increment_L150
debug: Terminated block@9: // for_increment_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L150
debug: Sealing block@7: // for_body_L150
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L146
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L150
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L150
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L150
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L150
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L150
debug: Terminated block@10: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L199
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@2: // for_body_L199
debug: Terminated block@2: // for_body_L199
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@4: // for_increment_L199
debug: Terminated block@4: // for_increment_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L199
debug: Sealing block@2: // for_body_L199
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@4) in block@4: // for_increment_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L199
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#2: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@4) in block@4: // for_increment_L199
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1)
debug: Replacing trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@6: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@6: // for_header_L204
debug: Terminated block@6: // for_header_L204
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@7: // for_body_L204
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@7: // for_body_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head#4: bytes = undefined while trying to resolve 'new_head' in block@7: // for_body_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let item_offset_adjustment#4: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@7: // for_body_L204
debug: Terminated block@7: // for_body_L204
debug: Sealing block@8: // for_footer_L204
debug: Terminated block@8: // for_footer_L204
debug: Sealing block@9: // for_increment_L204
debug: Terminated block@9: // for_increment_L204
debug: Sealing block@6: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5) in block@5: // after_for_L199
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5, range_item%1#3 <- block@9) in block@9: // for_increment_L204
debug: Sealing block@7: // for_body_L204
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@6: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4)
debug: Replaced trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0 in current definition for 4 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#1 <- block@9) in block@9: // for_increment_L204
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6)
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#6: bytes = undefined while trying to resolve 'new_head' in block@6: // for_header_L204
debug: Added new_head#3 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5) in block@5: // after_for_L199
debug: Added new_head#5 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5, new_head#5 <- block@9) in block@9: // for_increment_L204
debug: Added new_head#6 to Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6
debug: Deleting Phi assignment: let new_head#4: bytes = φ(new_head#6 <- block@6)
debug: Replaced trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#5: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@6: // for_header_L204
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5) in block@5: // after_for_L199
debug: Added item_offset_adjustment#4 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#4 <- block@9) in block@9: // for_increment_L204
debug: Added item_offset_adjustment#5 to Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5
debug: Deleting Phi assignment: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6)
debug: Replacing trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3
debug: Deleting Phi assignment: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9)
debug: Replaced trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@6: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0 in current definition for 4 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@6: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@6: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9)
debug: Replaced trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0 in current definition for 4 blocks
debug: Terminated block@10: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L269
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@2: // for_body_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@2: // for_body_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@2: // for_body_L269
debug: Terminated block@2: // for_body_L269
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@4: // for_increment_L269
debug: Terminated block@4: // for_increment_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L269
debug: Sealing block@2: // for_body_L269
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@4) in block@4: // for_increment_L269
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_item_length#2: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added new_item_length#2 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0 in current definition for 4 blocks
debug: Created Phi assignment: let original_item_length#2: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Added original_item_length#0 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added original_item_length#2 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L269
debug: Terminated block@5: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L327
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@2: // for_body_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L327
debug: Terminated block@2: // for_body_L327
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@4: // for_increment_L327
debug: Terminated block@4: // for_increment_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L327
debug: Sealing block@2: // for_body_L327
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_offset#3: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@4) in block@4: // for_increment_L327
debug: Added tail_offset#3 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3
debug: Deleting Phi assignment: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1)
debug: Replaced trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) in block@4: // for_increment_L327
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L327
debug: Terminated block@5: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@None: // on_create_L14
debug: Terminated block@1: // on_create_L14
debug: Sealing block@2: // entrypoint_L14
debug: Terminated block@2: // entrypoint_L14
debug: Sealing block@None: // if_body_L27
debug: Sealing block@None: // else_body_L27
debug: Terminated block@3: // if_body_L27
debug: Sealing block@None: // if_body_L28
debug: Sealing block@None: // else_body_L28
debug: Terminated block@4: // if_body_L28
debug: Terminated block@5: // else_body_L28
debug: Sealing block@6: // after_if_else_L28
debug: Terminated block@6: // after_if_else_L28
debug: Sealing block@7: // after_if_else_L27
debug: Terminated block@7: // after_if_else_L27
debug: Sealing block@0: // L34
debug: Terminated block@0: // L34
debug: Output IR to application/out/Reference.ssa.ir
info: Optimizing test_cases.application.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.application.contract.Reference.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@3: // if_body_L27 from goto tmp%3#0 ? block@4 : block@5 to goto block@4
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // if_body_L28 with block@3: // if_body_L27 in block@6: // after_if_else_L28
debug: Merged linear block@4: // if_body_L28 into block@3: // if_body_L27
debug: Replaced predecessor block@6: // after_if_else_L28 with block@3: // if_body_L27 in block@7: // after_if_else_L27
debug: Merged linear block@6: // after_if_else_L28 into block@3: // if_body_L27
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // else_body_L28
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.validate_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to application/out/Reference.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.application.contract.Reference.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.validate_asset
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.__init__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.application.contract.Reference.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 2, ending loop
debug: Removing Phis from test_cases.application.contract.Reference.approval_program
debug: Removing Phis from test_cases.application.contract.Reference.validate_asset
debug: Removing Phis from test_cases.application.contract.Reference.__init__
debug: Removing Phis from test_cases.application.contract.Reference.clear_state_program
debug: Coalescing local variables in test_cases.application.contract.Reference.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.validate_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.application.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.approval_program
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.validate_asset
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.__init__
debug: Sequentializing parallel copies in test_cases.application.contract.Reference.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to application/out/Reference.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[6]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[8]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[11]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[13]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.application.contract.Reference.approval_program
debug: Inserted validate_asset_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[25]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[27]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[38]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[40]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[51]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[53]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[64]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[66]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[77]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[79]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[89]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[91]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[101]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[103]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[110]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[112]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[125]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[127]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[16]: 'store check%0#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[19]: 'load check%0#0' with 'load check%0#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[25]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[33]: 'store check%1#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[36]: 'load check%1#0' with 'load check%1#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[47]: 'store check%2#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[50]: 'load check%2#0' with 'load check%2#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[61]: 'store check%3#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[64]: 'load check%3#0' with 'load check%3#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[75]: 'store check%4#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[78]: 'load check%4#0' with 'load check%4#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[89]: 'store check%5#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[92]: 'load check%5#0' with 'load check%5#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[102]: 'store check%6#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[105]: 'load check%6#0' with 'load check%6#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[114]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[117]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[125]: 'store check%7#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[128]: 'load check%7#0' with 'load check%7#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[131]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[134]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[35]: 'store value%1#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[39]: 'load value%1#0' with 'load value%1#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[50]: 'store value%2#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[54]: 'load value%2#0' with 'load value%2#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[65]: 'store value%3#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[69]: 'load value%3#0' with 'load value%3#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[80]: 'store value%4#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[84]: 'load value%4#0' with 'load value%4#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[95]: 'store value%5#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[99]: 'load value%5#0' with 'load value%5#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[109]: 'store value%6#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[113]: 'load value%6#0' with 'load value%6#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[18]: 'store value%0#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[25]: 'load value%0#0' with 'load value%0#0 from l-stack (no copy)'
debug: Inserted validate_asset_block@0.ops[134]: 'store value%7#0 to l-stack (copy)'
debug: Replaced validate_asset_block@0.ops[141]: 'load value%7#0' with 'load value%7#0 from l-stack (no copy)'
info: Writing application/out/Reference.approval.teal
info: Writing application/out/Reference.clear.teal
info: Writing application/out/Reference.approval.bin
info: Writing application/out/Reference.clear.bin