main test_cases.application.contract.Reference.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "int_1" 0u)
        (app_global_put "bytes_1" 0x)
        (app_global_put "bytes_2" 0x)
        goto block@2
    block@2: // after_if_else_L1
        (assert 0u)
        let tmp%1#1: uint64 = (txn NumAppArgs)
        let tmp%2#0: bool = (== tmp%1#1 1u)
        goto tmp%2#0 ? block@4 : block@8
    block@4: // if_body_L29
        let tmp%3#0: bytes = (txna ApplicationArgs 0)
        let tmp%4#0: bool = (== tmp%3#0 0x76616c6964617465)
        (assert tmp%4#0) // Expected validate
        let app#0: uint64 = (global CurrentApplicationID)
        let tmp%0#2: account = (txn Sender)
        let tmp%1#2: bool = (app_opted_in tmp%0#2 app#0)
        let tmp%2#0: bool = (! tmp%1#2)
        (assert tmp%2#0) // app opted in
        let (value%0#0: account, check%0#0: bool) = ((app_params_get AppCreator) app#0)
        (assert check%0#0) // application exists
        let tmp%3#1: account = (global CreatorAddress)
        let tmp%4#0: bool = (== value%0#0 tmp%3#1)
        (assert tmp%4#0) // expected creator
        let (value%1#0: uint64, check%1#0: bool) = ((app_params_get AppGlobalNumUint) app#0)
        (assert check%1#0) // application exists
        let tmp%5#1: bool = (== value%1#0 1u)
        (assert tmp%5#1) // expected global_num_uint
        let (value%2#0: uint64, check%2#0: bool) = ((app_params_get AppGlobalNumByteSlice) app#0)
        (assert check%2#0) // application exists
        let tmp%6#0: bool = (== value%2#0 2u)
        (assert tmp%6#0) // expected global_num_bytes
        let (value%3#0: uint64, check%3#0: bool) = ((app_params_get AppLocalNumUint) app#0)
        (assert check%3#0) // application exists
        let tmp%7#0: bool = (== value%3#0 3u)
        (assert tmp%7#0) // expected local_num_uint
        let (value%4#0: uint64, check%4#0: bool) = ((app_params_get AppLocalNumByteSlice) app#0)
        (assert check%4#0) // application exists
        let tmp%8#0: bool = (== value%4#0 4u)
        (assert tmp%8#0) // expected local_num_bytes
        let (value%5#0: bytes, check%5#0: bool) = ((app_params_get AppApprovalProgram) app#0)
        (assert check%5#0) // application exists
        let tmp%9#0: uint64 = (len value%5#0)
        (assert tmp%9#0) // expected approval_program
        let (value%6#0: bytes, check%6#0: bool) = ((app_params_get AppClearStateProgram) app#0)
        (assert check%6#0) // application exists
        let tmp%11#0: uint64 = (len value%6#0)
        (assert tmp%11#0) // expected clear_state_program
        let tmp%13#0: uint64 = (global CurrentApplicationID)
        let tmp%14#0: bool = (== app#0 tmp%13#0)
        (assert tmp%14#0) // expected current_application_id
        let (value%7#0: account, check%7#0: bool) = ((app_params_get AppAddress) app#0)
        (assert check%7#0) // application exists
        let tmp%15#0: account = (global CurrentApplicationAddress)
        let tmp%16#0: bool = (== value%7#0 tmp%15#0)
        (assert tmp%16#0) // expected current_application_address
        goto block@8
    block@8: // after_if_else_L28
        return 1u