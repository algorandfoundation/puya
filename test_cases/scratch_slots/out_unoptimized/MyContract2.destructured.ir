contract test_cases.scratch_slots.contract2.MyContract2:
    program approval:
        subroutine test_cases.scratch_slots.contract.MyContract.approval_program() -> bool:
            block@0: // L8
                (stores 1u 5u)
                (stores 2u 0x48656c6c6f20576f726c64)
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 3u
                goto block@1
            block@1: // for_header_L13
                let continue_looping%0#0: bool = (< range_item%0#0 20u)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L13
                let i#0: uint64 = range_item%0#0
                (stores i#0 i#0)
                goto block@3
            block@3: // for_footer_L13
                goto block@4
            block@4: // for_increment_L13
                let range_item%0#0: uint64 = (+ range_item%0#0 1u)
                goto block@1
            block@5: // after_for_L13
                let tmp%0#0: uint64 = (loads 1u)
                let tmp%1#0: bool = (== tmp%0#0 5u)
                (assert tmp%1#0)
                let tmp%2#0: bytes = (loads 2u)
                let tmp%3#0: bool = (== tmp%2#0 "Hello World")
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (loads 5u)
                let tmp%5#0: bool = (== tmp%4#0 5u)
                (assert tmp%5#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.scratch_slots.contract.MyContract.clear_state_program() -> bool:
            block@0: // L23
                return 1u