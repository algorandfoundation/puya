contract test_cases.scratch_slots.contract2.MyContract2:
    program approval:
        subroutine test_cases.scratch_slots.contract.MyContract.approval_program() -> uint64:
            block@0: // L8
                ((store 1) 5u)
                ((store 2) "Hello World")
                let range_item%0#0: uint64 = 3u
                goto block@1
            block@1: // for_header_L13
                let i#0: uint64 = Ï†(range_item%0#0 <- block@0, range_item%0#3 <- block@2)
                let continue_looping%1#0: uint64 = (< i#0 20u)
                goto continue_looping%1#0 ? block@2 : block@5
            block@2: // for_body_L13
                (stores i#0 i#0)
                let range_item%0#3: uint64 = (+ i#0 1u)
                goto block@1
            block@5: // after_for_L13
                let tmp%2#0: any = (load 1)
                let tmp%3#0: uint64 = (== tmp%2#0 5u)
                (assert tmp%3#0)
                let tmp%4#0: any = (load 2)
                let tmp%5#0: uint64 = (== tmp%4#0 "Hello World")
                (assert tmp%5#0)
                let tmp%6#0: any = (load 5)
                let tmp%7#0: uint64 = (== tmp%6#0 5u)
                (assert tmp%7#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.scratch_slots.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L23
                return 1u