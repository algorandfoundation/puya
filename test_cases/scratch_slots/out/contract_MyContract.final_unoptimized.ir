contract test_cases.scratch_slots.contract.MyContract:
    program approval:
        subroutine test_cases.scratch_slots.contract.MyContract.approval_program() -> uint64:
            block@0: // L5
                (stores 1u 5u)
                (stores 2u "Hello World")
                (assert 1u) // Step cannot be zero
                let should_loop%0#0: uint64 = (< 3u 20u)
                goto should_loop%0#0 ? block@1 : block@6
            block@1: // for_preamble_L10
                let range_item%1#0: uint64 = 3u
                goto block@2
            block@2: // for_header_L10
                let continue_looping%2#0: uint64 = (< range_item%1#0 20u)
                goto continue_looping%2#0 ? block@3 : block@6
            block@3: // for_body_L10
                let i#0: uint64 = range_item%1#0
                (stores i#0 i#0)
                goto block@4
            block@4: // for_footer_L10
                goto block@5
            block@5: // for_increment_L10
                let range_item%1#0: uint64 = (+ range_item%1#0 1u)
                goto block@2
            block@6: // after_for_L10
                let tmp%3#0: any = (loads 1u)
                let tmp%4#0: uint64 = (== tmp%3#0 5u)
                (assert tmp%4#0)
                let tmp%5#0: any = (loads 2u)
                let tmp%6#0: uint64 = (== tmp%5#0 "Hello World")
                (assert tmp%6#0)
                let tmp%7#0: any = (loads 5u)
                let tmp%8#0: uint64 = (== tmp%7#0 5u)
                (assert tmp%8#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.scratch_slots.contract.MyContract.clear_state_program() -> uint64:
            block@0: // L20
                return 1u