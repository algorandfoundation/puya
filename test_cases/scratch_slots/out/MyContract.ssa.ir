contract test_cases.scratch_slots.contract.MyContract:
    program approval:
        subroutine test_cases.scratch_slots.contract.MyContract.approval_program() -> bool:
            block@0: // L8
                let tmp%0#0: uint64 = (txn ApplicationID)
                let tmp%1#0: bool = (== tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@2
            block@1: // ternary_true_L9
                let ternary_result%0#0: uint64 = 5u
                goto block@3
            block@2: // ternary_false_L9
                let ternary_result%0#1: uint64 = 0u
                goto block@3
            block@3: // ternary_merge_L9
                let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
                (stores 1u ternary_result%0#2)
                let hello_world#0: bytes = 0x48656c6c6f20576f726c64
                (stores 2u hello_world#0)
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 3u
                goto block@4
            block@4: // for_header_L14
                let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7)
                let continue_looping%0#0: bool = (< range_item%0#1 20u)
                goto continue_looping%0#0 ? block@5 : block@8
            block@5: // for_body_L14
                let i#0: uint64 = range_item%0#1
                (stores i#0 i#0)
                goto block@6
            block@6: // for_footer_L14
                goto block@7
            block@7: // for_increment_L14
                let range_item%0#3: uint64 = (+ range_item%0#1 1u)
                goto block@4
            block@8: // after_for_L14
                let tmp%2#0: uint64 = (loads 1u)
                let tmp%3#0: bool = (== tmp%2#0 5u)
                (assert tmp%3#0)
                let tmp%4#0: bytes = (loads 2u)
                let tmp%5#0: bool = (== tmp%4#0 0x48656c6c6f20576f726c64)
                (assert tmp%5#0)
                let tmp%6#0: uint64 = (loads 5u)
                let tmp%7#0: bool = (== tmp%6#0 5u)
                (assert tmp%7#0)
                (stores 19u 0x6c617374)
                let tmp%8#0: bytes = (loads 19u)
                let tmp%9#0: bool = (== tmp%8#0 0x6c617374)
                (assert tmp%9#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.scratch_slots.contract.MyContract.clear_state_program() -> bool:
            block@0: // L27
                return 1u