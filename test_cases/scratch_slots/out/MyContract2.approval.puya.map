{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAQyC;;AAAA;AAAL;AAAA;AAA5B;;AAEc;AACd;;AAEgB;;AAAP;AAAU;;AAAV;AAAjB;;;AACY;;AAAA;;AAAA;AADK;AAAA;AAAA;;;;;AAGF;;AAA6B;AAA7B;AAAP;AAEO;;AAA4B;AAA5B;AAAP;AAEO;;AAA6B;AAA7B;AAAP;AAE6B;AAA7B;;AACO;;AAAqC;AAArC;AAAP;AACO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.scratch_slots.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 5 1"
    },
    "5": {
      "op": "bytecblock 0x48656c6c6f20576f726c64 0x6c617374"
    },
    "24": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "26": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "intc_0 // 5",
      "defined_out": [
        "5",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "5"
      ]
    },
    "28": {
      "op": "*",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "29": {
      "op": "store 1",
      "stack_out": []
    },
    "31": {
      "op": "bytec_0 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64"
      ],
      "stack_out": [
        "0x48656c6c6f20576f726c64"
      ]
    },
    "32": {
      "op": "store 2",
      "stack_out": []
    },
    "34": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "36": {
      "block": "main_for_header@1",
      "stack_in": [
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "37": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "20"
      ]
    },
    "39": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "40": {
      "op": "bz main_after_for@4",
      "stack_out": [
        "i#0"
      ]
    },
    "43": {
      "op": "dupn 2"
    },
    "45": {
      "op": "dig 1"
    },
    "47": {
      "op": "stores"
    },
    "48": {
      "op": "intc_1 // 1"
    },
    "49": {
      "op": "+"
    },
    "50": {
      "op": "bury 1"
    },
    "52": {
      "op": "b main_for_header@1"
    },
    "55": {
      "block": "main_after_for@4",
      "stack_in": [
        "i#0"
      ],
      "op": "load 1",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%2#0"
      ]
    },
    "57": {
      "op": "intc_0 // 5",
      "defined_out": [
        "5",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%2#0",
        "5"
      ]
    },
    "58": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "assert",
      "stack_out": [
        "i#0"
      ]
    },
    "60": {
      "op": "load 2",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%4#0"
      ]
    },
    "62": {
      "op": "bytec_0 // 0x48656c6c6f20576f726c64",
      "defined_out": [
        "0x48656c6c6f20576f726c64",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%4#0",
        "0x48656c6c6f20576f726c64"
      ]
    },
    "63": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%5#0"
      ]
    },
    "64": {
      "op": "assert",
      "stack_out": [
        "i#0"
      ]
    },
    "65": {
      "op": "load 5",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%6#0"
      ]
    },
    "67": {
      "op": "intc_0 // 5",
      "stack_out": [
        "i#0",
        "tmp%6#0",
        "5"
      ]
    },
    "68": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%7#0"
      ]
    },
    "69": {
      "op": "assert",
      "stack_out": [
        "i#0"
      ]
    },
    "70": {
      "op": "bytec_1 // 0x6c617374",
      "defined_out": [
        "0x6c617374"
      ],
      "stack_out": [
        "i#0",
        "0x6c617374"
      ]
    },
    "71": {
      "op": "store 19",
      "stack_out": [
        "i#0"
      ]
    },
    "73": {
      "op": "load 19",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%8#0"
      ]
    },
    "75": {
      "op": "bytec_1 // 0x6c617374",
      "stack_out": [
        "i#0",
        "tmp%8#0",
        "0x6c617374"
      ]
    },
    "76": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%9#0"
      ]
    },
    "77": {
      "op": "assert",
      "stack_out": [
        "i#0"
      ]
    },
    "78": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": [
        "i#0"
      ]
    }
  }
}