{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "pay(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "key(keyreg)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_config(acfg)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_transfer(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_freeze(afrz)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "application_call(appl)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "multiple_txns(appl,appl,appl)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "any_txn(txn,txn,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "group_init(txn,txn,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIG1ldGhvZCAiY3JlYXRlKCl2b2lkIgogICAgbWV0aG9kICJwYXkocGF5KXZvaWQiCiAgICBtZXRob2QgImtleShrZXlyZWcpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfY29uZmlnKGFjZmcpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfdHJhbnNmZXIoYXhmZXIpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfZnJlZXplKGFmcnopdm9pZCIKICAgIG1ldGhvZCAiYXBwbGljYXRpb25fY2FsbChhcHBsKXZvaWQiCiAgICBtZXRob2QgIm11bHRpcGxlX3R4bnMoYXBwbCxhcHBsLGFwcGwpdm9pZCIKICAgIG1ldGhvZCAiYW55X3R4bih0eG4sdHhuLHR4bil2b2lkIgogICAgbWV0aG9kICJncm91cF9pbml0KHR4bix0eG4sdHhuKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9yb3V0ZUAxIG1haW5fcGF5X3JvdXRlQDIgbWFpbl9rZXlfcm91dGVAMyBtYWluX2Fzc2V0X2NvbmZpZ19yb3V0ZUA0IG1haW5fYXNzZXRfdHJhbnNmZXJfcm91dGVANSBtYWluX2Fzc2V0X2ZyZWV6ZV9yb3V0ZUA2IG1haW5fYXBwbGljYXRpb25fY2FsbF9yb3V0ZUA3IG1haW5fbXVsdGlwbGVfdHhuc19yb3V0ZUA4IG1haW5fYW55X3R4bl9yb3V0ZUA5IG1haW5fZ3JvdXBfaW5pdF9yb3V0ZUAxMAogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVfcm91dGVAMToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcGF5X3JvdXRlQDI6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGF5CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2tleV9yb3V0ZUAzOgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQga2V5cmVnCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMga2V5cmVnCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo0MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGtleQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9jb25maWdfcm91dGVANDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFjZmcKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhY2ZnCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2V0X2NvbmZpZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF90cmFuc2Zlcl9yb3V0ZUA1OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhc3NldF90cmFuc2ZlcgogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9mcmVlemVfcm91dGVANjoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFmcnoKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhZnJ6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2V0X2ZyZWV6ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hcHBsaWNhdGlvbl9jYWxsX3JvdXRlQDc6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBhcHBsCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXBwbAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6ODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhcHBsaWNhdGlvbl9jYWxsCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX211bHRpcGxlX3R4bnNfcm91dGVAODoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDMKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBhcHBsCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXBwbAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXBwbAogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGFwcGwKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFwcGwKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhcHBsCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBtdWx0aXBsZV90eG5zCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2FueV90eG5fcm91dGVAOToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDMKICAgIC0KICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMgogICAgLQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhbnlfdHhuCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2dyb3VwX2luaXRfcm91dGVAMTA6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAzCiAgICAtCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDIKICAgIC0KICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgZ3JvdXBfaW5pdAogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5jcmVhdGUoKSAtPiB2b2lkOgpjcmVhdGU6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMi0xMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgY3JlYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5wYXkodHhuOiB1aW50NjQpIC0+IHZvaWQ6CnBheToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwYXkoc2VsZiwgdHhuOiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozNQogICAgLy8gdHhuLnJlY2VpdmVyID09IG9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MzQtMzYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgdHhuLnJlY2VpdmVyID09IG9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJQYXltZW50IHNob3VsZCBiZSBmb3IgdGhpcyBhcHAiCiAgICBhc3NlcnQgLy8gUGF5bWVudCBzaG91bGQgYmUgZm9yIHRoaXMgYXBwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozNwogICAgLy8gYXNzZXJ0IHR4bi5hbW91bnQgPiAxMDAwLCAiUGF5bWVudCBzaG91bGQgYmUgZm9yID4xMDAwIG1pY3JvIGFsZ29zIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIGludCAxMDAwCiAgICA+CiAgICBhc3NlcnQgLy8gUGF5bWVudCBzaG91bGQgYmUgZm9yID4xMDAwIG1pY3JvIGFsZ29zCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozOAogICAgLy8gYXNzZXJ0IHR4bi5jbG9zZV9yZW1haW5kZXJfdG8gPT0gb3AuR2xvYmFsLnplcm9fYWRkcmVzcywgImNsb3NlX3JlbWFpbmRlcl90byIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ2xvc2VSZW1haW5kZXJUbwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGNsb3NlX3JlbWFpbmRlcl90bwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0Ll9jb21tb25fY2hlY2tzKHR4bjogdWludDY0KSAtPiB2b2lkOgpfY29tbW9uX2NoZWNrczoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE2LTE3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9jb21tb25fY2hlY2tzKHNlbGYsIHR4bjogZ3R4bi5UcmFuc2FjdGlvbkJhc2UpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBhc3NlcnQgdHhuLnR4bl9pZCwgInR4bl9pZCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVHhJRAogICAgbGVuCiAgICBhc3NlcnQgLy8gdHhuX2lkCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxOQogICAgLy8gYXNzZXJ0IHR4bi5zZW5kZXIgPT0gb3AuR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgInNlbmRlciIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gc2VuZGVyCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToyMAogICAgLy8gYXNzZXJ0IHR4bi5mZWUsICJmZWUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZlZQogICAgYXNzZXJ0IC8vIGZlZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjEKICAgIC8vIGFzc2VydCB0eG4udHlwZSwgInR5cGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBhc3NlcnQgLy8gdHlwZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjIKICAgIC8vIGFzc2VydCB0eG4udHlwZV9ieXRlcywgInR5cGVfYnl0ZXMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFR5cGUKICAgIGxlbgogICAgYXNzZXJ0IC8vIHR5cGVfYnl0ZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBhc3NlcnQgdHhuLm5vdGUgPT0gQnl0ZXMoYiIiKSwgIm5vdGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE5vdGUKICAgIGJ5dGUgIiIKICAgID09CiAgICBhc3NlcnQgLy8gbm90ZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjQKICAgIC8vIGFzc2VydCB0eG4uZ3JvdXBfaW5kZXggPT0gMCwgImdyb3VwX2luZGV4IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBHcm91cEluZGV4CiAgICAhCiAgICBhc3NlcnQgLy8gZ3JvdXBfaW5kZXgKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBhc3NlcnQgdHhuLmZpcnN0X3ZhbGlkLCAiZmlyc3RfdmFsaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZpcnN0VmFsaWQKICAgIGFzc2VydCAvLyBmaXJzdF92YWxpZAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjYtMjcKICAgIC8vICMgYXNzZXJ0IHR4bi5maXJzdF92YWxpZF90aW1lLCAiZmlyc3RfdmFsaWRfdGltZSIgIyB0aGlzIHZhbHVlIGNhbiBiZSBmbGFreSBpbiB0ZXN0cwogICAgLy8gYXNzZXJ0IHR4bi5sYXN0X3ZhbGlkLCAibGFzdF92YWxpZCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTGFzdFZhbGlkCiAgICBhc3NlcnQgLy8gbGFzdF92YWxpZAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjgKICAgIC8vIGFzc2VydCB0eG4ubGVhc2UsICJsZWFzZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTGVhc2UKICAgIGxlbgogICAgYXNzZXJ0IC8vIGxlYXNlCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToyOQogICAgLy8gYXNzZXJ0IHR4bi5yZWtleV90byA9PSBvcC5HbG9iYWwuemVyb19hZGRyZXNzLCAicmVrZXlfdG8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJla2V5VG8KICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyByZWtleV90bwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmtleSh0eG46IHVpbnQ2NCkgLT4gdm9pZDoKa2V5OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDAtNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGtleShzZWxmLCB0eG46IGd0eG4uS2V5UmVnaXN0cmF0aW9uVHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQyCiAgICAvLyBzZWxmLl9jb21tb25fY2hlY2tzKHR4bikKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfY29tbW9uX2NoZWNrcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDMKICAgIC8vIGFzc2VydCB0eG4udm90ZV9rZXksICJ2b3RlX2tleSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVm90ZVBLCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gdm90ZV9rZXkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBhc3NlcnQgdHhuLnNlbGVjdGlvbl9rZXksICJzZWxlY3Rpb25fa2V5IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZWxlY3Rpb25QSwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIHNlbGVjdGlvbl9rZXkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBhc3NlcnQgdHhuLnZvdGVfa2V5X2RpbHV0aW9uLCAidm90ZV9rZXlfZGlsdXRpb24iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFZvdGVLZXlEaWx1dGlvbgogICAgYXNzZXJ0IC8vIHZvdGVfa2V5X2RpbHV0aW9uCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo0NgogICAgLy8gYXNzZXJ0IHR4bi52b3RlX2ZpcnN0LCAidm90ZV9maXJzdCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVm90ZUZpcnN0CiAgICBhc3NlcnQgLy8gdm90ZV9maXJzdAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDcKICAgIC8vIGFzc2VydCB0eG4udm90ZV9sYXN0LCAidm90ZV9sYXN0IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBWb3RlTGFzdAogICAgYXNzZXJ0IC8vIHZvdGVfbGFzdAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDgKICAgIC8vIGFzc2VydCB0eG4ubm9uX3BhcnRpY2lwYXRpb24sICJub25fcGFydGljaXBhdGlvbiIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTm9ucGFydGljaXBhdGlvbgogICAgYXNzZXJ0IC8vIG5vbl9wYXJ0aWNpcGF0aW9uCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo0OQogICAgLy8gYXNzZXJ0IHR4bi5zdGF0ZV9wcm9vZl9rZXksICJzdGF0ZV9wcm9vZl9rZXkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFN0YXRlUHJvb2ZQSwogICAgbGVuCiAgICBhc3NlcnQgLy8gc3RhdGVfcHJvb2Zfa2V5CiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYXNzZXRfY29uZmlnKHR4bjogdWludDY0KSAtPiB2b2lkOgphc3NldF9jb25maWc6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1MS01MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXNzZXRfY29uZmlnKHNlbGYsIHR4bjogZ3R4bi5Bc3NldENvbmZpZ1RyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1MwogICAgLy8gc2VsZi5fY29tbW9uX2NoZWNrcyh0eG4pCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2NvbW1vbl9jaGVja3MKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjU1CiAgICAvLyBhc3NlcnQgdHhuLmNvbmZpZ19hc3NldCwgImNvbmZpZ19hc3NldCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXQKICAgIGFzc2VydCAvLyBjb25maWdfYXNzZXQKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjU2CiAgICAvLyBhc3NlcnQgdHhuLnRvdGFsLCAidG90YWwiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0VG90YWwKICAgIGFzc2VydCAvLyB0b3RhbAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NTcKICAgIC8vIGFzc2VydCB0eG4uZGVjaW1hbHMsICJkZWNpbWFscyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXREZWNpbWFscwogICAgYXNzZXJ0IC8vIGRlY2ltYWxzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1OAogICAgLy8gYXNzZXJ0IHR4bi5kZWZhdWx0X2Zyb3plbiwgImRlZmF1bHRfZnJvemVuIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIGFzc2VydCAvLyBkZWZhdWx0X2Zyb3plbgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NTkKICAgIC8vIGFzc2VydCB0eG4udW5pdF9uYW1lLCAidW5pdF9uYW1lIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldFVuaXROYW1lCiAgICBsZW4KICAgIGFzc2VydCAvLyB1bml0X25hbWUKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjYwCiAgICAvLyBhc3NlcnQgdHhuLmFzc2V0X25hbWUsICJhc3NldF9uYW1lIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldE5hbWUKICAgIGxlbgogICAgYXNzZXJ0IC8vIGFzc2V0X25hbWUKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhc3NlcnQgdHhuLnVybCwgInVybCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXRVUkwKICAgIGxlbgogICAgYXNzZXJ0IC8vIHVybAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjIKICAgIC8vIGFzc2VydCB0eG4ubWV0YWRhdGFfaGFzaCwgIm1ldGFkYXRhX2hhc2giCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0TWV0YWRhdGFIYXNoCiAgICBsZW4KICAgIGFzc2VydCAvLyBtZXRhZGF0YV9oYXNoCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2MwogICAgLy8gYXNzZXJ0IHR4bi5tYW5hZ2VyLCAibWFuYWdlciIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXRNYW5hZ2VyCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gbWFuYWdlcgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjQKICAgIC8vIGFzc2VydCB0eG4ucmVzZXJ2ZSwgInJlc2VydmUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0UmVzZXJ2ZQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIHJlc2VydmUKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBhc3NlcnQgdHhuLmZyZWV6ZSwgImZyZWV6ZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXRGcmVlemUKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBmcmVlemUKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBhc3NlcnQgdHhuLmNsYXdiYWNrLCAiY2xhd2JhY2siCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBjbGF3YmFjawogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmFzc2V0X3RyYW5zZmVyKHR4bjogdWludDY0KSAtPiB2b2lkOgphc3NldF90cmFuc2ZlcjoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjY4LTY5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhc3NldF90cmFuc2ZlcihzZWxmLCB0eG46IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3MAogICAgLy8gc2VsZi5fY29tbW9uX2NoZWNrcyh0eG4pCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2NvbW1vbl9jaGVja3MKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjcxCiAgICAvLyBhc3NlcnQgdHhuLnhmZXJfYXNzZXQsICJ4ZmVyX2Fzc2V0IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGFzc2VydCAvLyB4ZmVyX2Fzc2V0CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3MgogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9hbW91bnQsICJhc3NldF9hbW91bnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0QW1vdW50CiAgICBhc3NlcnQgLy8gYXNzZXRfYW1vdW50CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3MwogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9zZW5kZXIsICJhc3NldF9zZW5kZXIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0U2VuZGVyCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gYXNzZXRfc2VuZGVyCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3NAogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9yZWNlaXZlciwgImFzc2V0X3JlY2VpdmVyIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gYXNzZXRfcmVjZWl2ZXIKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojc1CiAgICAvLyBhc3NlcnQgdHhuLmFzc2V0X2Nsb3NlX3RvLCAiYXNzZXRfY2xvc2VfdG8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0Q2xvc2VUbwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGFzc2V0X2Nsb3NlX3RvCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYXNzZXRfZnJlZXplKHR4bjogdWludDY0KSAtPiB2b2lkOgphc3NldF9mcmVlemU6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3Ny03OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXNzZXRfZnJlZXplKHNlbGYsIHR4bjogZ3R4bi5Bc3NldEZyZWV6ZVRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3OQogICAgLy8gc2VsZi5fY29tbW9uX2NoZWNrcyh0eG4pCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX2NvbW1vbl9jaGVja3MKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjgxCiAgICAvLyBhc3NlcnQgdHhuLmZyZWV6ZV9hc3NldCwgImZyZWV6ZV9hc3NldCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgRnJlZXplQXNzZXQKICAgIGFzc2VydCAvLyBmcmVlemVfYXNzZXQKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBhc3NlcnQgdHhuLmZyZWV6ZV9hY2NvdW50LCAiZnJlZXplX2FjY291bnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZyZWV6ZUFzc2V0QWNjb3VudAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGZyZWV6ZV9hY2NvdW50CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4MwogICAgLy8gYXNzZXJ0IHR4bi5mcm96ZW4sICJmcm96ZW4iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZyZWV6ZUFzc2V0RnJvemVuCiAgICBhc3NlcnQgLy8gZnJvemVuCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYXBwbGljYXRpb25fY2FsbCh0eG46IHVpbnQ2NCkgLT4gdm9pZDoKYXBwbGljYXRpb25fY2FsbDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojg1LTg2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhcHBsaWNhdGlvbl9jYWxsKHNlbGYsIHR4bjogZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6ODcKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4OAogICAgLy8gYXNzZXJ0IHR4bi5hcHBfaWQsICJhcHBfaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBhcHBfaWQKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBhc3NlcnQgdHhuLm9uX2NvbXBsZXRpb24sICJvbl9jb21wbGV0aW9uIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBPbkNvbXBsZXRpb24KICAgIGFzc2VydCAvLyBvbl9jb21wbGV0aW9uCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5MAogICAgLy8gYXNzZXJ0IHR4bi5udW1fYXBwX2FyZ3MsICJudW1fYXBwX2FyZ3MiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE51bUFwcEFyZ3MKICAgIGFzc2VydCAvLyBudW1fYXBwX2FyZ3MKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBhc3NlcnQgdHhuLm51bV9hY2NvdW50cywgIm51bV9hY2NvdW50cyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTnVtQWNjb3VudHMKICAgIGFzc2VydCAvLyBudW1fYWNjb3VudHMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjkyCiAgICAvLyBhc3NlcnQgdHhuLmFwcHJvdmFsX3Byb2dyYW0sICJhcHByb3ZhbF9wcm9ncmFtIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBcHByb3ZhbFByb2dyYW0KICAgIGxlbgogICAgYXNzZXJ0IC8vIGFwcHJvdmFsX3Byb2dyYW0KICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjkzCiAgICAvLyBhc3NlcnQgdHhuLmNsZWFyX3N0YXRlX3Byb2dyYW0sICJjbGVhcl9zdGF0ZV9wcm9ncmFtIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDbGVhclN0YXRlUHJvZ3JhbQogICAgbGVuCiAgICBhc3NlcnQgLy8gY2xlYXJfc3RhdGVfcHJvZ3JhbQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6OTQKICAgIC8vIGFzc2VydCB0eG4ubnVtX2Fzc2V0cywgIm51bV9hc3NldHMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE51bUFzc2V0cwogICAgYXNzZXJ0IC8vIG51bV9hc3NldHMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBhc3NlcnQgdHhuLm51bV9hcHBzLCAibnVtX2FwcHMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE51bUFwcGxpY2F0aW9ucwogICAgYXNzZXJ0IC8vIG51bV9hcHBzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5NgogICAgLy8gYXNzZXJ0IHR4bi5nbG9iYWxfbnVtX3VpbnQsICJnbG9iYWxfbnVtX3VpbnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEdsb2JhbE51bVVpbnQKICAgIGFzc2VydCAvLyBnbG9iYWxfbnVtX3VpbnQKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojk3CiAgICAvLyBhc3NlcnQgdHhuLmdsb2JhbF9udW1fYnl0ZXMsICJnbG9iYWxfbnVtX2J5dGVzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIGFzc2VydCAvLyBnbG9iYWxfbnVtX2J5dGVzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5OAogICAgLy8gYXNzZXJ0IHR4bi5sb2NhbF9udW1fdWludCwgImxvY2FsX251bV91aW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBMb2NhbE51bVVpbnQKICAgIGFzc2VydCAvLyBsb2NhbF9udW1fdWludAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6OTkKICAgIC8vIGFzc2VydCB0eG4ubG9jYWxfbnVtX2J5dGVzLCAibG9jYWxfbnVtX2J5dGVzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBMb2NhbE51bUJ5dGVTbGljZQogICAgYXNzZXJ0IC8vIGxvY2FsX251bV9ieXRlcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTAwCiAgICAvLyBhc3NlcnQgdHhuLmV4dHJhX3Byb2dyYW1fcGFnZXMsICJleHRyYV9wcm9ncmFtX3BhZ2VzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBFeHRyYVByb2dyYW1QYWdlcwogICAgYXNzZXJ0IC8vIGV4dHJhX3Byb2dyYW1fcGFnZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwMQogICAgLy8gYXNzZXJ0IHR4bi5sYXN0X2xvZywgImxhc3RfbG9nIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBMYXN0TG9nCiAgICBsZW4KICAgIGFzc2VydCAvLyBsYXN0X2xvZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTAyCiAgICAvLyBhc3NlcnQgdHhuLm51bV9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VzLCAibnVtX2FwcHJvdmFsX3Byb2dyYW1fcGFnZXMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE51bUFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICBhc3NlcnQgLy8gbnVtX2FwcHJvdmFsX3Byb2dyYW1fcGFnZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwMwogICAgLy8gYXNzZXJ0IHR4bi5udW1fY2xlYXJfc3RhdGVfcHJvZ3JhbV9wYWdlcywgIm51bV9jbGVhcl9zdGF0ZV9wcm9ncmFtX3BhZ2VzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBOdW1DbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBhc3NlcnQgLy8gbnVtX2NsZWFyX3N0YXRlX3Byb2dyYW1fcGFnZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwNAogICAgLy8gYXNzZXJ0IHR4bi5hcHBfYXJncygwKSwgImFwcF9hcmdzKDApIgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMAogICAgZ3R4bnNhcyBBcHBsaWNhdGlvbkFyZ3MKICAgIGxlbgogICAgYXNzZXJ0IC8vIGFwcF9hcmdzKDApCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDUKICAgIC8vIGFzc2VydCB0eG4uYWNjb3VudHMoMCksICJhY2NvdW50cygwKSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGd0eG5zYXMgQWNjb3VudHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBhY2NvdW50cygwKQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTA2CiAgICAvLyBhc3NlcnQgdHhuLmFzc2V0cygwKSwgImFzc2V0cygwKSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGd0eG5zYXMgQXNzZXRzCiAgICBhc3NlcnQgLy8gYXNzZXRzKDApCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDcKICAgIC8vIGFzc2VydCB0eG4uYXBwcygwKSwgImFwcHMoMCkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBndHhuc2FzIEFwcGxpY2F0aW9ucwogICAgYXNzZXJ0IC8vIGFwcHMoMCkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwOAogICAgLy8gYXNzZXJ0IHR4bi5hcHByb3ZhbF9wcm9ncmFtX3BhZ2VzKDApLCAiYXBwcm92YWxfcHJvZ3JhbV9wYWdlcygwKSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGd0eG5zYXMgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIGxlbgogICAgYXNzZXJ0IC8vIGFwcHJvdmFsX3Byb2dyYW1fcGFnZXMoMCkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwOQogICAgLy8gYXNzZXJ0IHR4bi5jbGVhcl9zdGF0ZV9wcm9ncmFtX3BhZ2VzKDApLCAiY2xlYXJfc3RhdGVfcHJvZ3JhbV9wYWdlcygwKSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGd0eG5zYXMgQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgbGVuCiAgICBhc3NlcnQgLy8gY2xlYXJfc3RhdGVfcHJvZ3JhbV9wYWdlcygwKQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0Lm11bHRpcGxlX3R4bnModHhuMTogdWludDY0LCB0eG4yOiB1aW50NjQsIHR4bjM6IHVpbnQ2NCkgLT4gdm9pZDoKbXVsdGlwbGVfdHhuczoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExMS0xMTcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIG11bHRpcGxlX3R4bnMoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICB0eG4xOiBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uLAogICAgLy8gICAgIHR4bjI6IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgdHhuMzogZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDMgMAogICAgYnl0ZSAiIgogICAgZnJhbWVfZGlnIC0zCiAgICBpbnQgMAogICAgYiBtdWx0aXBsZV90eG5zX2Zvcl9ib2R5QDQKCm11bHRpcGxlX3R4bnNfZm9yX2hlYWRlcl8xQDI6CiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfZGlnIDAKICAgIGIgbXVsdGlwbGVfdHhuc19mb3JfYm9keUA0CgptdWx0aXBsZV90eG5zX2Zvcl9oZWFkZXJfMkAzOgogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAwCgptdWx0aXBsZV90eG5zX2Zvcl9ib2R5QDQ6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMTkKICAgIC8vIGFzc2VydCBhcHAuZ3JvdXBfaW5kZXggPT0gaW5kZXgKICAgIGZyYW1lX2RpZyAxCiAgICBndHhucyBHcm91cEluZGV4CiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydAogICAgZHVwCiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMTgKICAgIC8vIGZvciBpbmRleCwgYXBwIGluIHVlbnVtZXJhdGUoKHR4bjEsIHR4bjIsIHR4bjMpKToKICAgIHN3aXRjaCBtdWx0aXBsZV90eG5zX2Zvcl9oZWFkZXJfMUAyIG11bHRpcGxlX3R4bnNfZm9yX2hlYWRlcl8yQDMKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5hbnlfdHhuKHR4bjE6IHVpbnQ2NCwgdHhuMjogdWludDY0LCB0eG4zOiB1aW50NjQpIC0+IHZvaWQ6CmFueV90eG46CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMjEtMTI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhbnlfdHhuKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdHhuMTogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICAgICB0eG4yOiBndHhuLlRyYW5zYWN0aW9uLAogICAgLy8gICAgIHR4bjM6IGd0eG4uVHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIGJ5dGUgIiIKICAgIGludCAwCiAgICBmcmFtZV9kaWcgLTMKICAgIGIgYW55X3R4bl9mb3JfYm9keUA0CgphbnlfdHhuX2Zvcl9oZWFkZXJfMUAyOgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfYnVyeSAxCiAgICBiIGFueV90eG5fZm9yX2JvZHlANAoKYW55X3R4bl9mb3JfaGVhZGVyXzJAMzoKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2J1cnkgMQoKYW55X3R4bl9mb3JfYm9keUA0OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTI5CiAgICAvLyBhc3NlcnQgdHhuLmdyb3VwX2luZGV4ID09IGluZGV4CiAgICBndHhucyBHcm91cEluZGV4CiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAyCiAgICA9PQogICAgYXNzZXJ0CiAgICBkdXAKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyOAogICAgLy8gZm9yIGluZGV4LCB0eG4gaW4gdWVudW1lcmF0ZSgodHhuMSwgdHhuMiwgdHhuMykpOgogICAgc3dpdGNoIGFueV90eG5fZm9yX2hlYWRlcl8xQDIgYW55X3R4bl9mb3JfaGVhZGVyXzJAMwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0Lmdyb3VwX2luaXQodHhuMTogdWludDY0LCB0eG4yOiB1aW50NjQsIHR4bjM6IHVpbnQ2NCkgLT4gdm9pZDoKZ3JvdXBfaW5pdDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEzMS0xMzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGdyb3VwX2luaXQoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICB0eG4xOiBndHhuLlRyYW5zYWN0aW9uLAogICAgLy8gICAgIHR4bjI6IGd0eG4uVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgdHhuMzogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDMgMAogICAgYnl0ZSAiIgogICAgZnJhbWVfZGlnIC0zCiAgICBpbnQgMAogICAgYiBncm91cF9pbml0X2Zvcl9ib2R5QDQKCmdyb3VwX2luaXRfZm9yX2hlYWRlcl8xQDI6CiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAwCiAgICBiIGdyb3VwX2luaXRfZm9yX2JvZHlANAoKZ3JvdXBfaW5pdF9mb3JfaGVhZGVyXzJAMzoKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfZGlnIDAKCmdyb3VwX2luaXRfZm9yX2JvZHlANDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEzOQogICAgLy8gdHhuX2Zyb21faW5kZXggPSBndHhuLlRyYW5zYWN0aW9uKHR4bi5ncm91cF9pbmRleCkKICAgIHN3YXAKICAgIGR1cAogICAgZ3R4bnMgR3JvdXBJbmRleAogICAgc3dhcAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTQwCiAgICAvLyBhc3NlcnQgdHhuLnR4bl9pZCA9PSB0eG5fZnJvbV9pbmRleC50eG5faWQKICAgIGd0eG5zIFR4SUQKICAgIHN3YXAKICAgIGd0eG5zIFR4SUQKICAgID09CiAgICBhc3NlcnQKICAgIGR1cAogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTM4CiAgICAvLyBmb3IgdHhuIGluICh0eG4xLCB0eG4yLCB0eG4zKToKICAgIHN3aXRjaCBncm91cF9pbml0X2Zvcl9oZWFkZXJfMUAyIGdyb3VwX2luaXRfZm9yX2hlYWRlcl8yQDMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE0MQogICAgLy8gYXNzZXJ0IHR4bjEudHhuX2lkID09IGd0eG4uVHJhbnNhY3Rpb24oMCkudHhuX2lkCiAgICBmcmFtZV9kaWcgLTMKICAgIGd0eG5zIFR4SUQKICAgIGludCAwCiAgICBndHhucyBUeElECiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TransactionContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pay",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "key",
                "args": [
                    {
                        "type": "keyreg",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "acfg",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_transfer",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_freeze",
                "args": [
                    {
                        "type": "afrz",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "application_call",
                "args": [
                    {
                        "type": "appl",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "multiple_txns",
                "args": [
                    {
                        "type": "appl",
                        "name": "txn1"
                    },
                    {
                        "type": "appl",
                        "name": "txn2"
                    },
                    {
                        "type": "appl",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "any_txn",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn1"
                    },
                    {
                        "type": "txn",
                        "name": "txn2"
                    },
                    {
                        "type": "txn",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "group_init",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn1"
                    },
                    {
                        "type": "txn",
                        "name": "txn2"
                    },
                    {
                        "type": "txn",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}