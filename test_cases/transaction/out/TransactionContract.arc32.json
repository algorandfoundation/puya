{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "pay(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "key(keyreg)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_config(acfg)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_transfer(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_freeze(afrz)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "application_call(appl)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "multiple_txns(appl,appl,appl)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "any_txn(txn,txn,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "group_init(txn,txn,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIG1ldGhvZCAiY3JlYXRlKCl2b2lkIgogICAgbWV0aG9kICJwYXkocGF5KXZvaWQiCiAgICBtZXRob2QgImtleShrZXlyZWcpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfY29uZmlnKGFjZmcpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfdHJhbnNmZXIoYXhmZXIpdm9pZCIKICAgIG1ldGhvZCAiYXNzZXRfZnJlZXplKGFmcnopdm9pZCIKICAgIG1ldGhvZCAiYXBwbGljYXRpb25fY2FsbChhcHBsKXZvaWQiCiAgICBtZXRob2QgIm11bHRpcGxlX3R4bnMoYXBwbCxhcHBsLGFwcGwpdm9pZCIKICAgIG1ldGhvZCAiYW55X3R4bih0eG4sdHhuLHR4bil2b2lkIgogICAgbWV0aG9kICJncm91cF9pbml0KHR4bix0eG4sdHhuKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZV9yb3V0ZUAxIG1haW5fcGF5X3JvdXRlQDIgbWFpbl9rZXlfcm91dGVAMyBtYWluX2Fzc2V0X2NvbmZpZ19yb3V0ZUA0IG1haW5fYXNzZXRfdHJhbnNmZXJfcm91dGVANSBtYWluX2Fzc2V0X2ZyZWV6ZV9yb3V0ZUA2IG1haW5fYXBwbGljYXRpb25fY2FsbF9yb3V0ZUA3IG1haW5fbXVsdGlwbGVfdHhuc19yb3V0ZUA4IG1haW5fYW55X3R4bl9yb3V0ZUA5IG1haW5fZ3JvdXBfaW5pdF9yb3V0ZUAxMAogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVfcm91dGVAMToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcGF5X3JvdXRlQDI6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGF5CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2tleV9yb3V0ZUAzOgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQga2V5cmVnCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMga2V5cmVnCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo0MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGtleQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9jb25maWdfcm91dGVANDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFjZmcKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhY2ZnCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2V0X2NvbmZpZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF90cmFuc2Zlcl9yb3V0ZUA1OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhc3NldF90cmFuc2ZlcgogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hc3NldF9mcmVlemVfcm91dGVANjoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFmcnoKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhZnJ6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFzc2V0X2ZyZWV6ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hcHBsaWNhdGlvbl9jYWxsX3JvdXRlQDc6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBhcHBsCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXBwbAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6ODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhcHBsaWNhdGlvbl9jYWxsCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX211bHRpcGxlX3R4bnNfcm91dGVAODoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDMKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBhcHBsCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXBwbAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXBwbAogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGFwcGwKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFwcGwKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhcHBsCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBtdWx0aXBsZV90eG5zCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2FueV90eG5fcm91dGVAOToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMQogICAgLy8gY2xhc3MgVHJhbnNhY3Rpb25Db250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDMKICAgIC0KICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMgogICAgLQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBhbnlfdHhuCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2dyb3VwX2luaXRfcm91dGVAMTA6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFRyYW5zYWN0aW9uQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAzCiAgICAtCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDIKICAgIC0KICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgZ3JvdXBfaW5pdAogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5jcmVhdGUoKSAtPiB2b2lkOgpjcmVhdGU6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMi0xMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgY3JlYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5wYXkodHhuOiB1aW50NjQpIC0+IHZvaWQ6CnBheToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjMxLTMyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwYXkoc2VsZiwgdHhuOiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozNQogICAgLy8gdHhuLnJlY2VpdmVyID09IG9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MzQtMzYKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgdHhuLnJlY2VpdmVyID09IG9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJQYXltZW50IHNob3VsZCBiZSBmb3IgdGhpcyBhcHAiCiAgICBhc3NlcnQgLy8gUGF5bWVudCBzaG91bGQgYmUgZm9yIHRoaXMgYXBwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozNwogICAgLy8gYXNzZXJ0IHR4bi5hbW91bnQgPiAxMDAwLCAiUGF5bWVudCBzaG91bGQgYmUgZm9yID4xMDAwIG1pY3JvIGFsZ29zIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIGludCAxMDAwCiAgICA+CiAgICBhc3NlcnQgLy8gUGF5bWVudCBzaG91bGQgYmUgZm9yID4xMDAwIG1pY3JvIGFsZ29zCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTozOAogICAgLy8gYXNzZXJ0IHR4bi5jbG9zZV9yZW1haW5kZXJfdG8gPT0gb3AuR2xvYmFsLnplcm9fYWRkcmVzcywgImNsb3NlX3JlbWFpbmRlcl90byIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ2xvc2VSZW1haW5kZXJUbwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGNsb3NlX3JlbWFpbmRlcl90bwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0Ll9jb21tb25fY2hlY2tzKHR4bjogdWludDY0KSAtPiB2b2lkOgpfY29tbW9uX2NoZWNrczoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE2LTE3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9jb21tb25fY2hlY2tzKHNlbGYsIHR4bjogZ3R4bi5UcmFuc2FjdGlvbkJhc2UpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBhc3NlcnQgdHhuLnR4bl9pZCwgInR4bl9pZCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVHhJRAogICAgbGVuCiAgICBhc3NlcnQgLy8gdHhuX2lkCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxOQogICAgLy8gYXNzZXJ0IHR4bi5zZW5kZXIgPT0gb3AuR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgInNlbmRlciIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gc2VuZGVyCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToyMAogICAgLy8gYXNzZXJ0IHR4bi5mZWUsICJmZWUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZlZQogICAgYXNzZXJ0IC8vIGZlZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjEKICAgIC8vIGFzc2VydCB0eG4udHlwZSwgInR5cGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBhc3NlcnQgLy8gdHlwZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjIKICAgIC8vIGFzc2VydCB0eG4udHlwZV9ieXRlcywgInR5cGVfYnl0ZXMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFR5cGUKICAgIGxlbgogICAgYXNzZXJ0IC8vIHR5cGVfYnl0ZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBhc3NlcnQgdHhuLm5vdGUgPT0gQnl0ZXMoYiIiKSwgIm5vdGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE5vdGUKICAgIGJ5dGUgMHgKICAgID09CiAgICBhc3NlcnQgLy8gbm90ZQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjQKICAgIC8vIGFzc2VydCB0eG4uZ3JvdXBfaW5kZXggPT0gMCwgImdyb3VwX2luZGV4IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBHcm91cEluZGV4CiAgICAhCiAgICBhc3NlcnQgLy8gZ3JvdXBfaW5kZXgKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBhc3NlcnQgdHhuLmZpcnN0X3ZhbGlkLCAiZmlyc3RfdmFsaWQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZpcnN0VmFsaWQKICAgIGFzc2VydCAvLyBmaXJzdF92YWxpZAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjYtMjcKICAgIC8vICMgYXNzZXJ0IHR4bi5maXJzdF92YWxpZF90aW1lLCAiZmlyc3RfdmFsaWRfdGltZSIgIyB0aGlzIHZhbHVlIGNhbiBiZSBmbGFreSBpbiB0ZXN0cwogICAgLy8gYXNzZXJ0IHR4bi5sYXN0X3ZhbGlkLCAibGFzdF92YWxpZCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTGFzdFZhbGlkCiAgICBhc3NlcnQgLy8gbGFzdF92YWxpZAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MjgKICAgIC8vIGFzc2VydCB0eG4ubGVhc2UsICJsZWFzZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTGVhc2UKICAgIGxlbgogICAgYXNzZXJ0IC8vIGxlYXNlCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToyOQogICAgLy8gYXNzZXJ0IHR4bi5yZWtleV90byA9PSBvcC5HbG9iYWwuemVyb19hZGRyZXNzLCAicmVrZXlfdG8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJla2V5VG8KICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyByZWtleV90bwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmtleSh0eG46IHVpbnQ2NCkgLT4gdm9pZDoKa2V5OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDAtNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGtleShzZWxmLCB0eG46IGd0eG4uS2V5UmVnaXN0cmF0aW9uVHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQyCiAgICAvLyBzZWxmLl9jb21tb25fY2hlY2tzKHR4bikKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfY29tbW9uX2NoZWNrcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDMKICAgIC8vIGFzc2VydCB0eG4udm90ZV9rZXksICJ2b3RlX2tleSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVm90ZVBLCiAgICBsZW4KICAgIGFzc2VydCAvLyB2b3RlX2tleQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDQKICAgIC8vIGFzc2VydCB0eG4uc2VsZWN0aW9uX2tleSwgInNlbGVjdGlvbl9rZXkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbGVjdGlvblBLCiAgICBsZW4KICAgIGFzc2VydCAvLyBzZWxlY3Rpb25fa2V5CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo0NQogICAgLy8gYXNzZXJ0IHR4bi52b3RlX2tleV9kaWx1dGlvbiwgInZvdGVfa2V5X2RpbHV0aW9uIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBWb3RlS2V5RGlsdXRpb24KICAgIGFzc2VydCAvLyB2b3RlX2tleV9kaWx1dGlvbgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDYKICAgIC8vIGFzc2VydCB0eG4udm90ZV9maXJzdCwgInZvdGVfZmlyc3QiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFZvdGVGaXJzdAogICAgYXNzZXJ0IC8vIHZvdGVfZmlyc3QKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBhc3NlcnQgdHhuLnZvdGVfbGFzdCwgInZvdGVfbGFzdCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVm90ZUxhc3QKICAgIGFzc2VydCAvLyB2b3RlX2xhc3QKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjQ4CiAgICAvLyBhc3NlcnQgdHhuLm5vbl9wYXJ0aWNpcGF0aW9uLCAibm9uX3BhcnRpY2lwYXRpb24iCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE5vbnBhcnRpY2lwYXRpb24KICAgIGFzc2VydCAvLyBub25fcGFydGljaXBhdGlvbgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NDkKICAgIC8vIGFzc2VydCB0eG4uc3RhdGVfcHJvb2Zfa2V5LCAic3RhdGVfcHJvb2Zfa2V5IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTdGF0ZVByb29mUEsKICAgIGxlbgogICAgYXNzZXJ0IC8vIHN0YXRlX3Byb29mX2tleQogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmFzc2V0X2NvbmZpZyh0eG46IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXRfY29uZmlnOgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NTEtNTIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X2NvbmZpZyhzZWxmLCB0eG46IGd0eG4uQXNzZXRDb25maWdUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NTMKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1NQogICAgLy8gYXNzZXJ0IHR4bi5jb25maWdfYXNzZXQsICJjb25maWdfYXNzZXQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0CiAgICBhc3NlcnQgLy8gY29uZmlnX2Fzc2V0CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo1NgogICAgLy8gYXNzZXJ0IHR4bi50b3RhbCwgInRvdGFsIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldFRvdGFsCiAgICBhc3NlcnQgLy8gdG90YWwKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjU3CiAgICAvLyBhc3NlcnQgdHhuLmRlY2ltYWxzLCAiZGVjaW1hbHMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0RGVjaW1hbHMKICAgIGFzc2VydCAvLyBkZWNpbWFscwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NTgKICAgIC8vIGFzc2VydCB0eG4uZGVmYXVsdF9mcm96ZW4sICJkZWZhdWx0X2Zyb3plbiIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXREZWZhdWx0RnJvemVuCiAgICBhc3NlcnQgLy8gZGVmYXVsdF9mcm96ZW4KICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjU5CiAgICAvLyBhc3NlcnQgdHhuLnVuaXRfbmFtZSwgInVuaXRfbmFtZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgbGVuCiAgICBhc3NlcnQgLy8gdW5pdF9uYW1lCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2MAogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9uYW1lLCAiYXNzZXRfbmFtZSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ29uZmlnQXNzZXROYW1lCiAgICBsZW4KICAgIGFzc2VydCAvLyBhc3NldF9uYW1lCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2MQogICAgLy8gYXNzZXJ0IHR4bi51cmwsICJ1cmwiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0VVJMCiAgICBsZW4KICAgIGFzc2VydCAvLyB1cmwKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjYyCiAgICAvLyBhc3NlcnQgdHhuLm1ldGFkYXRhX2hhc2gsICJtZXRhZGF0YV9oYXNoIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldE1ldGFkYXRhSGFzaAogICAgbGVuCiAgICBhc3NlcnQgLy8gbWV0YWRhdGFfaGFzaAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NjMKICAgIC8vIGFzc2VydCB0eG4ubWFuYWdlciwgIm1hbmFnZXIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIG1hbmFnZXIKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjY0CiAgICAvLyBhc3NlcnQgdHhuLnJlc2VydmUsICJyZXNlcnZlIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldFJlc2VydmUKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyByZXNlcnZlCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2NQogICAgLy8gYXNzZXJ0IHR4bi5mcmVlemUsICJmcmVlemUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIENvbmZpZ0Fzc2V0RnJlZXplCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gZnJlZXplCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2NgogICAgLy8gYXNzZXJ0IHR4bi5jbGF3YmFjaywgImNsYXdiYWNrIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBDb25maWdBc3NldENsYXdiYWNrCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gY2xhd2JhY2sKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5hc3NldF90cmFuc2Zlcih0eG46IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXRfdHJhbnNmZXI6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo2OC02OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXNzZXRfdHJhbnNmZXIoc2VsZiwgdHhuOiBndHhuLkFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzAKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3MQogICAgLy8gYXNzZXJ0IHR4bi54ZmVyX2Fzc2V0LCAieGZlcl9hc3NldCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBhc3NlcnQgLy8geGZlcl9hc3NldAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzIKICAgIC8vIGFzc2VydCB0eG4uYXNzZXRfYW1vdW50LCAiYXNzZXRfYW1vdW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldEFtb3VudAogICAgYXNzZXJ0IC8vIGFzc2V0X2Ftb3VudAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzMKICAgIC8vIGFzc2VydCB0eG4uYXNzZXRfc2VuZGVyLCAiYXNzZXRfc2VuZGVyIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldFNlbmRlcgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGFzc2V0X3NlbmRlcgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzQKICAgIC8vIGFzc2VydCB0eG4uYXNzZXRfcmVjZWl2ZXIsICJhc3NldF9yZWNlaXZlciIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQXNzZXRSZWNlaXZlcgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICAhPQogICAgYXNzZXJ0IC8vIGFzc2V0X3JlY2VpdmVyCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo3NQogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9jbG9zZV90bywgImFzc2V0X2Nsb3NlX3RvIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldENsb3NlVG8KICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBhc3NldF9jbG9zZV90bwogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmFzc2V0X2ZyZWV6ZSh0eG46IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXRfZnJlZXplOgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzctNzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X2ZyZWV6ZShzZWxmLCB0eG46IGd0eG4uQXNzZXRGcmVlemVUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6NzkKICAgIC8vIHNlbGYuX2NvbW1vbl9jaGVja3ModHhuKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9jb21tb25fY2hlY2tzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4MQogICAgLy8gYXNzZXJ0IHR4bi5mcmVlemVfYXNzZXQsICJmcmVlemVfYXNzZXQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEZyZWV6ZUFzc2V0CiAgICBhc3NlcnQgLy8gZnJlZXplX2Fzc2V0CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4MgogICAgLy8gYXNzZXJ0IHR4bi5mcmVlemVfYWNjb3VudCwgImZyZWV6ZV9hY2NvdW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBGcmVlemVBc3NldEFjY291bnQKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydCAvLyBmcmVlemVfYWNjb3VudAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6ODMKICAgIC8vIGFzc2VydCB0eG4uZnJvemVuLCAiZnJvemVuIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBGcmVlemVBc3NldEZyb3plbgogICAgYXNzZXJ0IC8vIGZyb3plbgogICAgcmV0c3ViCgoKLy8gdGVzdF9jYXNlcy50cmFuc2FjdGlvbi5jb250cmFjdC5UcmFuc2FjdGlvbkNvbnRyYWN0LmFwcGxpY2F0aW9uX2NhbGwodHhuOiB1aW50NjQpIC0+IHZvaWQ6CmFwcGxpY2F0aW9uX2NhbGw6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4NS04NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXBwbGljYXRpb25fY2FsbChzZWxmLCB0eG46IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyBzZWxmLl9jb21tb25fY2hlY2tzKHR4bikKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfY29tbW9uX2NoZWNrcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6ODgKICAgIC8vIGFzc2VydCB0eG4uYXBwX2lkLCAiYXBwX2lkIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gYXBwX2lkCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo4OQogICAgLy8gYXNzZXJ0IHR4bi5vbl9jb21wbGV0aW9uLCAib25fY29tcGxldGlvbiIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgT25Db21wbGV0aW9uCiAgICBhc3NlcnQgLy8gb25fY29tcGxldGlvbgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6OTAKICAgIC8vIGFzc2VydCB0eG4ubnVtX2FwcF9hcmdzLCAibnVtX2FwcF9hcmdzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBOdW1BcHBBcmdzCiAgICBhc3NlcnQgLy8gbnVtX2FwcF9hcmdzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5MQogICAgLy8gYXNzZXJ0IHR4bi5udW1fYWNjb3VudHMsICJudW1fYWNjb3VudHMiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIE51bUFjY291bnRzCiAgICBhc3NlcnQgLy8gbnVtX2FjY291bnRzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5MgogICAgLy8gYXNzZXJ0IHR4bi5hcHByb3ZhbF9wcm9ncmFtLCAiYXBwcm92YWxfcHJvZ3JhbSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQXBwcm92YWxQcm9ncmFtCiAgICBsZW4KICAgIGFzc2VydCAvLyBhcHByb3ZhbF9wcm9ncmFtCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5MwogICAgLy8gYXNzZXJ0IHR4bi5jbGVhcl9zdGF0ZV9wcm9ncmFtLCAiY2xlYXJfc3RhdGVfcHJvZ3JhbSIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGxlbgogICAgYXNzZXJ0IC8vIGNsZWFyX3N0YXRlX3Byb2dyYW0KICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojk0CiAgICAvLyBhc3NlcnQgdHhuLm51bV9hc3NldHMsICJudW1fYXNzZXRzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBOdW1Bc3NldHMKICAgIGFzc2VydCAvLyBudW1fYXNzZXRzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5NQogICAgLy8gYXNzZXJ0IHR4bi5udW1fYXBwcywgIm51bV9hcHBzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBOdW1BcHBsaWNhdGlvbnMKICAgIGFzc2VydCAvLyBudW1fYXBwcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6OTYKICAgIC8vIGFzc2VydCB0eG4uZ2xvYmFsX251bV91aW50LCAiZ2xvYmFsX251bV91aW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBHbG9iYWxOdW1VaW50CiAgICBhc3NlcnQgLy8gZ2xvYmFsX251bV91aW50CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weTo5NwogICAgLy8gYXNzZXJ0IHR4bi5nbG9iYWxfbnVtX2J5dGVzLCAiZ2xvYmFsX251bV9ieXRlcyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgR2xvYmFsTnVtQnl0ZVNsaWNlCiAgICBhc3NlcnQgLy8gZ2xvYmFsX251bV9ieXRlcwogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6OTgKICAgIC8vIGFzc2VydCB0eG4ubG9jYWxfbnVtX3VpbnQsICJsb2NhbF9udW1fdWludCIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTG9jYWxOdW1VaW50CiAgICBhc3NlcnQgLy8gbG9jYWxfbnVtX3VpbnQKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBhc3NlcnQgdHhuLmxvY2FsX251bV9ieXRlcywgImxvY2FsX251bV9ieXRlcyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTG9jYWxOdW1CeXRlU2xpY2UKICAgIGFzc2VydCAvLyBsb2NhbF9udW1fYnl0ZXMKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwMAogICAgLy8gYXNzZXJ0IHR4bi5leHRyYV9wcm9ncmFtX3BhZ2VzLCAiZXh0cmFfcHJvZ3JhbV9wYWdlcyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgRXh0cmFQcm9ncmFtUGFnZXMKICAgIGFzc2VydCAvLyBleHRyYV9wcm9ncmFtX3BhZ2VzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDEKICAgIC8vIGFzc2VydCB0eG4ubGFzdF9sb2csICJsYXN0X2xvZyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTGFzdExvZwogICAgbGVuCiAgICBhc3NlcnQgLy8gbGFzdF9sb2cKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwMgogICAgLy8gYXNzZXJ0IHR4bi5udW1fYXBwcm92YWxfcHJvZ3JhbV9wYWdlcywgIm51bV9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VzIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBOdW1BcHByb3ZhbFByb2dyYW1QYWdlcwogICAgYXNzZXJ0IC8vIG51bV9hcHByb3ZhbF9wcm9ncmFtX3BhZ2VzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDMKICAgIC8vIGFzc2VydCB0eG4ubnVtX2NsZWFyX3N0YXRlX3Byb2dyYW1fcGFnZXMsICJudW1fY2xlYXJfc3RhdGVfcHJvZ3JhbV9wYWdlcyIKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgTnVtQ2xlYXJTdGF0ZVByb2dyYW1QYWdlcwogICAgYXNzZXJ0IC8vIG51bV9jbGVhcl9zdGF0ZV9wcm9ncmFtX3BhZ2VzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDQKICAgIC8vIGFzc2VydCB0eG4uYXBwX2FyZ3MoMCksICJhcHBfYXJncygwKSIKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGd0eG5zYXMgQXBwbGljYXRpb25BcmdzCiAgICBsZW4KICAgIGFzc2VydCAvLyBhcHBfYXJncygwKQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTA1CiAgICAvLyBhc3NlcnQgdHhuLmFjY291bnRzKDApLCAiYWNjb3VudHMoMCkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBndHhuc2FzIEFjY291bnRzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBhc3NlcnQgLy8gYWNjb3VudHMoMCkKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEwNgogICAgLy8gYXNzZXJ0IHR4bi5hc3NldHMoMCksICJhc3NldHMoMCkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBndHhuc2FzIEFzc2V0cwogICAgYXNzZXJ0IC8vIGFzc2V0cygwKQogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTA3CiAgICAvLyBhc3NlcnQgdHhuLmFwcHMoMCksICJhcHBzKDApIgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMAogICAgZ3R4bnNhcyBBcHBsaWNhdGlvbnMKICAgIGFzc2VydCAvLyBhcHBzKDApCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDgKICAgIC8vIGFzc2VydCB0eG4uYXBwcm92YWxfcHJvZ3JhbV9wYWdlcygwKSwgImFwcHJvdmFsX3Byb2dyYW1fcGFnZXMoMCkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBndHhuc2FzIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICBsZW4KICAgIGFzc2VydCAvLyBhcHByb3ZhbF9wcm9ncmFtX3BhZ2VzKDApCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMDkKICAgIC8vIGFzc2VydCB0eG4uY2xlYXJfc3RhdGVfcHJvZ3JhbV9wYWdlcygwKSwgImNsZWFyX3N0YXRlX3Byb2dyYW1fcGFnZXMoMCkiCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBndHhuc2FzIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIGxlbgogICAgYXNzZXJ0IC8vIGNsZWFyX3N0YXRlX3Byb2dyYW1fcGFnZXMoMCkKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5tdWx0aXBsZV90eG5zKHR4bjE6IHVpbnQ2NCwgdHhuMjogdWludDY0LCB0eG4zOiB1aW50NjQpIC0+IHZvaWQ6Cm11bHRpcGxlX3R4bnM6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMTEtMTE3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBtdWx0aXBsZV90eG5zKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdHhuMTogZ3R4bi5BcHBsaWNhdGlvbkNhbGxUcmFuc2FjdGlvbiwKICAgIC8vICAgICB0eG4yOiBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uLAogICAgLy8gICAgIHR4bjM6IGd0eG4uQXBwbGljYXRpb25DYWxsVHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIGJ5dGUgIiIKICAgIGZyYW1lX2RpZyAtMwogICAgaW50IDAKICAgIGIgbXVsdGlwbGVfdHhuc19mb3JfYm9keUA0CgptdWx0aXBsZV90eG5zX2Zvcl9oZWFkZXJfMUAyOgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAwCiAgICBiIG11bHRpcGxlX3R4bnNfZm9yX2JvZHlANAoKbXVsdGlwbGVfdHhuc19mb3JfaGVhZGVyXzJAMzoKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9kaWcgMAoKbXVsdGlwbGVfdHhuc19mb3JfYm9keUA0OgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTE5CiAgICAvLyBhc3NlcnQgYXBwLmdyb3VwX2luZGV4ID09IGluZGV4CiAgICBmcmFtZV9kaWcgMQogICAgZ3R4bnMgR3JvdXBJbmRleAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQKICAgIGR1cAogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTE4CiAgICAvLyBmb3IgaW5kZXgsIGFwcCBpbiB1ZW51bWVyYXRlKCh0eG4xLCB0eG4yLCB0eG4zKSk6CiAgICBzd2l0Y2ggbXVsdGlwbGVfdHhuc19mb3JfaGVhZGVyXzFAMiBtdWx0aXBsZV90eG5zX2Zvcl9oZWFkZXJfMkAzCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuYW55X3R4bih0eG4xOiB1aW50NjQsIHR4bjI6IHVpbnQ2NCwgdHhuMzogdWludDY0KSAtPiB2b2lkOgphbnlfdHhuOgogICAgLy8gdHJhbnNhY3Rpb24vY29udHJhY3QucHk6MTIxLTEyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYW55X3R4bigKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHR4bjE6IGd0eG4uVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgdHhuMjogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICAgICB0eG4zOiBndHhuLlRyYW5zYWN0aW9uLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICBieXRlICIiCiAgICBpbnQgMAogICAgZnJhbWVfZGlnIC0zCiAgICBiIGFueV90eG5fZm9yX2JvZHlANAoKYW55X3R4bl9mb3JfaGVhZGVyXzFAMjoKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2J1cnkgMQogICAgYiBhbnlfdHhuX2Zvcl9ib2R5QDQKCmFueV90eG5fZm9yX2hlYWRlcl8yQDM6CiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9idXJ5IDEKCmFueV90eG5fZm9yX2JvZHlANDoKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEyOQogICAgLy8gYXNzZXJ0IHR4bi5ncm91cF9pbmRleCA9PSBpbmRleAogICAgZ3R4bnMgR3JvdXBJbmRleAogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgY292ZXIgMgogICAgPT0KICAgIGFzc2VydAogICAgZHVwCiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMjgKICAgIC8vIGZvciBpbmRleCwgdHhuIGluIHVlbnVtZXJhdGUoKHR4bjEsIHR4bjIsIHR4bjMpKToKICAgIHN3aXRjaCBhbnlfdHhuX2Zvcl9oZWFkZXJfMUAyIGFueV90eG5fZm9yX2hlYWRlcl8yQDMKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHJhbnNhY3Rpb24uY29udHJhY3QuVHJhbnNhY3Rpb25Db250cmFjdC5ncm91cF9pbml0KHR4bjE6IHVpbnQ2NCwgdHhuMjogdWludDY0LCB0eG4zOiB1aW50NjQpIC0+IHZvaWQ6Cmdyb3VwX2luaXQ6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMzEtMTM3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBncm91cF9pbml0KAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdHhuMTogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICAgICB0eG4yOiBndHhuLlRyYW5zYWN0aW9uLAogICAgLy8gICAgIHR4bjM6IGd0eG4uVHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIGJ5dGUgIiIKICAgIGZyYW1lX2RpZyAtMwogICAgaW50IDAKICAgIGIgZ3JvdXBfaW5pdF9mb3JfYm9keUA0Cgpncm91cF9pbml0X2Zvcl9oZWFkZXJfMUAyOgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMAogICAgYiBncm91cF9pbml0X2Zvcl9ib2R5QDQKCmdyb3VwX2luaXRfZm9yX2hlYWRlcl8yQDM6CiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAwCgpncm91cF9pbml0X2Zvcl9ib2R5QDQ6CiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxMzkKICAgIC8vIHR4bl9mcm9tX2luZGV4ID0gZ3R4bi5UcmFuc2FjdGlvbih0eG4uZ3JvdXBfaW5kZXgpCiAgICBzd2FwCiAgICBkdXAKICAgIGd0eG5zIEdyb3VwSW5kZXgKICAgIHN3YXAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gYXNzZXJ0IHR4bi50eG5faWQgPT0gdHhuX2Zyb21faW5kZXgudHhuX2lkCiAgICBndHhucyBUeElECiAgICBzd2FwCiAgICBndHhucyBUeElECiAgICA9PQogICAgYXNzZXJ0CiAgICBkdXAKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjEzOAogICAgLy8gZm9yIHR4biBpbiAodHhuMSwgdHhuMiwgdHhuMyk6CiAgICBzd2l0Y2ggZ3JvdXBfaW5pdF9mb3JfaGVhZGVyXzFAMiBncm91cF9pbml0X2Zvcl9oZWFkZXJfMkAzCiAgICAvLyB0cmFuc2FjdGlvbi9jb250cmFjdC5weToxNDEKICAgIC8vIGFzc2VydCB0eG4xLnR4bl9pZCA9PSBndHhuLlRyYW5zYWN0aW9uKDApLnR4bl9pZAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBUeElECiAgICBpbnQgMAogICAgZ3R4bnMgVHhJRAogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnRyYW5zYWN0aW9uLmNvbnRyYWN0LlRyYW5zYWN0aW9uQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHRyYW5zYWN0aW9uL2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUcmFuc2FjdGlvbkNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TransactionContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pay",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "key",
                "args": [
                    {
                        "type": "keyreg",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "acfg",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_transfer",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "asset_freeze",
                "args": [
                    {
                        "type": "afrz",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "application_call",
                "args": [
                    {
                        "type": "appl",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "multiple_txns",
                "args": [
                    {
                        "type": "appl",
                        "name": "txn1"
                    },
                    {
                        "type": "appl",
                        "name": "txn2"
                    },
                    {
                        "type": "appl",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "any_txn",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn1"
                    },
                    {
                        "type": "txn",
                        "name": "txn2"
                    },
                    {
                        "type": "txn",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "group_init",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn1"
                    },
                    {
                        "type": "txn",
                        "name": "txn2"
                    },
                    {
                        "type": "txn",
                        "name": "txn3"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}