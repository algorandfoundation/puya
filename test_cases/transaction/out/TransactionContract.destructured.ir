contract test_cases.transaction.contract.TransactionContract:
    program approval:
        subroutine test_cases.transaction.contract.TransactionContract.approval_program() -> bool:
            block@0: // L11
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(txn,txn,txn)void" => block@9, method "group_init(txn,txn,txn)void" => block@10, * => fail // reject transaction}
            block@1: // create_route_L12
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bool = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                test_cases.transaction.contract.TransactionContract.create()
                return 1u
            block@2: // pay_route_L31
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0) // OnCompletion is NoOp
                let tmp%7#0: bool = (txn ApplicationID)
                (assert tmp%7#0) // is not creating
                let tmp%8#0: uint64 = (txn GroupIndex)
                let awst_tmp%0#0: uint64 = (- tmp%8#0 1u)
                let tmp%9#0: uint64 = ((gtxns TypeEnum) awst_tmp%0#0)
                let tmp%10#0: bool = (== tmp%9#0 pay)
                (assert tmp%10#0) // transaction type is pay
                test_cases.transaction.contract.TransactionContract.pay(awst_tmp%0#0)
                return 1u
            block@3: // key_route_L40
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: bool = (txn ApplicationID)
                (assert tmp%13#0) // is not creating
                let tmp%14#0: uint64 = (txn GroupIndex)
                let awst_tmp%1#0: uint64 = (- tmp%14#0 1u)
                let tmp%15#0: uint64 = ((gtxns TypeEnum) awst_tmp%1#0)
                let tmp%16#0: bool = (== tmp%15#0 keyreg)
                (assert tmp%16#0) // transaction type is keyreg
                test_cases.transaction.contract.TransactionContract.key(awst_tmp%1#0)
                return 1u
            block@4: // asset_config_route_L51
                let tmp%17#0: uint64 = (txn OnCompletion)
                let tmp%18#0: bool = (! tmp%17#0)
                (assert tmp%18#0) // OnCompletion is NoOp
                let tmp%19#0: bool = (txn ApplicationID)
                (assert tmp%19#0) // is not creating
                let tmp%20#0: uint64 = (txn GroupIndex)
                let awst_tmp%2#0: uint64 = (- tmp%20#0 1u)
                let tmp%21#0: uint64 = ((gtxns TypeEnum) awst_tmp%2#0)
                let tmp%22#0: bool = (== tmp%21#0 acfg)
                (assert tmp%22#0) // transaction type is acfg
                test_cases.transaction.contract.TransactionContract.asset_config(awst_tmp%2#0)
                return 1u
            block@5: // asset_transfer_route_L68
                let tmp%23#0: uint64 = (txn OnCompletion)
                let tmp%24#0: bool = (! tmp%23#0)
                (assert tmp%24#0) // OnCompletion is NoOp
                let tmp%25#0: bool = (txn ApplicationID)
                (assert tmp%25#0) // is not creating
                let tmp%26#0: uint64 = (txn GroupIndex)
                let awst_tmp%3#0: uint64 = (- tmp%26#0 1u)
                let tmp%27#0: uint64 = ((gtxns TypeEnum) awst_tmp%3#0)
                let tmp%28#0: bool = (== tmp%27#0 axfer)
                (assert tmp%28#0) // transaction type is axfer
                test_cases.transaction.contract.TransactionContract.asset_transfer(awst_tmp%3#0)
                return 1u
            block@6: // asset_freeze_route_L77
                let tmp%29#0: uint64 = (txn OnCompletion)
                let tmp%30#0: bool = (! tmp%29#0)
                (assert tmp%30#0) // OnCompletion is NoOp
                let tmp%31#0: bool = (txn ApplicationID)
                (assert tmp%31#0) // is not creating
                let tmp%32#0: uint64 = (txn GroupIndex)
                let awst_tmp%4#0: uint64 = (- tmp%32#0 1u)
                let tmp%33#0: uint64 = ((gtxns TypeEnum) awst_tmp%4#0)
                let tmp%34#0: bool = (== tmp%33#0 afrz)
                (assert tmp%34#0) // transaction type is afrz
                test_cases.transaction.contract.TransactionContract.asset_freeze(awst_tmp%4#0)
                return 1u
            block@7: // application_call_route_L85
                let tmp%35#0: uint64 = (txn OnCompletion)
                let tmp%36#0: bool = (! tmp%35#0)
                (assert tmp%36#0) // OnCompletion is NoOp
                let tmp%37#0: bool = (txn ApplicationID)
                (assert tmp%37#0) // is not creating
                let tmp%38#0: uint64 = (txn GroupIndex)
                let awst_tmp%5#0: uint64 = (- tmp%38#0 1u)
                let tmp%39#0: uint64 = ((gtxns TypeEnum) awst_tmp%5#0)
                let tmp%40#0: bool = (== tmp%39#0 appl)
                (assert tmp%40#0) // transaction type is appl
                test_cases.transaction.contract.TransactionContract.application_call(awst_tmp%5#0)
                return 1u
            block@8: // multiple_txns_route_L111
                let tmp%41#0: uint64 = (txn OnCompletion)
                let tmp%42#0: bool = (! tmp%41#0)
                (assert tmp%42#0) // OnCompletion is NoOp
                let tmp%43#0: bool = (txn ApplicationID)
                (assert tmp%43#0) // is not creating
                let tmp%44#0: uint64 = (txn GroupIndex)
                let awst_tmp%6#0: uint64 = (- tmp%44#0 3u)
                let tmp%45#0: uint64 = ((gtxns TypeEnum) awst_tmp%6#0)
                let tmp%46#0: bool = (== tmp%45#0 appl)
                (assert tmp%46#0) // transaction type is appl
                let tmp%47#0: uint64 = (txn GroupIndex)
                let awst_tmp%7#0: uint64 = (- tmp%47#0 2u)
                let tmp%48#0: uint64 = ((gtxns TypeEnum) awst_tmp%7#0)
                let tmp%49#0: bool = (== tmp%48#0 appl)
                (assert tmp%49#0) // transaction type is appl
                let tmp%50#0: uint64 = (txn GroupIndex)
                let awst_tmp%8#0: uint64 = (- tmp%50#0 1u)
                let tmp%51#0: uint64 = ((gtxns TypeEnum) awst_tmp%8#0)
                let tmp%52#0: bool = (== tmp%51#0 appl)
                (assert tmp%52#0) // transaction type is appl
                test_cases.transaction.contract.TransactionContract.multiple_txns(awst_tmp%6#0, awst_tmp%7#0, awst_tmp%8#0)
                return 1u
            block@9: // any_txn_route_L121
                let tmp%53#0: uint64 = (txn OnCompletion)
                let tmp%54#0: bool = (! tmp%53#0)
                (assert tmp%54#0) // OnCompletion is NoOp
                let tmp%55#0: bool = (txn ApplicationID)
                (assert tmp%55#0) // is not creating
                let tmp%56#0: uint64 = (txn GroupIndex)
                let tmp%57#0: uint64 = (- tmp%56#0 3u)
                let tmp%58#0: uint64 = (txn GroupIndex)
                let tmp%59#0: uint64 = (- tmp%58#0 2u)
                let tmp%60#0: uint64 = (txn GroupIndex)
                let tmp%61#0: uint64 = (- tmp%60#0 1u)
                test_cases.transaction.contract.TransactionContract.any_txn(tmp%57#0, tmp%59#0, tmp%61#0)
                return 1u
            block@10: // group_init_route_L131
                let tmp%62#0: uint64 = (txn OnCompletion)
                let tmp%63#0: bool = (! tmp%62#0)
                (assert tmp%63#0) // OnCompletion is NoOp
                let tmp%64#0: bool = (txn ApplicationID)
                (assert tmp%64#0) // is not creating
                let tmp%65#0: uint64 = (txn GroupIndex)
                let tmp%66#0: uint64 = (- tmp%65#0 3u)
                let tmp%67#0: uint64 = (txn GroupIndex)
                let tmp%68#0: uint64 = (- tmp%67#0 2u)
                let tmp%69#0: uint64 = (txn GroupIndex)
                let tmp%70#0: uint64 = (- tmp%69#0 1u)
                test_cases.transaction.contract.TransactionContract.group_init(tmp%66#0, tmp%68#0, tmp%70#0)
                return 1u
        
        subroutine test_cases.transaction.contract.TransactionContract.create() -> void:
            block@0: // L12
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.pay(txn: uint64) -> void:
            block@0: // L31
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let tmp%0#0: bytes = ((gtxns Receiver) txn#0)
                let tmp%1#0: bytes = (global CurrentApplicationAddress)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // Payment should be for this app
                let tmp%3#0: uint64 = ((gtxns Amount) txn#0)
                let tmp%4#0: bool = (> tmp%3#0 1000u)
                (assert tmp%4#0) // Payment should be for >1000 micro algos
                let tmp%5#0: bytes = ((gtxns CloseRemainderTo) txn#0)
                let tmp%6#0: bytes = (global ZeroAddress)
                let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
                (assert tmp%7#0) // close_remainder_to
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
            block@0: // L16
                let tmp%0#0: bytes = ((gtxns TxID) txn#0)
                let reinterpret_bool%0#0: bool = (len tmp%0#0)
                (assert reinterpret_bool%0#0) // txn_id
                let tmp%1#0: bytes = ((gtxns Sender) txn#0)
                let tmp%2#0: bytes = (global CreatorAddress)
                let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
                (assert tmp%3#0) // sender
                let reinterpret_bool%1#0: bool = ((gtxns Fee) txn#0)
                (assert reinterpret_bool%1#0) // fee
                let reinterpret_bool%2#0: bool = ((gtxns TypeEnum) txn#0)
                (assert reinterpret_bool%2#0) // type
                let tmp%4#0: bytes = ((gtxns Type) txn#0)
                let reinterpret_bool%3#0: bool = (len tmp%4#0)
                (assert reinterpret_bool%3#0) // type_bytes
                let tmp%5#0: bytes = ((gtxns Note) txn#0)
                let tmp%6#0: bool = (== tmp%5#0 0x)
                (assert tmp%6#0) // note
                let tmp%7#0: uint64 = ((gtxns GroupIndex) txn#0)
                let tmp%8#0: bool = (! tmp%7#0)
                (assert tmp%8#0) // group_index
                let reinterpret_bool%4#0: bool = ((gtxns FirstValid) txn#0)
                (assert reinterpret_bool%4#0) // first_valid
                let reinterpret_bool%5#0: bool = ((gtxns LastValid) txn#0)
                (assert reinterpret_bool%5#0) // last_valid
                let tmp%9#0: bytes = ((gtxns Lease) txn#0)
                let reinterpret_bool%6#0: bool = (len tmp%9#0)
                (assert reinterpret_bool%6#0) // lease
                let tmp%10#0: bytes = ((gtxns RekeyTo) txn#0)
                let tmp%11#0: bytes = (global ZeroAddress)
                let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
                (assert tmp%12#0) // rekey_to
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.key(txn: uint64) -> void:
            block@0: // L40
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let tmp%0#0: bytes = ((gtxns VotePK) txn#0)
                let reinterpret_bool%0#0: bool = (len tmp%0#0)
                (assert reinterpret_bool%0#0) // vote_key
                let tmp%1#0: bytes = ((gtxns SelectionPK) txn#0)
                let reinterpret_bool%1#0: bool = (len tmp%1#0)
                (assert reinterpret_bool%1#0) // selection_key
                let reinterpret_bool%2#0: bool = ((gtxns VoteKeyDilution) txn#0)
                (assert reinterpret_bool%2#0) // vote_key_dilution
                let reinterpret_bool%3#0: bool = ((gtxns VoteFirst) txn#0)
                (assert reinterpret_bool%3#0) // vote_first
                let reinterpret_bool%4#0: bool = ((gtxns VoteLast) txn#0)
                (assert reinterpret_bool%4#0) // vote_last
                let tmp%2#0: bool = ((gtxns Nonparticipation) txn#0)
                (assert tmp%2#0) // non_participation
                let tmp%3#0: bytes = ((gtxns StateProofPK) txn#0)
                let reinterpret_bool%5#0: bool = (len tmp%3#0)
                (assert reinterpret_bool%5#0) // state_proof_key
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.asset_config(txn: uint64) -> void:
            block@0: // L51
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let reinterpret_bool%0#0: bool = ((gtxns ConfigAsset) txn#0)
                (assert reinterpret_bool%0#0) // config_asset
                let reinterpret_bool%1#0: bool = ((gtxns ConfigAssetTotal) txn#0)
                (assert reinterpret_bool%1#0) // total
                let reinterpret_bool%2#0: bool = ((gtxns ConfigAssetDecimals) txn#0)
                (assert reinterpret_bool%2#0) // decimals
                let tmp%0#0: bool = ((gtxns ConfigAssetDefaultFrozen) txn#0)
                (assert tmp%0#0) // default_frozen
                let tmp%1#0: bytes = ((gtxns ConfigAssetUnitName) txn#0)
                let reinterpret_bool%3#0: bool = (len tmp%1#0)
                (assert reinterpret_bool%3#0) // unit_name
                let tmp%2#0: bytes = ((gtxns ConfigAssetName) txn#0)
                let reinterpret_bool%4#0: bool = (len tmp%2#0)
                (assert reinterpret_bool%4#0) // asset_name
                let tmp%3#0: bytes = ((gtxns ConfigAssetURL) txn#0)
                let reinterpret_bool%5#0: bool = (len tmp%3#0)
                (assert reinterpret_bool%5#0) // url
                let tmp%4#0: bytes = ((gtxns ConfigAssetMetadataHash) txn#0)
                let reinterpret_bool%6#0: bool = (len tmp%4#0)
                (assert reinterpret_bool%6#0) // metadata_hash
                let tmp%5#0: bytes = ((gtxns ConfigAssetManager) txn#0)
                let tmp%6#0: bytes = (global ZeroAddress)
                let tmp%7#0: bool = (!= tmp%5#0 tmp%6#0)
                (assert tmp%7#0) // manager
                let tmp%8#0: bytes = ((gtxns ConfigAssetReserve) txn#0)
                let tmp%9#0: bytes = (global ZeroAddress)
                let tmp%10#0: bool = (!= tmp%8#0 tmp%9#0)
                (assert tmp%10#0) // reserve
                let tmp%11#0: bytes = ((gtxns ConfigAssetFreeze) txn#0)
                let tmp%12#0: bytes = (global ZeroAddress)
                let tmp%13#0: bool = (!= tmp%11#0 tmp%12#0)
                (assert tmp%13#0) // freeze
                let tmp%14#0: bytes = ((gtxns ConfigAssetClawback) txn#0)
                let tmp%15#0: bytes = (global ZeroAddress)
                let tmp%16#0: bool = (!= tmp%14#0 tmp%15#0)
                (assert tmp%16#0) // clawback
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.asset_transfer(txn: uint64) -> void:
            block@0: // L68
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let reinterpret_bool%0#0: bool = ((gtxns XferAsset) txn#0)
                (assert reinterpret_bool%0#0) // xfer_asset
                let reinterpret_bool%1#0: bool = ((gtxns AssetAmount) txn#0)
                (assert reinterpret_bool%1#0) // asset_amount
                let tmp%0#0: bytes = ((gtxns AssetSender) txn#0)
                let tmp%1#0: bytes = (global ZeroAddress)
                let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // asset_sender
                let tmp%3#0: bytes = ((gtxns AssetReceiver) txn#0)
                let tmp%4#0: bytes = (global ZeroAddress)
                let tmp%5#0: bool = (!= tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // asset_receiver
                let tmp%6#0: bytes = ((gtxns AssetCloseTo) txn#0)
                let tmp%7#0: bytes = (global ZeroAddress)
                let tmp%8#0: bool = (!= tmp%6#0 tmp%7#0)
                (assert tmp%8#0) // asset_close_to
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.asset_freeze(txn: uint64) -> void:
            block@0: // L77
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let reinterpret_bool%0#0: bool = ((gtxns FreezeAsset) txn#0)
                (assert reinterpret_bool%0#0) // freeze_asset
                let tmp%0#0: bytes = ((gtxns FreezeAssetAccount) txn#0)
                let tmp%1#0: bytes = (global ZeroAddress)
                let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // freeze_account
                let tmp%3#0: bool = ((gtxns FreezeAssetFrozen) txn#0)
                (assert tmp%3#0) // frozen
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.application_call(txn: uint64) -> void:
            block@0: // L85
                test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
                let reinterpret_bool%0#0: bool = ((gtxns ApplicationID) txn#0)
                (assert reinterpret_bool%0#0) // app_id
                let reinterpret_bool%1#0: bool = ((gtxns OnCompletion) txn#0)
                (assert reinterpret_bool%1#0) // on_completion
                let reinterpret_bool%2#0: bool = ((gtxns NumAppArgs) txn#0)
                (assert reinterpret_bool%2#0) // num_app_args
                let reinterpret_bool%3#0: bool = ((gtxns NumAccounts) txn#0)
                (assert reinterpret_bool%3#0) // num_accounts
                let tmp%0#0: bytes = ((gtxns ApprovalProgram) txn#0)
                let reinterpret_bool%4#0: bool = (len tmp%0#0)
                (assert reinterpret_bool%4#0) // approval_program
                let tmp%1#0: bytes = ((gtxns ClearStateProgram) txn#0)
                let reinterpret_bool%5#0: bool = (len tmp%1#0)
                (assert reinterpret_bool%5#0) // clear_state_program
                let reinterpret_bool%6#0: bool = ((gtxns NumAssets) txn#0)
                (assert reinterpret_bool%6#0) // num_assets
                let reinterpret_bool%7#0: bool = ((gtxns NumApplications) txn#0)
                (assert reinterpret_bool%7#0) // num_apps
                let reinterpret_bool%8#0: bool = ((gtxns GlobalNumUint) txn#0)
                (assert reinterpret_bool%8#0) // global_num_uint
                let reinterpret_bool%9#0: bool = ((gtxns GlobalNumByteSlice) txn#0)
                (assert reinterpret_bool%9#0) // global_num_bytes
                let reinterpret_bool%10#0: bool = ((gtxns LocalNumUint) txn#0)
                (assert reinterpret_bool%10#0) // local_num_uint
                let reinterpret_bool%11#0: bool = ((gtxns LocalNumByteSlice) txn#0)
                (assert reinterpret_bool%11#0) // local_num_bytes
                let reinterpret_bool%12#0: bool = ((gtxns ExtraProgramPages) txn#0)
                (assert reinterpret_bool%12#0) // extra_program_pages
                let tmp%2#0: bytes = ((gtxns LastLog) txn#0)
                let reinterpret_bool%13#0: bool = (len tmp%2#0)
                (assert reinterpret_bool%13#0) // last_log
                let reinterpret_bool%14#0: bool = ((gtxns NumApprovalProgramPages) txn#0)
                (assert reinterpret_bool%14#0) // num_approval_program_pages
                let reinterpret_bool%15#0: bool = ((gtxns NumClearStateProgramPages) txn#0)
                (assert reinterpret_bool%15#0) // num_clear_state_program_pages
                let tmp%3#0: bytes = ((gtxnsas ApplicationArgs) txn#0 0u)
                let reinterpret_bool%16#0: bool = (len tmp%3#0)
                (assert reinterpret_bool%16#0) // app_args(0)
                let tmp%4#0: bytes = ((gtxnsas Accounts) txn#0 0u)
                let tmp%5#0: bytes = (global ZeroAddress)
                let tmp%6#0: bool = (!= tmp%4#0 tmp%5#0)
                (assert tmp%6#0) // accounts(0)
                let reinterpret_bool%17#0: bool = ((gtxnsas Assets) txn#0 0u)
                (assert reinterpret_bool%17#0) // assets(0)
                let reinterpret_bool%18#0: bool = ((gtxnsas Applications) txn#0 0u)
                (assert reinterpret_bool%18#0) // apps(0)
                let tmp%7#0: bytes = ((gtxnsas ApprovalProgramPages) txn#0 0u)
                let reinterpret_bool%19#0: bool = (len tmp%7#0)
                (assert reinterpret_bool%19#0) // approval_program_pages(0)
                let tmp%8#0: bytes = ((gtxnsas ClearStateProgramPages) txn#0 0u)
                let reinterpret_bool%20#0: bool = (len tmp%8#0)
                (assert reinterpret_bool%20#0) // clear_state_program_pages(0)
                return 
        
        subroutine test_cases.transaction.contract.TransactionContract.multiple_txns(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
            block@0: // L111
                let tuple_index%0#0: uint64 = 0u
                let app#3: uint64 = txn1#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@2: // for_header_1_L118
                let app#3: uint64 = txn2#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@3: // for_header_2_L118
                let app#3: uint64 = txn3#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@4: // for_body_L118
                let tmp%0#0: uint64 = ((gtxns GroupIndex) app#3)
                let tmp%1#0: bool = (== tmp%0#0 index#0)
                (assert tmp%1#0)
                let tuple_index%0#0: uint64 = (+ index#0 1u)
                goto_nth [block@2, block@3][index#0] else return 
        
        subroutine test_cases.transaction.contract.TransactionContract.any_txn(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
            block@0: // L121
                let tuple_index%0#0: uint64 = 0u
                let txn#3: uint64 = txn1#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@2: // for_header_1_L128
                let txn#3: uint64 = txn2#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@3: // for_header_2_L128
                let txn#3: uint64 = txn3#0
                let index#0: uint64 = tuple_index%0#0
                goto block@4
            block@4: // for_body_L128
                let tmp%0#0: uint64 = ((gtxns GroupIndex) txn#3)
                let tmp%1#0: bool = (== tmp%0#0 index#0)
                (assert tmp%1#0)
                let tuple_index%0#0: uint64 = (+ index#0 1u)
                goto_nth [block@2, block@3][index#0] else return 
        
        subroutine test_cases.transaction.contract.TransactionContract.group_init(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
            block@0: // L131
                let tuple_index%0#0: uint64 = 0u
                let txn#3: uint64 = txn1#0
                goto block@4
            block@2: // for_header_1_L138
                let tuple_index%0#0: uint64 = tuple_index%0#4
                let txn#3: uint64 = txn2#0
                goto block@4
            block@3: // for_header_2_L138
                let tuple_index%0#0: uint64 = tuple_index%0#4
                let txn#3: uint64 = txn3#0
                goto block@4
            block@4: // for_body_L138
                let txn_from_index#0: uint64 = ((gtxns GroupIndex) txn#3)
                let tmp%0#0: bytes = ((gtxns TxID) txn#3)
                let tmp%1#0: bytes = ((gtxns TxID) txn_from_index#0)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0)
                let tuple_index%0#4: uint64 = (+ tuple_index%0#0 1u)
                goto_nth [block@2, block@3][tuple_index%0#0] else goto block@6
            block@6: // after_for_L138
                let tmp%3#0: bytes = ((gtxns TxID) txn1#0)
                let tmp%4#0: bytes = ((gtxns TxID) 0u)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0)
                return 
    
    program clear-state:
        subroutine test_cases.transaction.contract.TransactionContract.clear_state_program() -> bool:
            block@0: // L11
                return 1u