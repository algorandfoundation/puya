// Op                                                                                    Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // transaction/contract.py:11
        // class TransactionContract(arc4.ARC4Contract):
        txn OnCompletion                                                                 tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                   tmp%1#0
        !                                                                                tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                   tmp%4#0
        bz main_create_NoOp@16 ; b main_call_NoOp@4

    main_call_NoOp@4:
        // transaction/contract.py:11
        // class TransactionContract(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                           tmp%5#0
        v-store tmp%5#0
        method pay(pay)void                                                              Method(pay(pay)void)
        method key(keyreg)void                                                           Method(pay(pay)void),Method(key(keyreg)void)
        method asset_config(acfg)void                                                    Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void)
        method asset_transfer(axfer)void                                                 Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void)
        method asset_freeze(afrz)void                                                    Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void)
        method application_call(appl)void                                                Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void),Method(application_call(appl)void)
        method multiple_txns(appl,appl,appl)void                                         Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void),Method(application_call(appl)void),Method(multiple_txns(appl,appl,appl)void)
        method any_txn(txn,txn,txn)void                                                  Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void),Method(application_call(appl)void),Method(multiple_txns(appl,appl,appl)void),Method(any_txn(txn,txn,txn)void)
        method group_init(txn,txn,txn)void                                               Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void),Method(application_call(appl)void),Method(multiple_txns(appl,appl,appl)void),Method(any_txn(txn,txn,txn)void),Method(group_init(txn,txn,txn)void)
        v-load tmp%5#0                                                                   Method(pay(pay)void),Method(key(keyreg)void),Method(asset_config(acfg)void),Method(asset_transfer(axfer)void),Method(asset_freeze(afrz)void),Method(application_call(appl)void),Method(multiple_txns(appl,appl,appl)void),Method(any_txn(txn,txn,txn)void),Method(group_init(txn,txn,txn)void),tmp%5#0
        match main_pay_route@5 main_key_route@6 main_asset_config_route@7 main_asset_transfer_route@8 main_asset_freeze_route@9 main_application_call_route@10 main_multiple_txns_route@11 main_any_txn_route@12 main_group_init_route@13 ; b main_switch_case_default@14 

    main_pay_route@5:
        // transaction/contract.py:31
        // @arc4.abimethod
        callsub pay
        err

    main_key_route@6:
        // transaction/contract.py:40
        // @arc4.abimethod
        callsub key
        err

    main_asset_config_route@7:
        // transaction/contract.py:51
        // @arc4.abimethod
        callsub asset_config
        err

    main_asset_transfer_route@8:
        // transaction/contract.py:68
        // @arc4.abimethod
        callsub asset_transfer
        err

    main_asset_freeze_route@9:
        // transaction/contract.py:77
        // @arc4.abimethod
        callsub asset_freeze
        err

    main_application_call_route@10:
        // transaction/contract.py:85
        // @arc4.abimethod
        callsub application_call
        err

    main_multiple_txns_route@11:
        // transaction/contract.py:111
        // @arc4.abimethod
        callsub multiple_txns
        err

    main_any_txn_route@12:
        // transaction/contract.py:121
        // @arc4.abimethod
        callsub any_txn
        err

    main_group_init_route@13:
        // transaction/contract.py:131
        // @arc4.abimethod
        callsub group_init
        err

    main_switch_case_default@14:
        err

    main_create_NoOp@16:
        // transaction/contract.py:11
        // class TransactionContract(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                           tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                   tmp%6#0
        method create()void                                                              tmp%6#0,Method(create()void)
        ==                                                                               eq%tmp%6#0
        v-store eq%tmp%6#0
        v-load eq%tmp%6#0                                                                eq%tmp%6#0
        assert
        // transaction/contract.py:12
        // @arc4.abimethod(create="require")
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.pay[routing]() -> void:
subroutine pay:
    pay_block@0:
        // transaction/contract.py:31
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int pay                                                                          gtxn_type%0#0,pay
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is pay
        // transaction/contract.py:33
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:35
        // txn.receiver == op.Global.current_application_address
        v-load txn#0                                                                     txn#0
        gtxns Receiver                                                                   tmp%0#1
        v-store tmp%0#1
        global CurrentApplicationAddress                                                 tmp%1#0
        v-store tmp%1#0
        v-load tmp%0#1                                                                   tmp%0#1
        v-load tmp%1#0                                                                   tmp%0#1,tmp%1#0
        ==                                                                               tmp%2#0
        v-store tmp%2#0
        // transaction/contract.py:34-36
        // assert (
        //     txn.receiver == op.Global.current_application_address
        // ), "Payment should be for this app"
        v-load tmp%2#0                                                                   tmp%2#0
        assert // Payment should be for this app
        // transaction/contract.py:37
        // assert txn.amount > 1000, "Payment should be for >1000 micro algos"
        v-load txn#0                                                                     txn#0
        gtxns Amount                                                                     tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                   tmp%3#0
        int 1000                                                                         tmp%3#0,1000
        >                                                                                tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                   tmp%4#0
        assert // Payment should be for >1000 micro algos
        // transaction/contract.py:38
        // assert txn.close_remainder_to == op.Global.zero_address, "close_remainder_to"
        v-load txn#0                                                                     txn#0
        gtxns CloseRemainderTo                                                           tmp%5#0
        v-store tmp%5#0
        global ZeroAddress                                                               tmp%6#0
        v-store tmp%6#0
        v-load tmp%5#0                                                                   tmp%5#0
        v-load tmp%6#0                                                                   tmp%5#0,tmp%6#0
        ==                                                                               tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                   tmp%7#0
        assert // close_remainder_to
        // transaction/contract.py:31
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.key[routing]() -> void:
subroutine key:
    key_block@0:
        // transaction/contract.py:40
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int keyreg                                                                       gtxn_type%0#0,keyreg
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is keyreg
        // transaction/contract.py:42
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:45
        // assert txn.vote_key_dilution, "vote_key_dilution"
        v-load txn#0                                                                     txn#0
        gtxns VoteKeyDilution                                                            tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                   tmp%6#0
        assert // vote_key_dilution
        // transaction/contract.py:46
        // assert txn.vote_first, "vote_first"
        v-load txn#0                                                                     txn#0
        gtxns VoteFirst                                                                  tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                   tmp%8#0
        assert // vote_first
        // transaction/contract.py:47
        // assert txn.vote_last, "vote_last"
        v-load txn#0                                                                     txn#0
        gtxns VoteLast                                                                   tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                                  tmp%10#0
        assert // vote_last
        // transaction/contract.py:48
        // assert txn.non_participation, "non_participation"
        v-load txn#0                                                                     txn#0
        gtxns Nonparticipation                                                           tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                                  tmp%12#0
        assert // non_participation
        // transaction/contract.py:49
        // assert txn.state_proof_key, "state_proof_key"
        v-load txn#0                                                                     txn#0
        gtxns StateProofPK                                                               tmp%13#0
        v-store tmp%13#0
        v-load tmp%13#0                                                                  tmp%13#0
        len                                                                              tmp%14#0
        v-store tmp%14#0
        v-load tmp%14#0                                                                  tmp%14#0
        assert // state_proof_key
        // transaction/contract.py:40
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.asset_config[routing]() -> void:
subroutine asset_config:
    asset_config_block@0:
        // transaction/contract.py:51
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int acfg                                                                         gtxn_type%0#0,acfg
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is acfg
        // transaction/contract.py:53
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:55
        // assert txn.config_asset, "config_asset"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAsset                                                                tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        assert // config_asset
        // transaction/contract.py:56
        // assert txn.total, "total"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetTotal                                                           tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        assert // total
        // transaction/contract.py:57
        // assert txn.decimals, "decimals"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetDecimals                                                        tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                   tmp%4#0
        assert // decimals
        // transaction/contract.py:58
        // assert txn.default_frozen, "default_frozen"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetDefaultFrozen                                                   tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                   tmp%6#0
        assert // default_frozen
        // transaction/contract.py:59
        // assert txn.unit_name, "unit_name"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetUnitName                                                        tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                   tmp%7#0
        len                                                                              tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                   tmp%8#0
        assert // unit_name
        // transaction/contract.py:60
        // assert txn.asset_name, "asset_name"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetName                                                            tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                                  tmp%10#0
        len                                                                              tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                                  tmp%11#0
        assert // asset_name
        // transaction/contract.py:61
        // assert txn.url, "url"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetURL                                                             tmp%13#0
        v-store tmp%13#0
        v-load tmp%13#0                                                                  tmp%13#0
        len                                                                              tmp%14#0
        v-store tmp%14#0
        v-load tmp%14#0                                                                  tmp%14#0
        assert // url
        // transaction/contract.py:63
        // assert txn.manager, "manager"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetManager                                                         tmp%19#0
        v-store tmp%19#0
        global ZeroAddress                                                               tmp%20#0
        v-store tmp%20#0
        v-load tmp%19#0                                                                  tmp%19#0
        v-load tmp%20#0                                                                  tmp%19#0,tmp%20#0
        !=                                                                               tmp%21#0
        v-store tmp%21#0
        v-load tmp%21#0                                                                  tmp%21#0
        assert // manager
        // transaction/contract.py:64
        // assert txn.reserve, "reserve"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetReserve                                                         tmp%22#0
        v-store tmp%22#0
        global ZeroAddress                                                               tmp%23#0
        v-store tmp%23#0
        v-load tmp%22#0                                                                  tmp%22#0
        v-load tmp%23#0                                                                  tmp%22#0,tmp%23#0
        !=                                                                               tmp%24#0
        v-store tmp%24#0
        v-load tmp%24#0                                                                  tmp%24#0
        assert // reserve
        // transaction/contract.py:65
        // assert txn.freeze, "freeze"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetFreeze                                                          tmp%25#0
        v-store tmp%25#0
        global ZeroAddress                                                               tmp%26#0
        v-store tmp%26#0
        v-load tmp%25#0                                                                  tmp%25#0
        v-load tmp%26#0                                                                  tmp%25#0,tmp%26#0
        !=                                                                               tmp%27#0
        v-store tmp%27#0
        v-load tmp%27#0                                                                  tmp%27#0
        assert // freeze
        // transaction/contract.py:66
        // assert txn.clawback, "clawback"
        v-load txn#0                                                                     txn#0
        gtxns ConfigAssetClawback                                                        tmp%28#0
        v-store tmp%28#0
        global ZeroAddress                                                               tmp%29#0
        v-store tmp%29#0
        v-load tmp%28#0                                                                  tmp%28#0
        v-load tmp%29#0                                                                  tmp%28#0,tmp%29#0
        !=                                                                               tmp%30#0
        v-store tmp%30#0
        v-load tmp%30#0                                                                  tmp%30#0
        assert // clawback
        // transaction/contract.py:51
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.asset_transfer[routing]() -> void:
subroutine asset_transfer:
    asset_transfer_block@0:
        // transaction/contract.py:68
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int axfer                                                                        gtxn_type%0#0,axfer
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is axfer
        // transaction/contract.py:70
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:71
        // assert txn.xfer_asset, "xfer_asset"
        v-load txn#0                                                                     txn#0
        gtxns XferAsset                                                                  tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        assert // xfer_asset
        // transaction/contract.py:72
        // assert txn.asset_amount, "asset_amount"
        v-load txn#0                                                                     txn#0
        gtxns AssetAmount                                                                tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        assert // asset_amount
        // transaction/contract.py:73
        // assert txn.asset_sender, "asset_sender"
        v-load txn#0                                                                     txn#0
        gtxns AssetSender                                                                tmp%4#0
        v-store tmp%4#0
        global ZeroAddress                                                               tmp%5#0
        v-store tmp%5#0
        v-load tmp%4#0                                                                   tmp%4#0
        v-load tmp%5#0                                                                   tmp%4#0,tmp%5#0
        !=                                                                               tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                   tmp%6#0
        assert // asset_sender
        // transaction/contract.py:74
        // assert txn.asset_receiver, "asset_receiver"
        v-load txn#0                                                                     txn#0
        gtxns AssetReceiver                                                              tmp%7#0
        v-store tmp%7#0
        global ZeroAddress                                                               tmp%8#0
        v-store tmp%8#0
        v-load tmp%7#0                                                                   tmp%7#0
        v-load tmp%8#0                                                                   tmp%7#0,tmp%8#0
        !=                                                                               tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                                   tmp%9#0
        assert // asset_receiver
        // transaction/contract.py:75
        // assert txn.asset_close_to, "asset_close_to"
        v-load txn#0                                                                     txn#0
        gtxns AssetCloseTo                                                               tmp%10#0
        v-store tmp%10#0
        global ZeroAddress                                                               tmp%11#0
        v-store tmp%11#0
        v-load tmp%10#0                                                                  tmp%10#0
        v-load tmp%11#0                                                                  tmp%10#0,tmp%11#0
        !=                                                                               tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                                  tmp%12#0
        assert // asset_close_to
        // transaction/contract.py:68
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.asset_freeze[routing]() -> void:
subroutine asset_freeze:
    asset_freeze_block@0:
        // transaction/contract.py:77
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int afrz                                                                         gtxn_type%0#0,afrz
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is afrz
        // transaction/contract.py:79
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:81
        // assert txn.freeze_asset, "freeze_asset"
        v-load txn#0                                                                     txn#0
        gtxns FreezeAsset                                                                tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        assert // freeze_asset
        // transaction/contract.py:82
        // assert txn.freeze_account, "freeze_account"
        v-load txn#0                                                                     txn#0
        gtxns FreezeAssetAccount                                                         tmp%2#0
        v-store tmp%2#0
        global ZeroAddress                                                               tmp%3#0
        v-store tmp%3#0
        v-load tmp%2#0                                                                   tmp%2#0
        v-load tmp%3#0                                                                   tmp%2#0,tmp%3#0
        !=                                                                               tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                   tmp%4#0
        assert // freeze_account
        // transaction/contract.py:83
        // assert txn.frozen, "frozen"
        v-load txn#0                                                                     txn#0
        gtxns FreezeAssetFrozen                                                          tmp%5#0
        v-store tmp%5#0
        v-load tmp%5#0                                                                   tmp%5#0
        assert // frozen
        // transaction/contract.py:77
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.application_call[routing]() -> void:
subroutine application_call:
    application_call_block@0:
        // transaction/contract.py:85
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 1                                                                            tmp%0#0,1
        -                                                                                txn#0
        v-store txn#0
        v-load txn#0                                                                     txn#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int appl                                                                         gtxn_type%0#0,appl
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is appl
        // transaction/contract.py:87
        // self._common_checks(txn)
        v-load txn#0                                                                     txn#0
        callsub _common_checks
        // transaction/contract.py:88
        // assert txn.app_id, "app_id"
        v-load txn#0                                                                     txn#0
        gtxns ApplicationID                                                              tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        assert // app_id
        // transaction/contract.py:89
        // assert txn.on_completion, "on_completion"
        v-load txn#0                                                                     txn#0
        gtxns OnCompletion                                                               tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        assert // on_completion
        // transaction/contract.py:90
        // assert txn.num_app_args, "num_app_args"
        v-load txn#0                                                                     txn#0
        gtxns NumAppArgs                                                                 tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                   tmp%4#0
        assert // num_app_args
        // transaction/contract.py:91
        // assert txn.num_accounts, "num_accounts"
        v-load txn#0                                                                     txn#0
        gtxns NumAccounts                                                                tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                   tmp%6#0
        assert // num_accounts
        // transaction/contract.py:92
        // assert txn.approval_program, "approval_program"
        v-load txn#0                                                                     txn#0
        gtxns ApprovalProgram                                                            tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                   tmp%8#0
        len                                                                              tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                                   tmp%9#0
        assert // approval_program
        // transaction/contract.py:93
        // assert txn.clear_state_program, "clear_state_program"
        v-load txn#0                                                                     txn#0
        gtxns ClearStateProgram                                                          tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                                  tmp%11#0
        len                                                                              tmp%12#0
        v-store tmp%12#0
        v-load tmp%12#0                                                                  tmp%12#0
        assert // clear_state_program
        // transaction/contract.py:94
        // assert txn.num_assets, "num_assets"
        v-load txn#0                                                                     txn#0
        gtxns NumAssets                                                                  tmp%14#0
        v-store tmp%14#0
        v-load tmp%14#0                                                                  tmp%14#0
        assert // num_assets
        // transaction/contract.py:95
        // assert txn.num_apps, "num_apps"
        v-load txn#0                                                                     txn#0
        gtxns NumApplications                                                            tmp%16#0
        v-store tmp%16#0
        v-load tmp%16#0                                                                  tmp%16#0
        assert // num_apps
        // transaction/contract.py:96
        // assert txn.global_num_uint, "global_num_uint"
        v-load txn#0                                                                     txn#0
        gtxns GlobalNumUint                                                              tmp%18#0
        v-store tmp%18#0
        v-load tmp%18#0                                                                  tmp%18#0
        assert // global_num_uint
        // transaction/contract.py:97
        // assert txn.global_num_bytes, "global_num_bytes"
        v-load txn#0                                                                     txn#0
        gtxns GlobalNumByteSlice                                                         tmp%20#0
        v-store tmp%20#0
        v-load tmp%20#0                                                                  tmp%20#0
        assert // global_num_bytes
        // transaction/contract.py:98
        // assert txn.local_num_uint, "local_num_uint"
        v-load txn#0                                                                     txn#0
        gtxns LocalNumUint                                                               tmp%22#0
        v-store tmp%22#0
        v-load tmp%22#0                                                                  tmp%22#0
        assert // local_num_uint
        // transaction/contract.py:99
        // assert txn.local_num_bytes, "local_num_bytes"
        v-load txn#0                                                                     txn#0
        gtxns LocalNumByteSlice                                                          tmp%24#0
        v-store tmp%24#0
        v-load tmp%24#0                                                                  tmp%24#0
        assert // local_num_bytes
        // transaction/contract.py:100
        // assert txn.extra_program_pages, "extra_program_pages"
        v-load txn#0                                                                     txn#0
        gtxns ExtraProgramPages                                                          tmp%26#0
        v-store tmp%26#0
        v-load tmp%26#0                                                                  tmp%26#0
        assert // extra_program_pages
        // transaction/contract.py:101
        // assert txn.last_log, "last_log"
        v-load txn#0                                                                     txn#0
        gtxns LastLog                                                                    tmp%28#0
        v-store tmp%28#0
        v-load tmp%28#0                                                                  tmp%28#0
        len                                                                              tmp%29#0
        v-store tmp%29#0
        v-load tmp%29#0                                                                  tmp%29#0
        assert // last_log
        // transaction/contract.py:102
        // assert txn.num_approval_program_pages, "num_approval_program_pages"
        v-load txn#0                                                                     txn#0
        gtxns NumApprovalProgramPages                                                    tmp%31#0
        v-store tmp%31#0
        v-load tmp%31#0                                                                  tmp%31#0
        assert // num_approval_program_pages
        // transaction/contract.py:103
        // assert txn.num_clear_state_program_pages, "num_clear_state_program_pages"
        v-load txn#0                                                                     txn#0
        gtxns NumClearStateProgramPages                                                  tmp%33#0
        v-store tmp%33#0
        v-load tmp%33#0                                                                  tmp%33#0
        assert // num_clear_state_program_pages
        // transaction/contract.py:104
        // assert txn.app_args(0), "app_args(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas ApplicationArgs                                                          tmp%35#0
        v-store tmp%35#0
        v-load tmp%35#0                                                                  tmp%35#0
        len                                                                              tmp%36#0
        v-store tmp%36#0
        v-load tmp%36#0                                                                  tmp%36#0
        assert // app_args(0)
        // transaction/contract.py:105
        // assert txn.accounts(0), "accounts(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas Accounts                                                                 tmp%38#0
        v-store tmp%38#0
        global ZeroAddress                                                               tmp%39#0
        v-store tmp%39#0
        v-load tmp%38#0                                                                  tmp%38#0
        v-load tmp%39#0                                                                  tmp%38#0,tmp%39#0
        !=                                                                               tmp%40#0
        v-store tmp%40#0
        v-load tmp%40#0                                                                  tmp%40#0
        assert // accounts(0)
        // transaction/contract.py:106
        // assert txn.assets(0), "assets(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas Assets                                                                   tmp%41#0
        v-store tmp%41#0
        v-load tmp%41#0                                                                  tmp%41#0
        assert // assets(0)
        // transaction/contract.py:107
        // assert txn.apps(0), "apps(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas Applications                                                             tmp%43#0
        v-store tmp%43#0
        v-load tmp%43#0                                                                  tmp%43#0
        assert // apps(0)
        // transaction/contract.py:108
        // assert txn.approval_program_pages(0), "approval_program_pages(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas ApprovalProgramPages                                                     tmp%45#0
        v-store tmp%45#0
        v-load tmp%45#0                                                                  tmp%45#0
        len                                                                              tmp%46#0
        v-store tmp%46#0
        v-load tmp%46#0                                                                  tmp%46#0
        assert // approval_program_pages(0)
        // transaction/contract.py:109
        // assert txn.clear_state_program_pages(0), "clear_state_program_pages(0)"
        v-load txn#0                                                                     txn#0
        int 0                                                                            txn#0,0
        gtxnsas ClearStateProgramPages                                                   tmp%48#0
        v-store tmp%48#0
        v-load tmp%48#0                                                                  tmp%48#0
        len                                                                              tmp%49#0
        v-store tmp%49#0
        v-load tmp%49#0                                                                  tmp%49#0
        assert // clear_state_program_pages(0)
        // transaction/contract.py:85
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.multiple_txns[routing]() -> void:
subroutine multiple_txns:
    multiple_txns_block@0:
        // transaction/contract.py:111
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 3                                                                            tmp%0#0,3
        -                                                                                txn1#0
        v-store txn1#0
        v-load txn1#0                                                                    txn1#0
        gtxns TypeEnum                                                                   gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                             gtxn_type%0#0
        int appl                                                                         gtxn_type%0#0,appl
        ==                                                                               gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                     gtxn_type_matches%0#0
        assert // transaction type is appl
        txn GroupIndex                                                                   tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                   tmp%1#0
        int 2                                                                            tmp%1#0,2
        -                                                                                txn2#0
        v-store txn2#0
        v-load txn2#0                                                                    txn2#0
        gtxns TypeEnum                                                                   gtxn_type%1#0
        v-store gtxn_type%1#0
        v-load gtxn_type%1#0                                                             gtxn_type%1#0
        int appl                                                                         gtxn_type%1#0,appl
        ==                                                                               gtxn_type_matches%1#0
        v-store gtxn_type_matches%1#0
        v-load gtxn_type_matches%1#0                                                     gtxn_type_matches%1#0
        assert // transaction type is appl
        txn GroupIndex                                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        int 1                                                                            tmp%2#0,1
        -                                                                                txn3#0
        v-store txn3#0
        v-load txn3#0                                                                    txn3#0
        gtxns TypeEnum                                                                   gtxn_type%2#0
        v-store gtxn_type%2#0
        v-load gtxn_type%2#0                                                             gtxn_type%2#0
        int appl                                                                         gtxn_type%2#0,appl
        ==                                                                               gtxn_type_matches%2#0
        v-store gtxn_type_matches%2#0
        v-load gtxn_type_matches%2#0                                                     gtxn_type_matches%2#0
        assert // transaction type is appl
        int 0                                                                            0
        // transaction/contract.py:118
        // for index, app in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn1#0                                                                    txn1#0
        v-store app#1
        b multiple_txns_for_body@2

    multiple_txns_for_body@2:
        // transaction/contract.py:119
        // assert app.group_index == index
        v-load app#1                                                                     app#1
        gtxns GroupIndex                                                                 tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        v-load index#0                                                                   tmp%0#0,index#0
        ==                                                                               tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                                   tmp%1#1
        assert
        // transaction/contract.py:118
        // for index, app in uenumerate((txn1, txn2, txn3)):
        v-load index#0                                                                   index#0
        switch multiple_txns_for_header_1@4 multiple_txns_for_header_2@5 ; b multiple_txns_after_for@6 

    multiple_txns_for_header_1@4:
        int 1                                                                            1
        // transaction/contract.py:118
        // for index, app in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn2#0                                                                    txn2#0
        v-store app#1
        b multiple_txns_for_body@2

    multiple_txns_for_header_2@5:
        int 2                                                                            2
        // transaction/contract.py:118
        // for index, app in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn3#0                                                                    txn3#0
        v-store app#1
        b multiple_txns_for_body@2

    multiple_txns_after_for@6:
        // transaction/contract.py:111
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.any_txn[routing]() -> void:
subroutine any_txn:
    any_txn_block@0:
        // transaction/contract.py:121
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 3                                                                            tmp%0#0,3
        -                                                                                txn1#0
        v-store txn1#0
        txn GroupIndex                                                                   tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                   tmp%1#0
        int 2                                                                            tmp%1#0,2
        -                                                                                txn2#0
        v-store txn2#0
        txn GroupIndex                                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        int 1                                                                            tmp%2#0,1
        -                                                                                txn3#0
        v-store txn3#0
        int 0                                                                            0
        // transaction/contract.py:128
        // for index, txn in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn1#0                                                                    txn1#0
        v-store txn#1
        b any_txn_for_body@2

    any_txn_for_body@2:
        // transaction/contract.py:129
        // assert txn.group_index == index
        v-load txn#1                                                                     txn#1
        gtxns GroupIndex                                                                 tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        v-load index#0                                                                   tmp%0#0,index#0
        ==                                                                               tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                                   tmp%1#1
        assert
        // transaction/contract.py:128
        // for index, txn in uenumerate((txn1, txn2, txn3)):
        v-load index#0                                                                   index#0
        switch any_txn_for_header_1@4 any_txn_for_header_2@5 ; b any_txn_after_for@6

    any_txn_for_header_1@4:
        int 1                                                                            1
        // transaction/contract.py:128
        // for index, txn in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn2#0                                                                    txn2#0
        v-store txn#1
        b any_txn_for_body@2

    any_txn_for_header_2@5:
        int 2                                                                            2
        // transaction/contract.py:128
        // for index, txn in uenumerate((txn1, txn2, txn3)):
        v-store index#0
        v-load txn3#0                                                                    txn3#0
        v-store txn#1
        b any_txn_for_body@2

    any_txn_after_for@6:
        // transaction/contract.py:121
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract.group_init[routing]() -> void:
subroutine group_init:
    group_init_block@0:
        // transaction/contract.py:131
        // @arc4.abimethod
        txn GroupIndex                                                                   tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                   tmp%0#0
        int 3                                                                            tmp%0#0,3
        -                                                                                txn1#0
        v-store txn1#0
        txn GroupIndex                                                                   tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                   tmp%1#0
        int 2                                                                            tmp%1#0,2
        -                                                                                txn2#0
        v-store txn2#0
        txn GroupIndex                                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                   tmp%2#0
        int 1                                                                            tmp%2#0,1
        -                                                                                txn3#0
        v-store txn3#0
        int 0                                                                            0
        v-store loop_counter%0#0
        v-load txn1#0                                                                    txn1#0
        v-store txn#1
        b group_init_for_body@2

    group_init_for_body@2:
        // transaction/contract.py:139
        // txn_from_index = gtxn.Transaction(txn.group_index)
        v-load txn#1                                                                     txn#1
        gtxns GroupIndex                                                                 txn_from_index#0
        v-store txn_from_index#0
        // transaction/contract.py:140
        // assert txn.txn_id == txn_from_index.txn_id
        v-load txn#1                                                                     txn#1
        gtxns TxID                                                                       tmp%0#1
        v-store tmp%0#1
        v-load txn_from_index#0                                                          txn_from_index#0
        gtxns TxID                                                                       tmp%1#1
        v-store tmp%1#1
        v-load tmp%0#1                                                                   tmp%0#1
        v-load tmp%1#1                                                                   tmp%0#1,tmp%1#1
        ==                                                                               tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                                   tmp%2#1
        assert
        // transaction/contract.py:138
        // for txn in (txn1, txn2, txn3):
        v-load loop_counter%0#0                                                          loop_counter%0#0
        switch group_init_for_header_1@4 group_init_for_header_2@5 ; b group_init_after_for@6 

    group_init_for_header_1@4:
        int 1                                                                            1
        v-store loop_counter%0#0
        v-load txn2#0                                                                    txn2#0
        v-store txn#1
        b group_init_for_body@2

    group_init_for_header_2@5:
        int 2                                                                            2
        v-store loop_counter%0#0
        v-load txn3#0                                                                    txn3#0
        v-store txn#1
        b group_init_for_body@2

    group_init_after_for@6:
        // transaction/contract.py:141
        // assert txn1.txn_id == gtxn.Transaction(0).txn_id
        v-load txn1#0                                                                    txn1#0
        gtxns TxID                                                                       tmp%3#0
        v-store tmp%3#0
        int 0                                                                            0
        gtxns TxID                                                                       tmp%4#0
        v-store tmp%4#0
        v-load tmp%3#0                                                                   tmp%3#0
        v-load tmp%4#0                                                                   tmp%3#0,tmp%4#0
        ==                                                                               tmp%5#0
        v-store tmp%5#0
        v-load tmp%5#0                                                                   tmp%5#0
        assert
        // transaction/contract.py:131
        // @arc4.abimethod
        int 1                                                                            1
        return


// test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
subroutine _common_checks:
    _common_checks_block@0:                                                              (𝕡) txn#0 |
        // transaction/contract.py:19
        // assert txn.sender == op.Global.creator_address, "sender"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns Sender                                                                     (𝕡) txn#0 | tmp%3#0
        v-store tmp%3#0                                                                  (𝕡) txn#0 |
        global CreatorAddress                                                            (𝕡) txn#0 | tmp%4#0
        v-store tmp%4#0                                                                  (𝕡) txn#0 |
        v-load tmp%3#0                                                                   (𝕡) txn#0 | tmp%3#0
        v-load tmp%4#0                                                                   (𝕡) txn#0 | tmp%3#0,tmp%4#0
        ==                                                                               (𝕡) txn#0 | tmp%5#0
        v-store tmp%5#0                                                                  (𝕡) txn#0 |
        v-load tmp%5#0                                                                   (𝕡) txn#0 | tmp%5#0
        assert // sender                                                                 (𝕡) txn#0 |
        // transaction/contract.py:20
        // assert txn.fee, "fee"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns Fee                                                                        (𝕡) txn#0 | tmp%6#0
        v-store tmp%6#0                                                                  (𝕡) txn#0 |
        v-load tmp%6#0                                                                   (𝕡) txn#0 | tmp%6#0
        assert // fee                                                                    (𝕡) txn#0 |
        // transaction/contract.py:21
        // assert txn.type, "type"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns TypeEnum                                                                   (𝕡) txn#0 | tmp%8#0
        v-store tmp%8#0                                                                  (𝕡) txn#0 |
        v-load tmp%8#0                                                                   (𝕡) txn#0 | tmp%8#0
        assert // type                                                                   (𝕡) txn#0 |
        // transaction/contract.py:22
        // assert txn.type_bytes, "type_bytes"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns Type                                                                       (𝕡) txn#0 | tmp%10#0
        v-store tmp%10#0                                                                 (𝕡) txn#0 |
        v-load tmp%10#0                                                                  (𝕡) txn#0 | tmp%10#0
        len                                                                              (𝕡) txn#0 | tmp%11#0
        v-store tmp%11#0                                                                 (𝕡) txn#0 |
        v-load tmp%11#0                                                                  (𝕡) txn#0 | tmp%11#0
        assert // type_bytes                                                             (𝕡) txn#0 |
        // transaction/contract.py:23
        // assert txn.note == Bytes(b""), "note"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns Note                                                                       (𝕡) txn#0 | tmp%13#0
        v-store tmp%13#0                                                                 (𝕡) txn#0 |
        v-load tmp%13#0                                                                  (𝕡) txn#0 | tmp%13#0
        byte 0x                                                                          (𝕡) txn#0 | tmp%13#0,0x
        ==                                                                               (𝕡) txn#0 | tmp%14#0
        v-store tmp%14#0                                                                 (𝕡) txn#0 |
        v-load tmp%14#0                                                                  (𝕡) txn#0 | tmp%14#0
        assert // note                                                                   (𝕡) txn#0 |
        // transaction/contract.py:24
        // assert txn.group_index == 0, "group_index"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns GroupIndex                                                                 (𝕡) txn#0 | tmp%15#0
        v-store tmp%15#0                                                                 (𝕡) txn#0 |
        v-load tmp%15#0                                                                  (𝕡) txn#0 | tmp%15#0
        !                                                                                (𝕡) txn#0 | tmp%16#0
        v-store tmp%16#0                                                                 (𝕡) txn#0 |
        v-load tmp%16#0                                                                  (𝕡) txn#0 | tmp%16#0
        assert // group_index                                                            (𝕡) txn#0 |
        // transaction/contract.py:25
        // assert txn.first_valid, "first_valid"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns FirstValid                                                                 (𝕡) txn#0 | tmp%17#0
        v-store tmp%17#0                                                                 (𝕡) txn#0 |
        v-load tmp%17#0                                                                  (𝕡) txn#0 | tmp%17#0
        assert // first_valid                                                            (𝕡) txn#0 |
        // transaction/contract.py:27
        // assert txn.last_valid, "last_valid"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns LastValid                                                                  (𝕡) txn#0 | tmp%19#0
        v-store tmp%19#0                                                                 (𝕡) txn#0 |
        v-load tmp%19#0                                                                  (𝕡) txn#0 | tmp%19#0
        assert // last_valid                                                             (𝕡) txn#0 |
        // transaction/contract.py:29
        // assert txn.rekey_to == op.Global.zero_address, "rekey_to"
        p-load txn#0                                                                     (𝕡) txn#0 | txn#0 (copy)
        gtxns RekeyTo                                                                    (𝕡) txn#0 | tmp%24#0
        v-store tmp%24#0                                                                 (𝕡) txn#0 |
        global ZeroAddress                                                               (𝕡) txn#0 | tmp%25#0
        v-store tmp%25#0                                                                 (𝕡) txn#0 |
        v-load tmp%24#0                                                                  (𝕡) txn#0 | tmp%24#0
        v-load tmp%25#0                                                                  (𝕡) txn#0 | tmp%24#0,tmp%25#0
        ==                                                                               (𝕡) txn#0 | tmp%26#0
        v-store tmp%26#0                                                                 (𝕡) txn#0 |
        v-load tmp%26#0                                                                  (𝕡) txn#0 | tmp%26#0
        assert // rekey_to                                                               (𝕡) txn#0 |
        retsub


