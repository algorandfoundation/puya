main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.transaction.contract.TransactionContract.__puya_arc4_router__() -> bool:
    block@0: // L11
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@14
    block@1: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@2, method "pay(pay)void" => block@3, method "key(keyreg)void" => block@4, method "asset_config(acfg)void" => block@5, method "asset_transfer(axfer)void" => block@6, method "asset_freeze(afrz)void" => block@7, method "application_call(appl)void" => block@8, method "multiple_txns(appl,appl,appl)void" => block@9, method "any_txn(txn,txn,txn)void" => block@10, method "group_init(txn,txn,txn)void" => block@11, * => block@12}
    block@2: // create_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        test_cases.transaction.contract.TransactionContract.create()
        return 1u
    block@3: // pay_route_L31
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let tmp%11#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%11#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        test_cases.transaction.contract.TransactionContract.pay(gtxn_idx%0#0)
        return 1u
    block@4: // key_route_L40
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        let tmp%16#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%16#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 keyreg)
        (assert gtxn_type_matches%1#0) // transaction type is keyreg
        test_cases.transaction.contract.TransactionContract.key(gtxn_idx%1#0)
        return 1u
    block@5: // asset_config_route_L51
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (== tmp%17#0 NoOp)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // can only call when not creating
        let tmp%21#0: uint64 = (txn GroupIndex)
        let gtxn_idx%2#0: uint64 = (- tmp%21#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 acfg)
        (assert gtxn_type_matches%2#0) // transaction type is acfg
        test_cases.transaction.contract.TransactionContract.asset_config(gtxn_idx%2#0)
        return 1u
    block@6: // asset_transfer_route_L68
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let tmp%26#0: uint64 = (txn GroupIndex)
        let gtxn_idx%3#0: uint64 = (- tmp%26#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) gtxn_idx%3#0)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        test_cases.transaction.contract.TransactionContract.asset_transfer(gtxn_idx%3#0)
        return 1u
    block@7: // asset_freeze_route_L77
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (== tmp%27#0 NoOp)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // can only call when not creating
        let tmp%31#0: uint64 = (txn GroupIndex)
        let gtxn_idx%4#0: uint64 = (- tmp%31#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) gtxn_idx%4#0)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 afrz)
        (assert gtxn_type_matches%4#0) // transaction type is afrz
        test_cases.transaction.contract.TransactionContract.asset_freeze(gtxn_idx%4#0)
        return 1u
    block@8: // application_call_route_L85
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (== tmp%32#0 NoOp)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // can only call when not creating
        let tmp%36#0: uint64 = (txn GroupIndex)
        let gtxn_idx%5#0: uint64 = (- tmp%36#0 1u)
        let gtxn_type%5#0: uint64 = ((gtxns TypeEnum) gtxn_idx%5#0)
        let gtxn_type_matches%5#0: bool = (== gtxn_type%5#0 appl)
        (assert gtxn_type_matches%5#0) // transaction type is appl
        test_cases.transaction.contract.TransactionContract.application_call(gtxn_idx%5#0)
        return 1u
    block@9: // multiple_txns_route_L111
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let tmp%41#0: uint64 = (txn GroupIndex)
        let gtxn_idx%6#0: uint64 = (- tmp%41#0 3u)
        let gtxn_type%6#0: uint64 = ((gtxns TypeEnum) gtxn_idx%6#0)
        let gtxn_type_matches%6#0: bool = (== gtxn_type%6#0 appl)
        (assert gtxn_type_matches%6#0) // transaction type is appl
        let tmp%42#0: uint64 = (txn GroupIndex)
        let gtxn_idx%7#0: uint64 = (- tmp%42#0 2u)
        let gtxn_type%7#0: uint64 = ((gtxns TypeEnum) gtxn_idx%7#0)
        let gtxn_type_matches%7#0: bool = (== gtxn_type%7#0 appl)
        (assert gtxn_type_matches%7#0) // transaction type is appl
        let tmp%43#0: uint64 = (txn GroupIndex)
        let gtxn_idx%8#0: uint64 = (- tmp%43#0 1u)
        let gtxn_type%8#0: uint64 = ((gtxns TypeEnum) gtxn_idx%8#0)
        let gtxn_type_matches%8#0: bool = (== gtxn_type%8#0 appl)
        (assert gtxn_type_matches%8#0) // transaction type is appl
        test_cases.transaction.contract.TransactionContract.multiple_txns(gtxn_idx%6#0, gtxn_idx%7#0, gtxn_idx%8#0)
        return 1u
    block@10: // any_txn_route_L121
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (== tmp%44#0 NoOp)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        let tmp%47#0: bool = (!= tmp%46#0 0u)
        (assert tmp%47#0) // can only call when not creating
        let tmp%48#0: uint64 = (txn GroupIndex)
        let gtxn_idx%9#0: uint64 = (- tmp%48#0 3u)
        let tmp%49#0: uint64 = (txn GroupIndex)
        let gtxn_idx%10#0: uint64 = (- tmp%49#0 2u)
        let tmp%50#0: uint64 = (txn GroupIndex)
        let gtxn_idx%11#0: uint64 = (- tmp%50#0 1u)
        test_cases.transaction.contract.TransactionContract.any_txn(gtxn_idx%9#0, gtxn_idx%10#0, gtxn_idx%11#0)
        return 1u
    block@11: // group_init_route_L131
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (== tmp%51#0 NoOp)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        let tmp%54#0: bool = (!= tmp%53#0 0u)
        (assert tmp%54#0) // can only call when not creating
        let tmp%55#0: uint64 = (txn GroupIndex)
        let gtxn_idx%12#0: uint64 = (- tmp%55#0 3u)
        let tmp%56#0: uint64 = (txn GroupIndex)
        let gtxn_idx%13#0: uint64 = (- tmp%56#0 2u)
        let tmp%57#0: uint64 = (txn GroupIndex)
        let gtxn_idx%14#0: uint64 = (- tmp%57#0 1u)
        test_cases.transaction.contract.TransactionContract.group_init(gtxn_idx%12#0, gtxn_idx%13#0, gtxn_idx%14#0)
        return 1u
    block@12: // switch_case_default_L11
        goto block@13
    block@13: // switch_case_next_L11
        goto block@15
    block@14: // bare_routing_L11
        goto block@15
    block@15: // after_if_else_L11
        return 0u

subroutine test_cases.transaction.contract.TransactionContract.create() -> void:
    block@0: // L12
        return 

subroutine test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
    block@0: // L16
        let tmp%0#0: bytes = ((gtxns TxID) txn#0)
        let tmp%1#0: uint64 = (len tmp%0#0)
        let tmp%2#0: bool = (!= tmp%1#0 0u)
        (assert tmp%2#0) // txn_id
        let tmp%3#0: bytes[32] = ((gtxns Sender) txn#0)
        let tmp%4#0: bytes[32] = (global CreatorAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // sender
        let tmp%6#0: uint64 = ((gtxns Fee) txn#0)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        (assert tmp%7#0) // fee
        let tmp%8#0: uint64 = ((gtxns TypeEnum) txn#0)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        (assert tmp%9#0) // type
        let tmp%10#0: bytes = ((gtxns Type) txn#0)
        let tmp%11#0: uint64 = (len tmp%10#0)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%12#0) // type_bytes
        let tmp%13#0: bytes = ((gtxns Note) txn#0)
        let tmp%14#0: bool = (== tmp%13#0 0x)
        (assert tmp%14#0) // note
        let tmp%15#0: uint64 = ((gtxns GroupIndex) txn#0)
        let tmp%16#0: bool = (== tmp%15#0 0u)
        (assert tmp%16#0) // group_index
        let tmp%17#0: uint64 = ((gtxns FirstValid) txn#0)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%18#0) // first_valid
        let tmp%19#0: uint64 = ((gtxns LastValid) txn#0)
        let tmp%20#0: bool = (!= tmp%19#0 0u)
        (assert tmp%20#0) // last_valid
        let tmp%21#0: bytes = ((gtxns Lease) txn#0)
        let tmp%22#0: uint64 = (len tmp%21#0)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // lease
        let tmp%24#0: bytes[32] = ((gtxns RekeyTo) txn#0)
        let tmp%25#0: bytes[32] = (global ZeroAddress)
        let tmp%26#0: bool = (== tmp%24#0 tmp%25#0)
        (assert tmp%26#0) // rekey_to
        return 

subroutine test_cases.transaction.contract.TransactionContract.pay(txn: uint64) -> void:
    block@0: // L31
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let tmp%0#0: bytes[32] = ((gtxns Receiver) txn#0)
        let tmp%1#0: bytes[32] = (global CurrentApplicationAddress)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // Payment should be for this app
        let tmp%3#0: uint64 = ((gtxns Amount) txn#0)
        let tmp%4#0: bool = (> tmp%3#0 1000u)
        (assert tmp%4#0) // Payment should be for >1000 micro algos
        let tmp%5#0: bytes[32] = ((gtxns CloseRemainderTo) txn#0)
        let tmp%6#0: bytes[32] = (global ZeroAddress)
        let tmp%7#0: bool = (== tmp%5#0 tmp%6#0)
        (assert tmp%7#0) // close_remainder_to
        return 

subroutine test_cases.transaction.contract.TransactionContract.key(txn: uint64) -> void:
    block@0: // L40
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let tmp%0#0: bytes = ((gtxns VotePK) txn#0)
        let tmp%1#0: uint64 = (len tmp%0#0)
        let tmp%2#0: bool = (!= tmp%1#0 0u)
        (assert tmp%2#0) // vote_key
        let tmp%3#0: bytes = ((gtxns SelectionPK) txn#0)
        let tmp%4#0: uint64 = (len tmp%3#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%5#0) // selection_key
        let tmp%6#0: uint64 = ((gtxns VoteKeyDilution) txn#0)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        (assert tmp%7#0) // vote_key_dilution
        let tmp%8#0: uint64 = ((gtxns VoteFirst) txn#0)
        let tmp%9#0: bool = (!= tmp%8#0 0u)
        (assert tmp%9#0) // vote_first
        let tmp%10#0: uint64 = ((gtxns VoteLast) txn#0)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // vote_last
        let tmp%12#0: bool = ((gtxns Nonparticipation) txn#0)
        (assert tmp%12#0) // non_participation
        let tmp%13#0: bytes = ((gtxns StateProofPK) txn#0)
        let tmp%14#0: uint64 = (len tmp%13#0)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // state_proof_key
        return 

subroutine test_cases.transaction.contract.TransactionContract.asset_config(txn: uint64) -> void:
    block@0: // L51
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let reinterpret_bool%0#0: bool = ((gtxns ConfigAsset) txn#0)
        (assert reinterpret_bool%0#0) // config_asset
        let tmp%0#0: uint64 = ((gtxns ConfigAssetTotal) txn#0)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        (assert tmp%1#0) // total
        let tmp%2#0: uint64 = ((gtxns ConfigAssetDecimals) txn#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // decimals
        let tmp%4#0: bool = ((gtxns ConfigAssetDefaultFrozen) txn#0)
        (assert tmp%4#0) // default_frozen
        let tmp%5#0: bytes = ((gtxns ConfigAssetUnitName) txn#0)
        let tmp%6#0: uint64 = (len tmp%5#0)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        (assert tmp%7#0) // unit_name
        let tmp%8#0: bytes = ((gtxns ConfigAssetName) txn#0)
        let tmp%9#0: uint64 = (len tmp%8#0)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // asset_name
        let tmp%11#0: bytes = ((gtxns ConfigAssetURL) txn#0)
        let tmp%12#0: uint64 = (len tmp%11#0)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // url
        let tmp%14#0: bytes = ((gtxns ConfigAssetMetadataHash) txn#0)
        let tmp%15#0: uint64 = (len tmp%14#0)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // metadata_hash
        let tmp%17#0: bytes[32] = ((gtxns ConfigAssetManager) txn#0)
        let tmp%18#0: bytes[32] = (global ZeroAddress)
        let tmp%19#0: bool = (!= tmp%17#0 tmp%18#0)
        (assert tmp%19#0) // manager
        let tmp%20#0: bytes[32] = ((gtxns ConfigAssetReserve) txn#0)
        let tmp%21#0: bytes[32] = (global ZeroAddress)
        let tmp%22#0: bool = (!= tmp%20#0 tmp%21#0)
        (assert tmp%22#0) // reserve
        let tmp%23#0: bytes[32] = ((gtxns ConfigAssetFreeze) txn#0)
        let tmp%24#0: bytes[32] = (global ZeroAddress)
        let tmp%25#0: bool = (!= tmp%23#0 tmp%24#0)
        (assert tmp%25#0) // freeze
        let tmp%26#0: bytes[32] = ((gtxns ConfigAssetClawback) txn#0)
        let tmp%27#0: bytes[32] = (global ZeroAddress)
        let tmp%28#0: bool = (!= tmp%26#0 tmp%27#0)
        (assert tmp%28#0) // clawback
        return 

subroutine test_cases.transaction.contract.TransactionContract.asset_transfer(txn: uint64) -> void:
    block@0: // L68
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let reinterpret_bool%0#0: bool = ((gtxns XferAsset) txn#0)
        (assert reinterpret_bool%0#0) // xfer_asset
        let tmp%0#0: uint64 = ((gtxns AssetAmount) txn#0)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        (assert tmp%1#0) // asset_amount
        let tmp%2#0: bytes[32] = ((gtxns AssetSender) txn#0)
        let tmp%3#0: bytes[32] = (global ZeroAddress)
        let tmp%4#0: bool = (!= tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // asset_sender
        let tmp%5#0: bytes[32] = ((gtxns AssetReceiver) txn#0)
        let tmp%6#0: bytes[32] = (global ZeroAddress)
        let tmp%7#0: bool = (!= tmp%5#0 tmp%6#0)
        (assert tmp%7#0) // asset_receiver
        let tmp%8#0: bytes[32] = ((gtxns AssetCloseTo) txn#0)
        let tmp%9#0: bytes[32] = (global ZeroAddress)
        let tmp%10#0: bool = (!= tmp%8#0 tmp%9#0)
        (assert tmp%10#0) // asset_close_to
        return 

subroutine test_cases.transaction.contract.TransactionContract.asset_freeze(txn: uint64) -> void:
    block@0: // L77
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let reinterpret_bool%0#0: bool = ((gtxns FreezeAsset) txn#0)
        (assert reinterpret_bool%0#0) // freeze_asset
        let tmp%0#0: bytes[32] = ((gtxns FreezeAssetAccount) txn#0)
        let tmp%1#0: bytes[32] = (global ZeroAddress)
        let tmp%2#0: bool = (!= tmp%0#0 tmp%1#0)
        (assert tmp%2#0) // freeze_account
        let tmp%3#0: bool = ((gtxns FreezeAssetFrozen) txn#0)
        (assert tmp%3#0) // frozen
        return 

subroutine test_cases.transaction.contract.TransactionContract.application_call(txn: uint64) -> void:
    block@0: // L85
        test_cases.transaction.contract.TransactionContract._common_checks(txn#0)
        let reinterpret_bool%0#0: bool = ((gtxns ApplicationID) txn#0)
        (assert reinterpret_bool%0#0) // app_id
        let tmp%0#0: uint64 = ((gtxns OnCompletion) txn#0)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        (assert tmp%1#0) // on_completion
        let tmp%2#0: uint64 = ((gtxns NumAppArgs) txn#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // num_app_args
        let tmp%4#0: uint64 = ((gtxns NumAccounts) txn#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%5#0) // num_accounts
        let tmp%6#0: bytes = ((gtxns ApprovalProgram) txn#0)
        let tmp%7#0: uint64 = (len tmp%6#0)
        let tmp%8#0: bool = (!= tmp%7#0 0u)
        (assert tmp%8#0) // approval_program
        let tmp%9#0: bytes = ((gtxns ClearStateProgram) txn#0)
        let tmp%10#0: uint64 = (len tmp%9#0)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // clear_state_program
        let tmp%12#0: uint64 = ((gtxns NumAssets) txn#0)
        let tmp%13#0: bool = (!= tmp%12#0 0u)
        (assert tmp%13#0) // num_assets
        let tmp%14#0: uint64 = ((gtxns NumApplications) txn#0)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // num_apps
        let tmp%16#0: uint64 = ((gtxns GlobalNumUint) txn#0)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // global_num_uint
        let tmp%18#0: uint64 = ((gtxns GlobalNumByteSlice) txn#0)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // global_num_bytes
        let tmp%20#0: uint64 = ((gtxns LocalNumUint) txn#0)
        let tmp%21#0: bool = (!= tmp%20#0 0u)
        (assert tmp%21#0) // local_num_uint
        let tmp%22#0: uint64 = ((gtxns LocalNumByteSlice) txn#0)
        let tmp%23#0: bool = (!= tmp%22#0 0u)
        (assert tmp%23#0) // local_num_bytes
        let tmp%24#0: uint64 = ((gtxns ExtraProgramPages) txn#0)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // extra_program_pages
        let tmp%26#0: bytes = ((gtxns LastLog) txn#0)
        let tmp%27#0: uint64 = (len tmp%26#0)
        let tmp%28#0: bool = (!= tmp%27#0 0u)
        (assert tmp%28#0) // last_log
        let tmp%29#0: uint64 = ((gtxns NumApprovalProgramPages) txn#0)
        let tmp%30#0: bool = (!= tmp%29#0 0u)
        (assert tmp%30#0) // num_approval_program_pages
        let tmp%31#0: uint64 = ((gtxns NumClearStateProgramPages) txn#0)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // num_clear_state_program_pages
        let tmp%33#0: bytes = ((gtxnsas ApplicationArgs) txn#0 0u)
        let tmp%34#0: uint64 = (len tmp%33#0)
        let tmp%35#0: bool = (!= tmp%34#0 0u)
        (assert tmp%35#0) // app_args(0)
        let tmp%36#0: bytes[32] = ((gtxnsas Accounts) txn#0 0u)
        let tmp%37#0: bytes[32] = (global ZeroAddress)
        let tmp%38#0: bool = (!= tmp%36#0 tmp%37#0)
        (assert tmp%38#0) // accounts(0)
        let reinterpret_bool%1#0: bool = ((gtxnsas Assets) txn#0 0u)
        (assert reinterpret_bool%1#0) // assets(0)
        let reinterpret_bool%2#0: bool = ((gtxnsas Applications) txn#0 0u)
        (assert reinterpret_bool%2#0) // apps(0)
        let tmp%39#0: bytes = ((gtxnsas ApprovalProgramPages) txn#0 0u)
        let tmp%40#0: uint64 = (len tmp%39#0)
        let tmp%41#0: bool = (!= tmp%40#0 0u)
        (assert tmp%41#0) // approval_program_pages(0)
        let tmp%42#0: bytes = ((gtxnsas ClearStateProgramPages) txn#0 0u)
        let tmp%43#0: uint64 = (len tmp%42#0)
        let tmp%44#0: bool = (!= tmp%43#0 0u)
        (assert tmp%44#0) // clear_state_program_pages(0)
        return 

subroutine test_cases.transaction.contract.TransactionContract.multiple_txns(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
    block@0: // L111
        let loop_counter%0#0: uint64 = 0u
        let app#0: uint64 = txn1#0
        let index#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L119
        let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3, index#3 <- block@4)
        let app#1: uint64 = φ(app#0 <- block@0, app#2 <- block@3, app#3 <- block@4)
        let tmp%0#0: uint64 = ((gtxns GroupIndex) app#1)
        let tmp%1#0: bool = (== tmp%0#0 index#1)
        (assert tmp%1#0)
        goto block@2
    block@2: // for_footer_L118
        goto_nth [block@3, block@4][index#1] else goto block@5
    block@3: // for_header_1_L118
        let loop_counter%0#1: uint64 = 1u
        let app#2: uint64 = txn2#0
        let index#2: uint64 = 1u
        goto block@1
    block@4: // for_header_2_L118
        let loop_counter%0#2: uint64 = 2u
        let app#3: uint64 = txn3#0
        let index#3: uint64 = 2u
        goto block@1
    block@5: // after_for_L118
        return 

subroutine test_cases.transaction.contract.TransactionContract.any_txn(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
    block@0: // L121
        let loop_counter%0#0: uint64 = 0u
        let txn#0: uint64 = txn1#0
        let index#0: uint64 = 0u
        goto block@1
    block@1: // for_body_L129
        let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3, index#3 <- block@4)
        let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3, txn#3 <- block@4)
        let tmp%0#0: uint64 = ((gtxns GroupIndex) txn#1)
        let tmp%1#0: bool = (== tmp%0#0 index#1)
        (assert tmp%1#0)
        goto block@2
    block@2: // for_footer_L128
        goto_nth [block@3, block@4][index#1] else goto block@5
    block@3: // for_header_1_L128
        let loop_counter%0#1: uint64 = 1u
        let txn#2: uint64 = txn2#0
        let index#2: uint64 = 1u
        goto block@1
    block@4: // for_header_2_L128
        let loop_counter%0#2: uint64 = 2u
        let txn#3: uint64 = txn3#0
        let index#3: uint64 = 2u
        goto block@1
    block@5: // after_for_L128
        return 

subroutine test_cases.transaction.contract.TransactionContract.group_init(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
    block@0: // L131
        let loop_counter%0#0: uint64 = 0u
        let txn#0: uint64 = txn1#0
        goto block@1
    block@1: // for_body_L139
        let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4)
        let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3, txn#3 <- block@4)
        let gtxn_idx%0#0: uint64 = ((gtxns GroupIndex) txn#1)
        let txn_from_index#0: uint64 = gtxn_idx%0#0
        let tmp%0#0: bytes = ((gtxns TxID) txn#1)
        let tmp%1#0: bytes = ((gtxns TxID) txn_from_index#0)
        let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
        (assert tmp%2#0)
        goto block@2
    block@2: // for_footer_L138
        goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5
    block@3: // for_header_1_L138
        let loop_counter%0#2: uint64 = 1u
        let txn#2: uint64 = txn2#0
        goto block@1
    block@4: // for_header_2_L138
        let loop_counter%0#3: uint64 = 2u
        let txn#3: uint64 = txn3#0
        goto block@1
    block@5: // after_for_L138
        let tmp%3#0: bytes = ((gtxns TxID) txn1#0)
        let tmp%4#0: bytes = ((gtxns TxID) 0u)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0)
        return 