#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 3
    // transaction/contract.py:11
    // class TransactionContract(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz main_create_NoOp@16
    pushbytess 0x6b680318 0x16c4a32d 0x639872d6 0x50f8f1c3 0x5b3a00cf 0xcd62293d 0x02ea72e5 0x3056840b 0x96ef9a95 // method "pay(pay)void", method "key(keyreg)void", method "asset_config(acfg)void", method "asset_transfer(axfer)void", method "asset_freeze(afrz)void", method "application_call(appl)void", method "multiple_txns(appl,appl,appl)void", method "any_txn(txn,txn,txn)void", method "group_init(txn,txn,txn)void"
    txna ApplicationArgs 0
    match pay key asset_config asset_transfer asset_freeze application_call multiple_txns any_txn group_init
    err

main_create_NoOp@16:
    // transaction/contract.py:11
    // class TransactionContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x4c5c61ba // method "create()void"
    ==
    assert
    // transaction/contract.py:12
    // @arc4.abimethod(create="require")
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.pay[routing]() -> void:
pay:
    // transaction/contract.py:31
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // transaction/contract.py:33
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:35
    // txn.receiver == op.Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // transaction/contract.py:34-36
    // assert (
    //     txn.receiver == op.Global.current_application_address
    // ), "Payment should be for this app"
    assert // Payment should be for this app
    // transaction/contract.py:37
    // assert txn.amount > 1000, "Payment should be for >1000 micro algos"
    dup
    gtxns Amount
    pushint 1000 // 1000
    >
    assert // Payment should be for >1000 micro algos
    // transaction/contract.py:38
    // assert txn.close_remainder_to == op.Global.zero_address, "close_remainder_to"
    gtxns CloseRemainderTo
    global ZeroAddress
    ==
    assert // close_remainder_to
    // transaction/contract.py:31
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.key[routing]() -> void:
key:
    // transaction/contract.py:40
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // keyreg
    ==
    assert // transaction type is keyreg
    // transaction/contract.py:42
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:45
    // assert txn.vote_key_dilution, "vote_key_dilution"
    dup
    gtxns VoteKeyDilution
    assert // vote_key_dilution
    // transaction/contract.py:46
    // assert txn.vote_first, "vote_first"
    dup
    gtxns VoteFirst
    assert // vote_first
    // transaction/contract.py:47
    // assert txn.vote_last, "vote_last"
    dup
    gtxns VoteLast
    assert // vote_last
    // transaction/contract.py:48
    // assert txn.non_participation, "non_participation"
    dup
    gtxns Nonparticipation
    assert // non_participation
    // transaction/contract.py:49
    // assert txn.state_proof_key, "state_proof_key"
    gtxns StateProofPK
    len
    assert // state_proof_key
    // transaction/contract.py:40
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.asset_config[routing]() -> void:
asset_config:
    // transaction/contract.py:51
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // acfg
    ==
    assert // transaction type is acfg
    // transaction/contract.py:53
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:55
    // assert txn.config_asset, "config_asset"
    dup
    gtxns ConfigAsset
    assert // config_asset
    // transaction/contract.py:56
    // assert txn.total, "total"
    dup
    gtxns ConfigAssetTotal
    assert // total
    // transaction/contract.py:57
    // assert txn.decimals, "decimals"
    dup
    gtxns ConfigAssetDecimals
    assert // decimals
    // transaction/contract.py:58
    // assert txn.default_frozen, "default_frozen"
    dup
    gtxns ConfigAssetDefaultFrozen
    assert // default_frozen
    // transaction/contract.py:59
    // assert txn.unit_name, "unit_name"
    dup
    gtxns ConfigAssetUnitName
    len
    assert // unit_name
    // transaction/contract.py:60
    // assert txn.asset_name, "asset_name"
    dup
    gtxns ConfigAssetName
    len
    assert // asset_name
    // transaction/contract.py:61
    // assert txn.url, "url"
    dup
    gtxns ConfigAssetURL
    len
    assert // url
    // transaction/contract.py:63
    // assert txn.manager, "manager"
    dup
    gtxns ConfigAssetManager
    global ZeroAddress
    !=
    assert // manager
    // transaction/contract.py:64
    // assert txn.reserve, "reserve"
    dup
    gtxns ConfigAssetReserve
    global ZeroAddress
    !=
    assert // reserve
    // transaction/contract.py:65
    // assert txn.freeze, "freeze"
    dup
    gtxns ConfigAssetFreeze
    global ZeroAddress
    !=
    assert // freeze
    // transaction/contract.py:66
    // assert txn.clawback, "clawback"
    gtxns ConfigAssetClawback
    global ZeroAddress
    !=
    assert // clawback
    // transaction/contract.py:51
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.asset_transfer[routing]() -> void:
asset_transfer:
    // transaction/contract.py:68
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    // transaction/contract.py:70
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:71
    // assert txn.xfer_asset, "xfer_asset"
    dup
    gtxns XferAsset
    assert // xfer_asset
    // transaction/contract.py:72
    // assert txn.asset_amount, "asset_amount"
    dup
    gtxns AssetAmount
    assert // asset_amount
    // transaction/contract.py:73
    // assert txn.asset_sender, "asset_sender"
    dup
    gtxns AssetSender
    global ZeroAddress
    !=
    assert // asset_sender
    // transaction/contract.py:74
    // assert txn.asset_receiver, "asset_receiver"
    dup
    gtxns AssetReceiver
    global ZeroAddress
    !=
    assert // asset_receiver
    // transaction/contract.py:75
    // assert txn.asset_close_to, "asset_close_to"
    gtxns AssetCloseTo
    global ZeroAddress
    !=
    assert // asset_close_to
    // transaction/contract.py:68
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.asset_freeze[routing]() -> void:
asset_freeze:
    // transaction/contract.py:77
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 5 // afrz
    ==
    assert // transaction type is afrz
    // transaction/contract.py:79
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:81
    // assert txn.freeze_asset, "freeze_asset"
    dup
    gtxns FreezeAsset
    assert // freeze_asset
    // transaction/contract.py:82
    // assert txn.freeze_account, "freeze_account"
    dup
    gtxns FreezeAssetAccount
    global ZeroAddress
    !=
    assert // freeze_account
    // transaction/contract.py:83
    // assert txn.frozen, "frozen"
    gtxns FreezeAssetFrozen
    assert // frozen
    // transaction/contract.py:77
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.application_call[routing]() -> void:
application_call:
    // transaction/contract.py:85
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    // transaction/contract.py:87
    // self._common_checks(txn)
    dup
    callsub _common_checks
    // transaction/contract.py:88
    // assert txn.app_id, "app_id"
    dup
    gtxns ApplicationID
    assert // app_id
    // transaction/contract.py:89
    // assert txn.on_completion, "on_completion"
    dup
    gtxns OnCompletion
    assert // on_completion
    // transaction/contract.py:90
    // assert txn.num_app_args, "num_app_args"
    dup
    gtxns NumAppArgs
    assert // num_app_args
    // transaction/contract.py:91
    // assert txn.num_accounts, "num_accounts"
    dup
    gtxns NumAccounts
    assert // num_accounts
    // transaction/contract.py:92
    // assert txn.approval_program, "approval_program"
    dup
    gtxns ApprovalProgram
    len
    assert // approval_program
    // transaction/contract.py:93
    // assert txn.clear_state_program, "clear_state_program"
    dup
    gtxns ClearStateProgram
    len
    assert // clear_state_program
    // transaction/contract.py:94
    // assert txn.num_assets, "num_assets"
    dup
    gtxns NumAssets
    assert // num_assets
    // transaction/contract.py:95
    // assert txn.num_apps, "num_apps"
    dup
    gtxns NumApplications
    assert // num_apps
    // transaction/contract.py:96
    // assert txn.global_num_uint, "global_num_uint"
    dup
    gtxns GlobalNumUint
    assert // global_num_uint
    // transaction/contract.py:97
    // assert txn.global_num_bytes, "global_num_bytes"
    dup
    gtxns GlobalNumByteSlice
    assert // global_num_bytes
    // transaction/contract.py:98
    // assert txn.local_num_uint, "local_num_uint"
    dup
    gtxns LocalNumUint
    assert // local_num_uint
    // transaction/contract.py:99
    // assert txn.local_num_bytes, "local_num_bytes"
    dup
    gtxns LocalNumByteSlice
    assert // local_num_bytes
    // transaction/contract.py:100
    // assert txn.extra_program_pages, "extra_program_pages"
    dup
    gtxns ExtraProgramPages
    assert // extra_program_pages
    // transaction/contract.py:101
    // assert txn.last_log, "last_log"
    dup
    gtxns LastLog
    len
    assert // last_log
    // transaction/contract.py:102
    // assert txn.num_approval_program_pages, "num_approval_program_pages"
    dup
    gtxns NumApprovalProgramPages
    assert // num_approval_program_pages
    // transaction/contract.py:103
    // assert txn.num_clear_state_program_pages, "num_clear_state_program_pages"
    dup
    gtxns NumClearStateProgramPages
    assert // num_clear_state_program_pages
    // transaction/contract.py:104
    // assert txn.app_args(0), "app_args(0)"
    dup
    intc_1 // 0
    gtxnsas ApplicationArgs
    len
    assert // app_args(0)
    // transaction/contract.py:105
    // assert txn.accounts(0), "accounts(0)"
    dup
    intc_1 // 0
    gtxnsas Accounts
    global ZeroAddress
    !=
    assert // accounts(0)
    // transaction/contract.py:106
    // assert txn.assets(0), "assets(0)"
    dup
    intc_1 // 0
    gtxnsas Assets
    assert // assets(0)
    // transaction/contract.py:107
    // assert txn.apps(0), "apps(0)"
    dup
    intc_1 // 0
    gtxnsas Applications
    assert // apps(0)
    // transaction/contract.py:108
    // assert txn.approval_program_pages(0), "approval_program_pages(0)"
    dup
    intc_1 // 0
    gtxnsas ApprovalProgramPages
    len
    assert // approval_program_pages(0)
    // transaction/contract.py:109
    // assert txn.clear_state_program_pages(0), "clear_state_program_pages(0)"
    intc_1 // 0
    gtxnsas ClearStateProgramPages
    len
    assert // clear_state_program_pages(0)
    // transaction/contract.py:85
    // @arc4.abimethod
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract.multiple_txns[routing]() -> void:
multiple_txns:
    // transaction/contract.py:111
    // @arc4.abimethod
    txn GroupIndex
    intc_3 // 3
    -
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    intc_2 // 2
    -
    dup
    cover 2
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    intc_0 // 1
    -
    dup
    cover 2
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    intc_1 // 0

multiple_txns_for_body@2:
    // transaction/contract.py:119
    // assert app.group_index == index
    swap
    gtxns GroupIndex
    dig 1
    ==
    assert
    // transaction/contract.py:118
    // for index, app in uenumerate((txn1, txn2, txn3)):
    switch multiple_txns_for_header_1@4 multiple_txns_for_header_2@5
    // transaction/contract.py:111
    // @arc4.abimethod
    intc_0 // 1
    return

multiple_txns_for_header_2@5:
    dup
    intc_2 // 2
    b multiple_txns_for_body@2

multiple_txns_for_header_1@4:
    dig 1
    intc_0 // 1
    b multiple_txns_for_body@2


// test_cases.transaction.contract.TransactionContract.any_txn[routing]() -> void:
any_txn:
    // transaction/contract.py:121
    // @arc4.abimethod
    txn GroupIndex
    intc_3 // 3
    -
    txn GroupIndex
    intc_2 // 2
    -
    swap
    txn GroupIndex
    intc_0 // 1
    -
    swap
    intc_1 // 0

any_txn_for_body@2:
    // transaction/contract.py:129
    // assert txn.group_index == index
    swap
    gtxns GroupIndex
    dig 1
    ==
    assert
    // transaction/contract.py:128
    // for index, txn in uenumerate((txn1, txn2, txn3)):
    switch any_txn_for_header_1@4 any_txn_for_header_2@5
    // transaction/contract.py:121
    // @arc4.abimethod
    intc_0 // 1
    return

any_txn_for_header_2@5:
    dup
    intc_2 // 2
    b any_txn_for_body@2

any_txn_for_header_1@4:
    dig 1
    intc_0 // 1
    b any_txn_for_body@2


// test_cases.transaction.contract.TransactionContract.group_init[routing]() -> void:
group_init:
    // transaction/contract.py:131
    // @arc4.abimethod
    txn GroupIndex
    intc_3 // 3
    -
    dup
    txn GroupIndex
    intc_2 // 2
    -
    swap
    txn GroupIndex
    intc_0 // 1
    -
    swap
    intc_1 // 0

group_init_for_body@2:
    // transaction/contract.py:139
    // txn_from_index = gtxn.Transaction(txn.group_index)
    swap
    dup
    gtxns GroupIndex
    // transaction/contract.py:140
    // assert txn.txn_id == txn_from_index.txn_id
    swap
    gtxns TxID
    swap
    gtxns TxID
    ==
    assert
    // transaction/contract.py:138
    // for txn in (txn1, txn2, txn3):
    switch group_init_for_header_1@4 group_init_for_header_2@5
    // transaction/contract.py:141
    // assert txn1.txn_id == gtxn.Transaction(0).txn_id
    dig 2
    gtxns TxID
    intc_1 // 0
    gtxns TxID
    ==
    assert
    // transaction/contract.py:131
    // @arc4.abimethod
    intc_0 // 1
    return

group_init_for_header_2@5:
    dup
    intc_2 // 2
    b group_init_for_body@2

group_init_for_header_1@4:
    dig 1
    intc_0 // 1
    b group_init_for_body@2


// test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
_common_checks:
    // transaction/contract.py:16-17
    // @subroutine
    // def _common_checks(self, txn: gtxn.TransactionBase) -> None:
    proto 1 0
    // transaction/contract.py:19
    // assert txn.sender == op.Global.creator_address, "sender"
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    assert // sender
    // transaction/contract.py:20
    // assert txn.fee, "fee"
    frame_dig -1
    gtxns Fee
    assert // fee
    // transaction/contract.py:21
    // assert txn.type, "type"
    frame_dig -1
    gtxns TypeEnum
    assert // type
    // transaction/contract.py:22
    // assert txn.type_bytes, "type_bytes"
    frame_dig -1
    gtxns Type
    len
    assert // type_bytes
    // transaction/contract.py:23
    // assert txn.note == Bytes(b""), "note"
    frame_dig -1
    gtxns Note
    pushbytes 0x
    ==
    assert // note
    // transaction/contract.py:24
    // assert txn.group_index == 0, "group_index"
    frame_dig -1
    gtxns GroupIndex
    !
    assert // group_index
    // transaction/contract.py:25
    // assert txn.first_valid, "first_valid"
    frame_dig -1
    gtxns FirstValid
    assert // first_valid
    // transaction/contract.py:26-27
    // # assert txn.first_valid_time, "first_valid_time" # this value can be flaky in tests
    // assert txn.last_valid, "last_valid"
    frame_dig -1
    gtxns LastValid
    assert // last_valid
    // transaction/contract.py:29
    // assert txn.rekey_to == op.Global.zero_address, "rekey_to"
    frame_dig -1
    gtxns RekeyTo
    global ZeroAddress
    ==
    assert // rekey_to
    retsub
