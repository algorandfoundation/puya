{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AAUA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACK;AAAA;AAmBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;AAAA;;;AAEI;AAAA;;AAAgB;;AAAhB;AADJ;AAGO;AAAA;;AAAa;;;AAAb;AAAP;AACO;;AAA0B;;AAA1B;AAPV;AASA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;AAAA;;;AAGO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;;AAAA;AATV;AAWA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEG;AAAA;;;AAEO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;AAAP;AAEO;AAAA;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAfV;AAiBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEG;AAAA;;;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAPV;AASA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEG;AAAA;;;AAEO;AAAA;;AAAP;AACO;AAAA;;AAAA;;AAAA;AAAP;AACO;;AANV;AAQA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEG;AAAA;;;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAA;AAAP;AACO;AAAA;;AAAP;AACO;AAAA;;AAAP;AACO;AAAa;AAAb;;AAAA;AAAP;AACO;AAAa;AAAb;;AAAA;;AAAA;AAAP;AACO;AAAW;AAAX;;AAAP;AACO;AAAS;AAAT;;AAAP;AACO;AAA2B;AAA3B;;AAAA;AAAP;AACqC;AAA9B;;AAAA;AAxBV;AA0BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAQc;AAAA;;AAAA;;AAAA;AAAP;AADZ;;;;;;AAPK;AAAA;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQc;AAAA;;AAAA;;AAAA;AAAP;AADZ;;;;;;AAPK;AAAA;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQyC;AAAA;AAAA;;AAC3B;AAAA;;AAAc;AAAA;;AAAd;AAAP;AAFZ;;;;;;AAGe;;AAAA;;AAAe;AAAA;;AAAf;AAVV;;;;;;;;;;;;AAnHL;;;AAGe;;AAAA;;AAAc;;AAAd;AAAP;AACO;;AAAA;;AAAP;AACO;;AAAA;;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAY;;AAAZ;AAAP;AACO;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAP;AAEO;;AAAA;;AAAP;AAEO;;AAAA;;AAAgB;;AAAhB;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 3"
    },
    "7": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "10": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "11": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "13": {
      "op": "bz main_create_NoOp@14",
      "stack_out": []
    },
    "16": {
      "op": "pushbytess 0x6b680318 0x16c4a32d 0x639872d6 0x50f8f1c3 0x5b3a00cf 0xcd62293d 0x02ea72e5 0x3056840b 0x96ef9a95 // method \"pay(pay)void\", method \"key(keyreg)void\", method \"asset_config(acfg)void\", method \"asset_transfer(axfer)void\", method \"asset_freeze(afrz)void\", method \"application_call(appl)void\", method \"multiple_txns(appl,appl,appl)void\", method \"any_txn(txn,txn,txn)void\", method \"group_init(txn,txn,txn)void\"",
      "defined_out": [
        "Method(any_txn(txn,txn,txn)void)",
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(group_init(txn,txn,txn)void)",
        "Method(key(keyreg)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(pay(pay)void)"
      ],
      "stack_out": [
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(any_txn(txn,txn,txn)void)",
        "Method(group_init(txn,txn,txn)void)"
      ]
    },
    "63": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(any_txn(txn,txn,txn)void)",
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(group_init(txn,txn,txn)void)",
        "Method(key(keyreg)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(pay(pay)void)",
        "tmp%3#0"
      ],
      "stack_out": [
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(any_txn(txn,txn,txn)void)",
        "Method(group_init(txn,txn,txn)void)",
        "tmp%3#0"
      ]
    },
    "66": {
      "op": "match pay key asset_config asset_transfer asset_freeze application_call multiple_txns any_txn group_init",
      "stack_out": []
    },
    "86": {
      "op": "err"
    },
    "87": {
      "block": "main_create_NoOp@14",
      "stack_in": [],
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)"
      ],
      "stack_out": [
        "Method(create()void)"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create()void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(create()void)",
        "tmp%4#0"
      ]
    },
    "96": {
      "op": "match main_create_route@15",
      "stack_out": []
    },
    "100": {
      "op": "err"
    },
    "101": {
      "block": "main_create_route@15",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "102": {
      "op": "return",
      "stack_out": []
    },
    "103": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.pay[routing]",
      "params": {},
      "block": "pay",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "106": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "107": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "108": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "110": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "112": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "txn#0"
      ]
    },
    "113": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "114": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "117": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "118": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#1",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "122": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0"
      ]
    },
    "123": {
      "error": "Payment should be for this app",
      "op": "assert // Payment should be for this app",
      "stack_out": [
        "txn#0"
      ]
    },
    "124": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "125": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%3#0"
      ]
    },
    "127": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "tmp%3#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%3#0",
        "1000"
      ]
    },
    "130": {
      "op": ">",
      "defined_out": [
        "tmp%4#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0"
      ]
    },
    "131": {
      "error": "Payment should be for >1000 micro algos",
      "op": "assert // Payment should be for >1000 micro algos",
      "stack_out": [
        "txn#0"
      ]
    },
    "132": {
      "op": "gtxns CloseRemainderTo",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "134": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "136": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "137": {
      "error": "close_remainder_to",
      "op": "return // on error: close_remainder_to",
      "stack_out": []
    },
    "138": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.key[routing]",
      "params": {},
      "block": "key",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "141": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "142": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "143": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "145": {
      "op": "intc_2 // keyreg",
      "defined_out": [
        "gtxn_type%0#0",
        "keyreg",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "keyreg"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "147": {
      "error": "transaction type is keyreg",
      "op": "assert // transaction type is keyreg",
      "stack_out": [
        "txn#0"
      ]
    },
    "148": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "149": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "152": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "153": {
      "op": "gtxns VoteKeyDilution",
      "defined_out": [
        "tmp%6#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%6#0"
      ]
    },
    "155": {
      "error": "vote_key_dilution",
      "op": "assert // vote_key_dilution",
      "stack_out": [
        "txn#0"
      ]
    },
    "156": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "157": {
      "op": "gtxns VoteFirst",
      "defined_out": [
        "tmp%8#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%8#0"
      ]
    },
    "159": {
      "error": "vote_first",
      "op": "assert // vote_first",
      "stack_out": [
        "txn#0"
      ]
    },
    "160": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "161": {
      "op": "gtxns VoteLast",
      "defined_out": [
        "tmp%10#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%10#0"
      ]
    },
    "163": {
      "error": "vote_last",
      "op": "assert // vote_last",
      "stack_out": [
        "txn#0"
      ]
    },
    "164": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "165": {
      "op": "gtxns Nonparticipation",
      "defined_out": [
        "tmp%12#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%12#0"
      ]
    },
    "167": {
      "error": "non_participation",
      "op": "assert // non_participation",
      "stack_out": [
        "txn#0"
      ]
    },
    "168": {
      "op": "gtxns StateProofPK",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "170": {
      "op": "len",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "171": {
      "error": "state_proof_key",
      "op": "return // on error: state_proof_key",
      "stack_out": []
    },
    "172": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_config[routing]",
      "params": {},
      "block": "asset_config",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "175": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "176": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "177": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "179": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "181": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "txn#0"
      ]
    },
    "182": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "183": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "186": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "187": {
      "op": "gtxns ConfigAsset",
      "stack_out": [
        "txn#0",
        "tmp%0#0"
      ]
    },
    "189": {
      "error": "config_asset",
      "op": "assert // config_asset",
      "stack_out": [
        "txn#0"
      ]
    },
    "190": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "191": {
      "op": "gtxns ConfigAssetTotal",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0"
      ]
    },
    "193": {
      "error": "total",
      "op": "assert // total",
      "stack_out": [
        "txn#0"
      ]
    },
    "194": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "195": {
      "op": "gtxns ConfigAssetDecimals",
      "defined_out": [
        "tmp%4#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0"
      ]
    },
    "197": {
      "error": "decimals",
      "op": "assert // decimals",
      "stack_out": [
        "txn#0"
      ]
    },
    "198": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "199": {
      "op": "gtxns ConfigAssetDefaultFrozen",
      "defined_out": [
        "tmp%6#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%6#0"
      ]
    },
    "201": {
      "error": "default_frozen",
      "op": "assert // default_frozen",
      "stack_out": [
        "txn#0"
      ]
    },
    "202": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "203": {
      "op": "gtxns ConfigAssetUnitName",
      "defined_out": [
        "tmp%7#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%7#0"
      ]
    },
    "205": {
      "op": "len",
      "defined_out": [
        "tmp%8#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%8#0"
      ]
    },
    "206": {
      "error": "unit_name",
      "op": "assert // unit_name",
      "stack_out": [
        "txn#0"
      ]
    },
    "207": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "208": {
      "op": "gtxns ConfigAssetName",
      "defined_out": [
        "tmp%10#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%10#0"
      ]
    },
    "210": {
      "op": "len",
      "defined_out": [
        "tmp%11#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%11#0"
      ]
    },
    "211": {
      "error": "asset_name",
      "op": "assert // asset_name",
      "stack_out": [
        "txn#0"
      ]
    },
    "212": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "213": {
      "op": "gtxns ConfigAssetURL",
      "defined_out": [
        "tmp%13#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%13#0"
      ]
    },
    "215": {
      "op": "len",
      "defined_out": [
        "tmp%14#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%14#0"
      ]
    },
    "216": {
      "error": "url",
      "op": "assert // url",
      "stack_out": [
        "txn#0"
      ]
    },
    "217": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "218": {
      "op": "gtxns ConfigAssetManager",
      "defined_out": [
        "tmp%19#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%19#0"
      ]
    },
    "220": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "222": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%21#0"
      ]
    },
    "223": {
      "error": "manager",
      "op": "assert // manager",
      "stack_out": [
        "txn#0"
      ]
    },
    "224": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "225": {
      "op": "gtxns ConfigAssetReserve",
      "defined_out": [
        "tmp%22#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%22#0"
      ]
    },
    "227": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "229": {
      "op": "!=",
      "defined_out": [
        "tmp%24#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%24#0"
      ]
    },
    "230": {
      "error": "reserve",
      "op": "assert // reserve",
      "stack_out": [
        "txn#0"
      ]
    },
    "231": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "232": {
      "op": "gtxns ConfigAssetFreeze",
      "defined_out": [
        "tmp%25#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%25#0"
      ]
    },
    "234": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "236": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%27#0"
      ]
    },
    "237": {
      "error": "freeze",
      "op": "assert // freeze",
      "stack_out": [
        "txn#0"
      ]
    },
    "238": {
      "op": "gtxns ConfigAssetClawback",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "240": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "242": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "243": {
      "error": "clawback",
      "op": "return // on error: clawback",
      "stack_out": []
    },
    "244": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_transfer[routing]",
      "params": {},
      "block": "asset_transfer",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "247": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "248": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "249": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "251": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "254": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "txn#0"
      ]
    },
    "255": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "256": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "259": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "260": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "txn#0",
        "tmp%0#0"
      ]
    },
    "262": {
      "error": "xfer_asset",
      "op": "assert // xfer_asset",
      "stack_out": [
        "txn#0"
      ]
    },
    "263": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "264": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0"
      ]
    },
    "266": {
      "error": "asset_amount",
      "op": "assert // asset_amount",
      "stack_out": [
        "txn#0"
      ]
    },
    "267": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "268": {
      "op": "gtxns AssetSender",
      "defined_out": [
        "tmp%4#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0"
      ]
    },
    "270": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "272": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%6#0"
      ]
    },
    "273": {
      "error": "asset_sender",
      "op": "assert // asset_sender",
      "stack_out": [
        "txn#0"
      ]
    },
    "274": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "275": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%7#0"
      ]
    },
    "277": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "279": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%9#0"
      ]
    },
    "280": {
      "error": "asset_receiver",
      "op": "assert // asset_receiver",
      "stack_out": [
        "txn#0"
      ]
    },
    "281": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "283": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "285": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "286": {
      "error": "asset_close_to",
      "op": "return // on error: asset_close_to",
      "stack_out": []
    },
    "287": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_freeze[routing]",
      "params": {},
      "block": "asset_freeze",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "290": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "291": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "292": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "294": {
      "op": "pushint 5 // afrz",
      "defined_out": [
        "afrz",
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "afrz"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "297": {
      "error": "transaction type is afrz",
      "op": "assert // transaction type is afrz",
      "stack_out": [
        "txn#0"
      ]
    },
    "298": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "299": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "302": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "303": {
      "op": "gtxns FreezeAsset",
      "stack_out": [
        "txn#0",
        "tmp%0#0"
      ]
    },
    "305": {
      "error": "freeze_asset",
      "op": "assert // freeze_asset",
      "stack_out": [
        "txn#0"
      ]
    },
    "306": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "307": {
      "op": "gtxns FreezeAssetAccount",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0"
      ]
    },
    "309": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "311": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0"
      ]
    },
    "312": {
      "error": "freeze_account",
      "op": "assert // freeze_account",
      "stack_out": [
        "txn#0"
      ]
    },
    "313": {
      "op": "gtxns FreezeAssetFrozen",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "315": {
      "error": "frozen",
      "op": "return // on error: frozen",
      "stack_out": []
    },
    "316": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.application_call[routing]",
      "params": {},
      "block": "application_call",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "318": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "319": {
      "op": "-",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0"
      ]
    },
    "320": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "321": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0"
      ]
    },
    "323": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_type%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "326": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "txn#0"
      ]
    },
    "327": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "328": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": [
        "txn#0"
      ]
    },
    "331": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "332": {
      "op": "gtxns ApplicationID",
      "stack_out": [
        "txn#0",
        "tmp%0#0"
      ]
    },
    "334": {
      "error": "app_id",
      "op": "assert // app_id",
      "stack_out": [
        "txn#0"
      ]
    },
    "335": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "336": {
      "op": "gtxns OnCompletion",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%2#0"
      ]
    },
    "338": {
      "error": "on_completion",
      "op": "assert // on_completion",
      "stack_out": [
        "txn#0"
      ]
    },
    "339": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "340": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "tmp%4#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%4#0"
      ]
    },
    "342": {
      "error": "num_app_args",
      "op": "assert // num_app_args",
      "stack_out": [
        "txn#0"
      ]
    },
    "343": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "344": {
      "op": "gtxns NumAccounts",
      "defined_out": [
        "tmp%6#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%6#0"
      ]
    },
    "346": {
      "error": "num_accounts",
      "op": "assert // num_accounts",
      "stack_out": [
        "txn#0"
      ]
    },
    "347": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "348": {
      "op": "gtxns ApprovalProgram",
      "defined_out": [
        "tmp%8#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%8#0"
      ]
    },
    "350": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%9#0"
      ]
    },
    "351": {
      "error": "approval_program",
      "op": "assert // approval_program",
      "stack_out": [
        "txn#0"
      ]
    },
    "352": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "353": {
      "op": "gtxns ClearStateProgram",
      "defined_out": [
        "tmp%11#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%11#0"
      ]
    },
    "355": {
      "op": "len",
      "defined_out": [
        "tmp%12#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%12#0"
      ]
    },
    "356": {
      "error": "clear_state_program",
      "op": "assert // clear_state_program",
      "stack_out": [
        "txn#0"
      ]
    },
    "357": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "358": {
      "op": "gtxns NumAssets",
      "defined_out": [
        "tmp%14#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%14#0"
      ]
    },
    "360": {
      "error": "num_assets",
      "op": "assert // num_assets",
      "stack_out": [
        "txn#0"
      ]
    },
    "361": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "362": {
      "op": "gtxns NumApplications",
      "defined_out": [
        "tmp%16#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%16#0"
      ]
    },
    "364": {
      "error": "num_apps",
      "op": "assert // num_apps",
      "stack_out": [
        "txn#0"
      ]
    },
    "365": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "366": {
      "op": "gtxns GlobalNumUint",
      "defined_out": [
        "tmp%18#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%18#0"
      ]
    },
    "368": {
      "error": "global_num_uint",
      "op": "assert // global_num_uint",
      "stack_out": [
        "txn#0"
      ]
    },
    "369": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "370": {
      "op": "gtxns GlobalNumByteSlice",
      "defined_out": [
        "tmp%20#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%20#0"
      ]
    },
    "372": {
      "error": "global_num_bytes",
      "op": "assert // global_num_bytes",
      "stack_out": [
        "txn#0"
      ]
    },
    "373": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "374": {
      "op": "gtxns LocalNumUint",
      "defined_out": [
        "tmp%22#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%22#0"
      ]
    },
    "376": {
      "error": "local_num_uint",
      "op": "assert // local_num_uint",
      "stack_out": [
        "txn#0"
      ]
    },
    "377": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "378": {
      "op": "gtxns LocalNumByteSlice",
      "defined_out": [
        "tmp%24#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%24#0"
      ]
    },
    "380": {
      "error": "local_num_bytes",
      "op": "assert // local_num_bytes",
      "stack_out": [
        "txn#0"
      ]
    },
    "381": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "382": {
      "op": "gtxns ExtraProgramPages",
      "defined_out": [
        "tmp%26#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%26#0"
      ]
    },
    "384": {
      "error": "extra_program_pages",
      "op": "assert // extra_program_pages",
      "stack_out": [
        "txn#0"
      ]
    },
    "385": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "386": {
      "op": "gtxns LastLog",
      "defined_out": [
        "tmp%28#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%28#0"
      ]
    },
    "388": {
      "op": "len",
      "defined_out": [
        "tmp%29#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%29#0"
      ]
    },
    "389": {
      "error": "last_log",
      "op": "assert // last_log",
      "stack_out": [
        "txn#0"
      ]
    },
    "390": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "391": {
      "op": "gtxns NumApprovalProgramPages",
      "defined_out": [
        "tmp%31#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%31#0"
      ]
    },
    "393": {
      "error": "num_approval_program_pages",
      "op": "assert // num_approval_program_pages",
      "stack_out": [
        "txn#0"
      ]
    },
    "394": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "395": {
      "op": "gtxns NumClearStateProgramPages",
      "defined_out": [
        "tmp%33#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%33#0"
      ]
    },
    "397": {
      "error": "num_clear_state_program_pages",
      "op": "assert // num_clear_state_program_pages",
      "stack_out": [
        "txn#0"
      ]
    },
    "398": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "399": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "txn#0 (copy)",
        "0"
      ]
    },
    "400": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%35#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%35#0"
      ]
    },
    "402": {
      "op": "len",
      "defined_out": [
        "tmp%36#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%36#0"
      ]
    },
    "403": {
      "error": "app_args(0)",
      "op": "assert // app_args(0)",
      "stack_out": [
        "txn#0"
      ]
    },
    "404": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "405": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)",
        "0"
      ]
    },
    "406": {
      "op": "gtxnsas Accounts",
      "defined_out": [
        "tmp%38#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%38#0"
      ]
    },
    "408": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "410": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%40#0"
      ]
    },
    "411": {
      "error": "accounts(0)",
      "op": "assert // accounts(0)",
      "stack_out": [
        "txn#0"
      ]
    },
    "412": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "413": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)",
        "0"
      ]
    },
    "414": {
      "op": "gtxnsas Assets",
      "defined_out": [
        "tmp%41#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%41#0"
      ]
    },
    "416": {
      "error": "assets(0)",
      "op": "assert // assets(0)",
      "stack_out": [
        "txn#0"
      ]
    },
    "417": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "418": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)",
        "0"
      ]
    },
    "419": {
      "op": "gtxnsas Applications",
      "defined_out": [
        "tmp%43#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%43#0"
      ]
    },
    "421": {
      "error": "apps(0)",
      "op": "assert // apps(0)",
      "stack_out": [
        "txn#0"
      ]
    },
    "422": {
      "op": "dup",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "423": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn#0",
        "txn#0 (copy)",
        "0"
      ]
    },
    "424": {
      "op": "gtxnsas ApprovalProgramPages",
      "defined_out": [
        "tmp%45#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%45#0"
      ]
    },
    "426": {
      "op": "len",
      "defined_out": [
        "tmp%46#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "tmp%46#0"
      ]
    },
    "427": {
      "error": "approval_program_pages(0)",
      "op": "assert // approval_program_pages(0)",
      "stack_out": [
        "txn#0"
      ]
    },
    "428": {
      "op": "intc_1 // 0",
      "stack_out": [
        "txn#0",
        "0"
      ]
    },
    "429": {
      "op": "gtxnsas ClearStateProgramPages",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "431": {
      "op": "len",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "432": {
      "error": "clear_state_program_pages(0)",
      "op": "return // on error: clear_state_program_pages(0)",
      "stack_out": []
    },
    "433": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.multiple_txns[routing]",
      "params": {},
      "block": "multiple_txns",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "435": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "436": {
      "op": "-",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0"
      ]
    },
    "437": {
      "op": "dup",
      "defined_out": [
        "txn1#0",
        "txn1#0 (copy)"
      ],
      "stack_out": [
        "txn1#0",
        "txn1#0 (copy)"
      ]
    },
    "438": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "gtxn_type%0#0"
      ]
    },
    "440": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_type%0#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "442": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "443": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "txn1#0"
      ]
    },
    "444": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "tmp%1#0"
      ]
    },
    "446": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "tmp%1#0",
        "2"
      ]
    },
    "447": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0"
      ]
    },
    "448": {
      "op": "dup",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn2#0"
      ]
    },
    "449": {
      "op": "cover 2",
      "defined_out": [
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "txn2#0"
      ]
    },
    "451": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%1#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "gtxn_type%1#0"
      ]
    },
    "453": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "455": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%1#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "456": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "txn2#0",
        "txn1#0"
      ]
    },
    "457": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%2#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "tmp%2#0"
      ]
    },
    "459": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "460": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "txn3#0"
      ]
    },
    "461": {
      "op": "dup",
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "txn3#0",
        "txn3#0"
      ]
    },
    "462": {
      "op": "cover 2",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0",
        "txn3#0"
      ]
    },
    "464": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%2#0",
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0",
        "gtxn_type%2#0"
      ]
    },
    "466": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0",
        "gtxn_type%2#0",
        "appl"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%2#0",
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "469": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0"
      ]
    },
    "470": {
      "op": "intc_1 // 0",
      "defined_out": [
        "app#1",
        "index#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "app#1",
        "index#0"
      ]
    },
    "471": {
      "block": "multiple_txns_for_body@2",
      "stack_in": [
        "txn2#0",
        "txn3#0",
        "app#1",
        "index#0"
      ],
      "op": "swap",
      "defined_out": [
        "app#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "app#1"
      ]
    },
    "472": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "474": {
      "op": "dig 1",
      "defined_out": [
        "index#0",
        "index#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%0#0",
        "index#0 (copy)"
      ]
    },
    "476": {
      "op": "==",
      "defined_out": [
        "index#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%1#1"
      ]
    },
    "477": {
      "op": "assert",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0"
      ]
    },
    "478": {
      "op": "switch multiple_txns_for_header_1@4 multiple_txns_for_header_2@5",
      "stack_out": [
        "txn2#0",
        "txn3#0"
      ]
    },
    "484": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "1"
      ]
    },
    "485": {
      "op": "return",
      "stack_out": [
        "txn2#0",
        "txn3#0"
      ]
    },
    "486": {
      "block": "multiple_txns_for_header_2@5",
      "stack_in": [
        "txn2#0",
        "txn3#0"
      ],
      "op": "dup"
    },
    "487": {
      "op": "intc_2 // 2",
      "defined_out": [
        "app#1",
        "index#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "app#1",
        "index#0"
      ]
    },
    "488": {
      "op": "b multiple_txns_for_body@2"
    },
    "491": {
      "block": "multiple_txns_for_header_1@4",
      "stack_in": [
        "txn2#0",
        "txn3#0"
      ],
      "op": "dig 1"
    },
    "493": {
      "op": "intc_0 // 1",
      "defined_out": [
        "app#1",
        "index#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "app#1",
        "index#0"
      ]
    },
    "494": {
      "op": "b multiple_txns_for_body@2"
    },
    "497": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.any_txn[routing]",
      "params": {},
      "block": "any_txn",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "500": {
      "op": "-",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0"
      ]
    },
    "501": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "tmp%1#0"
      ]
    },
    "503": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "tmp%1#0",
        "2"
      ]
    },
    "504": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0"
      ]
    },
    "505": {
      "op": "swap",
      "defined_out": [
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0"
      ]
    },
    "506": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%2#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "tmp%2#0"
      ]
    },
    "508": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%2#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "509": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn1#0",
        "txn3#0"
      ]
    },
    "510": {
      "op": "swap",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn1#0"
      ]
    },
    "511": {
      "op": "intc_1 // 0",
      "defined_out": [
        "index#0",
        "txn#1",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn#1",
        "index#0"
      ]
    },
    "512": {
      "block": "any_txn_for_body@2",
      "stack_in": [
        "txn2#0",
        "txn3#0",
        "txn#1",
        "index#0"
      ],
      "op": "swap",
      "defined_out": [
        "txn#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "txn#1"
      ]
    },
    "513": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "dig 1",
      "defined_out": [
        "index#0",
        "index#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%0#0",
        "index#0 (copy)"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "index#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0",
        "tmp%1#1"
      ]
    },
    "518": {
      "op": "assert",
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "index#0"
      ]
    },
    "519": {
      "op": "switch any_txn_for_header_1@4 any_txn_for_header_2@5",
      "stack_out": [
        "txn2#0",
        "txn3#0"
      ]
    },
    "525": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "1"
      ]
    },
    "526": {
      "op": "return",
      "stack_out": [
        "txn2#0",
        "txn3#0"
      ]
    },
    "527": {
      "block": "any_txn_for_header_2@5",
      "stack_in": [
        "txn2#0",
        "txn3#0"
      ],
      "op": "dup"
    },
    "528": {
      "op": "intc_2 // 2",
      "defined_out": [
        "index#0",
        "txn#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn#1",
        "index#0"
      ]
    },
    "529": {
      "op": "b any_txn_for_body@2"
    },
    "532": {
      "block": "any_txn_for_header_1@4",
      "stack_in": [
        "txn2#0",
        "txn3#0"
      ],
      "op": "dig 1"
    },
    "534": {
      "op": "intc_0 // 1",
      "defined_out": [
        "index#0",
        "txn#1"
      ],
      "stack_out": [
        "txn2#0",
        "txn3#0",
        "txn#1",
        "index#0"
      ]
    },
    "535": {
      "op": "b any_txn_for_body@2"
    },
    "538": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.group_init[routing]",
      "params": {},
      "block": "group_init",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "540": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "541": {
      "op": "-",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0"
      ]
    },
    "542": {
      "op": "dup",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn1#0"
      ]
    },
    "543": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn1#0",
        "tmp%1#0"
      ]
    },
    "545": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn1#0",
        "tmp%1#0",
        "2"
      ]
    },
    "546": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn1#0",
        "txn2#0"
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn1#0"
      ]
    },
    "548": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%2#0",
        "txn1#0",
        "txn2#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn1#0",
        "tmp%2#0"
      ]
    },
    "550": {
      "op": "intc_0 // 1",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "551": {
      "op": "-",
      "defined_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn1#0",
        "txn3#0"
      ]
    },
    "552": {
      "op": "swap",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn1#0"
      ]
    },
    "553": {
      "op": "intc_1 // 0",
      "defined_out": [
        "loop_counter%0#0",
        "txn#1",
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn#1",
        "loop_counter%0#0"
      ]
    },
    "554": {
      "block": "group_init_for_body@2",
      "stack_in": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn#1",
        "loop_counter%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "txn#1"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "txn#1"
      ]
    },
    "555": {
      "op": "dup",
      "defined_out": [
        "txn#1",
        "txn#1 (copy)"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "txn#1",
        "txn#1 (copy)"
      ]
    },
    "556": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "txn#1",
        "txn_from_index#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "txn#1",
        "txn_from_index#0"
      ]
    },
    "558": {
      "op": "swap",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "txn_from_index#0",
        "txn#1"
      ]
    },
    "559": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%0#1",
        "txn_from_index#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "txn_from_index#0",
        "tmp%0#1"
      ]
    },
    "561": {
      "op": "swap",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "tmp%0#1",
        "txn_from_index#0"
      ]
    },
    "562": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "564": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0",
        "tmp%2#1"
      ]
    },
    "565": {
      "op": "assert",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "loop_counter%0#0"
      ]
    },
    "566": {
      "op": "switch group_init_for_header_1@4 group_init_for_header_2@5",
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ]
    },
    "572": {
      "op": "dig 2",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn1#0"
      ]
    },
    "574": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%3#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "tmp%3#0"
      ]
    },
    "576": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "tmp%3#0",
        "0"
      ]
    },
    "577": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%5#0",
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "tmp%5#0"
      ]
    },
    "580": {
      "op": "return",
      "defined_out": [
        "txn1#0"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ]
    },
    "581": {
      "block": "group_init_for_header_2@5",
      "stack_in": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "op": "dup"
    },
    "582": {
      "op": "intc_2 // 2",
      "defined_out": [
        "loop_counter%0#0",
        "txn#1"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn#1",
        "loop_counter%0#0"
      ]
    },
    "583": {
      "op": "b group_init_for_body@2"
    },
    "586": {
      "block": "group_init_for_header_1@4",
      "stack_in": [
        "txn1#0",
        "txn2#0",
        "txn3#0"
      ],
      "op": "dig 1"
    },
    "588": {
      "op": "intc_0 // 1",
      "defined_out": [
        "loop_counter%0#0",
        "txn#1"
      ],
      "stack_out": [
        "txn1#0",
        "txn2#0",
        "txn3#0",
        "txn#1",
        "loop_counter%0#0"
      ]
    },
    "589": {
      "op": "b group_init_for_body@2"
    },
    "592": {
      "subroutine": "test_cases.transaction.contract.TransactionContract._common_checks",
      "params": {
        "txn#0": "uint64"
      },
      "block": "_common_checks",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "595": {
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "597": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "599": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "601": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "602": {
      "error": "sender",
      "op": "assert // sender",
      "stack_out": []
    },
    "603": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "605": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "607": {
      "error": "fee",
      "op": "assert // fee",
      "stack_out": []
    },
    "608": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "610": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "612": {
      "error": "type",
      "op": "assert // type",
      "stack_out": []
    },
    "613": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "615": {
      "op": "gtxns Type",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "617": {
      "op": "len",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "618": {
      "error": "type_bytes",
      "op": "assert // type_bytes",
      "stack_out": []
    },
    "619": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "621": {
      "op": "gtxns Note",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "623": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "626": {
      "error": "note",
      "op": "assert // note",
      "stack_out": []
    },
    "627": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "629": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "631": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "632": {
      "error": "group_index",
      "op": "assert // group_index",
      "stack_out": []
    },
    "633": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "635": {
      "op": "gtxns FirstValid",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "637": {
      "error": "first_valid",
      "op": "assert // first_valid",
      "stack_out": []
    },
    "638": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "640": {
      "op": "gtxns LastValid",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "642": {
      "error": "last_valid",
      "op": "assert // last_valid",
      "stack_out": []
    },
    "643": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "645": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "647": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "649": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "650": {
      "error": "rekey_to",
      "op": "assert // rekey_to",
      "stack_out": []
    },
    "651": {
      "retsub": true,
      "op": "retsub"
    }
  }
}