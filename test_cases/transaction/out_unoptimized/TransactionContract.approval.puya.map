{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAUA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;;;;AAmBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AASA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAWA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAiBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AASA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAQA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AA0BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAUA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAUA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;;AAnHL;;;;;;AAEe;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAc;;AAAd;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAY;;AAAZ;AAAP;AACO;;AAAA;;AAAmB;AAAnB;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AAEO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAgB;;AAAhB;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AAEI;;AAAA;;AAAgB;;AAAhB;AADJ;AAGO;;AAAA;;AAAa;;;AAAb;AAAP;AACO;;AAAA;;AAA0B;;AAA1B;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AAEO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AAEO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAP;;AAER;;;;;;AAEQ;;AAAA;;;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAa;AAAb;;AAAA;AAAA;AAAA;AAAP;AACO;;AAAa;AAAb;;AAAA;;AAAA;AAAP;AACO;;AAAW;AAAX;;AAAA;AAAA;AAAP;AACO;;AAAS;AAAT;;AAAA;AAAA;AAAP;AACO;;AAA2B;AAA3B;;AAAA;AAAA;AAAA;AAAP;AACO;;AAA8B;AAA9B;;AAAA;AAAA;AAAA;AAAP;;AAER;;;;;;AAOY;;;;;;AACO;;AAAA;;AAAA;;AAAA;AAAP;;;;AADZ;;AAAA;;;;;;AAAA;;;;AAAY;;AAAA;;;AAAA;;;;;AAAA;;AAAA;;;AAAA;;;;;AAGZ;;;;;;AAOY;;;;;;AACO;;AAAA;;AAAA;;AAAA;AAAP;;;;AADZ;;AAAA;;;;;;AAAA;;;;AAAY;;AAAA;;;AAAA;;;;;AAAA;;AAAA;;;AAAA;;;;;AAGZ;;;;;;;AAOY;;;;;AACkC;;AAAA;AAAA;;AAC3B;;AAAA;;AAAA;;AAAc;;AAAd;AAAP;;;;AAFZ;;AAAA;;;;;;AAAA;;;AAGe;;AAAA;;AAAe;AAAA;;AAAf;AAAP;;;;;AAHI;;AAAA;;;;;;;;AAAA;;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 3"
    },
    "7": {
      "op": "b block@0"
    },
    "10": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "13": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "19": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "20": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "21": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "22": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "23": {
      "op": "intc_2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "24": {
      "op": "intc_3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "25": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "27": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "29": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "31": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "33": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "35": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "37": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "39": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "41": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "43": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "69": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "72": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "73": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "76": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "79": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "82": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "85": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "88": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "91": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "94": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "97": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "100": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "103": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "106": {
      "op": "pushbytes 0x4c5c61ba // method \"create()void\"",
      "defined_out": [
        "Method(create()void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create()void)"
      ]
    },
    "112": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create()void)",
        "tmp%6#0"
      ]
    },
    "114": {
      "op": "match create_route@15",
      "stack_out": []
    },
    "118": {
      "op": "b switch_case_default@16"
    },
    "121": {
      "block": "switch_case_default@16",
      "stack_in": [],
      "op": "b switch_case_next@17"
    },
    "124": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "switch_case_next@17",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "125": {
      "block": "create_route@15",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.create[routing]",
      "op": "callsub create"
    },
    "128": {
      "op": "b switch_case_next@17"
    },
    "131": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "134": {
      "op": "pushbytes 0x6b680318 // method \"pay(pay)void\"",
      "defined_out": [
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)"
      ]
    },
    "140": {
      "op": "pushbytes 0x16c4a32d // method \"key(keyreg)void\"",
      "defined_out": [
        "Method(key(keyreg)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)"
      ]
    },
    "146": {
      "op": "pushbytes 0x639872d6 // method \"asset_config(acfg)void\"",
      "defined_out": [
        "Method(asset_config(acfg)void)",
        "Method(key(keyreg)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)"
      ]
    },
    "152": {
      "op": "pushbytes 0x50f8f1c3 // method \"asset_transfer(axfer)void\"",
      "defined_out": [
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(key(keyreg)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)"
      ]
    },
    "158": {
      "op": "pushbytes 0x5b3a00cf // method \"asset_freeze(afrz)void\"",
      "defined_out": [
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(key(keyreg)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)"
      ]
    },
    "164": {
      "op": "pushbytes 0xcd62293d // method \"application_call(appl)void\"",
      "defined_out": [
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(key(keyreg)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)"
      ]
    },
    "170": {
      "op": "pushbytes 0x02ea72e5 // method \"multiple_txns(appl,appl,appl)void\"",
      "defined_out": [
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(key(keyreg)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)"
      ]
    },
    "176": {
      "op": "pushbytes 0x3056840b // method \"any_txn(txn,txn,txn)void\"",
      "defined_out": [
        "Method(any_txn(txn,txn,txn)void)",
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(key(keyreg)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(any_txn(txn,txn,txn)void)"
      ]
    },
    "182": {
      "op": "pushbytes 0x96ef9a95 // method \"group_init(txn,txn,txn)void\"",
      "defined_out": [
        "Method(any_txn(txn,txn,txn)void)",
        "Method(application_call(appl)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(group_init(txn,txn,txn)void)",
        "Method(key(keyreg)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(pay(pay)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(any_txn(txn,txn,txn)void)",
        "Method(group_init(txn,txn,txn)void)"
      ]
    },
    "188": {
      "op": "uncover 9",
      "stack_out": [
        "Method(pay(pay)void)",
        "Method(key(keyreg)void)",
        "Method(asset_config(acfg)void)",
        "Method(asset_transfer(axfer)void)",
        "Method(asset_freeze(afrz)void)",
        "Method(application_call(appl)void)",
        "Method(multiple_txns(appl,appl,appl)void)",
        "Method(any_txn(txn,txn,txn)void)",
        "Method(group_init(txn,txn,txn)void)",
        "tmp%5#0"
      ]
    },
    "190": {
      "op": "match pay_route@3 key_route@4 asset_config_route@5 asset_transfer_route@6 asset_freeze_route@7 application_call_route@8 multiple_txns_route@9 any_txn_route@10 group_init_route@11",
      "stack_out": []
    },
    "210": {
      "op": "b switch_case_default@12"
    },
    "213": {
      "block": "switch_case_default@12",
      "stack_in": [],
      "op": "b switch_case_next@13"
    },
    "216": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@13",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "217": {
      "block": "group_init_route@11",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.group_init[routing]",
      "op": "callsub group_init"
    },
    "220": {
      "op": "b switch_case_next@13"
    },
    "223": {
      "block": "any_txn_route@10",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.any_txn[routing]",
      "op": "callsub any_txn"
    },
    "226": {
      "op": "b switch_case_next@13"
    },
    "229": {
      "block": "multiple_txns_route@9",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.multiple_txns[routing]",
      "op": "callsub multiple_txns"
    },
    "232": {
      "op": "b switch_case_next@13"
    },
    "235": {
      "block": "application_call_route@8",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.application_call[routing]",
      "op": "callsub application_call"
    },
    "238": {
      "op": "b switch_case_next@13"
    },
    "241": {
      "block": "asset_freeze_route@7",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_freeze[routing]",
      "op": "callsub asset_freeze"
    },
    "244": {
      "op": "b switch_case_next@13"
    },
    "247": {
      "block": "asset_transfer_route@6",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_transfer[routing]",
      "op": "callsub asset_transfer"
    },
    "250": {
      "op": "b switch_case_next@13"
    },
    "253": {
      "block": "asset_config_route@5",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_config[routing]",
      "op": "callsub asset_config"
    },
    "256": {
      "op": "b switch_case_next@13"
    },
    "259": {
      "block": "key_route@4",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.key[routing]",
      "op": "callsub key"
    },
    "262": {
      "op": "b switch_case_next@13"
    },
    "265": {
      "block": "pay_route@3",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.pay[routing]",
      "op": "callsub pay"
    },
    "268": {
      "op": "b switch_case_next@13"
    },
    "271": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "274": {
      "block": "create_block@0",
      "stack_in": [],
      "callsub": "test_cases.transaction.contract.TransactionContract.create",
      "op": "callsub test_cases.transaction.contract.TransactionContract.create"
    },
    "277": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.pay[routing]",
      "params": {},
      "block": "pay",
      "stack_in": [],
      "op": "b pay_block@0"
    },
    "282": {
      "block": "pay_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "285": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "286": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "287": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "289": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "291": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "292": {
      "callsub": "test_cases.transaction.contract.TransactionContract.pay",
      "op": "callsub test_cases.transaction.contract.TransactionContract.pay",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.key[routing]",
      "params": {},
      "block": "key",
      "stack_in": [],
      "op": "b key_block@0"
    },
    "300": {
      "block": "key_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "303": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "305": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "307": {
      "op": "intc_2 // keyreg",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "keyreg"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "keyreg"
      ]
    },
    "308": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "309": {
      "error": "transaction type is keyreg",
      "op": "assert // transaction type is keyreg",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "310": {
      "callsub": "test_cases.transaction.contract.TransactionContract.key",
      "op": "callsub test_cases.transaction.contract.TransactionContract.key",
      "stack_out": []
    },
    "313": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "314": {
      "op": "return",
      "stack_out": []
    },
    "315": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_config[routing]",
      "params": {},
      "block": "asset_config",
      "stack_in": [],
      "op": "b asset_config_block@0"
    },
    "318": {
      "block": "asset_config_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "321": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "322": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "323": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "325": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "327": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "328": {
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_config",
      "op": "callsub test_cases.transaction.contract.TransactionContract.asset_config",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_transfer[routing]",
      "params": {},
      "block": "asset_transfer",
      "stack_in": [],
      "op": "b asset_transfer_block@0"
    },
    "336": {
      "block": "asset_transfer_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "339": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "340": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "341": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "343": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "345": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "346": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "347": {
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_transfer",
      "op": "callsub test_cases.transaction.contract.TransactionContract.asset_transfer",
      "stack_out": []
    },
    "350": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "351": {
      "op": "return",
      "stack_out": []
    },
    "352": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_freeze[routing]",
      "params": {},
      "block": "asset_freeze",
      "stack_in": [],
      "op": "b asset_freeze_block@0"
    },
    "355": {
      "block": "asset_freeze_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "358": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "359": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "360": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "362": {
      "op": "pushint 5 // afrz",
      "defined_out": [
        "afrz",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "afrz"
      ]
    },
    "364": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "365": {
      "error": "transaction type is afrz",
      "op": "assert // transaction type is afrz",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "366": {
      "callsub": "test_cases.transaction.contract.TransactionContract.asset_freeze",
      "op": "callsub test_cases.transaction.contract.TransactionContract.asset_freeze",
      "stack_out": []
    },
    "369": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "370": {
      "op": "return",
      "stack_out": []
    },
    "371": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.application_call[routing]",
      "params": {},
      "block": "application_call",
      "stack_in": [],
      "op": "b application_call_block@0"
    },
    "374": {
      "block": "application_call_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "376": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "377": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "378": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "379": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "381": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "384": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "385": {
      "callsub": "test_cases.transaction.contract.TransactionContract.application_call",
      "op": "callsub test_cases.transaction.contract.TransactionContract.application_call",
      "stack_out": []
    },
    "388": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "389": {
      "op": "return",
      "stack_out": []
    },
    "390": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.multiple_txns[routing]",
      "params": {},
      "block": "multiple_txns",
      "stack_in": [],
      "op": "b multiple_txns_block@0"
    },
    "393": {
      "block": "multiple_txns_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "396": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "397": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "398": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "400": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "402": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "403": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "404": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "406": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "407": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "408": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "409": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "411": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "413": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "414": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "415": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ]
    },
    "417": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "418": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "419": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "420": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "422": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "appl"
      ]
    },
    "424": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "425": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "426": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%0#0"
      ]
    },
    "428": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "430": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "432": {
      "callsub": "test_cases.transaction.contract.TransactionContract.multiple_txns",
      "op": "callsub test_cases.transaction.contract.TransactionContract.multiple_txns",
      "stack_out": []
    },
    "435": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "436": {
      "op": "return",
      "stack_out": []
    },
    "437": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.any_txn[routing]",
      "params": {},
      "block": "any_txn",
      "stack_in": [],
      "op": "b any_txn_block@0"
    },
    "440": {
      "block": "any_txn_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "442": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "443": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "444": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "446": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "447": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "448": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ]
    },
    "450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "451": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "452": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%0#0"
      ]
    },
    "454": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "456": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "458": {
      "callsub": "test_cases.transaction.contract.TransactionContract.any_txn",
      "op": "callsub test_cases.transaction.contract.TransactionContract.any_txn",
      "stack_out": []
    },
    "461": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "462": {
      "op": "return",
      "stack_out": []
    },
    "463": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.group_init[routing]",
      "params": {},
      "block": "group_init",
      "stack_in": [],
      "op": "b group_init_block@0"
    },
    "466": {
      "block": "group_init_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "469": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "470": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "472": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "473": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "474": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ]
    },
    "476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "477": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "478": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%0#0"
      ]
    },
    "480": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "482": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "484": {
      "callsub": "test_cases.transaction.contract.TransactionContract.group_init",
      "op": "callsub test_cases.transaction.contract.TransactionContract.group_init",
      "stack_out": []
    },
    "487": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "488": {
      "op": "return",
      "stack_out": []
    },
    "489": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.create",
      "params": {},
      "block": "test_cases.transaction.contract.TransactionContract.create",
      "stack_in": [],
      "op": "b test_cases.transaction.contract.TransactionContract.create_block@0"
    },
    "492": {
      "block": "test_cases.transaction.contract.TransactionContract.create_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "test_cases.transaction.contract.TransactionContract._common_checks",
      "params": {
        "txn#0": "uint64"
      },
      "block": "_common_checks",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "496": {
      "op": "b _common_checks_block@0"
    },
    "499": {
      "block": "_common_checks_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "501": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "503": {
      "op": "len",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "505": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "506": {
      "error": "txn_id",
      "op": "assert // txn_id",
      "stack_out": []
    },
    "507": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "509": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "511": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "513": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "514": {
      "error": "sender",
      "op": "assert // sender",
      "stack_out": []
    },
    "515": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "517": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "520": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "521": {
      "error": "fee",
      "op": "assert // fee",
      "stack_out": []
    },
    "522": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "524": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "526": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "527": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "528": {
      "error": "type",
      "op": "assert // type",
      "stack_out": []
    },
    "529": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "531": {
      "op": "gtxns Type",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "533": {
      "op": "len",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "535": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "536": {
      "error": "type_bytes",
      "op": "assert // type_bytes",
      "stack_out": []
    },
    "537": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "539": {
      "op": "gtxns Note",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "541": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "544": {
      "error": "note",
      "op": "assert // note",
      "stack_out": []
    },
    "545": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "547": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "551": {
      "error": "group_index",
      "op": "assert // group_index",
      "stack_out": []
    },
    "552": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "554": {
      "op": "gtxns FirstValid",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "557": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "558": {
      "error": "first_valid",
      "op": "assert // first_valid",
      "stack_out": []
    },
    "559": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "561": {
      "op": "gtxns LastValid",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "564": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "565": {
      "error": "last_valid",
      "op": "assert // last_valid",
      "stack_out": []
    },
    "566": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "568": {
      "op": "gtxns Lease",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "570": {
      "op": "len",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%22#0",
        "0"
      ]
    },
    "572": {
      "op": "!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "573": {
      "error": "lease",
      "op": "assert // lease",
      "stack_out": []
    },
    "574": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "576": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "578": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "580": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "581": {
      "error": "rekey_to",
      "op": "assert // rekey_to",
      "stack_out": []
    },
    "582": {
      "retsub": true,
      "op": "retsub"
    },
    "583": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.pay",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.pay",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "586": {
      "op": "b test_cases.transaction.contract.TransactionContract.pay_block@0"
    },
    "589": {
      "block": "test_cases.transaction.contract.TransactionContract.pay_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "591": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "594": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "596": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "598": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "601": {
      "error": "Payment should be for this app",
      "op": "assert // Payment should be for this app",
      "stack_out": []
    },
    "602": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "604": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "606": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "1000"
      ]
    },
    "609": {
      "op": ">",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "610": {
      "error": "Payment should be for >1000 micro algos",
      "op": "assert // Payment should be for >1000 micro algos",
      "stack_out": []
    },
    "611": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "613": {
      "op": "gtxns CloseRemainderTo",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "615": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "617": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "618": {
      "error": "close_remainder_to",
      "op": "assert // close_remainder_to",
      "stack_out": []
    },
    "619": {
      "retsub": true,
      "op": "retsub"
    },
    "620": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.key",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.key",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "623": {
      "op": "b test_cases.transaction.contract.TransactionContract.key_block@0"
    },
    "626": {
      "block": "test_cases.transaction.contract.TransactionContract.key_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "628": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "631": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "633": {
      "op": "gtxns VotePK",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "635": {
      "op": "len",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "636": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "637": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "638": {
      "error": "vote_key",
      "op": "assert // vote_key",
      "stack_out": []
    },
    "639": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "641": {
      "op": "gtxns SelectionPK",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "643": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "644": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "645": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "646": {
      "error": "selection_key",
      "op": "assert // selection_key",
      "stack_out": []
    },
    "647": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "649": {
      "op": "gtxns VoteKeyDilution",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "652": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "653": {
      "error": "vote_key_dilution",
      "op": "assert // vote_key_dilution",
      "stack_out": []
    },
    "654": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "656": {
      "op": "gtxns VoteFirst",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "658": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "659": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "660": {
      "error": "vote_first",
      "op": "assert // vote_first",
      "stack_out": []
    },
    "661": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "663": {
      "op": "gtxns VoteLast",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "666": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "667": {
      "error": "vote_last",
      "op": "assert // vote_last",
      "stack_out": []
    },
    "668": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "670": {
      "op": "gtxns Nonparticipation",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "672": {
      "error": "non_participation",
      "op": "assert // non_participation",
      "stack_out": []
    },
    "673": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "675": {
      "op": "gtxns StateProofPK",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "677": {
      "op": "len",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "679": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "680": {
      "error": "state_proof_key",
      "op": "assert // state_proof_key",
      "stack_out": []
    },
    "681": {
      "retsub": true,
      "op": "retsub"
    },
    "682": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_config",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.asset_config",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "685": {
      "op": "b test_cases.transaction.contract.TransactionContract.asset_config_block@0"
    },
    "688": {
      "block": "test_cases.transaction.contract.TransactionContract.asset_config_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "690": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "693": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "695": {
      "op": "gtxns ConfigAsset",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "697": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "698": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "699": {
      "error": "config_asset",
      "op": "assert // config_asset",
      "stack_out": []
    },
    "700": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "702": {
      "op": "gtxns ConfigAssetTotal",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "704": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "705": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "706": {
      "error": "total",
      "op": "assert // total",
      "stack_out": []
    },
    "707": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "709": {
      "op": "gtxns ConfigAssetDecimals",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "711": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "712": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "713": {
      "error": "decimals",
      "op": "assert // decimals",
      "stack_out": []
    },
    "714": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "716": {
      "op": "gtxns ConfigAssetDefaultFrozen",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "718": {
      "error": "default_frozen",
      "op": "assert // default_frozen",
      "stack_out": []
    },
    "719": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "721": {
      "op": "gtxns ConfigAssetUnitName",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "723": {
      "op": "len",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "724": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "725": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "726": {
      "error": "unit_name",
      "op": "assert // unit_name",
      "stack_out": []
    },
    "727": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "729": {
      "op": "gtxns ConfigAssetName",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "731": {
      "op": "len",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "732": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%11#0",
        "0"
      ]
    },
    "733": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "734": {
      "error": "asset_name",
      "op": "assert // asset_name",
      "stack_out": []
    },
    "735": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "737": {
      "op": "gtxns ConfigAssetURL",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "739": {
      "op": "len",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "740": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "741": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "742": {
      "error": "url",
      "op": "assert // url",
      "stack_out": []
    },
    "743": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "745": {
      "op": "gtxns ConfigAssetMetadataHash",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "747": {
      "op": "len",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "748": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%17#0",
        "0"
      ]
    },
    "749": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "750": {
      "error": "metadata_hash",
      "op": "assert // metadata_hash",
      "stack_out": []
    },
    "751": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "753": {
      "op": "gtxns ConfigAssetManager",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "755": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "757": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "758": {
      "error": "manager",
      "op": "assert // manager",
      "stack_out": []
    },
    "759": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "761": {
      "op": "gtxns ConfigAssetReserve",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "763": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "765": {
      "op": "!=",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "766": {
      "error": "reserve",
      "op": "assert // reserve",
      "stack_out": []
    },
    "767": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "769": {
      "op": "gtxns ConfigAssetFreeze",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "771": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "773": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "774": {
      "error": "freeze",
      "op": "assert // freeze",
      "stack_out": []
    },
    "775": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "777": {
      "op": "gtxns ConfigAssetClawback",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "779": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "781": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "782": {
      "error": "clawback",
      "op": "assert // clawback",
      "stack_out": []
    },
    "783": {
      "retsub": true,
      "op": "retsub"
    },
    "784": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_transfer",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.asset_transfer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "787": {
      "op": "b test_cases.transaction.contract.TransactionContract.asset_transfer_block@0"
    },
    "790": {
      "block": "test_cases.transaction.contract.TransactionContract.asset_transfer_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "792": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "795": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "797": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "799": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "800": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "801": {
      "error": "xfer_asset",
      "op": "assert // xfer_asset",
      "stack_out": []
    },
    "802": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "804": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "807": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "808": {
      "error": "asset_amount",
      "op": "assert // asset_amount",
      "stack_out": []
    },
    "809": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "811": {
      "op": "gtxns AssetSender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "813": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "815": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "816": {
      "error": "asset_sender",
      "op": "assert // asset_sender",
      "stack_out": []
    },
    "817": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "819": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "821": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "823": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "824": {
      "error": "asset_receiver",
      "op": "assert // asset_receiver",
      "stack_out": []
    },
    "825": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "827": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "829": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "831": {
      "op": "!=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "832": {
      "error": "asset_close_to",
      "op": "assert // asset_close_to",
      "stack_out": []
    },
    "833": {
      "retsub": true,
      "op": "retsub"
    },
    "834": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.asset_freeze",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.asset_freeze",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "837": {
      "op": "b test_cases.transaction.contract.TransactionContract.asset_freeze_block@0"
    },
    "840": {
      "block": "test_cases.transaction.contract.TransactionContract.asset_freeze_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "842": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "845": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "847": {
      "op": "gtxns FreezeAsset",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "850": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "851": {
      "error": "freeze_asset",
      "op": "assert // freeze_asset",
      "stack_out": []
    },
    "852": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "854": {
      "op": "gtxns FreezeAssetAccount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "856": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "858": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "859": {
      "error": "freeze_account",
      "op": "assert // freeze_account",
      "stack_out": []
    },
    "860": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "862": {
      "op": "gtxns FreezeAssetFrozen",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "864": {
      "error": "frozen",
      "op": "assert // frozen",
      "stack_out": []
    },
    "865": {
      "retsub": true,
      "op": "retsub"
    },
    "866": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.application_call",
      "params": {
        "txn#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.application_call",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "869": {
      "op": "b test_cases.transaction.contract.TransactionContract.application_call_block@0"
    },
    "872": {
      "block": "test_cases.transaction.contract.TransactionContract.application_call_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "874": {
      "callsub": "test_cases.transaction.contract.TransactionContract._common_checks",
      "op": "callsub _common_checks",
      "stack_out": []
    },
    "877": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "879": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "881": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "882": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "883": {
      "error": "app_id",
      "op": "assert // app_id",
      "stack_out": []
    },
    "884": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "886": {
      "op": "gtxns OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "888": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "889": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "890": {
      "error": "on_completion",
      "op": "assert // on_completion",
      "stack_out": []
    },
    "891": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "893": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "895": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "896": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "897": {
      "error": "num_app_args",
      "op": "assert // num_app_args",
      "stack_out": []
    },
    "898": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "900": {
      "op": "gtxns NumAccounts",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "902": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "903": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "904": {
      "error": "num_accounts",
      "op": "assert // num_accounts",
      "stack_out": []
    },
    "905": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "907": {
      "op": "gtxns ApprovalProgram",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "909": {
      "op": "len",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "910": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "911": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "912": {
      "error": "approval_program",
      "op": "assert // approval_program",
      "stack_out": []
    },
    "913": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "915": {
      "op": "gtxns ClearStateProgram",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "917": {
      "op": "len",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "918": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "919": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "920": {
      "error": "clear_state_program",
      "op": "assert // clear_state_program",
      "stack_out": []
    },
    "921": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "923": {
      "op": "gtxns NumAssets",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "925": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "926": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "927": {
      "error": "num_assets",
      "op": "assert // num_assets",
      "stack_out": []
    },
    "928": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "930": {
      "op": "gtxns NumApplications",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "933": {
      "op": "!=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "934": {
      "error": "num_apps",
      "op": "assert // num_apps",
      "stack_out": []
    },
    "935": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "937": {
      "op": "gtxns GlobalNumUint",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "940": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "941": {
      "error": "global_num_uint",
      "op": "assert // global_num_uint",
      "stack_out": []
    },
    "942": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "944": {
      "op": "gtxns GlobalNumByteSlice",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "946": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "947": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "948": {
      "error": "global_num_bytes",
      "op": "assert // global_num_bytes",
      "stack_out": []
    },
    "949": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "951": {
      "op": "gtxns LocalNumUint",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%22#0",
        "0"
      ]
    },
    "954": {
      "op": "!=",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "955": {
      "error": "local_num_uint",
      "op": "assert // local_num_uint",
      "stack_out": []
    },
    "956": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "958": {
      "op": "gtxns LocalNumByteSlice",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "960": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "961": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "962": {
      "error": "local_num_bytes",
      "op": "assert // local_num_bytes",
      "stack_out": []
    },
    "963": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "965": {
      "op": "gtxns ExtraProgramPages",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%26#0",
        "0"
      ]
    },
    "968": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "969": {
      "error": "extra_program_pages",
      "op": "assert // extra_program_pages",
      "stack_out": []
    },
    "970": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "972": {
      "op": "gtxns LastLog",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "974": {
      "op": "len",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "975": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%29#0",
        "0"
      ]
    },
    "976": {
      "op": "!=",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "977": {
      "error": "last_log",
      "op": "assert // last_log",
      "stack_out": []
    },
    "978": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "980": {
      "op": "gtxns NumApprovalProgramPages",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%31#0",
        "0"
      ]
    },
    "983": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "984": {
      "error": "num_approval_program_pages",
      "op": "assert // num_approval_program_pages",
      "stack_out": []
    },
    "985": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "987": {
      "op": "gtxns NumClearStateProgramPages",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "989": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%33#0",
        "0"
      ]
    },
    "990": {
      "op": "!=",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "991": {
      "error": "num_clear_state_program_pages",
      "op": "assert // num_clear_state_program_pages",
      "stack_out": []
    },
    "992": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "994": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "995": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "997": {
      "op": "len",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "998": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "0"
      ]
    },
    "999": {
      "op": "!=",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1000": {
      "error": "app_args(0)",
      "op": "assert // app_args(0)",
      "stack_out": []
    },
    "1001": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "1003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "1004": {
      "op": "gtxnsas Accounts",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1006": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1008": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1009": {
      "error": "accounts(0)",
      "op": "assert // accounts(0)",
      "stack_out": []
    },
    "1010": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "1012": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "1013": {
      "op": "gtxnsas Assets",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%41#0",
        "0"
      ]
    },
    "1016": {
      "op": "!=",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1017": {
      "error": "assets(0)",
      "op": "assert // assets(0)",
      "stack_out": []
    },
    "1018": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "1020": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "1021": {
      "op": "gtxnsas Applications",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%43#0",
        "0"
      ]
    },
    "1024": {
      "op": "!=",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1025": {
      "error": "apps(0)",
      "op": "assert // apps(0)",
      "stack_out": []
    },
    "1026": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "1028": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "1029": {
      "op": "gtxnsas ApprovalProgramPages",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1031": {
      "op": "len",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "1033": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1034": {
      "error": "approval_program_pages(0)",
      "op": "assert // approval_program_pages(0)",
      "stack_out": []
    },
    "1035": {
      "op": "frame_dig -1",
      "stack_out": [
        "txn#0 (copy)"
      ]
    },
    "1037": {
      "op": "intc_0 // 0",
      "stack_out": [
        "txn#0 (copy)",
        "0"
      ]
    },
    "1038": {
      "op": "gtxnsas ClearStateProgramPages",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1040": {
      "op": "len",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "1041": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%49#0",
        "0"
      ]
    },
    "1042": {
      "op": "!=",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "1043": {
      "error": "clear_state_program_pages(0)",
      "op": "assert // clear_state_program_pages(0)",
      "stack_out": []
    },
    "1044": {
      "retsub": true,
      "op": "retsub"
    },
    "1045": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.multiple_txns",
      "params": {
        "txn1#0": "uint64",
        "txn2#0": "uint64",
        "txn3#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1048": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_block@0"
    },
    "1051": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [],
      "stack_out": [
        "app#0"
      ]
    },
    "1053": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1054": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_for_body@1"
    },
    "1057": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_for_body@1",
      "stack_in": [
        "app#0",
        "index#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "app#0"
      ]
    },
    "1059": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "app#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "1061": {
      "op": "frame_dig 1",
      "defined_out": [
        "app#0",
        "index#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "tmp%0#0",
        "index#0"
      ]
    },
    "1063": {
      "op": "==",
      "defined_out": [
        "app#0",
        "index#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "tmp%1#0"
      ]
    },
    "1064": {
      "op": "assert",
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1065": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_for_footer@2"
    },
    "1068": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_for_footer@2",
      "stack_in": [
        "app#0",
        "index#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "index#0"
      ]
    },
    "1070": {
      "op": "switch test_cases.transaction.contract.TransactionContract.multiple_txns_for_header_1@3 test_cases.transaction.contract.TransactionContract.multiple_txns_for_header_2@4",
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1076": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_after_for@5"
    },
    "1079": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_after_for@5",
      "stack_in": [
        "app#0",
        "index#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1080": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_for_header_2@4",
      "stack_in": [
        "app#0",
        "index#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn3#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "txn3#0 (copy)"
      ]
    },
    "1082": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1084": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "2"
      ]
    },
    "1085": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1087": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_for_body@1"
    },
    "1090": {
      "block": "test_cases.transaction.contract.TransactionContract.multiple_txns_for_header_1@3",
      "stack_in": [
        "app#0",
        "index#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "txn2#0 (copy)"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "txn2#0 (copy)"
      ]
    },
    "1092": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1094": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "app#0",
        "index#0",
        "1"
      ]
    },
    "1095": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "app#0",
        "index#0"
      ]
    },
    "1097": {
      "op": "b test_cases.transaction.contract.TransactionContract.multiple_txns_for_body@1"
    },
    "1100": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.any_txn",
      "params": {
        "txn1#0": "uint64",
        "txn2#0": "uint64",
        "txn3#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.any_txn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1103": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_block@0"
    },
    "1106": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [],
      "stack_out": [
        "txn#0"
      ]
    },
    "1108": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1109": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_for_body@1"
    },
    "1112": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_for_body@1",
      "stack_in": [
        "txn#0",
        "index#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "txn#0"
      ]
    },
    "1114": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "1116": {
      "op": "frame_dig 1",
      "defined_out": [
        "index#0",
        "tmp%0#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "tmp%0#0",
        "index#0"
      ]
    },
    "1118": {
      "op": "==",
      "defined_out": [
        "index#0",
        "tmp%1#0",
        "txn#0"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "tmp%1#0"
      ]
    },
    "1119": {
      "op": "assert",
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1120": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_for_footer@2"
    },
    "1123": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_for_footer@2",
      "stack_in": [
        "txn#0",
        "index#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "index#0"
      ]
    },
    "1125": {
      "op": "switch test_cases.transaction.contract.TransactionContract.any_txn_for_header_1@3 test_cases.transaction.contract.TransactionContract.any_txn_for_header_2@4",
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1131": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_after_for@5"
    },
    "1134": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_after_for@5",
      "stack_in": [
        "txn#0",
        "index#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1135": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_for_header_2@4",
      "stack_in": [
        "txn#0",
        "index#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn3#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "txn3#0 (copy)"
      ]
    },
    "1137": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1139": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "2"
      ]
    },
    "1140": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1142": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_for_body@1"
    },
    "1145": {
      "block": "test_cases.transaction.contract.TransactionContract.any_txn_for_header_1@3",
      "stack_in": [
        "txn#0",
        "index#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "txn2#0 (copy)"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "txn2#0 (copy)"
      ]
    },
    "1147": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1149": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "txn#0",
        "index#0",
        "1"
      ]
    },
    "1150": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "txn#0",
        "index#0"
      ]
    },
    "1152": {
      "op": "b test_cases.transaction.contract.TransactionContract.any_txn_for_body@1"
    },
    "1155": {
      "subroutine": "test_cases.transaction.contract.TransactionContract.group_init",
      "params": {
        "txn1#0": "uint64",
        "txn2#0": "uint64",
        "txn3#0": "uint64"
      },
      "block": "test_cases.transaction.contract.TransactionContract.group_init",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1158": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_block@0"
    },
    "1161": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0"
      ]
    },
    "1162": {
      "op": "frame_dig -3",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1164": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_for_body@1"
    },
    "1167": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_for_body@1",
      "stack_in": [
        "loop_counter%0#0",
        "txn#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "txn#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn#0"
      ]
    },
    "1169": {
      "op": "dup",
      "defined_out": [
        "txn#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn#0",
        "txn#0 (copy)"
      ]
    },
    "1170": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "txn#0",
        "txn_from_index#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn#0",
        "txn_from_index#0"
      ]
    },
    "1172": {
      "op": "uncover 1",
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn_from_index#0",
        "txn#0"
      ]
    },
    "1174": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%0#0",
        "txn#0",
        "txn_from_index#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn_from_index#0",
        "tmp%0#0"
      ]
    },
    "1176": {
      "op": "cover 1",
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%0#0",
        "txn_from_index#0"
      ]
    },
    "1178": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "txn#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1180": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "txn#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%2#0"
      ]
    },
    "1181": {
      "op": "assert",
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1182": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_for_footer@2"
    },
    "1185": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_for_footer@2",
      "stack_in": [
        "loop_counter%0#0",
        "txn#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "loop_counter%0#0"
      ]
    },
    "1187": {
      "op": "switch test_cases.transaction.contract.TransactionContract.group_init_for_header_1@3 test_cases.transaction.contract.TransactionContract.group_init_for_header_2@4",
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1193": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_after_for@5"
    },
    "1196": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_after_for@5",
      "stack_in": [
        "loop_counter%0#0",
        "txn#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "txn1#0 (copy)"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn1#0 (copy)"
      ]
    },
    "1198": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%3#0"
      ]
    },
    "1200": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1201": {
      "op": "gtxns TxID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1203": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "tmp%5#0"
      ]
    },
    "1204": {
      "op": "assert",
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1205": {
      "retsub": true,
      "op": "retsub"
    },
    "1206": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_for_header_2@4",
      "stack_in": [
        "loop_counter%0#0",
        "txn#0"
      ],
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "2"
      ]
    },
    "1207": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1209": {
      "op": "frame_dig -1",
      "defined_out": [
        "txn3#0 (copy)"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn3#0 (copy)"
      ]
    },
    "1211": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1213": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_for_body@1"
    },
    "1216": {
      "block": "test_cases.transaction.contract.TransactionContract.group_init_for_header_1@3",
      "stack_in": [
        "loop_counter%0#0",
        "txn#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "1"
      ]
    },
    "1217": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1219": {
      "op": "frame_dig -2",
      "defined_out": [
        "txn2#0 (copy)"
      ],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0",
        "txn2#0 (copy)"
      ]
    },
    "1221": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "loop_counter%0#0",
        "txn#0"
      ]
    },
    "1223": {
      "op": "b test_cases.transaction.contract.TransactionContract.group_init_for_body@1"
    }
  }
}