#pragma version 10

test_cases.transaction.contract.TransactionContract.approval_program:
    method "create()void"
    method "pay(pay)void"
    method "key(keyreg)void"
    method "asset_config(acfg)void"
    method "asset_transfer(axfer)void"
    method "asset_freeze(afrz)void"
    method "application_call(appl)void"
    method "multiple_txns(appl,appl,appl)void"
    method "any_txn(txn,txn,txn)void"
    method "group_init(txn,txn,txn)void"
    txna ApplicationArgs 0
    match main_create_route@1 main_pay_route@2 main_key_route@3 main_asset_config_route@4 main_asset_transfer_route@5 main_asset_freeze_route@6 main_application_call_route@7 main_multiple_txns_route@8 main_any_txn_route@9 main_group_init_route@10
    err // reject transaction

main_create_route@1:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    callsub create
    int 1
    return

main_pay_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    callsub pay
    int 1
    return

main_key_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int keyreg
    ==
    assert // transaction type is keyreg
    callsub key
    int 1
    return

main_asset_config_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int acfg
    ==
    assert // transaction type is acfg
    callsub asset_config
    int 1
    return

main_asset_transfer_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    callsub asset_transfer
    int 1
    return

main_asset_freeze_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int afrz
    ==
    assert // transaction type is afrz
    callsub asset_freeze
    int 1
    return

main_application_call_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int appl
    ==
    assert // transaction type is appl
    callsub application_call
    int 1
    return

main_multiple_txns_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 3
    -
    dup
    gtxns TypeEnum
    int appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    int 2
    -
    dup
    gtxns TypeEnum
    int appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int appl
    ==
    assert // transaction type is appl
    callsub multiple_txns
    int 1
    return

main_any_txn_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 3
    -
    txn GroupIndex
    int 2
    -
    txn GroupIndex
    int 1
    -
    callsub any_txn
    int 1
    return

main_group_init_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 3
    -
    txn GroupIndex
    int 2
    -
    txn GroupIndex
    int 1
    -
    callsub group_init
    int 1
    return


// test_cases.transaction.contract.TransactionContract.create() -> void:
create:
    proto 0 0
    retsub


// test_cases.transaction.contract.TransactionContract.pay(txn: uint64) -> void:
pay:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment should be for this app
    frame_dig -1
    gtxns Amount
    int 1000
    >
    assert // Payment should be for >1000 micro algos
    frame_dig -1
    gtxns CloseRemainderTo
    global ZeroAddress
    ==
    assert // close_remainder_to
    retsub


// test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
_common_checks:
    proto 1 0
    frame_dig -1
    gtxns TxID
    len
    assert // txn_id
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    assert // sender
    frame_dig -1
    gtxns Fee
    assert // fee
    frame_dig -1
    gtxns TypeEnum
    assert // type
    frame_dig -1
    gtxns Type
    len
    assert // type_bytes
    frame_dig -1
    gtxns Note
    byte 0x
    ==
    assert // note
    frame_dig -1
    gtxns GroupIndex
    !
    assert // group_index
    frame_dig -1
    gtxns FirstValid
    assert // first_valid
    frame_dig -1
    gtxns LastValid
    assert // last_valid
    frame_dig -1
    gtxns Lease
    len
    assert // lease
    frame_dig -1
    gtxns RekeyTo
    global ZeroAddress
    ==
    assert // rekey_to
    retsub


// test_cases.transaction.contract.TransactionContract.key(txn: uint64) -> void:
key:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns VotePK
    len
    assert // vote_key
    frame_dig -1
    gtxns SelectionPK
    len
    assert // selection_key
    frame_dig -1
    gtxns VoteKeyDilution
    assert // vote_key_dilution
    frame_dig -1
    gtxns VoteFirst
    assert // vote_first
    frame_dig -1
    gtxns VoteLast
    assert // vote_last
    frame_dig -1
    gtxns Nonparticipation
    assert // non_participation
    frame_dig -1
    gtxns StateProofPK
    len
    assert // state_proof_key
    retsub


// test_cases.transaction.contract.TransactionContract.asset_config(txn: uint64) -> void:
asset_config:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns ConfigAsset
    assert // config_asset
    frame_dig -1
    gtxns ConfigAssetTotal
    assert // total
    frame_dig -1
    gtxns ConfigAssetDecimals
    assert // decimals
    frame_dig -1
    gtxns ConfigAssetDefaultFrozen
    assert // default_frozen
    frame_dig -1
    gtxns ConfigAssetUnitName
    len
    assert // unit_name
    frame_dig -1
    gtxns ConfigAssetName
    len
    assert // asset_name
    frame_dig -1
    gtxns ConfigAssetURL
    len
    assert // url
    frame_dig -1
    gtxns ConfigAssetMetadataHash
    len
    assert // metadata_hash
    frame_dig -1
    gtxns ConfigAssetManager
    global ZeroAddress
    !=
    assert // manager
    frame_dig -1
    gtxns ConfigAssetReserve
    global ZeroAddress
    !=
    assert // reserve
    frame_dig -1
    gtxns ConfigAssetFreeze
    global ZeroAddress
    !=
    assert // freeze
    frame_dig -1
    gtxns ConfigAssetClawback
    global ZeroAddress
    !=
    assert // clawback
    retsub


// test_cases.transaction.contract.TransactionContract.asset_transfer(txn: uint64) -> void:
asset_transfer:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns XferAsset
    assert // xfer_asset
    frame_dig -1
    gtxns AssetAmount
    assert // asset_amount
    frame_dig -1
    gtxns AssetSender
    global ZeroAddress
    !=
    assert // asset_sender
    frame_dig -1
    gtxns AssetReceiver
    global ZeroAddress
    !=
    assert // asset_receiver
    frame_dig -1
    gtxns AssetCloseTo
    global ZeroAddress
    !=
    assert // asset_close_to
    retsub


// test_cases.transaction.contract.TransactionContract.asset_freeze(txn: uint64) -> void:
asset_freeze:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns FreezeAsset
    assert // freeze_asset
    frame_dig -1
    gtxns FreezeAssetAccount
    global ZeroAddress
    !=
    assert // freeze_account
    frame_dig -1
    gtxns FreezeAssetFrozen
    assert // frozen
    retsub


// test_cases.transaction.contract.TransactionContract.application_call(txn: uint64) -> void:
application_call:
    proto 1 0
    frame_dig -1
    callsub _common_checks
    frame_dig -1
    gtxns ApplicationID
    assert // app_id
    frame_dig -1
    gtxns OnCompletion
    assert // on_completion
    frame_dig -1
    gtxns NumAppArgs
    assert // num_app_args
    frame_dig -1
    gtxns NumAccounts
    assert // num_accounts
    frame_dig -1
    gtxns ApprovalProgram
    len
    assert // approval_program
    frame_dig -1
    gtxns ClearStateProgram
    len
    assert // clear_state_program
    frame_dig -1
    gtxns NumAssets
    assert // num_assets
    frame_dig -1
    gtxns NumApplications
    assert // num_apps
    frame_dig -1
    gtxns GlobalNumUint
    assert // global_num_uint
    frame_dig -1
    gtxns GlobalNumByteSlice
    assert // global_num_bytes
    frame_dig -1
    gtxns LocalNumUint
    assert // local_num_uint
    frame_dig -1
    gtxns LocalNumByteSlice
    assert // local_num_bytes
    frame_dig -1
    gtxns ExtraProgramPages
    assert // extra_program_pages
    frame_dig -1
    gtxns LastLog
    len
    assert // last_log
    frame_dig -1
    gtxns NumApprovalProgramPages
    assert // num_approval_program_pages
    frame_dig -1
    gtxns NumClearStateProgramPages
    assert // num_clear_state_program_pages
    frame_dig -1
    int 0
    gtxnsas ApplicationArgs
    len
    assert // app_args(0)
    frame_dig -1
    int 0
    gtxnsas Accounts
    global ZeroAddress
    !=
    assert // accounts(0)
    frame_dig -1
    int 0
    gtxnsas Assets
    assert // assets(0)
    frame_dig -1
    int 0
    gtxnsas Applications
    assert // apps(0)
    frame_dig -1
    int 0
    gtxnsas ApprovalProgramPages
    len
    assert // approval_program_pages(0)
    frame_dig -1
    int 0
    gtxnsas ClearStateProgramPages
    len
    assert // clear_state_program_pages(0)
    retsub


// test_cases.transaction.contract.TransactionContract.multiple_txns(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
multiple_txns:
    proto 3 0
    byte ""
    frame_dig -3
    int 0
    b multiple_txns_for_body@4

multiple_txns_for_header_1@2:
    frame_dig -2
    frame_bury 1
    frame_dig 0
    b multiple_txns_for_body@4

multiple_txns_for_header_2@3:
    frame_dig -1
    frame_bury 1
    frame_dig 0

multiple_txns_for_body@4:
    frame_dig 1
    gtxns GroupIndex
    dig 1
    ==
    assert
    dup
    int 1
    +
    frame_bury 0
    switch multiple_txns_for_header_1@2 multiple_txns_for_header_2@3
    retsub


// test_cases.transaction.contract.TransactionContract.any_txn(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
any_txn:
    proto 3 0
    byte ""
    int 0
    frame_dig -3
    b any_txn_for_body@4

any_txn_for_header_1@2:
    frame_dig -2
    frame_dig 0
    frame_bury 1
    b any_txn_for_body@4

any_txn_for_header_2@3:
    frame_dig -1
    frame_dig 0
    frame_bury 1

any_txn_for_body@4:
    gtxns GroupIndex
    frame_dig 1
    dup
    cover 2
    ==
    assert
    dup
    int 1
    +
    frame_bury 0
    switch any_txn_for_header_1@2 any_txn_for_header_2@3
    retsub


// test_cases.transaction.contract.TransactionContract.group_init(txn1: uint64, txn2: uint64, txn3: uint64) -> void:
group_init:
    proto 3 0
    byte ""
    frame_dig -3
    int 0
    b group_init_for_body@4

group_init_for_header_1@2:
    frame_dig -2
    frame_dig 0
    b group_init_for_body@4

group_init_for_header_2@3:
    frame_dig -1
    frame_dig 0

group_init_for_body@4:
    swap
    dup
    gtxns GroupIndex
    swap
    gtxns TxID
    swap
    gtxns TxID
    ==
    assert
    dup
    int 1
    +
    frame_bury 0
    switch group_init_for_header_1@2 group_init_for_header_2@3
    frame_dig -3
    gtxns TxID
    int 0
    gtxns TxID
    ==
    assert
    retsub
