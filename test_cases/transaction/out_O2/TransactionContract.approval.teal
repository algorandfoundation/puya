#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 2 3
    pushbytes ""
    dupn 2
    txn NumAppArgs
    bz main_after_if_else@16
    pushbytess 0x4c5c61ba 0x6b680318 0x16c4a32d 0x639872d6 0x50f8f1c3 0x5b3a00cf 0xcd62293d 0x02ea72e5 0x3056840b 0x96ef9a95 // method "create()void", method "pay(pay)void", method "key(keyreg)void", method "asset_config(acfg)void", method "asset_transfer(axfer)void", method "asset_freeze(afrz)void", method "application_call(appl)void", method "multiple_txns(appl,appl,appl)void", method "any_txn(txn,txn,txn)void", method "group_init(txn,txn,txn)void"
    txna ApplicationArgs 0
    match main_create_route@3 main_pay_route@4 main_key_route@5 main_asset_config_route@6 main_asset_transfer_route@7 main_asset_freeze_route@8 main_application_call_route@9 main_multiple_txns_route@10 main_any_txn_route@11 main_group_init_route@12

main_after_if_else@16:
    intc_1 // 0
    return

main_group_init_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_3 // 3
    -
    dup
    bury 4
    txn GroupIndex
    intc_2 // 2
    -
    bury 3
    txn GroupIndex
    intc_0 // 1
    -
    bury 2
    intc_1 // 0

main_for_body@19:
    swap
    dup
    gtxns GroupIndex
    swap
    gtxns TxID
    swap
    gtxns TxID
    ==
    assert
    switch main_for_header_1@20 main_for_header_2@21
    dig 2
    gtxns TxID
    intc_1 // 0
    gtxns TxID
    ==
    assert
    intc_0 // 1
    return

main_for_header_2@21:
    dup
    intc_2 // 2
    b main_for_body@19

main_for_header_1@20:
    dig 1
    intc_0 // 1
    b main_for_body@19

main_any_txn_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_3 // 3
    -
    txn GroupIndex
    intc_2 // 2
    -
    bury 3
    txn GroupIndex
    intc_0 // 1
    -
    bury 2
    intc_1 // 0

main_for_body@25:
    swap
    gtxns GroupIndex
    dig 1
    ==
    assert
    switch main_for_header_1@26 main_for_header_2@27

main_after_for@34:
    intc_0 // 1
    return

main_for_header_2@27:
    dup
    intc_2 // 2
    b main_for_body@25

main_for_header_1@26:
    dig 1
    intc_0 // 1
    b main_for_body@25

main_multiple_txns_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_3 // 3
    -
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    intc_2 // 2
    -
    dup
    bury 4
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    txn GroupIndex
    intc_0 // 1
    -
    dup
    bury 3
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    intc_1 // 0

main_for_body@31:
    swap
    gtxns GroupIndex
    dig 1
    ==
    assert
    switch main_for_header_1@32 main_for_header_2@33
    b main_after_for@34

main_for_header_2@33:
    dup
    intc_2 // 2
    b main_for_body@31

main_for_header_1@32:
    dig 1
    intc_0 // 1
    b main_for_body@31

main_application_call_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    dup
    callsub _common_checks
    dup
    gtxns ApplicationID
    assert // app_id
    dup
    gtxns OnCompletion
    assert // on_completion
    dup
    gtxns NumAppArgs
    assert // num_app_args
    dup
    gtxns NumAccounts
    assert // num_accounts
    dup
    gtxns ApprovalProgram
    len
    assert // approval_program
    dup
    gtxns ClearStateProgram
    len
    assert // clear_state_program
    dup
    gtxns NumAssets
    assert // num_assets
    dup
    gtxns NumApplications
    assert // num_apps
    dup
    gtxns GlobalNumUint
    assert // global_num_uint
    dup
    gtxns GlobalNumByteSlice
    assert // global_num_bytes
    dup
    gtxns LocalNumUint
    assert // local_num_uint
    dup
    gtxns LocalNumByteSlice
    assert // local_num_bytes
    dup
    gtxns ExtraProgramPages
    assert // extra_program_pages
    dup
    gtxns LastLog
    len
    assert // last_log
    dup
    gtxns NumApprovalProgramPages
    assert // num_approval_program_pages
    dup
    gtxns NumClearStateProgramPages
    assert // num_clear_state_program_pages
    dup
    intc_1 // 0
    gtxnsas ApplicationArgs
    len
    assert // app_args(0)
    dup
    intc_1 // 0
    gtxnsas Accounts
    global ZeroAddress
    !=
    assert // accounts(0)
    dup
    intc_1 // 0
    gtxnsas Assets
    assert // assets(0)
    dup
    intc_1 // 0
    gtxnsas Applications
    assert // apps(0)
    dup
    intc_1 // 0
    gtxnsas ApprovalProgramPages
    len
    assert // approval_program_pages(0)
    intc_1 // 0
    gtxnsas ClearStateProgramPages
    len
    assert // clear_state_program_pages(0)
    intc_0 // 1
    return

main_asset_freeze_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 5 // afrz
    ==
    assert // transaction type is afrz
    dup
    callsub _common_checks
    dup
    gtxns FreezeAsset
    assert // freeze_asset
    dup
    gtxns FreezeAssetAccount
    global ZeroAddress
    !=
    assert // freeze_account
    gtxns FreezeAssetFrozen
    assert // frozen
    intc_0 // 1
    return

main_asset_transfer_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    dup
    callsub _common_checks
    dup
    gtxns XferAsset
    assert // xfer_asset
    dup
    gtxns AssetAmount
    assert // asset_amount
    dup
    gtxns AssetSender
    global ZeroAddress
    !=
    assert // asset_sender
    dup
    gtxns AssetReceiver
    global ZeroAddress
    !=
    assert // asset_receiver
    gtxns AssetCloseTo
    global ZeroAddress
    !=
    assert // asset_close_to
    intc_0 // 1
    return

main_asset_config_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // acfg
    ==
    assert // transaction type is acfg
    dup
    callsub _common_checks
    dup
    gtxns ConfigAsset
    assert // config_asset
    dup
    gtxns ConfigAssetTotal
    assert // total
    dup
    gtxns ConfigAssetDecimals
    assert // decimals
    dup
    gtxns ConfigAssetDefaultFrozen
    assert // default_frozen
    dup
    gtxns ConfigAssetUnitName
    len
    assert // unit_name
    dup
    gtxns ConfigAssetName
    len
    assert // asset_name
    dup
    gtxns ConfigAssetURL
    len
    assert // url
    dup
    gtxns ConfigAssetMetadataHash
    len
    assert // metadata_hash
    dup
    gtxns ConfigAssetManager
    global ZeroAddress
    !=
    assert // manager
    dup
    gtxns ConfigAssetReserve
    global ZeroAddress
    !=
    assert // reserve
    dup
    gtxns ConfigAssetFreeze
    global ZeroAddress
    !=
    assert // freeze
    gtxns ConfigAssetClawback
    global ZeroAddress
    !=
    assert // clawback
    intc_0 // 1
    return

main_key_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // keyreg
    ==
    assert // transaction type is keyreg
    dup
    callsub _common_checks
    dup
    gtxns VotePK
    len
    assert // vote_key
    dup
    gtxns SelectionPK
    len
    assert // selection_key
    dup
    gtxns VoteKeyDilution
    assert // vote_key_dilution
    dup
    gtxns VoteFirst
    assert // vote_first
    dup
    gtxns VoteLast
    assert // vote_last
    dup
    gtxns Nonparticipation
    assert // non_participation
    gtxns StateProofPK
    len
    assert // state_proof_key
    intc_0 // 1
    return

main_pay_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    dup
    callsub _common_checks
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment should be for this app
    dup
    gtxns Amount
    pushint 1000 // 1000
    >
    assert // Payment should be for >1000 micro algos
    gtxns CloseRemainderTo
    global ZeroAddress
    ==
    assert // close_remainder_to
    intc_0 // 1
    return

main_create_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
_common_checks:
    proto 1 0
    frame_dig -1
    gtxns TxID
    len
    assert // txn_id
    frame_dig -1
    gtxns Sender
    global CreatorAddress
    ==
    assert // sender
    frame_dig -1
    gtxns Fee
    assert // fee
    frame_dig -1
    gtxns TypeEnum
    assert // type
    frame_dig -1
    gtxns Type
    len
    assert // type_bytes
    frame_dig -1
    gtxns Note
    pushbytes 0x
    ==
    assert // note
    frame_dig -1
    gtxns GroupIndex
    !
    assert // group_index
    frame_dig -1
    gtxns FirstValid
    assert // first_valid
    frame_dig -1
    gtxns LastValid
    assert // last_valid
    frame_dig -1
    gtxns Lease
    len
    assert // lease
    frame_dig -1
    gtxns RekeyTo
    global ZeroAddress
    ==
    assert // rekey_to
    retsub
