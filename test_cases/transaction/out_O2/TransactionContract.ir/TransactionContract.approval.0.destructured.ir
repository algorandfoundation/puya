main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create()void" => block@3, method "pay(pay)void" => block@4, method "key(keyreg)void" => block@5, method "asset_config(acfg)void" => block@6, method "asset_transfer(axfer)void" => block@7, method "asset_freeze(afrz)void" => block@8, method "application_call(appl)void" => block@9, method "multiple_txns(appl,appl,appl)void" => block@10, method "any_txn(txn,txn,txn)void" => block@11, method "group_init(txn,txn,txn)void" => block@12, * => block@16}
    block@3: // create_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@4: // pay_route_L31
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let tmp%11#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%11#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let tmp%0#6: bytes[32] = ((gtxns Receiver) txn#1)
        let tmp%1#5: bytes[32] = (global CurrentApplicationAddress)
        let tmp%2#1: bool = (== tmp%0#6 tmp%1#5)
        (assert tmp%2#1) // Payment should be for this app
        let tmp%3#0: uint64 = ((gtxns Amount) txn#1)
        let tmp%4#0: bool = (> tmp%3#0 1000u)
        (assert tmp%4#0) // Payment should be for >1000 micro algos
        let tmp%5#3: bytes[32] = ((gtxns CloseRemainderTo) txn#1)
        let tmp%6#2: bytes[32] = (global ZeroAddress)
        let tmp%7#2: bool = (== tmp%5#3 tmp%6#2)
        (assert tmp%7#2) // close_remainder_to
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@5: // key_route_L40
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        let tmp%16#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%16#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 keyreg)
        (assert gtxn_type_matches%1#0) // transaction type is keyreg
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let tmp%0#2: bytes = ((gtxns VotePK) txn#1)
        let tmp%1#8: uint64 = (len tmp%0#2)
        (assert tmp%1#8) // vote_key
        let tmp%3#1: bytes = ((gtxns SelectionPK) txn#1)
        let tmp%4#2: uint64 = (len tmp%3#1)
        (assert tmp%4#2) // selection_key
        let tmp%6#3: uint64 = ((gtxns VoteKeyDilution) txn#1)
        (assert tmp%6#3) // vote_key_dilution
        let tmp%8#4: uint64 = ((gtxns VoteFirst) txn#1)
        (assert tmp%8#4) // vote_first
        let tmp%10#1: uint64 = ((gtxns VoteLast) txn#1)
        (assert tmp%10#1) // vote_last
        let tmp%12#3: bool = ((gtxns Nonparticipation) txn#1)
        (assert tmp%12#3) // non_participation
        let tmp%13#3: bytes = ((gtxns StateProofPK) txn#1)
        let tmp%14#0: uint64 = (len tmp%13#3)
        (assert tmp%14#0) // state_proof_key
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@6: // asset_config_route_L51
        let tmp%17#0: uint64 = (txn OnCompletion)
        let tmp%18#0: bool = (! tmp%17#0)
        (assert tmp%18#0) // OnCompletion is not NoOp
        let tmp%19#0: uint64 = (txn ApplicationID)
        (assert tmp%19#0) // can only call when not creating
        let tmp%21#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%21#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 acfg)
        (assert gtxn_type_matches%2#0) // transaction type is acfg
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let reinterpret_bool%0#0: bool = ((gtxns ConfigAsset) txn#1)
        (assert reinterpret_bool%0#0) // config_asset
        let tmp%0#1: uint64 = ((gtxns ConfigAssetTotal) txn#1)
        (assert tmp%0#1) // total
        let tmp%2#2: uint64 = ((gtxns ConfigAssetDecimals) txn#1)
        (assert tmp%2#2) // decimals
        let tmp%4#0: bool = ((gtxns ConfigAssetDefaultFrozen) txn#1)
        (assert tmp%4#0) // default_frozen
        let tmp%5#4: bytes = ((gtxns ConfigAssetUnitName) txn#1)
        let tmp%6#3: uint64 = (len tmp%5#4)
        (assert tmp%6#3) // unit_name
        let tmp%8#3: bytes = ((gtxns ConfigAssetName) txn#1)
        let tmp%9#0: uint64 = (len tmp%8#3)
        (assert tmp%9#0) // asset_name
        let tmp%11#2: bytes = ((gtxns ConfigAssetURL) txn#1)
        let tmp%12#0: uint64 = (len tmp%11#2)
        (assert tmp%12#0) // url
        let tmp%14#2: bytes = ((gtxns ConfigAssetMetadataHash) txn#1)
        let tmp%15#2: uint64 = (len tmp%14#2)
        (assert tmp%15#2) // metadata_hash
        let tmp%17#2: bytes[32] = ((gtxns ConfigAssetManager) txn#1)
        let tmp%18#2: bytes[32] = (global ZeroAddress)
        let tmp%19#2: bool = (!= tmp%17#2 tmp%18#2)
        (assert tmp%19#2) // manager
        let tmp%20#2: bytes[32] = ((gtxns ConfigAssetReserve) txn#1)
        let tmp%21#2: bytes[32] = (global ZeroAddress)
        let tmp%22#2: bool = (!= tmp%20#2 tmp%21#2)
        (assert tmp%22#2) // reserve
        let tmp%23#2: bytes[32] = ((gtxns ConfigAssetFreeze) txn#1)
        let tmp%24#2: bytes[32] = (global ZeroAddress)
        let tmp%25#2: bool = (!= tmp%23#2 tmp%24#2)
        (assert tmp%25#2) // freeze
        let tmp%26#2: bytes[32] = ((gtxns ConfigAssetClawback) txn#1)
        let tmp%27#2: bytes[32] = (global ZeroAddress)
        let tmp%28#0: bool = (!= tmp%26#2 tmp%27#2)
        (assert tmp%28#0) // clawback
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@7: // asset_transfer_route_L68
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let tmp%26#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%26#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let reinterpret_bool%0#0: bool = ((gtxns XferAsset) txn#1)
        (assert reinterpret_bool%0#0) // xfer_asset
        let tmp%0#1: uint64 = ((gtxns AssetAmount) txn#1)
        (assert tmp%0#1) // asset_amount
        let tmp%2#4: bytes[32] = ((gtxns AssetSender) txn#1)
        let tmp%3#4: bytes[32] = (global ZeroAddress)
        let tmp%4#0: bool = (!= tmp%2#4 tmp%3#4)
        (assert tmp%4#0) // asset_sender
        let tmp%5#3: bytes[32] = ((gtxns AssetReceiver) txn#1)
        let tmp%6#2: bytes[32] = (global ZeroAddress)
        let tmp%7#2: bool = (!= tmp%5#3 tmp%6#2)
        (assert tmp%7#2) // asset_receiver
        let tmp%8#2: bytes[32] = ((gtxns AssetCloseTo) txn#1)
        let tmp%9#2: bytes[32] = (global ZeroAddress)
        let tmp%10#2: bool = (!= tmp%8#2 tmp%9#2)
        (assert tmp%10#2) // asset_close_to
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@8: // asset_freeze_route_L77
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let tmp%31#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%31#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 afrz)
        (assert gtxn_type_matches%4#0) // transaction type is afrz
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let reinterpret_bool%0#0: bool = ((gtxns FreezeAsset) txn#1)
        (assert reinterpret_bool%0#0) // freeze_asset
        let tmp%0#6: bytes[32] = ((gtxns FreezeAssetAccount) txn#1)
        let tmp%1#5: bytes[32] = (global ZeroAddress)
        let tmp%2#1: bool = (!= tmp%0#6 tmp%1#5)
        (assert tmp%2#1) // freeze_account
        let tmp%3#3: bool = ((gtxns FreezeAssetFrozen) txn#1)
        (assert tmp%3#3) // frozen
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@9: // application_call_route_L85
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        let tmp%36#0: uint64 = (txn GroupIndex)
        let txn#1: uint64 = (- tmp%36#0 1u)
        let gtxn_type%5#0: uint64 = ((gtxns TypeEnum) txn#1)
        let gtxn_type_matches%5#0: bool = (== gtxn_type%5#0 appl)
        (assert gtxn_type_matches%5#0) // transaction type is appl
        test_cases.transaction.contract.TransactionContract._common_checks(txn#1)
        let reinterpret_bool%0#0: bool = ((gtxns ApplicationID) txn#1)
        (assert reinterpret_bool%0#0) // app_id
        let tmp%0#1: uint64 = ((gtxns OnCompletion) txn#1)
        (assert tmp%0#1) // on_completion
        let tmp%2#2: uint64 = ((gtxns NumAppArgs) txn#1)
        (assert tmp%2#2) // num_app_args
        let tmp%4#2: uint64 = ((gtxns NumAccounts) txn#1)
        (assert tmp%4#2) // num_accounts
        let tmp%6#1: bytes = ((gtxns ApprovalProgram) txn#1)
        let tmp%7#0: uint64 = (len tmp%6#1)
        (assert tmp%7#0) // approval_program
        let tmp%9#1: bytes = ((gtxns ClearStateProgram) txn#1)
        let tmp%10#1: uint64 = (len tmp%9#1)
        (assert tmp%10#1) // clear_state_program
        let tmp%12#0: uint64 = ((gtxns NumAssets) txn#1)
        (assert tmp%12#0) // num_assets
        let tmp%14#0: uint64 = ((gtxns NumApplications) txn#1)
        (assert tmp%14#0) // num_apps
        let tmp%16#0: uint64 = ((gtxns GlobalNumUint) txn#1)
        (assert tmp%16#0) // global_num_uint
        let tmp%18#1: uint64 = ((gtxns GlobalNumByteSlice) txn#1)
        (assert tmp%18#1) // global_num_bytes
        let tmp%20#1: uint64 = ((gtxns LocalNumUint) txn#1)
        (assert tmp%20#1) // local_num_uint
        let tmp%22#0: uint64 = ((gtxns LocalNumByteSlice) txn#1)
        (assert tmp%22#0) // local_num_bytes
        let tmp%24#0: uint64 = ((gtxns ExtraProgramPages) txn#1)
        (assert tmp%24#0) // extra_program_pages
        let tmp%26#1: bytes = ((gtxns LastLog) txn#1)
        let tmp%27#0: uint64 = (len tmp%26#1)
        (assert tmp%27#0) // last_log
        let tmp%29#0: uint64 = ((gtxns NumApprovalProgramPages) txn#1)
        (assert tmp%29#0) // num_approval_program_pages
        let tmp%31#0: uint64 = ((gtxns NumClearStateProgramPages) txn#1)
        (assert tmp%31#0) // num_clear_state_program_pages
        let tmp%33#1: bytes = ((gtxnsas ApplicationArgs) txn#1 0u)
        let tmp%34#0: uint64 = (len tmp%33#1)
        (assert tmp%34#0) // app_args(0)
        let tmp%36#1: bytes[32] = ((gtxnsas Accounts) txn#1 0u)
        let tmp%37#1: bytes[32] = (global ZeroAddress)
        let tmp%38#0: bool = (!= tmp%36#1 tmp%37#1)
        (assert tmp%38#0) // accounts(0)
        let reinterpret_bool%1#0: bool = ((gtxnsas Assets) txn#1 0u)
        (assert reinterpret_bool%1#0) // assets(0)
        let reinterpret_bool%2#0: bool = ((gtxnsas Applications) txn#1 0u)
        (assert reinterpret_bool%2#0) // apps(0)
        let tmp%39#1: bytes = ((gtxnsas ApprovalProgramPages) txn#1 0u)
        let tmp%40#1: uint64 = (len tmp%39#1)
        (assert tmp%40#1) // approval_program_pages(0)
        let tmp%42#1: bytes = ((gtxnsas ClearStateProgramPages) txn#1 0u)
        let tmp%43#0: uint64 = (len tmp%42#1)
        (assert tmp%43#0) // clear_state_program_pages(0)
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@10: // multiple_txns_route_L111
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let tmp%41#0: uint64 = (txn GroupIndex)
        let txn1#0: uint64 = (- tmp%41#0 3u)
        let gtxn_type%6#0: uint64 = ((gtxns TypeEnum) txn1#0)
        let gtxn_type_matches%6#0: bool = (== gtxn_type%6#0 appl)
        (assert gtxn_type_matches%6#0) // transaction type is appl
        let tmp%42#0: uint64 = (txn GroupIndex)
        let txn2#0: uint64 = (- tmp%42#0 2u)
        let gtxn_type%7#0: uint64 = ((gtxns TypeEnum) txn2#0)
        let gtxn_type_matches%7#0: bool = (== gtxn_type%7#0 appl)
        (assert gtxn_type_matches%7#0) // transaction type is appl
        let tmp%43#0: uint64 = (txn GroupIndex)
        let txn3#0: uint64 = (- tmp%43#0 1u)
        let gtxn_type%8#0: uint64 = ((gtxns TypeEnum) txn3#0)
        let gtxn_type_matches%8#0: bool = (== gtxn_type%8#0 appl)
        (assert gtxn_type_matches%8#0) // transaction type is appl
        let index#0: uint64 = 0u
        let app#1: uint64 = txn1#0
        goto block@31
    block@31: // for_body_L119
        let tmp%0#1: uint64 = ((gtxns GroupIndex) app#1)
        let tmp%1#2: bool = (== tmp%0#1 index#0)
        (assert tmp%1#2)
        goto_nth [block@32, block@33][index#0] else goto block@34
    block@32: // for_header_1_L118
        let index#0: uint64 = 1u
        let app#1: uint64 = txn2#0
        goto block@31
    block@33: // for_header_2_L118
        let index#0: uint64 = 2u
        let app#1: uint64 = txn3#0
        goto block@31
    block@34: // after_for_L118
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@11: // any_txn_route_L121
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let tmp%48#0: uint64 = (txn GroupIndex)
        let txn1#0: uint64 = (- tmp%48#0 3u)
        let tmp%49#0: uint64 = (txn GroupIndex)
        let txn2#0: uint64 = (- tmp%49#0 2u)
        let tmp%50#0: uint64 = (txn GroupIndex)
        let txn3#0: uint64 = (- tmp%50#0 1u)
        let index#0: uint64 = 0u
        let txn#1: uint64 = txn1#0
        goto block@25
    block@25: // for_body_L129
        let tmp%0#1: uint64 = ((gtxns GroupIndex) txn#1)
        let tmp%1#2: bool = (== tmp%0#1 index#0)
        (assert tmp%1#2)
        goto_nth [block@26, block@27][index#0] else goto block@34
    block@26: // for_header_1_L128
        let index#0: uint64 = 1u
        let txn#1: uint64 = txn2#0
        goto block@25
    block@27: // for_header_2_L128
        let index#0: uint64 = 2u
        let txn#1: uint64 = txn3#0
        goto block@25
    block@12: // group_init_route_L131
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        let tmp%55#0: uint64 = (txn GroupIndex)
        let txn1#0: uint64 = (- tmp%55#0 3u)
        let tmp%56#0: uint64 = (txn GroupIndex)
        let txn2#0: uint64 = (- tmp%56#0 2u)
        let tmp%57#0: uint64 = (txn GroupIndex)
        let txn3#0: uint64 = (- tmp%57#0 1u)
        let loop_counter%0#0: uint64 = 0u
        let txn#1: uint64 = txn1#0
        goto block@19
    block@19: // for_body_L139
        let txn_from_index#0: uint64 = ((gtxns GroupIndex) txn#1)
        let tmp%0#2: bytes = ((gtxns TxID) txn#1)
        let tmp%1#1: bytes = ((gtxns TxID) txn_from_index#0)
        let tmp%2#1: bool = (== tmp%0#2 tmp%1#1)
        (assert tmp%2#1)
        goto_nth [block@20, block@21][loop_counter%0#0] else goto block@22
    block@20: // for_header_1_L138
        let loop_counter%0#0: uint64 = 1u
        let txn#1: uint64 = txn2#0
        goto block@19
    block@21: // for_header_2_L138
        let loop_counter%0#0: uint64 = 2u
        let txn#1: uint64 = txn3#0
        goto block@19
    block@22: // after_for_L138
        let tmp%3#1: bytes = ((gtxns TxID) txn1#0)
        let tmp%4#1: bytes = ((gtxns TxID) 0u)
        let tmp%5#1: bool = (== tmp%3#1 tmp%4#1)
        (assert tmp%5#1)
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@16: // after_if_else_L11
        let test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.transaction.contract.TransactionContract.__puya_arc4_router__%0#0
        goto block@17
    block@17: // after_inlined_test_cases.transaction.contract.TransactionContract.__puya_arc4_router___L1
        return tmp%0#0

subroutine test_cases.transaction.contract.TransactionContract._common_checks(txn: uint64) -> void:
    block@0: // L16
        let tmp%0#0: bytes = ((gtxns TxID) txn#0)
        let tmp%1#0: uint64 = (len tmp%0#0)
        (assert tmp%1#0) // txn_id
        let tmp%3#0: bytes[32] = ((gtxns Sender) txn#0)
        let tmp%4#0: bytes[32] = (global CreatorAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // sender
        let tmp%6#0: uint64 = ((gtxns Fee) txn#0)
        (assert tmp%6#0) // fee
        let tmp%8#0: uint64 = ((gtxns TypeEnum) txn#0)
        (assert tmp%8#0) // type
        let tmp%10#0: bytes = ((gtxns Type) txn#0)
        let tmp%11#0: uint64 = (len tmp%10#0)
        (assert tmp%11#0) // type_bytes
        let tmp%13#0: bytes = ((gtxns Note) txn#0)
        let tmp%14#0: bool = (== tmp%13#0 0x)
        (assert tmp%14#0) // note
        let tmp%15#0: uint64 = ((gtxns GroupIndex) txn#0)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // group_index
        let tmp%17#0: uint64 = ((gtxns FirstValid) txn#0)
        (assert tmp%17#0) // first_valid
        let tmp%19#0: uint64 = ((gtxns LastValid) txn#0)
        (assert tmp%19#0) // last_valid
        let tmp%21#0: bytes = ((gtxns Lease) txn#0)
        let tmp%22#0: uint64 = (len tmp%21#0)
        (assert tmp%22#0) // lease
        let tmp%24#0: bytes[32] = ((gtxns RekeyTo) txn#0)
        let tmp%25#0: bytes[32] = (global ZeroAddress)
        let tmp%26#0: bool = (== tmp%24#0 tmp%25#0)
        (assert tmp%26#0) // rekey_to
        return 