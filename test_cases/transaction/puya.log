debug: PuyaOptions(paths=['transaction'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@5: // ternary_merge_L110
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3, ternary_result%6#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%7#1: uint64 = undefined while trying to resolve 'range_item%7' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%7#2: uint64 = undefined while trying to resolve 'range_item%7' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%7#0 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%7#3 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5, range_item%7#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%7#1 to Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1
debug: Deleting Phi assignment: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Sealing block@0: // L16
debug: Terminated block@0: // L16
debug: Sealing block@0: // L40
debug: Terminated block@0: // L40
debug: Sealing block@0: // L51
debug: Terminated block@0: // L51
debug: Sealing block@0: // L68
debug: Terminated block@0: // L68
debug: Sealing block@0: // L77
debug: Terminated block@0: // L77
debug: Sealing block@0: // L85
debug: Terminated block@0: // L85
debug: Sealing block@0: // L111
debug: Terminated block@0: // L111
debug: Sealing block@1: // for_header_0_L118
debug: Terminated block@1: // for_header_0_L118
debug: Terminated block@2: // for_header_1_L118
debug: Terminated block@3: // for_header_2_L118
debug: Sealing block@None: // for_body_L118
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@4: // for_body_L118
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1) in block@1: // for_header_0_L118
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L118
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@2: // for_header_1_L118
debug: Added tuple_index%0#2 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2) in block@2: // for_header_1_L118
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L118
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@3: // for_header_2_L118
debug: Added tuple_index%0#3 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2, tuple_index%0#3 <- block@3) in block@3: // for_header_2_L118
debug: Created Phi assignment: let app#3: uint64 = undefined while trying to resolve 'app' in block@4: // for_body_L118
debug: Added app#0 to Phi node: let app#3: uint64 = φ(app#0 <- block@1) in block@1: // for_header_0_L118
debug: Added app#1 to Phi node: let app#3: uint64 = φ(app#0 <- block@1, app#1 <- block@2) in block@2: // for_header_1_L118
debug: Added app#2 to Phi node: let app#3: uint64 = φ(app#0 <- block@1, app#1 <- block@2, app#2 <- block@3) in block@3: // for_header_2_L118
debug: Terminated block@4: // for_body_L118
debug: Sealing block@5: // for_footer_L118
debug: Terminated block@5: // for_footer_L118
debug: Sealing block@2: // for_header_1_L118
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L118
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@3: // for_header_2_L118
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L118
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L118
debug: Terminated block@6: // after_for_L118
debug: Sealing block@0: // L121
debug: Terminated block@0: // L121
debug: Sealing block@1: // for_header_0_L131
debug: Terminated block@1: // for_header_0_L131
debug: Terminated block@2: // for_header_1_L131
debug: Terminated block@3: // for_header_2_L131
debug: Sealing block@None: // for_body_L131
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@4: // for_body_L131
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1) in block@1: // for_header_0_L131
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L131
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@2: // for_header_1_L131
debug: Added tuple_index%0#2 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2) in block@2: // for_header_1_L131
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L131
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@3: // for_header_2_L131
debug: Added tuple_index%0#3 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2, tuple_index%0#3 <- block@3) in block@3: // for_header_2_L131
debug: Created Phi assignment: let txn#3: uint64 = undefined while trying to resolve 'txn' in block@4: // for_body_L131
debug: Added txn#0 to Phi node: let txn#3: uint64 = φ(txn#0 <- block@1) in block@1: // for_header_0_L131
debug: Added txn#1 to Phi node: let txn#3: uint64 = φ(txn#0 <- block@1, txn#1 <- block@2) in block@2: // for_header_1_L131
debug: Added txn#2 to Phi node: let txn#3: uint64 = φ(txn#0 <- block@1, txn#1 <- block@2, txn#2 <- block@3) in block@3: // for_header_2_L131
debug: Terminated block@4: // for_body_L131
debug: Sealing block@5: // for_footer_L131
debug: Terminated block@5: // for_footer_L131
debug: Sealing block@2: // for_header_1_L131
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L131
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@3: // for_header_2_L131
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L131
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L131
debug: Terminated block@6: // after_for_L131
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Sealing block@None: // switch_case_default_L11
debug: Sealing block@None: // create_route_L12
debug: Sealing block@None: // pay_route_L31
debug: Sealing block@None: // key_route_L40
debug: Sealing block@None: // asset_config_route_L51
debug: Sealing block@None: // asset_transfer_route_L68
debug: Sealing block@None: // asset_freeze_route_L77
debug: Sealing block@None: // application_call_route_L85
debug: Sealing block@None: // multiple_txns_route_L111
debug: Sealing block@None: // any_txn_route_L121
debug: Terminated block@1: // create_route_L12
debug: Terminated block@2: // pay_route_L31
debug: Terminated block@3: // key_route_L40
debug: Terminated block@4: // asset_config_route_L51
debug: Terminated block@5: // asset_transfer_route_L68
debug: Terminated block@6: // asset_freeze_route_L77
debug: Terminated block@7: // application_call_route_L85
debug: Terminated block@8: // multiple_txns_route_L111
debug: Terminated block@9: // any_txn_route_L121
debug: Terminated block@10: // switch_case_default_L11
debug: Sealing block@11: // switch_case_next_L11
debug: Terminated block@11: // switch_case_next_L11
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Output IR to transaction/out/contract_TransactionContract.ssa.ir
info: Optimizing test_cases.transaction.contract.TransactionContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%11#0, maybe_value%8#0
debug: Replacing {maybe_value%8#0} with awst_tmp%11#0 made 1 modifications
debug: Found equivalence set: tmp%13#0, maybe_value_did_exist%9#0
debug: Replacing {maybe_value_did_exist%9#0} with tmp%13#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#1, maybe_value%17#0
debug: Replacing {maybe_value%17#0} with awst_tmp%11#1 made 1 modifications
debug: Found equivalence set: tmp%21#0, maybe_value_did_exist%18#0
debug: Replacing {maybe_value_did_exist%18#0} with tmp%21#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#2, maybe_value%25#0
debug: Replacing {maybe_value%25#0} with awst_tmp%11#2 made 1 modifications
debug: Found equivalence set: tmp%29#0, maybe_value_did_exist%26#0
debug: Replacing {maybe_value_did_exist%26#0} with tmp%29#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#3, maybe_value%33#0
debug: Replacing {maybe_value%33#0} with awst_tmp%11#3 made 1 modifications
debug: Found equivalence set: tmp%37#0, maybe_value_did_exist%34#0
debug: Replacing {maybe_value_did_exist%34#0} with tmp%37#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#4, maybe_value%41#0
debug: Replacing {maybe_value%41#0} with awst_tmp%11#4 made 1 modifications
debug: Found equivalence set: tmp%45#0, maybe_value_did_exist%42#0
debug: Replacing {maybe_value_did_exist%42#0} with tmp%45#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#5, maybe_value%49#0
debug: Replacing {maybe_value%49#0} with awst_tmp%11#5 made 1 modifications
debug: Found equivalence set: tmp%53#0, maybe_value_did_exist%50#0
debug: Replacing {maybe_value_did_exist%50#0} with tmp%53#0 made 1 modifications
debug: Found equivalence set: awst_tmp%60#0, maybe_value%57#0
debug: Replacing {maybe_value%57#0} with awst_tmp%60#0 made 1 modifications
debug: Found equivalence set: tmp%62#0, maybe_value_did_exist%58#0
debug: Replacing {maybe_value_did_exist%58#0} with tmp%62#0 made 1 modifications
debug: Found equivalence set: awst_tmp%66#0, maybe_value%63#0
debug: Replacing {maybe_value%63#0} with awst_tmp%66#0 made 1 modifications
debug: Found equivalence set: tmp%68#0, maybe_value_did_exist%64#0
debug: Replacing {maybe_value_did_exist%64#0} with tmp%68#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#6, maybe_value%69#0
debug: Replacing {maybe_value%69#0} with awst_tmp%11#6 made 1 modifications
debug: Found equivalence set: tmp%73#0, maybe_value_did_exist%70#0
debug: Replacing {maybe_value_did_exist%70#0} with tmp%73#0 made 1 modifications
debug: Found equivalence set: awst_tmp%60#1, maybe_value%77#0
debug: Replacing {maybe_value%77#0} with awst_tmp%60#1 made 1 modifications
debug: Found equivalence set: tmp%81#0, maybe_value_did_exist%78#0
debug: Replacing {maybe_value_did_exist%78#0} with tmp%81#0 made 1 modifications
debug: Found equivalence set: awst_tmp%66#1, maybe_value%82#0
debug: Replacing {maybe_value%82#0} with awst_tmp%66#1 made 1 modifications
debug: Found equivalence set: tmp%86#0, maybe_value_did_exist%83#0
debug: Replacing {maybe_value_did_exist%83#0} with tmp%86#0 made 1 modifications
debug: Found equivalence set: awst_tmp%11#7, maybe_value%87#0
debug: Replacing {maybe_value%87#0} with awst_tmp%11#7 made 1 modifications
debug: Found equivalence set: tmp%91#0, maybe_value_did_exist%88#0
debug: Replacing {maybe_value_did_exist%88#0} with tmp%91#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: adding block@0: // L11 as a predecessor of block@11: // switch_case_next_L11 due to inlining of block@10: // switch_case_default_L11
debug: simplified terminator of block@0: // L11 from switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(appl,appl,appl)void" => block@9, * => block@10} to switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(appl,appl,appl)void" => block@9, * => block@11}
debug: simplified terminator of block@0: // L11 from switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(appl,appl,appl)void" => block@9, * => block@11} to switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(appl,appl,appl)void" => block@9, * => fail // reject transaction}
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@11: // switch_case_next_L11 into block@10: // switch_case_default_L11
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@10: // switch_case_default_L11
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.pay
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract._common_checks
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.key
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_config
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.application_call
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: txn1#0, app#0
debug: Replacing {app#0} with txn1#0 made 1 modifications
debug: Found equivalence set: tuple_index%0#1, index#0
debug: Replacing {tuple_index%0#1} with index#0 made 3 modifications
debug: Found equivalence set: txn2#0, app#1
debug: Replacing {app#1} with txn2#0 made 1 modifications
debug: Found equivalence set: txn3#0, app#2
debug: Replacing {app#2} with txn3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: simplified terminator of block@5: // for_footer_L118 from goto_nth [block@2, block@3][index#0] else goto block@6 to goto_nth [block@2, block@3][index#0] else return 
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L118 with block@0: // L111 in block@4: // for_body_L118
debug: Merged linear block@1: // for_header_0_L118 into block@0: // L111
debug: Replaced predecessor block@5: // for_footer_L118 with block@4: // for_body_L118 in block@2: // for_header_1_L118
debug: Replaced predecessor block@5: // for_footer_L118 with block@4: // for_body_L118 in block@3: // for_header_2_L118
debug: Merged linear block@5: // for_footer_L118 into block@4: // for_body_L118
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L118 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L118 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@6: // after_for_L118
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.any_txn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_index%0#1, index#0
debug: Replacing {tuple_index%0#1} with index#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable txn1#0
debug: Removing unused variable txn2#0
debug: Removing unused variable txn3#0
debug: Optimizer: Simplify Control Ops
debug: simplified terminator of block@5: // for_footer_L131 from goto_nth [block@2, block@3][index#0] else goto block@6 to goto_nth [block@2, block@3][index#0] else return 
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L131 with block@0: // L121 in block@4: // for_body_L131
debug: Merged linear block@1: // for_header_0_L131 into block@0: // L121
debug: Replaced predecessor block@5: // for_footer_L131 with block@4: // for_body_L131 in block@2: // for_header_1_L131
debug: Replaced predecessor block@5: // for_footer_L131 with block@4: // for_body_L131 in block@3: // for_header_2_L131
debug: Merged linear block@5: // for_footer_L131 into block@4: // for_body_L131
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@6: // after_for_L131
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to transaction/out/contract_TransactionContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.create
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.pay
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract._common_checks
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.key
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_config
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.application_call
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L118 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L118 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.any_txn
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 2, ending loop
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.approval_program
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.create
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.pay
debug: Removing Phis from test_cases.transaction.contract.TransactionContract._common_checks
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.key
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_config
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.application_call
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.any_txn
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.approval_program using strategy RootOperandGrouping
debug: Coalescing awst_tmp%11#0 with [awst_tmp%11#1, awst_tmp%11#2, awst_tmp%11#3, awst_tmp%11#4, awst_tmp%11#5, awst_tmp%11#6, awst_tmp%11#7]
debug: Coalescing awst_tmp%60#0 with [awst_tmp%60#1]
debug: Coalescing awst_tmp%66#0 with [awst_tmp%66#1]
debug: Coalescing resulted in 27 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.create using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.pay using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract._common_checks using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.key using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_config using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_transfer using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_freeze using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.application_call using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.multiple_txns using strategy RootOperandGrouping
debug: Coalescing tuple_index%0#0 with [tuple_index%0#4]
debug: Coalescing index#0 with [index#1]
debug: Coalescing app#3 with [app#4]
debug: Coalescing resulted in 11 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.any_txn using strategy RootOperandGrouping
debug: Coalescing tuple_index%0#0 with [tuple_index%0#4]
debug: Coalescing txn#0 with [txn#7, txn#1, txn#2, txn#3]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 17 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.approval_program
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.create
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.pay
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract._common_checks
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.key
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_config
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.application_call
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.multiple_txns
debug: loc: {index#0=None, app#3=None, tuple_index%0#0=tuple_index%0#0, txn1#0=txn1#0}
debug: pred: {index#0=tuple_index%0#0, app#3=txn1#0}
debug: ready: index#0, app#3
debug: to_do: index#0, app#3
debug: * avail app#3
debug: * avail txn1#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do app#3
debug: * to_do index#0
debug: loc: {index#0=None, app#3=None, tuple_index%0#0=tuple_index%0#0, txn2#0=txn2#0}
debug: pred: {index#0=tuple_index%0#0, app#3=txn2#0}
debug: ready: index#0, app#3
debug: to_do: index#0, app#3
debug: * avail app#3
debug: * avail txn2#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do app#3
debug: * to_do index#0
debug: loc: {index#0=None, app#3=None, tuple_index%0#0=tuple_index%0#0, txn3#0=txn3#0}
debug: pred: {index#0=tuple_index%0#0, app#3=txn3#0}
debug: ready: index#0, app#3
debug: to_do: index#0, app#3
debug: * avail app#3
debug: * avail txn3#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do app#3
debug: * to_do index#0
debug: loc: {index#0=index#0, app#3=app#3}
debug: pred: {index#0=index#0, app#3=app#3}
debug: ready: 
debug: to_do: index#0, app#3
debug: * to_do app#3
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.any_txn
debug: loc: {index#0=None, txn#0=txn#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, txn#0=txn#0}
debug: ready: index#0
debug: to_do: index#0, txn#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do txn#0
debug: * to_do index#0
debug: loc: {index#0=None, txn#0=txn#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, txn#0=txn#0}
debug: ready: index#0
debug: to_do: index#0, txn#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do txn#0
debug: * to_do index#0
debug: loc: {index#0=None, txn#0=txn#0, tuple_index%0#0=tuple_index%0#0}
debug: pred: {index#0=tuple_index%0#0, txn#0=txn#0}
debug: ready: index#0
debug: to_do: index#0, txn#0
debug: * avail index#0
debug: * avail tuple_index%0#0
debug: * to_do txn#0
debug: * to_do index#0
debug: loc: {index#0=index#0, txn#0=txn#0}
debug: pred: {index#0=index#0, txn#0=txn#0}
debug: ready: 
debug: to_do: index#0, txn#0
debug: * to_do txn#0
debug: * to_do index#0
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to transaction/out/contract_TransactionContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[12]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[14]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[16]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[5]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[7]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[10]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[12]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[15]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[17]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[24]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[26]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[29]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[31]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[1]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[3]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[5]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[7]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[10]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[12]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[15]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[17]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[24]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[26]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[29]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[31]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[1]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[3]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[5]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[7]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[10]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[12]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[15]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[17]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[24]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[26]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[29]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[31]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[1]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[3]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[5]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[7]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[10]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[12]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[15]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[17]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[24]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[26]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[29]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[31]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[1]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[3]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[5]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[7]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[10]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[12]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[15]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[17]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[24]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[26]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[29]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[31]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[1]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[3]: 'load tmp%46#0' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[5]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[7]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[10]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[12]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[15]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[17]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[20]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[22]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[24]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[26]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[29]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[31]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[23]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[1]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[3]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[5]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[7]: 'load tmp%55#0' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[10]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[12]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[15]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[17]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[20]: 'store awst_tmp%60#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[22]: 'load awst_tmp%60#0' with 'load awst_tmp%60#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[24]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[26]: 'load tmp%61#0' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[29]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[31]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[34]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[36]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[39]: 'store awst_tmp%66#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[41]: 'load awst_tmp%66#0' with 'load awst_tmp%66#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[43]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[45]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[48]: 'store tmp%68#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[50]: 'load tmp%68#0' with 'load tmp%68#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[53]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[55]: 'load tmp%71#0' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[58]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[60]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[62]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[64]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[67]: 'store tmp%73#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[69]: 'load tmp%73#0' with 'load tmp%73#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[61]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[42]: 'store awst_tmp%66#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%66#0' with 'load awst_tmp%66#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[23]: 'store awst_tmp%60#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%60#0' with 'load awst_tmp%60#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[1]: 'store tmp%74#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[3]: 'load tmp%74#0' with 'load tmp%74#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[5]: 'store tmp%75#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[7]: 'load tmp%75#0' with 'load tmp%75#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[10]: 'store tmp%76#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[12]: 'load tmp%76#0' with 'load tmp%76#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[15]: 'store tmp%79#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[17]: 'load tmp%79#0' with 'load tmp%79#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[20]: 'store awst_tmp%60#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[22]: 'load awst_tmp%60#0' with 'load awst_tmp%60#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[24]: 'store tmp%80#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[26]: 'load tmp%80#0' with 'load tmp%80#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[29]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[31]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[34]: 'store tmp%84#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[36]: 'load tmp%84#0' with 'load tmp%84#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[39]: 'store awst_tmp%66#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[41]: 'load awst_tmp%66#0' with 'load awst_tmp%66#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[43]: 'store tmp%85#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[45]: 'load tmp%85#0' with 'load tmp%85#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[48]: 'store tmp%86#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[50]: 'load tmp%86#0' with 'load tmp%86#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[53]: 'store tmp%89#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[55]: 'load tmp%89#0' with 'load tmp%89#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[58]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[60]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[62]: 'store tmp%90#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[64]: 'load tmp%90#0' with 'load tmp%90#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[67]: 'store tmp%91#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[69]: 'load tmp%91#0' with 'load tmp%91#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[61]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[74]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[42]: 'store awst_tmp%66#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[74]: 'load awst_tmp%66#0' with 'load awst_tmp%66#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[23]: 'store awst_tmp%60#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[74]: 'load awst_tmp%60#0' with 'load awst_tmp%60#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.transaction.contract.TransactionContract.approval_program
debug: Inserted pay_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[21]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[23]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[33]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[35]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[30]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[33]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[29]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[18]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[20]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[26]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[30]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[32]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[36]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[38]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[40]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[42]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[46]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[48]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[51]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[53]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[57]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[59]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[61]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[63]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[67]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[69]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[73]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[75]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[79]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[81]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[83]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[85]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[95]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[97]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[14]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[17]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[92]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[95]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[17]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[91]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[96]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[22]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[24]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[28]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[30]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[34]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[36]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[40]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[42]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[46]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[48]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[52]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[54]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[56]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[58]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[19]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[22]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[23]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[16]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[24]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[28]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[30]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[32]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[38]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[40]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[42]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[44]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[48]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[50]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[52]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[54]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[58]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[60]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[62]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[64]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[74]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[76]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[86]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[88]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[98]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[100]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[110]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[112]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[70]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[73]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[83]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[86]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[96]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[99]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[109]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[112]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[68]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[73]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[82]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[87]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[96]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[101]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[110]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[115]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[22]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[24]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[34]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[36]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[46]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[48]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[21]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[31]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[34]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[44]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[47]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[16]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[21]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[30]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[35]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[44]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[49]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[22]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[24]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[15]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[15]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[16]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[24]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[28]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[30]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[32]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[38]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[40]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[42]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[44]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[48]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[50]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[54]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[56]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[60]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[62]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[66]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[68]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[72]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[74]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[78]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[80]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[84]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[86]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[90]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[92]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[94]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[96]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[100]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[102]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[106]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[108]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[113]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[115]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[117]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[119]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[130]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[132]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[137]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[139]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[144]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[146]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[151]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[153]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[155]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[157]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[162]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[164]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[166]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[168]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[126]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[129]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[124]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[129]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted multiple_txns_block@0.ops[1]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced multiple_txns_block@0.ops[5]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@4.ops[2]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@4.ops[4]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@4.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@4.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@4.ops[12]: 'store index#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@4.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@4.ops[6]: 'store index#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@4.ops[12]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Allocated 1 variable/s to x-stack: index#0
debug: shared x-stack for multiple_txns_block@0 -> multiple_txns_for_body@4: index#0
debug: shared x-stack for multiple_txns_for_header_1@2 -> multiple_txns_for_body@4: index#0
debug: shared x-stack for multiple_txns_for_header_2@3 -> multiple_txns_for_body@4: index#0
debug: test_cases.transaction.contract.TransactionContract.multiple_txns f-stack entry: ['tuple_index%0#0']
debug: test_cases.transaction.contract.TransactionContract.multiple_txns f-stack on first store: ['app#3']
debug: Inserted any_txn_block@0.ops[1]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced any_txn_block@0.ops[5]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Inserted any_txn_for_body@4.ops[2]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@4.ops[4]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted any_txn_for_body@4.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@4.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted any_txn_for_body@4.ops[12]: 'store index#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@4.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted any_txn_for_body@4.ops[6]: 'store index#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@4.ops[12]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.transaction.contract.TransactionContract.any_txn
debug: Allocated 1 variable/s to x-stack: txn#0
debug: shared x-stack for any_txn_block@0 -> any_txn_for_body@4: txn#0
debug: shared x-stack for any_txn_for_header_1@2 -> any_txn_for_body@4: txn#0
debug: shared x-stack for any_txn_for_header_2@3 -> any_txn_for_body@4: txn#0
debug: test_cases.transaction.contract.TransactionContract.any_txn f-stack entry: ['tuple_index%0#0']
debug: test_cases.transaction.contract.TransactionContract.any_txn f-stack on first store: ['index#0']
info: Writing transaction/out/contract.approval.teal
info: Writing transaction/out/contract.clear.teal
info: Writing transaction/out/application.json