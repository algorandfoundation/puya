debug: PuyaOptions(paths=['transaction'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, match_algod_bytecode=False, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, cli_template_definitions=[], template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@2: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L20
debug: Sealing block@3: // switch_case_0_L27
debug: Terminated block@3: // switch_case_0_L27
debug: Sealing block@4: // switch_case_1_L29
debug: Terminated block@4: // switch_case_1_L29
debug: Sealing block@5: // switch_case_default_L25
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@3: // ternary_true_L150
debug: Terminated block@3: // ternary_true_L150
debug: Sealing block@4: // ternary_false_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Sealing block@7: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Terminated block@7: // for_body_L151
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#5: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#5: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3) in block@3: // ternary_true_L150
debug: Added result#5 to Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5
debug: Deleting Phi assignment: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4)
debug: Replaced trivial Phi node: let result#4: bytes = φ(result#5 <- block@3, result#5 <- block@4) (result#4) with result#5 in current definition for 1 blocks
debug: Added result#5 to Phi node: let result#2: bytes = φ(result#5 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#5 <- block@5, result#3 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@9: // after_for_L150
debug: Terminated block@9: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@4) in block@4: // after_for_L199
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@4, range_item%1#2 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Sealing block@0: // L16
debug: Terminated block@0: // L16
debug: Sealing block@0: // L40
debug: Terminated block@0: // L40
debug: Sealing block@0: // L51
debug: Terminated block@0: // L51
debug: Sealing block@0: // L68
debug: Terminated block@0: // L68
debug: Sealing block@0: // L77
debug: Terminated block@0: // L77
debug: Sealing block@0: // L85
debug: Terminated block@0: // L85
debug: Sealing block@0: // L111
debug: Terminated block@0: // L111
debug: Looking for 'app' in an unsealed block creating an incomplete Phi: block@1: // for_body_L119
debug: Created Phi assignment: let app#1: uint64 = undefined while trying to resolve 'app' in block@1: // for_body_L119
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@1: // for_body_L119
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@1: // for_body_L119
debug: Terminated block@1: // for_body_L119
debug: Sealing block@2: // for_footer_L118
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L119
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L119
debug: Terminated block@2: // for_footer_L118
debug: Sealing block@3: // for_header_1_L118
debug: Terminated block@3: // for_header_1_L118
debug: Sealing block@4: // for_header_2_L118
debug: Terminated block@4: // for_header_2_L118
debug: Sealing block@1: // for_body_L119
debug: Added app#0 to Phi node: let app#1: uint64 = φ(app#0 <- block@0) in block@0: // L111
debug: Added app#2 to Phi node: let app#1: uint64 = φ(app#0 <- block@0, app#2 <- block@3) in block@3: // for_header_1_L118
debug: Added app#3 to Phi node: let app#1: uint64 = φ(app#0 <- block@0, app#2 <- block@3, app#3 <- block@4) in block@4: // for_header_2_L118
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@0) in block@0: // L111
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3) in block@3: // for_header_1_L118
debug: Added index#3 to Phi node: let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3, index#3 <- block@4) in block@4: // for_header_2_L118
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L111
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3: // for_header_1_L118
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4: // for_header_2_L118
debug: Sealing block@5: // after_for_L118
debug: Terminated block@5: // after_for_L118
debug: Sealing block@0: // L121
debug: Terminated block@0: // L121
debug: Looking for 'txn' in an unsealed block creating an incomplete Phi: block@1: // for_body_L129
debug: Created Phi assignment: let txn#1: uint64 = undefined while trying to resolve 'txn' in block@1: // for_body_L129
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@1: // for_body_L129
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@1: // for_body_L129
debug: Terminated block@1: // for_body_L129
debug: Sealing block@2: // for_footer_L128
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L129
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L129
debug: Terminated block@2: // for_footer_L128
debug: Sealing block@3: // for_header_1_L128
debug: Terminated block@3: // for_header_1_L128
debug: Sealing block@4: // for_header_2_L128
debug: Terminated block@4: // for_header_2_L128
debug: Sealing block@1: // for_body_L129
debug: Added txn#0 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0) in block@0: // L121
debug: Added txn#2 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3) in block@3: // for_header_1_L128
debug: Added txn#3 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3, txn#3 <- block@4) in block@4: // for_header_2_L128
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@0) in block@0: // L121
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3) in block@3: // for_header_1_L128
debug: Added index#3 to Phi node: let index#1: uint64 = φ(index#0 <- block@0, index#2 <- block@3, index#3 <- block@4) in block@4: // for_header_2_L128
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L121
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3: // for_header_1_L128
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4: // for_header_2_L128
debug: Sealing block@5: // after_for_L128
debug: Terminated block@5: // after_for_L128
debug: Sealing block@0: // L131
debug: Terminated block@0: // L131
debug: Looking for 'txn' in an unsealed block creating an incomplete Phi: block@1: // for_body_L139
debug: Created Phi assignment: let txn#1: uint64 = undefined while trying to resolve 'txn' in block@1: // for_body_L139
debug: Terminated block@1: // for_body_L139
debug: Sealing block@2: // for_footer_L138
debug: Looking for 'loop_counter%0' in an unsealed block creating an incomplete Phi: block@1: // for_body_L139
debug: Created Phi assignment: let loop_counter%0#1: uint64 = undefined while trying to resolve 'loop_counter%0' in block@1: // for_body_L139
debug: Terminated block@2: // for_footer_L138
debug: Sealing block@3: // for_header_1_L138
debug: Terminated block@3: // for_header_1_L138
debug: Sealing block@4: // for_header_2_L138
debug: Terminated block@4: // for_header_2_L138
debug: Sealing block@1: // for_body_L139
debug: Added txn#0 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0) in block@0: // L131
debug: Added txn#2 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3) in block@3: // for_header_1_L138
debug: Added txn#3 to Phi node: let txn#1: uint64 = φ(txn#0 <- block@0, txn#2 <- block@3, txn#3 <- block@4) in block@4: // for_header_2_L138
debug: Added loop_counter%0#0 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0) in block@0: // L131
debug: Added loop_counter%0#2 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3) in block@3: // for_header_1_L138
debug: Added loop_counter%0#3 to Phi node: let loop_counter%0#1: uint64 = φ(loop_counter%0#0 <- block@0, loop_counter%0#2 <- block@3, loop_counter%0#3 <- block@4) in block@4: // for_header_2_L138
debug: Sealing block@5: // after_for_L138
debug: Created Phi assignment: let txn1#1: uint64 = undefined while trying to resolve 'txn1' in block@1: // for_body_L139
debug: Added txn1#0 to Phi node: let txn1#1: uint64 = φ(txn1#0 <- block@0) in block@0: // L131
debug: Added txn1#1 to Phi node: let txn1#1: uint64 = φ(txn1#0 <- block@0, txn1#1 <- block@3) in block@3: // for_header_1_L138
debug: Added txn1#1 to Phi node: let txn1#1: uint64 = φ(txn1#0 <- block@0, txn1#1 <- block@3, txn1#1 <- block@4) in block@4: // for_header_2_L138
debug: Replacing trivial Phi node: let txn1#1: uint64 = φ(txn1#0 <- block@0, txn1#1 <- block@3, txn1#1 <- block@4) (txn1#1) with txn1#0
debug: Deleting Phi assignment: let txn1#1: uint64 = φ(txn1#0 <- block@0, txn1#1 <- block@3, txn1#1 <- block@4)
debug: Replaced trivial Phi node: let txn1#1: uint64 = φ(txn1#0 <- block@0, txn1#1 <- block@3, txn1#1 <- block@4) (txn1#1) with txn1#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L138
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Sealing block@1: // create_route_L12
debug: Terminated block@1: // create_route_L12
debug: Sealing block@2: // pay_route_L31
debug: Terminated block@2: // pay_route_L31
debug: Sealing block@3: // key_route_L40
debug: Terminated block@3: // key_route_L40
debug: Sealing block@4: // asset_config_route_L51
debug: Terminated block@4: // asset_config_route_L51
debug: Sealing block@5: // asset_transfer_route_L68
debug: Terminated block@5: // asset_transfer_route_L68
debug: Sealing block@6: // asset_freeze_route_L77
debug: Terminated block@6: // asset_freeze_route_L77
debug: Sealing block@7: // application_call_route_L85
debug: Terminated block@7: // application_call_route_L85
debug: Sealing block@8: // multiple_txns_route_L111
debug: Terminated block@8: // multiple_txns_route_L111
debug: Sealing block@9: // any_txn_route_L121
debug: Terminated block@9: // any_txn_route_L121
debug: Sealing block@10: // group_init_route_L131
debug: Terminated block@10: // group_init_route_L131
debug: Sealing block@11: // switch_case_default_L11
debug: Terminated block@11: // switch_case_default_L11
debug: Sealing block@12: // switch_case_next_L11
debug: Terminated block@12: // switch_case_next_L11
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Output IR to transaction/out/TransactionContract.ssa.ir
info: Optimizing test_cases.transaction.contract.TransactionContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%0#0, value%0#0
debug: Replacing {value%0#0} with awst_tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%10#0, check%0#0
debug: Replacing {check%0#0} with tmp%10#0 made 1 modifications
debug: Found equivalence set: awst_tmp%1#0, value%1#0
debug: Replacing {value%1#0} with awst_tmp%1#0 made 1 modifications
debug: Found equivalence set: tmp%16#0, check%1#0
debug: Replacing {check%1#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: awst_tmp%2#0, value%2#0
debug: Replacing {value%2#0} with awst_tmp%2#0 made 1 modifications
debug: Found equivalence set: tmp%22#0, check%2#0
debug: Replacing {check%2#0} with tmp%22#0 made 1 modifications
debug: Found equivalence set: awst_tmp%3#0, value%3#0
debug: Replacing {value%3#0} with awst_tmp%3#0 made 1 modifications
debug: Found equivalence set: tmp%28#0, check%3#0
debug: Replacing {check%3#0} with tmp%28#0 made 1 modifications
debug: Found equivalence set: awst_tmp%4#0, value%4#0
debug: Replacing {value%4#0} with awst_tmp%4#0 made 1 modifications
debug: Found equivalence set: tmp%34#0, check%4#0
debug: Replacing {check%4#0} with tmp%34#0 made 1 modifications
debug: Found equivalence set: awst_tmp%5#0, value%5#0
debug: Replacing {value%5#0} with awst_tmp%5#0 made 1 modifications
debug: Found equivalence set: tmp%40#0, check%5#0
debug: Replacing {check%5#0} with tmp%40#0 made 1 modifications
debug: Found equivalence set: awst_tmp%6#0, value%6#0
debug: Replacing {value%6#0} with awst_tmp%6#0 made 1 modifications
debug: Found equivalence set: tmp%46#0, check%6#0
debug: Replacing {check%6#0} with tmp%46#0 made 1 modifications
debug: Found equivalence set: awst_tmp%7#0, value%7#0
debug: Replacing {value%7#0} with awst_tmp%7#0 made 1 modifications
debug: Found equivalence set: tmp%49#0, check%7#0
debug: Replacing {check%7#0} with tmp%49#0 made 1 modifications
debug: Found equivalence set: awst_tmp%8#0, value%8#0
debug: Replacing {value%8#0} with awst_tmp%8#0 made 1 modifications
debug: Found equivalence set: tmp%52#0, check%8#0
debug: Replacing {check%8#0} with tmp%52#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 NoOp) to (! tmp%1#0)
debug: Simplified (== tmp%5#0 NoOp) to (! tmp%5#0)
debug: Simplified (== tmp%11#0 NoOp) to (! tmp%11#0)
debug: Simplified (== tmp%17#0 NoOp) to (! tmp%17#0)
debug: Simplified (== tmp%23#0 NoOp) to (! tmp%23#0)
debug: Simplified (== tmp%29#0 NoOp) to (! tmp%29#0)
debug: Simplified (== tmp%35#0 NoOp) to (! tmp%35#0)
debug: Simplified (== tmp%41#0 NoOp) to (! tmp%41#0)
debug: Simplified (== tmp%53#0 NoOp) to (! tmp%53#0)
debug: Simplified (== tmp%62#0 NoOp) to (! tmp%62#0)
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@0: // L11 as a predecessor of block@12: // switch_case_next_L11 due to inlining of block@11: // switch_case_default_L11
debug: simplified terminator of block@0: // L11 from switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(txn,txn,txn)void" => block@9, method "group_init(txn,txn,txn)void" => block@10, * => block@11} to switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(txn,txn,txn)void" => block@9, method "group_init(txn,txn,txn)void" => block@10, * => block@12}
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@0: // L11 from switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(txn,txn,txn)void" => block@9, method "group_init(txn,txn,txn)void" => block@10, * => block@12} to switch tmp%0#0 {method "create()void" => block@1, method "pay(pay)void" => block@2, method "key(keyreg)void" => block@3, method "asset_config(acfg)void" => block@4, method "asset_transfer(axfer)void" => block@5, method "asset_freeze(afrz)void" => block@6, method "application_call(appl)void" => block@7, method "multiple_txns(appl,appl,appl)void" => block@8, method "any_txn(txn,txn,txn)void" => block@9, method "group_init(txn,txn,txn)void" => block@10, * => fail // reject transaction}
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@12: // switch_case_next_L11 into block@11: // switch_case_default_L11
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@11: // switch_case_default_L11
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.pay
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract._common_checks
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%7#0 0u) to (! tmp%7#0)
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.key
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_config
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.application_call
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: txn1#0, app#0
debug: Replacing {app#0} with txn1#0 made 1 modifications
debug: Found equivalence set: txn2#0, app#2
debug: Replacing {app#2} with txn2#0 made 1 modifications
debug: Found equivalence set: txn3#0, app#3
debug: Replacing {app#3} with txn3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@2: // for_footer_L118 from goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5 to goto_nth [block@3, block@4][loop_counter%0#1] else return 
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // for_footer_L118 with block@1: // for_body_L119 in block@3: // for_header_1_L118
debug: Replaced predecessor block@2: // for_footer_L118 with block@1: // for_body_L119 in block@4: // for_header_2_L118
debug: Merged linear block@2: // for_footer_L118 into block@1: // for_body_L119
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // after_for_L118
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.any_txn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: txn1#0, txn#0
debug: Replacing {txn#0} with txn1#0 made 1 modifications
debug: Found equivalence set: txn2#0, txn#2
debug: Replacing {txn#2} with txn2#0 made 1 modifications
debug: Found equivalence set: txn3#0, txn#3
debug: Replacing {txn#3} with txn3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@2: // for_footer_L128 from goto_nth [block@3, block@4][loop_counter%0#1] else goto block@5 to goto_nth [block@3, block@4][loop_counter%0#1] else return 
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // for_footer_L128 with block@1: // for_body_L129 in block@3: // for_header_1_L128
debug: Replaced predecessor block@2: // for_footer_L128 with block@1: // for_body_L129 in block@4: // for_header_2_L128
debug: Merged linear block@2: // for_footer_L128 into block@1: // for_body_L129
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // after_for_L128
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.group_init
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: txn1#0, txn#0
debug: Replacing {txn#0} with txn1#0 made 1 modifications
debug: Found equivalence set: txn2#0, txn#2
debug: Replacing {txn#2} with txn2#0 made 1 modifications
debug: Found equivalence set: txn3#0, txn#3
debug: Replacing {txn#3} with txn3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // for_footer_L138 with block@1: // for_body_L139 in block@3: // for_header_1_L138
debug: Replaced predecessor block@2: // for_footer_L138 with block@1: // for_body_L139 in block@4: // for_header_2_L138
debug: Replaced predecessor block@2: // for_footer_L138 with block@1: // for_body_L139 in block@5: // after_for_L138
debug: Merged linear block@2: // for_footer_L138 into block@1: // for_body_L139
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to transaction/out/TransactionContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.create
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.pay
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract._common_checks
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.key
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_config
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.application_call
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.any_txn
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.group_init
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 2, ending loop
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.approval_program
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.create
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.pay
debug: Removing Phis from test_cases.transaction.contract.TransactionContract._common_checks
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.key
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_config
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.application_call
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.any_txn
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.group_init
debug: Removing Phis from test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.create using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.pay using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract._common_checks using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.key using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_config using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_transfer using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.asset_freeze using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.application_call using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.multiple_txns using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#7, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3]
debug: Coalescing index#0 with [index#7, index#1, index#2, index#3]
debug: Coalescing app#1 with [app#2]
debug: Coalescing resulted in 24 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.any_txn using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#7, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3]
debug: Coalescing index#0 with [index#7, index#1, index#2, index#3]
debug: Coalescing txn#1 with [txn#2]
debug: Coalescing resulted in 24 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.group_init using strategy RootOperandGrouping
debug: Coalescing loop_counter%0#0 with [loop_counter%0#7, loop_counter%0#1, loop_counter%0#2, loop_counter%0#3]
debug: Coalescing txn#1 with [txn#2]
debug: Coalescing resulted in 14 replacement/s
debug: Coalescing local variables in test_cases.transaction.contract.TransactionContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.approval_program
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.create
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.pay
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract._common_checks
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.key
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_config
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_transfer
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.asset_freeze
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.application_call
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.multiple_txns
debug: loc: {app#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn1#0=txn1#0}
debug: pred: {app#1=txn1#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: app#1
debug: to_do: app#1, index#0, loop_counter%0#0
debug: * avail app#1
debug: * avail txn1#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do app#1
debug: loc: {app#1=app#1, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: pred: {app#1=app#1, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: 
debug: to_do: app#1, index#0, loop_counter%0#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do app#1
debug: loc: {app#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn2#0=txn2#0}
debug: pred: {app#1=txn2#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: app#1
debug: to_do: app#1, index#0, loop_counter%0#0
debug: * avail app#1
debug: * avail txn2#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do app#1
debug: loc: {app#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn3#0=txn3#0}
debug: pred: {app#1=txn3#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: app#1
debug: to_do: app#1, index#0, loop_counter%0#0
debug: * avail app#1
debug: * avail txn3#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do app#1
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.any_txn
debug: loc: {txn#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn1#0=txn1#0}
debug: pred: {txn#1=txn1#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, index#0, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn1#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do txn#1
debug: loc: {txn#1=txn#1, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: pred: {txn#1=txn#1, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: 
debug: to_do: txn#1, index#0, loop_counter%0#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do txn#1
debug: loc: {txn#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn2#0=txn2#0}
debug: pred: {txn#1=txn2#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, index#0, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn2#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do txn#1
debug: loc: {txn#1=None, index#0=index#0, loop_counter%0#0=loop_counter%0#0, txn3#0=txn3#0}
debug: pred: {txn#1=txn3#0, index#0=index#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, index#0, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn3#0
debug: * to_do loop_counter%0#0
debug: * to_do index#0
debug: * to_do txn#1
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.group_init
debug: loc: {txn#1=None, loop_counter%0#0=loop_counter%0#0, txn1#0=txn1#0}
debug: pred: {txn#1=txn1#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn1#0
debug: * to_do loop_counter%0#0
debug: * to_do txn#1
debug: loc: {txn#1=txn#1, loop_counter%0#0=loop_counter%0#0}
debug: pred: {txn#1=txn#1, loop_counter%0#0=loop_counter%0#0}
debug: ready: 
debug: to_do: txn#1, loop_counter%0#0
debug: * to_do loop_counter%0#0
debug: * to_do txn#1
debug: loc: {txn#1=None, loop_counter%0#0=loop_counter%0#0, txn2#0=txn2#0}
debug: pred: {txn#1=txn2#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn2#0
debug: * to_do loop_counter%0#0
debug: * to_do txn#1
debug: loc: {txn#1=None, loop_counter%0#0=loop_counter%0#0, txn3#0=txn3#0}
debug: pred: {txn#1=txn3#0, loop_counter%0#0=loop_counter%0#0}
debug: ready: txn#1
debug: to_do: txn#1, loop_counter%0#0
debug: * avail txn#1
debug: * avail txn3#0
debug: * to_do loop_counter%0#0
debug: * to_do txn#1
debug: Sequentializing parallel copies in test_cases.transaction.contract.TransactionContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to transaction/out/TransactionContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[13]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_create_route@1.ops[14]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_create_route@1.ops[16]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[5]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[7]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[10]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[12]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[15]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[17]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[20]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[22]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[24]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[26]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[29]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[31]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_pay_route@2.ops[23]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced main_pay_route@2.ops[34]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[1]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[3]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[5]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[7]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[10]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[12]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[15]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[17]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[20]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[22]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[24]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[26]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[29]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[31]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_key_route@3.ops[23]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_key_route@3.ops[34]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[1]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[3]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[5]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[7]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[10]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[12]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[15]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[17]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[20]: 'store awst_tmp%2#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[22]: 'load awst_tmp%2#0' with 'load awst_tmp%2#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[24]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[26]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[29]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[31]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_asset_config_route@4.ops[23]: 'store awst_tmp%2#0 to l-stack (copy)'
debug: Replaced main_asset_config_route@4.ops[34]: 'load awst_tmp%2#0' with 'load awst_tmp%2#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[1]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[3]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[5]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[7]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[10]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[12]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[15]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[17]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[20]: 'store awst_tmp%3#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[22]: 'load awst_tmp%3#0' with 'load awst_tmp%3#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[24]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[26]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[29]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[31]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_asset_transfer_route@5.ops[23]: 'store awst_tmp%3#0 to l-stack (copy)'
debug: Replaced main_asset_transfer_route@5.ops[34]: 'load awst_tmp%3#0' with 'load awst_tmp%3#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[1]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[3]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[5]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[7]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[10]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[12]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[15]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[17]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[20]: 'store awst_tmp%4#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[22]: 'load awst_tmp%4#0' with 'load awst_tmp%4#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[24]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[26]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[29]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[31]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted main_asset_freeze_route@6.ops[23]: 'store awst_tmp%4#0 to l-stack (copy)'
debug: Replaced main_asset_freeze_route@6.ops[34]: 'load awst_tmp%4#0' with 'load awst_tmp%4#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[1]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[3]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[5]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[7]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[10]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[12]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[15]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[17]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[20]: 'store awst_tmp%5#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[22]: 'load awst_tmp%5#0' with 'load awst_tmp%5#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[24]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[26]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[29]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[31]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted main_application_call_route@7.ops[23]: 'store awst_tmp%5#0 to l-stack (copy)'
debug: Replaced main_application_call_route@7.ops[34]: 'load awst_tmp%5#0' with 'load awst_tmp%5#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[1]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[3]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[5]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[7]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[10]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[12]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[15]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[17]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[20]: 'store awst_tmp%6#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[22]: 'load awst_tmp%6#0' with 'load awst_tmp%6#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[24]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[26]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[29]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[31]: 'load tmp%46#0' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[34]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[36]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[39]: 'store awst_tmp%7#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[41]: 'load awst_tmp%7#0' with 'load awst_tmp%7#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[43]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[45]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[48]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[50]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[53]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[55]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[58]: 'store awst_tmp%8#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[60]: 'load awst_tmp%8#0' with 'load awst_tmp%8#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[62]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[64]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[67]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[69]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[61]: 'store awst_tmp%8#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%8#0' with 'load awst_tmp%8#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[42]: 'store awst_tmp%7#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%7#0' with 'load awst_tmp%7#0 from l-stack (no copy)'
debug: Inserted main_multiple_txns_route@8.ops[23]: 'store awst_tmp%6#0 to l-stack (copy)'
debug: Replaced main_multiple_txns_route@8.ops[74]: 'load awst_tmp%6#0' with 'load awst_tmp%6#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[1]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[3]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[5]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[7]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[10]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[12]: 'load tmp%55#0' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[15]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[17]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[22]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[24]: 'load tmp%58#0' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[29]: 'store tmp%60#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[31]: 'load tmp%60#0' with 'load tmp%60#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[34]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[38]: 'load tmp%61#0' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[27]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[38]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Inserted main_any_txn_route@9.ops[20]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced main_any_txn_route@9.ops[38]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[1]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[3]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[5]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[7]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[10]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[12]: 'load tmp%64#0' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[15]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[17]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[22]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[24]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[29]: 'store tmp%69#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[31]: 'load tmp%69#0' with 'load tmp%69#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[34]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[38]: 'load tmp%70#0' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[27]: 'store tmp%68#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[38]: 'load tmp%68#0' with 'load tmp%68#0 from l-stack (no copy)'
debug: Inserted main_group_init_route@10.ops[20]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced main_group_init_route@10.ops[38]: 'load tmp%66#0' with 'load tmp%66#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.transaction.contract.TransactionContract.approval_program
debug: Inserted pay_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[21]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[23]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[33]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[35]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[30]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[33]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted pay_block@0.ops[29]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced pay_block@0.ops[34]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[6]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[8]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[18]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[20]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[24]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[26]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[30]: 'store reinterpret_bool%2#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[32]: 'load reinterpret_bool%2#0' with 'load reinterpret_bool%2#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[36]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[38]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[40]: 'store reinterpret_bool%3#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[42]: 'load reinterpret_bool%3#0' with 'load reinterpret_bool%3#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[46]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[48]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[51]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[53]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[57]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[59]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[61]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[63]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[67]: 'store reinterpret_bool%4#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[69]: 'load reinterpret_bool%4#0' with 'load reinterpret_bool%4#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[73]: 'store reinterpret_bool%5#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[75]: 'load reinterpret_bool%5#0' with 'load reinterpret_bool%5#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[79]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[81]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[83]: 'store reinterpret_bool%6#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[85]: 'load reinterpret_bool%6#0' with 'load reinterpret_bool%6#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[95]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[97]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[14]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[17]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[92]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[95]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[12]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[17]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted _common_checks_block@0.ops[91]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced _common_checks_block@0.ops[96]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[8]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[10]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[14]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[16]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[18]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[20]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[24]: 'store reinterpret_bool%2#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[26]: 'load reinterpret_bool%2#0' with 'load reinterpret_bool%2#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[30]: 'store reinterpret_bool%3#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[32]: 'load reinterpret_bool%3#0' with 'load reinterpret_bool%3#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[36]: 'store reinterpret_bool%4#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[38]: 'load reinterpret_bool%4#0' with 'load reinterpret_bool%4#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[42]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[44]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[48]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[50]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted key_block@0.ops[52]: 'store reinterpret_bool%5#0 to l-stack (copy)'
debug: Replaced key_block@0.ops[54]: 'load reinterpret_bool%5#0' with 'load reinterpret_bool%5#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[4]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[6]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[10]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[12]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[16]: 'store reinterpret_bool%2#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[18]: 'load reinterpret_bool%2#0' with 'load reinterpret_bool%2#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[22]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[24]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[28]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[30]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[32]: 'store reinterpret_bool%3#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[34]: 'load reinterpret_bool%3#0' with 'load reinterpret_bool%3#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[38]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[40]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[42]: 'store reinterpret_bool%4#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[44]: 'load reinterpret_bool%4#0' with 'load reinterpret_bool%4#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[48]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[50]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[52]: 'store reinterpret_bool%5#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[54]: 'load reinterpret_bool%5#0' with 'load reinterpret_bool%5#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[58]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[60]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[62]: 'store reinterpret_bool%6#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[64]: 'load reinterpret_bool%6#0' with 'load reinterpret_bool%6#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[74]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[76]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[86]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[88]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[98]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[100]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[110]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[112]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[70]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[73]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[83]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[86]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[96]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[99]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[109]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[112]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[68]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[73]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[82]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[87]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[96]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[101]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted asset_config_block@0.ops[110]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced asset_config_block@0.ops[115]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[4]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[6]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[10]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[12]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[22]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[24]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[34]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[36]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[46]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[48]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[18]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[21]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[31]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[34]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[44]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[47]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[16]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[21]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[30]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[35]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_transfer_block@0.ops[44]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced asset_transfer_block@0.ops[49]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[4]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[6]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[16]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[24]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[12]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[15]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted asset_freeze_block@0.ops[10]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced asset_freeze_block@0.ops[15]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[4]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[6]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[10]: 'store reinterpret_bool%1#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[12]: 'load reinterpret_bool%1#0' with 'load reinterpret_bool%1#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[16]: 'store reinterpret_bool%2#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[18]: 'load reinterpret_bool%2#0' with 'load reinterpret_bool%2#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[22]: 'store reinterpret_bool%3#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[24]: 'load reinterpret_bool%3#0' with 'load reinterpret_bool%3#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[28]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[30]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[32]: 'store reinterpret_bool%4#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[34]: 'load reinterpret_bool%4#0' with 'load reinterpret_bool%4#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[38]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[40]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[42]: 'store reinterpret_bool%5#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[44]: 'load reinterpret_bool%5#0' with 'load reinterpret_bool%5#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[48]: 'store reinterpret_bool%6#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[50]: 'load reinterpret_bool%6#0' with 'load reinterpret_bool%6#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[54]: 'store reinterpret_bool%7#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[56]: 'load reinterpret_bool%7#0' with 'load reinterpret_bool%7#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[60]: 'store reinterpret_bool%8#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[62]: 'load reinterpret_bool%8#0' with 'load reinterpret_bool%8#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[66]: 'store reinterpret_bool%9#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[68]: 'load reinterpret_bool%9#0' with 'load reinterpret_bool%9#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[72]: 'store reinterpret_bool%10#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[74]: 'load reinterpret_bool%10#0' with 'load reinterpret_bool%10#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[78]: 'store reinterpret_bool%11#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[80]: 'load reinterpret_bool%11#0' with 'load reinterpret_bool%11#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[84]: 'store reinterpret_bool%12#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[86]: 'load reinterpret_bool%12#0' with 'load reinterpret_bool%12#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[90]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[92]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[94]: 'store reinterpret_bool%13#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[96]: 'load reinterpret_bool%13#0' with 'load reinterpret_bool%13#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[100]: 'store reinterpret_bool%14#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[102]: 'load reinterpret_bool%14#0' with 'load reinterpret_bool%14#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[106]: 'store reinterpret_bool%15#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[108]: 'load reinterpret_bool%15#0' with 'load reinterpret_bool%15#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[113]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[115]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[117]: 'store reinterpret_bool%16#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[119]: 'load reinterpret_bool%16#0' with 'load reinterpret_bool%16#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[130]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[132]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[137]: 'store reinterpret_bool%17#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[139]: 'load reinterpret_bool%17#0' with 'load reinterpret_bool%17#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[144]: 'store reinterpret_bool%18#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[146]: 'load reinterpret_bool%18#0' with 'load reinterpret_bool%18#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[151]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[153]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[155]: 'store reinterpret_bool%19#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[157]: 'load reinterpret_bool%19#0' with 'load reinterpret_bool%19#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[162]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[164]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[166]: 'store reinterpret_bool%20#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[168]: 'load reinterpret_bool%20#0' with 'load reinterpret_bool%20#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[126]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[129]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted application_call_block@0.ops[124]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced application_call_block@0.ops[129]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@1.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@1.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted multiple_txns_for_body@1.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced multiple_txns_for_body@1.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.transaction.contract.TransactionContract.multiple_txns
debug: Allocated 3 variable/s to x-stack: app#1, index#0, loop_counter%0#0
debug: shared x-stack for multiple_txns_block@0 -> multiple_txns_for_body@1: app#1, index#0, loop_counter%0#0
debug: shared x-stack for multiple_txns_for_header_1@3 -> multiple_txns_for_body@1: app#1, index#0, loop_counter%0#0
debug: shared x-stack for multiple_txns_for_header_2@4 -> multiple_txns_for_body@1: app#1, index#0, loop_counter%0#0
debug: Inserted any_txn_for_body@1.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@1.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted any_txn_for_body@1.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced any_txn_for_body@1.ops[9]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.transaction.contract.TransactionContract.any_txn
debug: Allocated 3 variable/s to x-stack: index#0, loop_counter%0#0, txn#1
debug: shared x-stack for any_txn_block@0 -> any_txn_for_body@1: txn#1, index#0, loop_counter%0#0
debug: shared x-stack for any_txn_for_header_1@3 -> any_txn_for_body@1: txn#1, index#0, loop_counter%0#0
debug: shared x-stack for any_txn_for_header_2@4 -> any_txn_for_body@1: txn#1, index#0, loop_counter%0#0
debug: Inserted group_init_for_body@1.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced group_init_for_body@1.ops[14]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted group_init_for_body@1.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced group_init_for_body@1.ops[11]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted group_init_for_body@1.ops[1]: 'store txn#1 to l-stack (copy)'
debug: Replaced group_init_for_body@1.ops[4]: 'load txn#1' with 'load txn#1 from l-stack (no copy)'
debug: Inserted group_init_for_body@1.ops[3]: 'store txn_from_index#0 to l-stack (copy)'
debug: Replaced group_init_for_body@1.ops[8]: 'load txn_from_index#0' with 'load txn_from_index#0 from l-stack (no copy)'
debug: Inserted group_init_for_body@1.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced group_init_for_body@1.ops[13]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted group_init_after_for@5.ops[9]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced group_init_after_for@5.ops[11]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted group_init_after_for@5.ops[5]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced group_init_after_for@5.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted group_init_after_for@5.ops[2]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced group_init_after_for@5.ops[8]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.transaction.contract.TransactionContract.group_init
debug: Allocated 2 variable/s to x-stack: loop_counter%0#0, txn#1
debug: shared x-stack for group_init_block@0 -> group_init_for_body@1: txn#1, loop_counter%0#0
debug: shared x-stack for group_init_for_header_1@3 -> group_init_for_body@1: txn#1, loop_counter%0#0
debug: shared x-stack for group_init_for_header_2@4 -> group_init_for_body@1: txn#1, loop_counter%0#0
info: Writing transaction/out/TransactionContract.arc32.json
info: Writing transaction/out/client_TransactionContract.py
info: Writing transaction/out/TransactionContract.approval.teal
info: Writing transaction/out/TransactionContract.clear.teal
info: Writing transaction/out/TransactionContract.approval.bin
info: Writing transaction/out/TransactionContract.clear.bin