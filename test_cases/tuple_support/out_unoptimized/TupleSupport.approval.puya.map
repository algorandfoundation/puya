{
  "version": 3,
  "sources": [
    "../tuple_support.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;;;AAEI;;AAAA;;AAAA;AAGJ;;;AAEW;AACU;AAAV;AAAP;;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAP;AAGJ;;;AAEQ;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AACO;;AAAW;AAAlB;AAGJ;;;AAES;AACU;AAAR;AAAP;AADK;AAEU;AAAR;AAAP;AAFK;AAGU;AAAR;AAAP;AAEO;AAEQ;AAAR;AAAP;AAFkB;AAGH;AAAR;AAAP;AAHO;AAIQ;AAAR;AAAP;AAJkB;AAKH;AAAR;AAAP;AALO;AAMQ;AAAR;AAAP;AANkB;AAOH;AAAR;AAAP;AAEK;AACU;AAAR;AAAP;AADoB;;;AAEL;AAAR;AAAP;AAFiC;AAGlB;AAAR;AAAP;AAZO;AAeQ;AAAR;AAAP;AAfkB;AAgBH;AAAR;AAAP;AAhBO;AAiBQ;AAAR;AAAP;AAjBkB;AAkBH;AAAR;AAAP;;AAGJ;;;AAEI;;AAAA;;AACS;AACT;AAGJ;;;AAEI;;AAAA;;AACS;AACC;AAAd;AAAc;AAAA;;AAAA;;AAAA;AAAd;;;AACQ;;AAAA;;AAAA;AAAA;;AADM;;AAAA;AAAA;AAAA;;;;;AAEV;;AAAA;;AAAA;AAGJ;;;AAEY;;AACJ;;AACA;;AAAA;AAAA;;AADR;;AAAA;;;;;;AAGI;;;;AAHI;;;;;;;;AAAA;;;;;AAMR;;;AAEI;;AAAA;;AACA;;AAAA;AAAA;;AACiB;AAAA;AAAjB;;AAAA;;AACmB;;AAAA;AACA;;AAAA;AAAnB;;AACqB;AAAA;AACd;AAAA;AAAP;AACA;AAAA;;AAAA;AAGJ;;;AAEI;;AAAW;AAAP;AACJ;;AAAW;AAAP;AAEQ;AAAL;AAAP;AACY;AAAL;AAAP;;AAGJ;;;AAEI;;AAAA;;AAAA;;AACO;;AAAA;;AAAA;;AAAA;;;AAAkC;;AAAA;;AAAA;AAAA;;AAAA;AAAlC;AAAP;AAEO;;AAAA;;AAAA;AAAP;AAEO;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAP;;AAGJ;;;;AA7KA;;;AACQ;AAAa;AAAb;;AAER;;;;;;AACkC;;AAAa;;AAAa;;AAA5C;;;AACJ;AAAJ;AACU;AAAW;AACQ;AAAA;AAAd;AAAf;;AAAA;AACO;AAAA;AAAP;AAFqB;AAAA;AAId;AAAP;AAJU;AAAW;AAKZ;AAAT;AACO;AAAA;AAAP;AANU;AAAW;AASlB;AAAX;;;AATkB;AAUN;;AAViB;AAAX;AAAA;AAaH;AAAP;AAbqB;AAAA;AAcd;AAAP;AAPQ;AAQD;;AAAA;AAAP;AARQ;AASD;AAAP;AAhBU;AAAW;AAkBZ;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAT;;AAlBU;AAmBH;AAAA;AAnBc;AAmBd;AAAA;AAAP;AAImB;;;;;;;;;AAAmB;;;;;;;;AAAlC;;;AAAJ;AACa;;;;;;;;;;;AAAA;AACO;AAAA;AAzBV;AAAW;AAyBgC;AAAA;AAAvC;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;AAAd;;AAAA;AAAA;;AACI;AAAJ;AACI;AAAJ;AACI;AAAJ;AACoB;;;;AAAc;;AAA9B;;;AAAJ;AACqB;AAArB;;;AAGQ;AACA;AACA;AACA;;AACA;;AACA;;AACA;;AACA;;AATR;;;AAYA;;;AACG;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAX;;;AACgB;;;;;;;;;;;AAAJ;AACA;;;AAAD;AAAA;AAAX;;;AACgB;;;;;;;;;;;;AAAJ;AACJ;;;AAE0B;AACX;AAAR;AAAP;AADoC;AAErB;AAAR;AAAP;AACA;;;AArDU;AAAW;AAsDd;AAAP;;AAAA;AAtDqB;AAAX;AAkBkB;;;AAAA;AAAA;;;;;AAXpB;AAKJ;;AALI;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.tuple_support.tuple_support.TupleSupport.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 0 3"
    },
    "7": {
      "op": "bytecblock 0x \"state\""
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "21": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_support.TupleSupport.__init__",
      "op": "callsub __init__"
    },
    "24": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.tuple_support.tuple_support.TupleSupport.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "return",
      "stack_out": []
    },
    "28": {
      "subroutine": "test_cases.tuple_support.tuple_support.get_tuple",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "get_tuple",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "31": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "33": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "35": {
      "retsub": true,
      "op": "retsub"
    },
    "36": {
      "subroutine": "test_cases.tuple_support.tuple_support.single_tuple",
      "params": {},
      "block": "single_tuple",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "39": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "40": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "41": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "42": {
      "op": "assert",
      "stack_out": []
    },
    "43": {
      "retsub": true,
      "op": "retsub"
    },
    "44": {
      "subroutine": "test_cases.tuple_support.tuple_support.get_uint_with_side_effect",
      "params": {},
      "block": "get_uint_with_side_effect",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "47": {
      "op": "pushbytes \"get_uint_with_side_effect called\"",
      "defined_out": [
        "\"get_uint_with_side_effect called\""
      ],
      "stack_out": [
        "\"get_uint_with_side_effect called\""
      ]
    },
    "81": {
      "op": "log",
      "stack_out": []
    },
    "82": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "84": {
      "retsub": true,
      "op": "retsub"
    },
    "85": {
      "subroutine": "test_cases.tuple_support.tuple_support.non_empty_tuple",
      "params": {},
      "block": "non_empty_tuple",
      "stack_in": [],
      "op": "proto 0 2"
    },
    "88": {
      "op": "pushbytes \"non_empty_tuple called\"",
      "defined_out": [
        "\"non_empty_tuple called\""
      ],
      "stack_out": [
        "\"non_empty_tuple called\""
      ]
    },
    "112": {
      "op": "log",
      "stack_out": []
    },
    "113": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "115": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "4"
      ],
      "stack_out": [
        "4",
        "2"
      ]
    },
    "116": {
      "retsub": true,
      "op": "retsub"
    },
    "117": {
      "subroutine": "test_cases.tuple_support.tuple_support.bin_ops",
      "params": {},
      "block": "bin_ops",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "121": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "122": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "assert",
      "stack_out": []
    },
    "124": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "125": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "127": {
      "op": "assert",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "129": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "131": {
      "op": "assert",
      "stack_out": []
    },
    "132": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "133": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "135": {
      "op": "assert",
      "stack_out": []
    },
    "136": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "137": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "139": {
      "op": "assert",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "141": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "143": {
      "op": "assert",
      "stack_out": []
    },
    "144": {
      "op": "intc_1 // 2",
      "stack_out": [
        "2"
      ]
    },
    "145": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "147": {
      "op": "assert",
      "stack_out": []
    },
    "148": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "149": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "151": {
      "op": "assert",
      "stack_out": []
    },
    "152": {
      "op": "intc_1 // 2",
      "stack_out": [
        "2"
      ]
    },
    "153": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "155": {
      "op": "assert",
      "stack_out": []
    },
    "156": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "157": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "159": {
      "op": "assert",
      "stack_out": []
    },
    "160": {
      "op": "pushbytes 0x32",
      "defined_out": [
        "0x32"
      ],
      "stack_out": [
        "0x32"
      ]
    },
    "163": {
      "op": "dup",
      "stack_out": [
        "0x32",
        "0x32"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "165": {
      "op": "assert",
      "stack_out": []
    },
    "166": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "167": {
      "op": "dup",
      "stack_out": [
        "3",
        "3"
      ]
    },
    "168": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "169": {
      "op": "assert",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "171": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "173": {
      "op": "assert",
      "stack_out": []
    },
    "174": {
      "op": "intc_1 // 2",
      "stack_out": [
        "2"
      ]
    },
    "175": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "176": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "177": {
      "op": "assert",
      "stack_out": []
    },
    "178": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "179": {
      "op": "dup",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "181": {
      "op": "assert",
      "stack_out": []
    },
    "182": {
      "op": "intc_1 // 2",
      "stack_out": [
        "2"
      ]
    },
    "183": {
      "op": "dup",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "185": {
      "op": "assert",
      "stack_out": []
    },
    "186": {
      "retsub": true,
      "op": "retsub"
    },
    "187": {
      "subroutine": "test_cases.tuple_support.tuple_support.bytes_combine",
      "params": {
        "arg.0#0": "bytes",
        "arg.1#0": "bytes"
      },
      "block": "bytes_combine",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "190": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "192": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "195": {
      "retsub": true,
      "op": "retsub"
    },
    "196": {
      "subroutine": "test_cases.tuple_support.tuple_support.bytes_multiply",
      "params": {
        "arg.0#0": "bytes",
        "arg.1#0": "uint64"
      },
      "block": "bytes_multiply",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "199": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "201": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0",
        "count#0"
      ],
      "stack_out": [
        "b#0",
        "count#0"
      ]
    },
    "203": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "b#0",
        "count#0",
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0"
      ]
    },
    "204": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "b#0",
        "count#0",
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "1"
      ]
    },
    "205": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "b#0",
        "count#0",
        "result#0"
      ]
    },
    "206": {
      "op": "intc_2 // 0",
      "defined_out": [
        "_i#0",
        "b#0",
        "count#0",
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ]
    },
    "207": {
      "block": "bytes_multiply_for_header@1",
      "stack_in": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "_i#0"
      ]
    },
    "209": {
      "op": "frame_dig 1",
      "defined_out": [
        "_i#0",
        "count#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "_i#0",
        "count#0"
      ]
    },
    "211": {
      "op": "<",
      "defined_out": [
        "_i#0",
        "continue_looping%0#0",
        "count#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "continue_looping%0#0"
      ]
    },
    "212": {
      "op": "bz bytes_multiply_after_for@4",
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ]
    },
    "215": {
      "block": "bytes_multiply_for_body@2",
      "stack_in": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "result#0"
      ]
    },
    "217": {
      "op": "frame_dig 0",
      "defined_out": [
        "b#0",
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "result#0",
        "b#0"
      ]
    },
    "219": {
      "op": "concat",
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "result#0"
      ]
    },
    "220": {
      "op": "frame_bury 2",
      "defined_out": [
        "b#0",
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ]
    },
    "222": {
      "block": "bytes_multiply_for_footer@3",
      "stack_in": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "_i#0"
      ]
    },
    "224": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_i#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "_i#0",
        "1"
      ]
    },
    "225": {
      "op": "+",
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "_i#0"
      ]
    },
    "226": {
      "op": "frame_bury 3",
      "defined_out": [
        "_i#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ]
    },
    "228": {
      "op": "b bytes_multiply_for_header@1"
    },
    "231": {
      "block": "bytes_multiply_after_for@4",
      "stack_in": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "b#0",
        "count#0",
        "result#0",
        "_i#0",
        "result#0"
      ]
    },
    "233": {
      "op": "frame_bury 0"
    },
    "235": {
      "retsub": true,
      "op": "retsub"
    },
    "236": {
      "subroutine": "test_cases.tuple_support.tuple_support.add_three_values",
      "params": {
        "values.0#0": "uint64",
        "values.1#0": "uint64",
        "values.2#0": "uint64"
      },
      "block": "add_three_values",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "239": {
      "op": "intc_2 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "240": {
      "op": "dup",
      "defined_out": [
        "loop_counter%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "241": {
      "op": "frame_dig -3",
      "defined_out": [
        "loop_counter%0#0",
        "total#0",
        "value#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "value#0"
      ]
    },
    "243": {
      "block": "add_three_values_for_body@1",
      "stack_in": [
        "total#0",
        "loop_counter%0#0",
        "value#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "value#0",
        "total#0"
      ]
    },
    "245": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "246": {
      "op": "frame_bury 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "248": {
      "block": "add_three_values_for_footer@2",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "250": {
      "op": "switch add_three_values_for_header_1@3 add_three_values_for_header_2@4",
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "256": {
      "block": "add_three_values_after_for@5",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "total#0"
      ]
    },
    "257": {
      "block": "add_three_values_for_header_2@4",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "op": "intc_1 // 2",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "258": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "260": {
      "op": "frame_dig -1",
      "defined_out": [
        "loop_counter%0#0",
        "value#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "value#0"
      ]
    },
    "262": {
      "op": "b add_three_values_for_body@1"
    },
    "265": {
      "block": "add_three_values_for_header_1@3",
      "stack_in": [
        "total#0",
        "loop_counter%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "loop_counter%0#0"
      ]
    },
    "266": {
      "op": "frame_bury 1",
      "defined_out": [
        "loop_counter%0#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0"
      ]
    },
    "268": {
      "op": "frame_dig -2",
      "defined_out": [
        "loop_counter%0#0",
        "value#0"
      ],
      "stack_out": [
        "total#0",
        "loop_counter%0#0",
        "value#0"
      ]
    },
    "270": {
      "op": "b add_three_values_for_body@1"
    },
    "273": {
      "subroutine": "test_cases.tuple_support.tuple_support.addw2",
      "params": {
        "a.0#0": "uint64",
        "a.1#0": "uint64",
        "b.0#0": "uint64",
        "b.1#0": "uint64"
      },
      "block": "addw2",
      "stack_in": [],
      "op": "proto 4 3"
    },
    "276": {
      "op": "frame_dig -4",
      "defined_out": [
        "a_hi#0"
      ],
      "stack_out": [
        "a_hi#0"
      ]
    },
    "278": {
      "op": "frame_dig -3",
      "defined_out": [
        "a_hi#0",
        "a_lo#0"
      ],
      "stack_out": [
        "a_hi#0",
        "a_lo#0"
      ]
    },
    "280": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_hi#0",
        "a_lo#0",
        "b_hi#0"
      ],
      "stack_out": [
        "a_hi#0",
        "a_lo#0",
        "b_hi#0"
      ]
    },
    "282": {
      "op": "swap",
      "stack_out": [
        "a_hi#0",
        "b_hi#0",
        "a_lo#0"
      ]
    },
    "283": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_hi#0",
        "a_lo#0",
        "b_hi#0",
        "b_lo#0"
      ],
      "stack_out": [
        "a_hi#0",
        "b_hi#0",
        "a_lo#0",
        "b_lo#0"
      ]
    },
    "285": {
      "op": "addw",
      "defined_out": [
        "a_hi#0",
        "b_hi#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "a_hi#0",
        "b_hi#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "286": {
      "op": "swap",
      "defined_out": [
        "a_hi#0",
        "b_hi#0",
        "lo_carry#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "a_hi#0",
        "b_hi#0",
        "tuple_assignment%1#0",
        "lo_carry#0"
      ]
    },
    "287": {
      "op": "cover 2",
      "defined_out": [
        "a_hi#0",
        "b_hi#0",
        "c_lo#0",
        "lo_carry#0"
      ],
      "stack_out": [
        "a_hi#0",
        "lo_carry#0",
        "b_hi#0",
        "c_lo#0"
      ]
    },
    "289": {
      "op": "cover 3",
      "stack_out": [
        "c_lo#0",
        "a_hi#0",
        "lo_carry#0",
        "b_hi#0"
      ]
    },
    "291": {
      "op": "uncover 2",
      "stack_out": [
        "c_lo#0",
        "lo_carry#0",
        "b_hi#0",
        "a_hi#0"
      ]
    },
    "293": {
      "op": "addw",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "lo_carry#0"
      ],
      "stack_out": [
        "c_lo#0",
        "lo_carry#0",
        "hi_carry1#0",
        "c_mid#0"
      ]
    },
    "294": {
      "op": "uncover 2",
      "stack_out": [
        "c_lo#0",
        "hi_carry1#0",
        "c_mid#0",
        "lo_carry#0"
      ]
    },
    "296": {
      "op": "addw",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "hi_carry2#0"
      ],
      "stack_out": [
        "c_lo#0",
        "hi_carry1#0",
        "hi_carry2#0",
        "c_mid#0"
      ]
    },
    "297": {
      "op": "cover 2",
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "hi_carry1#0",
        "hi_carry2#0"
      ]
    },
    "299": {
      "op": "addw",
      "defined_out": [
        "c_lo#0",
        "c_mid#0",
        "tuple_assignment%6#0",
        "tuple_assignment%7#0"
      ],
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "tuple_assignment%6#0",
        "tuple_assignment%7#0"
      ]
    },
    "300": {
      "op": "swap",
      "defined_out": [
        "c_hi#0",
        "c_lo#0",
        "c_mid#0",
        "did_overflow#0"
      ],
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "c_hi#0",
        "did_overflow#0"
      ]
    },
    "301": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "c_hi#0",
        "c_lo#0",
        "c_mid#0",
        "did_overflow#0"
      ],
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "c_hi#0",
        "did_overflow#0",
        "0"
      ]
    },
    "302": {
      "op": "==",
      "defined_out": [
        "c_hi#0",
        "c_lo#0",
        "c_mid#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "c_hi#0",
        "tmp%0#0"
      ]
    },
    "303": {
      "error": "is such a thing even possible? \ud83d\udc7d",
      "op": "assert // is such a thing even possible? \ud83d\udc7d",
      "stack_out": [
        "c_lo#0",
        "c_mid#0",
        "c_hi#0"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "c_lo#0",
        "c_hi#0",
        "c_mid#0"
      ]
    },
    "305": {
      "op": "uncover 2",
      "stack_out": [
        "c_hi#0",
        "c_mid#0",
        "c_lo#0"
      ]
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "subroutine": "test_cases.tuple_support.tuple_support.test_tuple_swap",
      "params": {
        "zero#0": "uint64"
      },
      "block": "test_tuple_swap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "311": {
      "op": "frame_dig -1",
      "defined_out": [
        "zero#0 (copy)"
      ],
      "stack_out": [
        "zero#0 (copy)"
      ]
    },
    "313": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "zero#0 (copy)"
      ],
      "stack_out": [
        "zero#0 (copy)",
        "1"
      ]
    },
    "314": {
      "op": "+",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "315": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#0",
        "zero#0 (copy)"
      ]
    },
    "317": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "a#0",
        "zero#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "zero#0 (copy)",
        "2"
      ]
    },
    "318": {
      "op": "+",
      "defined_out": [
        "a#1",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#1"
      ]
    },
    "319": {
      "op": "intc_1 // 2",
      "stack_out": [
        "b#0",
        "a#1",
        "2"
      ]
    },
    "320": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#0"
      ]
    },
    "321": {
      "error": "a should be two",
      "op": "assert // a should be two",
      "stack_out": [
        "b#0"
      ]
    },
    "322": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "1"
      ]
    },
    "323": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "324": {
      "error": "b should be one",
      "op": "assert // b should be one",
      "stack_out": []
    },
    "325": {
      "retsub": true,
      "op": "retsub"
    },
    "326": {
      "subroutine": "test_cases.tuple_support.tuple_support.slicing",
      "params": {
        "values.0#0": "uint64",
        "values.1#0": "uint64",
        "values.2#0": "uint64",
        "values.3#0": "uint64",
        "values.4#0": "uint64",
        "values.5#0": "uint64",
        "values.6#0": "uint64",
        "values.7#0": "uint64"
      },
      "block": "slicing",
      "stack_in": [],
      "op": "proto 8 0"
    },
    "329": {
      "op": "frame_dig -8",
      "defined_out": [
        "one_to_three.0#0"
      ],
      "stack_out": [
        "one_to_three.0#0"
      ]
    },
    "331": {
      "op": "frame_dig -7",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0"
      ]
    },
    "333": {
      "op": "frame_dig -6",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0"
      ]
    },
    "335": {
      "op": "dig 2",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.1#0",
        "one_to_three.2#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.0#0 (copy)"
      ]
    },
    "337": {
      "op": "dig 2",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.1#0",
        "one_to_three.1#0 (copy)",
        "one_to_three.2#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.1#0 (copy)"
      ]
    },
    "339": {
      "op": "dig 2",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.1#0",
        "one_to_three.1#0 (copy)",
        "one_to_three.2#0",
        "one_to_three.2#0 (copy)"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.1#0 (copy)",
        "one_to_three.2#0 (copy)"
      ]
    },
    "341": {
      "callsub": "test_cases.tuple_support.tuple_support.add_three_values",
      "op": "callsub add_three_values",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0"
      ]
    },
    "344": {
      "op": "frame_dig -8",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "values.0#0 (copy)"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "values.0#0 (copy)"
      ]
    },
    "346": {
      "op": "frame_dig -7",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "values.0#0 (copy)",
        "values.1#0 (copy)"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "values.0#0 (copy)",
        "values.1#0 (copy)"
      ]
    },
    "348": {
      "op": "+",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "349": {
      "op": "frame_dig -6",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%1#0",
        "values.2#0 (copy)"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%1#0",
        "values.2#0 (copy)"
      ]
    },
    "351": {
      "op": "+",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%3#0"
      ]
    },
    "353": {
      "op": "assert",
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0"
      ]
    },
    "354": {
      "op": "dig 1",
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.1#0 (copy)"
      ]
    },
    "356": {
      "op": "dig 2",
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.1#0 (copy)",
        "one_to_three.1#0 (copy)"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%4#0"
      ]
    },
    "359": {
      "op": "assert",
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0"
      ]
    },
    "360": {
      "op": "dig 2",
      "stack_out": [
        "one_to_three.0#0",
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.0#0 (copy)"
      ]
    },
    "362": {
      "op": "uncover 3",
      "stack_out": [
        "one_to_three.1#0",
        "one_to_three.2#0",
        "one_to_three.0#0 (copy)",
        "one_to_three.0#0"
      ]
    },
    "364": {
      "op": "==",
      "defined_out": [
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%5#0"
      ]
    },
    "365": {
      "op": "dig 2",
      "stack_out": [
        "one_to_three.1#0",
        "one_to_three.2#0",
        "tmp%5#0",
        "one_to_three.1#0 (copy)"
      ]
    },
    "367": {
      "op": "uncover 3",
      "stack_out": [
        "one_to_three.2#0",
        "tmp%5#0",
        "one_to_three.1#0 (copy)",
        "one_to_three.1#0"
      ]
    },
    "369": {
      "op": "==",
      "defined_out": [
        "one_to_three.2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "one_to_three.2#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "370": {
      "op": "&&",
      "defined_out": [
        "one_to_three.2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "one_to_three.2#0",
        "tmp%7#0"
      ]
    },
    "371": {
      "op": "dig 1",
      "stack_out": [
        "one_to_three.2#0",
        "tmp%7#0",
        "one_to_three.2#0 (copy)"
      ]
    },
    "373": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "one_to_three.2#0 (copy)",
        "one_to_three.2#0"
      ]
    },
    "375": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "376": {
      "op": "&&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "377": {
      "op": "assert",
      "stack_out": []
    },
    "378": {
      "retsub": true,
      "op": "retsub"
    },
    "379": {
      "subroutine": "test_cases.tuple_support.tuple_support.test_empty",
      "params": {},
      "block": "test_empty",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "382": {
      "retsub": true,
      "op": "retsub"
    },
    "383": {
      "subroutine": "test_cases.tuple_support.tuple_support.TupleSupport.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "386": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\""
      ],
      "stack_out": [
        "\"state\""
      ]
    },
    "387": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"state\"",
        "0"
      ],
      "stack_out": [
        "\"state\"",
        "0"
      ]
    },
    "388": {
      "op": "app_global_put",
      "stack_out": []
    },
    "389": {
      "retsub": true,
      "op": "retsub"
    },
    "390": {
      "subroutine": "test_cases.tuple_support.tuple_support.TupleSupport.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "393": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "394": {
      "op": "dupn 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "396": {
      "op": "pushint 101 // 101",
      "defined_out": [
        "101"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "101"
      ]
    },
    "398": {
      "op": "pushint 102 // 102",
      "defined_out": [
        "101",
        "102"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "101",
        "102"
      ]
    },
    "400": {
      "op": "pushint 103 // 103",
      "defined_out": [
        "101",
        "102",
        "103"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "101",
        "102",
        "103"
      ]
    },
    "402": {
      "callsub": "test_cases.tuple_support.tuple_support.add_three_values",
      "op": "callsub add_three_values",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "total#0"
      ]
    },
    "405": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%0#0"
      ]
    },
    "406": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "407": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "408": {
      "op": "intc_1 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "409": {
      "op": "addw",
      "defined_out": [
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tuple_assignment%0#0",
        "tuple_assignment%1#0"
      ]
    },
    "410": {
      "op": "swap",
      "defined_out": [
        "did_overflow#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tuple_assignment%1#0",
        "did_overflow#0"
      ]
    },
    "411": {
      "op": "bytec_1 // \"state\"",
      "defined_out": [
        "\"state\"",
        "did_overflow#0",
        "tuple_assignment%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tuple_assignment%1#0",
        "did_overflow#0",
        "\"state\""
      ]
    },
    "412": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "did_overflow#0",
        "\"state\"",
        "tuple_assignment%1#0"
      ]
    },
    "414": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "did_overflow#0"
      ]
    },
    "415": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "did_overflow#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "did_overflow#0",
        "0"
      ]
    },
    "416": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%1#0"
      ]
    },
    "417": {
      "error": "overflow!",
      "op": "assert // overflow!",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "418": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "2"
      ]
    },
    "419": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "2",
        "2"
      ]
    },
    "420": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%2#0"
      ]
    },
    "421": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "422": {
      "op": "intc_0 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "423": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "424": {
      "op": "addw",
      "defined_out": [
        "result.0#0",
        "result.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "result.0#0",
        "result.1#0"
      ]
    },
    "425": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "result.0#0"
      ]
    },
    "426": {
      "op": "intc_2 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "result.0#0",
        "0"
      ]
    },
    "427": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%3#0"
      ]
    },
    "428": {
      "error": "overflow!",
      "op": "assert // overflow!",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "429": {
      "op": "intc_0 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "430": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "431": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%4#0"
      ]
    },
    "432": {
      "op": "bz approval_program_else_body@2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "435": {
      "block": "approval_program_if_body@1",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.0#0"
      ]
    },
    "436": {
      "op": "frame_bury 3",
      "defined_out": [
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "438": {
      "op": "intc_1 // 2",
      "defined_out": [
        "tup.0#0",
        "tup.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ]
    },
    "439": {
      "block": "approval_program_after_if_else@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "1"
      ]
    },
    "440": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "1",
        "1"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "tmp%5#0"
      ]
    },
    "442": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ]
    },
    "443": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "2"
      ]
    },
    "444": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "2",
        "2"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "tmp%6#0"
      ]
    },
    "446": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ]
    },
    "447": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "3"
      ]
    },
    "448": {
      "op": "frame_dig 3",
      "defined_out": [
        "3",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "3",
        "tup.0#0"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "tmp%7#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "tmp%7#0"
      ]
    },
    "451": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ]
    },
    "452": {
      "op": "intc_3 // 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0",
        "3"
      ]
    },
    "453": {
      "op": "==",
      "defined_out": [
        "tmp%8#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%8#0"
      ]
    },
    "454": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "455": {
      "op": "intc_0 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "456": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "457": {
      "callsub": "test_cases.tuple_support.tuple_support.get_tuple",
      "op": "callsub get_tuple",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "460": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "461": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%1#0"
      ]
    },
    "463": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "465": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "466": {
      "op": "frame_bury 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%1#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "awst_tmp%0#0 (copy)",
        "awst_tmp%0#0"
      ]
    },
    "469": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%9#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "tmp%9#0"
      ]
    },
    "470": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "tmp%9#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%1#0",
        "tmp%9#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "472": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%9#0",
        "awst_tmp%1#0 (copy)",
        "awst_tmp%1#0"
      ]
    },
    "474": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%10#0",
        "tmp%9#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "475": {
      "op": "||",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "tmp%11#0",
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%11#0"
      ]
    },
    "476": {
      "op": "bz approval_program_ternary_false@5",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "479": {
      "block": "approval_program_ternary_true@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.0#0"
      ]
    },
    "481": {
      "op": "frame_bury 2",
      "defined_out": [
        "ternary_result%0.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "483": {
      "op": "frame_dig 1",
      "defined_out": [
        "ternary_result%0.0#0",
        "ternary_result%0.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.1#0"
      ]
    },
    "485": {
      "block": "approval_program_ternary_merge@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "m#0",
        "n#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "n#0",
        "m#0"
      ]
    },
    "487": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "m#0",
        "n#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "n#0",
        "m#0",
        "1"
      ]
    },
    "488": {
      "op": "==",
      "defined_out": [
        "n#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "n#0",
        "tmp%12#0"
      ]
    },
    "489": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%12#0",
        "n#0"
      ]
    },
    "490": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "n#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%12#0",
        "n#0",
        "2"
      ]
    },
    "491": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "492": {
      "op": "&&",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%14#0"
      ]
    },
    "493": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "494": {
      "op": "pushbytes 0x48656c6c6f2c20",
      "defined_out": [
        "0x48656c6c6f2c20"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x48656c6c6f2c20"
      ]
    },
    "503": {
      "op": "pushbytes 0x776f726c6421",
      "defined_out": [
        "0x48656c6c6f2c20",
        "0x776f726c6421"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x48656c6c6f2c20",
        "0x776f726c6421"
      ]
    },
    "511": {
      "callsub": "test_cases.tuple_support.tuple_support.bytes_combine",
      "op": "callsub bytes_combine",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%15#0"
      ]
    },
    "514": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "515": {
      "op": "pushint 18446744073709551615 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "18446744073709551615"
      ]
    },
    "526": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "18446744073709551615",
        "18446744073709551615"
      ]
    },
    "527": {
      "op": "addw",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "528": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%16#0"
      ]
    },
    "529": {
      "op": "intc_0 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%16#0",
        "1"
      ]
    },
    "530": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%16#0",
        "1",
        "2"
      ]
    },
    "531": {
      "op": "addw",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%18#0"
      ]
    },
    "533": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%16#0"
      ]
    },
    "535": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%19#0",
        "tmp%18#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "537": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%19#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "539": {
      "op": "uncover 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "541": {
      "callsub": "test_cases.tuple_support.tuple_support.addw2",
      "op": "callsub addw2",
      "defined_out": [
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tuple_assignment%2#0",
        "tuple_assignment%3#0",
        "tuple_assignment%4#0"
      ]
    },
    "544": {
      "op": "cover 2",
      "defined_out": [
        "hi#0",
        "mid#0",
        "tuple_assignment%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tuple_assignment%4#0",
        "hi#0",
        "mid#0"
      ]
    },
    "546": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "mid#0",
        "tuple_assignment%4#0",
        "hi#0"
      ]
    },
    "548": {
      "op": "swap",
      "defined_out": [
        "hi#0",
        "lo#0",
        "mid#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "mid#0",
        "hi#0",
        "lo#0"
      ]
    },
    "549": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "lo#0",
        "mid#0",
        "hi#0"
      ]
    },
    "551": {
      "op": "itob",
      "defined_out": [
        "lo#0",
        "mid#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "lo#0",
        "mid#0",
        "tmp%20#0"
      ]
    },
    "552": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "lo#0",
        "mid#0"
      ]
    },
    "553": {
      "op": "itob",
      "defined_out": [
        "lo#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "lo#0",
        "tmp%21#0"
      ]
    },
    "554": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "lo#0"
      ]
    },
    "555": {
      "op": "itob",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%22#0"
      ]
    },
    "556": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "557": {
      "op": "pushbytes 0x6e61",
      "defined_out": [
        "0x6e61"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x6e61"
      ]
    },
    "561": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0x6e61",
        "5"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x6e61",
        "5"
      ]
    },
    "563": {
      "callsub": "test_cases.tuple_support.tuple_support.bytes_multiply",
      "op": "callsub bytes_multiply",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%23#0"
      ]
    },
    "566": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "567": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0"
      ]
    },
    "568": {
      "callsub": "test_cases.tuple_support.tuple_support.test_tuple_swap",
      "op": "callsub test_tuple_swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "571": {
      "op": "intc_0 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "572": {
      "op": "intc_1 // 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "573": {
      "op": "intc_3 // 3",
      "defined_out": [
        "1",
        "2",
        "3"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3"
      ]
    },
    "574": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1",
        "2",
        "3",
        "4"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "576": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "578": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "580": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "582": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "584": {
      "callsub": "test_cases.tuple_support.tuple_support.slicing",
      "op": "callsub slicing",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "587": {
      "callsub": "test_cases.tuple_support.tuple_support.bin_ops",
      "op": "callsub bin_ops"
    },
    "590": {
      "callsub": "test_cases.tuple_support.tuple_support.non_empty_tuple",
      "op": "callsub non_empty_tuple",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%2#0",
        "awst_tmp%3#0"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0"
      ]
    },
    "594": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%2#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%3#0",
        "awst_tmp%2#0 (copy)",
        "awst_tmp%2#0"
      ]
    },
    "595": {
      "op": "==",
      "defined_out": [
        "awst_tmp%3#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%3#0",
        "tmp%24#0"
      ]
    },
    "596": {
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%3#0",
        "awst_tmp%3#0 (copy)",
        "tmp%24#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%3#0",
        "tmp%24#0",
        "awst_tmp%3#0 (copy)"
      ]
    },
    "598": {
      "op": "uncover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%24#0",
        "awst_tmp%3#0 (copy)",
        "awst_tmp%3#0"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "601": {
      "op": "||",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%26#0"
      ]
    },
    "602": {
      "op": "bz approval_program_after_if_else@8",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "605": {
      "block": "approval_program_if_body@7",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "pushbytes \"not empty\"",
      "defined_out": [
        "\"not empty\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "\"not empty\""
      ]
    },
    "616": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "617": {
      "block": "approval_program_after_if_else@8",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "callsub": "test_cases.tuple_support.tuple_support.get_uint_with_side_effect",
      "op": "callsub get_uint_with_side_effect",
      "defined_out": [
        "awst_tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%4#0"
      ]
    },
    "620": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%4#0",
        "awst_tmp%4#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "awst_tmp%4#0 (copy)",
        "awst_tmp%4#0"
      ]
    },
    "621": {
      "op": "==",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%27#0"
      ]
    },
    "622": {
      "op": "bz approval_program_after_if_else@10",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "625": {
      "block": "approval_program_if_body@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "pushbytes \"not empty2\"",
      "defined_out": [
        "\"not empty2\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "\"not empty2\""
      ]
    },
    "637": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "638": {
      "block": "approval_program_after_if_else@10",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "callsub": "test_cases.tuple_support.tuple_support.single_tuple",
      "op": "callsub single_tuple"
    },
    "641": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0"
      ]
    },
    "642": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0",
        "0"
      ]
    },
    "643": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%28#0"
      ]
    },
    "644": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "645": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x"
      ]
    },
    "646": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "0x",
        "0x"
      ]
    },
    "647": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%29#0"
      ]
    },
    "648": {
      "op": "assert",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "649": {
      "callsub": "test_cases.tuple_support.tuple_support.test_empty",
      "op": "callsub test_empty"
    },
    "652": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1"
      ]
    },
    "653": {
      "op": "intc_1 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "1",
        "2"
      ]
    },
    "654": {
      "op": "+",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tmp%30#0"
      ]
    },
    "655": {
      "op": "frame_bury 0"
    },
    "657": {
      "retsub": true,
      "op": "retsub"
    },
    "658": {
      "block": "approval_program_ternary_false@5",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "intc_1 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "2"
      ]
    },
    "659": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "2",
        "1"
      ]
    },
    "660": {
      "callsub": "test_cases.tuple_support.tuple_support.get_tuple",
      "op": "callsub get_tuple",
      "defined_out": [
        "ternary_result%0.0#0",
        "ternary_result%0.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.0#0",
        "ternary_result%0.1#0"
      ]
    },
    "663": {
      "op": "swap",
      "defined_out": [
        "ternary_result%0.0#0",
        "ternary_result%0.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.1#0",
        "ternary_result%0.0#0"
      ]
    },
    "664": {
      "op": "frame_bury 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "ternary_result%0.1#0"
      ]
    },
    "666": {
      "op": "b approval_program_ternary_merge@6"
    },
    "669": {
      "block": "approval_program_else_body@2",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ],
      "op": "intc_3 // 3",
      "defined_out": [
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.0#0"
      ]
    },
    "670": {
      "op": "frame_bury 3",
      "defined_out": [
        "tup.0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0"
      ]
    },
    "672": {
      "op": "intc_3 // 3",
      "defined_out": [
        "tup.0#0",
        "tup.1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "ternary_result%0.0#0",
        "tup.0#0",
        "tup.1#0"
      ]
    },
    "673": {
      "op": "b approval_program_after_if_else@3"
    }
  }
}